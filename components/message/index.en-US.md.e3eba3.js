(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{3171:function(e,t){e.exports={content:["section",["p","Display global messages as feedback in response to user operations."],["h2","When To Use"],["ul",["li",["p","To provide feedback such as success, warning, error etc."]],["li",["p","A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt."]]]],meta:{category:"Components",type:"Feedback",noinstant:!0,title:"Message",cover:"https://gw.alipayobjects.com/zos/alicdn/hAkKTIW0K/Message.svg",filename:"components/message/index.en-US.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#When-To-Use",title:"When To Use"},"When To Use"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]],["li",["a",{className:"bisheng-toc-h2",href:"#FAQ",title:"FAQ"},"FAQ"]]],api:["section",["h2","API"],["p","This components provides some static methods, with usage and arguments as following:"],["ul",["li",["p",["code","message.success(content, [duration], onClose)"]]],["li",["p",["code","message.error(content, [duration], onClose)"]]],["li",["p",["code","message.info(content, [duration], onClose)"]]],["li",["p",["code","message.warning(content, [duration], onClose)"]]],["li",["p",["code","message.warn(content, [duration], onClose)"]," // alias of warning"]],["li",["p",["code","message.loading(content, [duration], onClose)"]]]],["table",["thead",["tr",["th","Argument"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","content"],["td","The content of the message"],["td","ReactNode ","|"," config"],["td","-"]],["tr",["td","duration"],["td","Time(seconds) before auto-dismiss, don't dismiss if set to 0"],["td","number"],["td","1.5"]],["tr",["td","onClose"],["td","Specify a function that will be called when the message is closed"],["td","function"],["td","-"]]]],["p",["code","afterClose"]," can be called in thenable interface:"],["ul",["li",["p",["code","message[level](content, [duration]).then(afterClose)"]]],["li",["p",["code","message[level](content, [duration], onClose).then(afterClose)"]]]],["p","where ",["code","level"]," refers one static methods of ",["code","message"],". The result of ",["code","then"]," method will be a Promise."],["p","Supports passing parameters wrapped in an object:"],["ul",["li",["p",["code","message.open(config)"]]],["li",["p",["code","message.success(config)"]]],["li",["p",["code","message.error(config)"]]],["li",["p",["code","message.info(config)"]]],["li",["p",["code","message.warning(config)"]]],["li",["p",["code","message.warn(config)"]," // alias of warning"]],["li",["p",["code","message.loading(config)"]]]],["p","The properties of config are as follows:"],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","className"],["td","Customized CSS class"],["td","string"],["td","-"]],["tr",["td","content"],["td","The content of the message"],["td","ReactNode"],["td","-"]],["tr",["td","duration"],["td","Time(seconds) before auto-dismiss, don't dismiss if set to 0"],["td","number"],["td","3"]],["tr",["td","icon"],["td","Customized Icon"],["td","ReactNode"],["td","-"]],["tr",["td","key"],["td","The unique identifier of the Message"],["td","string ","|"," number"],["td","-"]],["tr",["td","style"],["td","Customized inline style"],["td",["a",{title:null,href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794"},"CSSProperties"]],["td","-"]],["tr",["td","onClose"],["td","Specify a function that will be called when the message is closed"],["td","function"],["td","-"]]]],["h3","Global static methods"],["p","Methods for global configuration and destruction are also provided:"],["ul",["li",["p",["code","message.config(options)"]]],["li",["p",["code","message.destroy()"]]]],["blockquote",["p","use ",["code","message.destroy(key)"]," to remove a message\u3002"]],["h4","message.config"],["blockquote",["p","When you use ",["code","ConfigProvider"]," for global configuration, the system will automatically start RTL mode by default.(4.3.0+)"],["p","When you want to use it alone, you can start the RTL mode through the following settings."]],["pre",{lang:"js",highlighted:`message<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  top<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  maxCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  rtl<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  prefixCls<span class="token punctuation">:</span> <span class="token string">'my-message'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`},["code",`message.config({
  top: 100,
  duration: 2,
  maxCount: 3,
  rtl: true,
  prefixCls: 'my-message',
});`]],["table",["thead",["tr",["th","Argument"],["th","Description"],["th","Type"],["th","Default"],["th","Version"]]],["tbody",["tr",["td","duration"],["td","Time before auto-dismiss, in seconds"],["td","number"],["td","1.5"],["td"]],["tr",["td","getContainer"],["td","Return the mount node for Message"],["td","() => HTMLElement"],["td","() => document.body"],["td"]],["tr",["td","maxCount"],["td","Max message show, drop oldest if exceed limit"],["td","number"],["td","-"],["td"]],["tr",["td","prefixCls"],["td","The prefix className of message node"],["td","string"],["td",["code","ant-message"]],["td","4.5.0"]],["tr",["td","rtl"],["td","Whether to enable RTL mode"],["td","boolean"],["td","false"],["td"]],["tr",["td","top"],["td","Distance from top"],["td","number"],["td","24"],["td"]]]],["h2","FAQ"],["h3","Why I can not access context, redux in message?"],["p","antd will dynamic create React instance by ",["code","ReactDOM.render"]," when call message methods. Whose context is different with origin code located context."],["p","When you need context info (like ConfigProvider context), you can use ",["code","message.useMessage"]," to get ",["code","api"]," instance and ",["code","contextHolder"]," node. And put it in your children:"],["pre",{lang:"tsx",highlighted:`<span class="token keyword">const</span> <span class="token punctuation">[</span>api<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">useMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>

return <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Context1<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Ant"</span><span class="token operator">></span>
    {<span class="token operator">/</span><span class="token operator">*</span> contextHolder is inside Context1 which means api will get value of Context1 <span class="token operator">*</span><span class="token operator">/</span>}
    {contextHolder}
    <span class="token operator">&lt;</span>Context2<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Design"</span><span class="token operator">></span>
      {<span class="token operator">/</span><span class="token operator">*</span> contextHolder is outside Context2 which means api will <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">not</span><span class="token operator">*</span><span class="token operator">*</span> get value of Context2 <span class="token operator">*</span><span class="token operator">/</span>}
    <span class="token operator">&lt;</span><span class="token operator">/</span>Context2<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Context1<span class="token punctuation">.</span>Provider<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>`},["code",`const [api, contextHolder] = message.useMessage();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is inside Context1 which means api will get value of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);`]],["p",["strong","Note:"]," You must insert ",["code","contextHolder"]," into your children with hooks. You can use origin method if you do not need context connection."]]}}}]);
