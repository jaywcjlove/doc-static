(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{3127:function(a,b){a.exports={content:["section",["p","High performance Form component with data scope management. Including data collection, verification, and styles."],["h2","When to use"],["ul",["li",["p","When you need to create an instance or collect information."]],["li",["p","When you need to validate fields in certain rules."]]]],meta:{category:"Components",type:"Data Entry",cols:1,title:"Form",cover:"https://gw.alipayobjects.com/zos/alicdn/ORmcdeaoO/Form.svg",filename:"components/form/index.en-US.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#When-to-use",title:"When to use"},"When to use"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]],["li",["a",{className:"bisheng-toc-h2",href:"#Form.Item",title:"Form.Item"},"Form.Item"]],["li",["a",{className:"bisheng-toc-h2",href:"#Form.List",title:"Form.List"},"Form.List"]],["li",["a",{className:"bisheng-toc-h2",href:"#operation",title:"operation"},"operation"]],["li",["a",{className:"bisheng-toc-h2",href:"#Form.Provider",title:"Form.Provider"},"Form.Provider"]],["li",["a",{className:"bisheng-toc-h2",href:"#Migrate-to-v4",title:"Migrate to v4"},"Migrate to v4"]],["li",["a",{className:"bisheng-toc-h2",href:"#FAQ",title:"FAQ"},"FAQ"]]],api:["section",["h2","API"],["h3","Form"],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"],["th","Version"]]],["tbody",["tr",["td","component"],["td","Set the Form rendering element. Do not create a DOM node for ",["code","false"]],["td","ComponentType ","|"," false"],["td","form"],["td"]],["tr",["td","colon"],["td","Configure the default value of ",["code","colon"]," for Form.Item. Indicates whether the colon after the label is displayed (only effective when prop layout is horizontal)"],["td","boolean"],["td","true"],["td"]],["tr",["td","fields"],["td","Control of form fields through state management (such as redux). Not recommended for non-strong demand. View ",["a",{title:null,href:"#components-form-demo-global-state"},"example"]],["td",["a",{title:null,href:"#FieldData"},"FieldData"],"[","]"],["td","-"],["td"]],["tr",["td","form"],["td","Form control instance created by ",["code","Form.useForm()"],". Automatically created when not provided"],["td",["a",{title:null,href:"#FormInstance"},"FormInstance"]],["td","-"],["td"]],["tr",["td","hideRequiredMark"],["td","Hide required mark for all form items"],["td","boolean"],["td","false"],["td"]],["tr",["td","initialValues"],["td","Set value by Form initialization or reset"],["td","object"],["td","-"],["td"]],["tr",["td","labelAlign"],["td","The text align of label of all items"],["td",["code","left"]," ","|"," ",["code","right"]],["td",["code","right"]],["td"]],["tr",["td","labelCol"],["td","Label layout, like ",["code","<Col>"]," component. Set ",["code","span"]," ",["code","offset"]," value like ",["code","{span: 3, offset: 12}"]," or ",["code","sm: {span: 3, offset: 12}"]],["td",["a",{title:null,href:"/components/grid/#Col"},"object"]],["td","-"],["td"]],["tr",["td","layout"],["td","Form layout"],["td",["code","horizontal"]," ","|"," ",["code","vertical"]," ","|"," ",["code","inline"]],["td",["code","horizontal"]],["td"]],["tr",["td","name"],["td","Form name. Will be the prefix of Field ",["code","id"]],["td","string"],["td","-"],["td"]],["tr",["td","preserve"],["td","Keep field value even when field removed"],["td","boolean"],["td","true"],["td","4.4.0"]],["tr",["td","scrollToFirstError"],["td","Auto scroll to first failed field when submit"],["td","boolean"],["td","false"],["td"]],["tr",["td","size"],["td","Set field component size (antd components only)"],["td",["code","small"]," ","|"," ",["code","middle"]," ","|"," ",["code","large"]],["td","-"],["td"]],["tr",["td","validateMessages"],["td","Validation prompt template, description ",["a",{title:null,href:"#validateMessages"},"see below"]],["td",["a",{title:null,href:"https://github.com/react-component/field-form/blob/master/src/utils/messages.ts"},"ValidateMessages"]],["td","-"],["td"]],["tr",["td","validateTrigger"],["td","Config field validate trigger"],["td","string ","|"," string[]"],["td",["code","onChange"]],["td","4.3.0"]],["tr",["td","wrapperCol"],["td","The layout for input controls, same as ",["code","labelCol"]],["td",["a",{title:null,href:"/components/grid/#Col"},"object"]],["td","-"],["td"]],["tr",["td","onFinish"],["td","Trigger after submitting the form and verifying data successfully"],["td","function(values)"],["td","-"],["td"]],["tr",["td","onFinishFailed"],["td","Trigger after submitting the form and verifying data failed"],["td","function({ values, errorFields, outOfDate })"],["td","-"],["td"]],["tr",["td","onFieldsChange"],["td","Trigger when field updated"],["td","function(changedFields, allFields)"],["td","-"],["td"]],["tr",["td","onValuesChange"],["td","Trigger when value updated"],["td","function(changedValues, allValues)"],["td","-"],["td"]]]],["h3","validateMessages"],["p","Form provides ",["a",{title:null,href:"https://github.com/react-component/field-form/blob/master/src/utils/messages.ts"},"default verification error messages"],". You can modify the template by configuring ",["code","validateMessages"]," property. A common usage is to configure localization:"],["pre",{lang:"jsx",highlighted:`<span class="token keyword">const</span> validateMessages <span class="token operator">=</span> <span class="token punctuation">{</span>
  required<span class="token punctuation">:</span> <span class="token string">"'\${name}' is required!"</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">validateMessages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>validateMessages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>`},["code",`const validateMessages = {
  required: "'\${name}' is required!",
  // ...
};

<Form validateMessages={validateMessages} />;`]],["p","Besides, ",["a",{title:null,href:"/components/config-provider/"},"ConfigProvider"]," also provides a global configuration scheme that allows for uniform configuration error notification templates:"],["pre",{lang:"jsx",highlighted:`<span class="token keyword">const</span> validateMessages <span class="token operator">=</span> <span class="token punctuation">{</span>
  required<span class="token punctuation">:</span> <span class="token string">"'\${name}' is Required!"</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ConfigProvider</span> <span class="token attr-name">form</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> validateMessages <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ConfigProvider</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>`},["code",`const validateMessages = {
  required: "'\${name}' is Required!",
  // ...
};

<ConfigProvider form={{ validateMessages }}>
  <Form />
</ConfigProvider>;`]],["h2","Form.Item"],["p","Form field component for data bidirectional binding, validation, layout, and so on."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"],["th","Version"]]],["tbody",["tr",["td","colon"],["td","Used with ",["code","label"],", whether to display ",["code",":"]," after label text."],["td","boolean"],["td","true"],["td"]],["tr",["td","dependencies"],["td","Set the dependency field. See ",["a",{title:null,href:"#dependencies"},"below"]],["td",["a",{title:null,href:"#NamePath"},"NamePath"],"[]"],["td","-"],["td"]],["tr",["td","extra"],["td","The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time"],["td","string ","|"," ReactNode"],["td","-"],["td"]],["tr",["td","getValueFromEvent"],["td","Specify how to get value from event or other onChange arguments"],["td","(..args: any[]) => any"],["td","-"],["td"]],["tr",["td","getValueProps"],["td","Additional props with sub component"],["td","(value: any) => any"],["td","-"],["td","4.2.0"]],["tr",["td","hasFeedback"],["td","Used with ",["code","validateStatus"],", this option specifies the validation status icon. Recommended to be used only with ",["code","Input"]],["td","boolean"],["td","false"],["td"]],["tr",["td","help"],["td","The prompt message. If not provided, the prompt message will be generated by the validation rule."],["td","string ","|"," ReactNode"],["td","-"],["td"]],["tr",["td","htmlFor"],["td","Set sub label ",["code","htmlFor"]],["td","string"],["td","-"],["td"]],["tr",["td","initialValue"],["td","Config sub default value. Form ",["code","initialValues"]," get higher priority when conflict"],["td","string"],["td","-"],["td","4.2.0"]],["tr",["td","noStyle"],["td","No style for ",["code","true"],", used as a pure field control"],["td","boolean"],["td","false"],["td"]],["tr",["td","label"],["td","Label text"],["td","string ","|"," ReactNode"],["td","-"],["td"]],["tr",["td","labelAlign"],["td","The text align of label"],["td",["code","left"]," ","|"," ",["code","right"]],["td",["code","right"]],["td"]],["tr",["td","labelCol"],["td","The layout of label. You can set ",["code","span"]," ",["code","offset"]," to something like ",["code","{span: 3, offset: 12}"]," or ",["code","sm: {span: 3, offset: 12}"]," same as with ",["code","<Col>"],". You can set ",["code","labelCol"]," on Form. If both exists, use Item first"],["td",["a",{title:null,href:"/components/grid/#Col"},"object"]],["td","-"],["td"]],["tr",["td","name"],["td","Field name, support array"],["td",["a",{title:null,href:"#NamePath"},"NamePath"]],["td","-"],["td"]],["tr",["td","normalize"],["td","Normalize value from component value before passing to Form instance"],["td","(value, prevValue, prevValues) => any"],["td","-"],["td"]],["tr",["td","preserve"],["td","Keep field value even when field removed"],["td","boolean"],["td","true"],["td","4.4.0"]],["tr",["td","required"],["td","Display required style. It will be generated by the validation rule"],["td","boolean"],["td","false"],["td"]],["tr",["td","rules"],["td","Rules for field validation. Click ",["a",{title:null,href:"#components-form-demo-basic"},"here"]," to see an example"],["td",["a",{title:null,href:"#Rule"},"Rule"],"[]"],["td","-"],["td"]],["tr",["td","shouldUpdate"],["td","Custom field update logic. See ",["a",{title:null,href:"#shouldUpdate"},"below"]],["td","boolean ","|"," (prevValue, curValue) => boolean"],["td","false"],["td"]],["tr",["td","trigger"],["td","When to collect the value of children node"],["td","string"],["td",["code","onChange"]],["td"]],["tr",["td","validateFirst"],["td","Whether stop validate on first rule of error for this field. Will parallel validate when ",["code","parallel"]," cofigured"],["td","boolean ","|"," ",["code","parallel"]],["td","false"],["td",["code","parallel"],": 4.5.0"]],["tr",["td","validateStatus"],["td","The validation status. If not provided, it will be generated by validation rule. options: ",["code","success"]," ",["code","warning"]," ",["code","error"]," ",["code","validating"]],["td","string"],["td","-"],["td"]],["tr",["td","validateTrigger"],["td","When to validate the value of children node"],["td","string ","|"," string[]"],["td",["code","onChange"]],["td"]],["tr",["td","valuePropName"],["td","Props of children node, for example, the prop of Switch is 'checked'. This prop is an encapsulation of ",["code","getValueProps"],", which will be invalid after customizing ",["code","getValueProps"]],["td","string"],["td",["code","value"]],["td"]],["tr",["td","wrapperCol"],["td","The layout for input controls, same as ",["code","labelCol"],". You can set ",["code","wrapperCol"]," on Form. If both exists, use Item first"],["td",["a",{title:null,href:"/components/grid/#Col"},"object"]],["td","-"],["td"]],["tr",["td","hidden"],["td","Whether to hide Form.Item (still collect and validate value)"],["td","boolean"],["td","false"],["td"]]]],["p","After wrapped by ",["code","Form.Item"]," with ",["code","name"]," property, ",["code","value"],"(or other property defined by ",["code","valuePropName"],") ",["code","onChange"],"(or other property defined by ",["code","trigger"],") props will be added to form controls, the flow of form data will be handled by Form which will cause:"],["ol",["li",["p","You shouldn't use ",["code","onChange"]," on each form control to ",["strong","collect data"],"(use ",["code","onValuesChange"]," of Form), but you can still listen to ",["code","onChange"],"."]],["li",["p","You cannot set value for each form control via ",["code","value"]," or ",["code","defaultValue"]," prop, you should set default value with ",["code","initialValues"]," of Form. Note that ",["code","initialValues"]," cannot be updated by ",["code","setState"]," dynamiclly, you should use ",["code","setFieldsValue"]," in that situation."]],["li",["p","You shouldn't call ",["code","setState"]," manually, please use ",["code","form.setFieldsValue"]," to change value programmatically."]]],["h3","dependencies"],["p","Used when there are dependencies between fields. If a field has the ",["code","dependencies"],' prop, this field will automatically trigger updates and validations when upstream is updated. A common scenario is a user registration form with "password" and "confirm password" fields. The "Confirm Password" validation depends on the "Password" field. After setting ',["code","dependencies"],', the "Password" field update will re-trigger the validation of "Check Password". You can refer ',["a",{title:null,href:"#components-form-demo-register"},"examples"],"."],["p",["code","dependencies"]," shouldn't be used together with ",["code","shouldUpdate"],". Since it may cause chaos in updating logic."],["p",["code","dependencies"]," supports ",["code","Form.Item"]," with render props children since ",["code","4.5.0"],"."],["h3","shouldUpdate"],["p","Form updates only the modified field-related components for performance optimization purposes by incremental update. In most cases, you only need to write code or do validation with the ",["a",{title:null,href:"#dependencies"},["code","dependencies"]]," property. In some specific cases, such as when a new field option appears with a filed value changed, or you just want to keep some area updating by form update, you can modify the update logic of Form.Item via the ",["code","shouldUpdate"],"."],["p","When ",["code","shouldUpdate"]," is ",["code","true"],", any Form update will cause the Form.Item to be re-rendered. This is very helpful for custom rendering some areas:"],["pre",{lang:"jsx",highlighted:`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">shouldUpdate</span><span class="token punctuation">></span></span>
  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>`},["code",`<Form.Item shouldUpdate>
  {() => {
    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;
  }}
</Form.Item>`]],["p","You can ref ",["a",{title:null,href:"#components-form-demo-horizontal-login"},"example"]," to see detail."],["p","When ",["code","shouldUpdate"]," is a function, it will be called by form values update. Providing original values and current value to compare. This is very helpful for rendering additional fields based on values:"],["pre",{lang:"jsx",highlighted:`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">shouldUpdate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>prevValues<span class="token punctuation">,</span> curValues<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prevValues<span class="token punctuation">.</span>additional <span class="token operator">!==</span> curValues<span class="token punctuation">.</span>additional<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>`},["code",`<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>
  {() => {
    return (
      <Form.Item name="other">
        <Input />
      </Form.Item>
    );
  }}
</Form.Item>`]],["p","You can ref ",["a",{title:null,href:"#components-form-demo-control-hooks"},"example"]," to see detail."],["h2","Form.List"],["p","Provides array management for fields."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","name"],["td","Field name, support array"],["td",["a",{title:null,href:"#NamePath"},"NamePath"]],["td","-"]],["tr",["td","children"],["td","Render function"],["td","(fields: Field[], operation: { add, remove, move }) => React.ReactNode"],["td","-"]]]],["pre",{lang:"tsx",highlighted:`<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>
  {fields <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      {fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>field}<span class="token operator">></span>
          <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span>}
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>}
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>`},["code",`<Form.List>
  {fields => (
    <div>
      {fields.map(field => (
        <Form.Item {...field}>
          <Input />
        </Form.Item>
      ))}
    </div>
  )}
</Form.List>`]],["h2","operation"],["p","Some operator functions in render form of Form.List."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","add"],["td","add form item"],["td","(defaultValue?: any) => void"],["td","-"]],["tr",["td","remove"],["td","remove form item"],["td","(index: number ","|"," number[]) => void"],["td","number[]: 4.5.0"]],["tr",["td","move"],["td","move form item"],["td","(from: number, to: number) => void"],["td","-"]]]],["h2","Form.Provider"],["p","Provide linkage between forms. If a sub form with ",["code","name"]," prop update, it will auto trigger Provider related events. See ",["a",{title:null,href:"#components-form-demo-form-context"},"example"],"."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","onFormChange"],["td","Triggered when a sub form field updates"],["td","function(formName: string, info: { changedFields, forms })"],["td","-"]],["tr",["td","onFormFinish"],["td","Triggered when a sub form submits"],["td","function(formName: string, info: { values, forms })"],["td","-"]]]],["pre",{lang:"jsx",highlighted:`<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Provider
  onFormFinish<span class="token operator">=</span><span class="token punctuation">{</span>name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">'form1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// Do something...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Provider</span><span class="token punctuation">></span></span>`},["code",`<Form.Provider
  onFormFinish={name => {
    if (name === 'form1') {
      // Do something...
    }
  }}
>
  <Form name="form1">...</Form>
  <Form name="form2">...</Form>
</Form.Provider>`]],["h3","FormInstance"],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"],["th","Version"]]],["tbody",["tr",["td","getFieldInstance"],["td","Get field instance"],["td","(name: ",["a",{title:null,href:"#NamePath"},"NamePath"],") => any"],["td","4.4.0"]],["tr",["td","getFieldValue"],["td","Get the value by the field name"],["td","(name: ",["a",{title:null,href:"#NamePath"},"NamePath"],") => any"],["td"]],["tr",["td","getFieldsValue"],["td","Get values by a set of field names. Return according to the corresponding structure"],["td","(nameList?: ",["a",{title:null,href:"#NamePath"},"NamePath"],"[], filterFunc?: (meta: { touched: boolean, validating: boolean }) => boolean) => any"],["td"]],["tr",["td","getFieldError"],["td","Get the error messages by the field name"],["td","(name: ",["a",{title:null,href:"#NamePath"},"NamePath"],") => string[]"],["td"]],["tr",["td","getFieldsError"],["td","Get the error messages by the fields name. Return as an array"],["td","(nameList?: ",["a",{title:null,href:"#NamePath"},"NamePath"],"[]) => FieldError[]"],["td"]],["tr",["td","isFieldTouched"],["td","Check if a field has been operated"],["td","(name: ",["a",{title:null,href:"#NamePath"},"NamePath"],") => boolean"],["td"]],["tr",["td","isFieldsTouched"],["td","Check if fields have been operated. Check if all fields is touched when ",["code","allTouched"]," is ",["code","true"]],["td","(nameList?: ",["a",{title:null,href:"#NamePath"},"NamePath"],"[], allTouched?: boolean) => boolean"],["td"]],["tr",["td","isFieldValidating"],["td","Check fields if is in validating"],["td","(name: ",["a",{title:null,href:"#NamePath"},"NamePath"],") => boolean"],["td"]],["tr",["td","resetFields"],["td","Reset fields to ",["code","initialValues"]],["td","(fields?: ",["a",{title:null,href:"#NamePath"},"NamePath"],"[]) => void"],["td"]],["tr",["td","scrollToField"],["td","Scroll to field position"],["td","(name: ",["a",{title:null,href:"#NamePath"},"NamePath"],", options: [",["a",{title:null,href:"https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options"},"ScrollOptions"],"]) => void"],["td"]],["tr",["td","setFields"],["td","Set fields status"],["td","(fields: ",["a",{title:null,href:"#FieldData"},"FieldData"],"[]) => void"],["td"]],["tr",["td","setFieldsValue"],["td","Set fields value"],["td","(values) => void"],["td"]],["tr",["td","submit"],["td","Submit the form. It's same as click ",["code","submit"]," button"],["td","() => void"],["td"]],["tr",["td","validateFields"],["td","Validate fields"],["td","(nameList?: ",["a",{title:null,href:"#NamePath"},"NamePath"],"[]) => Promise"],["td"]]]],["h4","validateFields return sample"],["pre",{lang:"jsx",highlighted:`<span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>values <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/*
  values:
    {
      username: 'username',
      password: 'password',
    }
  */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>errorInfo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/*
    errorInfo:
      {
        values: {
          username: 'username',
          password: 'password',
        },
        errorFields: [
          { password: ['username'], errors: ['Please input your Password!'] },
        ],
        outOfDate: false,
      }
    */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`},["code",`validateFields()
  .then(values => {
    /*
  values:
    {
      username: 'username',
      password: 'password',
    }
  */
  })
  .catch(errorInfo => {
    /*
    errorInfo:
      {
        values: {
          username: 'username',
          password: 'password',
        },
        errorFields: [
          { password: ['username'], errors: ['Please input your Password!'] },
        ],
        outOfDate: false,
      }
    */
  });`]],["h3","Interface"],["h4","NamePath"],["p",["code","string | number | (string | number)[]"]],["h4","FieldData"],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"]]],["tbody",["tr",["td","touched"],["td","Whether is operated"],["td","boolean"]],["tr",["td","validating"],["td","Whether is in validating"],["td","boolean"]],["tr",["td","errors"],["td","Error messages"],["td","string[]"]],["tr",["td","name"],["td","Field name path"],["td",["a",{title:null,href:"#NamePath"},"NamePath"],"[]"]],["tr",["td","value"],["td","Field value"],["td","any"]]]],["h4","Rule"],["p","Rule support config object, and also support function to get config object:"],["pre",{lang:"tsx",highlighted:'type Rule <span class="token operator">=</span> RuleConfig | <span class="token punctuation">(</span><span class="token punctuation">(</span>form<span class="token punctuation">:</span> FormInstance<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> RuleConfig<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","type Rule = RuleConfig | ((form: FormInstance) => RuleConfig);"]],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"]]],["tbody",["tr",["td","enum"],["td","Match enum value"],["td","any[]"]],["tr",["td","len"],["td","Length of string, number, array"],["td","number"]],["tr",["td","max"],["td",["code","type"]," required: max length of ",["code","string"],", ",["code","number"],", ",["code","array"]],["td","number"]],["tr",["td","message"],["td","Error message. Will auto generate by ",["a",{title:null,href:"#validateMessages"},"template"]," if not provided"],["td","string"]],["tr",["td","min"],["td",["code","type"]," required: min length of ",["code","string"],", ",["code","number"],", ",["code","array"]],["td","number"]],["tr",["td","pattern"],["td","Regex pattern"],["td","RegExp"]],["tr",["td","required"],["td","Required field"],["td","boolean"]],["tr",["td","transform"],["td","Transform value to the rule before validation"],["td","(value) => any"]],["tr",["td","type"],["td","Normally ",["code","string"]," ","|",["code","number"]," ","|",["code","boolean"]," ","|",["code","url"]," ","|"," ",["code","email"],". More type to ref ",["a",{title:null,href:"https://github.com/yiminghe/async-validator#type"},"here"]],["td","string"]],["tr",["td","validator"],["td","Customize validation rule. Accept Promise as return. See ",["a",{title:null,href:"#components-form-demo-register"},"example"]],["td","(",["a",{title:null,href:"#Rule"},"rule"],", value) => Promise"]],["tr",["td","whitespace"],["td","Failed if only has whitespace"],["td","boolean"]],["tr",["td","validateTrigger"],["td","Set validate trigger event. Must be the sub set of ",["code","validateTrigger"]," in Form.Item"],["td","string ","|"," string[]"]]]],["h2","Migrate to v4"],["p","If you are a user of v3, you can ref ",["a",{title:null,href:"/components/form/v3"},"migrate doc"],"。"],["style",`
.code-box-demo .ant-form:not(.ant-form-inline):not(.ant-form-vertical) {
  max-width: 600px;
}
.markdown.api-container table td:nth-of-type(4) {
  white-space: nowrap;
  word-wrap: break-word;
}
`],["h2","FAQ"],["h3","Custom validator not working"],["p","It may be caused by your ",["code","validator"]," if it has some errors that prevents ",["code","callback"]," to be called. You can use ",["code","async"]," instead or use ",["code","try...catch"]," to catch the error:"],["pre",{lang:"jsx",highlighted:`validator<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Something wrong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// or</span>

<span class="token function">validator</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Something wrong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>`},["code",`validator: async (rule, value) => {
  throw new Error('Something wrong!');
}

// or

validator(rule, value, callback) => {
  try {
    throw new Error('Something wrong!');
  } catch (err) {
    callback(err);
  }
}`]],["h3","How does name fill value when it's array?"],["p",["code","name"]," will fill value by array order. When there exists number in it and no related field in form store, it will auto convert field to array. If you want to keep it as object, use string like: ",["code","['1', 'name']"],"."],["h3","Why is there a form warning when used in Modal?"],["blockquote",["p","Warning: Instance created by ",["code","useForm"]," is not connect to any Form element. Forget to pass ",["code","form"]," prop?"]],["p","Before Modal opens, children elements do not exist in the view. You can set ",["code","forceRender"]," on Modal to pre-render its children. Click ",["a",{title:null,href:"https://codesandbox.io/s/antd-reproduction-template-ibu5c"},"here"]," to view an example."],["h3","Why is component ",["code","defaultValue"]," not working when inside Form.Item?"],["p","Components inside Form.Item with name property will turn into controlled mode, which makes ",["code","defaultValue"]," not work anymore. Please try ",["code","initialValues"]," of Form to set default value."],["h3","Why ",["code","resetFields"]," will re-mount component?"],["p",["code","resetFields"]," will re-mount component under Field to clean up customize component side effects (like async data, cached state, etc.). It's by design."],["h3","Difference between Form initialValues and Item initialValue?"],["p","In most case, we always recommend to use Form ",["code","initialValues"],". Use Item ",["code","initialValue"]," only with dynamic field usage. Priority follows the rules:"],["ol",["li",["p","Form ",["code","initialValues"]," is the first priority"]],["li",["p","Field ",["code","initialValue"]," is secondary ","*",". Does not work when multiple Item with same ",["code","name"]," setting the ",["code","initialValue"]]]],["h3","Why ",["code","onFieldsChange"]," triggers three times on change when field sets ",["code","rules"],"?"],["p","Validating is also part of the value updating. It pass follow steps:"],["ol",["li",["p","Trigger value change"]],["li",["p","Rule validating"]],["li",["p","Rule validated"]]],["p","In each ",["code","onFieldsChange"],", you will get ",["code","false"]," > ",["code","true"]," > ",["code","false"]," with ",["code","isFieldValidating"],"."],["style",`
  .site-form-item-icon {
    color: rgba(0, 0, 0, 0.25);
  }
  [data-theme="dark"] .site-form-item-icon {
    color: rgba(255,255,255,.3);
  }
`]]}}}]);
