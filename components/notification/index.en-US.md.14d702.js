(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{3110:function(t,o){t.exports={content:["section",["p","Display a notification message globally."],["h2","When To Use"],["p","To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:"],["ul",["li",["p","A notification with complex content."]],["li",["p","A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow."]],["li",["p","A notification that is pushed by the application."]]]],meta:{category:"Components",type:"Feedback",noinstant:!0,title:"Notification",cover:"https://gw.alipayobjects.com/zos/alicdn/Jxm5nw61w/Notification.svg",filename:"components/notification/index.en-US.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#When-To-Use",title:"When To Use"},"When To Use"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]],["li",["a",{className:"bisheng-toc-h2",href:"#FAQ",title:"FAQ"},"FAQ"]]],api:["section",["h2","API"],["ul",["li",["p",["code","notification.success(config)"]]],["li",["p",["code","notification.error(config)"]]],["li",["p",["code","notification.info(config)"]]],["li",["p",["code","notification.warning(config)"]]],["li",["p",["code","notification.warn(config)"]]],["li",["p",["code","notification.open(config)"]]],["li",["p",["code","notification.close(key: String)"]]],["li",["p",["code","notification.destroy()"]]]],["p","The properties of config are as follows:"],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","bottom"],["td","Distance from the bottom of the viewport, when ",["code","placement"]," is ",["code","bottomRight"]," or ",["code","bottomLeft"]," (unit: pixels)"],["td","number"],["td","24"]],["tr",["td","btn"],["td","Customized close button"],["td","ReactNode"],["td","-"]],["tr",["td","className"],["td","Customized CSS class"],["td","string"],["td","-"]],["tr",["td","closeIcon"],["td","Custom close icon"],["td","ReactNode"],["td","-"]],["tr",["td","description"],["td","The content of notification box (required)"],["td","ReactNode"],["td","-"]],["tr",["td","duration"],["td","Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically"],["td","number"],["td","4.5"]],["tr",["td","getContainer"],["td","Return the mount node for Notification"],["td","() => HTMLNode"],["td","() => document.body"]],["tr",["td","icon"],["td","Customized icon"],["td","ReactNode"],["td","-"]],["tr",["td","key"],["td","The unique identifier of the Notification"],["td","string"],["td","-"]],["tr",["td","message"],["td","The title of notification box (required)"],["td","ReactNode"],["td","-"]],["tr",["td","placement"],["td","Position of Notification, can be one of ",["code","topLeft"]," ",["code","topRight"]," ",["code","bottomLeft"]," ",["code","bottomRight"]],["td","string"],["td",["code","topRight"]]],["tr",["td","style"],["td","Customized inline style"],["td",["a",{title:null,href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794"},"CSSProperties"]],["td","-"]],["tr",["td","top"],["td","Distance from the top of the viewport, when ",["code","placement"]," is ",["code","topRight"]," or ",["code","topLeft"]," (unit: pixels)"],["td","number"],["td","24"]],["tr",["td","onClick"],["td","Specify a function that will be called when the notification is clicked"],["td","function"],["td","-"]],["tr",["td","onClose"],["td","Trigger when notification closed"],["td","function"],["td","-"]]]],["p",["code","notification"]," also provides a global ",["code","config()"]," method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying."],["ul",["li",["p",["code","notification.config(options)"]],["blockquote",["p","When you use ",["code","ConfigProvider"]," for global configuration, the system will automatically start RTL mode by default.(4.3.0+)"],["p","When you want to use it alone, you can start the RTL mode through the following settings."]]]],["pre",{lang:"js",highlighted:`notification<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  placement<span class="token punctuation">:</span> <span class="token string">'bottomRight'</span><span class="token punctuation">,</span>
  bottom<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  duration<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  rtl<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`},["code",`notification.config({
  placement: 'bottomRight',
  bottom: 50,
  duration: 3,
  rtl: true,
});`]],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","bottom"],["td","Distance from the bottom of the viewport, when ",["code","placement"]," is ",["code","bottomRight"]," or ",["code","bottomLeft"]," (unit: pixels)"],["td","number"],["td","24"]],["tr",["td","closeIcon"],["td","Custom close icon"],["td","ReactNode"],["td","-"]],["tr",["td","duration"],["td","Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically"],["td","number"],["td","4.5"]],["tr",["td","getContainer"],["td","Return the mount node for Notification"],["td","() => HTMLNode"],["td","() => document.body"]],["tr",["td","placement"],["td","Position of Notification, can be one of ",["code","topLeft"]," ",["code","topRight"]," ",["code","bottomLeft"]," ",["code","bottomRight"]],["td","string"],["td",["code","topRight"]]],["tr",["td","rtl"],["td","Whether to enable RTL mode"],["td","boolean"],["td","false"]],["tr",["td","top"],["td","Distance from the top of the viewport, when ",["code","placement"]," is ",["code","topRight"]," or ",["code","topLeft"]," (unit: pixels)"],["td","number"],["td","24"]]]],["h2","FAQ"],["h3","Why I can not access context, redux, ConfigProvider ",["code","locale/prefixCls"]," in notification?"],["p","antd will dynamic create React instance by ",["code","ReactDOM.render"]," when call notification methods. Whose context is different with origin code located context."],["p","When you need context info (like ConfigProvider context), you can use ",["code","notification.useNotification"]," to get ",["code","api"]," instance and ",["code","contextHolder"]," node. And put it in your children:"],["pre",{lang:"tsx",highlighted:`<span class="token keyword">const</span> <span class="token punctuation">[</span>api<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> notification<span class="token punctuation">.</span><span class="token function">useNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>

return <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Context1<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Ant"</span><span class="token operator">></span>
    {<span class="token operator">/</span><span class="token operator">*</span> contextHolder is inside Context1 which means api will get value of Context1 <span class="token operator">*</span><span class="token operator">/</span>}
    {contextHolder}
    <span class="token operator">&lt;</span>Context2<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Design"</span><span class="token operator">></span>
      {<span class="token operator">/</span><span class="token operator">*</span> contextHolder is outside Context2 which means api will <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">not</span><span class="token operator">*</span><span class="token operator">*</span> get value of Context2 <span class="token operator">*</span><span class="token operator">/</span>}
    <span class="token operator">&lt;</span><span class="token operator">/</span>Context2<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Context1<span class="token punctuation">.</span>Provider<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>`},["code",`const [api, contextHolder] = notification.useNotification();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is inside Context1 which means api will get value of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);`]],["p",["strong","Note:"]," You must insert ",["code","contextHolder"]," into your children with hooks. You can use origin method if you do not need context connection."]]}}}]);
