define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setupJSONToggleForConfig = exports.updateConfigDropdownForCompilerOptions = exports.createConfigDropdown = void 0;
    exports.createConfigDropdown = (sandbox, monaco) => {
        const configContainer = document.getElementById("config-container");
        const container = document.createElement("div");
        container.id = "boolean-options-container";
        configContainer.appendChild(container);
        const compilerOpts = sandbox.getCompilerOptions();
        const boolOptions = Object.keys(compilerOpts).filter(k => typeof compilerOpts[k] === "boolean");
        // we want to make sections of categories
        const categoryMap = {};
        boolOptions.forEach(optID => {
            const summary = optionsSummary.find(sum => optID === sum.id);
            const existingCategory = categoryMap[summary.categoryID];
            if (!existingCategory)
                categoryMap[summary.categoryID] = {};
            categoryMap[summary.categoryID][optID] = summary;
        });
        Object.keys(categoryMap).forEach(categoryID => {
            const categoryDiv = document.createElement("div");
            const header = document.createElement("h4");
            const ol = document.createElement("ol");
            Object.keys(categoryMap[categoryID]).forEach(optID => {
                const optSummary = categoryMap[categoryID][optID];
                header.textContent = optSummary.categoryDisplay;
                const li = document.createElement("li");
                const label = document.createElement("label");
                label.style.position = "relative";
                label.style.width = "100%";
                const svg = `<?xml version="1.0" encoding="UTF-8"?><svg width="20px" height="20px" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <circle stroke="#0B6F57" cx="10" cy="10" r="9"></circle>
            <path d="M9.99598394,6 C10.2048193,6 10.4243641,5.91700134 10.6546185,5.75100402 C10.8848728,5.58500669 11,5.33601071 11,5.00401606 C11,4.66666667 10.8848728,4.41499331 10.6546185,4.24899598 C10.4243641,4.08299866 10.2048193,4 9.99598394,4 C9.79250335,4 9.57563588,4.08299866 9.34538153,4.24899598 C9.11512718,4.41499331 9,4.66666667 9,5.00401606 C9,5.33601071 9.11512718,5.58500669 9.34538153,5.75100402 C9.57563588,5.91700134 9.79250335,6 9.99598394,6 Z M10.6877323,16 L10.6877323,14.8898836 L10.6877323,8 L9.30483271,8 L9.30483271,9.11011638 L9.30483271,16 L10.6877323,16 Z" fill="#0B6F57" fill-rule="nonzero"></path>
          </g>
      </svg>`;
                label.innerHTML = `<span>${optSummary.id}</span><a href='../tsconfig#${optSummary.id}' class='compiler_info_link' alt='Look up ${optSummary.id} in the TSConfig Reference'>${svg}</a><br/>${optSummary.oneliner}`;
                const input = document.createElement("input");
                input.value = optSummary.id;
                input.type = "checkbox";
                input.name = optSummary.id;
                input.id = "option-" + optSummary.id;
                input.onchange = () => {
                    sandbox.updateCompilerSetting(optSummary.id, input.checked);
                };
                label.htmlFor = input.id;
                li.appendChild(input);
                li.appendChild(label);
                ol.appendChild(li);
            });
            categoryDiv.appendChild(header);
            categoryDiv.appendChild(ol);
            container.appendChild(categoryDiv);
        });
        const dropdownContainer = document.getElementById("compiler-dropdowns");
        const target = optionsSummary.find(sum => sum.id === "target");
        const targetSwitch = createSelect(target.display, "target", target.oneliner, sandbox, monaco.languages.typescript.ScriptTarget);
        dropdownContainer.appendChild(targetSwitch);
        const jsx = optionsSummary.find(sum => sum.id === "jsx");
        const jsxSwitch = createSelect(jsx.display, "jsx", jsx.oneliner, sandbox, monaco.languages.typescript.JsxEmit);
        dropdownContainer.appendChild(jsxSwitch);
        const modSum = optionsSummary.find(sum => sum.id === "module");
        const moduleSwitch = createSelect(modSum.display, "module", modSum.oneliner, sandbox, monaco.languages.typescript.ModuleKind);
        dropdownContainer.appendChild(moduleSwitch);
    };
    exports.updateConfigDropdownForCompilerOptions = (sandbox, monaco) => {
        const compilerOpts = sandbox.getCompilerOptions();
        const boolOptions = Object.keys(compilerOpts).filter(k => typeof compilerOpts[k] === "boolean");
        boolOptions.forEach(opt => {
            const inputID = "option-" + opt;
            const input = document.getElementById(inputID);
            input.checked = !!compilerOpts[opt];
        });
        const compilerIDToMaps = {
            module: monaco.languages.typescript.ModuleKind,
            jsx: monaco.languages.typescript.JsxEmit,
            target: monaco.languages.typescript.ScriptTarget,
        };
        Object.keys(compilerIDToMaps).forEach(flagID => {
            const input = document.getElementById("compiler-select-" + flagID);
            const currentValue = compilerOpts[flagID];
            const map = compilerIDToMaps[flagID];
            // @ts-ignore
            const realValue = map[currentValue];
            // @ts-ignore
            for (const option of input.children) {
                option.selected = option.value.toLowerCase() === realValue.toLowerCase();
            }
        });
    };
    const createSelect = (title, id, blurb, sandbox, option) => {
        const label = document.createElement("label");
        const textToDescribe = document.createElement("span");
        textToDescribe.textContent = title + ":";
        label.appendChild(textToDescribe);
        const select = document.createElement("select");
        select.id = "compiler-select-" + id;
        label.appendChild(select);
        select.onchange = () => {
            const value = select.value; // the human string
            const compilerIndex = option[value];
            sandbox.updateCompilerSetting(id, compilerIndex);
        };
        Object.keys(option)
            .filter(key => isNaN(Number(key)))
            .forEach(key => {
            // hide Latest
            if (key === "Latest")
                return;
            const option = document.createElement("option");
            option.value = key;
            option.text = key;
            select.appendChild(option);
        });
        const span = document.createElement("span");
        span.textContent = blurb;
        span.classList.add("compiler-flag-blurb");
        label.appendChild(span);
        return label;
    };
    exports.setupJSONToggleForConfig = (sandbox) => { };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQ29uZmlnRHJvcGRvd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wbGF5Z3JvdW5kL3NyYy9jcmVhdGVDb25maWdEcm9wZG93bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBY2EsUUFBQSxvQkFBb0IsR0FBRyxDQUFDLE9BQWdCLEVBQUUsTUFBYyxFQUFFLEVBQUU7UUFDdkUsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBRSxDQUFBO1FBQ3BFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDL0MsU0FBUyxDQUFDLEVBQUUsR0FBRywyQkFBMkIsQ0FBQTtRQUMxQyxlQUFlLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXRDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxDQUFBO1FBQ2pELE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUE7UUFFL0YseUNBQXlDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLEVBQWlFLENBQUE7UUFDckYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQTtZQUU3RCxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDeEQsSUFBSSxDQUFDLGdCQUFnQjtnQkFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUUzRCxX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QUcsQ0FBQTtZQUNsQixNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQTtZQUVqQixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzVCLENBQUMsQ0FBQyxDQUFBO1FBRUosTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQTtRQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1FBQ3pDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFdkIsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDLENBQUE7SUFFWSxRQUFBLHdCQUF3QixHQUFHLENBQUMsT0FBZ0IsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBTYW5kYm94ID0gaW1wb3J0KFwidHlwZXNjcmlwdC1zYW5kYm94XCIpLlNhbmRib3hcbnR5cGUgTW9uYWNvID0gdHlwZW9mIGltcG9ydChcIm1vbmFjby1lZGl0b3JcIilcblxudHlwZSBPcHRpb25zU3VtbWFyeSA9IHtcbiAgZGlzcGxheTogc3RyaW5nXG4gIG9uZWxpbmVyOiBzdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBjYXRlZ29yeUlEOiBzdHJpbmdcbiAgY2F0ZWdvcnlEaXNwbGF5OiBzdHJpbmdcbn1cblxuLy8gVGhpcyBpcyB3aGVyZSBhbGwgdGhlIGxvY2FsaXplZCBkZXNjcmlwdGlvbnMgY29tZSBmcm9tXG5kZWNsYXJlIGNvbnN0IG9wdGlvbnNTdW1tYXJ5OiBPcHRpb25zU3VtbWFyeVtdXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDb25maWdEcm9wZG93biA9IChzYW5kYm94OiBTYW5kYm94LCBtb25hY286IE1vbmFjbykgPT4ge1xuICBjb25zdCBjb25maWdDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbmZpZy1jb250YWluZXJcIikhXG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgY29udGFpbmVyLmlkID0gXCJib29sZWFuLW9wdGlvbnMtY29udGFpbmVyXCJcbiAgY29uZmlnQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcilcblxuICBjb25zdCBjb21waWxlck9wdHMgPSBzYW5kYm94LmdldENvbXBpbGVyT3B0aW9ucygpXG4gIGNvbnN0IGJvb2xPcHRpb25zID0gT2JqZWN0LmtleXMoY29tcGlsZXJPcHRzKS5maWx0ZXIoayA9PiB0eXBlb2YgY29tcGlsZXJPcHRzW2tdID09PSBcImJvb2xlYW5cIilcblxuICAvLyB3ZSB3YW50IHRvIG1ha2Ugc2VjdGlvbnMgb2YgY2F0ZWdvcmllc1xuICBjb25zdCBjYXRlZ29yeU1hcCA9IHt9IGFzIHsgW2NhdGVnb3J5OiBzdHJpbmddOiB7IFtvcHRJRDogc3RyaW5nXTogT3B0aW9uc1N1bW1hcnkgfSB9XG4gIGJvb2xPcHRpb25zLmZvckVhY2gob3B0SUQgPT4ge1xuICAgIGNvbnN0IHN1bW1hcnkgPSBvcHRpb25zU3VtbWFyeS5maW5kKHN1bSA9PiBvcHRJRCA9PT0gc3VtLmlkKSFcblxuICAgIGNvbnN0IGV4aXN0aW5nQ2F0ZWdvcnkgPSBjYXRlZ29yeU1hcFtzdW1tYXJ5LmNhdGVnb3J5SURdXG4gICAgaWYgKCFleGlzdGluZ0NhdGVnb3J5KSBjYXRlZ29yeU1hcFtzdW1tYXJ5LmNhdGVnb3J5SURdID0ge31cblxuICAgIGNhdGVnb3J5TWFwW3N1bW1hcnkuY2F0ZWdvcnlJRF1bb3B0SURdID0gc3VtbWFyeVxuICB9KVxuXG4gIE9iamVjdC5rZXlzKGNhdGVnb3J5TWFwKS5mb3JFYWNoKGNhdGVnb3J5SUQgPT4ge1xuICAgIGNvbnN0IGNhdGVnb3J5RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoNFwiKVxuICAgIGNvbnN0IG9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9sXCIpXG5cbiAgICBPYmplY3Qua2V5cyhjYXRlZ29yeU1hcFtjYXRlZ29yeUlEXSkuZm9yRWFjaChvcHRJRCA9PiB7XG4gICAgICBjb25zdCBvcHRTdW1tYXJ5ID0gY2F0ZWdvcnlNYXBbY2F0ZWdvcnlJRF1bb3B0SURdXG4gICAgICBoZWFkZXIudGV4dENvbnRlbnQgPSBvcHRTdW1tYXJ5LmNhdGVnb3J5RGlzcGxheVxuXG4gICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKVxuICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIilcbiAgICAgIGxhYmVsLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiXG4gICAgICBsYWJlbC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiXG5cbiAgICAgIGNvbnN0IHN2ZyA9IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48c3ZnIHdpZHRoPVwiMjBweFwiIGhlaWdodD1cIjIwcHhcIiB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj5cbiAgICAgICAgICA8ZyBzdHJva2U9XCJub25lXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgICAgPGNpcmNsZSBzdHJva2U9XCIjMEI2RjU3XCIgY3g9XCIxMFwiIGN5PVwiMTBcIiByPVwiOVwiPjwvY2lyY2xlPlxuICAgICAgICAgICAgPHBhdGggZD1cIk05Ljk5NTk4Mzk0LDYgQzEwLjIwNDgxOTMsNiAxMC40MjQzNjQxLDUuOTE3MDAxMzQgMTAuNjU0NjE4NSw1Ljc1MTAwNDAyIEMxMC44ODQ4NzI4LDUuNTg1MDA2NjkgMTEsNS4zMzYwMTA3MSAxMSw1LjAwNDAxNjA2IEMxMSw0LjY2NjY2NjY3IDEwLjg4NDg3MjgsNC40MTQ5OTMzMSAxMC42NTQ2MTg1LDQuMjQ4OTk1OTggQzEwLjQyNDM2NDEsNC4wODI5OTg2NiAxMC4yMDQ4MTkzLDQgOS45OTU5ODM5NCw0IEM5Ljc5MjUwMzM1LDQgOS41NzU2MzU4OCw0LjA4Mjk5ODY2IDkuMzQ1MzgxNTMsNC4yNDg5OTU5OCBDOS4xMTUxMjcxOCw0LjQxNDk5MzMxIDksNC42NjY2NjY2NyA5LDUuMDA0MDE2MDYgQzksNS4zMzYwMTA3MSA5LjExNTEyNzE4LDUuNTg1MDA2NjkgOS4zNDUzODE1Myw1Ljc1MTAwNDAyIEM5LjU3NTYzNTg4LDUuOTE3MDAxMzQgOS43OTI1MDMzNSw2IDkuOTk1OTgzOTQsNiBaIE0xMC42ODc3MzIzLDE2IEwxMC42ODc3MzIzLDE0Ljg4OTg4MzYgTDEwLjY4NzczMjMsOCBMOS4zMDQ4MzI3MSw4IEw5LjMwNDgzMjcxLDkuMTEwMTE2MzggTDkuMzA0ODMyNzEsMTYgTDEwLjY4NzczMjMsMTYgWlwiIGZpbGw9XCIjMEI2RjU3XCIgZmlsbC1ydWxlPVwibm9uemVyb1wiPjwvcGF0aD5cbiAgICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5gXG4gICAgICBsYWJlbC5pbm5lckhUTUwgPSBgPHNwYW4+JHtvcHRTdW1tYXJ5LmlkfTwvc3Bhbj48YSBocmVmPScuLi90c2NvbmZpZyMke29wdFN1bW1hcnkuaWR9JyBjbGFzcz0nY29tcGlsZXJfaW5mb19saW5rJyBhbHQ9J0xvb2sgdXAgJHtvcHRTdW1tYXJ5LmlkfSBpbiB0aGUgVFNDb25maWcgUmVmZXJlbmNlJz4ke3N2Z308L2E+PGJyLz4ke29wdFN1bW1hcnkub25lbGluZXJ9YFxuXG4gICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuICAgICAgaW5wdXQudmFsdWUgPSBvcHRTdW1tYXJ5LmlkXG4gICAgICBpbnB1dC50eXBlID0gXCJjaGVja2JveFwiXG4gICAgICBpbnB1dC5uYW1lID0gb3B0U3VtbWFyeS5pZFxuICAgICAgaW5wdXQuaWQgPSBcIm9wdGlvbi1cIiArIG9wdFN1bW1hcnkuaWRcblxuICAgICAgaW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHNhbmRib3gudXBkYXRlQ29tcGlsZXJTZXR0aW5nKG9wdFN1bW1hcnkuaWQsIGlucHV0LmNoZWNrZWQpXG4gICAgICB9XG5cbiAgICAgIGxhYmVsLmh0bWxGb3IgPSBpbnB1dC5pZFxuXG4gICAgICBsaS5hcHBlbmRDaGlsZChpbnB1dClcbiAgICAgIGxpLmFwcGVuZENoaWxkKGxhYmVsKVxuICAgICAgb2wuYXBwZW5kQ2hpbGQobGkpXG4gICAgfSlcblxuICAgIGNhdGVnb3J5RGl2LmFwcGVuZENoaWxkKGhlYWRlcilcbiAgICBjYXRlZ29yeURpdi5hcHBlbmRDaGlsZChvbClcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2F0ZWdvcnlEaXYpXG4gIH0pXG5cbiAgY29uc3QgZHJvcGRvd25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXBpbGVyLWRyb3Bkb3duc1wiKSFcblxuICBjb25zdCB0YXJnZXQgPSBvcHRpb25zU3VtbWFyeS5maW5kKHN1bSA9PiBzdW0uaWQgPT09IFwidGFyZ2V0XCIpIVxuICBjb25zdCB0YXJnZXRTd2l0Y2ggPSBjcmVhdGVTZWxlY3QoXG4gICAgdGFyZ2V0LmRpc3BsYXksXG4gICAgXCJ0YXJnZXRcIixcbiAgICB0YXJnZXQub25lbGluZXIsXG4gICAgc2FuZGJveCxcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuU2NyaXB0VGFyZ2V0XG4gIClcbiAgZHJvcGRvd25Db250YWluZXIuYXBwZW5kQ2hpbGQodGFyZ2V0U3dpdGNoKVxuXG4gIGNvbnN0IGpzeCA9IG9wdGlvbnNTdW1tYXJ5LmZpbmQoc3VtID0+IHN1bS5pZCA9PT0gXCJqc3hcIikhXG4gIGNvbnN0IGpzeFN3aXRjaCA9IGNyZWF0ZVNlbGVjdChqc3guZGlzcGxheSwgXCJqc3hcIiwganN4Lm9uZWxpbmVyLCBzYW5kYm94LCBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuSnN4RW1pdClcbiAgZHJvcGRvd25Db250YWluZXIuYXBwZW5kQ2hpbGQoanN4U3dpdGNoKVxuXG4gIGNvbnN0IG1vZFN1bSA9IG9wdGlvbnNTdW1tYXJ5LmZpbmQoc3VtID0+IHN1bS5pZCA9PT0gXCJtb2R1bGVcIikhXG4gIGNvbnN0IG1vZHVsZVN3aXRjaCA9IGNyZWF0ZVNlbGVjdChcbiAgICBtb2RTdW0uZGlzcGxheSxcbiAgICBcIm1vZHVsZVwiLFxuICAgIG1vZFN1bS5vbmVsaW5lcixcbiAgICBzYW5kYm94LFxuICAgIG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC5Nb2R1bGVLaW5kXG4gIClcbiAgZHJvcGRvd25Db250YWluZXIuYXBwZW5kQ2hpbGQobW9kdWxlU3dpdGNoKVxufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlQ29uZmlnRHJvcGRvd25Gb3JDb21waWxlck9wdGlvbnMgPSAoc2FuZGJveDogU2FuZGJveCwgbW9uYWNvOiBNb25hY28pID0+IHtcbiAgY29uc3QgY29tcGlsZXJPcHRzID0gc2FuZGJveC5nZXRDb21waWxlck9wdGlvbnMoKVxuICBjb25zdCBib29sT3B0aW9ucyA9IE9iamVjdC5rZXlzKGNvbXBpbGVyT3B0cykuZmlsdGVyKGsgPT4gdHlwZW9mIGNvbXBpbGVyT3B0c1trXSA9PT0gXCJib29sZWFuXCIpXG5cbiAgYm9vbE9wdGlvbnMuZm9yRWFjaChvcHQgPT4ge1xuICAgIGNvbnN0IGlucHV0SUQgPSBcIm9wdGlvbi1cIiArIG9wdFxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJRCkgYXMgSFRNTElucHV0RWxlbWVudFxuICAgIGlucHV0LmNoZWNrZWQgPSAhIWNvbXBpbGVyT3B0c1tvcHRdXG4gIH0pXG5cbiAgY29uc3QgY29tcGlsZXJJRFRvTWFwczogYW55ID0ge1xuICAgIG1vZHVsZTogbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0Lk1vZHVsZUtpbmQsXG4gICAganN4OiBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuSnN4RW1pdCxcbiAgICB0YXJnZXQ6IG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC5TY3JpcHRUYXJnZXQsXG4gIH1cblxuICBPYmplY3Qua2V5cyhjb21waWxlcklEVG9NYXBzKS5mb3JFYWNoKGZsYWdJRCA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXBpbGVyLXNlbGVjdC1cIiArIGZsYWdJRCkgYXMgSFRNTElucHV0RWxlbWVudFxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGNvbXBpbGVyT3B0c1tmbGFnSURdXG4gICAgY29uc3QgbWFwID0gY29tcGlsZXJJRFRvTWFwc1tmbGFnSURdXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHJlYWxWYWx1ZSA9IG1hcFtjdXJyZW50VmFsdWVdXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGlucHV0LmNoaWxkcmVuKSB7XG4gICAgICBvcHRpb24uc2VsZWN0ZWQgPSBvcHRpb24udmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gcmVhbFZhbHVlLnRvTG93ZXJDYXNlKClcbiAgICB9XG4gIH0pXG59XG5cbmNvbnN0IGNyZWF0ZVNlbGVjdCA9ICh0aXRsZTogc3RyaW5nLCBpZDogc3RyaW5nLCBibHVyYjogc3RyaW5nLCBzYW5kYm94OiBTYW5kYm94LCBvcHRpb246IGFueSkgPT4ge1xuICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKVxuICBjb25zdCB0ZXh0VG9EZXNjcmliZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gIHRleHRUb0Rlc2NyaWJlLnRleHRDb250ZW50ID0gdGl0bGUgKyBcIjpcIlxuICBsYWJlbC5hcHBlbmRDaGlsZCh0ZXh0VG9EZXNjcmliZSlcblxuICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpXG4gIHNlbGVjdC5pZCA9IFwiY29tcGlsZXItc2VsZWN0LVwiICsgaWRcbiAgbGFiZWwuYXBwZW5kQ2hpbGQoc2VsZWN0KVxuXG4gIHNlbGVjdC5vbmNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHNlbGVjdC52YWx1ZSAvLyB0aGUgaHVtYW4gc3RyaW5nXG4gICAgY29uc3QgY29tcGlsZXJJbmRleCA9IG9wdGlvblt2YWx1ZV1cbiAgICBzYW5kYm94LnVwZGF0ZUNvbXBpbGVyU2V0dGluZyhpZCwgY29tcGlsZXJJbmRleClcbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9wdGlvbilcbiAgICAuZmlsdGVyKGtleSA9PiBpc05hTihOdW1iZXIoa2V5KSkpXG4gICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIGhpZGUgTGF0ZXN0XG4gICAgICBpZiAoa2V5ID09PSBcIkxhdGVzdFwiKSByZXR1cm5cblxuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKVxuICAgICAgb3B0aW9uLnZhbHVlID0ga2V5XG4gICAgICBvcHRpb24udGV4dCA9IGtleVxuXG4gICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKVxuICAgIH0pXG5cbiAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gIHNwYW4udGV4dENvbnRlbnQgPSBibHVyYlxuICBzcGFuLmNsYXNzTGlzdC5hZGQoXCJjb21waWxlci1mbGFnLWJsdXJiXCIpXG4gIGxhYmVsLmFwcGVuZENoaWxkKHNwYW4pXG5cbiAgcmV0dXJuIGxhYmVsXG59XG5cbmV4cG9ydCBjb25zdCBzZXR1cEpTT05Ub2dnbGVGb3JDb25maWcgPSAoc2FuZGJveDogU2FuZGJveCkgPT4ge31cbiJdfQ==