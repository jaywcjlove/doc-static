{"version":3,"file":"src_app_custom-elements_events_events_module_ts.8aabd709507cf577.js","mappings":"4PAUA,MAAMA,EAAaC,KAAqB,cAGlC,MAAOC,EAGXC,YAAoBC,EAA0BC,GAA1BC,YAA0BA,cAC5CA,KAAKC,OAASD,KAAKE,WACrB,CAEQA,YACN,MAAMD,EAASD,KAAKF,KAAKK,IAAST,GAAYU,QAC5CC,KAAWC,IACTN,KAAKD,OAAOO,MAAM,IAAIC,MAAM,GAAGb,qBAA8BY,EAAME,aAAU,EACtEC,MAAG,OACX,EACDC,QAEDT,SAAiDU,UAC3CV,CACT,CAACW,kDAjBUhB,GAAaiB,+DAAbjB,EAAakB,QAAblB,EAAa,kCCXxBmB,eAA2B,OACtBA,0EAA8DA,QACjEA,aACEA,+DAAkDA,eAA0CA,2BAAeA,QAC3GA,8BAAiBA,eAAsCA,wBAAYA,QAAIA,eACzEA,QACAA,cACEA,mEAAqDA,gBAAmCA,8BAAiBA,QAAIA,eAC/GA,gCAGAA,2EADFA,SACEA,gCACFA,0CADiBA,qCAA+B,6EAOlDA,kCAaUA,gBAA4BA,SAAgBA,wCAAhBA,iDAC5BA,gBAA+CA,SAAgBA,wCAA3CA,8BAA2BA,iDAHnDA,cAAiC,UAE7BA,wBACAA,sBACFA,QACAA,cAAIA,SAAsBA,oCAJtBA,uCACKA,kCAGLA,uDAbVA,mBAA6B,UAA7BA,CAA6B,OAA7BA,CAA6B,QAGnBA,iBAAKA,QACTA,cAAIA,sBAAUA,YAGlBA,iBACEA,sBAOFA,oCAPwBA,6BCbtB,MAAOC,EAKXnB,YAAoBoB,wBAHpBjB,gBAA6B,GAC7BA,oBAAiC,EAEmB,CAEpDkB,WACElB,KAAKiB,cAAchB,OAAOkB,UAAUlB,IAClCD,KAAKoB,WAAanB,EACboB,OAAOC,GAASC,EAAYD,IAC5BE,KAAK,CAACC,EAAiBC,IAAqBD,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,MAAS,GAAI,GAEpF5B,KAAK6B,eAAiB5B,EACjBoB,OAAOC,IAAUC,EAAYD,IAC7BE,KAAK,CAACC,EAAiBC,IAAqBD,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,OAAS,EAAK,EAAC,EAE1F,CAAChB,kDAjBUI,GAAeH,+CAAfG,EAAec,0ZDlB5Bf,cAAIA,sCAA0BA,QAC9BA,WACEA,wBAUAA,gCAGFA,QAEAA,cAEAA,cAAIA,uCAA2BA,QAC/BA,gCAEAA,kEArBcA,qDACNA,kCAkBOA,qCAA+B,+GCkB9C,SAASQ,EAAYD,GACnB,OAAO,IAAIS,KAAKT,EAAMK,KAAKC,OAAOI,UAAYD,KAAKE,MAnCzC,KAoCZ,CC7BM,MAAOC,EALbrC,cAMEG,4BAAoCgB,EACrCJ,kDAFYsB,EAAY,sCAAZA,IAAYtB,yCAFZ,CAAEhB,GAAeuC,SAFjBC","names":["eventsPath","CONTENT_URL_PREFIX","EventsService","constructor","http","logger","this","events","getEvents","get","pipe","catchError","error","Error","message","of","publishLast","connect","static","core","factory","i0","EventsComponent","eventsService","ngOnInit","subscribe","pastEvents","filter","event","isInThePast","sort","l","r","date","start","upcomingEvents","selectors","Date","getTime","now","EventsModule","imports","CommonModule"],"sourceRoot":"webpack:///","sources":["./src/app/custom-elements/events/events.service.ts","./src/app/custom-elements/events/events.component.html","./src/app/custom-elements/events/events.component.ts","./src/app/custom-elements/events/events.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable, of } from 'rxjs';\nimport { catchError, publishLast } from 'rxjs/operators';\n\nimport { AngularEvent } from './events.component';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { Logger } from 'app/shared/logger.service';\n\nconst eventsPath = CONTENT_URL_PREFIX + 'events.json';\n\n@Injectable()\nexport class EventsService {\n  events: Observable<AngularEvent[]>;\n\n  constructor(private http: HttpClient, private logger: Logger) {\n    this.events = this.getEvents();\n  }\n\n  private getEvents() {\n    const events = this.http.get<any>(eventsPath).pipe(\n      catchError(error => {\n        this.logger.error(new Error(`${eventsPath} request failed: ${error.message}`));\n        return of([]);\n      }),\n      publishLast()\n    );\n    (events as ConnectableObservable<AngularEvent[]>).connect();\n    return events;\n  }\n}\n","<h2>Where we'll be presenting:</h2>\n<ng-container [ngSwitch]=\"!!upcomingEvents.length\">\n  <div *ngSwitchCase=\"false\">\n    <p>We don't have any upcoming speaking engagements at the moment.</p>\n    <p>\n      Until something comes up, make sure you check our <a href=\"https://www.youtube.com/angular\">YouTube channel</a>\n      and follow us on <a href=\"https://twitter.com/angular\">social media</a>.\n    </p>\n    <p>\n      If you want us to be part of your event reach out on <a href=\"mailto:devrel@angular.io\">devrel@angular.io</a>!\n    </p>\n  </div>\n  <ng-container *ngSwitchDefault>\n    <ng-container *ngTemplateOutlet=\"eventsTable; context: {$implicit: upcomingEvents}\"></ng-container>\n  </ng-container>\n</ng-container>\n\n<br />\n\n<h2>Where we already presented:</h2>\n<ng-container *ngTemplateOutlet=\"eventsTable; context: {$implicit: pastEvents}\"></ng-container>\n\n<ng-template #eventsTable let-events>\n  <table class=\"is-full-width\">\n    <thead>\n      <tr>\n        <th>Event</th>\n        <th>Start date</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let event of events\">\n        <th [ngSwitch]=\"!!event.linkUrl\">\n          <span *ngSwitchCase=\"false\">{{ event.name }}</span>\n          <a *ngSwitchDefault href=\"{{ event.linkUrl }}\">{{ event.name }}</a>\n        </th>\n        <td>{{ event.date.start }}</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventsService } from './events.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\n\nexport interface AngularEvent {\n  name: string;\n  linkUrl?: string;\n  date: {\n    start: `${number}-${number}-${number}`; // Date string in the format: `YYYY-MM-DD`\n  };\n}\n\n@Component({\n  selector: 'aio-events',\n  templateUrl: 'events.component.html'\n})\nexport class EventsComponent implements OnInit {\n\n  pastEvents: AngularEvent[] = [];\n  upcomingEvents: AngularEvent[] = [];\n\n  constructor(private eventsService: EventsService) { }\n\n  ngOnInit() {\n    this.eventsService.events.subscribe(events => {\n      this.pastEvents = events\n          .filter(event => isInThePast(event))\n          .sort((l: AngularEvent, r: AngularEvent) => (l.date.start < r.date.start) ? 1 : -1);\n\n      this.upcomingEvents = events\n          .filter(event => !isInThePast(event))\n          .sort((l: AngularEvent, r: AngularEvent) => (l.date.start < r.date.start) ? -1 : 1);\n    });\n  }\n}\n\nfunction isInThePast(event: AngularEvent): boolean {\n  return new Date(event.date.start).getTime() < Date.now() - DAY;\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EventsComponent } from './events.component';\nimport { EventsService } from './events.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ EventsComponent ],\n  providers: [ EventsService ],\n})\nexport class EventsModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = EventsComponent;\n}\n"],"x_google_ignoreList":[]}