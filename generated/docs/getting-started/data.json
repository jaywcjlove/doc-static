{
  "id": "getting-started/data",
  "title": "Managing Data",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/getting-started/data.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"managing-data\" translation-result=\"on\">管理数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#managing-data\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"managing-data\">Managing Data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#managing-data\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">在<a href=\"getting-started/routing\" title=\"入门：路由\">路由</a>的末尾，本应用实现了一个包含两个视图的商品名录：商品列表和商品详情。用户点击清单中的某个商品名称，就会在新视图中看到具有显著 URL（路由）的详情页。</p><p translation-origin=\"off\">At the end of <a href=\"getting-started/routing\" title=\"Getting Started: Routing\">Routing</a>, the online store application has a product catalog with two views: a product list and product details.\nUsers can click on a product name from the list to see details in a new view, with a distinct URL (route). </p>\n\n<p translation-result=\"on\">在本节中，你将创建购物车。你将：</p><p translation-origin=\"off\">In this section, you'll create the shopping cart. You'll:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">修改商品详情页，让它包含一个 “Buy” 按钮，它会把当前商品添加到由 \"购物车服务\" 管理的商品列表中。</p><p translation-origin=\"off\">Update the product details page to include a \"Buy\" button, which adds the current product to a list of products managed by a cart service. </p>\n\n</li>\n<li>\n<p translation-result=\"on\">添加一个购物车组件，它会显示你添加到购物车中的商品。</p><p translation-origin=\"off\">Add a cart component, which displays the items you added to your cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">添加一个配送组件，它会使用 Angular 的 HttpClient 从 <code>.json</code> 文件中检索配送数据来取得购物车中这些商品的运费。</p><p translation-origin=\"off\">Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's HttpClient to retrieve shipping data from a <code>.json</code> file.</p>\n\n</li>\n</ul>\n<a id=\"services\"></a>\n<h2 id=\"services\" translation-result=\"on\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"services\">Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">服务是 Angular 应用的重要组成部分。在 Angular 中，服务是一个类的实例，它可以借助 Angular 的<a href=\"guide/glossary#dependency-injection-di\" title=\"依赖注入定义\">依赖注入系统</a>来让应用中的任何一个部件都能使用它。</p><p translation-origin=\"off\">Services are an integral part of Angular applications. In Angular, a service is an instance of a class that can be made available to any part of your application using Angular's <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection definition\">dependency injection system</a>.</p>\n\n<p translation-result=\"on\">服务可以让你在应用的各个部件之间共享数据。对于在线商店，购物车服务就是存放购物车的数据和方法的地方。</p><p translation-origin=\"off\">Services are the place where you share data between parts of your application. For the online store, the cart service is where you store your cart data and methods.</p>\n\n<a id=\"create-cart-service\"></a>\n<h2 id=\"create-the-shopping-cart-service\" translation-result=\"on\">创建购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-shopping-cart-service\">Create the shopping cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">到目前为止，用户可以查看商品信息、模拟共享，并接收商品变化的通知。但是，无法购买商品。</p><p translation-origin=\"off\">Up to this point, users can view product information, and simulate sharing and being notified about product changes. They cannot, however, buy products. </p>\n\n<p translation-result=\"on\">在本节中，你将在商品详情页中添加“Buy”按钮。你还可以设置一个购物车服务来存储购物车中商品的相关信息。</p><p translation-origin=\"off\">In this section, you'll add a \"Buy\" button the product details page.\nYou'll also set up a cart service to store information about products in the cart.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">稍后，在本教程的<a href=\"getting-started/forms\" title=\"入门：表单\">表单</a>部分，也会从用户的结账页面中访问这个 购物车服务。</p><p translation-origin=\"off\">Later, in the <a href=\"getting-started/forms\" title=\"Getting Started: Forms\">Forms</a> part of this tutorial, this cart service also will be accessed from the page where the user checks out. </p>\n\n</div>\n<a id=\"generate-cart-service\"></a>\n<h3 id=\"define-a-cart-service\" translation-result=\"on\">定义购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"define-a-cart-service\">Define a cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">生成购物车服务。</p><p translation-origin=\"off\">Generate a cart service.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">右键单击 <code>app</code> 文件夹，选择 <code>Angular Generator</code>，然后选择 <code>**Service**</code>。把新的服务命名为 <code>cart</code>。</p><p translation-origin=\"off\">Right click on the <code>app</code> folder, choose <code>Angular Generator</code>, and choose <code>**Service**</code>. Name the new service <code>cart</code>.</p>\n\n</li>\n</ol>\n<p>      <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root'\n})\nexport class CartService {\n\n  constructor() {}\n\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">如果生成的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器中没有包含 <code>{ <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root' }</code> 语句，那就插入它，如上图所示。</p><p translation-origin=\"off\">If the generated <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator does not include the <code>{ <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root' }</code> statement, then insert it as shown above.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>CartService</code> 类中，定义一个 <code>items</code> 属性来把当前商品的列表（数组）存储在购物车中。</p><p translation-origin=\"off\">In the <code>CartService</code> class, define an <code>items</code> property to store the list (array) of the current products in the cart. </p>\n\n</li>\n</ol>\n<p>   <code-example path=\"getting-started/src/app/cart.service.ts\" region=\"props\">\nexport class CartService {\n  items = [];\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">定义把商品添加到购物车、返回购物车商品以及清除购物车商品的方法：</p><p translation-origin=\"off\">Define methods to add items to the cart, return cart items, and clear the cart items: </p>\n\n</li>\n</ol>\n<p>   <code-example path=\"getting-started/src/app/cart.service.ts\" region=\"methods\" linenums=\"false\">\nexport class CartService {\n  items = [];\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n}\n\n\n</code-example></p>\n   <!--\n   To check: StackBlitz includes the constructor. If it's important (and not obvious) that the methods be below the constructor, then we should show it or say something. \n   -->\n   <!-- \n   * The `addToCart()` method appends a product to an array of `items`. \n\n   * The `getItems()` method collects the items added to the cart and returns each item with its associated quantity.\n\n   * The `clearCart()` method returns an empty array of items. \n   -->\n<a id=\"product-details-use-cart-service\"></a>\n<h3 id=\"use-the-cart-service\" translation-result=\"on\">使用购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"use-the-cart-service\">Use the cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在本节中，你将修改商品详情组件以使用这个购物车服务。你可以在商品详情视图中添加一个“Buy”按钮。单击“Buy”按钮后，你将借助购物车服务来把当前商品添加到购物车中。</p><p translation-origin=\"off\">In this section, you'll update the product details component to use the cart service.\nYou'll add a \"Buy\" button to the product details view.\nWhen the \"Buy\" button is clicked, you'll use the cart service to add the current product to the cart. </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>product-details.component.ts</code>。</p><p translation-origin=\"off\">Open <code>product-details.component.ts</code>.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">设置该组件，使其能使用这个购物车服务。</p><p translation-origin=\"off\">Set up the component to be able to use the cart service. </p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">导入购物车服务。</p><p translation-origin=\"off\">Import the cart service. </p>\n\n</li>\n</ol>\n      <code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">注入购物车服务。</p><p translation-origin=\"off\">Inject the cart service.</p>\n\n</li>\n</ol>\n      <code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n      <!-- \n      To do: Consider defining \"inject\" and describing the concept of \"dependency injection\"\n      -->\n<ol>\n<li>\n<p translation-result=\"on\">定义 <code>addToCart()</code> 方法，该方法会当前商品添加到购物车中。</p><p translation-origin=\"off\">Define the <code>addToCart()</code> method, which adds the current product to the cart. </p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   <code>addToCart()</code> 方法：</p><p translation-origin=\"off\">   The <code>addToCart()</code> method:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">收到当前的 <code>product</code></p><p translation-origin=\"off\">Receives the current <code>product</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用购物车服务的 <code>#addToCart()</code> 方法把该商品添加到购物车中</p><p translation-origin=\"off\">Uses the cart service's <code>#addToCart()</code> method to add the product the cart</p>\n\n</li>\n<li>\n<p translation-result=\"on\">显示一条 \"商品已添加到购物车\" 的消息</p><p translation-origin=\"off\">Displays a message that the product has been added to the cart</p>\n\n</li>\n</ul>\n<p>   <code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  addToCart(product) {\n    window.alert('Your product has been added to the cart!');\n    this.cartService.addToCart(product);\n  }\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">修改商品详情模板，让它具有一个“Buy”按钮，用于把当前商品添加到购物车中。</p><p translation-origin=\"off\">Update the product details template to have a \"Buy\" button that adds the current product to the cart. </p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>product-details.component.html</code>。</p><p translation-origin=\"off\">Open <code>product-details.component.html</code>.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">添加一个标签为“Buy”的按钮，并把其 <code>click()</code> 事件绑定到 <code>addToCart()</code> 方法：</p><p translation-origin=\"off\">Add a button with the label \"Buy\", and bind the <code>click()</code> event to the <code>addToCart()</code> method: </p>\n\n</li>\n</ol>\n      <code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&#x3C;h2>Product Details&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\">\n  &#x3C;h3>{{ product.name }}&#x3C;/h3>\n  &#x3C;h4>{{ product.price | currency }}&#x3C;/h4>\n  &#x3C;p>{{ product.description }}&#x3C;/p>\n\n  &#x3C;button (click)=\"addToCart(product)\">Buy&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">要查看新的“Buy”按钮，请刷新应用并单击商品名称以显示其详细信息。</p><p translation-origin=\"off\">To see the new \"Buy\" button, refresh the application and click on a product's name to display its details.</p>\n\n</li>\n</ol>\n   <figure>\n     <img src=\"generated/images/guide/getting-started/product-details-buy.png\" alt=\"Display details for selected product with a Buy button\" width=\"259\" height=\"233\">\n   </figure>\n<ol>\n<li>\n<p translation-result=\"on\">点击“Buy”按钮。该商品已添加到了购物车中存储的商品列表中，并显示一条消息。</p><p translation-origin=\"off\">Click the \"Buy\" button. The product is added to the stored list of items in the cart, and a message is displayed. </p>\n\n</li>\n</ol>\n   <figure>\n     <img src=\"generated/images/guide/getting-started/buy-alert.png\" alt=\"Display details for selected product with a Buy button\" width=\"329\" height=\"106\">\n   </figure>\n<h2 id=\"create-the-cart-page\" translation-result=\"on\">创建购物车页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#create-the-cart-page\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-cart-page\">Create the cart page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#create-the-cart-page\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">此时，用户可以通过点击“Buy”来把商品放入购物车，但他们还看不到购物车。</p><p translation-origin=\"off\">At this point, users can put items in the cart by clicking \"Buy\", but they can't yet see their cart. </p>\n\n<p translation-result=\"on\">我们将分两步来创建购物车页面：</p><p translation-origin=\"off\">We'll create the cart page in two steps: </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">创建一个购物车组件并设置到这个新组件的路由。此时，购物车页面只会显示默认文本。</p><p translation-origin=\"off\">Create a cart component and set up routing to the new component. At this point, the cart page will only have default text. </p>\n\n</li>\n<li>\n<p translation-result=\"on\">显示购物车商品</p><p translation-origin=\"off\">Display the cart items. </p>\n\n</li>\n</ol>\n<h3 id=\"set-up-the-component\" translation-result=\"on\">设置该组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#set-up-the-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"set-up-the-component\">Set up the component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#set-up-the-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"> 要创建购物车页面，首先要执行与创建商品详情组件相同的步骤，并为这个新组件设置路由。</p><p translation-origin=\"off\"> To create the cart page, you begin by following the same steps you did to create the product details component and to set up routing for the new component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">生成一个名叫 <code>cart</code> 的购物车组件。</p><p translation-origin=\"off\">Generate a cart component, named <code>cart</code>. </p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   提示：在文件列表框中，右键单击 <code>app</code> 文件夹，选择 <code>Angular Generator</code> 和 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</p><p translation-origin=\"off\">   Reminder: In the file list, right-click the <code>app</code> folder, choose <code>Angular Generator</code> and <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>. </p>\n\n<p>   <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./cart.component.css']\n})\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">为购物车组件添加路由（URL 模式）。</p><p translation-origin=\"off\">Add routing (a URL pattern) for the cart component. </p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   提示：打开 <code>app.module.ts</code>，为组件 <code>CartComponent</code> 添加一个路由，其路由为 <code>cart</code> ：</p><p translation-origin=\"off\">   Reminder: Open <code>app.module.ts</code> and add a route for the component <code>CartComponent</code>, with a <code>path</code> of <code>cart</code>:</p>\n\n   <code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n   <!-- \n   To do: Can we shorten the example code to remove the extra at the bottom? \n   -->\n<ol>\n<li>\n<p translation-result=\"on\">要查看新的购物车组件，请点击“Checkout”按钮。你会看到默认文本“cart works!”，该 URL 的格式为 <code>https://getting-started.stackblitz.io/cart</code>，其中的 getting-started.stackblitz.io 部分可能与你的 StackBlitz 项目不同。</p><p translation-origin=\"off\">To see the new cart component, click the \"Checkout\" button. You can see the \"cart works!\" default text, and the URL has the pattern <code>https://getting-started.stackblitz.io/cart</code>,  where <code>getting-started.stackblitz.io</code> may be different for your StackBlitz project. </p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   （注意：我们在顶栏组件中提供的“Checkout”按钮已经配置了指向 <code>/cart</code> 的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。）</p><p translation-origin=\"off\">   (Note: The \"Checkout\" button that we provided in the top-bar component was already configured with a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> for <code>/cart</code>.)</p>\n\n   <figure>\n     <img src=\"generated/images/guide/getting-started/cart-works.png\" alt=\"Display cart page before customizing\" width=\"259\" height=\"193\">\n   </figure>\n<h3 id=\"display-the-cart-items\" translation-result=\"on\">显示购物车商品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"display-the-cart-items\">Display the cart items<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">服务可用于跨组件共享数据：</p><p translation-origin=\"off\">Services can be used to share data across components:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">商品详情组件已经使用了购物车服务（ <code>CartService</code> ）来把商品添加到购物车中。</p><p translation-origin=\"off\">The product details component already uses the cart service (<code>CartService</code>) to add products to the cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在本节中，你将修改购物车组件以使用购物车服务来显示购物车中的商品。</p><p translation-origin=\"off\">In this section, you'll update the cart component to use the cart service to display the products in the cart.</p>\n\n</li>\n</ul>\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>cart.component.ts</code>。</p><p translation-origin=\"off\">Open <code>cart.component.ts</code>.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">设置该组件是为了让它能够使用这个购物车服务。（这与你在前面设置商品详情组件以使用购物车服务的方式是一样的。）</p><p translation-origin=\"off\">Set up the component to be able to use the cart service. (This is the same way you set up the product details component to use the cart service, above.)</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>cart.service.ts</code> 文件中导入 <code>CartService</code>。</p><p translation-origin=\"off\">Import the <code>CartService</code> from the <code>cart.service.ts</code> file.</p>\n\n</li>\n</ol>\n      <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">注入 <code>CartService</code> 来管理购物车信息。</p><p translation-origin=\"off\">Inject the <code>CartService</code> to manage cart information.</p>\n\n</li>\n</ol>\n      <code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">定义 <code>items</code> 属性，以便把商品存放在购物车中。</p><p translation-origin=\"off\">Define the <code>items</code> property to store the products in the cart.</p>\n\n</li>\n</ol>\n   <code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"items\">\nexport class CartComponent {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">使用购物车服务的 <code>getItems()</code> 方法设置这些商品。（你<a href=\"getting-started/data#generate-cart-service\">在生成 <code>cart.service.ts</code> 时</a>定义过这个方法。）</p><p translation-origin=\"off\">Set the items using the cart service's <code>getItems()</code> method. (You defined this method <a href=\"getting-started/data#generate-cart-service\">when you generated <code>cart.service.ts</code></a>.)</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   所生成的 <code>CartComponent</code> 类是这样的：</p><p translation-origin=\"off\">   The resulting <code>CartComponent</code> class should look like this: </p>\n\n   <code-example path=\"getting-started/src/app/cart/cart.component.3.ts\" region=\"props-services\">\nexport class CartComponent {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">修改模板，加上标题（“Cart”），用带有 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的 <code>&#x3C;div></code> 来显示每个购物车商品的名字和价格。</p><p translation-origin=\"off\">Update the template with a header (\"Cart\"), and use a <code>&#x3C;div></code> with an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> to display each of the cart items with its name and price.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   生成的 <code>CartComponent</code> 模板如下：</p><p translation-origin=\"off\">   The resulting <code>CartComponent</code> template should look like this: </p>\n\n   <code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">\n  &#x3C;span>{{ item.name }} &#x3C;/span>\n  &#x3C;span>{{ item.price | currency }}&#x3C;/span>\n&#x3C;/div>\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">测试你的购物车组件。</p><p translation-origin=\"off\">Test your cart component. </p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">点击“My Store”，进入商品列表页面。</p><p translation-origin=\"off\">Click on \"My Store\" to go to the product list page.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">单击商品名称以显示其详细信息。</p><p translation-origin=\"off\">Click on a product name to display its details.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">点击“Buy”，即可将商品添加到购物车。</p><p translation-origin=\"off\">Click \"Buy\" to add the product to the cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">点击“Checkout”查看购物车。</p><p translation-origin=\"off\">Click \"Checkout\" to see the cart. </p>\n\n</li>\n<li>\n<p translation-result=\"on\">要添加其它商品，请点击“My Store”返回商品列表。重复上述步骤。</p><p translation-origin=\"off\">To add another product, click \"My Store\" to return to the product list. Repeat the steps above. </p>\n\n</li>\n</ol>\n   <figure>\n     <img src=\"generated/images/guide/getting-started/cart-page-full.png\" alt=\"Cart page with products added\" width=\"259\" height=\"238\">\n   </figure>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">StackBlitz 提示：只要预览刷新，就会清除购物车。如果你对该应用进行了更改，页面就会刷新，你需要重新购买商品来填充购物车。</p><p translation-origin=\"off\">StackBlitz tip: Any time the preview refreshes, the cart is cleared. If you make changes to the app, the page refreshes, and you'll need to buy products again to populate the cart. </p>\n\n</div>\n<!-- \nTo do: New screen shot. No shipping prices link yet. Show a few products in the cart. \n-->\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解关于<a href=\"guide/architecture-services\" title=\"架构>服务简介和 DI\">服务</a>的更多信息，请参阅<a href=\"guide/architecture-services\" title=\"架构>服务简介和 DI\">“服务和依赖注入简介”</a>。</p><p translation-origin=\"off\">Learn more: See <a href=\"guide/architecture-services\" title=\"Architecture > Intro to Services and DI\">Introduction to Services and Dependency Injection</a> for more information about services. </p>\n\n</div>\n<h2 id=\"retrieve-shipping-prices\" translation-result=\"on\">检索运费价格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"retrieve-shipping-prices\">Retrieve shipping prices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2>\n\n<!-- Accessing data with the HTTP client -->\n<p translation-result=\"on\">从服务器返回的数据通常采用流的形式。流是很有用的，因为它们可以很容易地转换返回的数据，也可以修改请求数据的方式。Angular 的 HTTP 客户端（ <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> ）是一种内置的方式，可以从外部 API 中获取数据，并以流的形式提供给你的应用。</p><p translation-origin=\"off\">Data returned from servers often takes the form of a stream.\nStreams are useful because they make it easy to transform the data that is returned, and to make modifications to the way data is requested.\nThe Angular HTTP client (<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>) is a built-in way to fetch data from external APIs and provide them to your application as a stream.</p>\n\n<p translation-result=\"on\">在本节中，你将使用 HTTP 客户端从外部文件中检索运费。</p><p translation-origin=\"off\">In this section, you'll use the HTTP client to retrieve shipping prices from an external file. </p>\n\n<h3 id=\"predefined-shipping-data\" translation-result=\"on\">预定义的配送数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#predefined-shipping-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"predefined-shipping-data\">Predefined shipping data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#predefined-shipping-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">为了满足本“入门指南”的需求，我们在 <code>assets/shipping.json</code> 中提供了配送数据。你可以利用这些数据为购物车中的商品添加运费。</p><p translation-origin=\"off\">For the purpose of this Getting Started, we have provided shipping data in <code>assets/shipping.json</code>.\nYou'll use this data to add shipping prices for items in the cart. </p>\n\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<h3 id=\"enable-httpclient-for-app\" translation-result=\"on\">为应用启用 HttpClient<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#enable-httpclient-for-app\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"enable-httpclient-for-app\">Enable HttpClient for app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#enable-httpclient-for-app\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在使用 Angular 的 HTTP 客户端之前，你必须先设置你的应用来使用 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p><p translation-origin=\"off\">Before you can use Angular's HTTP client, you must set up your app to use <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>. </p>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 中注册了在整个应用中使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务的单个实例所需的服务提供商。你可以在服务中注入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务来获取数据并与外部 API 和资源进行交互。</p><p translation-origin=\"off\">Angular's <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> registers the providers needed to use a single instance of the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service throughout your app.\nThe <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service is what you inject into your services to fetch data and interact with external APIs and resources. </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>app.module.ts</code>。</p><p translation-origin=\"off\">Open <code>app.module.ts</code>. </p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   该文件包含可供整个应用使用的导入对象和功能。</p><p translation-origin=\"off\">   This file contains imports and functionality that is available to the entire app. </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包中导入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p><p translation-origin=\"off\">Import <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package.</p>\n\n</li>\n</ol>\n   <code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 添加到应用模块（<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>）的 <code>imports</code> 数组中。</p><p translation-origin=\"off\">Add <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>imports</code> array of the app module (<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>).</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   这会在全局注册 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 提供商。</p><p translation-origin=\"off\">   This registers Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> providers globally.</p>\n\n   <code-example path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { TopBarComponent } from './top-bar/top-bar.component';\nimport { ProductListComponent } from './product-list/product-list.component';\nimport { ProductAlertsComponent } from './product-alerts/product-alerts.component';\nimport { ProductDetailsComponent } from './product-details/product-details.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<!-- \nTo do: Should ReactiveFormsModule already be here? Currently, it is in the starter stackblitz, so this doc assumes it is already included and not added in the forms section.\n-->\n<!-- \nTo do: Should ReactiveFormsModule already be here? \n-->\n<h3 id=\"enable-httpclient-for-cart-service\" translation-result=\"on\">为购物车服务启用 HttpClient<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#enable-httpclient-for-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"enable-httpclient-for-cart-service\">Enable HttpClient for cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#enable-httpclient-for-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>cart.service.ts</code>。</p><p translation-origin=\"off\">Open <code>cart.service.ts</code>.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包中导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p><p translation-origin=\"off\">Import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package.</p>\n\n</li>\n</ol>\n   <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到 <code>CartService</code> 组件类的构造函数中：</p><p translation-origin=\"off\">Inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the constructor of the <code>CartService</code> component class: </p>\n\n</li>\n</ol>\n   <code-example path=\"getting-started/src/app/cart.service.ts\" region=\"inject-http\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n}\n\n\n</code-example>\n<h3 id=\"define-the-get-method\" translation-result=\"on\">定义 get() 方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#define-the-get-method\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"define-the-get-method\">Define the get() method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#define-the-get-method\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如你所见，多个组件可以使用同一个服务。在这个教程的后半部分，商品配送组件将使用该购物车服务从 <code>shipping.json</code> 文件中借助 HTTP 检索配送数据。在这里你要定义很快就要用到的 <code>get()</code> 方法。</p><p translation-origin=\"off\">As you've seen, multiple components can leverage the same service.\nLater in this tutorial, the shipping component will use the cart service to retrieve shipping data via HTTP from the <code>shipping.json</code> file.\nHere you'll define the <code>get()</code> method that will be used.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">继续在 <code>cart.service.ts</code> 中工作。</p><p translation-origin=\"off\">Continue working in <code>cart.service.ts</code>.</p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>clearCart()</code> 方法下面，定义一个新的 <code>getShippingPrices()</code> 方法，该方法使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>#get()</code> 方法检索配送数据（类型和价格）。</p><p translation-origin=\"off\">Below the <code>clearCart()</code> method, define a new <code>getShippingPrices()</code> method that uses the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>#get()</code> method to retrieve the shipping data (types and prices).</p>\n\n</li>\n</ol>\n<p>   <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n}\n\n\n</code-example></p>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解关于 Angular HttpClient 的更多信息，请参阅<a href=\"guide/http\" title=\"HttpClient 指南\">HttpClient 指南</a>。</p><p translation-origin=\"off\">Learn more: See the <a href=\"guide/http\" title=\"HttpClient guide\">HttpClient guide</a> for more information about Angular's HttpClient. </p>\n\n</div>\n<h2 id=\"define-the-shipping-page\" translation-result=\"on\">定义配送页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#define-the-shipping-page\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"define-the-shipping-page\">Define the shipping page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#define-the-shipping-page\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">现在你的应用已经可以检索配送数据了，你还要创建一个配送组件和相关的模板。</p><p translation-origin=\"off\">Now that your app can retrieve shipping data, you'll create a shipping component and associated template. </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">生成一个名为 <code>shipping</code> 的新组件。</p><p translation-origin=\"off\">Generate a new component named <code>shipping</code>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   提示：在文件列表框中，右键单击 <code>app</code> 文件夹，选择 <code>Angular Generator</code> 和 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</p><p translation-origin=\"off\">   Reminder: In the file list, right-click the <code>app</code> folder, choose <code>Angular Generator</code> and <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>. </p>\n\n<p>   <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./shipping.component.css']\n})\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>app.module.ts</code> 中，添加一个配送路由。其 <code>path</code> 为 <code>shipping</code>，其 component 为 <code>ShippingComponent</code>。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, add a route for shipping. Specify a <code>path</code> of <code>shipping</code> and a component of <code>ShippingComponent</code>. </p>\n\n</li>\n</ol>\n<p>   <code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example></p>\n<p translation-result=\"on\">   新的配送组件尚未挂钩到任何其它组件，但你可以通过输入其路由特有的 URL 在预览窗格中看到它。该 URL 具有以下模式：<code>https://getting-started.stackblitz.io/shipping</code>，其中的 gets-started.stackblitz.io 部分可能与你的 StackBlitz 项目不同。</p><p translation-origin=\"off\">   The new shipping component isn't hooked into any other component yet, but you can see it in the preview pane by entering the URL specified by its route. The URL has the pattern: <code>https://getting-started.stackblitz.io/shipping</code> where the <code>getting-started.stackblitz.io</code> part may be different for your StackBlitz project. </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">修改配送组件，让它利用购物车服务从 <code>shipping.json</code> 文件中通过 HTTP 检索配送数据。</p><p translation-origin=\"off\">Modify the shipping component so it uses the cart service to retrieve shipping data via HTTP from the <code>shipping.json</code> file. </p>\n\n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">导入购物车服务。</p><p translation-origin=\"off\">Import the cart service.</p>\n\n</li>\n</ol>\n<p>      <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { CartService } from '../cart.service';\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">定义 <code>shippingCosts</code> 属性。</p><p translation-origin=\"off\">Define a <code>shippingCosts</code> property. </p>\n\n</li>\n</ol>\n<p>      <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent {\n  shippingCosts;\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">把购物车服务注入到 <code>ShippingComponent</code> 类中：</p><p translation-origin=\"off\">Inject the cart service into the <code>ShippingComponent</code> class: </p>\n\n</li>\n</ol>\n<p>      <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(private cartService: CartService) {\n}\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">利用购物车服务的 <code>getShippingPrices()</code> 方法设置 <code>shippingCosts</code> 属性。</p><p translation-origin=\"off\">Set the <code>shippingCosts</code> property using the <code>getShippingPrices()</code> method from cart service.</p>\n\n</li>\n</ol>\n<p>      <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"ctor\">\nexport class ShippingComponent {\n  shippingCosts;\n\n  constructor(private cartService: CartService) {\n    this.shippingCosts = this.cartService.getShippingPrices();\n  }\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">利用 async 管道修改配送组件的模板，以显示配送类型和价格：</p><p translation-origin=\"off\">Update the shipping component's template to display the shipping types and prices using async pipe:</p>\n\n</li>\n</ol>\n<p>   <code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&#x3C;h3>Shipping Prices&#x3C;/h3>\n\n&#x3C;div class=\"shipping-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | async\">\n  &#x3C;span>{{ shipping.type }} &#x3C;/span>\n  &#x3C;span>{{ shipping.price | currency }}&#x3C;/span>\n&#x3C;/div>\n\n</code-example></p>\n   <!--\n   To decide: Should we describe async pipe\n   -->\n<ol>\n<li>\n<p translation-result=\"on\">在购物车页面中添加一个到配送页面的链接：</p><p translation-origin=\"off\">Add a link from the cart page to the shipping page:</p>\n\n</li>\n</ol>\n<p>   <code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;p>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\">Shipping Prices&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/p>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">\n  &#x3C;span>{{ item.name }} &#x3C;/span>\n  &#x3C;span>{{ item.price | currency }}&#x3C;/span>\n&#x3C;/div>\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">测试这个运费价格功能：</p><p translation-origin=\"off\">Test your shipping prices feature:</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">   点击“Checkout”按钮，查看更新后的购物车。（注意，修改应用会导致预览窗格刷新，这会清空购物车。）</p><p translation-origin=\"off\">   Click on the \"Checkout\" button to see the updated cart. (Remember that changing the app causes the preview to refresh, which empties the cart.)</p>\n\n   <figure>\n     <img src=\"generated/images/guide/getting-started/cart-empty-with-shipping-prices.png\" alt=\"Cart with link to shipping prices\" width=\"301\" height=\"208\">\n   </figure>\n<p translation-result=\"on\">   点击此链接可以导航到运费页。</p><p translation-origin=\"off\">   Click on the link to navigate to the shipping prices.</p>\n\n   <figure>\n     <img src=\"generated/images/guide/getting-started/shipping-prices.png\" alt=\"Display shipping prices\" width=\"301\" height=\"238\">\n   </figure>\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"getting-started/data#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">恭喜！你有一个带有商品名录和购物车的在线商店应用了，而且你还可以查询并显示运费。</p><p translation-origin=\"off\">Congratulations! You have an online store application with a product catalog and shopping cart. You also have the ability to look up and display shipping prices. </p>\n\n<p translation-result=\"on\">要继续探索 Angular，请选择下列选项之一：</p><p translation-origin=\"off\">To continue exploring Angular, choose either of the following options:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"getting-started/forms\" title=\"入门：表单\">继续浏览“表单”部分</a>，通过添加购物车页面和基于表单的结帐功能来完成该应用。你还可以创建一个表单来收集用户信息，作为结账过程的一部分。</p><p translation-origin=\"off\"><a href=\"getting-started/forms\" title=\"Getting Started: Forms\">Continue to the \"Forms\" section</a> to finish the app by adding the shopping cart page and a form-based checkout feature. You'll create a form to collect user information as part of checkout. </p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"getting-started/deployment\" title=\"入门：部署\">跳到“部署”部分，</a>把你的应用部署到 Firebase 或转成本地开发。</p><p translation-origin=\"off\"><a href=\"getting-started/deployment\" title=\"Getting Started: Deployment\">Skip ahead to the \"Deployment\" section</a> to deploy your app to Firebase or move to local development. </p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - getting-started/deployment\n - getting-started/forms\n - getting-started/routing\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/IterableChangeRecord#item\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - getting-started/data#create-the-cart-page\n - getting-started/data#create-the-shopping-cart-service\n - getting-started/data#define-a-cart-service\n - getting-started/data#define-the-get-method\n - getting-started/data#define-the-shipping-page\n - getting-started/data#display-the-cart-items\n - getting-started/data#enable-httpclient-for-app\n - getting-started/data#enable-httpclient-for-cart-service\n - getting-started/data#generate-cart-service\n - getting-started/data#managing-data\n - getting-started/data#next-steps\n - getting-started/data#predefined-shipping-data\n - getting-started/data#retrieve-shipping-prices\n - getting-started/data#services\n - getting-started/data#set-up-the-component\n - getting-started/data#use-the-cart-service\n - getting-started/deployment\n - getting-started/forms\n - getting-started/routing\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/http\n - https://github.com/angular/angular-cn/edit/aio/aio/content/getting-started/data.md?message=docs%3A%20请简述你的修改...\n-->"
}