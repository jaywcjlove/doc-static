{
  "id": "start/forms",
  "title": "Forms",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/start/forms.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"forms\" translation-result=\"on\">表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#forms\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"forms\">Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#forms\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">当<a href=\"start/data\" title=\"入门：管理数据\">管理数据</a>结束时，这个在线商店应用有了一个商品名录和一个购物车。</p><p translation-origin=\"off\">At the end of <a href=\"start/data\" title=\"Getting Started: Managing Data\">Managing Data</a>, the online store application has a product catalog and a shopping cart.</p>\n\n<p translation-result=\"on\">本节将带你通过添加基于表单的结帐功能来完成该应用。你还将创建一个表单来收集用户信息，作为结账过程的一部分。</p><p translation-origin=\"off\">This section walks you through adding a form-based checkout feature to collect user information as part of checkout.</p>\n\n<h2 id=\"forms-in-angular\" translation-result=\"on\">Angular 中的表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#forms-in-angular\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"forms-in-angular\">Forms in Angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#forms-in-angular\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 中的表单建立在标准 HTML 表单功能之上，以帮助你创建自定义表单控件和轻松的验证体验。Angular 响应式表单有两个部分：组件中那些用于存储和管理表单的对象，以及表单在模板中的可视化。</p><p translation-origin=\"off\">Forms in Angular build upon the standard HTML forms to help you create custom form controls and easy validation experiences. There are two parts to an Angular Reactive form: the objects that live in the component to store and manage the form, and the visualization of the form that lives in the template.</p>\n\n<h2 id=\"define-the-checkout-form-model\" translation-result=\"on\">定义结帐的表单模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#define-the-checkout-form-model\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"define-the-checkout-form-model\">Define the checkout form model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#define-the-checkout-form-model\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">首先，你要设置一个结账的表单模型。在组件类中定义它，把它作为表单状态的真相之源（source of truth）。</p><p translation-origin=\"off\">First, set up the checkout form model. Defined in the component class, the form model is the source of truth for the status of the form.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>cart.component.ts</code>。</p><p translation-origin=\"off\">Open <code>cart.component.ts</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务为生成控件提供了方便的方法。和你使用过的其它服务一样，你需要导入并注入该服务，然后才能使用它：</p><p translation-origin=\"off\">Angular's <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service provides convenient methods for generating controls. As with the other services you've used, you need to import and inject the service before you can use it:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>@angular/forms</code> 包中导入 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务。</p><p translation-origin=\"off\">Import the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service from the <code>@angular/forms</code> package.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\nimport { CartService } from '../cart.service';\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 中提供了 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务，它已经在之前修改过的 <code>AppModule</code>（位于 <code>app.module.ts</code> ）中导入过了。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> provides the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service, which <code>AppModule</code> (in <code>app.module.ts</code>) already imports.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">注入这个 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务。</p><p translation-origin=\"off\">Inject the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"inject-form-builder\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  ) {\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">还是在 <code>CartComponent</code> 类中，定义 <code>checkoutForm</code> 属性来存储表单模型。</p><p translation-origin=\"off\">Still in the <code>CartComponent</code> class, define the <code>checkoutForm</code> property to store the form model.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"checkout-form\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n  checkoutForm;\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">   要想手机用户的姓名和地址，把 <code>checkoutForm</code> 属性设置为一个包含 <code>name</code> 和 <code>address</code> 字段的表单模型。使用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 的 <code><a href=\"api/forms/FormBuilder#group\" class=\"code-anchor\">group()</a></code> 方法来创建它，把该语句加入构造函数的花括号 <code>{}</code> 中间。</p><p translation-origin=\"off\">To gather the user's name and address, set the <code>checkoutForm</code> property with a form model containing <code>name</code> and <code>address</code> fields, using the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> <code><a href=\"api/forms/FormBuilder#group\" class=\"code-anchor\">group()</a></code> method. Add this between the curly braces, <code>{}</code>,\nof the constructor.</p>\n\n   <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"checkout-form-group\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n  checkoutForm;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  ) {\n    this.checkoutForm = this.formBuilder.group({\n      name: '',\n      address: ''\n    });\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在结帐过程中，用户要提交他们的姓名和地址。在提交订单之后，表单应该重置，购物车应该清空。</p><p translation-origin=\"off\">For the checkout process, users need to submit their name and address. When they submit their order, the form should reset and the cart should clear.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">    在 <code>cart.component.ts</code> 中，定义一个 <code>onSubmit()</code> 方法来处理表单。使用 <code>CartService</code> <code>clearCart()</code> 方法清空购物车项目，并在提交完之后重置该表单。在实际应用中，此方法也会把数据提交给外部服务器。\n整个购物车组件类如下所示：</p><p translation-origin=\"off\">In <code>cart.component.ts</code>, define an <code>onSubmit()</code> method to process the form. Use the <code>CartService</code> <code>clearCart()</code> method to empty the cart items and reset the form after it is submission. In a real-world app, this method would also submit the data to an external server. The entire cart component class is as follows:</p>\n\n</li>\n</ol>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\nimport { CartService } from '../cart.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './cart.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./cart.component.css']\n})\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n  checkoutForm;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  ) {\n    this.checkoutForm = this.formBuilder.group({\n      name: '',\n      address: ''\n    });\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n\n  onSubmit(customerData) {\n    // Process checkout data here\n    console.warn('Your order has been submitted', customerData);\n\n    this.items = this.cartService.clearCart();\n    this.checkoutForm.reset();\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">现在，你已经在组件类中定义了表单模型，还要创建一个结账表单，以便把该模型映射到视图中。</p><p translation-origin=\"off\">Now that you've defined the form model in the component class, you need a checkout form to reflect the model in the view.</p>\n\n<h2 id=\"create-the-checkout-form\" translation-result=\"on\">创建结帐表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#create-the-checkout-form\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-checkout-form\">Create the checkout form<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#create-the-checkout-form\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用下列步骤在“购物车”页面的底部添加一个结帐表单。</p><p translation-origin=\"off\">Use the following steps to add a checkout form at the bottom of the \"Cart\" page.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>cart.component.html</code>。</p><p translation-origin=\"off\">Open <code>cart.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在模板的底部，添加一个空的 HTML 表单来捕获用户信息。</p><p translation-origin=\"off\">At the bottom of the template, add an HTML form to capture user information.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>formGroup</code> 属性绑定把 <code>checkoutForm</code> 绑定到模板中的 <code>form</code> 标签上。还要提供一个 “Purchase” 按钮来提交表单。</p><p translation-origin=\"off\">Use a <code>formGroup</code> property binding to bind the <code>checkoutForm</code> to the <code>form</code> tag in the template. Also include a \"Purchase\" button to submit the form.</p>\n\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.3.html\" region=\"checkout-form\">\n&#x3C;form [formGroup]=\"checkoutForm\">\n\n  &#x3C;button class=\"button\" type=\"submit\">Purchase&#x3C;/button>\n\n&#x3C;/form>\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>form</code> 标签上，使用 <code>ngSubmit</code> 事件绑定来监听表单提交，并使用 <code>checkoutForm</code> 值调用 <code>onSubmit()</code> 方法。</p><p translation-origin=\"off\">On the <code>form</code> tag, use an <code>ngSubmit</code> event binding to listen for the form submission and call the <code>onSubmit()</code> method with the <code>checkoutForm</code> value.</p>\n\n<code-example path=\"getting-started/src/app/cart/cart.component.html\" header=\"src/app/cart/cart.component.html (cart component template detail)\" region=\"checkout-form-1\">\n&#x3C;form [formGroup]=\"checkoutForm\" (ngSubmit)=\"onSubmit(checkoutForm.value)\">\n&#x3C;/form>\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">为 <code>name</code> 和 <code>address</code> 添加输入字段。使用 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 属性绑定来把 <code>checkoutForm</code> 表单控件中的 <code>name</code> 和 <code>address</code> 绑定到它们的输入字段。最终的完整版组件如下：</p><p translation-origin=\"off\">Add input fields for <code>name</code> and <code>address</code>.  Use the <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> attribute binding to bind the <code>checkoutForm</code> form controls for <code>name</code> and <code>address</code> to their input fields. The final complete component is as follows:</p>\n\n<code-example path=\"getting-started/src/app/cart/cart.component.html\" header=\"src/app/cart/cart.component.html\" region=\"checkout-form-2\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;p>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\">Shipping Prices&#x3C;/a>\n&#x3C;/p>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">\n  &#x3C;span>{{ item.name }} &#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n&#x3C;form [formGroup]=\"checkoutForm\" (ngSubmit)=\"onSubmit(checkoutForm.value)\">\n\n  &#x3C;div>\n    &#x3C;label for=\"name\">\n      Name\n    &#x3C;/label>\n    &#x3C;input id=\"name\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\">\n  &#x3C;/div>\n\n  &#x3C;div>\n    &#x3C;label for=\"address\">\n      Address\n    &#x3C;/label>\n    &#x3C;input id=\"address\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"address\">\n  &#x3C;/div>\n\n  &#x3C;button class=\"button\" type=\"submit\">Purchase&#x3C;/button>\n\n&#x3C;/form>\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">往购物车中放入几件商品之后，用户可以查看这些商品，输入自己的姓名和地址，进行购买：</p><p translation-origin=\"off\">After putting a few items in the cart, users can now review their items, enter their name and address, and submit their purchase:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-with-items-and-form.png\" alt=\"Cart page with checkout form\" width=\"261\" height=\"395\">\n</div>\n<p translation-result=\"on\">要检查这次提交，请打开控制台，你会在那里看到一个包含你提交的姓名和地址的对象。</p><p translation-origin=\"off\">To confirm submission, open the console where you should see an object containing the name and address you submitted.</p>\n\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/forms#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">恭喜！你有了一个完整的在线商店应用，它具有商品名录，购物车和结账功能。</p><p translation-origin=\"off\">Congratulations! You have a complete online store application with a product catalog, a shopping cart, and a checkout function.</p>\n\n<p translation-result=\"on\"><a href=\"start/deployment\" title=\"入门：部署\">继续浏览“部署”部分，</a>把你的应用转移到本地开发、部署到 Firebase 或你自己的服务器。</p><p translation-origin=\"off\"><a href=\"start/deployment\" title=\"Getting Started: Deployment\">Continue to the \"Deployment\" section</a> to move to local development, or deploy your app to Firebase or your own server.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - start/data\n - start/deployment\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/NgForOf\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/IterableChangeRecord#item\n - api/core/OnInit\n - api/forms/FormBuilder\n - api/forms/FormBuilder#group\n - api/forms/FormControlName\n - api/forms/ReactiveFormsModule\n - api/router/RouterLink\n - start/data\n - start/deployment\n - start/forms#create-the-checkout-form\n - start/forms#define-the-checkout-form-model\n - start/forms#forms\n - start/forms#forms-in-angular\n - start/forms#next-steps\n - https://github.com/angular/angular-cn/edit/aio/aio/content/start/forms.md?message=docs%3A%20请简述你的修改...\n-->"
}