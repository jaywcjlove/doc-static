{
  "id": "start/start-routing",
  "title": "In-app navigation",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/start/start-routing.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"in-app-navigation\" translation-result=\"on\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#in-app-navigation\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"in-app-navigation\">In-app navigation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#in-app-navigation\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">在<a href=\"start\" title=\"入门：你的第一个应用\">第一部分</a>结束时，这个在线商店应用会有一个基本的商品名录。该应用还没有任何可变的状态或导航。它只有一个 URL，该 URL 总是会显示“我的商店”页面，其中是商品列表及其描述。</p><p translation-origin=\"off\">At the end of <a href=\"start\" title=\"Get started with a basic Angular app\">part 1</a>, the online store application has a basic product catalog.\nThe app doesn't have any variable states or navigation.\nThere is one URL, and that URL always displays the \"My Store\" page with a list of products and their descriptions.</p>\n\n<p translation-result=\"on\">本指南会告诉你如何使用 Angular <a href=\"guide/glossary#router\" title=\"Router definition\">路由</a>来让用户进行应用内导航。在单页面应用中，你不会重新加载新页面，而是根据用户所在的位置，向他显示不同的组件和数据。</p><p translation-origin=\"off\">This guide shows you how to use Angular <a href=\"guide/glossary#router\" title=\"Router definition\">routing</a> to give the user in-app navigation. In a single-page app, instead of loading new pages, you show different components and data to the user based on where the user is in the application.</p>\n\n<p translation-result=\"on\">Angular <a href=\"guide/glossary#router\" title=\"Router definition\">路由器</a>能让你在不同的<a href=\"guide/glossary#view\" title=\"View definition\">视图</a>中显示产品的详情，每个产品都有自己的 URL。当用户执行应用任务时，路由器可以从一个视图导航到另一个视图（但在同一个页面）。比如：</p><p translation-origin=\"off\">The router lets you display full product details in separate <a href=\"guide/glossary#view\" title=\"View definition\">views</a>, each with its own URL. Routing enables navigation from one view to the next (within the same page) as users perform tasks such as the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在地址栏中输入一个 URL，导航到相应的页面。</p><p translation-origin=\"off\">Entering a URL in the address bar to navigate to a corresponding view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">点击页面上的链接，导航到新页面。</p><p translation-origin=\"off\">Clicking links on the page to navigate to a new view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">点击浏览器的后退和前进按钮，在浏览器的历史中前后导航。</p><p translation-origin=\"off\">Clicking the browser's back and forward buttons to navigate backward and forward through the browser history.</p>\n\n</li>\n</ul>\n<h2 id=\"registering-a-route\" translation-result=\"on\">注册路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#registering-a-route\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"registering-a-route\">Registering a route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#registering-a-route\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">该应用已经设置为使用 Angular <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，并通过路由导航到之前修改过的商品列表组件。本节会向你展示如何定义一个可以显示单个商品详情的路由。</p><p translation-origin=\"off\">The app is already set up to use the Angular <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> and to use routing to navigate to the product list component you modified earlier. This section shows you how to define a route to show individual product details.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">为商品详情生成一个新组件。把组件命名为 <code>product-details</code>。</p><p translation-origin=\"off\">Generate a new component for product details. Give the component the name <code>product-details</code>.</p>\n\n<p translation-result=\"on\"> 提示：在文件列表框中，右键单击 <code>app</code> 文件夹，选择 <code>Angular Generator</code> 和 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</p><p translation-origin=\"off\"> Reminder: In the file list, right-click the <code>app</code> folder, choose <code>Angular Generator</code> and <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>app.module.ts</code> 中，添加一个商品详情路由，该路由的 <code>path</code> 是 <code>products/:productId</code>，<code>component</code> 是 <code>ProductDetailsComponent</code>。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, add a route for product details, with a <code>path</code> of <code>products/:productId</code> and <code>ProductDetailsComponent</code> for the <code>component</code>.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"product-details-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n    ])\n  ],\n\n</code-example>\n<p translation-result=\"on\">路由会将一个或多个 URL 路径与一个组件关联起来。</p><p translation-origin=\"off\">A route associates one or more URL paths with a component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">该指令配置组件的模板，以定义用户如何导航到路由或 URL。当用户点击商品名称时，应用就会显示那个商品的详情。</p><p translation-origin=\"off\">The directive configures the component template to define how the user navigates to the route or URL. When the user clicks a product name, the app  displays the details for that product.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>product-list.component.html</code>。</p><p translation-origin=\"off\">Open <code>product-list.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令，在遍历列表的过程中把 <code>products</code> 数组中的每个索引赋值给 <code>productId</code> 变量。</p><p translation-origin=\"off\">Update the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive to assign each index in the <code>products</code> array to the <code>productId</code> variable when iterating over the list.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改商品名称的链接，使其包含 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。</p><p translation-origin=\"off\">Modify the product name anchor to include a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>.</p>\n\n</li>\n</ol>\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.html\" region=\"router-link\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products; index as productId\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\" [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/products', productId]\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n&#x3C;!-- . . . -->\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\"> RouterLink 指令让路由器控制了一个链接元素。在这种情况下，路由或 URL 包含一个固定的区段（ <code>/products</code> ），但其最后一个区段是变量，要插入当前商品的 id 属性。例如，<code>id</code> 为 1 的商品的 URL 类似于 <code>https://getting-started-myfork.stackblitz.io/products/1</code>。</p><p translation-origin=\"off\">The RouterLink directive gives the router control over the anchor element. In this case, the route, or URL, contains one fixed segment, <code>/products</code>, while the final segment is variable, inserting the id property of the current product. For example, the URL for a product with an <code>id</code> of 1 will be similar to <code>https://getting-started-myfork.stackblitz.io/products/1</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">    通过单击商品名称来测试路由器。该应用会显示商品详情组件，该组件目前始终显示 “product-details works！” </p><p translation-origin=\"off\">Test the router by clicking a product name. The app displays the product details component, which currently always says \"product-details works!\"</p>\n\n<p translation-result=\"on\">注意预览窗口中的 URL 变化了。它的最后一段是 <code>products/#</code>，这里的 <code>#</code> 代表你点击的那个路由的编号。</p><p translation-origin=\"off\">Notice that the URL in the preview window changes. The final segment is <code>products/#</code>  where <code>#</code> is the number of the route you clicked.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-details-works.png\" alt=\"Product details view with updated URL\" width=\"259\" height=\"162\">\n</div>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"using-route-information\" translation-result=\"on\">使用路由信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#using-route-information\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"using-route-information\">Using route information<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#using-route-information\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">商品详情组件负责处理每个商品的显示。Angular 的路由器会根据浏览器的 URL 和你定义的这些路由来决定如何显示组件。本节会告诉你如何通过 Angular 的路由器来组合使用 <code>products</code> 数据和路由信息，以显示每个商品的详情。</p><p translation-origin=\"off\">The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. This section shows you how to use the Angular Router to combine the <code>products</code> data and route information to display the specific details for each product.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>product-details.component.ts</code> 文件</p><p translation-origin=\"off\">Open <code>product-details.component.ts</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">改用外部文件中的商品数据。</p><p translation-origin=\"off\">Arrange to use product data from an external file.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>@angular/router</code> 包导入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，从 <code>../products</code> 文件导入 <code>products</code> 数组。</p><p translation-origin=\"off\">Import <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> from the <code>@angular/router</code> package, and the <code>products</code> array from <code>../products</code>.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { products } from '../products';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定义 <code>product</code> 属性，并将 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 作为参数添加到构造函数的括号中，以便把它注入到构造函数中。</p><p translation-origin=\"off\">Define the <code>product</code> property and inject the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> into the constructor by adding it as an argument within the constructor's parentheses.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.1.ts\" region=\"props-methods\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  product;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  ) { }\n\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 专门用于由 Angular 路由器加载的每个路由组件。它包含关于该路由，路由参数以及与该路由关联的其它数据的信息。</p><p translation-origin=\"off\">The <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> is specific to each routed component that the Angular Router loads. It contains information about the\nroute, its parameters, and additional data associated with the route.</p>\n\n<p translation-result=\"on\">通过注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，你把该组件配置成了使用服务的。《快速上手》教程中的这部分只是简略使用了该语法，在<a href=\"start/start-data\" title=\"试一试: 管理数据\">管理数据</a>部分深入讲解了服务的更多细节。</p><p translation-origin=\"off\">By injecting the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, you are configuring the component to use a <em>service</em>. The <a href=\"start/start-data\" title=\"Try it: Managing Data\">Managing Data</a> page covers services in more detail.</p>\n\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>ngOnInit()</code> 方法中订阅了路由参数，并且根据 <code>productId</code> 获取了该产品。</p><p translation-origin=\"off\">In the <code>ngOnInit()</code> method, subscribe to route parameters and fetch the product based on the <code>productId</code>.</p>\n\n <code-example path=\"getting-started/src/app/product-details/product-details.component.1.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"get-product\">\nngOnInit() {\n  this.route.paramMap.subscribe(params => {\n    this.product = products[+params.get('productId')];\n  });\n}\n\n</code-example>\n<p translation-result=\"on\">这个路由参数对应于你在路由中定义的路径变量。与该路由匹配的 URL 提供了 <code>productId</code>。Angular 使用这个 <code>productId</code> 来显示每个单独商品的详细信息。</p><p translation-origin=\"off\">The route parameters correspond to the path variables you define in the route. The URL that matches the route provides the <code>productId</code>. Angular uses the <code>productId</code> to display the details for each unique product.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改模板，在 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 中显示商品详情。</p><p translation-origin=\"off\">Update the template to display product details information inside an <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\" region=\"details\">\n&#x3C;h2>Product Details&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\">\n  &#x3C;h3>{{ product.name }}&#x3C;/h3>\n  &#x3C;h4>{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/h4>\n  &#x3C;p>{{ product.description }}&#x3C;/p>\n\n&#x3C;/div>\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">现在，当用户点击商品列表中的某个名字时，路由器就会导航到商品的不同网址，用商品详情组件代替商品列表组件，并显示商品详情。</p><p translation-origin=\"off\">Now, when users click on a name in the product list, the router navigates them to the distinct URL for the product, swaps out the product list component for the product details component, and displays the product details.</p>\n\n  <div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-details-routed.png\" alt=\"Product details page with updated URL and full details displayed\" width=\"259\" height=\"225\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解关于 Angular 路由器的更多信息，请参阅<a href=\"guide/router\" title=\"路由与导航\">路由和导航</a>。</p><p translation-origin=\"off\">For more information about the Angular Router, see <a href=\"guide/router\" title=\"Routing &#x26; Navigation guide\">Routing &#x26; Navigation</a>.</p>\n\n</div>\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">恭喜！你已经把路由集成到你的在线商店了。</p><p translation-origin=\"off\">Congratulations! You have integrated routing into your online store.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">从商品列表页面链接到了单个商品。</p><p translation-origin=\"off\">Products are linked from the product list view to individual products.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">用户可以点击列表中的某个商品名称来在新视图中查看其详细信息，并带有显著的 URL/路由。</p><p translation-origin=\"off\">Users can click on a product name from the list to see details in a new view, with a distinct URL/route.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">要继续探索 Angular，请选择以下选项之一：</p><p translation-origin=\"off\">To continue exploring Angular, choose either of the following options:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"start/start-data\" title=\"入门：管理数据\">继续浏览“管理数据”部分</a>，以添加购物车功能，使用服务来管理购物车数据，并通过 HTTP 检索配送价格的外部数据。</p><p translation-origin=\"off\"><a href=\"start/start-data\" title=\"Try it: Managing Data\">Continue to the \"Managing Data\" section</a> to add a shopping cart feature, use a service to manage the cart data and use HTTP to retrieve external data for shipping prices. </p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"start/start-deployment\" title=\"入门：部署\">跳到部署部分</a>，把你的应用部署到 Firebase 或转成本地开发。</p><p translation-origin=\"off\"><a href=\"start/start-deployment\" title=\"Try it: Deployment\">Skip ahead to the Deployment section</a> to deploy your app to Firebase or move to local development. </p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - start\n - start/start-data\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Router\n - api/router/RouterLink\n - guide/glossary#router\n - guide/glossary#view\n - guide/router\n - start\n - start/start-data\n - start/start-deployment\n - start/start-routing#in-app-navigation\n - start/start-routing#next-steps\n - start/start-routing#registering-a-route\n - start/start-routing#using-route-information\n - https://github.com/angular/angular-cn/edit/aio/aio/content/start/start-routing.md?message=docs%3A%20请简述你的修改...\n-->"
}