{
  "id": "tutorial/toh-pt4",
  "title": "服务",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt4.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"add-services\">Add services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#add-services\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"服务\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#服务\"><i class=\"material-icons\">link</i></a></h1>\n<p>The Tour of Heroes <code>HeroesComponent</code> is getting and displaying fake data.</p>\n<p>英雄之旅的 <code>HeroesComponent</code> 目前获取和显示的都是模拟数据。</p>\n<p>Refactoring the <code>HeroesComponent</code> focuses on supporting the view and\nmaking it easier to unit-test with a mock service.</p>\n<p>重构 <code>HeroesComponent</code> 的重点于为视图提供支持，并让它更容易使用模拟服务进行单元测试。</p>\n<div class=\"alert is-helpful\">\n<p>For the sample application that this page describes, see the <live-example></live-example>.</p>\n<p>要查看本页所讲的范例程序，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"why-services\">Why services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"为什么需要服务\">为什么需要服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#为什么需要服务\"><i class=\"material-icons\">link</i></a></h2>\n<p>Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data.\nThey should focus on presenting data and delegate data access to a service.</p>\n<p>组件不应该直接获取或保存数据，它们不应该了解是否在展示假数据。它们应该聚焦于展示数据，而把数据访问的职责委托给某个服务。</p>\n<p>This tutorial creates a <code>HeroService</code> that all application classes can use to get heroes.\nInstead of creating that service with the <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> keyword</a>, use the <a href=\"guide/dependency-injection\"><em>dependency injection</em></a> that Angular supports to inject it into the <code>HeroesComponent</code> constructor.</p>\n<p>本教程会创建一个 <code>HeroService</code>，应用中的所有类都可以使用它来获取英雄列表。\n不要使用 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 关键字</a>来创建此服务，而使用 Angular 支持的<a href=\"guide/dependency-injection\"><em>依赖注入</em></a>机制把它注入到 <code>HeroesComponent</code> 的构造函数中。</p>\n<p>Services are a great way to share information among classes that <em>don't know each other</em>.\nCreate a <code>MessageService</code> next and inject it in these two places.</p>\n<p>服务是在多个“互相不知道”的类之间共享信息的好办法。你将创建一个 <code>MessageService</code>，并且把它注入到两个地方。</p>\n<ul>\n<li>\n<p>Inject in <code>HeroService</code>, which uses the service to send a message</p>\n<p>注入到 <code>HeroService</code> 中，它会使用该服务发送消息</p>\n</li>\n<li>\n<p>Inject in <code>MessagesComponent</code>, which displays that message, and also displays the ID when the user clicks a hero</p>\n<p>注入到 <code>MessagesComponent</code> 中，它会显示其中的消息。当用户点击某个英雄时，它还会显示该英雄的 ID。</p>\n</li>\n</ul>\n<h2 id=\"create-the-heroservice\">Create the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"创建-heroservice\">创建 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#创建-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>Run <code>ng generate</code> to create a service called <code>hero</code>.</p>\n<p>运行 <code>ng generate</code> 以创建一个名叫 <code>hero</code> 的服务。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service hero\n\n</code-example>\n<p>The command generates a skeleton <code>HeroService</code> class in <code>src/app/hero.service.ts</code> as follows:</p>\n<p>该命令会在 <code>src/app/hero.service.ts</code> 中生成 <code>HeroService</code> 类的骨架，代码如下：</p>\n<code-example header=\"src/app/hero.service.ts (new service)\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"new\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor() { }\n\n}\n\n</code-example>\n<h3 id=\"injectable-services\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"injectable-服务\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#injectable-服务\"><i class=\"material-icons\">link</i></a></h3>\n<p>Notice that the new service imports the Angular <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> symbol and annotates the class with the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator. This marks the class as one that participates in the <em>dependency injection system</em>.\nThe <code>HeroService</code> class is going to provide an injectable service, and it can also have its own injected dependencies.\nIt doesn't have any dependencies yet.</p>\n<p>注意，这个新的服务导入了 Angular 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 符号，并且给这个服务类添加了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器。\n它把这个类标记为<em>依赖注入系统</em>的参与者之一。<code>HeroService</code> 类将会提供一个可注入的服务，并且它还可以拥有自己的待注入的依赖。\n目前它没有任何依赖。</p>\n<p>The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator accepts a metadata object for the service, the same way the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator did for your component classes.</p>\n<p><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器会接受该服务的元数据对象，就像 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 对组件类的作用一样。</p>\n<h3 id=\"get-hero-data\">Get hero data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"获取英雄数据\">获取英雄数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#获取英雄数据\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroService</code> could get hero data from anywhere such as a web service, local storage, or a mock data source.</p>\n<p><code>HeroService</code> 可以从任何地方获取数据，比如：Web 服务、本地存储（LocalStorage）或一个模拟的数据源。</p>\n<p>Removing data access from components means you can change your mind about the implementation anytime, without touching any components.\nThey don't know how the service works.</p>\n<p>从组件中移除数据访问逻辑，意味着将来任何时候你都可以改变目前的实现方式，而不用改动任何组件。这些组件不需要了解该服务的内部实现。</p>\n<p>The implementation in <em>this</em> tutorial continues to deliver <em>mock heroes</em>.</p>\n<p>这节课中的实现仍然会提供<em>模拟的英雄列表</em>。</p>\n<p>Import the <code>Hero</code> and <code>HEROES</code>.</p>\n<p>导入 <code>Hero</code> 和 <code>HEROES</code>。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-heroes\">\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n</code-example>\n<p>Add a <code>getHeroes</code> method to return the <em>mock heroes</em>.</p>\n<p>添加一个 <code>getHeroes</code> 方法，让它返回<em>模拟的英雄列表</em>。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes\">\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n\n</code-example>\n<p><a id=\"provide\"></a></p>\n<h2 id=\"provide-the-heroservice\">Provide the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#provide-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"提供provideheroservice\">提供（provide）<code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#提供provideheroservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>You must make the <code>HeroService</code> available to the dependency injection system before Angular can <em>inject</em> it into the <code>HeroesComponent</code> by registering a <em>provider</em>.\nA provider is something that can create or deliver a service. In this case, it instantiates the <code>HeroService</code> class to provide the service.</p>\n<p>你必须先注册一个<em>服务提供者</em>，来让 <code>HeroService</code> 在依赖注入系统中可用，Angular 才能把它注入到 <code>HeroesComponent</code> 中。所谓服务提供者就是某种可用来创建或交付一个服务的东西；在这里，它通过实例化 <code>HeroService</code> 类，来提供该服务。</p>\n<p>To make sure that the <code>HeroService</code> can provide this service, register it with the <em>injector</em>. The <em>injector</em> is the object that chooses and injects the provider where the application requires it.</p>\n<p>为了确保 <code>HeroService</code> 可以提供该服务，就要使用<em>注入器</em>来注册它。注入器是一个对象，负责当应用要求获取它的实例时选择和注入该提供者。</p>\n<p>By default, <code>ng generate service</code> registers a provider with the <em>root injector</em> for your service by including provider metadata, that's <code>providedIn: 'root'</code> in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.</p>\n<p>默认情况下，Angular CLI 命令 <code>ng generate service</code> 会通过给 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器添加 <code>providedIn: 'root'</code> 元数据的形式，用<em>根注入器</em>将你的服务注册成为提供者。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\n\n</code-example>\n<p>When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code> and injects into any class that asks for it.\nRegistering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> metadata also allows Angular to optimize an application by removing the service if it isn't used.</p>\n<p>当你在顶层提供该服务时，Angular 就会为 <code>HeroService</code> 创建一个单一的、共享的实例，并把它注入到任何想要它的类上。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据中注册该提供者，还能允许 Angular 通过移除那些完全没有用过的服务来进行优化。</p>\n<div class=\"alert is-helpful\">\n<p>To learn more about providers, see the <a href=\"guide/providers\">Providers section</a>.\nTo learn more about injectors, see the <a href=\"guide/dependency-injection\">Dependency Injection guide</a>.</p>\n<p>要了解关于提供者的更多知识，参阅<a href=\"guide/providers\">提供者部分</a>。要了解关于注入器的更多知识，参阅<a href=\"guide/dependency-injection\">依赖注入指南</a>。</p>\n</div>\n<p>The <code>HeroService</code> is now ready to plug into the <code>HeroesComponent</code>.</p>\n<p>现在 <code>HeroService</code> 已经准备好插入到 <code>HeroesComponent</code> 中了。</p>\n<div class=\"alert is-important\">\n<p>This is an interim code sample that allows you to provide and use the <code>HeroService</code>.\nAt this point, the code differs from the <code>HeroService</code> in the <a href=\"tutorial/toh-pt4#final-code-review\">final code review</a>.</p>\n<p>这是一个过渡性的代码范例，它将会允许你提供并使用 <code>HeroService</code>。此刻的代码和<a href=\"tutorial/toh-pt4#final-code-review\">最终代码</a>相差很大。</p>\n</div>\n<h2 id=\"update-heroescomponent\">Update <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#update-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"修改-heroescomponent\">修改 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#修改-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p>Open the <code>HeroesComponent</code> class file.</p>\n<p>打开 <code>HeroesComponent</code> 类文件。</p>\n<p>Delete the <code>HEROES</code> import, because you won't need that anymore.\nImport the <code>HeroService</code> instead.</p>\n<p>删除 <code>HEROES</code> 的导入语句，因为你以后不会再用它了。转而导入 <code>HeroService</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (import HeroService)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"hero-service-import\">\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p>Replace the definition of the <code>heroes</code> property with a declaration.</p>\n<p>把 <code>heroes</code> 属性的定义改为一句简单的声明。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes: Hero[] = [];\n\n</code-example>\n<p><a id=\"inject\"></a></p>\n<h3 id=\"inject-the-heroservice\">Inject the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"注入-heroservice\">注入 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#注入-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add a private <code>heroService</code> parameter of type <code>HeroService</code> to the constructor.</p>\n<p>往构造函数中添加一个私有的 <code>heroService</code>，其类型为 <code>HeroService</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"ctor\">\nconstructor(private heroService: HeroService) {}\n\n</code-example>\n<p>The parameter simultaneously defines a private <code>heroService</code> property and identifies it as a <code>HeroService</code> injection site.</p>\n<p>这个参数声明了一个私有 <code>heroService</code> 属性，同时把它标记为一个 <code>HeroService</code> 的注入点。</p>\n<p>When Angular creates a <code>HeroesComponent</code>, the <a href=\"guide/dependency-injection\">Dependency Injection</a> system sets the <code>heroService</code> parameter to the singleton instance of <code>HeroService</code>.</p>\n<p>当 Angular 创建 <code>HeroesComponent</code> 时，<a href=\"guide/dependency-injection\">依赖注入</a>系统就会把这个 <code>heroService</code> 参数设置为 <code>HeroService</code> 的单例对象。</p>\n<h3 id=\"add-getheroes\">Add <code>getHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#add-getheroes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"添加-getheroes\">添加 <code>getHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#添加-getheroes\"><i class=\"material-icons\">link</i></a></h3>\n<p>Create a method to retrieve the heroes from the service.</p>\n<p>创建一个方法，以从服务中获取这些英雄数据。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<p><a id=\"oninit\"></a></p>\n<h3 id=\"call-it-in-ngoninit\">Call it in <code>ngOnInit()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#call-it-in-ngoninit\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"在-ngoninit-中调用它\">在 <code>ngOnInit()</code> 中调用它<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#在-ngoninit-中调用它\"><i class=\"material-icons\">link</i></a></h3>\n<p>While you could call <code>getHeroes()</code> in the constructor, that's not the best practice.</p>\n<p>你固然可以在构造函数中调用 <code>getHeroes()</code>，但那不是最佳实践。</p>\n<p>Reserve the constructor for minimal initialization such as wiring constructor parameters to properties.\nThe constructor shouldn't <em>do anything</em>.\nIt certainly shouldn't call a function that makes HTTP requests to a remote server as a <em>real</em> data service would.</p>\n<p>让构造函数保持简单，只做最小化的初始化操作，比如把构造函数的参数赋值给属性。构造函数不应该<em>做任何事</em>。它当然不应该调用某个函数来向远端服务（比如真实的数据服务）发起 HTTP 请求。</p>\n<p>Instead, call <code>getHeroes()</code> inside the <a href=\"guide/lifecycle-hooks\"><em>ngOnInit lifecycle hook</em></a> and let Angular call <code>ngOnInit()</code> at an appropriate time <em>after</em> constructing a <code>HeroesComponent</code> instance.</p>\n<p>而是选择在 <a href=\"guide/lifecycle-hooks\"><em>ngOnInit 生命周期钩子</em></a>中调用 <code>getHeroes()</code>，之后 Angular 会在构造出 <code>HeroesComponent</code> 的实例之后的某个合适的时机调用 <code>ngOnInit()</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ng-on-init\">\nngOnInit(): void {\n  this.getHeroes();\n}\n\n</code-example>\n<h3 id=\"see-it-run\">See it run<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"查看运行效果\">查看运行效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#查看运行效果\"><i class=\"material-icons\">link</i></a></h3>\n<p>After the browser refreshes, the application should run as before, showing a list of heroes and a hero detail view when you click a hero name.</p>\n<p>刷新浏览器，该应用仍运行的一如既往。显示英雄列表，并且当你点击某个英雄的名字时显示出英雄详情视图。</p>\n<h2 id=\"observable-data\">Observable data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"可观察observable的数据\">可观察（Observable）的数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#可观察observable的数据\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>HeroService.getHeroes()</code> method has a <em>synchronous signature</em>, which implies that the <code>HeroService</code> can fetch heroes synchronously.\nThe <code>HeroesComponent</code> consumes the <code>getHeroes()</code> result as if heroes could be fetched synchronously.</p>\n<p><code>HeroService.getHeroes()</code> 的函数签名是<em>同步的</em>，它所隐含的假设是 <code>HeroService</code> 总是能同步获取英雄列表数据。而 <code>HeroesComponent</code> 也同样假设能同步取到 <code>getHeroes()</code> 的结果。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"get-heroes\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p>This approach won't work in a real application that uses asynchronous calls.\nIt works now because your service synchronously returns <em>mock heroes</em>.</p>\n<p>这种方法在使用异步调用的真实应用中是不可能奏效的。现在能这么做，只是因为目前该服务同步返回的是<em>模拟数据</em>。</p>\n<p>If <code>getHeroes()</code> can't return immediately with hero data, it shouldn't be\nsynchronous, because that would block the browser as it waits to return data.</p>\n<p>如果 <code>getHeroes()</code> 不能立即返回英雄数据，它就不能是同步的，否则在它等待返回数据期间就会阻塞浏览器。</p>\n<p><code>HeroService.getHeroes()</code> must have an <em>asynchronous signature</em> of some kind.</p>\n<p><code>HeroService.getHeroes()</code> 必须具有某种形式的<em>异步函数签名</em>。</p>\n<p>In this tutorial, <code>HeroService.getHeroes()</code> returns an <code>Observable</code> so that it can\nuse the Angular <code>HttpClient.get</code> method to fetch the heroes\nand have <a href=\"guide/http\"><code>HttpClient.get()</code></a> return an <code>Observable</code>.</p>\n<p>这节课，<code>HeroService.getHeroes()</code> 将会返回 <code>Observable</code>，部分原因在于它最终会使用 Angular 的 <code>HttpClient.get</code> 方法来获取英雄数据，而 <a href=\"guide/http\"><code>HttpClient.get()</code> 会返回 <code>Observable</code></a>。</p>\n<h3 id=\"observable-heroservice\">Observable <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#observable-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"可观察对象版本的-heroservice\">可观察对象版本的 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#可观察对象版本的-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>Observable</code> is one of the key classes in the <a href=\"https://rxjs.dev\">RxJS library</a>.</p>\n<p><code>Observable</code> 是 <a href=\"https://rxjs.dev\">RxJS 库</a>中的一个关键类。</p>\n<p>In <a href=\"tutorial/toh-pt6\">the tutorial on HTTP</a>, you can see how Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return RxJS <code>Observable</code> objects.\nThis tutorial simulates getting data from the server with the RxJS <code>of()</code> function.</p>\n<p>在<a href=\"tutorial/toh-pt6\">稍后的 HTTP 教程</a>中，你就会知道 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法会返回 RxJS 的 <code>Observable</code>。这节课，你将使用 RxJS 的 <code>of()</code> 函数来模拟从服务器返回数据。</p>\n<p>Open the <code>HeroService</code> file and import the <code>Observable</code> and <code>of</code> symbols from RxJS.</p>\n<p>打开 <code>HeroService</code> 文件，并从 RxJS 中导入 <code>Observable</code> 和 <code>of</code> 符号。</p>\n<code-example header=\"src/app/hero.service.ts (Observable imports)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-observable\">\nimport { Observable, of } from 'rxjs';\n\n</code-example>\n<p>Replace the <code>getHeroes()</code> method with the following:</p>\n<p>把 <code>getHeroes()</code> 方法改成这样：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p><code>of(HEROES)</code> returns an <code>Observable&#x3C;Hero[]></code> that emits  <em>a single value</em>, the array of mock heroes.</p>\n<p><code>of(HEROES)</code> 会返回一个 <code>Observable&#x3C;Hero[]></code>，它会发出单个值，这个值就是这些模拟英雄的数组。</p>\n<div class=\"alert is-helpful\">\n<p>The <a href=\"tutorial/toh-pt6\">HTTP tutorial</a> shows you how to call <code>HttpClient.get&#x3C;Hero[]>()</code>, which also returns an <code>Observable&#x3C;Hero[]></code> that emits  <em>a single value</em>, an array of heroes from the body of the HTTP response.</p>\n<p>在 <a href=\"tutorial/toh-pt6\">HTTP 教程</a>中，你将会调用 <code>HttpClient.get&#x3C;Hero[]>()</code> 它也同样返回一个 <code>Observable&#x3C;Hero[]></code>，它也会发出单个值，这个值就是来自 HTTP 响应体中的英雄数组。</p>\n</div>\n<h3 id=\"subscribe-in-heroescomponent\">Subscribe in <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#subscribe-in-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"在-heroescomponent-中订阅\">在 <code>HeroesComponent</code> 中订阅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#在-heroescomponent-中订阅\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroService.getHeroes</code> method used to return a <code>Hero[]</code>.\nNow it returns an <code>Observable&#x3C;Hero[]></code>.</p>\n<p><code>HeroService.getHeroes</code> 方法之前返回一个 <code>Hero[]</code>，现在它返回的是 <code>Observable&#x3C;Hero[]></code>。</p>\n<p>You need to adjust your application to work with that change to <code>HeroesComponent</code>.</p>\n<p>你必须在 <code>HeroesComponent</code> 中也向本服务中的这种形式看齐。</p>\n<p>Find the <code>getHeroes</code> method and replace it with the following code. the new code is shown side-by-side with the current version for comparison.</p>\n<p>找到 <code>getHeroes</code> 方法，并且把它替换为如下代码。下面是新代码和当前版本的对比显示。</p>\n<code-tabs>\n    <code-pane header=\"heroes.component.ts (Observable)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes);\n}\n\n</code-pane>\n    <code-pane header=\"heroes.component.ts (Original)\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-pane>\n</code-tabs>\n<p><code>Observable.subscribe()</code> is the critical difference.</p>\n<p><code>Observable.subscribe()</code> 是关键的差异点。</p>\n<p>The previous version assigns an array of heroes to the component's <code>heroes</code> property.\nThe assignment occurs <em>synchronously</em>, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</p>\n<p>上一个版本把英雄的数组赋值给了该组件的 <code>heroes</code> 属性。这种赋值是<em>同步</em>的，这里包含的假设是服务器能立即返回英雄数组或者浏览器能在等待服务器响应时冻结界面。</p>\n<p>That <em>won't work</em> when the <code>HeroService</code> is actually making requests of a remote server.</p>\n<p>当 <code>HeroService</code> 真的向远端服务器发起请求时，这种方式就行不通了。</p>\n<p>The new version waits for the <code>Observable</code> to emit the array of heroes, which could happen now or several minutes from now.\nThe <code>subscribe()</code> method passes the emitted array to the callback,\nwhich sets the component's <code>heroes</code> property.</p>\n<p>新的版本等待 <code>Observable</code> 发出这个英雄数组，这可能立即发生，也可能会在几分钟之后。然后，<code>subscribe()</code> 方法把这个英雄数组传给这个回调函数，该函数把英雄数组赋值给组件的 <code>heroes</code> 属性。</p>\n<p>This asynchronous approach <em>works</em> when the <code>HeroService</code> requests heroes from the server.</p>\n<p>使用这种异步方式，当 <code>HeroService</code> 从远端服务器获取英雄数据时，就<em>可以工作了</em>。</p>\n<h2 id=\"show-messages\">Show messages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"显示消息\">显示消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#显示消息\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section guides you through the following:</p>\n<p>这一节将指导你：</p>\n<ul>\n<li>\n<p>Adding a <code>MessagesComponent</code> that displays application messages at the bottom of the screen</p>\n<p>添加一个 <code>MessagesComponent</code>，它在屏幕的底部显示应用中的消息。</p>\n</li>\n<li>\n<p>Creating an injectable, application-wide <code>MessageService</code> for sending messages to be displayed</p>\n<p>创建一个可注入的、全应用级别的 <code>MessageService</code>，用于发送要显示的消息。</p>\n</li>\n<li>\n<p>Injecting <code>MessageService</code> into the <code>HeroService</code></p>\n<p>把 <code>MessageService</code> 注入到 <code>HeroService</code> 中。</p>\n</li>\n<li>\n<p>Displaying a message when <code>HeroService</code> fetches heroes successfully</p>\n<p>当 <code>HeroService</code> 成功获取了英雄数据时显示一条消息。</p>\n</li>\n</ul>\n<h3 id=\"create-messagescomponent\">Create <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-messagescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"创建-messagescomponent\">创建 <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#创建-messagescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use <code>ng generate</code> to create the <code>MessagesComponent</code>.</p>\n<p>使用 CLI 创建 <code>MessagesComponent</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component messages\n\n</code-example>\n<p><code>ng generate</code> creates the component files in the <code>src/app/messages</code> directory and declares the <code>MessagesComponent</code> in <code>AppModule</code>.</p>\n<p>CLI 在 <code>src/app/messages</code> 中创建了组件文件，并且把 <code>MessagesComponent</code> 声明在了 <code>AppModule</code> 中。</p>\n<p>Edit the <code>AppComponent</code> template to display the <code>MessagesComponent</code>.</p>\n<p>修改 <code>AppComponent</code> 的模板来显示 <code>MessagesComponent</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n\n</code-example>\n<p>You should see the default paragraph from <code>MessagesComponent</code> at the bottom of the page.</p>\n<p>你可以在页面的底部看到来自的 <code>MessagesComponent</code> 的默认内容。</p>\n<h3 id=\"create-the-messageservice\">Create the <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"创建-messageservice\">创建 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#创建-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use <code>ng generate</code> to create the <code>MessageService</code> in <code>src/app</code>.</p>\n<p>使用 CLI 在 <code>src/app</code> 中创建 <code>MessageService</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service message\n\n</code-example>\n<p>Open <code>MessageService</code> and replace its contents with the following.</p>\n<p>打开 <code>MessageService</code>，并把它的内容改成这样。</p>\n<code-example header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-example>\n<p>The service exposes its cache of <code>messages</code> and two methods:</p>\n<p>该服务公开其 <code>messages</code> 缓存和两个方法：</p>\n<ul>\n<li>\n<p>One to <code>add()</code> a message to the cache.</p>\n<p>将 <code>add()</code> 消息添加到缓存中的一种。</p>\n</li>\n<li>\n<p>Another to <code>clear()</code> the cache.</p>\n<p>另一个 <code>clear()</code> 缓存。</p>\n</li>\n</ul>\n<p>该服务对外暴露了它的 <code>messages</code> 缓存，以及两个方法：<code>add()</code> 方法往缓存中添加一条消息，<code>clear()</code> 方法用于清空缓存。</p>\n<p><a id=\"inject-message-service\"></a></p>\n<h3 id=\"inject-it-into-the-heroservice\">Inject it into the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-it-into-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"把它注入到-heroservice-中\">把它注入到 <code>HeroService</code> 中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#把它注入到-heroservice-中\"><i class=\"material-icons\">link</i></a></h3>\n<p>In <code>HeroService</code>, import the <code>MessageService</code>.</p>\n<p>在 <code>HeroService</code> 中导入 <code>MessageService</code>。</p>\n<code-example header=\"src/app/hero.service.ts (import MessageService)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-message-service\">\nimport { MessageService } from './message.service';\n\n</code-example>\n<p>Edit the constructor with a parameter that declares a private <code>messageService</code> property.\nAngular injects the singleton <code>MessageService</code> into that property when it creates the <code>HeroService</code>.</p>\n<p>修改这个构造函数，添加一个私有的 <code>messageService</code> 属性参数。Angular 将会在创建 <code>HeroService</code> 时把 <code>MessageService</code> 的单例注入到这个属性中。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(private messageService: MessageService) { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>This is an example of a typical <em>service-in-service</em> scenario in which\nyou inject the <code>MessageService</code> into the <code>HeroService</code> which is injected into the <code>HeroesComponent</code>.</p>\n<p>这是一个典型的“服务中的服务”场景，你把 <code>MessageService</code> 注入到了 <code>HeroService</code> 中，而 <code>HeroService</code> 又被注入到了 <code>HeroesComponent</code> 中。</p>\n</div>\n<h3 id=\"send-a-message-from-heroservice\">Send a message from <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#send-a-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"从-heroservice-中发送一条消息\">从 <code>HeroService</code> 中发送一条消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#从-heroservice-中发送一条消息\"><i class=\"material-icons\">link</i></a></h3>\n<p>Edit the <code>getHeroes()</code> method to send a message when the heroes are fetched.</p>\n<p>修改 <code>getHeroes()</code> 方法，在获取到英雄数组时发送一条消息。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  const heroes = of(HEROES);\n  this.messageService.add('HeroService: fetched heroes');\n  return heroes;\n}\n\n</code-example>\n<h3 id=\"display-the-message-from-heroservice\">Display the message from <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#display-the-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"从-heroservice-中显示消息\">从 <code>HeroService</code> 中显示消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#从-heroservice-中显示消息\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>MessagesComponent</code> should display all messages, including the message sent by the <code>HeroService</code> when it fetches heroes.</p>\n<p><code>MessagesComponent</code> 可以显示所有消息，包括当 <code>HeroService</code> 获取到英雄数据时发送的那条。</p>\n<p>Open <code>MessagesComponent</code> and import the <code>MessageService</code>.</p>\n<p>打开 <code>MessagesComponent</code>，并且导入 <code>MessageService</code>。</p>\n<code-example header=\"src/app/messages/messages.component.ts (import MessageService)\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"import-message-service\">\nimport { MessageService } from '../message.service';\n\n</code-example>\n<p>Edit the constructor with a parameter that declares a <strong>public</strong> <code>messageService</code> property.\nAngular injects the singleton <code>MessageService</code> into that property when it creates the <code>MessagesComponent</code>.</p>\n<p>修改构造函数，添加一个 <strong>public</strong> 的 <code>messageService</code> 属性。Angular 将会在创建 <code>MessagesComponent</code> 的实例时 把 <code>MessageService</code> 的实例注入到这个属性中。</p>\n<code-example header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"ctor\">\nconstructor(public messageService: MessageService) {}\n\n</code-example>\n<p>The <code>messageService</code> property <strong>must be public</strong> because you're going to bind to it in the template.</p>\n<p>这个 <code>messageService</code> 属性必须是公共属性，因为你将会在模板中绑定到它。</p>\n<div class=\"alert is-important\">\n<p>Angular only binds to <em>public</em> component properties.</p>\n<p>Angular 只会绑定到组件的<em>公共</em>属性。</p>\n</div>\n<h3 id=\"bind-to-the-messageservice\">Bind to the <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#bind-to-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"绑定到-messageservice\">绑定到 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#绑定到-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<p>Replace the <code>MessagesComponent</code> template created by <code>ng generate</code> with the following.</p>\n<p>把 <code>ng generate</code> 创建的 <code>MessagesComponent</code> 的模板改成这样。</p>\n<code-example header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\">\n\n  &#x3C;h2>Messages&#x3C;/h2>\n  &#x3C;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\">Clear messages&#x3C;/button>\n  &#x3C;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'> {{message}} &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-example>\n<p>This template binds directly to the component's <code>messageService</code>.</p>\n<p>这个模板直接绑定到了组件的 <code>messageService</code> 属性上。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></td>\n<td align=\"left\">Only displays the messages area if there are messages to show.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></td>\n<td align=\"left\">只有在有消息时才会显示消息区。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></td>\n<td align=\"left\">Presents the list of messages in repeated <code>&#x3C;div></code> elements.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></td>\n<td align=\"left\">在一系列 <code>&#x3C;div></code> 元素中展示消息列表。</td>\n</tr>\n<tr>\n<td align=\"left\">Angular <a href=\"guide/event-binding\">event binding</a></td>\n<td align=\"left\">Binds the button's click event to <code>MessageService.clear()</code>.</td>\n</tr>\n<tr>\n<td align=\"left\">Angular <a href=\"guide/event-binding\">事件绑定</a></td>\n<td align=\"left\">把按钮的 <code>click</code> 事件绑定到了 <code>MessageService.clear()</code>。</td>\n</tr>\n</tbody>\n</table>\n<p>The messages look better after you add the private CSS styles to <code>messages.component.css</code> as listed in one of the <a href=\"tutorial/toh-pt4#final-code-review\">\"final code review\"</a> tabs below.</p>\n<p>当你把 <a href=\"tutorial/toh-pt4#final-code-review\">最终代码</a> 某一页的内容添加到 <code>messages.component.css</code> 中时，这些消息会变得好看一些。</p>\n<h2 id=\"add-messages-to-hero-service\">Add messages to hero service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#add-messages-to-hero-service\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"为-hero-服务添加额外的消息\">为 hero 服务添加额外的消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#为-hero-服务添加额外的消息\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following example shows how to display a history of each time the user clicks on a hero.\nThis helps when you get to the next section on <a href=\"tutorial/toh-pt5\">Routing</a>.</p>\n<p>下面的例子展示了当用户点击某个英雄时发生的历史。当你学到后面的<a href=\"tutorial/toh-pt5\">路由</a>一章时，这会很有帮助。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n\n</code-example>\n<p>Refresh the browser to see the list of heroes, and scroll to the bottom to see the messages from the HeroService.\nEach time you click a hero, a new message appears to record the selection.\nUse the <strong>Clear messages</strong> button to clear the message history.</p>\n<p>刷新浏览器，页面显示出了英雄列表。滚动到底部，就会在消息区看到来自 <code>HeroService</code> 的消息。点击 <strong>Clear messages</strong> 按钮，消息区不见了。</p>\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"查看最终代码\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#查看最终代码\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are the code files discussed on this page.</p>\n<p>下面是本页所提到的源代码。</p>\n<code-tabs>\n    <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&#x3C;Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n}\n\n</code-pane>\n    <code-pane header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor(public messageService: MessageService) {}\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\">\n\n  &#x3C;h2>Messages&#x3C;/h2>\n  &#x3C;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\">Clear messages&#x3C;/button>\n  &#x3C;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'> {{message}} &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.css\" path=\"toh-pt4/src/app/messages/messages.component.css\">\n/* MessagesComponent's private CSS styles */\nh2 {\n  color: #A80000;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\n\n.clear {\n  color: #333;\n  background-color: #eee;\n  margin-bottom: 12px;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n.clear:hover {\n  color: white;\n  background-color: #42545C;\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt4/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [\n    // no need to place any providers due to the `providedIn` flag...\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"小结\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#小结\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p>You refactored data access to the <code>HeroService</code> class.</p>\n<p>你把数据访问逻辑重构到了 <code>HeroService</code> 类中。</p>\n</li>\n<li>\n<p>You registered the <code>HeroService</code> as the <em>provider</em> of its service at the root level so that it can be injected anywhere in the application.</p>\n<p>你在根注入器中把 <code>HeroService</code> 注册为该服务的提供者，以便在别处可以注入它。</p>\n</li>\n<li>\n<p>You used <a href=\"guide/dependency-injection\">Angular Dependency Injection</a> to inject it into a component.</p>\n<p>你使用 <a href=\"guide/dependency-injection\">Angular 依赖注入</a>机制把它注入到了组件中。</p>\n</li>\n<li>\n<p>You gave the <code>HeroService</code> <code>get data</code> method an asynchronous signature.</p>\n<p>你给 <code>HeroService</code> 中获取数据的方法提供了一个异步的函数签名。</p>\n</li>\n<li>\n<p>You discovered <code>Observable</code> and the RxJS <code>Observable</code> library.</p>\n<p>你发现了 <code>Observable</code> 以及 RxJS 库。</p>\n</li>\n<li>\n<p>You used RxJS <code>of()</code> to return <code>Observable&#x3C;Hero[]></code> an observable of mock heroes.</p>\n<p>你使用 RxJS 的 <code>of()</code> 方法返回了一个模拟英雄数据的<em>可观察对象</em> (<code>Observable&#x3C;Hero[]></code>)。</p>\n</li>\n<li>\n<p>The component's <code>ngOnInit</code> lifecycle hook calls the <code>HeroService</code> method, not the constructor.</p>\n<p>在组件的 <code>ngOnInit</code> 生命周期钩子中调用 <code>HeroService</code> 方法，而不是构造函数中。</p>\n</li>\n<li>\n<p>You created a <code>MessageService</code> for loosely coupled communication between classes.</p>\n<p>你创建了一个 <code>MessageService</code>，以便在类之间实现松耦合通讯。</p>\n</li>\n<li>\n<p>The <code>HeroService</code> injected into a component is created with another injected service, <code>MessageService</code>.</p>\n<p><code>HeroService</code> 连同注入到它的服务 <code>MessageService</code> 一起，注入到了组件中。</p>\n</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0201\n - guide/example-apps-list\n - guide/lifecycle-hooks\n - guide/localizing-angular\n - guide/router-tutorial-toh\n - guide/singleton-services\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/event-binding\n - guide/http\n - guide/lifecycle-hooks\n - guide/providers\n - tutorial/toh-pt4#add-getheroes\n - tutorial/toh-pt4#add-messages-to-hero-service\n - tutorial/toh-pt4#add-services\n - tutorial/toh-pt4#bind-to-the-messageservice\n - tutorial/toh-pt4#call-it-in-ngoninit\n - tutorial/toh-pt4#create-messagescomponent\n - tutorial/toh-pt4#create-the-heroservice\n - tutorial/toh-pt4#create-the-messageservice\n - tutorial/toh-pt4#display-the-message-from-heroservice\n - tutorial/toh-pt4#final-code-review\n - tutorial/toh-pt4#get-hero-data\n - tutorial/toh-pt4#inject-it-into-the-heroservice\n - tutorial/toh-pt4#inject-the-heroservice\n - tutorial/toh-pt4#injectable-services\n - tutorial/toh-pt4#injectable-服务\n - tutorial/toh-pt4#observable-data\n - tutorial/toh-pt4#observable-heroservice\n - tutorial/toh-pt4#provide-the-heroservice\n - tutorial/toh-pt4#see-it-run\n - tutorial/toh-pt4#send-a-message-from-heroservice\n - tutorial/toh-pt4#show-messages\n - tutorial/toh-pt4#subscribe-in-heroescomponent\n - tutorial/toh-pt4#summary\n - tutorial/toh-pt4#update-heroescomponent\n - tutorial/toh-pt4#why-services\n - tutorial/toh-pt4#为-hero-服务添加额外的消息\n - tutorial/toh-pt4#为什么需要服务\n - tutorial/toh-pt4#从-heroservice-中发送一条消息\n - tutorial/toh-pt4#从-heroservice-中显示消息\n - tutorial/toh-pt4#修改-heroescomponent\n - tutorial/toh-pt4#创建-heroservice\n - tutorial/toh-pt4#创建-messagescomponent\n - tutorial/toh-pt4#创建-messageservice\n - tutorial/toh-pt4#可观察observable的数据\n - tutorial/toh-pt4#可观察对象版本的-heroservice\n - tutorial/toh-pt4#在-heroescomponent-中订阅\n - tutorial/toh-pt4#在-ngoninit-中调用它\n - tutorial/toh-pt4#小结\n - tutorial/toh-pt4#把它注入到-heroservice-中\n - tutorial/toh-pt4#提供provideheroservice\n - tutorial/toh-pt4#显示消息\n - tutorial/toh-pt4#服务\n - tutorial/toh-pt4#查看最终代码\n - tutorial/toh-pt4#查看运行效果\n - tutorial/toh-pt4#注入-heroservice\n - tutorial/toh-pt4#添加-getheroes\n - tutorial/toh-pt4#绑定到-messageservice\n - tutorial/toh-pt4#获取英雄数据\n - tutorial/toh-pt5\n - tutorial/toh-pt6\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\n - https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt4.md?message=docs%3A%20请简述你的修改...\n - https://rxjs.dev\n-->"
}