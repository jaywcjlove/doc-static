{
  "id": "tutorial/toh-pt1",
  "title": "英雄编辑器",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt1.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"the-hero-editor\">The hero editor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-hero-editor\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"英雄编辑器\">英雄编辑器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#英雄编辑器\"><i class=\"material-icons\">link</i></a></h1>\n<p>The application now has a basic title.\nNext, create a new component to display hero information and place that component in the application shell.</p>\n<p>应用程序现在有了基本的标题。接下来你要创建一个新的组件来显示英雄信息并且把这个组件放到应用程序的外壳里去。</p>\n<div class=\"alert is-helpful\">\n<p>For the sample application that this page describes, see the <live-example></live-example>.</p>\n<p>要查看本页所讲的范例程序，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"create-the-heroes-component\">Create the heroes component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-the-heroes-component\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"创建英雄列表组件\">创建英雄列表组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#创建英雄列表组件\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use <code>ng generate</code> to create a new component named <code>heroes</code>.</p>\n<p>使用 <code>ng generate</code> 创建一个名为 <code>heroes</code> 的新组件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component heroes\n\n</code-example>\n<p><code>ng generate</code> creates a new directory , <code>src/app/heroes/</code>, and generates the three files of the  <code>HeroesComponent</code> along with a test file.</p>\n<p><code>ng generate</code> 创建了一个新的文件夹 <code>src/app/heroes/</code>，并生成了 <code>HeroesComponent</code> 的四个文件。</p>\n<p>The <code>HeroesComponent</code> class file is as follows:</p>\n<p><code>HeroesComponent</code> 的类文件如下：</p>\n<code-example header=\"app/heroes/heroes.component.ts (initial version)\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n</code-example>\n<p>You always import the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> symbol from the Angular core library and annotate the component class with <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</p>\n<p>你要从 Angular 核心库中导入 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 符号，并为组件类加上 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器。</p>\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> is a decorator function that specifies the Angular metadata for the component.</p>\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 是个装饰器函数，用于为该组件指定 Angular 所需的元数据。</p>\n<p><code>ng generate</code> created three metadata properties:</p>\n<p><code>ng generate</code> 创建了三个元数据属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Properties</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">属性</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code>selector</code></td>\n<td align=\"left\">The component's CSS element selector.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>selector</code></td>\n<td align=\"left\">组件的 CSS 元素选择器</td>\n</tr>\n<tr>\n<td align=\"left\"><code>templateUrl</code></td>\n<td align=\"left\">The location of the component's template file.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>templateUrl</code></td>\n<td align=\"left\">组件模板文件的位置。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>styleUrls</code></td>\n<td align=\"left\">The location of the component's private CSS styles.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>styleUrls</code></td>\n<td align=\"left\">组件私有 CSS 样式表文件的位置。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"selector\"></a></p>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/CSS/Type_selectors\">CSS element selector</a>, <code>'app-heroes'</code>, matches the name of the HTML element that identifies this component within a parent component's template.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/CSS/Type_selectors\">CSS 元素选择器</a> <code>app-heroes</code> 用来在父组件的模板中匹配 HTML 元素的名称，以识别出该组件。</p>\n<p>The <code>ngOnInit()</code> is a <a href=\"guide/lifecycle-hooks#oninit\">lifecycle hook</a>.\nAngular calls <code>ngOnInit()</code> shortly after creating a component.\nIt's a good place to put initialization logic.</p>\n<p><code>ngOnInit()</code> 是一个<a href=\"guide/lifecycle-hooks#oninit\">生命周期钩子</a>，Angular 在创建完组件后很快就会调用 <code>ngOnInit()</code>。这里是放置初始化逻辑的好地方。</p>\n<p>Always <code>export</code> the component class so you can <code>import</code> it elsewhere … like in the <code>AppModule</code>.</p>\n<p>始终要 <code>export</code> 这个组件类，以便在其它地方（比如 <code>AppModule</code>）导入它。</p>\n<h3 id=\"add-a-hero-property\">Add a <code>hero</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#add-a-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"添加-hero-属性\">添加 <code>hero</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#添加-hero-属性\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add a <code>hero</code> property to the <code>HeroesComponent</code> for a hero named, <code>Windstorm</code>.</p>\n<p>往 <code>HeroesComponent</code> 中添加一个 <code>hero</code> 属性，用来表示一个名叫 “Windstorm” 的英雄。</p>\n<code-example header=\"heroes.component.ts (hero property)\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"add-hero\">\nhero = 'Windstorm';\n\n</code-example>\n<h3 id=\"show-the-hero\">Show the hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"显示英雄\">显示英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#显示英雄\"><i class=\"material-icons\">link</i></a></h3>\n<p>Open the <code>heroes.component.html</code> template file.\nDelete the default text that <code>ng generate</code> created and replace it with a data binding to the new <code>hero</code> property.</p>\n<p>打开模板文件 <code>heroes.component.html</code>。删除 <code>ng generate</code> 自动生成的默认内容，改为到 <code>hero</code> 属性的数据绑定。</p>\n<code-example header=\"heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-1\">\n&#x3C;h2>{{hero}}&#x3C;/h2>\n\n</code-example>\n<h2 id=\"show-the-heroescomponent-view\">Show the <code>HeroesComponent</code> view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-heroescomponent-view\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"显示-heroescomponent-视图\">显示 <code>HeroesComponent</code> 视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#显示-heroescomponent-视图\"><i class=\"material-icons\">link</i></a></h2>\n<p>To display the <code>HeroesComponent</code>, you must add it to the template of the shell <code>AppComponent</code>.</p>\n<p>要显示 <code>HeroesComponent</code> 你必须把它加到壳组件 <code>AppComponent</code> 的模板中。</p>\n<p>Remember that <code>app-heroes</code> is the <a href=\"tutorial/toh-pt1#selector\">element selector</a> for the <code>HeroesComponent</code>.\nAdd an <code>&#x3C;app-heroes></code> element to the <code>AppComponent</code> template file, just below the title.</p>\n<p>别忘了，<code>app-heroes</code> 就是 <code>HeroesComponent</code> 的 <a href=\"tutorial/toh-pt1#selector\">元素选择器</a>。\n把 <code>&#x3C;app-heroes></code> 元素添加到 <code>AppComponent</code> 的模板文件中，就放在标题下方。</p>\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n\n\n</code-example>\n<p>If  <code>ng serve</code> is still running,\nthe browser should refresh and display both the application title and the hero's name.</p>\n<p>如果 <code>ng serve</code> 命令仍在运行，浏览器就会自动刷新，并且同时显示出应用的标题和英雄的名字。</p>\n<h2 id=\"create-a-hero-interface\">Create a <code>Hero</code> interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-a-hero-interface\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"创建-hero-类\">创建 <code>Hero</code> 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#创建-hero-类\"><i class=\"material-icons\">link</i></a></h2>\n<p>A real hero is more than a name.</p>\n<p>真实的英雄当然不止一个名字。</p>\n<p>Create a <code>Hero</code> interface in its own file in the <code>src/app</code> directory .\nGive it <code>id</code> and <code>name</code> properties.</p>\n<p>在 <code>src/app</code> 文件夹中为 <code>Hero</code> 类创建一个文件，并添加 <code>id</code> 和 <code>name</code> 属性。</p>\n<code-example path=\"toh-pt1/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-example>\n<p>Return to the <code>HeroesComponent</code> class and import the <code>Hero</code> interface.</p>\n<p>回到 <code>HeroesComponent</code> 类，并且导入这个 <code>Hero</code> 类。</p>\n<p>Refactor the component's <code>hero</code> property to be of type <code>Hero</code>.\nInitialize it with an <code>id</code> of <code>1</code> and the name <code>Windstorm</code>.</p>\n<p>把组件的 <code>hero</code> 属性的类型重构为 <code>Hero</code>。然后以 <code>1</code> 为 <code>id</code>、以 “Windstorm” 为名字初始化它。</p>\n<p>The revised <code>HeroesComponent</code> class file should look like this:</p>\n<p>修改后的 <code>HeroesComponent</code> 类应该是这样的：</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n</code-example>\n<p>The page no longer displays properly because you changed the hero from a string to an object.</p>\n<p>页面显示变得不正常了，因为你刚刚把 <code>hero</code> 从字符串改成了对象。</p>\n<h2 id=\"show-the-hero-object\">Show the hero object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero-object\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"显示-hero-对象\">显示 <code>hero</code> 对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#显示-hero-对象\"><i class=\"material-icons\">link</i></a></h2>\n<p>Update the binding in the template to announce the hero's name and show both <code>id</code> and <code>name</code> in a details display like this:</p>\n<p>修改模板中的绑定，以显示英雄的名字，并在详情中显示 <code>id</code> 和 <code>name</code>，就像这样：</p>\n<code-example header=\"heroes.component.html (HeroesComponent template)\" path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-2\">\n&#x3C;h2>{{hero.name}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n&#x3C;div>&#x3C;span>name: &#x3C;/span>{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p>The browser refreshes and displays the hero's information.</p>\n<p>浏览器自动刷新，并显示这位英雄的信息。</p>\n<h2 id=\"format-with-the-uppercasepipe\">Format with the <code>UppercasePipe</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#format-with-the-uppercasepipe\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"使用-uppercasepipe-进行格式化\">使用 <code>UppercasePipe</code> 进行格式化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#使用-uppercasepipe-进行格式化\"><i class=\"material-icons\">link</i></a></h2>\n<p>Edit the <code>hero.name</code> binding like this:</p>\n<p>把 <code>hero.name</code> 的绑定改成这样。</p>\n<code-example header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\" region=\"pipe\">\n&#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n\n</code-example>\n<p>The browser refreshes and now the hero's name is displayed in capital letters.</p>\n<p>浏览器刷新了。现在，英雄的名字显示成了大写字母。</p>\n<p>The word <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> in the interpolation binding after the pipe <code>|</code> character, activates the built-in <code>UppercasePipe</code>.</p>\n<p>绑定表达式中的 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 位于管道操作符 <code>|</code> 后面，用来调用内置管道 <code>UppercasePipe</code>。</p>\n<p><a href=\"guide/pipes\">Pipes</a> are a good way to format strings, currency amounts, dates, and other display data.\nAngular ships with several built-in pipes and you can create your own.</p>\n<p><a href=\"guide/pipes\">管道</a> 是格式化字符串、金额、日期和其它显示数据的好办法。Angular 发布了一些内置管道，而且你还可以创建自己的管道。</p>\n<h2 id=\"edit-the-hero\">Edit the hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"编辑英雄名字\">编辑英雄名字<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#编辑英雄名字\"><i class=\"material-icons\">link</i></a></h2>\n<p>Users should be able to edit the hero's name in an <code>&#x3C;input></code> text box.</p>\n<p>用户应该能在一个 <code>&#x3C;input></code> 输入框中编辑英雄的名字。</p>\n<p>The text box should both <em>display</em> the hero's <code>name</code> property and <em>update</em> that property as the user types.\nThat means data flows from the component class <em>out to the screen</em> and from the screen <em>back to the class</em>.</p>\n<p>当用户输入时，这个输入框应该能同时<em>显示</em>和<em>修改</em>英雄的 <code>name</code> 属性。也就是说，数据流从组件类<strong>流出到屏幕</strong>，并且从屏幕<strong>流回到组件类</strong>。</p>\n<p>To automate that data flow, set up a two-way data binding between the <code>&#x3C;input></code> form element and the <code>hero.name</code> property.</p>\n<p>要想让这种数据流动自动化，就要在表单元素 <code>&#x3C;input></code> 和组件的 <code>hero.name</code> 属性之间建立双向数据绑定。</p>\n<h3 id=\"two-way-binding\">Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"双向绑定\">双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#双向绑定\"><i class=\"material-icons\">link</i></a></h3>\n<p>Refactor the details area in the <code>HeroesComponent</code> template so it looks like this:</p>\n<p>把模板中的英雄详情区重构成这样：</p>\n<code-example header=\"src/app/heroes/heroes.component.html (HeroesComponent&#x27;s template)\" path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"name-input\">\n&#x3C;div>\n  &#x3C;label for=\"name\">Hero name: &#x3C;/label>\n  &#x3C;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\">\n&#x3C;/div>\n\n</code-example>\n<p><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> is Angular's two-way data binding syntax.</p>\n<p><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 是 Angular 的双向数据绑定语法。</p>\n<p>Here it binds the <code>hero.name</code> property to the HTML text box so that data can flow <em>in both directions</em>.\nData can flow from the <code>hero.name</code> property to the text box and from the text box back to the <code>hero.name</code>.</p>\n<p>这里把 <code>hero.name</code> 属性绑定到了 HTML 的 textbox 元素上，以便数据流可以<strong>双向流动</strong>。数据可以从 <code>hero.name</code> 属性流动到 textbox，也可以从 textbox 流回到 <code>hero.name</code>。</p>\n<h3 id=\"the-missing-formsmodule\">The missing <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-missing-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"缺少-formsmodule\">缺少 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#缺少-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n<p>Notice that the application stopped working when you added <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>.</p>\n<p>注意，当你加上 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 之后这个应用无法工作了。</p>\n<p>To see the error, open the browser development tools and look in the console\nfor a message like</p>\n<p>打开浏览器的开发工具，就会在控制台中看到如下信息：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nTemplate parse errors:\nCan't bind to 'ngModel' since it isn't a known property of 'input'.\n\n</code-example>\n<p>Although <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> is a valid Angular directive, it isn't available by default.</p>\n<p>虽然 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 是一个有效的 Angular 指令，不过它在默认情况下是不可用的。</p>\n<p>It belongs to the optional <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and you must <em>opt in</em> to using it.</p>\n<p>它属于一个可选模块 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，你必须自行添加此模块才能使用该指令。</p>\n<h2 id=\"appmodule\"><code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#appmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular needs to know how the pieces of your application fit together and what other files and libraries the application requires.\nThis information is called <em>metadata</em>.</p>\n<p>Angular 需要知道如何把应用程序的各个部分组合到一起，以及该应用需要哪些其它文件和库。这些信息被称为<em>元数据（metadata）</em>。</p>\n<p>Some of the metadata is in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorators that you added to your component classes.\nOther critical metadata is in <a href=\"guide/ngmodules\"><code>@NgModule</code></a> decorators.</p>\n<p>有些元数据位于 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器中，你会把它加到组件类上。另一些关键性的元数据位于 <a href=\"guide/ngmodules\"><code>@NgModule</code></a> 装饰器中。</p>\n<p>The most important <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator annotates the top-level <strong>AppModule</strong> class.</p>\n<p>最重要的 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器位于顶层类 <strong>AppModule</strong> 上。</p>\n<p><code>ng new</code> created an <code>AppModule</code> class in <code>src/app/app.module.ts</code> when it created the project.\nThis is where you <em>opt in</em> to the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n<p><code>ng new</code> 在创建项目的时候就在 <code>src/app/app.module.ts</code> 中创建了一个 <code>AppModule</code> 类。这里也就是你要添加 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 的地方。</p>\n<h3 id=\"import-formsmodule\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#import-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"导入-formsmodule\">导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#导入-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n<p>Open <code>app.module.ts</code> and import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> symbol from the <code>@angular/forms</code> library.</p>\n<p>打开 <code>app.module.ts</code> 并从 <code>@angular/forms</code> 库中导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 符号。</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (FormsModule symbol import)\" region=\"formsmodule-js-import\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\n</code-example>\n<p>Add <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the  <code>imports</code> array in <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nThe <code>imports</code> array contains the list of external modules that the application needs.</p>\n<p>然后把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 数组中，这里是该应用所需外部模块的列表。</p>\n<code-example header=\"app.module.ts (@NgModule imports)\" path=\"toh-pt1/src/app/app.module.ts\" region=\"ng-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n],\n\n</code-example>\n<p>When the browser refreshes, the application should work again.\nYou can edit the hero's name and see the changes reflected immediately in the <code>&#x3C;h2></code> above the text box.</p>\n<p>刷新浏览器，应用又能正常工作了。你可以编辑英雄的名字，并且会看到这个改动立刻体现在这个输入框上方的 <code>&#x3C;h2></code> 中。</p>\n<h3 id=\"declare-heroescomponent\">Declare <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#declare-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"声明-heroescomponent\">声明 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#声明-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p>Every component must be declared in <em>exactly one</em> <a href=\"guide/ngmodules\">NgModule</a>.</p>\n<p>每个组件都必须声明在（<em>且只能声明在</em>）一个 <a href=\"guide/ngmodules\">NgModule</a> 中。</p>\n<p><em>You</em> didn't declare the <code>HeroesComponent</code>.\nWhy did the application work?</p>\n<p><em>你</em>没有声明过 <code>HeroesComponent</code>，可为什么本应用却正常呢？</p>\n<p>It worked because the <code>ng generate</code> declared <code>HeroesComponent</code> in <code>AppModule</code> when it created that component.</p>\n<p>这是因为 Angular CLI 在生成 <code>HeroesComponent</code> 组件的时候就自动把它加到了 <code>AppModule</code> 中。</p>\n<p>Open <code>src/app/app.module.ts</code> and find <code>HeroesComponent</code> imported near the top.</p>\n<p>打开 <code>src/app/app.module.ts</code> 你就会发现 <code>HeroesComponent</code> 已经在顶部导入过了。</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"heroes-import\">\nimport { HeroesComponent } from './heroes/heroes.component';\n\n</code-example>\n<p>The <code>HeroesComponent</code> is declared in the <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> array.</p>\n<p><code>HeroesComponent</code> 也已经声明在了 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 数组中。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  HeroesComponent\n],\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><code>AppModule</code>  declares both application components, <code>AppComponent</code> and <code>HeroesComponent</code>.</p>\n<p><code>AppModule</code> 声明了应用中的所有组件，<code>AppComponent</code> 和 <code>HeroesComponent</code>。</p>\n</div>\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"查看最终代码\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#查看最终代码\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are the code files discussed on this page.</p>\n<p>下面是本页所提到的源代码。</p>\n<code-tabs>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\">\n&#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n&#x3C;div>\n  &#x3C;label for=\"name\">Hero name: &#x3C;/label>\n  &#x3C;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\">\n&#x3C;/div>\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.ts\" path=\"toh-pt1/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero.ts\" path=\"toh-pt1/src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"小结\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#小结\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p>You used <code>ng generate</code> to create a second <code>HeroesComponent</code>.</p>\n<p>你使用 <code>ng generate</code> 创建了第二个组件 <code>HeroesComponent</code>。</p>\n</li>\n<li>\n<p>You displayed the <code>HeroesComponent</code> by adding it to the <code>AppComponent</code> shell.</p>\n<p>你把 <code>HeroesComponent</code> 添加到了壳组件 <code>AppComponent</code> 中，以便显示它。</p>\n</li>\n<li>\n<p>You applied the <code>UppercasePipe</code> to format the name.</p>\n<p>你使用 <code>UppercasePipe</code> 来格式化英雄的名字。</p>\n</li>\n<li>\n<p>You used two-way data binding with the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive.</p>\n<p>你用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令实现了双向数据绑定。</p>\n</li>\n<li>\n<p>You learned about the <code>AppModule</code>.</p>\n<p>你知道了 <code>AppModule</code>。</p>\n</li>\n<li>\n<p>You imported the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> in the <code>AppModule</code> so that Angular would recognize and apply the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive.</p>\n<p>你把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 导入了 <code>AppModule</code>，以便 Angular 能识别并应用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p>\n</li>\n<li>\n<p>You learned the importance of declaring components in the <code>AppModule</code>.</p>\n<p>你知道了把组件声明到 <code>AppModule</code> 是很重要的。</p>\n</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n-->\n<!-- links from this doc:\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/lifecycle-hooks#oninit\n - guide/ngmodules\n - guide/pipes\n - tutorial/toh-pt1#add-a-hero-property\n - tutorial/toh-pt1#appmodule\n - tutorial/toh-pt1#create-a-hero-interface\n - tutorial/toh-pt1#create-the-heroes-component\n - tutorial/toh-pt1#declare-heroescomponent\n - tutorial/toh-pt1#edit-the-hero\n - tutorial/toh-pt1#final-code-review\n - tutorial/toh-pt1#format-with-the-uppercasepipe\n - tutorial/toh-pt1#import-formsmodule\n - tutorial/toh-pt1#selector\n - tutorial/toh-pt1#show-the-hero\n - tutorial/toh-pt1#show-the-hero-object\n - tutorial/toh-pt1#show-the-heroescomponent-view\n - tutorial/toh-pt1#summary\n - tutorial/toh-pt1#the-hero-editor\n - tutorial/toh-pt1#the-missing-formsmodule\n - tutorial/toh-pt1#two-way-binding\n - tutorial/toh-pt1#使用-uppercasepipe-进行格式化\n - tutorial/toh-pt1#创建-hero-类\n - tutorial/toh-pt1#创建英雄列表组件\n - tutorial/toh-pt1#双向绑定\n - tutorial/toh-pt1#声明-heroescomponent\n - tutorial/toh-pt1#导入-formsmodule\n - tutorial/toh-pt1#小结\n - tutorial/toh-pt1#显示-hero-对象\n - tutorial/toh-pt1#显示-heroescomponent-视图\n - tutorial/toh-pt1#显示英雄\n - tutorial/toh-pt1#查看最终代码\n - tutorial/toh-pt1#添加-hero-属性\n - tutorial/toh-pt1#编辑英雄名字\n - tutorial/toh-pt1#缺少-formsmodule\n - tutorial/toh-pt1#英雄编辑器\n - https://developer.mozilla.org/docs/Web/CSS/Type_selectors\n - https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt1.md?message=docs%3A%20请简述你的修改...\n-->"
}