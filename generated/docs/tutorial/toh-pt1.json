{
  "id": "tutorial/toh-pt1",
  "title": "The hero editor",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt1.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"the-hero-editor\" translation-result=\"on\">英雄编辑器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-hero-editor\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"the-hero-editor\">The hero editor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-hero-editor\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">应用程序现在有了基本的标题。\n接下来你要创建一个新的组件来显示英雄信息并且把这个组件放到应用程序的外壳里去。</p><p translation-origin=\"off\">The application now has a basic title.\nNext you will create a new component to display hero information\nand place that component in the application shell.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  要查看本页所讲的范例程序，参见<live-example></live-example>。</p><p translation-origin=\"off\">  For the sample app that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"create-the-heroes-component\" translation-result=\"on\">创建英雄列表组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-the-heroes-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-heroes-component\">Create the heroes component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-the-heroes-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 Angular CLI 创建一个名为 <code>heroes</code> 的新组件。</p><p translation-origin=\"off\">Using the Angular CLI, generate a new component named <code>heroes</code>.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component heroes\n</code-example>\n<p translation-result=\"on\">CLI 创建了一个新的文件夹 <code>src/app/heroes/</code>，并生成了 <code>HeroesComponent</code> 的四个文件。</p><p translation-origin=\"off\">The CLI creates a new folder, <code>src/app/heroes/</code>, and generates\nthe three files of the  <code>HeroesComponent</code> along with a test file.</p>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 的类文件如下：</p><p translation-origin=\"off\">The <code>HeroesComponent</code> class file is as follows:</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"v1\" header=\"app/heroes/heroes.component.ts (initial version)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">你要从 Angular 核心库中导入 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 符号，并为组件类加上 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器。</p><p translation-origin=\"off\">You always import the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> symbol from the Angular core library\nand annotate the component class with <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 是个装饰器函数，用于为该组件指定 Angular 所需的元数据。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> is a decorator function that specifies the Angular metadata for the component.</p>\n\n<p translation-result=\"on\">CLI 自动生成了三个元数据属性：</p><p translation-origin=\"off\">The CLI generated three metadata properties:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><code>selector</code>— 组件的选择器（CSS 元素选择器）</p><p translation-origin=\"off\"><code>selector</code>— the component's CSS element selector</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>templateUrl</code>— 组件模板文件的位置。</p><p translation-origin=\"off\"><code>templateUrl</code>— the location of the component's template file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>styleUrls</code>— 组件私有 CSS 样式表文件的位置。</p><p translation-origin=\"off\"><code>styleUrls</code>— the location of the component's private CSS styles.</p>\n\n</li>\n</ol>\n<a id=\"selector\"></a>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">CSS 元素选择器</a> <code>app-heroes</code> 用来在父组件的模板中匹配 HTML 元素的名称，以识别出该组件。</p><p translation-origin=\"off\">The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">CSS element selector</a>,\n<code>'app-heroes'</code>, matches the name of the HTML element that identifies this component within a parent component's template.</p>\n\n<p translation-result=\"on\"><code>ngOnInit()</code> 是一个<a href=\"guide/lifecycle-hooks#oninit\">生命周期钩子</a>，Angular 在创建完组件后很快就会调用 <code>ngOnInit()</code>。这里是放置初始化逻辑的好地方。</p><p translation-origin=\"off\">The <code>ngOnInit()</code> is a <a href=\"guide/lifecycle-hooks#oninit\">lifecycle hook</a>.\nAngular calls <code>ngOnInit()</code> shortly after creating a component.\nIt's a good place to put initialization logic.</p>\n\n<p translation-result=\"on\">始终要 <code>export</code> 这个组件类，以便在其它地方（比如 <code>AppModule</code>）导入它。</p><p translation-origin=\"off\">Always <code>export</code> the component class so you can <code>import</code> it elsewhere ... like in the <code>AppModule</code>.</p>\n\n<h3 id=\"add-a-hero-property\" translation-result=\"on\">添加 <code>hero</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#add-a-hero-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-hero-property\">Add a <code>hero</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#add-a-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">往 <code>HeroesComponent</code> 中添加一个 <code>hero</code> 属性，用来表示一个名叫 “Windstorm” 的英雄。</p><p translation-origin=\"off\">Add a <code>hero</code> property to the <code>HeroesComponent</code> for a hero named \"Windstorm.\"</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"add-hero\" header=\"heroes.component.ts (hero property)\">\nhero = 'Windstorm';\n\n</code-example>\n<h3 id=\"show-the-hero\" translation-result=\"on\">显示英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"show-the-hero\">Show the hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">打开模板文件 <code>heroes.component.html</code>。删除 Angular CLI 自动生成的默认内容，改为到 <code>hero</code> 属性的数据绑定。</p><p translation-origin=\"off\">Open the <code>heroes.component.html</code> template file.\nDelete the default text generated by the Angular CLI and\nreplace it with a data binding to the new <code>hero</code> property.</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" header=\"heroes.component.html\" region=\"show-hero-1\">\n{{hero}}\n\n</code-example>\n<h2 id=\"show-the-heroescomponent-view\" translation-result=\"on\">显示 <code>HeroesComponent</code> 视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-heroescomponent-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"show-the-heroescomponent-view\">Show the <code>HeroesComponent</code> view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-heroescomponent-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要显示 <code>HeroesComponent</code> 你必须把它加到壳组件 <code>AppComponent</code> 的模板中。</p><p translation-origin=\"off\">To display the <code>HeroesComponent</code>, you must add it to the template of the shell <code>AppComponent</code>.</p>\n\n<p translation-result=\"on\">别忘了，<code>app-heroes</code> 就是 <code>HeroesComponent</code> 的 <a href=\"tutorial/toh-pt1#selector\">元素选择器</a>。\n所以，只要把 <code>&#x3C;app-heroes></code> 元素添加到 <code>AppComponent</code> 的模板文件中就可以了，就放在标题下方。</p><p translation-origin=\"off\">Remember that <code>app-heroes</code> is the <a href=\"tutorial/toh-pt1#selector\">element selector</a> for the <code>HeroesComponent</code>.\nSo add an <code>&#x3C;app-heroes></code> element to the <code>AppComponent</code> template file, just below the title.</p>\n\n<code-example path=\"toh-pt1/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n\n\n</code-example>\n<p translation-result=\"on\">如果 CLI 的 <code>ng serve</code> 命令仍在运行，浏览器就会自动刷新，并且同时显示出应用的标题和英雄的名字。</p><p translation-origin=\"off\">Assuming that the CLI <code>ng serve</code> command is still running,\nthe browser should refresh and display both the application title and the hero name.</p>\n\n<h2 id=\"create-a-hero-interface\" translation-result=\"on\">创建 <code>Hero</code> 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-a-hero-interface\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-a-hero-interface\">Create a Hero interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-a-hero-interface\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">真实的英雄当然不止一个名字。</p><p translation-origin=\"off\">A real hero is more than a name.</p>\n\n<p translation-result=\"on\">在 <code>src/app</code> 文件夹中为 <code>Hero</code> 类创建一个文件，并添加 <code>id</code> 和 <code>name</code> 属性。</p><p translation-origin=\"off\">Create a <code>Hero</code> interface in its own file in the <code>src/app</code> folder.\nGive it <code>id</code> and <code>name</code> properties.</p>\n\n<code-example path=\"toh-pt1/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-example>\n<p translation-result=\"on\">回到 <code>HeroesComponent</code> 类，并且导入这个 <code>Hero</code> 类。</p><p translation-origin=\"off\">Return to the <code>HeroesComponent</code> class and import the <code>Hero</code> interface.</p>\n\n<p translation-result=\"on\">把组件的 <code>hero</code> 属性的类型重构为 <code>Hero</code>。\n然后以 <code>1</code> 为 <code>id</code>、以 “Windstorm” 为名字初始化它。</p><p translation-origin=\"off\">Refactor the component's <code>hero</code> property to be of type <code>Hero</code>.\nInitialize it with an <code>id</code> of <code>1</code> and the name <code>Windstorm</code>.</p>\n\n<p translation-result=\"on\">修改后的 <code>HeroesComponent</code> 类应该是这样的：</p><p translation-origin=\"off\">The revised <code>HeroesComponent</code> class file should look like this:</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" header=\"src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">页面显示变得不正常了，因为你刚刚把 <code>hero</code> 从字符串改成了对象。</p><p translation-origin=\"off\">The page no longer displays properly because you changed the hero from a string to an object.</p>\n\n<h2 id=\"show-the-hero-object\" translation-result=\"on\">显示 <code>hero</code> 对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero-object\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"show-the-hero-object\">Show the hero object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero-object\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">修改模板中的绑定，以显示英雄的名字，并在详情中显示 <code>id</code> 和 <code>name</code>，就像这样：</p><p translation-origin=\"off\">Update the binding in the template to announce the hero's name\nand show both <code>id</code> and <code>name</code> in a details layout like this:</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-2\" header=\"heroes.component.html (HeroesComponent&#x27;s template)\">\n&#x3C;h2>{{hero.name}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n&#x3C;div>&#x3C;span>name: &#x3C;/span>{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">浏览器自动刷新，并显示这位英雄的信息。</p><p translation-origin=\"off\">The browser refreshes and displays the hero's information.</p>\n\n<h2 id=\"format-with-the-uppercasepipe\" translation-result=\"on\">使用 <code>UppercasePipe</code> 进行格式化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#format-with-the-uppercasepipe\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"format-with-the-uppercasepipe\">Format with the <em>UppercasePipe</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#format-with-the-uppercasepipe\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">把 <code>hero.name</code> 的绑定修改成这样：</p><p translation-origin=\"off\">Modify the <code>hero.name</code> binding like this.</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.html\" header=\"src/app/heroes/heroes.component.html\" region=\"pipe\">\n&#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n\n</code-example>\n<p translation-result=\"on\">浏览器刷新了。现在，英雄的名字显示成了大写字母。</p><p translation-origin=\"off\">The browser refreshes and now the hero's name is displayed in capital letters.</p>\n\n<p translation-result=\"on\">绑定表达式中的 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 位于管道操作符（ | ）的右边，用来调用内置管道 <code>UppercasePipe</code>。</p><p translation-origin=\"off\">The word <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> in the interpolation binding,\nright after the pipe operator ( | ),\nactivates the built-in <code>UppercasePipe</code>.</p>\n\n<p translation-result=\"on\"><a href=\"guide/pipes\">管道</a> 是格式化字符串、金额、日期和其它显示数据的好办法。\nAngular 发布了一些内置管道，而且你还可以创建自己的管道。</p><p translation-origin=\"off\"><a href=\"guide/pipes\">Pipes</a> are a good way to format strings, currency amounts, dates and other display data.\nAngular ships with several built-in pipes and you can create your own.</p>\n\n<h2 id=\"edit-the-hero\" translation-result=\"on\">编辑英雄名字<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"edit-the-hero\">Edit the hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">用户应该能在一个 <code>&#x3C;input></code> 输入框中编辑英雄的名字。</p><p translation-origin=\"off\">Users should be able to edit the hero name in an <code>&#x3C;input></code> textbox.</p>\n\n<p translation-result=\"on\">当用户输入时，这个输入框应该能同时<em>显示</em>和<em>修改</em>英雄的 <code>name</code> 属性。\n也就是说，数据流从组件类<strong>流出到屏幕</strong>，并且从屏幕<strong>流回到组件类</strong>。</p><p translation-origin=\"off\">The textbox should both <em>display</em> the hero's <code>name</code> property\nand <em>update</em> that property as the user types.\nThat means data flows from the component class <em>out to the screen</em> and\nfrom the screen <em>back to the class</em>.</p>\n\n<p translation-result=\"on\">要想让这种数据流动自动化，就要在表单元素 <code>&#x3C;input></code> 和组件的 <code>hero.name</code> 属性之间建立双向数据绑定。</p><p translation-origin=\"off\">To automate that data flow, setup a two-way data binding between the <code>&#x3C;input></code> form element and the <code>hero.name</code> property.</p>\n\n<h3 id=\"two-way-binding\" translation-result=\"on\">双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"two-way-binding\">Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">把模板中的英雄详情区重构成这样：</p><p translation-origin=\"off\">Refactor the details area in the <code>HeroesComponent</code> template so it looks like this:</p>\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"name-input\" header=\"src/app/heroes/heroes.component.html (HeroesComponent&#x27;s template)\">\n&#x3C;div>\n  &#x3C;label>name:\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n  &#x3C;/label>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\"><strong>[(ngModel)]</strong> 是 Angular 的双向数据绑定语法。</p><p translation-origin=\"off\"><strong>[(ngModel)]</strong> is Angular's two-way data binding syntax.</p>\n\n<p translation-result=\"on\">这里把 <code>hero.name</code> 属性绑定到了 HTML 的 textbox 元素上，以便数据流可以<strong>双向流动</strong>：从 <code>hero.name</code> 属性流动到 textbox，并且从 textbox 流回到 <code>hero.name</code>。</p><p translation-origin=\"off\">Here it binds the <code>hero.name</code> property to the HTML textbox so that data can flow <em>in both directions:</em> from the <code>hero.name</code> property to the textbox, and from the textbox back to the <code>hero.name</code>.</p>\n\n<h3 id=\"the-missing-formsmodule\" translation-result=\"on\">缺少 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-missing-formsmodule\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-missing-formsmodule\">The missing <em>FormsModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-missing-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">注意，当你加上 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 之后这个应用无法工作了。</p><p translation-origin=\"off\">Notice that the app stopped working when you added <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>.</p>\n\n<p translation-result=\"on\">打开浏览器的开发工具，就会在控制台中看到如下信息：</p><p translation-origin=\"off\">To see the error, open the browser development tools and look in the console\nfor a message like</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\nTemplate parse errors:\nCan't bind to 'ngModel' since it isn't a known property of 'input'.\n</code-example>\n<p translation-result=\"on\">虽然 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 是一个有效的 Angular 指令，不过它在默认情况下是不可用的。</p><p translation-origin=\"off\">Although <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> is a valid Angular directive, it isn't available by default.</p>\n\n<p translation-result=\"on\">它属于一个可选模块 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，你必须自行添加此模块才能使用该指令。</p><p translation-origin=\"off\">It belongs to the optional <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and you must <em>opt-in</em> to using it.</p>\n\n<h2 id=\"appmodule\"><em>AppModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#appmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">Angular 需要知道如何把应用程序的各个部分组合到一起，以及该应用需要哪些其它文件和库。\n这些信息被称为<em>元数据（metadata）</em>。</p><p translation-origin=\"off\">Angular needs to know how the pieces of your application fit together\nand what other files and libraries the app requires.\nThis information is called <em>metadata</em>.</p>\n\n<p translation-result=\"on\">有些元数据位于 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器中，你会把它加到组件类上。\n另一些关键性的元数据位于 <a href=\"guide/ngmodules\"><code>@NgModule</code></a> 装饰器中。</p><p translation-origin=\"off\">Some of the metadata is in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorators that you added to your component classes.\nOther critical metadata is in <a href=\"guide/ngmodules\"><code>@NgModule</code></a> decorators.</p>\n\n<p translation-result=\"on\">最重要的 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器位于顶层类 <strong>AppModule</strong> 上。</p><p translation-origin=\"off\">The most important <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator annotates the top-level <strong>AppModule</strong> class.</p>\n\n<p translation-result=\"on\">Angular CLI 在创建项目的时候就在 <code>src/app/app.module.ts</code> 中生成了一个 <code>AppModule</code> 类。\n这里也就是你要添加 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 的地方。</p><p translation-origin=\"off\">The Angular CLI generated an <code>AppModule</code> class in <code>src/app/app.module.ts</code> when it created the project.\nThis is where you <em>opt-in</em> to the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n<h3 id=\"import-formsmodule\" translation-result=\"on\">导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#import-formsmodule\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"import-formsmodule\">Import <em>FormsModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#import-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">打开 <code>AppModule</code> (<code>app.module.ts</code>) 并从 <code>@angular/forms</code> 库中导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 符号。</p><p translation-origin=\"off\">Open <code>AppModule</code> (<code>app.module.ts</code>) and import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> symbol from the <code>@angular/forms</code> library.</p>\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (FormsModule symbol import)\" region=\"formsmodule-js-import\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\n</code-example>\n<p translation-result=\"on\">然后把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据的 <code>imports</code> 数组中，这里是该应用所需外部模块的列表。</p><p translation-origin=\"off\">Then add <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata's <code>imports</code> array, which contains a list of external modules that the app needs.</p>\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (@NgModule imports)\" region=\"ng-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n],\n\n</code-example>\n<p translation-result=\"on\">刷新浏览器，应用又能正常工作了。你可以编辑英雄的名字，并且会看到这个改动立刻体现在这个输入框上方的 <code>&#x3C;h2></code> 中。</p><p translation-origin=\"off\">When the browser refreshes, the app should work again. You can edit the hero's name and see the changes reflected immediately in the <code>&#x3C;h2></code> above the textbox.</p>\n\n<h3 id=\"declare-heroescomponent\" translation-result=\"on\">声明 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#declare-heroescomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"declare-heroescomponent\">Declare <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#declare-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">每个组件都必须声明在（且只能声明在）一个 <a href=\"guide/ngmodules\">NgModule</a> 中。</p><p translation-origin=\"off\">Every component must be declared in <em>exactly one</em> <a href=\"guide/ngmodules\">NgModule</a>.</p>\n\n<p translation-result=\"on\"><em>你</em>没有声明过 <code>HeroesComponent</code>，可为什么本应用却正常呢？</p><p translation-origin=\"off\"><em>You</em> didn't declare the <code>HeroesComponent</code>.\nSo why did the application work?</p>\n\n<p translation-result=\"on\">这是因为 Angular CLI 在生成 <code>HeroesComponent</code> 组件的时候就自动把它加到了 <code>AppModule</code> 中。</p><p translation-origin=\"off\">It worked because the Angular CLI declared <code>HeroesComponent</code> in the <code>AppModule</code> when it generated that component.</p>\n\n<p translation-result=\"on\">打开 <code>src/app/app.module.ts</code> 你就会发现 <code>HeroesComponent</code> 已经在顶部导入过了。</p><p translation-origin=\"off\">Open <code>src/app/app.module.ts</code> and find <code>HeroesComponent</code> imported near the top.</p>\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"heroes-import\">\nimport { HeroesComponent } from './heroes/heroes.component';\n\n</code-example>\n<p translation-result=\"on\"><code>HeroesComponent</code> 也已经声明在了 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 数组中。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> is declared in the <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> array.</p>\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  HeroesComponent\n],\n\n</code-example>\n<p translation-result=\"on\">注意 <code>AppModule</code> 声明了应用中的所有组件，<code>AppComponent</code> 和 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">Note that <code>AppModule</code>  declares both application components, <code>AppComponent</code> and <code>HeroesComponent</code>.</p>\n\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">应用跑起来应该是这样的：<live-example></live-example>。本页涉及的代码如下：</p><p translation-origin=\"off\">Your app should look like this <live-example></live-example>. Here are the code files discussed on this page.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\">\n&#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n&#x3C;div>\n  &#x3C;label>name:\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n  &#x3C;/label>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"toh-pt1/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero.ts\" path=\"toh-pt1/src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 你使用 CLI 创建了第二个组件 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">You used the CLI to create a second <code>HeroesComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你把 <code>HeroesComponent</code> 添加到了壳组件 <code>AppComponent</code> 中，以便显示它。</p><p translation-origin=\"off\">You displayed the <code>HeroesComponent</code> by adding it to the <code>AppComponent</code> shell. </p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你使用 <code>UppercasePipe</code> 来格式化英雄的名字。</p><p translation-origin=\"off\">You applied the <code>UppercasePipe</code> to format the name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令实现了双向数据绑定。</p><p translation-origin=\"off\">You used two-way data binding with the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你知道了 <code>AppModule</code>。</p><p translation-origin=\"off\">You learned about the <code>AppModule</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 导入了 <code>AppModule</code>，以便 Angular 能识别并应用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p><p translation-origin=\"off\">You imported the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> in the <code>AppModule</code> so that Angular would recognize and apply the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive. </p>\n\n</li>\n<li>\n<p translation-result=\"on\">   你知道了把组件声明到 <code>AppModule</code> 是很重要的，并认识到 CLI 会自动帮你声明它。</p><p translation-origin=\"off\">You learned the importance of declaring components in the <code>AppModule</code>\nand appreciated that the CLI declared it for you.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/lifecycle-hooks#oninit\n - guide/ngmodules\n - guide/pipes\n - tutorial/toh-pt1#add-a-hero-property\n - tutorial/toh-pt1#appmodule\n - tutorial/toh-pt1#create-a-hero-interface\n - tutorial/toh-pt1#create-the-heroes-component\n - tutorial/toh-pt1#declare-heroescomponent\n - tutorial/toh-pt1#edit-the-hero\n - tutorial/toh-pt1#final-code-review\n - tutorial/toh-pt1#format-with-the-uppercasepipe\n - tutorial/toh-pt1#import-formsmodule\n - tutorial/toh-pt1#selector\n - tutorial/toh-pt1#show-the-hero\n - tutorial/toh-pt1#show-the-hero-object\n - tutorial/toh-pt1#show-the-heroescomponent-view\n - tutorial/toh-pt1#summary\n - tutorial/toh-pt1#the-hero-editor\n - tutorial/toh-pt1#the-missing-formsmodule\n - tutorial/toh-pt1#two-way-binding\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\n - https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt1.md?message=docs%3A%20请简述你的修改...\n-->"
}