{
  "id": "tutorial/toh-pt3",
  "title": "Create a feature component",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt3.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"create-a-feature-component\" translation-result=\"on\">主从组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#create-a-feature-component\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"create-a-feature-component\">Create a feature component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#create-a-feature-component\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">此刻，<code>HeroesComponent</code> 同时显示了英雄列表和所选英雄的详情。</p><p translation-origin=\"off\">At the moment, the <code>HeroesComponent</code> displays both the list of heroes and the selected hero's details.</p>\n\n<p translation-result=\"on\">把所有特性都放在同一个组件中，将会使应用“长大”后变得不可维护。\n你要把大型组件拆分成小一点的子组件，每个子组件都要集中精力处理某个特定的任务或工作流。</p><p translation-origin=\"off\">Keeping all features in one component as the application grows will not be maintainable.\nYou'll want to split up large components into smaller sub-components, each focused on a specific task or workflow.</p>\n\n<p translation-result=\"on\">本页面中，你将迈出第一步 —— 把英雄详情移入一个独立的、可复用的 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">In this page, you'll take the first step in that direction by moving the hero details into a separate, reusable <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 将仅仅用来表示英雄列表。\n<code>HeroDetailComponent</code> 将用来表示所选英雄的详情。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> will only present the list of heroes.\nThe <code>HeroDetailComponent</code> will present details of a selected hero.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  要查看本页所讲的范例程序，参见<live-example></live-example>。</p><p translation-origin=\"off\">  For the sample app that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"make-the-herodetailcomponent\" translation-result=\"on\">制作 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#make-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"make-the-herodetailcomponent\">Make the <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#make-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 Angular CLI 生成一个名叫 <code>hero-detail</code> 的新组件。</p><p translation-origin=\"off\">Use the Angular CLI to generate a new component named <code>hero-detail</code>.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-detail\n</code-example>\n<p translation-result=\"on\">这个命令会做这些事：</p><p translation-origin=\"off\">The command scaffolds the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">创建目录 <code>src/app/hero-detail</code>。</p><p translation-origin=\"off\">Creates a directory <code>src/app/hero-detail</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在这个目录中会生成四个文件：</p><p translation-origin=\"off\">Inside that directory four files are generated:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">作为组件样式的 CSS 文件。</p><p translation-origin=\"off\">A CSS file for the component styles.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">作为组件模板的 HTML 文件。</p><p translation-origin=\"off\">An HTML file for the component template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">存放组件类 <code>HeroDetailComponent</code> 的 TypeScript 文件。</p><p translation-origin=\"off\">A TypeScript file with a component class named <code>HeroDetailComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 类的测试文件。</p><p translation-origin=\"off\">A test file for the <code>HeroDetailComponent</code> class.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">该命令还会把 <code>HeroDetailComponent</code> 添加到 <code>src/app/app.module.ts</code> 文件中 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>declarations</code> 列表中。</p><p translation-origin=\"off\">The command also adds the <code>HeroDetailComponent</code> as a declaration in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator of the <code>src/app/app.module.ts</code> file.</p>\n\n<h3 id=\"write-the-template\" translation-result=\"on\">编写模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#write-the-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"write-the-template\">Write the template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#write-the-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">从 <code>HeroesComponent</code> 模板的底部把表示英雄详情的 HTML 代码剪切粘贴到所生成的 <code>HeroDetailComponent</code> 模板中。</p><p translation-origin=\"off\">Cut the HTML for the hero detail from the bottom of the <code>HeroesComponent</code> template and paste it over the generated boilerplate in the <code>HeroDetailComponent</code> template.</p>\n\n<p translation-result=\"on\">所粘贴的 HTML 引用了 <code>selectedHero</code>。\n新的 <code>HeroDetailComponent</code> 可以展示<em>任意</em>英雄，而不仅仅所选的。因此还要把模板中的所有 <code>selectedHero</code> 替换为 <code>hero</code>。</p><p translation-origin=\"off\">The pasted HTML refers to a <code>selectedHero</code>.\nThe new <code>HeroDetailComponent</code> can present <em>any</em> hero, not just a selected hero.\nSo replace \"selectedHero\" with \"hero\" everywhere in the template.</p>\n\n<p translation-result=\"on\">完工之后，<code>HeroDetailComponent</code> 的模板应该是这样的：</p><p translation-origin=\"off\">When you're done, the <code>HeroDetailComponent</code> template should look like this:</p>\n\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\" header=\"src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-example>\n<h3 id=\"add-the-input-hero-property\" translation-result=\"on\">添加 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#add-the-input-hero-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-the-input-hero-property\">Add the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> hero property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#add-the-input-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 模板中绑定了组件中的 <code>hero</code> 属性，它的类型是 <code>Hero</code>。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> template binds to the component's <code>hero</code> property\nwhich is of type <code>Hero</code>.</p>\n\n<p translation-result=\"on\">打开 <code>HeroDetailComponent</code> 类文件，并导入 <code>Hero</code> 符号。</p><p translation-origin=\"off\">Open the <code>HeroDetailComponent</code> class file and import the <code>Hero</code> symbol.</p>\n\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-hero\" header=\"src/app/hero-detail/hero-detail.component.ts (import Hero)\">\nimport { Hero } from '../hero';\n\n</code-example>\n<p translation-result=\"on\"><code>hero</code> 属性<a href=\"guide/template-syntax#inputs-outputs\" title=\"Input and Output properties\">必须是一个带有 <code>@Input()</code> 装饰器的输入属性</a>，因为<em>外部的</em> <code>HeroesComponent</code> 组件<a href=\"tutorial/toh-pt3#heroes-component-template\">将会绑定到它</a>。就像这样：</p><p translation-origin=\"off\">The <code>hero</code> property\n<a href=\"guide/template-syntax#inputs-outputs\" title=\"Input and Output properties\">must be an <em>Input</em> property</a>,\nannotated with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator,\nbecause the <em>external</em> <code>HeroesComponent</code> <a href=\"tutorial/toh-pt3#heroes-component-template\">will bind to it</a> like this.</p>\n\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n</code-example>\n<p translation-result=\"on\">修改 <code>@angular/core</code> 的导入语句，导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 符号。</p><p translation-origin=\"off\">Amend the <code>@angular/core</code> import statement to include the <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> symbol.</p>\n\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\" header=\"src/app/hero-detail/hero-detail.component.ts (import Input)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<p translation-result=\"on\">添加一个带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器的 <code>hero</code> 属性。</p><p translation-origin=\"off\">Add a <code>hero</code> property, preceded by the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator.</p>\n\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"input-hero\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n</code-example>\n<p translation-result=\"on\">这就是你要对 <code>HeroDetailComponent</code> 类做的唯一一项修改。\n没有其它属性，也没有展示逻辑。这个组件所做的只是通过 <code>hero</code> 属性接收一个英雄对象，并显示它。</p><p translation-origin=\"off\">That's the only change you should make to the <code>HeroDetailComponent</code> class.\nThere are no more properties. There's no presentation logic.\nThis component simply receives a hero object through its <code>hero</code> property and displays it.</p>\n\n<h2 id=\"show-the-herodetailcomponent\" translation-result=\"on\">显示 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#show-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"show-the-herodetailcomponent\">Show the <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#show-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 仍然是主从视图。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> is still a master/detail view.</p>\n\n<p translation-result=\"on\">在你从模板中剪切走代码之前，它自己负责显示英雄的详情。现在它要把这个职责委托给 <code>HeroDetailComponent</code> 了。</p><p translation-origin=\"off\">It used to display the hero details on its own, before you cut that portion of the template. Now it will delegate to the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">这两个组件将会具有父子关系。\n当用户从列表中选择了某个英雄时，父组件 <code>HeroesComponent</code> 将通过把要显示的新英雄发送给子组件 <code>HeroDetailComponent</code>，来控制子组件。</p><p translation-origin=\"off\">The two components will have a parent/child relationship.\nThe parent <code>HeroesComponent</code> will control the child <code>HeroDetailComponent</code>\nby sending it a new hero to display whenever\nthe user selects a hero from the list.</p>\n\n<p translation-result=\"on\">你不用修改 <code>HeroesComponent</code> <em>类</em>，但是要修改它的<em>模板</em>。</p><p translation-origin=\"off\">You won't change the <code>HeroesComponent</code> <em>class</em> but you will change its <em>template</em>.</p>\n\n<a id=\"heroes-component-template\"></a>\n<h3 id=\"update-the-heroescomponent-template\" translation-result=\"on\">修改 <code>HeroesComponent</code> 的模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#update-the-heroescomponent-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"update-the-heroescomponent-template\">Update the <code>HeroesComponent</code> template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#update-the-heroescomponent-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 的选择器是 <code>'app-hero-detail'</code>。\n把 <code>&#x3C;app-hero-detail></code> 添加到 <code>HeroesComponent</code> 模板的底部，以便把英雄详情的视图显示到那里。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> selector is <code>'app-hero-detail'</code>.\nAdd an <code>&#x3C;app-hero-detail></code> element near the bottom of the <code>HeroesComponent</code> template, where the hero detail view used to be.</p>\n\n<p translation-result=\"on\">把 <code>HeroesComponent.selectedHero</code> 绑定到该元素的 <code>hero</code> 属性，就像这样：</p><p translation-origin=\"off\">Bind the <code>HeroesComponent.selectedHero</code> to the element's <code>hero</code> property like this.</p>\n\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\" header=\"heroes.component.html (HeroDetail binding)\">\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n</code-example>\n<p translation-result=\"on\"><code>[hero]=\"selectedHero\"</code> 是 Angular 的<a href=\"guide/template-syntax#property-binding\">属性绑定</a>语法。</p><p translation-origin=\"off\"><code>[hero]=\"selectedHero\"</code> is an Angular <a href=\"guide/template-syntax#property-binding\">property binding</a>.</p>\n\n<p translation-result=\"on\">这是一种<em>单向</em>数据绑定。从 <code>HeroesComponent</code> 的 <code>selectedHero</code> 属性绑定到目标元素的 <code>hero</code> 属性，并映射到了 <code>HeroDetailComponent</code> 的 <code>hero</code> 属性。</p><p translation-origin=\"off\">It's a <em>one way</em> data binding from\nthe <code>selectedHero</code> property of the <code>HeroesComponent</code> to the <code>hero</code> property of the target element, which maps to the <code>hero</code> property of the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">现在，当用户在列表中点击某个英雄时，<code>selectedHero</code> 就改变了。\n当 <code>selectedHero</code> 改变时，<em>属性绑定</em>会修改 <code>HeroDetailComponent</code> 的 <code>hero</code> 属性，<code>HeroDetailComponent</code> 就会显示这个新的英雄。</p><p translation-origin=\"off\">Now when the user clicks a hero in the list, the <code>selectedHero</code> changes.\nWhen the <code>selectedHero</code> changes, the <em>property binding</em> updates <code>hero</code>\nand the <code>HeroDetailComponent</code> displays the new hero.</p>\n\n<p translation-result=\"on\">修改后的 <code>HeroesComponent</code> 的模板是这样的：</p><p translation-origin=\"off\">The revised <code>HeroesComponent</code> template should look like this:</p>\n\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" header=\"heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n\n</code-example>\n<p translation-result=\"on\">浏览器刷新，应用又像以前一样开始工作了。</p><p translation-origin=\"off\">The browser refreshes and the app starts working again as it did before.</p>\n\n<h2 id=\"what-changed\" translation-result=\"on\">有哪些变化？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-changed\">What changed?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">像<a href=\"tutorial/toh-pt2\">以前</a>一样，一旦用户点击了一个英雄的名字，该英雄的详情就显示在了英雄列表下方。\n现在，<code>HeroDetailComponent</code> 负责显示那些详情，而不再是 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">As <a href=\"tutorial/toh-pt2\">before</a>, whenever a user clicks on a hero name,\nthe hero detail appears below the hero list.\nNow the <code>HeroDetailComponent</code> is presenting those details instead of the <code>HeroesComponent</code>.</p>\n\n<p translation-result=\"on\">把原来的 <code>HeroesComponent</code> 重构成两个组件带来了一些优点，无论是现在还是未来：</p><p translation-origin=\"off\">Refactoring the original <code>HeroesComponent</code> into two components yields benefits, both now and in the future:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">你通过缩减 <code>HeroesComponent</code> 的职责简化了该组件。</p><p translation-origin=\"off\">You simplified the <code>HeroesComponent</code> by reducing its responsibilities.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   你可以把 <code>HeroDetailComponent</code> 改进成一个功能丰富的英雄编辑器，而不用改动父组件 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">You can evolve the <code>HeroDetailComponent</code> into a rich hero editor\nwithout touching the parent <code>HeroesComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你可以改进 <code>HeroesComponent</code>，而不用改动英雄详情视图。</p><p translation-origin=\"off\">You can evolve the <code>HeroesComponent</code> without touching the hero detail view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">将来你可以在其它组件的模板中重复使用 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">You can re-use the <code>HeroDetailComponent</code> in the template of some future component.</p>\n\n</li>\n</ol>\n<h2 id=\"final-code-review\" translation-result=\"on\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本页讨论的代码文件如下。</p><p translation-origin=\"off\">Here are the code files discussed on this page.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt3/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt3/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 你创建了一个独立的、可复用的 <code>HeroDetailComponent</code> 组件。</p><p translation-origin=\"off\">You created a separate, reusable <code>HeroDetailComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你用<a href=\"guide/template-syntax#property-binding\">属性绑定</a>语法来让父组件 <code>HeroesComponent</code> 可以控制子组件 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">You used a <a href=\"guide/template-syntax#property-binding\">property binding</a> to give the parent <code>HeroesComponent</code> control over the child <code>HeroDetailComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   你用 <a href=\"guide/template-syntax#inputs-outputs\"><code>@Input</code> 装饰器</a>来让 <code>hero</code> 属性可以在外部的 <code>HeroesComponent</code> 中绑定。</p><p translation-origin=\"off\">You used the <a href=\"guide/template-syntax#inputs-outputs\"><code>@Input</code> decorator</a>\nto make the <code>hero</code> property available for binding\nby the external <code>HeroesComponent</code>.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#property-binding\n - tutorial/toh-pt2\n - tutorial/toh-pt3#add-the-input-hero-property\n - tutorial/toh-pt3#create-a-feature-component\n - tutorial/toh-pt3#final-code-review\n - tutorial/toh-pt3#heroes-component-template\n - tutorial/toh-pt3#make-the-herodetailcomponent\n - tutorial/toh-pt3#show-the-herodetailcomponent\n - tutorial/toh-pt3#summary\n - tutorial/toh-pt3#update-the-heroescomponent-template\n - tutorial/toh-pt3#what-changed\n - tutorial/toh-pt3#write-the-template\n - https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt3.md?message=docs%3A%20请简述你的修改...\n-->"
}