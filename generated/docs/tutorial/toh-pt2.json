{
  "id": "tutorial/toh-pt2",
  "title": "显示英雄列表",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt2.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"display-a-selection-list\">Display a selection list<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-a-selection-list\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"显示英雄列表\">显示英雄列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#显示英雄列表\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial shows you how to:</p>\n<p>本教程向你展示了如何：</p>\n<ul>\n<li>\n<p>Expand the Tour of Heroes application to display a list of heroes.</p>\n<p>展开《英雄之旅》应用以显示英雄列表。</p>\n</li>\n<li>\n<p>Allow users to select a hero and display the hero's details.</p>\n<p>允许用户选择英雄并显示英雄的详细信息。</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>For the sample application that this page describes, see the <live-example></live-example>.</p>\n<p>要查看本页所讲的范例程序，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"create-mock-heroes\">Create mock heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-mock-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"创建模拟mock的英雄数据\">创建模拟（mock）的英雄数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#创建模拟mock的英雄数据\"><i class=\"material-icons\">link</i></a></h2>\n<p>The first step is to create some heroes to display.</p>\n<p>第一步是创建一些要显示的英雄。</p>\n<p>Create a file called <code>mock-heroes.ts</code> in the <code>src/app/</code> directory.\nDefine a <code>HEROES</code> constant as an array of ten heroes and export it.\nThe file should look like this.</p>\n<p>在 <code>src/app/</code> 目录下创建一个名叫 <code>mock-heroes.ts</code> 的文件。定义一个包含十个英雄的常量数组 <code>HEROES</code>，并导出它。该文件是这样的。</p>\n<code-example header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 12, name: 'Dr. Nice' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr. IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<h2 id=\"displaying-heroes\">Displaying heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"显示这些英雄\">显示这些英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#显示这些英雄\"><i class=\"material-icons\">link</i></a></h2>\n<p>Open the <code>HeroesComponent</code> class file and import the mock <code>HEROES</code>.</p>\n<p>打开 <code>HeroesComponent</code> 类文件，并导入模拟的 <code>HEROES</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (import HEROES)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\">\nimport { HEROES } from '../mock-heroes';\n\n</code-example>\n<p>In <code>HeroesComponent</code> class, define a component property called <code>heroes</code> to expose the <code>HEROES</code> array for binding.</p>\n<p>往类中添加一个 <code>heroes</code> 属性，这样可以暴露出这个 <code>HEROES</code> 数组，以供绑定。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"component\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n}\n\n</code-example>\n<h3 id=\"list-heroes-with-ngfor\">List heroes with <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#list-heroes-with-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"使用-ngfor-列出这些英雄\">使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列出这些英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#使用-ngfor-列出这些英雄\"><i class=\"material-icons\">link</i></a></h3>\n<p>Open the <code>HeroesComponent</code> template file and make the following changes:</p>\n<p>打开 <code>HeroesComponent</code> 的模板文件，并做如下修改：</p>\n<ol>\n<li>\n<p>Add an <code>&#x3C;h2></code> at the top.</p>\n<p>在顶部添加 <code>&#x3C;h2></code>，。</p>\n</li>\n<li>\n<p>Below the <code>&#x3C;h2></code>, add a <code>&#x3C;ul></code> element.</p>\n<p>在 <code>&#x3C;h2></code> 下方，添加 <code>&#x3C;ul></code> 元素。</p>\n</li>\n<li>\n<p>In the <code>&#x3C;ul></code> element, insert an <code>&#x3C;li></code>.</p>\n<p>在 <code>&#x3C;ul></code> 元素中，插入 <code>&#x3C;li></code> 。</p>\n</li>\n<li>\n<p>Place a <code>&#x3C;button></code> inside the <code>&#x3C;li></code> that displays properties of a <code>hero</code> inside <code>&#x3C;span></code> elements.</p>\n<p>在 <code>&#x3C;li></code> 中放一个 <code>&#x3C;button></code> 元素，以便在 <code>&#x3C;span></code> 元素中显示单个 <code>hero</code> 的属性。</p>\n</li>\n<li>\n<p>Add CSS classes to style the component.</p>\n<p>添加 CSS 类以设置组件的样式。</p>\n</li>\n</ol>\n<p>to look like this:</p>\n<p>做完之后应该是这样的：</p>\n<code-example header=\"heroes.component.html (heroes template)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li>\n    &#x3C;button type=\"button\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n      &#x3C;span class=\"name\">{{hero.name}}&#x3C;/span>\n    &#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>That displays an error since the <code>hero</code> property doesn't exist.\nTo have access to each individual hero and list them all, add an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to the <code>&#x3C;li></code> to iterate through the list of heroes:</p>\n<p>由于属性 <code>hero</code> 不存在，因此会显示一个错误。要访问每个英雄并列出所有英雄，请在 <code>&#x3C;li></code> 上添加 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 以遍历英雄列表：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n\n</code-example>\n<p>The <a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a> is Angular's <em>repeater</em> directive.\nIt repeats the host element for each element in a list.</p>\n<p><a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a> 是一个 Angular 的复写器（repeater）指令。它会为列表中的每项数据复写它的宿主元素。</p>\n<p>The syntax in this example is as follows:</p>\n<p>这个例子中涉及的语法如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Syntax</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">语法</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#x3C;li></code></td>\n<td align=\"left\">The host element.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#x3C;li></code></td>\n<td align=\"left\">宿主元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>heroes</code></td>\n<td align=\"left\">Holds the mock heroes list from the <code>HeroesComponent</code> class, the mock heroes list.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>heroes</code></td>\n<td align=\"left\">来自 <code>HeroesComponent</code> 类的存放模拟（mock）英雄的列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>hero</code></td>\n<td align=\"left\">Holds the current hero object for each iteration through the list.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>hero</code></td>\n<td align=\"left\">保存列表每次迭代的当前 hero 对象。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-important\">\n<p>Don't forget to put the asterisk <code>*</code> in front of <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\nIt's a critical part of the syntax.</p>\n<p>不要忘了在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 前面放上星号（<code>*</code>），它是该语法中的关键部分。</p>\n</div>\n<p>After the browser refreshes, the list of heroes appears.</p>\n<p>浏览器刷新之后，英雄列表出现了。</p>\n<div class=\"callout is-helpful\">\n<header>Interactive elements</header>\n<header>交互元素</header>\n<p>Inside the <code>&#x3C;li></code> element, add a <code>&#x3C;button></code> element to wrap the hero's details, and then make the hero clickable. To improve accessibility, use HTML elements that are inherently interactive instead of adding an event listener to a non-interactive element. In this case, the interactive <code>&#x3C;button></code> element is used instead of adding an event to the <code>&#x3C;li></code> element.</p>\n<p>在 <code>&#x3C;li></code> 元素中，添加一个 <code>&#x3C;button></code> 元素，以包裹此英雄的详细信息，然后让 hero 编程可点击的。要增强无障碍性的，最好使用原生交互式 HTML 元素（例如 <code>&#x3C;button></code>），而不是向非交互式元素添加事件侦听器（例如 <code>&#x3C;li></code>）。在这里，就使用了交互元素 <code>&#x3C;button></code>，而不是往 <code>&#x3C;li></code> 元素上直接添加事件。</p>\n<p>For more details on accessibility, see <a href=\"guide/accessibility\">Accessibility in Angular</a>.</p>\n<p>有关无障碍性的更多详细信息，请参阅<a href=\"guide/accessibility\">Angular</a>中的无障碍性。</p>\n</div>\n<p><a id=\"styles\"></a></p>\n<h3 id=\"style-the-heroes\">Style the heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"给英雄列表美容\">给英雄列表“美容”<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#给英雄列表美容\"><i class=\"material-icons\">link</i></a></h3>\n<p>The heroes list should be attractive and should respond visually when users\nhover over and select a hero from the list.</p>\n<p>英雄列表应该富有吸引力，并且当用户把鼠标移到某个英雄上和从列表中选中某个英雄时，应该给出视觉反馈。</p>\n<p>In the <a href=\"tutorial/toh-pt0#app-wide-styles\">first tutorial</a>, you set the basic styles for the entire application in <code>styles.css</code>.\nThat style sheet didn't include styles for this list of heroes.</p>\n<p>在<a href=\"tutorial/toh-pt0#app-wide-styles\">教程的第一章</a>，你曾在 <code>styles.css</code> 中为整个应用设置了一些基础的样式。但那个样式表并不包含英雄列表所需的样式。</p>\n<p>You could add more styles to <code>styles.css</code> and keep growing that style sheet as you add components.</p>\n<p>固然，你可以把更多样式加入到 <code>styles.css</code>，并且放任它随着你添加更多组件而不断膨胀。</p>\n<p>You may prefer instead to define private styles for a specific component. This keeps everything a component needs, such as the code, the HTML, and the CSS, together in one place.</p>\n<p>你可以定义属于特定组件的私有样式。这会让组件所需的一切（比如代码、HTML 和 CSS）都放在一起。</p>\n<p>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</p>\n<p>这种方式让你在其它地方复用该组件更加容易，并且即使全局样式和这里不一样，组件也仍然具有期望的外观。</p>\n<p>You define private styles either inline in the <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> array or as style sheet files identified in the <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> array.</p>\n<p>你可以用多种方式定义私有样式，或者内联在 <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 数组中，或者在 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 所指出的样式表文件中。</p>\n<p>When the <code>ng generate</code> created the <code>HeroesComponent</code>, it created an empty <code>heroes.component.css</code> style sheet for the <code>HeroesComponent</code> and pointed to it in <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> like this.</p>\n<p>当 <code>ng generate</code> 创建 <code>HeroesComponent</code> 时，它也同时为 <code>HeroesComponent</code> 创建了空白的 <code>heroes.component.css</code> 样式表文件，并且让 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 指向它，就像这样。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (@Component)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\n</code-example>\n<p>Open the <code>heroes.component.css</code> file and paste in the private CSS styles for the <code>HeroesComponent</code> from the <a href=\"tutorial/toh-pt2#final-code-review\">final code review</a>.</p>\n<p>打开 <code>heroes.component.css</code> 文件，并且把 <code>HeroesComponent</code> 的私有 CSS 样式粘贴进去。\n你可以在<a href=\"tutorial/toh-pt2#final-code-review\">查看最终代码</a>中找到它们。</p>\n<div class=\"alert is-important\">\n<p>Styles and style sheets identified in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata are scoped to that specific component.\nThe <code>heroes.component.css</code> styles apply only to the <code>HeroesComponent</code> and don't affect the outer HTML or the HTML in any other component.</p>\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中指定的样式和样式表都是局限于该组件的。<code>heroes.component.css</code> 中的样式只会作用于 <code>HeroesComponent</code>，既不会影响到组件外的 HTML，也不会影响到其它组件中的 HTML。</p>\n</div>\n<h2 id=\"viewing-details\">Viewing details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#viewing-details\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"查看详情\">查看详情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#查看详情\"><i class=\"material-icons\">link</i></a></h2>\n<p>When the user clicks a hero in the list, the component should display the selected hero's details at the bottom of the page.</p>\n<p>当用户在此列表中点击一个英雄时，该组件应该在页面底部显示所选英雄的详情。</p>\n<p>The code in this section listens for the hero item click event and display/update the hero details.</p>\n<p>本节中的代码会监听英雄条目的点击事件，并显示与更新英雄的详情。</p>\n<h3 id=\"add-a-click-event-binding\">Add a click event binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-event-binding\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"添加-click-事件绑定\">添加 <code>click</code> 事件绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#添加-click-事件绑定\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add a click event binding to the <code>&#x3C;button></code> in the <code>&#x3C;li></code> like this:</p>\n<p>为 <code>&#x3C;li></code> 中的 <code>&#x3C;button></code> 上添加一个点击事件的绑定代码：</p>\n<code-example header=\"heroes.component.html (template excerpt)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"selectedHero-click\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n  &#x3C;button type=\"button\" (click)=\"onSelect(hero)\">\n  &#x3C;!-- ... -->\n\n</code-example>\n<p>This is an example of Angular's <a href=\"guide/event-binding\">event binding</a> syntax.</p>\n<p>这是 Angular <a href=\"guide/event-binding\">事件绑定</a> 语法的例子。</p>\n<p>The parentheses around <code>click</code> tell Angular to listen for the <code>&#x3C;button></code> element's <code>click</code> event.\nWhen the user clicks in the <code>&#x3C;button></code>, Angular executes the <code>onSelect(hero)</code> expression.</p>\n<p><code>click</code> 外面的圆括号会让 Angular 监听这个 <code>&#x3C;button></code> 元素的 <code>click</code> 事件。\n当用户点击 <code>&#x3C;button></code> 时，Angular 就会执行表达式 <code>onSelect(hero)</code>。</p>\n<p>In the next section, define an <code>onSelect()</code> method in <code>HeroesComponent</code> to display the hero that was defined in the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> expression.</p>\n<p>下一部分，会在 <code>HeroesComponent</code> 上定义一个 <code>onSelect()</code> 方法，用来显示 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 表达式所定义的那个英雄（<code>hero</code>）。</p>\n<h3 id=\"add-the-click-event-handler\">Add the click event handler<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-the-click-event-handler\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"添加-click-事件处理器\">添加 <code>click</code> 事件处理器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#添加-click-事件处理器\"><i class=\"material-icons\">link</i></a></h3>\n<p>Rename the component's <code>hero</code> property to <code>selectedHero</code> but don't assign any value to it since there is no <em>selected hero</em> when the application starts.</p>\n<p>把该组件的 <code>hero</code> 属性改名为 <code>selectedHero</code>，但不要为它赋值。\n因为应用刚刚启动时并没有<em>所选英雄</em>。</p>\n<p>Add the following <code>onSelect()</code> method, which assigns the clicked hero from the template to the component's <code>selectedHero</code>.</p>\n<p>添加如下 <code>onSelect()</code> 方法，它会把模板中被点击的英雄赋值给组件的 <code>selectedHero</code> 属性。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (onSelect)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"on-select\">\nselectedHero?: Hero;\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<h3 id=\"add-a-details-section\">Add a details section<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-details-section\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"添加详情区\">添加详情区<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#添加详情区\"><i class=\"material-icons\">link</i></a></h3>\n<p>Currently, you have a list in the component template.\nTo show details about a hero when you click their name in the list, add a section\nin the template that displays their details.\nAdd the following to <code>heroes.component.html</code> beneath the list section:</p>\n<p>现在，组件的模板中有一个列表。要想在点击列表中英雄的名字时显示该英雄的详情，就要在模板中添加一个区域，用来显示这些详情。在 <code>heroes.component.html</code> 中该列表的紧下方，添加如下代码：</p>\n<code-example header=\"heroes.component.html (selected hero details)\" path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"selectedHero-details\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>id: {{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"hero-name\">Hero name: &#x3C;/label>\n    &#x3C;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<p>The hero details should only be displayed when a hero is selected. When a component is created initially, there is no selected hero. Add the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive to the <code>&#x3C;div></code> that wraps the hero details. This directive tells Angular to render the section only when the <code>selectedHero</code> is defined after it has been selected by clicking on a hero.</p>\n<p>只有在选择英雄时才会显示英雄详细信息。最初创建组件时，没有所选的 hero。将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令添加到包装 hero 详细信息的 <code>&#x3C;div></code> 中。该指令会告诉 Angular 仅在实际定义 <code>selectedHero</code> 时（在它被通过点击英雄来选择）。</p>\n<div class=\"alert is-important\">\n<p>Don't forget the asterisk <code>*</code> character in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>.\nIt's a critical part of the syntax.</p>\n<p>不要忘了 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的星号（<code>*</code>），它是该语法中的关键部分。</p>\n</div>\n<h3 id=\"style-the-selected-hero\">Style the selected hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"为选定的英雄设置样式\">为选定的英雄设置样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#为选定的英雄设置样式\"><i class=\"material-icons\">link</i></a></h3>\n<p>To help identify the selected hero, you can use the <code>.selected</code> CSS class in the <a href=\"tutorial/toh-pt2#styles\">styles you added earlier</a>.\nTo apply the <code>.selected</code> class to the <code>&#x3C;li></code> when the user clicks it, use class binding.</p>\n<p>为了标出选定的英雄，你可以在<a href=\"tutorial/toh-pt2#styles\">以前添加过的样式中</a>增加 CSS 类 <code>.selected</code>。若要把 <code>.selected</code> 类应用于此 <code>&#x3C;li></code> 上，请使用类绑定。</p>\n<div class=\"lightbox\">\n<img alt=\"Selected hero with dark background and light text that differentiates it from unselected list items\" src=\"generated/images/guide/toh/heroes-list-selected.png\" width=\"594\" height=\"290\">\n</div>\n<p>Angular's <a href=\"guide/class-binding\">class binding</a> can add and remove a CSS class conditionally.\nAdd <code>[class.some-css-class]=\"some-condition\"</code> to the element you want to style.</p>\n<p>Angular 的<a href=\"guide/class-binding\">类绑定</a>可以有条件地添加和删除 CSS 类。只需将 <code>[class.some-css-class]=\"some-condition\"</code> 添加到要设置样式的元素即可。</p>\n<p>Add the following <code>[class.selected]</code> binding to the <code>&#x3C;button></code> in the <code>HeroesComponent</code> template:</p>\n<p>在 <code>HeroesComponent</code> 模板中的 <code>&#x3C;button></code> 元素上添加 <code>[class.selected]</code> 绑定，代码如下：</p>\n<code-example header=\"heroes.component.html (toggle the &#x27;selected&#x27; CSS class)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p>When the current row hero is the same as the <code>selectedHero</code>, Angular adds the <code>selected</code> CSS class.\nWhen the two heroes are different, Angular removes the class.</p>\n<p>如果当前行的英雄和 <code>selectedHero</code> 相同，Angular 就会添加 CSS 类 <code>selected</code>，否则就会移除它。</p>\n<p>The finished <code>&#x3C;li></code> looks like this:</p>\n<p>最终的 <code>&#x3C;li></code> 是这样的：</p>\n<code-example header=\"heroes.component.html (list item hero)\" path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n  &#x3C;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n    &#x3C;span class=\"name\">{{hero.name}}&#x3C;/span>\n  &#x3C;/button>\n&#x3C;/li>\n\n</code-example>\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"查看最终代码\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#查看最终代码\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are the code files discussed on this page, including the <code>HeroesComponent</code> styles.</p>\n<p>下面是本页面中所提及的代码文件，包括 <code>HeroesComponent</code> 的样式。</p>\n<code-tabs>\n    <code-pane header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 12, name: 'Dr. Nice' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr. IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HEROES } from '../mock-heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n  selectedHero?: Hero;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt2/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n      &#x3C;span class=\"name\">{{hero.name}}&#x3C;/span>\n    &#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>id: {{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"hero-name\">Hero name: &#x3C;/label>\n    &#x3C;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt2/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n.heroes li {\n  display: flex;\n}\n\n.heroes button {\n  flex: 1;\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: 0;\n  border-radius: 4px;\n  display: flex;\n  align-items: stretch;\n  height: 1.8em;\n}\n\n.heroes button:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n  left: .1em;\n}\n\n.heroes button:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes button.selected {\n  background-color: black;\n  color: white;\n}\n\n.heroes button.selected:hover {\n  background-color: #505050;\n  color: white;\n}\n\n.heroes button.selected:active {\n  background-color: black;\n  color: white;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.heroes .name {\n  align-self: center;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"小结\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#小结\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p>The Tour of Heroes application displays a list of heroes with a detail view.</p>\n<p>英雄之旅应用在一个主从视图中显示了英雄列表。</p>\n</li>\n<li>\n<p>The user can select a hero and see that hero's details.</p>\n<p>用户可以选择一个英雄，并查看该英雄的详情。</p>\n</li>\n<li>\n<p>You used <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to display a list.</p>\n<p>你使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 显示了一个列表。</p>\n</li>\n<li>\n<p>You used <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> to conditionally include or exclude a block of HTML.</p>\n<p>你使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 来根据条件包含或排除了一段 HTML。</p>\n</li>\n<li>\n<p>You can toggle a CSS style class with a <code>class</code> binding.</p>\n<p>你可以用 <code>class</code> 绑定来切换 CSS 的样式类。</p>\n</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间： 5/23/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/OnInit\n - api/forms/NgModel\n - guide/accessibility\n - guide/built-in-directives#ngFor\n - guide/class-binding\n - guide/event-binding\n - tutorial/toh-pt0#app-wide-styles\n - tutorial/toh-pt2#add-a-click-event-binding\n - tutorial/toh-pt2#add-a-details-section\n - tutorial/toh-pt2#add-the-click-event-handler\n - tutorial/toh-pt2#create-mock-heroes\n - tutorial/toh-pt2#display-a-selection-list\n - tutorial/toh-pt2#displaying-heroes\n - tutorial/toh-pt2#final-code-review\n - tutorial/toh-pt2#list-heroes-with-ngfor\n - tutorial/toh-pt2#style-the-heroes\n - tutorial/toh-pt2#style-the-selected-hero\n - tutorial/toh-pt2#styles\n - tutorial/toh-pt2#summary\n - tutorial/toh-pt2#viewing-details\n - tutorial/toh-pt2#为选定的英雄设置样式\n - tutorial/toh-pt2#使用-ngfor-列出这些英雄\n - tutorial/toh-pt2#创建模拟mock的英雄数据\n - tutorial/toh-pt2#小结\n - tutorial/toh-pt2#显示英雄列表\n - tutorial/toh-pt2#显示这些英雄\n - tutorial/toh-pt2#查看最终代码\n - tutorial/toh-pt2#查看详情\n - tutorial/toh-pt2#添加-click-事件处理器\n - tutorial/toh-pt2#添加-click-事件绑定\n - tutorial/toh-pt2#添加详情区\n - tutorial/toh-pt2#给英雄列表美容\n - https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt2.md?message=docs%3A%20请简述你的修改...\n-->"
}