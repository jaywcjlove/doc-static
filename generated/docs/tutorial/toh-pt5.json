{
  "id": "tutorial/toh-pt5",
  "title": "Add in-app navigation with routing",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt5.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"add-in-app-navigation-with-routing\" translation-result=\"on\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-in-app-navigation-with-routing\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"add-in-app-navigation-with-routing\">Add in-app navigation with routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-in-app-navigation-with-routing\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">有一些《英雄指南》的新需求：</p><p translation-origin=\"off\">There are new requirements for the Tour of Heroes app:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 添加一个<em>仪表盘</em>视图。</p><p translation-origin=\"off\">Add a <em>Dashboard</em> view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 添加在<em>英雄列表</em>和<em>仪表盘</em>视图之间导航的能力。</p><p translation-origin=\"off\">Add the ability to navigate between the <em>Heroes</em> and <em>Dashboard</em> views.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 无论在哪个视图中点击一个英雄，都会导航到该英雄的详情页。</p><p translation-origin=\"off\">When users click a hero name in either view, navigate to a detail view of the selected hero.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 在邮件中点击一个<em>深链接</em>，会直接打开一个特定英雄的详情视图。</p><p translation-origin=\"off\">When users click a <em>deep link</em> in an email, open the detail view for a particular hero.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  要查看本页所讲的范例程序，参见<live-example></live-example>。</p><p translation-origin=\"off\">  For the sample app that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<p translation-result=\"on\">完成时，用户就能像这样在应用中导航：</p><p translation-origin=\"off\">When you’re done, users will be able to navigate the app like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/toh/nav-diagram.png\" alt=\"View navigations\" width=\"506\" height=\"433\">\n</div>\n<h2 id=\"add-the-approutingmodule\" translation-result=\"on\">添加 <code>AppRoutingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-approutingmodule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-the-approutingmodule\">Add the <code>AppRoutingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-approutingmodule\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中，最好在一个独立的顶层模块中加载和配置路由器，它专注于路由功能，然后由根模块 <code>AppModule</code> 导入它。</p><p translation-origin=\"off\">In Angular, the best practice is to load and configure the router in a separate, top-level module\nthat is dedicated to routing and imported by the root <code>AppModule</code>.</p>\n\n<p translation-result=\"on\">按照惯例，这个模块类的名字叫做 <code>AppRoutingModule</code>，并且位于 <code>src/app</code> 下的 <code>app-routing.module.ts</code> 文件中。</p><p translation-origin=\"off\">By convention, the module class name is <code>AppRoutingModule</code> and it belongs in the <code>app-routing.module.ts</code> in the <code>src/app</code> folder.</p>\n\n<p translation-result=\"on\">使用 CLI 生成它。</p><p translation-origin=\"off\">Use the CLI to generate it.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate module app-routing --flat --module=app\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>--flat</code> 把这个文件放进了 <code>src/app</code> 中，而不是单独的目录中。<br>\n<code>--module=app</code> 告诉 CLI 把它注册到 <code>AppModule</code> 的 <code>imports</code> 数组中。</p><p translation-origin=\"off\"><code>--flat</code> puts the file in <code>src/app</code> instead of its own folder.<br>\n<code>--module=app</code> tells the CLI to register it in the <code>imports</code> array of the <code>AppModule</code>.</p>\n\n</div>\n<p translation-result=\"on\">生成的文件是这样的：</p><p translation-origin=\"off\">The generated file looks like this:</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.0.ts\" header=\"src/app/app-routing.module.ts (generated)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p translation-result=\"on\">把它替换为如下代码：</p><p translation-origin=\"off\">Replace it with the following:</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.1.ts\" header=\"src/app/app-routing.module.ts (updated)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\nimport { HeroesComponent } from './heroes/heroes.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p translation-result=\"on\">首先，<code>AppRoutingModule</code> 会导入 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>，以便该应用具有路由功能。配置好路由后，接着导入 <code>HeroesComponent</code>，它将告诉路由器要去什么地方。</p><p translation-origin=\"off\">First, <code>AppRoutingModule</code> imports <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> and <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> so the app can have routing functionality. The next import, <code>HeroesComponent</code>, will give the Router somewhere to go once you configure the routes.</p>\n\n<p translation-result=\"on\">注意，对 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 的引用和 <code>declarations</code> 数组不是必要的，因此它们不再是 <code>AppRoutingModule</code> 的一部分。以下各节将详细介绍 <code>AppRoutingModule</code> 的其余部分。</p><p translation-origin=\"off\">Notice that the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> references and <code>declarations</code> array are unnecessary, so are no\nlonger part of <code>AppRoutingModule</code>. The following sections explain the rest of the <code>AppRoutingModule</code> in more detail.</p>\n\n<h3 id=\"routes\" translation-result=\"on\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"routes\">Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">该文件的下一部分是你的路由配置。\n<em>Routes</em> 告诉路由器，当用户单击链接或将 URL 粘贴进浏览器地址栏时要显示哪个视图。</p><p translation-origin=\"off\">The next part of the file is where you configure your routes.\n<em>Routes</em> tell the Router which view to display when a user clicks a link or\npastes a URL into the browser address bar.</p>\n\n<p translation-result=\"on\">由于 <code>AppRoutingModule</code> 已经导入了 <code>HeroesComponent</code>，因此你可以直接在 <code>routes</code> 数组中使用它：</p><p translation-origin=\"off\">Since <code>AppRoutingModule</code> already imports <code>HeroesComponent</code>, you can use it in the <code>routes</code> array:</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"heroes-route\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<p translation-result=\"on\">典型的 Angular <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 具有两个属性：</p><p translation-origin=\"off\">A typical Angular <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> has two properties:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>path</code>: 用来匹配浏览器地址栏中 URL 的字符串。</p><p translation-origin=\"off\"><code>path</code>: a string that matches the URL in the browser address bar.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>component</code>: 导航到该路由时，路由器应该创建的组件。</p><p translation-origin=\"off\"><code>component</code>: the component that the router should create when navigating to this route.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这会告诉路由器把该 URL 与 <code>path：'heroes'</code> 匹配。\n如果网址类似于 <code>localhost:4200/heroes</code> 就显示 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">This tells the router to match that URL to <code>path: 'heroes'</code>\nand display the <code>HeroesComponent</code> when the URL is something like <code>localhost:4200/heroes</code>.</p>\n\n<h3 id=\"routermoduleforroot\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routermoduleforroot\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据会初始化路由器，并开始监听浏览器地址的变化。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata initializes the router and starts it listening for browser location changes.</p>\n\n<p translation-result=\"on\">下面的代码行将 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到 <code>AppRoutingModule</code> 的 <code>imports</code> 数组中，同时通过调用 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 来用这些 <code>routes</code> 配置它：</p><p translation-origin=\"off\">The following line adds the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to the <code>AppRoutingModule</code> <code>imports</code> array and\nconfigures it with the <code>routes</code> in one step by calling\n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>:</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"ngmodule-imports\">\nimports: [ RouterModule.forRoot(routes) ],\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  这个方法之所以叫 <code>forRoot()</code>，是因为你要在应用的顶层配置这个路由器。\n<code>forRoot()</code> 方法会提供路由所需的服务提供者和指令，还会基于浏览器的当前 URL 执行首次导航。</p><p translation-origin=\"off\">  The method is called <code>forRoot()</code> because you configure the router at the application's root level.\nThe <code>forRoot()</code> method supplies the service providers and directives needed for routing,\nand performs the initial navigation based on the current browser URL.</p>\n\n</div>\n<p translation-result=\"on\">接下来，<code>AppRoutingModule</code> 导出 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，以便它在整个应用程序中生效。</p><p translation-origin=\"off\">Next, <code>AppRoutingModule</code> exports <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> so it will be available throughout the app.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts (exports array)\" region=\"export-routermodule\">\nexports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n\n</code-example>\n<h2 id=\"add-routeroutlet\" translation-result=\"on\">添加路由出口 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-routeroutlet\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-routeroutlet\">Add <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-routeroutlet\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">打开 <code>AppComponent</code> 的模板，把 <code>&#x3C;app-heroes></code> 元素替换为 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 元素。</p><p translation-origin=\"off\">Open the <code>AppComponent</code> template and replace the <code>&#x3C;app-heroes></code> element with a <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> element.</p>\n\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"outlet\" header=\"src/app/app.component.html (router-outlet)\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 的模板不再需要 <code>&#x3C;app-heroes></code>，因为只有当用户导航到这里时，才需要显示 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">The <code>AppComponent</code> template no longer needs <code>&#x3C;app-heroes></code> because the app will only display the <code>HeroesComponent</code> when the user navigates to it.</p>\n\n<p translation-result=\"on\"><code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 会告诉路由器要在哪里显示路由的视图。</p><p translation-origin=\"off\">The <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tells the router where to display routed views.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">能在 <code>AppComponent</code> 中使用 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，是因为 <code>AppModule</code> 导入了 <code>AppRoutingModule</code>，而 <code>AppRoutingModule</code> 中导出了 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。\n在本教程开始时你运行的那个 <code>ng generate</code> 命令添加了这个导入，是因为 <code>--module=app</code> 标志。如果你手动创建 <code>app-routing.module.ts</code> 或使用了 CLI 之外的工具，你就要把 <code>AppRoutingModule</code> 导入到 <code>app.module.ts</code> 中，并且把它添加到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 数组中。</p><p translation-origin=\"off\">The <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> is one of the router directives that became available to the <code>AppComponent</code>\nbecause <code>AppModule</code> imports <code>AppRoutingModule</code> which exported <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>. The <code>ng generate</code> command you ran at the start of this tutorial added this import because of the <code>--module=app</code> flag. If you manually created <code>app-routing.module.ts</code> or used a tool other than the CLI to do so, you'll need to import <code>AppRoutingModule</code> into <code>app.module.ts</code> and add it to the <code>imports</code> array of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n\n</div>\n<h4 id=\"try-it\" translation-result=\"on\">试试看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"try-it\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你的 CLI 命令应该仍在运行吧。</p><p translation-origin=\"off\">You should still be running with this CLI command.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng serve\n</code-example>\n<p translation-result=\"on\">浏览器应该刷新，并显示着应用的标题，但是没有显示英雄列表。</p><p translation-origin=\"off\">The browser should refresh and display the app title but not the list of heroes.</p>\n\n<p translation-result=\"on\">看看浏览器的地址栏。\nURL 是以 <code>/</code> 结尾的。\n而到 <code>HeroesComponent</code> 的路由路径是 <code>/heroes</code>。</p><p translation-origin=\"off\">Look at the browser's address bar.\nThe URL ends in <code>/</code>.\nThe route path to <code>HeroesComponent</code> is <code>/heroes</code>.</p>\n\n<p translation-result=\"on\">在地址栏中把 <code>/heroes</code> 追加到 URL 后面。你应该能看到熟悉的主从结构的英雄显示界面。</p><p translation-origin=\"off\">Append <code>/heroes</code> to the URL in the browser address bar.\nYou should see the familiar heroes master/detail view.</p>\n\n<a id=\"routerlink\"></a>\n<h2 id=\"add-a-navigation-link-routerlink\" translation-result=\"on\">添加路由链接 (<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-navigation-link-routerlink\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-a-navigation-link-routerlink\">Add a navigation link (<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-navigation-link-routerlink\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">理想情况下，用户应该能通过点击链接进行导航，而不用被迫把路由的 URL 粘贴到地址栏。</p><p translation-origin=\"off\">Ideally, users should be able to click a link to navigate rather\nthan pasting a route URL into the address bar.</p>\n\n<p translation-result=\"on\">添加一个 <code>&#x3C;nav></code> 元素，并在其中放一个链接 <code>&#x3C;a></code> 元素，当点击它时，就会触发一个到 <code>HeroesComponent</code> 的导航。\n修改过的 <code>AppComponent</code> 模板如下：</p><p translation-origin=\"off\">Add a <code>&#x3C;nav></code> element and, within that, an anchor element that, when clicked,\ntriggers navigation to the <code>HeroesComponent</code>.\nThe revised <code>AppComponent</code> template looks like this:</p>\n\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"heroes\" header=\"src/app/app.component.html (heroes RouterLink)\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-example>\n<p translation-result=\"on\"><a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code> 属性</a>的值为 <code>\"/heroes\"</code>，路由器会用它来匹配出指向 <code>HeroesComponent</code> 的路由。\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 是 <a href=\"/api/router/RouterLink\"><code>RouterLink</code> 指令</a>的选择器，它会把用户的点击转换为路由器的导航操作。\n它是 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中的另一个公共指令。</p><p translation-origin=\"off\">A <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code> attribute</a> is set to <code>\"/heroes\"</code>,\nthe string that the router matches to the route to <code>HeroesComponent</code>.\nThe <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> is the selector for the <a href=\"/api/router/RouterLink\"><code>RouterLink</code> directive</a>\nthat turns user clicks into router navigations.\nIt's another of the public directives in the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.</p>\n\n<p translation-result=\"on\">刷新浏览器，显示出了应用的标题和指向英雄列表的链接，但并没有显示英雄列表。</p><p translation-origin=\"off\">The browser refreshes and displays the app title and heroes link,\nbut not the heroes list.</p>\n\n<p translation-result=\"on\">点击这个链接。地址栏变成了 <code>/heroes</code>，并且显示出了英雄列表。</p><p translation-origin=\"off\">Click the link.\nThe address bar updates to <code>/heroes</code> and the list of heroes appears.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">从下面的 <a href=\"tutorial/toh-pt5#appcomponent\">最终代码</a>中把私有 CSS 样式添加到 <code>app.component.css</code> 中，可以让导航链接变得更好看一点。</p><p translation-origin=\"off\">Make this and future navigation links look better by adding private CSS styles to <code>app.component.css</code>\nas listed in the <a href=\"tutorial/toh-pt5#appcomponent\">final code review</a> below.</p>\n\n</div>\n<h2 id=\"add-a-dashboard-view\" translation-result=\"on\">添加仪表盘视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-dashboard-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-a-dashboard-view\">Add a dashboard view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-dashboard-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当有多个视图时，路由会更有价值。不过目前还只有一个英雄列表视图。</p><p translation-origin=\"off\">Routing makes more sense when there are multiple views.\nSo far there's only the heroes view.</p>\n\n<p translation-result=\"on\">使用 CLI 添加一个 <code>DashboardComponent</code>：</p><p translation-origin=\"off\">Add a <code>DashboardComponent</code> using the CLI:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component dashboard\n</code-example>\n<p translation-result=\"on\">CLI 生成了 <code>DashboardComponent</code> 的相关文件，并把它声明到 <code>AppModule</code> 中。</p><p translation-origin=\"off\">The CLI generates the files for the <code>DashboardComponent</code> and declares it in <code>AppModule</code>.</p>\n\n<p translation-result=\"on\">把这三个文件中的内容改成这样：</p><p translation-origin=\"off\">Replace the default file content in these three files as follows:</p>\n\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.1.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\na {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center;\n  margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #3f525c;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #eee;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad > [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">这个<em>模板</em>用来表示由英雄名字链接组成的一个阵列。</p><p translation-origin=\"off\">The  <em>template</em> presents a grid of hero name links.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 复写器为组件的 <code>heroes</code> 数组中的每个条目创建了一个链接。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater creates as many links as are in the component's <code>heroes</code> array.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 这些链接被 <code>dashboard.component.css</code> 中的样式格式化成了一些色块。</p><p translation-origin=\"off\">The links are styled as colored blocks by the <code>dashboard.component.css</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 这些链接还没有指向任何地方，但<a href=\"tutorial/toh-pt5#hero-details\">很快就会了</a>。</p><p translation-origin=\"off\">The links don't go anywhere yet but <a href=\"tutorial/toh-pt5#hero-details\">they will shortly</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这个<em>类</em>和 <code>HeroesComponent</code> 类很像。</p><p translation-origin=\"off\">The <em>class</em> is similar to the <code>HeroesComponent</code> class.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 它定义了一个 <code>heroes</code> 数组属性。</p><p translation-origin=\"off\">It defines a <code>heroes</code> array property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 它的构造函数希望 Angular 把 <code>HeroService</code> 注入到私有的 <code>heroService</code> 属性中。</p><p translation-origin=\"off\">The constructor expects Angular to inject the <code>HeroService</code> into a private <code>heroService</code> property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 在 <code>ngOnInit()</code> 生命周期钩子中调用 <code>getHeroes()</code>。</p><p translation-origin=\"off\">The <code>ngOnInit()</code> lifecycle hook calls <code>getHeroes()</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这个 <code>getHeroes()</code> 函数会截取第 2 到 第 5 位英雄，也就是说只返回四个顶层英雄（第二，第三，第四和第五）。</p><p translation-origin=\"off\">This <code>getHeroes()</code> returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).</p>\n\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\" header=\"src/app/dashboard/dashboard.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n}\n\n</code-example>\n<h3 id=\"add-the-dashboard-route\" translation-result=\"on\">添加仪表盘路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-dashboard-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-the-dashboard-route\">Add the dashboard route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-dashboard-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要导航到仪表盘，路由器中就需要一个相应的路由。</p><p translation-origin=\"off\">To navigate to the dashboard, the router needs an appropriate route.</p>\n\n<p translation-result=\"on\">把 <code>DashboardComponent</code> 导入到 <code>AppRoutingModule</code> 中。</p><p translation-origin=\"off\">Import the <code>DashboardComponent</code> in the <code>AppRoutingModule</code>.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-dashboard\" header=\"src/app/app-routing.module.ts (import DashboardComponent)\">\nimport { DashboardComponent }   from './dashboard/dashboard.component';\n\n</code-example>\n<p translation-result=\"on\">把一个指向 <code>DashboardComponent</code> 的路由添加到 <code>AppRoutingModule.routes</code> 数组中。</p><p translation-origin=\"off\">Add a route to the <code>AppRoutingModule.routes</code> array that matches a path to the <code>DashboardComponent</code>.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"dashboard-route\">\n{ path: 'dashboard', component: DashboardComponent },\n\n</code-example>\n<h3 id=\"add-a-default-route\" translation-result=\"on\">添加默认路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-default-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-default-route\">Add a default route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-default-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当应用启动时，浏览器的地址栏指向了网站的根路径。\n它没有匹配到任何现存路由，因此路由器也不会导航到任何地方。\n<code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 下方是空白的。</p><p translation-origin=\"off\">When the app starts, the browser's address bar points to the web site's root.\nThat doesn't match any existing route so the router doesn't navigate anywhere.\nThe space below the <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> is blank.</p>\n\n<p translation-result=\"on\">要让应用自动导航到这个仪表盘，请把下列路由添加到 <code>AppRoutingModule.Routes</code> 数组中。</p><p translation-origin=\"off\">To make the app navigate to the dashboard automatically, add the following\nroute to the <code>AppRoutingModule.Routes</code> array.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"redirect-route\">\n{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n</code-example>\n<p translation-result=\"on\">这个路由会把一个与空路径“完全匹配”的 URL 重定向到路径为 <code>'/dashboard'</code> 的路由。</p><p translation-origin=\"off\">This route redirects a URL that fully matches the empty path to the route whose path is <code>'/dashboard'</code>.</p>\n\n<p translation-result=\"on\">浏览器刷新之后，路由器加载了 <code>DashboardComponent</code>，并且浏览器的地址栏会显示出 <code>/dashboard</code> 这个 URL。</p><p translation-origin=\"off\">After the browser refreshes, the router loads the <code>DashboardComponent</code>\nand the browser address bar shows the <code>/dashboard</code> URL.</p>\n\n<h3 id=\"add-dashboard-link-to-the-shell\" translation-result=\"on\">把仪表盘链接添加到壳组件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-dashboard-link-to-the-shell\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-dashboard-link-to-the-shell\">Add dashboard link to the shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-dashboard-link-to-the-shell\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">应该允许用户通过点击页面顶部导航区的各个链接在 <code>DashboardComponent</code> 和 <code>HeroesComponent</code> 之间来回导航。</p><p translation-origin=\"off\">The user should be able to navigate back and forth between the\n<code>DashboardComponent</code> and the <code>HeroesComponent</code> by clicking links in the\nnavigation area near the top of the page.</p>\n\n<p translation-result=\"on\">把仪表盘的导航链接添加到壳组件 <code>AppComponent</code> 的模板中，就放在 <em>Heroes</em> 链接的前面。</p><p translation-origin=\"off\">Add a dashboard navigation link to the <code>AppComponent</code> shell template, just above the <em>Heroes</em> link.</p>\n\n<code-example path=\"toh-pt5/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-example>\n<p translation-result=\"on\">刷新浏览器，你就能通过点击这些链接在这两个视图之间自由导航了。</p><p translation-origin=\"off\">After the browser refreshes you can navigate freely between the two views by clicking the links.</p>\n\n<a id=\"hero-details\"></a>\n<h2 id=\"navigating-to-hero-details\" translation-result=\"on\">导航到英雄详情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#navigating-to-hero-details\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"navigating-to-hero-details\">Navigating to hero details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#navigating-to-hero-details\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 可以显示所选英雄的详情。\n此刻，<code>HeroDetailsComponent</code> 只能在 <code>HeroesComponent</code> 的底部看到。</p><p translation-origin=\"off\">The <code>HeroDetailsComponent</code> displays details of a selected hero.\nAt the moment the <code>HeroDetailsComponent</code> is only visible at the bottom of the <code>HeroesComponent</code></p>\n\n<p translation-result=\"on\">用户应该能通过三种途径看到这些详情。</p><p translation-origin=\"off\">The user should be able to get to these details in three ways.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">通过在仪表盘中点击某个英雄。</p><p translation-origin=\"off\">By clicking a hero in the dashboard.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">通过在英雄列表中点击某个英雄。</p><p translation-origin=\"off\">By clicking a hero in the heroes list.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">通过把一个“深链接” URL 粘贴到浏览器的地址栏中来指定要显示的英雄。</p><p translation-origin=\"off\">By pasting a \"deep link\" URL into the browser address bar that identifies the hero to display.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">在这一节，你将能导航到 <code>HeroDetailComponent</code>，并把它从 <code>HeroesComponent</code> 中解放出来。</p><p translation-origin=\"off\">In this section, you'll enable navigation to the <code>HeroDetailsComponent</code>\nand liberate it from the <code>HeroesComponent</code>.</p>\n\n<h3 id=\"delete-hero-details-from-heroescomponent\" translation-result=\"on\">从 <code>HeroesComponent</code> 中删除<em>英雄详情</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#delete-hero-details-from-heroescomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"delete-hero-details-from-heroescomponent\">Delete <em>hero details</em> from <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#delete-hero-details-from-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当用户在 <code>HeroesComponent</code> 中点击某个英雄条目时，应用应该能导航到 <code>HeroDetailComponent</code>，从英雄列表视图切换到英雄详情视图。\n英雄列表视图将不再显示，而英雄详情视图要显示出来。</p><p translation-origin=\"off\">When the user clicks a hero item in the <code>HeroesComponent</code>,\nthe app should navigate to the <code>HeroDetailComponent</code>,\nreplacing the heroes list view with the hero detail view.\nThe heroes list view should no longer show hero details as it does now.</p>\n\n<p translation-result=\"on\">打开 <code>HeroesComponent</code> 的模板文件（<code>heroes/heroes.component.html</code>），并从底部删除 <code>&#x3C;app-hero-detail></code> 元素。</p><p translation-origin=\"off\">Open the <code>HeroesComponent</code> template (<code>heroes/heroes.component.html</code>) and\ndelete the <code>&#x3C;app-hero-detail></code> element from the bottom.</p>\n\n<p translation-result=\"on\">目前，点击某个英雄条目还没有反应。不过当你启用了到 <code>HeroDetailComponent</code> 的路由之后，<a href=\"tutorial/toh-pt5#heroes-component-links\">很快就能修复它</a>。</p><p translation-origin=\"off\">Clicking a hero item now does nothing.\nYou'll <a href=\"tutorial/toh-pt5#heroes-component-links\">fix that shortly</a> after you enable routing to the <code>HeroDetailComponent</code>.</p>\n\n<h3 id=\"add-a-hero-detail-route\" translation-result=\"on\">添加<em>英雄详情</em>视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-hero-detail-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-hero-detail-route\">Add a <em>hero detail</em> route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-hero-detail-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要导航到 <code>id</code> 为 <code>11</code> 的英雄的<em>详情</em>视图，类似于 <code>~/detail/11</code> 的 URL 将是一个不错的 URL。</p><p translation-origin=\"off\">A URL like <code>~/detail/11</code> would be a good URL for navigating to the <em>Hero Detail</em> view of the hero whose <code>id</code> is <code>11</code>.</p>\n\n<p translation-result=\"on\">打开 <code>AppRoutingModule</code> 并导入 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">Open <code>AppRoutingModule</code> and import <code>HeroDetailComponent</code>.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-herodetail\" header=\"src/app/app-routing.module.ts (import HeroDetailComponent)\">\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\n</code-example>\n<p translation-result=\"on\">然后把一个<em>参数化</em>路由添加到 <code>AppRoutingModule.routes</code> 数组中，它要匹配指向<em>英雄详情</em>视图的路径。</p><p translation-origin=\"off\">Then add a <em>parameterized</em> route to the <code>AppRoutingModule.routes</code> array that matches the path pattern to the <em>hero detail</em> view.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"detail-route\">\n{ path: 'detail/:id', component: HeroDetailComponent },\n\n</code-example>\n<p translation-result=\"on\"><code>path</code> 中的冒号（<code>:</code>）表示 <code>:id</code> 是一个占位符，它表示某个特定英雄的 <code>id</code>。</p><p translation-origin=\"off\">The colon (:) in the <code>path</code> indicates that <code>:id</code> is a placeholder for a specific hero <code>id</code>.</p>\n\n<p translation-result=\"on\">此刻，应用中的所有路由都就绪了。</p><p translation-origin=\"off\">At this point, all application routes are in place.</p>\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"routes\" header=\"src/app/app-routing.module.ts (all routes)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<h3 id=\"dashboardcomponent-hero-links\" translation-result=\"on\"><code>DashboardComponent</code> 中的英雄链接<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"dashboardcomponent-hero-links\"><code>DashboardComponent</code> hero links<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">此刻，<code>DashboardComponent</code> 中的英雄连接还没有反应。</p><p translation-origin=\"off\">The <code>DashboardComponent</code> hero links do nothing at the moment.</p>\n\n<p translation-result=\"on\">路由器已经有一个指向 <code>HeroDetailComponent</code> 的路由了，\n修改仪表盘中的英雄连接，让它们通过参数化的英雄详情路由进行导航。</p><p translation-origin=\"off\">Now that the router has a route to <code>HeroDetailComponent</code>,\nfix the dashboard hero links to navigate via the <em>parameterized</em> dashboard route.</p>\n\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.html\" region=\"click\" header=\"src/app/dashboard/dashboard.component.html (hero links)\">\n&#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n    <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n  &#x3C;div class=\"module hero\">\n    &#x3C;h4>{{hero.name}}&#x3C;/h4>\n  &#x3C;/div>\n&#x3C;/a>\n\n</code-example>\n<p translation-result=\"on\">你正在 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 复写器中使用 Angular 的<a href=\"guide/template-syntax#interpolation\">插值绑定</a>来把当前迭代的 <code>hero.id</code> 插入到每个 <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code></a> 中。</p><p translation-origin=\"off\">You're using Angular <a href=\"guide/template-syntax#interpolation\">interpolation binding</a> within the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater\nto insert the current iteration's <code>hero.id</code> into each\n<a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code></a>.</p>\n\n<a id=\"heroes-component-links\"></a>\n<h3 id=\"heroescomponent-hero-links\" translation-result=\"on\"><code>HeroesComponent</code> 中的英雄链接<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"heroescomponent-hero-links\"><code>HeroesComponent</code> hero links<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 中的这些英雄条目都是 <code>&#x3C;li></code> 元素，它们的点击事件都绑定到了组件的 <code>onSelect()</code> 方法中。</p><p translation-origin=\"off\">The hero items in the <code>HeroesComponent</code> are <code>&#x3C;li></code> elements whose click events\nare bound to the component's <code>onSelect()</code> method.</p>\n\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (list with onSelect)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-result=\"on\">清理 <code>&#x3C;li></code>，只保留它的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，把徽章（<code>&#x3C;badge></code>）和名字包裹进一个 <code>&#x3C;a></code> 元素中，\n并且像仪表盘的模板中那样为这个 <code>&#x3C;a></code> 元素添加一个 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 属性。</p><p translation-origin=\"off\">Strip the <code>&#x3C;li></code> back to just its <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>,\nwrap the badge and name in an anchor element (<code>&#x3C;a></code>),\nand add a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute to the anchor that\nis the same as in the dashboard template</p>\n\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (list with links)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-result=\"on\">你还要修改私有样式表（<code>heroes.component.css</code>），让列表恢复到以前的外观。\n修改后的样式表参见本指南底部的<a href=\"tutorial/toh-pt5#heroescomponent\">最终代码</a>。</p><p translation-origin=\"off\">You'll have to fix the private stylesheet (<code>heroes.component.css</code>) to make\nthe list look as it did before.\nRevised styles are in the <a href=\"tutorial/toh-pt5#heroescomponent\">final code review</a> at the bottom of this guide.</p>\n\n<h4 id=\"remove-dead-code-optional\" translation-result=\"on\">移除死代码（可选）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#remove-dead-code-optional\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"remove-dead-code-optional\">Remove dead code (optional)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#remove-dead-code-optional\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">虽然 <code>HeroesComponent</code> 类仍然能正常工作，但 <code>onSelect()</code> 方法和 <code>selectedHero</code> 属性已经没用了。</p><p translation-origin=\"off\">While the <code>HeroesComponent</code> class still works,\nthe <code>onSelect()</code> method and <code>selectedHero</code> property are no longer used.</p>\n\n<p translation-result=\"on\">最好清理掉它们，将来你会体会到这么做的好处。\n下面是删除了死代码之后的类。</p><p translation-origin=\"off\">It's nice to tidy up and you'll be grateful to yourself later.\nHere's the class after pruning away the dead code.</p>\n\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.ts\" region=\"class\" header=\"src/app/heroes/heroes.component.ts (cleaned up)\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n</code-example>\n<h2 id=\"routable-herodetailcomponent\" translation-result=\"on\">支持路由的 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routable-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"routable-herodetailcomponent\">Routable <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routable-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">以前，父组件 <code>HeroesComponent</code> 会设置 <code>HeroDetailComponent.hero</code> 属性，然后 <code>HeroDetailComponent</code> 就会显示这个英雄。</p><p translation-origin=\"off\">Previously, the parent <code>HeroesComponent</code> set the <code>HeroDetailComponent.hero</code>\nproperty and the <code>HeroDetailComponent</code> displayed the hero.</p>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 已经不会再那么做了。\n现在，当路由器会在响应形如 <code>~/detail/11</code> 的 URL 时创建 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\"><code>HeroesComponent</code> doesn't do that anymore.\nNow the router creates the <code>HeroDetailComponent</code> in response to a URL such as <code>~/detail/11</code>.</p>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 需要从一种新的途径获取<em>要显示的英雄</em>。\n本节会讲解如下操作：</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> needs a new way to obtain the hero-to-display.\nThis section explains the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 获取创建本组件的路由</p><p translation-origin=\"off\">Get the route that created it</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 从这个路由中提取出 <code>id</code></p><p translation-origin=\"off\">Extract the <code>id</code> from the route</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 通过 <code>HeroService</code> 从服务器上获取具有这个 <code>id</code> 的英雄数据。</p><p translation-origin=\"off\">Acquire the hero with that <code>id</code> from the server via the <code>HeroService</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">先添加下列导入语句：</p><p translation-origin=\"off\">Add the following imports:</p>\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"added-imports\" header=\"src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { HeroService }  from '../hero.service';\n\n</code-example>\n<a id=\"hero-detail-ctor\"></a>\n<p translation-result=\"on\">然后把 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>、<code>HeroService</code> 和 <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服务注入到构造函数中，将它们的值保存到私有变量里：</p><p translation-origin=\"off\">Inject the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, <code>HeroService</code>, and <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> services\ninto the constructor, saving their values in private fields:</p>\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private heroService: HeroService,\n  private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n) {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a> 保存着到这个 <code>HeroDetailComponent</code> 实例的路由信息。\n这个组件对从 URL 中提取的路由参数感兴趣。\n其中的 <code>id</code> 参数就是要显示的英雄的 <code>id</code>。</p><p translation-origin=\"off\">The <a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a> holds information about the route to this instance of the <code>HeroDetailComponent</code>.\nThis component is interested in the route's parameters extracted from the URL.\nThe \"id\" parameter is the <code>id</code> of the hero to display.</p>\n\n<p translation-result=\"on\"><a href=\"tutorial/toh-pt4\"><code>HeroService</code></a> 从远端服务器获取英雄数据，本组件将使用它来获取要显示的英雄。</p><p translation-origin=\"off\">The <a href=\"tutorial/toh-pt4\"><code>HeroService</code></a> gets hero data from the remote server\nand this component will use it to get the hero-to-display.</p>\n\n<p translation-result=\"on\"><a href=\"api/common/Location\"><code>location</code></a> 是一个 Angular 的服务，用来与浏览器打交道。\n<a href=\"tutorial/toh-pt5#goback\">稍后</a>，你就会使用它来导航回上一个视图。</p><p translation-origin=\"off\">The <a href=\"api/common/Location\"><code>location</code></a> is an Angular service for interacting with the browser.\nYou'll use it <a href=\"tutorial/toh-pt5#goback\">later</a> to navigate back to the view that navigated here.</p>\n\n<h3 id=\"extract-the-id-route-parameter\" translation-result=\"on\">从路由参数中提取 <code>id</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#extract-the-id-route-parameter\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"extract-the-id-route-parameter\">Extract the <code>id</code> route parameter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#extract-the-id-route-parameter\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>ngOnInit()</code> <a href=\"guide/lifecycle-hooks#oninit\">生命周期钩子</a>\n中调用 <code>getHero()</code>，代码如下：</p><p translation-origin=\"off\">In the <code>ngOnInit()</code> <a href=\"guide/lifecycle-hooks#oninit\">lifecycle hook</a>\ncall <code>getHero()</code> and define it as follows.</p>\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"ngOnInit\">\nngOnInit(): void {\n  this.getHero();\n}\n\ngetHero(): void {\n  const id = +this.route.snapshot.paramMap.get('id');\n  this.heroService.getHero(id)\n    .subscribe(hero => this.hero = hero);\n}\n\n</code-example>\n<p translation-result=\"on\"><code>route.snapshot</code> 是一个路由信息的静态快照，抓取自组件刚刚创建完毕之后。</p><p translation-origin=\"off\">The <code>route.snapshot</code> is a static image of the route information shortly after the component was created.</p>\n\n<p translation-result=\"on\"><code>paramMap</code> 是一个从 URL 中提取的路由参数值的字典。\n<code>\"id\"</code> 对应的值就是要获取的英雄的 <code>id</code>。</p><p translation-origin=\"off\">The <code>paramMap</code> is a dictionary of route parameter values extracted from the URL.\nThe <code>\"id\"</code> key returns the <code>id</code> of the hero to fetch.</p>\n\n<p translation-result=\"on\">路由参数总会是字符串。\nJavaScript 的 (+) 操作符会把字符串转换成数字，英雄的 <code>id</code> 就是数字类型。</p><p translation-origin=\"off\">Route parameters are always strings.\nThe JavaScript (+) operator converts the string to a number,\nwhich is what a hero <code>id</code> should be.</p>\n\n<p translation-result=\"on\">刷新浏览器，应用挂了。出现一个编译错误，因为 <code>HeroService</code> 没有一个名叫 <code>getHero()</code> 的方法。\n这就添加它。</p><p translation-origin=\"off\">The browser refreshes and the app crashes with a compiler error.\n<code>HeroService</code> doesn't have a <code>getHero()</code> method.\nAdd it now.</p>\n\n<h3 id=\"add-heroservicegethero\" translation-result=\"on\">添加 <code>HeroService.getHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-heroservicegethero\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-heroservicegethero\">Add <code>HeroService.getHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-heroservicegethero\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">添加 <code>HeroService</code>，并在 <code>getHeroes()</code> 后面添加如下的 <code>getHero()</code> 方法，它接收 <code>id</code> 参数：</p><p translation-origin=\"off\">Open <code>HeroService</code> and add the following <code>getHero()</code> method with the <code>id</code> after the <code>getHeroes()</code> method:</p>\n\n<code-example path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\" header=\"src/app/hero.service.ts (getHero)\">\ngetHero(id: number): Observable&#x3C;Hero> {\n  // TODO: send the message _after_ fetching the hero\n  this.messageService.add(`HeroService: fetched hero id=${id}`);\n  return of(HEROES.find(hero => hero.id === id));\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">注意，反引号 ( ` ) 用于定义 JavaScript 的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">模板字符串字面量</a>，以便嵌入 <code>id</code>。</p><p translation-origin=\"off\">Note the backticks ( ` ) that define a JavaScript\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"><em>template literal</em></a> for embedding the <code>id</code>.</p>\n\n</div>\n<p translation-result=\"on\">像 <a href=\"tutorial/toh-pt4#observable-heroservice\"><code>getHeroes()</code></a> 一样，<code>getHero()</code> 也有一个异步函数签名。\n它用 RxJS 的 <code>of()</code> 函数返回一个 <code>Observable</code> 形式的<em>模拟英雄数据</em>。</p><p translation-origin=\"off\">Like <a href=\"tutorial/toh-pt4#observable-heroservice\"><code>getHeroes()</code></a>,\n<code>getHero()</code> has an asynchronous signature.\nIt returns a <em>mock hero</em> as an <code>Observable</code>, using the RxJS <code>of()</code> function.</p>\n\n<p translation-result=\"on\">你将来可以用一个真实的 <code>Http</code> 请求来重新实现 <code>getHero()</code>，而不用修改调用了它的 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">You'll be able to re-implement <code>getHero()</code> as a real <code>Http</code> request\nwithout having to change the <code>HeroDetailComponent</code> that calls it.</p>\n\n<h4 id=\"try-it-1\" translation-result=\"on\">试试看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it-1\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"try-it-1\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it-1\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">刷新浏览器，应用又恢复正常了。\n你可以在仪表盘或英雄列表中点击一个英雄来导航到该英雄的详情视图。</p><p translation-origin=\"off\">The browser refreshes and the app is working again.\nYou can click a hero in the dashboard or in the heroes list and navigate to that hero's detail view.</p>\n\n<p translation-result=\"on\">如果你在浏览器的地址栏中粘贴了 <code>localhost:4200/detail/11</code>，路由器也会导航到 <code>id: 11</code> 的英雄（\"Dr. Nice\"）的详情视图。</p><p translation-origin=\"off\">If you paste <code>localhost:4200/detail/11</code> in the browser address bar,\nthe router navigates to the detail view for the hero with <code>id: 11</code>,  \"Dr Nice\".</p>\n\n<a id=\"goback\"></a>\n<h3 id=\"find-the-way-back\" translation-result=\"on\">回到原路<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#find-the-way-back\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"find-the-way-back\">Find the way back<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#find-the-way-back\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">通过点击浏览器的后退按钮，你可以回到英雄列表或仪表盘视图，这取决于你从哪里进入的详情视图。</p><p translation-origin=\"off\">By clicking the browser's back button,\nyou can go back to the hero list or dashboard view,\ndepending upon which sent you to the detail view.</p>\n\n<p translation-result=\"on\">如果能在 <code>HeroDetail</code> 视图中也有这么一个按钮就更好了。</p><p translation-origin=\"off\">It would be nice to have a button on the <code>HeroDetail</code> view that can do that.</p>\n\n<p translation-result=\"on\">把一个<em>后退</em>按钮添加到组件模板的底部，并且把它绑定到组件的 <code>goBack()</code> 方法。</p><p translation-origin=\"off\">Add a <em>go back</em> button to the bottom of the component template and bind it\nto the component's <code>goBack()</code> method.</p>\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\" region=\"back-button\" header=\"src/app/hero-detail/hero-detail.component.html (back button)\">\n&#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">在组件类中添加一个 <code>goBack()</code> 方法，利用<a href=\"tutorial/toh-pt5#hero-detail-ctor\">你以前注入的</a> <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服务在浏览器的历史栈中后退一步。</p><p translation-origin=\"off\">Add a <code>goBack()</code> <em>method</em> to the component class that navigates backward one step\nin the browser's history stack\nusing the <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> service that you <a href=\"tutorial/toh-pt5#hero-detail-ctor\">injected previously</a>.</p>\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"goBack\" header=\"src/app/hero-detail/hero-detail.component.ts (goBack)\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n<p translation-result=\"on\">刷新浏览器，并开始点击。\n用户能在应用中导航：从仪表盘到英雄详情再回来，从英雄列表到 mini 版英雄详情到英雄详情，再回到英雄列表。</p><p translation-origin=\"off\">Refresh the browser and start clicking.\nUsers can navigate around the app, from the dashboard to hero details and back,\nfrom heroes list to the mini detail to the hero details and back to the heroes again.</p>\n\n<h2 id=\"final-code-review\" translation-result=\"on\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本页讨论的代码文件如下。</p><p translation-origin=\"off\">Here are the code files discussed on this page.</p>\n\n<a id=\"approutingmodule\"></a>\n<a id=\"appmodule\"></a>\n<h4 id=\"approutingmodule-appmodule-and-heroservice\" translation-result=\"on\"><code>AppRoutingModule</code>、<code>AppModule</code> 和 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"approutingmodule-appmodule-and-heroservice\"><code>AppRoutingModule</code>, <code>AppModule</code>, and <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-tabs>\n  <code-pane header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt5/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { MessagesComponent }    from './messages/messages.component';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt5/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&#x3C;Hero[]> {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number): Observable&#x3C;Hero> {\n    // TODO: send the message _after_ fetching the hero\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(HEROES.find(hero => hero.id === id));\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"appcomponent\"></a>\n<h4 id=\"appcomponent\"><code>AppComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#appcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.component.css\" path=\"toh-pt5/src/app/app.component.css\">\n/* AppComponent's private CSS styles */\nh1 {\n  font-size: 1.2em;\n  margin-bottom: 0;\n}\nh2 {\n  font-size: 2em;\n  margin-top: 0;\n  padding-top: 0;\n}\nnav a {\n  padding: 5px 10px;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #eee;\n  border-radius: 4px;\n}\nnav a:visited, a:link {\n  color: #334953;\n}\nnav a:hover {\n  color: #039be5;\n  background-color: #cfd8dc;\n}\nnav a.active {\n  color: #039be5;\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"dashboardcomponent\"></a>\n<h4 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\na {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center;\n  margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #3f525c;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #eee;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad > [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt5/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt5/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  position: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes a:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color:#405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero => this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.css\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  display: inline-block;\n  width: 3em;\n  margin: .5em 0;\n  color: #607D8B;\n  font-weight: bold;\n}\ninput {\n  height: 2em;\n  font-size: 1em;\n  padding-left: .4em;\n}\nbutton {\n  margin-top: 20px;\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 添加了 Angular <em>路由器</em>在各个不同组件之间导航。</p><p translation-origin=\"off\">You added the Angular router to navigate among different components.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你使用一些 <code>&#x3C;a></code> 链接和一个 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 把 <code>AppComponent</code> 转换成了一个导航用的壳组件。</p><p translation-origin=\"off\">You turned the <code>AppComponent</code> into a navigation shell with <code>&#x3C;a></code> links and a <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你在 <code>AppRoutingModule</code> 中配置了路由器。</p><p translation-origin=\"off\">You configured the router in an <code>AppRoutingModule</code> </p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你定义了一些简单路由、一个重定向路由和一个参数化路由。</p><p translation-origin=\"off\">You defined simple routes, a redirect route, and a parameterized route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你在 <code>&#x3C;a></code> 元素中使用了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</p><p translation-origin=\"off\">You used the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive in anchor elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你把一个紧耦合的主从视图重构成了带路由的详情视图。</p><p translation-origin=\"off\">You refactored a tightly-coupled master/detail view into a routed detail view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你使用路由链接参数来导航到所选英雄的详情视图。</p><p translation-origin=\"off\">You used router link parameters to navigate to the detail view of a user-selected hero.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 在多个组件之间共享了 <code>HeroService</code> 服务。</p><p translation-origin=\"off\">You shared the <code>HeroService</code> among multiple components.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - /api/router/RouterLink\n - api/common/CommonModule\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/lifecycle-hooks#oninit\n - guide/template-syntax#interpolation\n - tutorial/toh-pt4\n - tutorial/toh-pt4#observable-heroservice\n - tutorial/toh-pt5#add-a-dashboard-view\n - tutorial/toh-pt5#add-a-default-route\n - tutorial/toh-pt5#add-a-hero-detail-route\n - tutorial/toh-pt5#add-a-navigation-link-routerlink\n - tutorial/toh-pt5#add-dashboard-link-to-the-shell\n - tutorial/toh-pt5#add-heroservicegethero\n - tutorial/toh-pt5#add-in-app-navigation-with-routing\n - tutorial/toh-pt5#add-routeroutlet\n - tutorial/toh-pt5#add-the-approutingmodule\n - tutorial/toh-pt5#add-the-dashboard-route\n - tutorial/toh-pt5#appcomponent\n - tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\n - tutorial/toh-pt5#dashboardcomponent\n - tutorial/toh-pt5#dashboardcomponent-hero-links\n - tutorial/toh-pt5#delete-hero-details-from-heroescomponent\n - tutorial/toh-pt5#extract-the-id-route-parameter\n - tutorial/toh-pt5#final-code-review\n - tutorial/toh-pt5#find-the-way-back\n - tutorial/toh-pt5#goback\n - tutorial/toh-pt5#hero-detail-ctor\n - tutorial/toh-pt5#hero-details\n - tutorial/toh-pt5#herodetailcomponent\n - tutorial/toh-pt5#heroes-component-links\n - tutorial/toh-pt5#heroescomponent\n - tutorial/toh-pt5#heroescomponent-hero-links\n - tutorial/toh-pt5#navigating-to-hero-details\n - tutorial/toh-pt5#remove-dead-code-optional\n - tutorial/toh-pt5#routable-herodetailcomponent\n - tutorial/toh-pt5#routerlink\n - tutorial/toh-pt5#routermoduleforroot\n - tutorial/toh-pt5#routes\n - tutorial/toh-pt5#summary\n - tutorial/toh-pt5#try-it\n - tutorial/toh-pt5#try-it-1\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n - https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt5.md?message=docs%3A%20请简述你的修改...\n-->"
}