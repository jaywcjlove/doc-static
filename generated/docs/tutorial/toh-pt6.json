{
  "id": "tutorial/toh-pt6",
  "title": "Get data from a server",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt6.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"get-data-from-a-server\" translation-result=\"on\">从服务端获取数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-data-from-a-server\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"get-data-from-a-server\">Get data from a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-data-from-a-server\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">在这节课中，你将借助 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来添加一些数据持久化特性。</p><p translation-origin=\"off\">In this tutorial, you'll add the following data persistence features with help from\nAngular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>HeroService</code> 通过 HTTP 请求获取英雄数据。</p><p translation-origin=\"off\">The <code>HeroService</code> gets hero data with HTTP requests.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用户可以添加、编辑和删除英雄，并通过 HTTP 来保存这些更改。</p><p translation-origin=\"off\">Users can add, edit, and delete heroes and save these changes over HTTP.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用户可以根据名字搜索英雄。</p><p translation-origin=\"off\">Users can search for heroes by name.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  要查看本页所讲的范例程序，参见<live-example></live-example>。</p><p translation-origin=\"off\">  For the sample app that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"enable-http-services\" translation-result=\"on\">启用 HTTP 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"enable-http-services\">Enable HTTP services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 是 Angular 通过 HTTP 与远程服务器通讯的机制。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is Angular's mechanism for communicating with a remote server over HTTP.</p>\n\n<p translation-result=\"on\">要让 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在应用中随处可用，需要两个步骤。首先，用导入语句把它添加到根模块 <code>AppModule</code> 中：</p><p translation-origin=\"off\">Make <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> available everywhere in the app in two steps. First, add it to the root <code>AppModule</code> by importing it:</p>\n\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-http-client\" header=\"src/app/app.module.ts (HttpClientModule import)\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> }    from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p translation-result=\"on\">接下来，仍然在 <code>AppModule</code> 中，把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 添加到 <code>imports</code> 数组中：</p><p translation-origin=\"off\">Next, still in the <code>AppModule</code>, add <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to the <code>imports</code> array:</p>\n\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-httpclientmodule\" header=\"src/app/app.module.ts (imports array excerpt)\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n})\n\n</code-example>\n<h2 id=\"simulate-a-data-server\" translation-result=\"on\">模拟数据服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"simulate-a-data-server\">Simulate a data server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">这个教学例子会与一个使用 <a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\">内存 Web API（<em>In-memory Web API</em>）</a> 模拟出的远程数据服务器通讯。</p><p translation-origin=\"off\">This tutorial sample mimics communication with a remote data server by using the\n<a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\">In-memory Web API</a> module.</p>\n\n<p translation-result=\"on\">安装完这个模块之后，应用将会通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来发起请求和接收响应，而不用在乎实际上是这个内存 Web API 在拦截这些请求、操作一个内存数据库，并且给出仿真的响应。</p><p translation-origin=\"off\">After installing the module, the app will make requests to and receive responses from the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>\nwithout knowing that the <em>In-memory Web API</em> is intercepting those requests,\napplying them to an in-memory data store, and returning simulated responses.</p>\n\n<p translation-result=\"on\">通过使用内存 Web API，你不用架设服务器就可以学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 了。</p><p translation-origin=\"off\">By using the In-memory Web API, you won't have to set up a server to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>重要：</strong> 这个<em>内存 Web API</em> 模块与 Angular 中的 HTTP 模块无关。</p><p translation-origin=\"off\"><strong>Important:</strong> the In-memory Web API module has nothing to do with HTTP in Angular.</p>\n\n<p translation-result=\"on\">如果你只是在<em>阅读</em>本教程来学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，那么可以<a href=\"tutorial/toh-pt6#import-heroes\">跳过</a>这一步。\n如果你正在随着本教程<em>敲代码</em>，那就留下来，并加上这个<em>内存 Web API</em>。</p><p translation-origin=\"off\">If you're just reading this tutorial to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you can <a href=\"tutorial/toh-pt6#import-heroes\">skip over</a> this step.\nIf you're coding along with this tutorial, stay here and add the In-memory Web API now.</p>\n\n</div>\n<p translation-result=\"on\">用如下命令从 <code>npm</code> 中安装这个<em>内存 Web API</em> 包（译注：请使用 0.5+ 的版本，不要使用 0.4-）</p><p translation-origin=\"off\">Install the In-memory Web API package from npm with the following command:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install angular-in-memory-web-api --save\n</code-example>\n<p translation-result=\"on\">在 <code>AppModule</code> 中，导入 <code>HttpClientInMemoryWebApiModule</code> 和 <code>InMemoryDataService</code> 类，稍后你将创建它们。</p><p translation-origin=\"off\">In the <code>AppModule</code>, import the <code>HttpClientInMemoryWebApiModule</code> and the <code>InMemoryDataService</code> class,\nwhich you will create in a moment.</p>\n\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\" header=\"src/app/app.module.ts (In-memory Web API imports)\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\n</code-example>\n<p translation-result=\"on\">在 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 之后，将 <code>HttpClientInMemoryWebApiModule</code> 添加到 <code>AppModule</code> 的 <code>imports</code> 数组中，并以 <code>InMemoryDataService</code> 为参数对其进行配置。</p><p translation-origin=\"off\">After the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>, add the <code>HttpClientInMemoryWebApiModule</code>\nto the <code>AppModule</code> <code>imports</code> array and configure it with the <code>InMemoryDataService</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/app.module.ts\" header=\"src/app/app.module.ts (imports array excerpt)\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when a real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p translation-result=\"on\"><code>forRoot()</code> 配置方法接收一个 <code>InMemoryDataService</code> 类来初始化内存数据库。</p><p translation-origin=\"off\">The <code>forRoot()</code> configuration method takes an <code>InMemoryDataService</code> class\nthat primes the in-memory database.</p>\n\n<p translation-result=\"on\">使用以下命令生成类 <code>src/app/in-memory-data.service.ts</code>：</p><p translation-origin=\"off\">Generate the class <code>src/app/in-memory-data.service.ts</code> with the following command:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service InMemoryData\n</code-example>\n<p translation-result=\"on\">将 <code>in-memory-data.service.ts</code> 改为以下内容：</p><p translation-origin=\"off\">Replace the default contents of <code>in-memory-data.service.ts</code> with the following:</p>\n\n<code-example path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\" header=\"src/app/in-memory-data.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Dr Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>in-memory-data.service.ts</code> 文件已代替了 <code>mock-heroes.ts</code> 文件，现在后者可以安全的删除了。</p><p translation-origin=\"off\">The <code>in-memory-data.service.ts</code> file will take over the function of <code>mock-heroes.ts</code>.\nHowever, don't delete <code>mock-heroes.ts</code> yet, as you still need it for a few more steps of this tutorial.</p>\n\n<p translation-result=\"on\">等服务器就绪后，你就可以抛弃这个内存 Web API，应用的请求将直接传给服务器。</p><p translation-origin=\"off\">When the server is ready, you'll detach the In-memory Web API, and the app's requests will go through to the server.</p>\n\n<a id=\"import-heroes\"></a>\n<h2 id=\"heroes-and-http\" translation-result=\"on\">英雄与 HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"heroes-and-http\">Heroes and HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 <code>HeroService</code> 中，导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 和 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>：</p><p translation-origin=\"off\">In the <code>HeroService</code>, import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> and <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>:</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\" header=\"src/app/hero.service.ts (import HTTP symbols)\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p translation-result=\"on\">仍然在 <code>HeroService</code> 中，把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到构造函数中一个名叫 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 的私有属性中。</p><p translation-origin=\"off\">Still in the <code>HeroService</code>, inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the constructor in a private property called <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p translation-result=\"on\">注意保留对 <code>MessageService</code> 的注入，但是因为你将频繁调用它，因此请把它包裹进一个私有的 <code>log</code> 方法中。</p><p translation-origin=\"off\">Notice that you keep injecting the <code>MessageService</code> but since you'll call it so frequently, wrap it in a private <code>log()</code> method:</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"log\">\n/** Log a HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add(`HeroService: ${message}`);\n}\n\n</code-example>\n<p translation-result=\"on\">把服务器上英雄数据资源的访问地址 <code>heroesURL</code> 定义为 <code>:base/:collectionName</code> 的形式。\n这里的 <code>base</code> 是要请求的资源，而 <code>collectionName</code> 是 <code>in-memory-data-service.ts</code> 中的英雄数据对象。</p><p translation-origin=\"off\">Define the <code>heroesUrl</code> of the form <code>:base/:collectionName</code> with the address of the heroes resource on the server.\nHere <code>base</code> is the resource to which requests are made,\nand <code>collectionName</code> is the heroes data object in the <code>in-memory-data-service.ts</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\n</code-example>\n<h3 id=\"get-heroes-with-httpclient\" translation-result=\"on\">通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"get-heroes-with-httpclient\">Get heroes with <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当前的 <code>HeroService.getHeroes()</code> 使用 RxJS 的 <code>of()</code> 函数来把模拟英雄数据返回为 <code>Observable&#x3C;Hero[]></code> 格式。</p><p translation-origin=\"off\">The current <code>HeroService.getHeroes()</code>\nuses the RxJS <code>of()</code> function to return an array of mock heroes\nas an <code>Observable&#x3C;Hero[]></code>.</p>\n\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\" header=\"src/app/hero.service.ts (getHeroes with RxJs &#x27;of()&#x27;)\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return of(HEROES);\n}\n\n</code-example>\n<p translation-result=\"on\">把该方法转换成使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的，代码如下：</p><p translation-origin=\"off\">Convert that method to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> as follows:</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"getHeroes-1\">\n/** GET heroes from the server */\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n}\n\n</code-example>\n<p translation-result=\"on\">刷新浏览器后，英雄数据就会从模拟服务器被成功读取。</p><p translation-origin=\"off\">Refresh the browser. The hero data should successfully load from the\nmock server.</p>\n\n<p translation-result=\"on\">你用 <code>http.get()</code> 替换了 <code>of()</code>，没有做其它修改，但是应用仍然在正常工作，这是因为这两个函数都返回了 <code>Observable&#x3C;Hero[]></code>。</p><p translation-origin=\"off\">You've swapped <code>of()</code> for <code>http.get()</code> and the app keeps working without any other changes\nbecause both functions return an <code>Observable&#x3C;Hero[]></code>.</p>\n\n<h3 id=\"httpclient-methods-return-one-value\" translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法返回单个值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclient-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"httpclient-methods-return-one-value\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return one value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclient-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">所有的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法都会返回某个值的 RxJS <code>Observable</code>。</p><p translation-origin=\"off\">All <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return an RxJS <code>Observable</code> of something.</p>\n\n<p translation-result=\"on\">HTTP 是一个请求/响应式协议。你发起请求，它返回单个的响应。</p><p translation-origin=\"off\">HTTP is a request/response protocol.\nYou make a request, it returns a single response.</p>\n\n<p translation-result=\"on\">通常，<code>Observable</code> <em>可以</em>在一段时间内返回多个值。\n但来自 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 <code>Observable</code> 总是发出一个值，然后结束，再也不会发出其它值。</p><p translation-origin=\"off\">In general, an observable <em>can</em> return multiple values over time.\nAn observable from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> always emits a single value and then completes, never to emit again.</p>\n\n<p translation-result=\"on\">具体到这次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 调用，它返回一个 <code>Observable&#x3C;Hero[]></code>，也就是“一个英雄数组的可观察对象”。在实践中，它也只会返回一个英雄数组。</p><p translation-origin=\"off\">This particular <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> call returns an <code>Observable&#x3C;Hero[]></code>; that is, \"<em>an observable of hero arrays</em>\". In practice, it will only return a single hero array.</p>\n\n<h3 id=\"httpclientget-returns-response-data\" translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回响应数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"httpclientget-returns-response-data\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns response data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 默认情况下把响应体当做无类型的 JSON 对象进行返回。\n如果指定了可选的模板类型 <code>&#x3C;Hero[]></code>，就会给返回你一个类型化的对象。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns the body of the response as an untyped JSON object by default.\nApplying the optional type specifier, <code>&#x3C;Hero[]></code> , adds TypeScript capabilities, which reduce errors during compile time.</p>\n\n<p translation-result=\"on\">服务器的数据 API 决定了 JSON 数据的具体形态。\n<em>英雄指南</em>的数据 API 会把英雄数据作为一个数组进行返回。</p><p translation-origin=\"off\">The server's data API determines the shape of the JSON data.\nThe <em>Tour of Heroes</em> data API returns the hero data as an array.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">其它 API 可能在返回对象中深埋着你想要的数据。\n你可能要借助 RxJS 的 <code>map()</code> 操作符对 <code>Observable</code> 的结果进行处理，以便把这些数据挖掘出来。</p><p translation-origin=\"off\">Other APIs may bury the data that you want within an object.\nYou might have to dig that data out by processing the <code>Observable</code> result\nwith the RxJS <code>map()</code> operator.</p>\n\n<p translation-result=\"on\">虽然不打算在此展开讨论，不过你可以到范例源码中的 <code>getHeroNo404()</code> 方法中找到一个使用 <code>map()</code> 操作符的例子。</p><p translation-origin=\"off\">Although not discussed here, there's an example of <code>map()</code> in the <code>getHeroNo404()</code>\nmethod included in the sample source code.</p>\n\n</div>\n<h3 id=\"error-handling\" translation-result=\"on\">错误处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"error-handling\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">凡事皆会出错，特别是当你从远端服务器获取数据的时候。\n<code>HeroService.getHeroes()</code> 方法应该捕获错误，并做适当的处理。</p><p translation-origin=\"off\">Things go wrong, especially when you're getting data from a remote server.\nThe <code>HeroService.getHeroes()</code> method should catch errors and do something appropriate.</p>\n\n<p translation-result=\"on\">要捕获错误，你就要使用 RxJS 的 <code>catchError()</code> 操作符来<strong>建立对 Observable 结果的处理管道（pipe）</strong>。</p><p translation-origin=\"off\">To catch errors, you <strong>\"pipe\" the observable</strong> result from <code>http.get()</code> through an RxJS <code>catchError()</code> operator.</p>\n\n<p translation-result=\"on\">从 <code>rxjs/operators</code> 中导入 <code>catchError</code> 符号，以及你稍后将会用到的其它操作符。</p><p translation-origin=\"off\">Import the <code>catchError</code> symbol from <code>rxjs/operators</code>, along with some other operators you'll need later.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p translation-result=\"on\">现在，使用 <code>pipe()</code> 方法来扩展 <code>Observable</code> 的结果，并给它一个 <code>catchError()</code> 操作符。</p><p translation-origin=\"off\">Now extend the observable result with the <code>pipe()</code> method and\ngive it a <code>catchError()</code> operator.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\" header=\"src/app/hero.service.ts\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\"><code>catchError()</code> 操作符会拦截<strong>失败的 <code>Observable</code></strong>。\n它把错误对象传给<em>错误处理器</em>，<em>错误处理器</em>会处理这个错误。</p><p translation-origin=\"off\">The <code>catchError()</code> operator intercepts an <strong><code>Observable</code> that failed</strong>.\nIt passes the error an error handler that can do what it wants with the error.</p>\n\n<p translation-result=\"on\">下面的 <code>handleError()</code> 方法会报告这个错误，并返回一个无害的结果（安全值），以便应用能正常工作。</p><p translation-origin=\"off\">The following <code>handleError()</code> method reports the error and then returns an\ninnocuous result so that the application keeps working.</p>\n\n<h4 id=\"handleerror\"><code>handleError</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#handleerror\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">下面这个 <code>handleError()</code> 将会在很多 <code>HeroService</code> 的方法之间共享，所以要把它通用化，以支持这些彼此不同的需求。</p><p translation-origin=\"off\">The following <code>handleError()</code> will be shared by many <code>HeroService</code> methods\nso it's generalized to meet their different needs.</p>\n\n<p translation-result=\"on\">它不再直接处理这些错误，而是返回给 <code>catchError</code> 返回一个错误处理函数。还要用操作名和出错时要返回的安全值来对这个错误处理函数进行配置。</p><p translation-origin=\"off\">Instead of handling the error directly, it returns an error handler function to <code>catchError</code> that it\nhas configured with both the name of the operation that failed and a safe return value.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle Http operation that failed.\n * Let the app continue.\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError&#x3C;T>(operation = 'operation', result?: T) {\n  return (error: any): Observable&#x3C;T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p translation-result=\"on\">在控制台中汇报了这个错误之后，这个处理器会汇报一个用户友好的消息，并给应用返回一个安全值，让应用继续工作。</p><p translation-origin=\"off\">After reporting the error to the console, the handler constructs\na user friendly message and returns a safe value to the app so the app can keep working.</p>\n\n<p translation-result=\"on\">因为每个服务方法都会返回不同类型的 <code>Observable</code> 结果，因此 <code>handleError()</code> 也需要一个类型参数，以便它返回一个此类型的安全值，正如应用所期望的那样。</p><p translation-origin=\"off\">Because each service method returns a different kind of <code>Observable</code> result,\n<code>handleError()</code> takes a type parameter so it can return the safe value as the type that the app expects.</p>\n\n<h3 id=\"tap-into-the-observable\" translation-result=\"on\">窥探 <code>Observable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"tap-into-the-observable\">Tap into the Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroService</code> 的方法将会窥探 <code>Observable</code> 的数据流，并通过 <code>log()</code> 方法往页面底部发送一条消息。</p><p translation-origin=\"off\">The <code>HeroService</code> methods will <strong>tap</strong> into the flow of observable values\nand send a message, via the <code>log()</code> method, to the message area at the bottom of the page.</p>\n\n<p translation-result=\"on\">它们可以使用 RxJS 的 <code>tap()</code> 操作符来实现，该操作符会查看 Observable 中的值，使用那些值做一些事情，并且把它们传出来。\n这种 <code>tap()</code> 回调不会改变这些值本身。</p><p translation-origin=\"off\">They'll do that with the RxJS <code>tap()</code> operator,\nwhich looks at the observable values, does something with those values,\nand passes them along.\nThe <code>tap()</code> call back doesn't touch the values themselves.</p>\n\n<p translation-result=\"on\">下面是 <code>getHeroes()</code> 的最终版本，它使用 <code>tap()</code> 来记录各种操作。</p><p translation-origin=\"off\">Here is the final version of <code>getHeroes()</code> with the <code>tap()</code> that logs the operation.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      tap(_ => this.log('fetched heroes')),\n      catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 id=\"get-hero-by-id\" translation-result=\"on\">通过 id 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"get-hero-by-id\">Get hero by id<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">大多数的 Web API 都支持以 <code>:baseURL/:id</code> 的形式根据 id 进行获取。</p><p translation-origin=\"off\">Most web APIs support a <em>get by id</em> request in the form <code>:baseURL/:id</code>.</p>\n\n<p translation-result=\"on\">这里的 <code>baseURL</code> 就是在 <a href=\"tutorial/toh-pt6#heroes-and-http\">英雄列表与 HTTP</a> 部分定义过的 <code>heroesURL</code>（<code>api/heroes</code>）。而 <code>id</code> 则是你要获取的英雄的编号，比如，<code>api/heroes/11</code>。\n把 <code>HeroService.getHero()</code> 方法改成这样，以发起该请求：</p><p translation-origin=\"off\">Here, the <em>base URL</em> is the <code>heroesURL</code> defined in the <a href=\"tutorial/toh-pt6#heroes-and-http\">Heroes and HTTP</a> section (<code>api/heroes</code>) and <em>id</em> is\nthe number of the hero that you want to retrieve. For example, <code>api/heroes/11</code>.\nUpdate the <code>HeroService</code> <code>getHero()</code> method with the following to make that request:</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\" header=\"src/app/hero.service.ts\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&#x3C;Hero>(url).pipe(\n    tap(_ => this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">这里和 <code>getHeroes()</code> 相比有三个显著的差异:</p><p translation-origin=\"off\">There are three significant differences from  <code>getHeroes()</code>:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>getHero()</code> 使用想获取的英雄的 id 构造了一个请求 URL。</p><p translation-origin=\"off\"><code>getHero()</code> constructs a request URL with the desired hero's id.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 服务器应该使用单个英雄作为回应，而不是一个英雄数组。</p><p translation-origin=\"off\">The server should respond with a single hero rather than an array of heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  所以，<code>getHero()</code> 会返回 <code>Observable&#x3C;Hero></code>（“一个可观察的<em>单个英雄对象</em>”），而不是一个可观察的英雄对象<em>数组</em>。</p><p translation-origin=\"off\"><code>getHero()</code> returns an <code>Observable&#x3C;Hero></code> (\"<em>an observable of Hero objects</em>\")\nrather than an observable of hero <em>arrays</em> .</p>\n\n</li>\n</ul>\n<h2 id=\"update-heroes\" translation-result=\"on\">修改英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"update-heroes\">Update heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在<em>英雄详情</em>视图中编辑英雄的名字。\n随着输入，英雄的名字也跟着在页面顶部的标题区更新了。\n但是当你点击“后退”按钮时，这些修改都丢失了。</p><p translation-origin=\"off\">Edit a hero's name in the hero detail view.\nAs you type, the hero name updates the heading at the top of the page.\nBut when you click the \"go back button\", the changes are lost.</p>\n\n<p translation-result=\"on\">如果你希望保留这些修改，就要把它们写回到服务器。</p><p translation-origin=\"off\">If you want changes to persist, you must write them back to\nthe server.</p>\n\n<p translation-result=\"on\">在英雄详情模板的底部添加一个保存按钮，它绑定了一个 <code>click</code> 事件，事件绑定会调用组件中一个名叫 <code>save()</code> 的新方法：</p><p translation-origin=\"off\">At the end of the hero detail template, add a save button with a <code>click</code> event\nbinding that invokes a new component method named <code>save()</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\" header=\"src/app/hero-detail/hero-detail.component.html (save)\">\n&#x3C;button (click)=\"save()\">save&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">在 <code>HeroDetail</code> 组件类中，添加如下的 <code>save()</code> 方法，它使用英雄服务中的 <code>updateHero()</code> 方法来保存对英雄名字的修改，然后导航回前一个视图。</p><p translation-origin=\"off\">In the <code>HeroDetail</code> component class, add the following <code>save()</code> method, which persists hero name changes using the hero service\n<code>updateHero()</code> method and then navigates back to the previous view.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\" header=\"src/app/hero-detail/hero-detail.component.ts (save)\">\nsave(): void {\n  this.heroService.updateHero(this.hero)\n    .subscribe(() => this.goBack());\n}\n\n</code-example>\n<h4 id=\"add-heroserviceupdatehero\" translation-result=\"on\">添加 <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"add-heroserviceupdatehero\">Add <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>updateHero()</code> 的总体结构和 <code>getHeroes()</code> 很相似，但它会使用 <code>http.put()</code> 来把修改后的英雄保存到服务器上。\n把下列代码添加进 <code>HeroService</code>。</p><p translation-origin=\"off\">The overall structure of the <code>updateHero()</code> method is similar to that of\n<code>getHeroes()</code>, but it uses <code>http.put()</code> to persist the changed hero\non the server. Add the following to the <code>HeroService</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\" header=\"src/app/hero.service.ts (update)\">\n/** PUT: update the hero on the server */\nupdateHero(hero: Hero): Observable&#x3C;any> {\n  return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap(_ => this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&#x3C;any>('updateHero'))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 方法接受三个参数：</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> method takes three parameters:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> URL 地址</p><p translation-origin=\"off\">the URL</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 要修改的数据（这里就是修改后的英雄）</p><p translation-origin=\"off\">the data to update (the modified hero in this case)</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 选项</p><p translation-origin=\"off\">options</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">URL 没变。英雄 Web API 通过英雄对象的 <code>id</code> 就可以知道要修改哪个英雄。</p><p translation-origin=\"off\">The URL is unchanged. The heroes web API knows which hero to update by looking at the hero's <code>id</code>.</p>\n\n<p translation-result=\"on\">英雄 Web API 期待在保存时的请求中有一个特殊的头。\n这个头是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定义的。</p><p translation-origin=\"off\">The heroes web API expects a special header in HTTP save requests.\nThat header is in the <code>httpOptions</code> constant defined in the <code>HeroService</code>. Add the following to the <code>HeroService</code> class.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\" header=\"src/app/hero.service.ts\">\nhttpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p translation-result=\"on\">刷新浏览器，修改英雄名，保存这些修改。在 <code>HeroDetailComponent</code> 的 <code>save()</code> 方法中导航到前一个视图。\n现在，改名后的英雄已经显示在列表中了。</p><p translation-origin=\"off\">Refresh the browser, change a hero name and save your change. The <code>save()</code>\nmethod in <code>HeroDetailComponent</code> navigates to the previous view.\nThe hero now appears in the list with the changed name.</p>\n\n<h2 id=\"add-a-new-hero\" translation-result=\"on\">添加新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-a-new-hero\">Add a new hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要添加英雄，本应用中只需要英雄的名字。你可以使用一个和添加按钮成对的 <code>&#x3C;input></code> 元素。</p><p translation-origin=\"off\">To add a hero, this app only needs the hero's name. You can use an <code>&#x3C;input></code>\nelement paired with an add button.</p>\n\n<p translation-result=\"on\">把下列代码插入到 <code>HeroesComponent</code> 模板中标题的紧后面：</p><p translation-origin=\"off\">Insert the following into the <code>HeroesComponent</code> template, just after\nthe heading:</p>\n\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\" header=\"src/app/heroes/heroes.component.html (add)\">\n&#x3C;div>\n  &#x3C;label>Hero name:\n    &#x3C;input #heroName />\n  &#x3C;/label>\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    add\n  &#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">当点击事件触发时，调用组件的点击处理器（<code>add()</code>），然后清空这个输入框，以便用来输入另一个名字。把下列代码添加到 <code>HeroesComponent</code> 类：</p><p translation-origin=\"off\">In response to a click event, call the component's click handler, <code>add()</code>, and then\nclear the input field so that it's ready for another name. Add the following to the\n<code>HeroesComponent</code> class:</p>\n\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\" header=\"src/app/heroes/heroes.component.ts (add)\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero => {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p translation-result=\"on\">当指定的名字非空时，这个处理器会用这个名字创建一个类似于 <code>Hero</code> 的对象（只缺少 <code>id</code> 属性），并把它传给服务的 <code>addHero()</code> 方法。</p><p translation-origin=\"off\">When the given name is non-blank, the handler creates a <code>Hero</code>-like object\nfrom the name (it's only missing the <code>id</code>) and passes it to the services <code>addHero()</code> method.</p>\n\n<p translation-result=\"on\">当 <code>addHero()</code> 保存成功时，<code>subscribe()</code> 的回调函数会收到这个新英雄，并把它追加到 <code>heroes</code> 列表中以供显示。</p><p translation-origin=\"off\">When <code>addHero()</code> saves successfully, the <code>subscribe()</code> callback\nreceives the new hero and pushes it into to the <code>heroes</code> list for display.</p>\n\n<p translation-result=\"on\">往 <code>HeroService</code> 类中添加 <code>addHero()</code> 方法。</p><p translation-origin=\"off\">Add the following <code>addHero()</code> method to the <code>HeroService</code> class.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\" header=\"src/app/hero.service.ts (addHero)\">\n/** POST: add a new hero to the server */\naddHero(hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n    catchError(this.handleError&#x3C;Hero>('addHero'))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\"><code>addHero()</code> 和 <code>updateHero()</code> 有两点不同。</p><p translation-origin=\"off\"><code>addHero()</code> differs from <code>updateHero()</code> in two ways:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 它调用 <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 而不是 <code>put()</code>。</p><p translation-origin=\"off\">It calls <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> instead of <code>put()</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   它期待服务器为这个新的英雄生成一个 id，然后把它通过 <code>Observable&#x3C;Hero></code> 返回给调用者。</p><p translation-origin=\"off\">It expects the server to generate an id for the new hero,\nwhich it returns in the <code>Observable&#x3C;Hero></code> to the caller.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">刷新浏览器，并添加一些英雄。</p><p translation-origin=\"off\">Refresh the browser and add some heroes.</p>\n\n<h2 id=\"delete-a-hero\" translation-result=\"on\">删除某个英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"delete-a-hero\">Delete a hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">英雄列表中的每个英雄都有一个删除按钮。</p><p translation-origin=\"off\">Each hero in the heroes list should have a delete button.</p>\n\n<p translation-result=\"on\">把下列按钮（<code>button</code>）元素添加到 <code>HeroesComponent</code> 的模板中，就在每个 <code>&#x3C;li></code> 元素中的英雄名字后方。</p><p translation-origin=\"off\">Add the following button element to the <code>HeroesComponent</code> template, after the hero\nname in the repeated <code>&#x3C;li></code> element.</p>\n\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" header=\"src/app/heroes/heroes.component.html\" region=\"delete\">\n&#x3C;button class=\"delete\" title=\"delete hero\"\n  (click)=\"delete(hero)\">x&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">英雄列表的 HTML 应该是这样的：</p><p translation-origin=\"off\">The HTML for the list of heroes should look like this:</p>\n\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (list of heroes)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n    &#x3C;button class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-result=\"on\">要把删除按钮定位在每个英雄条目的最右边，就要往 <code>heroes.component.css</code> 中添加一些 CSS。你可以在下方的 <a href=\"tutorial/toh-pt6#heroescomponent\">最终代码</a> 中找到这些 CSS。</p><p translation-origin=\"off\">To position the delete button at the far right of the hero entry,\nadd some CSS to the <code>heroes.component.css</code>. You'll find that CSS\nin the <a href=\"tutorial/toh-pt6#heroescomponent\">final review code</a> below.</p>\n\n<p translation-result=\"on\">把 <code>delete()</code> 处理器添加到组件中。</p><p translation-origin=\"off\">Add the <code>delete()</code> handler to the component class.</p>\n\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\" header=\"src/app/heroes/heroes.component.ts (delete)\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h => h !== hero);\n  this.heroService.deleteHero(hero).subscribe();\n}\n\n</code-example>\n<p translation-result=\"on\">虽然这个组件把删除英雄的逻辑委托给了 <code>HeroService</code>，但仍保留了更新它自己的英雄列表的职责。\n组件的 <code>delete()</code> 方法会在 <code>HeroService</code> 对服务器的操作成功之前，先从列表中移除<em>要删除的英雄</em>。</p><p translation-origin=\"off\">Although the component delegates hero deletion to the <code>HeroService</code>,\nit remains responsible for updating its own list of heroes.\nThe component's <code>delete()</code> method immediately removes the <em>hero-to-delete</em> from that list,\nanticipating that the <code>HeroService</code> will succeed on the server.</p>\n\n<p translation-result=\"on\">组件与 <code>heroService.delete()</code> 返回的 <code>Observable</code> 还完全没有关联。<strong>必须订阅它</strong>。</p><p translation-origin=\"off\">There's really nothing for the component to do with the <code>Observable</code> returned by\n<code>heroService.delete()</code> <strong>but it must subscribe anyway</strong>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">  如果你忘了调用 <code>subscribe()</code>，本服务将不会把这个删除请求发送给服务器。\n作为一条通用的规则，<code>Observable</code> 在有人订阅之前<em>什么都不会做</em>。</p><p translation-origin=\"off\">  If you neglect to <code>subscribe()</code>, the service will not send the delete request to the server.\nAs a rule, an <code>Observable</code> <em>does nothing</em> until something subscribes.</p>\n\n<p translation-result=\"on\">  你可以暂时删除 <code>subscribe()</code> 来确认这一点。点击“Dashboard”，然后点击“Heroes”，就又看到完整的英雄列表了。</p><p translation-origin=\"off\">  Confirm this for yourself by temporarily removing the <code>subscribe()</code>,\nclicking \"Dashboard\", then clicking \"Heroes\".\nYou'll see the full list of heroes again.</p>\n\n</div>\n<p translation-result=\"on\">接下来，把 <code>deleteHero()</code> 方法添加到 <code>HeroService</code> 中，代码如下。</p><p translation-origin=\"off\">Next, add a <code>deleteHero()</code> method to <code>HeroService</code> like this.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\" header=\"src/app/hero.service.ts (delete)\">\n/** DELETE: delete the hero from the server */\ndeleteHero(hero: Hero | <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a>): Observable&#x3C;Hero> {\n  const id = typeof hero === 'number' ? hero : hero.id;\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&#x3C;Hero>(url, this.httpOptions).pipe(\n    tap(_ => this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>('deleteHero'))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">注意</p><p translation-origin=\"off\">Note the following key points:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>deleteHero()</code> 调用了 <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code>。</p><p translation-origin=\"off\"><code>deleteHero()</code> calls <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> URL 就是英雄的资源 URL 加上要删除的英雄的 <code>id</code>。</p><p translation-origin=\"off\">The URL is the heroes resource URL plus the <code>id</code> of the hero to delete.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你不用像 <code>put()</code> 和 <code>post()</code> 中那样发送任何数据。</p><p translation-origin=\"off\">You don't send data as you did with <code>put()</code> and <code>post()</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你仍要发送 <code>httpOptions</code>。</p><p translation-origin=\"off\">You still send the <code>httpOptions</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">刷新浏览器，并试一下这个新的删除功能。</p><p translation-origin=\"off\">Refresh the browser and try the new delete functionality.</p>\n\n<h2 id=\"search-by-name\" translation-result=\"on\">根据名字搜索<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"search-by-name\">Search by name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在最后一次练习中，你要学到把 <code>Observable</code> 的操作符串在一起，让你能将相似 HTTP 请求的数量最小化，并节省网络带宽。</p><p translation-origin=\"off\">In this last exercise, you learn to chain <code>Observable</code> operators together\nso you can minimize the number of similar HTTP requests\nand consume network bandwidth economically.</p>\n\n<p translation-result=\"on\">你将往<em>仪表盘</em>中加入<em>英雄搜索</em>特性。\n当用户在搜索框中输入名字时，你会不断发送根据名字过滤英雄的 HTTP 请求。\n你的目标是仅仅发出尽可能少的必要请求。</p><p translation-origin=\"off\">You will add a heroes search feature to the Dashboard.\nAs the user types a name into a search box,\nyou'll make repeated HTTP requests for heroes filtered by that name.\nYour goal is to issue only as many requests as necessary.</p>\n\n<h4 id=\"heroservicesearchheroes\"><code>HeroService.searchHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservicesearchheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">先把 <code>searchHeroes()</code> 方法添加到 <code>HeroService</code> 中。</p><p translation-origin=\"off\">Start by adding a <code>searchHeroes()</code> method to the <code>HeroService</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\" header=\"src/app/hero.service.ts\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  if (!term.trim()) {\n    // if not search term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&#x3C;Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n    tap(x => x.length ?\n       this.log(`found heroes matching \"${term}\"`) :\n       this.log(`no heroes matching \"${term}\"`)),\n    catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">如果没有搜索词，该方法立即返回一个空数组。\n剩下的部分和 <code>getHeroes()</code> 很像。\n唯一的不同点是 URL，它包含了一个由搜索词组成的查询字符串。</p><p translation-origin=\"off\">The method returns immediately with an empty array if there is no search term.\nThe rest of it closely resembles <code>getHeroes()</code>, the only significant difference being\nthe URL, which includes a query string with the search term.</p>\n\n<h3 id=\"add-search-to-the-dashboard\" translation-result=\"on\">为仪表盘添加搜索功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-search-to-the-dashboard\">Add search to the Dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">打开 <code>DashboardComponent</code> 的模板并且把用于搜索英雄的元素 <code>&#x3C;app-hero-search></code> 添加到代码的底部。</p><p translation-origin=\"off\">Open the <code>DashboardComponent</code> template and\nadd the hero search element, <code>&#x3C;app-hero-search></code>, to the bottom of the markup.</p>\n\n<code-example path=\"toh-pt6/src/app/dashboard/dashboard.component.html\" header=\"src/app/dashboard/dashboard.component.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-example>\n<p translation-result=\"on\">这个模板看起来很像 <code>HeroesComponent</code> 模板中的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 复写器。</p><p translation-origin=\"off\">This template looks a lot like the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater in the <code>HeroesComponent</code> template.</p>\n\n<p translation-result=\"on\">为此，下一步就是添加一个组件，它的选择器要能匹配 <code>&#x3C;app-hero-search></code>。</p><p translation-origin=\"off\">For this to work, the next step is to add a component with a selector that matches <code>&#x3C;app-hero-search></code>.</p>\n\n<h3 id=\"create-herosearchcomponent\" translation-result=\"on\">创建 <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"create-herosearchcomponent\">Create <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用 CLI 创建一个 <code>HeroSearchComponent</code>。</p><p translation-origin=\"off\">Create a <code>HeroSearchComponent</code> with the CLI.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-search\n</code-example>\n<p translation-result=\"on\">CLI 生成了 <code>HeroSearchComponent</code> 的三个文件，并把该组件添加到了 <code>AppModule</code> 的声明中。</p><p translation-origin=\"off\">The CLI generates the three <code>HeroSearchComponent</code> files and adds the component to the <code>AppModule</code> declarations.</p>\n\n<p translation-result=\"on\">把生成的 <code>HeroSearchComponent</code> 的<em>模板</em>改成一个 <code>&#x3C;input></code> 和一个匹配到的搜索结果的列表。代码如下：</p><p translation-origin=\"off\">Replace the generated <code>HeroSearchComponent</code> template with an <code>&#x3C;input></code> and a list of matching search results, as follows.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" header=\"src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>&#x3C;label for=\"search-box\">Hero Search&#x3C;/label>&#x3C;/h4>\n\n  &#x3C;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n      &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/a>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\">从下面的 <a href=\"tutorial/toh-pt6#herosearchcomponent\">最终代码</a> 中把私有 CSS 样式添加到 <code>hero-search.component.css</code> 中。</p><p translation-origin=\"off\">Add private CSS styles to <code>hero-search.component.css</code>\nas listed in the <a href=\"tutorial/toh-pt6#herosearchcomponent\">final code review</a> below.</p>\n\n<p translation-result=\"on\">当用户在搜索框中输入时，一个 <em>keyup</em> 事件绑定会调用该组件的 <code>search()</code> 方法，并传入新的搜索框的值。</p><p translation-origin=\"off\">As the user types in the search box, an input event binding calls the\ncomponent's <code>search()</code> method with the new search box value.</p>\n\n<a id=\"asyncpipe\"></a>\n<h3 id=\"asyncpipe\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#asyncpipe\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 会重复渲染这些英雄对象。注意，<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 在一个名叫 <code>heroes$</code> 的列表上迭代，而不是 <code>heroes</code>。<code>$</code> 是一个约定，表示 <code>heroes$</code> 是一个 <code>Observable</code> 而不是数组。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeats hero objects. Notice that the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over a list called <code>heroes$</code>, not <code>heroes</code>. The <code>$</code> is a convention that indicates <code>heroes$</code> is an <code>Observable</code>, not an array.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" header=\"src/app/hero-search/hero-search.component.html\" region=\"async\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n\n</code-example>\n<p translation-result=\"on\">由于 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 不能直接使用 <code>Observable</code>，所以要使用一个管道字符（<code>|</code>），后面紧跟着一个 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>。这表示 Angular 的 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 管道，它会自动订阅 <code>Observable</code>，这样你就不用在组件类中这么做了。</p><p translation-origin=\"off\">Since <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> can't do anything with an <code>Observable</code>, use the\npipe character (<code>|</code>) followed by <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>. This identifies Angular's <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> and subscribes to an <code>Observable</code> automatically so you won't have to\ndo so in the component class.</p>\n\n<h3 id=\"edit-the-herosearchcomponent-class\" translation-result=\"on\">修正 <code>HeroSearchComponent</code> 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#edit-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"edit-the-herosearchcomponent-class\">Edit the <code>HeroSearchComponent</code> class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#edit-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">修改所生成的 <code>HeroSearchComponent</code> 类及其元数据，代码如下：</p><p translation-origin=\"off\">Replace the generated <code>HeroSearchComponent</code> class and metadata as follows.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" header=\"src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">注意，<code>heroes$</code> 声明为一个 <code>Observable</code></p><p translation-origin=\"off\">Notice the declaration of <code>heroes$</code> as an <code>Observable</code>:</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" header=\"src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\nheroes$: Observable&#x3C;Hero[]>;\n\n</code-example>\n<p translation-result=\"on\">你将会在 <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a> 中设置它，在此之前，先仔细看看 <code>searchTerms</code> 的定义。</p><p translation-origin=\"off\">You'll set it in <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a>.\nBefore you do, focus on the definition of <code>searchTerms</code>.</p>\n\n<h3 id=\"the-searchterms-rxjs-subject\" translation-result=\"on\">RxJS <code>Subject</code> 类型的 <code>searchTerms</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-searchterms-rxjs-subject\">The <code>searchTerms</code> RxJS subject<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>searchTerms</code> 属性是 RxJS 的 <code>Subject</code> 类型。</p><p translation-origin=\"off\">The <code>searchTerms</code> property is an RxJS <code>Subject</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" header=\"src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&#x3C;string>();\n\n// Push a search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p translation-result=\"on\"><code>Subject</code> 既是可观察对象的数据源，本身也是 <code>Observable</code>。\n你可以像订阅任何 <code>Observable</code> 一样订阅 <code>Subject</code>。</p><p translation-origin=\"off\">A <code>Subject</code> is both a source of observable values and an <code>Observable</code> itself.\nYou can subscribe to a <code>Subject</code> as you would any <code>Observable</code>.</p>\n\n<p translation-result=\"on\">你还可以通过调用它的 <code>next(value)</code> 方法往 <code>Observable</code> 中推送一些值，就像 <code>search()</code> 方法中一样。</p><p translation-origin=\"off\">You can also push values into that <code>Observable</code> by calling its <code>next(value)</code> method\nas the <code>search()</code> method does.</p>\n\n<p translation-result=\"on\">文本框的 <code>input</code> 事件的<em>事件绑定</em>会调用 <code>search()</code> 方法。</p><p translation-origin=\"off\">The event binding to the textbox's <code>input</code> event calls the <code>search()</code> method.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" header=\"src/app/hero-search/hero-search.component.html\" region=\"input\">\n&#x3C;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n</code-example>\n<p translation-result=\"on\">每当用户在文本框中输入时，这个事件绑定就会使用文本框的值（搜索词）调用 <code>search()</code> 函数。\n<code>searchTerms</code> 变成了一个能发出搜索词的稳定的流。</p><p translation-origin=\"off\">Every time the user types in the textbox, the binding calls <code>search()</code> with the textbox value, a \"search term\".\nThe <code>searchTerms</code> becomes an <code>Observable</code> emitting a steady stream of search terms.</p>\n\n<a id=\"search-pipe\"></a>\n<h3 id=\"chaining-rxjs-operators\" translation-result=\"on\">串联 RxJS 操作符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"chaining-rxjs-operators\">Chaining RxJS operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果每当用户击键后就直接调用 <code>searchHeroes()</code> 将导致创建海量的 HTTP 请求，浪费服务器资源并干扰数据调度计划。</p><p translation-origin=\"off\">Passing a new search term directly to the <code>searchHeroes()</code> after every user keystroke would create an excessive amount of HTTP requests,\ntaxing server resources and burning through data plans.</p>\n\n<p translation-result=\"on\">应该怎么做呢？<code>ngOnInit()</code> 往 <code>searchTerms</code> 这个可观察对象的处理管道中加入了一系列 RxJS 操作符，用以缩减对 <code>searchHeroes()</code> 的调用次数，并最终返回一个可及时给出英雄搜索结果的可观察对象（每次都是 <code>Hero[]</code> ）。</p><p translation-origin=\"off\">Instead, the <code>ngOnInit()</code> method pipes the <code>searchTerms</code> observable through a sequence of RxJS operators that reduce the number of calls to the <code>searchHeroes()</code>,\nultimately returning an observable of timely hero search results (each a <code>Hero[]</code>).</p>\n\n<p translation-result=\"on\">代码如下：</p><p translation-origin=\"off\">Here's a closer look at the code.</p>\n\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" header=\"src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as previous term\n  distinctUntilChanged(),\n\n  // switch to new search observable each time the term changes\n  switchMap((term: string) => this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<p translation-result=\"on\">各个操作符的工作方式如下：</p><p translation-origin=\"off\">Each operator works as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   在传出最终字符串之前，<code>debounceTime(300)</code> 将会等待，直到新增字符串的事件暂停了 300 毫秒。\n你实际发起请求的间隔永远不会小于 300ms。</p><p translation-origin=\"off\"><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds\nbefore passing along the latest string. You'll never make requests more frequently than 300ms.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>distinctUntilChanged()</code> 会确保只在过滤条件变化时才发送请求。</p><p translation-origin=\"off\"><code>distinctUntilChanged()</code> ensures that a request is sent only if the filter text changed.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>switchMap()</code> 会为每个从 <code>debounce()</code> 和 <code>distinctUntilChanged()</code> 中通过的搜索词调用搜索服务。\n它会取消并丢弃以前的搜索可观察对象，只保留最近的。</p><p translation-origin=\"off\"><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce()</code> and <code>distinctUntilChanged()</code>.\nIt cancels and discards previous search observables, returning only the latest search service observable.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  借助 <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap 操作符</a>，\n每个有效的击键事件都会触发一次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法调用。\n即使在每个请求之间都有至少 300ms 的间隔，仍然可能会同时存在多个尚未返回的 HTTP 请求。</p><p translation-origin=\"off\">  With the <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap operator</a>,\nevery qualifying key event can trigger an <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method call.\nEven with a 300ms pause between requests, you could have multiple HTTP requests in flight\nand they may not return in the order sent.</p>\n\n<p translation-result=\"on\">  <code>switchMap()</code> 会记住原始的请求顺序，只会返回最近一次 HTTP 方法调用的结果。\n以前的那些请求都会被取消和舍弃。</p><p translation-origin=\"off\">  <code>switchMap()</code> preserves the original request order while returning only the observable from the most recent HTTP method call.\nResults from prior calls are canceled and discarded.</p>\n\n<p translation-result=\"on\">  注意，取消前一个 <code>searchHeroes()</code> 可观察对象并不会中止尚未完成的 HTTP 请求。\n那些不想要的结果只会在它们抵达应用代码之前被舍弃。</p><p translation-origin=\"off\">  Note that canceling a previous <code>searchHeroes()</code> Observable\ndoesn't actually abort a pending HTTP request.\nUnwanted results are simply discarded before they reach your application code.</p>\n\n</div>\n<p translation-result=\"on\">记住，组件类中并没有订阅 <code>heroes$</code> 这个可观察对象，而是由模板中的 <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> 完成的。</p><p translation-origin=\"off\">Remember that the component <em>class</em> does not subscribe to the <code>heroes$</code> <em>observable</em>.\nThat's the job of the <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> in the template.</p>\n\n<h4 id=\"try-it\" translation-result=\"on\">试试看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"try-it\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">再次运行本应用。在这个 <em>仪表盘</em> 中，在搜索框中输入一些文字。如果你输入的字符匹配上了任何现有英雄的名字，你将会看到如下效果：</p><p translation-origin=\"off\">Run the app again. In the <em>Dashboard</em>, enter some text in the search box.\nIf you enter characters that match any existing hero names, you'll see something like this.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/toh/toh-hero-search.png\" alt=\"Hero Search Component\" width=\"240\" height=\"224\">\n</div>\n<h2 id=\"final-code-review\" translation-result=\"on\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本文讨论过的代码文件如下（都位于 <code>src/app/</code> 文件夹中）。</p><p translation-origin=\"off\">Here are the code files discussed on this page (all in the <code>src/app/</code> folder).</p>\n\n<a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a>\n<a id=\"appmodule\"></a>\n<h4 id=\"heroservice-inmemorydataservice-appmodule\"><code>HeroService</code>, <code>InMemoryDataService</code>, <code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  httpOptions = {\n    headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable&#x3C;Hero[]> {\n    return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&#x3C;Hero[]>(url)\n      .pipe(\n        map(heroes => heroes[0]), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? `fetched` : `did not find`;\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&#x3C;Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable&#x3C;Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&#x3C;Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable&#x3C;Hero> {\n    return this.http.post&#x3C;Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError&#x3C;Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(hero: Hero | <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a>): Observable&#x3C;Hero> {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&#x3C;Hero>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable&#x3C;any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&#x3C;any>('updateHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError&#x3C;T>(operation = 'operation', result?: T) {\n    return (error: any): Observable&#x3C;T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Dr Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> }    from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroSearchComponent }  from './hero-search/hero-search.component';\nimport { MessagesComponent }    from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when a real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;div>\n  &#x3C;label>Hero name:\n    &#x3C;input #heroName />\n  &#x3C;/label>\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    add\n  &#x3C;/button>\n&#x3C;/div>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n    &#x3C;button class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n\n</code-pane>\n  <code-pane header=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero => {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h => h !== hero);\n    this.heroService.deleteHero(hero).subscribe();\n  }\n\n}\n\n\n</code-pane>\n  <code-pane header=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  position: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes a:hover {\n  color: #607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\nbutton {\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n  font-family: Arial;\n}\n\nbutton:hover {\n  background-color: #cfd8dc;\n}\n\nbutton.delete {\n  position: relative;\n  left: 194px;\n  top: -32px;\n  background-color: gray !important;\n  color: white;\n}\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n  &#x3C;button (click)=\"save()\">save&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane header=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero => this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  save(): void {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() => this.goBack());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"dashboardcomponent\"></a>\n<h4 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herosearchcomponent\"></a>\n<h4 id=\"herosearchcomponent\"><code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>&#x3C;label for=\"search-box\">Hero Search&#x3C;/label>&#x3C;/h4>\n\n  &#x3C;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n      &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/a>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane header=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n.search-result li {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width: 195px;\n  height: 16px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n  list-style-type: none;\n}\n\n.search-result li:hover {\n  background-color: #607D8B;\n}\n\n.search-result li a {\n  color: #888;\n  display: block;\n  text-decoration: none;\n}\n\n.search-result li a:hover {\n  color: white;\n}\n.search-result li a:active {\n  color: white;\n}\n#search-box {\n  width: 200px;\n  height: 20px;\n}\n\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">旅程即将结束，不过你已经收获颇丰。</p><p translation-origin=\"off\">You're at the end of your journey, and you've accomplished a lot.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 你添加了在应用程序中使用 HTTP 的必备依赖。</p><p translation-origin=\"off\">You added the necessary dependencies to use HTTP in the app.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你重构了 <code>HeroService</code>，以通过 web API 来加载英雄数据。</p><p translation-origin=\"off\">You refactored <code>HeroService</code> to load heroes from a web API.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你扩展了 <code>HeroService</code> 来支持 <code>post()</code>、<code>put()</code> 和 <code>delete()</code> 方法。</p><p translation-origin=\"off\">You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你修改了组件，以允许用户添加、编辑和删除英雄。</p><p translation-origin=\"off\">You updated the components to allow adding, editing, and deleting of heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你配置了一个内存 Web API。</p><p translation-origin=\"off\">You configured an in-memory web API.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你学会了如何使用“可观察对象”。</p><p translation-origin=\"off\">You learned how to use observables.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">《英雄指南》教程结束了。\n如果你准备开始学习 Angular 开发的原理，请开始 <a href=\"guide/architecture\" title=\"Architecture\">架构</a> 一章。</p><p translation-origin=\"off\">This concludes the \"Tour of Heroes\" tutorial.\nYou're ready to learn more about Angular development in the fundamentals section,\nstarting with the <a href=\"guide/architecture\" title=\"Architecture\">Architecture</a> guide.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/DecimalPipe\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#delete\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClientModule\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/testing/async\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - guide/architecture\n - tutorial/toh-pt6#add-a-new-hero\n - tutorial/toh-pt6#add-heroserviceupdatehero\n - tutorial/toh-pt6#add-search-to-the-dashboard\n - tutorial/toh-pt6#asyncpipe\n - tutorial/toh-pt6#chaining-rxjs-operators\n - tutorial/toh-pt6#create-herosearchcomponent\n - tutorial/toh-pt6#dashboardcomponent\n - tutorial/toh-pt6#delete-a-hero\n - tutorial/toh-pt6#edit-the-herosearchcomponent-class\n - tutorial/toh-pt6#enable-http-services\n - tutorial/toh-pt6#error-handling\n - tutorial/toh-pt6#final-code-review\n - tutorial/toh-pt6#get-data-from-a-server\n - tutorial/toh-pt6#get-hero-by-id\n - tutorial/toh-pt6#get-heroes-with-httpclient\n - tutorial/toh-pt6#handleerror\n - tutorial/toh-pt6#herodetailcomponent\n - tutorial/toh-pt6#heroes-and-http\n - tutorial/toh-pt6#heroescomponent\n - tutorial/toh-pt6#herosearchcomponent\n - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/toh-pt6#heroservicesearchheroes\n - tutorial/toh-pt6#httpclient-methods-return-one-value\n - tutorial/toh-pt6#httpclientget-returns-response-data\n - tutorial/toh-pt6#import-heroes\n - tutorial/toh-pt6#search-by-name\n - tutorial/toh-pt6#search-pipe\n - tutorial/toh-pt6#simulate-a-data-server\n - tutorial/toh-pt6#summary\n - tutorial/toh-pt6#tap-into-the-observable\n - tutorial/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/toh-pt6#try-it\n - tutorial/toh-pt6#update-heroes\n - http://www.learnrxjs.io/operators/transformation/switchmap.html\n - https://github.com/angular/angular-cn/edit/aio/aio/content/tutorial/toh-pt6.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/in-memory-web-api\n-->"
}