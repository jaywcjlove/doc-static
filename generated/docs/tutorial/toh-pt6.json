{
  "id": "tutorial/toh-pt6",
  "title": "从服务端获取数据",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt6.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"get-data-from-a-server\">Get data from a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-data-from-a-server\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"从服务端获取数据\">从服务端获取数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#从服务端获取数据\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial adds the following data persistence features with help from Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<p>本教程会将借助 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来添加一些数据持久化特性。</p>\n<ul>\n<li>\n<p>The <code>HeroService</code> gets hero data with HTTP requests</p>\n<p><code>HeroService</code> 通过 HTTP 请求获取英雄数据</p>\n</li>\n<li>\n<p>Users can add, edit, and delete heroes and save these changes over HTTP</p>\n<p>用户可以添加、编辑和删除英雄，并通过 HTTP 来保存这些更改</p>\n</li>\n<li>\n<p>Users can search for heroes by name</p>\n<p>用户可以根据名字搜索英雄</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>For the sample application that this page describes, see the <live-example></live-example>.</p>\n<p>要查看本页所讲的范例程序，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"enable-http-services\">Enable HTTP services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"启用-http-服务\">启用 HTTP 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#启用-http-服务\"><i class=\"material-icons\">link</i></a></h2>\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is Angular's mechanism for communicating with a remote server over HTTP.</p>\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 是 Angular 通过 HTTP 与远程服务器通讯的机制。</p>\n<p>Make <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> available everywhere in the application in two steps.\nFirst, add it to the root <code>AppModule</code> by importing it:</p>\n<p>要让 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在应用中随处可用，需要两个步骤。首先，用导入语句把它添加到根模块 <code>AppModule</code> 中：</p>\n<code-example header=\"src/app/app.module.ts (HttpClientModule import)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-http-client\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p>Next, still in the <code>AppModule</code>, add <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>imports</code> array:</p>\n<p>接下来，仍然在 <code>AppModule</code> 中，把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 添加到 <code>imports</code> 数组中：</p>\n<code-example header=\"src/app/app.module.ts (imports array excerpt)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-httpclientmodule\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n})\n\n</code-example>\n<h2 id=\"simulate-a-data-server\">Simulate a data server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"模拟数据服务器\">模拟数据服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#模拟数据服务器\"><i class=\"material-icons\">link</i></a></h2>\n<p>This tutorial sample mimics communication with a remote data server by using the <a href=\"https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\" title=\"In-memory Web API\">In-memory Web API</a> module.</p>\n<p>这个教学例子会与一个使用 <a href=\"https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\" title=\"In-memory Web API\">内存 Web API（<em>In-memory Web API</em>）</a> 模拟出的远程数据服务器通讯。</p>\n<p>After installing the module, the application makes requests to and receive responses from the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>. The application doesn't know that the <em>In-memory Web API</em> is intercepting those requests, applying them to an in-memory data store, and returning simulated responses.</p>\n<p>安装完这个模块之后，应用将会通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来发起请求和接收响应。本应用不在乎实际上是这个内存 Web API 在拦截这些请求、操作一个内存数据库，并且给出仿真的响应。</p>\n<p>By using the In-memory Web API, you won't have to set up a server to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<p>通过使用内存 Web API，你不用架设服务器就可以学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 了。</p>\n<div class=\"alert is-important\">\n<p><strong>IMPORTANT</strong>: <br>\nThe In-memory Web API module has nothing to do with HTTP in Angular.</p>\n<p><strong>重要</strong>：<br>\n这个<em>内存 Web API</em> 模块与 Angular 中的 HTTP 模块无关。</p>\n<p>If you're reading this tutorial to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you can <a href=\"tutorial/toh-pt6#import-heroes\">skip over</a> this step.\nIf you're coding along with this tutorial, stay here and add the In-memory Web API now.</p>\n<p>如果你只是在<em>阅读</em>本教程来学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，那么可以<a href=\"tutorial/toh-pt6#import-heroes\">跳过</a>这一步。\n如果你正在随着本教程<em>敲代码</em>，那就留下来，并加上这个<em>内存 Web API</em>。</p>\n</div>\n<p>Install the In-memory Web API package from npm with the following command:</p>\n<p>用如下命令从 <code>npm</code> 中安装这个<em>内存 Web API</em> 包（译注：请使用 0.5+ 的版本，不要使用 0.4-）</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install angular-in-memory-web-api --save\n\n</code-example>\n<p>In the <code>AppModule</code>, import the <code>HttpClientInMemoryWebApiModule</code> and the <code>InMemoryDataService</code> class, which you create next.</p>\n<p>在 <code>AppModule</code> 中，导入 <code>HttpClientInMemoryWebApiModule</code> 和 <code>InMemoryDataService</code> 类，稍后你将创建它们。</p>\n<code-example header=\"src/app/app.module.ts (In-memory Web API imports)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\n</code-example>\n<p>After the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>, add the <code>HttpClientInMemoryWebApiModule</code> to the <code>AppModule</code> <code>imports</code> array and configure it with the <code>InMemoryDataService</code>.</p>\n<p>在 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 之后，将 <code>HttpClientInMemoryWebApiModule</code> 添加到 <code>AppModule</code> 的 <code>imports</code> 数组中，并以 <code>InMemoryDataService</code> 为参数对其进行配置。</p>\n<code-example header=\"src/app/app.module.ts (imports array excerpt)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when a real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p>The <code>forRoot()</code> configuration method takes an <code>InMemoryDataService</code> class that primes the in-memory database.</p>\n<p><code>forRoot()</code> 配置方法接收一个 <code>InMemoryDataService</code> 类来初始化内存数据库。</p>\n<p>Generate the class <code>src/app/in-memory-data.service.ts</code> with the following command:</p>\n<p>使用以下命令生成类 <code>src/app/in-memory-data.service.ts</code>：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service InMemoryData\n\n</code-example>\n<p>Replace the default contents of <code>in-memory-data.service.ts</code> with the following:</p>\n<p>将 <code>in-memory-data.service.ts</code> 改为以下内容：</p>\n<code-example header=\"src/app/in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-example>\n<p>The <code>in-memory-data.service.ts</code> file takes over the function of <code>mock-heroes.ts</code>.\nDon't delete <code>mock-heroes.ts</code> yet. You still need it for a few more steps of this tutorial.</p>\n<p><code>in-memory-data.service.ts</code> 文件已代替了 <code>mock-heroes.ts</code> 文件。\n先不要删除 <code>mock-heroes.ts</code>。本教程后面还有几步需要用到它。</p>\n<p>After the server is ready, detach the In-memory Web API so the application's requests can go through to the server.</p>\n<p>等服务器就绪后，就可以抛弃这个内存 Web API，以便应用的请求能直接传到服务器。</p>\n<p><a id=\"import-heroes\"></a></p>\n<h2 id=\"heroes-and-http\">Heroes and HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"英雄与-http\">英雄与 HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#英雄与-http\"><i class=\"material-icons\">link</i></a></h2>\n<p>In the <code>HeroService</code>, import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> and <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>:</p>\n<p>在 <code>HeroService</code> 中，导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 和 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>：</p>\n<code-example header=\"src/app/hero.service.ts (import HTTP symbols)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p>Still in the <code>HeroService</code>, inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the constructor in a private property called <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code>.</p>\n<p>仍然在 <code>HeroService</code> 中，把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到构造函数中一个名叫 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 的私有属性中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p>Notice that you keep injecting the <code>MessageService</code> but since your application calls it so frequently, wrap it in a private <code>log()</code> method:</p>\n<p>注意保留对 <code>MessageService</code> 的注入，但是因为你将频繁调用它，因此请把它包裹进一个私有的 <code>log</code> 方法中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"log\">\n/** Log a HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add(`HeroService: ${message}`);\n}\n\n</code-example>\n<p>Define the <code>heroesUrl</code> of the form <code>:base/:collectionName</code> with the address of the heroes resource on the server.\nHere <code>base</code> is the resource to which requests are made, and <code>collectionName</code> is the heroes data object in the <code>in-memory-data-service.ts</code>.</p>\n<p>把服务器上英雄数据资源的访问地址 <code>heroesURL</code> 定义为 <code>:base/:collectionName</code> 的形式。这里的 <code>base</code> 是要请求的资源，而 <code>collectionName</code> 是 <code>in-memory-data-service.ts</code> 中的英雄数据对象。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\n</code-example>\n<h3 id=\"get-heroes-with-httpclient\">Get heroes with <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"通过-httpclient-获取英雄\">通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#通过-httpclient-获取英雄\"><i class=\"material-icons\">link</i></a></h3>\n<p>The current <code>HeroService.getHeroes()</code> uses the RxJS <code>of()</code> function to return an array of mock heroes as an <code>Observable&#x3C;Hero[]></code>.</p>\n<p>当前的 <code>HeroService.getHeroes()</code> 使用 RxJS 的 <code>of()</code> 函数来把模拟英雄数据返回为 <code>Observable&#x3C;Hero[]></code> 格式。</p>\n<code-example header=\"src/app/hero.service.ts (getHeroes with RxJs &#x27;of()&#x27;)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p>Convert that method to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> as follows:</p>\n<p>把该方法转换成使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的，代码如下：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-1\">\n/** GET heroes from the server */\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n}\n\n</code-example>\n<p>Refresh the browser.\nThe hero data should successfully load from the mock server.</p>\n<p>刷新浏览器后，英雄数据就会从模拟服务器被成功读取。</p>\n<p>You've swapped <code>of()</code> for <code>http.get()</code> and the application keeps working without any other changes\nbecause both functions return an <code>Observable&#x3C;Hero[]></code>.</p>\n<p>你用 <code>http.get()</code> 替换了 <code>of()</code>，没有做其它修改，但是应用仍然在正常工作，这是因为这两个函数都返回了 <code>Observable&#x3C;Hero[]></code>。</p>\n<h3 id=\"httpclient-methods-return-one-value\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return one value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclient-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"httpclient-的方法返回单个值\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法返回单个值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclient-的方法返回单个值\"><i class=\"material-icons\">link</i></a></h3>\n<p>All <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return an RxJS <code>Observable</code> of something.</p>\n<p>所有的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法都会返回某个值的 RxJS <code>Observable</code>。</p>\n<p>HTTP is a request/response protocol.\nYou make a request, it returns a single response.</p>\n<p>HTTP 是一个请求/响应式协议。你发起请求，它返回单个的响应。</p>\n<p>In general, an observable <em>can</em> return more than one value over time.\nAn observable from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> always emits a single value and then completes, never to emit again.</p>\n<p>通常，<code>Observable</code> <em>可以</em>在一段时间内返回多个值。但来自 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 <code>Observable</code> 总是发出一个值，然后结束，再也不会发出其它值。</p>\n<p>This particular call to <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns an <code>Observable&#x3C;Hero[]></code>, which is <em>an observable of hero arrays</em>.\nIn practice, it only returns a single hero array.</p>\n<p>具体到这次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 调用，它返回一个 <code>Observable&#x3C;Hero[]></code>，也就是“一个英雄数组的可观察对象”。在实践中，它也只会返回一个英雄数组。</p>\n<h3 id=\"httpclientget-returns-response-data\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns response data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"httpclientget-返回响应数据\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回响应数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-返回响应数据\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns the body of the response as an untyped JSON object by default.\nApplying the optional type specifier, <code>&#x3C;Hero[]></code> , adds TypeScript capabilities, which reduce errors during compile time.</p>\n<p><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 默认情况下把响应体当做无类型的 JSON 对象进行返回。如果指定了可选的模板类型 <code>&#x3C;Hero[]></code>，就会给返回你一个类型化的对象。</p>\n<p>The server's data API determines the shape of the JSON data.\nThe <em>Tour of Heroes</em> data API returns the hero data as an array.</p>\n<p>服务器的数据 API 决定了 JSON 数据的具体形态。<em>英雄之旅</em>的数据 API 会把英雄数据作为一个数组进行返回。</p>\n<div class=\"alert is-helpful\">\n<p>Other APIs may bury the data that you want within an object.\nYou might have to dig that data out by processing the <code>Observable</code> result with the RxJS <code>map()</code> operator.</p>\n<p>其它 API 可能在返回对象中深埋着你想要的数据。你可能要借助 RxJS 的 <code>map()</code> 操作符对 <code>Observable</code> 的结果进行处理，以便把这些数据挖掘出来。</p>\n<p>Although not discussed here, there's an example of <code>map()</code> in the <code>getHeroNo404()</code> method included in the sample source code.</p>\n<p>虽然不打算在此展开讨论，不过你可以到范例源码中的 <code>getHeroNo404()</code> 方法中找到一个使用 <code>map()</code> 操作符的例子。</p>\n</div>\n<h3 id=\"error-handling\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"错误处理\">错误处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#错误处理\"><i class=\"material-icons\">link</i></a></h3>\n<p>Things go wrong, especially when you're getting data from a remote server.\nThe <code>HeroService.getHeroes()</code> method should catch errors and do something appropriate.</p>\n<p>凡事皆会出错，特别是当你从远端服务器获取数据的时候。<code>HeroService.getHeroes()</code> 方法应该捕获错误，并做适当的处理。</p>\n<p>To catch errors, you <strong>\"pipe\" the observable</strong> result from <code>http.get()</code> through an RxJS <code>catchError()</code> operator.</p>\n<p>要捕获错误，你就要使用 RxJS 的 <code>catchError()</code> 操作符来<strong>建立对 Observable 结果的处理管道（pipe）</strong>。</p>\n<p>Import the <code>catchError</code> symbol from <code>rxjs/operators</code>, along with some other operators to use later.</p>\n<p>从 <code>rxjs/operators</code> 中导入 <code>catchError</code> 符号，以及你稍后将会用到的其它操作符。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p>Now extend the observable result with the <code>pipe()</code> method and give it a <code>catchError()</code> operator.</p>\n<p>现在，使用 <code>pipe()</code> 方法来扩展 <code>Observable</code> 的结果，并给它一个 <code>catchError()</code> 操作符。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n    );\n}\n\n</code-example>\n<p>The <code>catchError()</code> operator intercepts an <strong><code>Observable</code> that failed</strong>.\nThe operator then passes the error to the error handling function.</p>\n<p><code>catchError()</code> 操作符会拦截<strong>失败的 <code>Observable</code></strong>。它把错误对象传给<em>错误处理器</em>，<em>错误处理器</em>会处理这个错误。</p>\n<p>The following <code>handleError()</code> method reports the error and then returns an innocuous result so that the application keeps working.</p>\n<p>下面的 <code>handleError()</code> 方法会报告这个错误，并返回一个无害的结果（安全值），以便应用能正常工作。</p>\n<h4 id=\"handleerror\"><code>handleError</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#handleerror\"><i class=\"material-icons\">link</i></a></h4>\n<p>The following <code>handleError()</code> can be shared by many <code>HeroService</code> methods so it's generalized to meet their different needs.</p>\n<p>下面这个 <code>handleError()</code> 将会在很多 <code>HeroService</code> 的方法之间共享，所以要把它通用化，以支持这些彼此不同的需求。</p>\n<p>Instead of handling the error directly, it returns an error handler function to <code>catchError</code>. This function is configured with both the name of the operation that failed and a safe return value.</p>\n<p>它不再直接处理这些错误，而是返回给 <code>catchError</code> 返回一个错误处理函数。还要用操作名和出错时要返回的安全值来对这个错误处理函数进行配置。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError&#x3C;T>(operation = 'operation', result?: T) {\n  return (error: any): Observable&#x3C;T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p>After reporting the error to the console, the handler constructs a friendly message and returns a safe value so the application can keep working.</p>\n<p>在控制台中汇报了这个错误之后，这个处理器会汇报一个用户友好的消息，并给应用返回一个安全值，让应用继续工作。</p>\n<p>Because each service method returns a different kind of <code>Observable</code> result, <code>handleError()</code> takes a type parameter to return the safe value as the type that the application expects.</p>\n<p>因为每个服务方法都会返回不同类型的 <code>Observable</code> 结果，因此 <code>handleError()</code> 也需要一个类型参数，以便它返回一个此类型的安全值，正如应用所期望的那样。</p>\n<h3 id=\"tap-into-the-observable\">Tap into the Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"窥探-observable\">窥探 <code>Observable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#窥探-observable\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroService</code> methods taps into the flow of observable values and send a message, using the <code>log()</code> method, to the message area at the bottom of the page.</p>\n<p><code>HeroService</code> 的方法将会窥探 <code>Observable</code> 的数据流，并通过 <code>log()</code> 方法往页面底部发送一条消息。</p>\n<p>The RxJS <code>tap()</code> operator enables this ability by looking at the observable values, doing something with those values, and passing them along.\nThe <code>tap()</code> call back doesn't access the values themselves.</p>\n<p>RxJS 的 <code>tap()</code> 操作符可以通过查看 Observable 中的值来实现此功能，可以用那些值做一些事情，并且把它们传出来。这种 <code>tap()</code> 回调不会改变这些值本身。</p>\n<p>Here is the final version of <code>getHeroes()</code> with the <code>tap()</code> that logs the operation.</p>\n<p>下面是 <code>getHeroes()</code> 的最终版本，它使用 <code>tap()</code> 来记录各种操作。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      tap(_ => this.log('fetched heroes')),\n      catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 id=\"get-hero-by-id\">Get hero by id<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"通过-id-获取英雄\">通过 id 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#通过-id-获取英雄\"><i class=\"material-icons\">link</i></a></h3>\n<p>Most web APIs support a <em>get by id</em> request in the form <code>:baseURL/:id</code>.</p>\n<p>大多数的 Web API 都支持以 <code>:baseURL/:id</code> 的形式根据 id 进行获取。</p>\n<p>Here, the <em>base URL</em> is the <code>heroesURL</code> defined in the <a href=\"tutorial/toh-pt6#heroes-and-http\">Heroes and HTTP</a> section in <code>api/heroes</code> and <em>id</em> is the number of the hero that you want to retrieve.\nFor example, <code>api/heroes/11</code>.</p>\n<p>这里的 <code>baseURL</code> 就是在 <a href=\"tutorial/toh-pt6#heroes-and-http\">英雄列表与 HTTP</a> 部分定义过的 <code>heroesURL</code>（在 <code>api/heroes</code> 中）。而 <code>id</code> 则是你要获取的英雄的编号，比如，<code>api/heroes/11</code>。</p>\n<p>Update the <code>HeroService</code> <code>getHero()</code> method with the following to make that request:</p>\n<p>把 <code>HeroService.getHero()</code> 方法改成这样，以发起该请求：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&#x3C;Hero>(url).pipe(\n    tap(_ => this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p><code>getHero()</code> has three significant differences from  <code>getHeroes()</code>:</p>\n<p>这里和 <code>getHeroes()</code> 相比有三个显著的差异:</p>\n<ul>\n<li>\n<p><code>getHero()</code> constructs a request URL with the desired hero's id</p>\n<p><code>getHero()</code> 使用想获取的英雄的 id 构造了一个请求 URL</p>\n</li>\n<li>\n<p>The server should respond with a single hero rather than an array of heroes</p>\n<p>服务器应该使用单个英雄作为回应，而不是一个英雄数组</p>\n</li>\n<li>\n<p><code>getHero()</code> returns an <code>Observable&#x3C;Hero></code>, which is an observable of <code>Hero</code> <em>objects</em> rather than an observable of <code>Hero</code> <em>arrays</em>.</p>\n<p>所以，<code>getHero()</code> 会返回 <code>Observable&#x3C;Hero></code>，它是一个 <code>Hero</code> 对象类型的 Observable，而不是一个 <code>Hero</code> <em>数组</em>类型的 Observable。</p>\n</li>\n</ul>\n<h2 id=\"update-heroes\">Update heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"修改英雄\">修改英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#修改英雄\"><i class=\"material-icons\">link</i></a></h2>\n<!-- markdownlint-disable MD001 -->\n<p>Edit a hero's name in the hero detail view.\nAs you type, the hero name updates the heading at the top of the page, yet\nwhen you click <strong>Go back</strong>, your changes are lost.</p>\n<p>在<em>英雄详情</em>视图中编辑英雄的名字。随着输入，英雄的名字也跟着在页面顶部的标题区更新了。但是当你点击“后退”按钮时，这些修改都丢失了。</p>\n<p>If you want changes to persist, you must write them back to the server.</p>\n<p>如果你希望保留这些修改，就要把它们写回到服务器。</p>\n<p>At the end of the hero detail template, add a save button with a <code>click</code> event binding that invokes a new component method named <code>save()</code>.</p>\n<p>在英雄详情模板的底部添加一个保存按钮，它绑定了一个 <code>click</code> 事件，事件绑定会调用组件中一个名叫 <code>save()</code> 的新方法。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.html (save)\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\">\n&#x3C;button type=\"button\" (click)=\"save()\">save&#x3C;/button>\n\n</code-example>\n<p>In the <code>HeroDetail</code> component class, add the following <code>save()</code> method, which persists hero name changes using the hero service <code>updateHero()</code> method and then navigates back to the previous view.</p>\n<p>在 <code>HeroDetail</code> 组件类中，添加如下的 <code>save()</code> 方法，它使用英雄服务中的 <code>updateHero()</code> 方法来保存对英雄名字的修改，然后导航回前一个视图。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (save)\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\">\nsave(): void {\n  if (this.hero) {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() => this.goBack());\n  }\n}\n\n</code-example>\n<h4 id=\"add-heroserviceupdatehero\">Add <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"添加-heroserviceupdatehero\">添加 <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#添加-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n<p>The structure of the <code>updateHero()</code> method is like that of <code>getHeroes()</code>, but it uses <code>http.put()</code> to persist the changed hero on the server.\nAdd the following to the <code>HeroService</code>.</p>\n<p><code>updateHero()</code> 的总体结构和 <code>getHeroes()</code> 很相似，但它会使用 <code>http.put()</code> 来把修改后的英雄保存到服务器上。把下列代码添加进 <code>HeroService</code>。</p>\n<code-example header=\"src/app/hero.service.ts (update)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server */\nupdateHero(hero: Hero): Observable&#x3C;any> {\n  return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap(_ => this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&#x3C;any>('updateHero'))\n  );\n}\n\n</code-example>\n<p>The <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> method takes three parameters:</p>\n<p><code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 方法接受三个参数：</p>\n<ul>\n<li>\n<p>The URL</p>\n<p>URL 地址</p>\n</li>\n<li>\n<p>The data to update, which is the modified hero in this case</p>\n<p>要修改的数据，这里就是修改后的英雄</p>\n</li>\n<li>\n<p>Options</p>\n<p>选项</p>\n</li>\n</ul>\n<p>The URL is unchanged.\nThe heroes web API knows which hero to update by looking at the hero's <code>id</code>.</p>\n<p>URL 没变。英雄 Web API 通过英雄对象的 <code>id</code> 就可以知道要修改哪个英雄。</p>\n<p>The heroes web API expects a special header in HTTP save requests.\nThat header is in the <code>httpOptions</code> constant defined in the <code>HeroService</code>.\nAdd the following to the <code>HeroService</code> class.</p>\n<p>英雄 Web API 期待在保存时的请求中有一个特殊的头。这个头是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定义的。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\">\nhttpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p>Refresh the browser, change a hero name and save your change.\nThe <code>save()</code> method in <code>HeroDetailComponent</code> navigates to the previous view.\nThe hero now appears in the list with the changed name.</p>\n<p>刷新浏览器，修改英雄名，保存这些修改。在 <code>HeroDetailComponent</code> 的 <code>save()</code> 方法中导航到前一个视图。现在，改名后的英雄已经显示在列表中了。</p>\n<h2 id=\"add-a-new-hero\">Add a new hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"添加一个新英雄\">添加一个新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#添加一个新英雄\"><i class=\"material-icons\">link</i></a></h2>\n<p>To add a hero, this application only needs the hero's name.\nYou can use an <code>&#x3C;input></code> element paired with an add button.</p>\n<p>要添加英雄，本应用中只需要英雄的名字。你可以使用一个和添加按钮成对的 <code>&#x3C;input></code> 元素。</p>\n<p>Insert the following into the <code>HeroesComponent</code> template, after the heading:</p>\n<p>把下列代码插入到 <code>HeroesComponent</code> 模板中标题的紧后面：</p>\n<code-example header=\"src/app/heroes/heroes.component.html (add)\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\">\n&#x3C;div>\n  &#x3C;label for=\"new-hero\">Hero name: &#x3C;/label>\n  &#x3C;input id=\"new-hero\" #heroName />\n\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button type=\"button\" class=\"add-button\" (click)=\"add(heroName.value); heroName.value=''\">\n    Add hero\n  &#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p>In response to a click event, call the component's click handler, <code>add()</code>, and then clear the input field so that it's ready for another name.\nAdd the following to the <code>HeroesComponent</code> class:</p>\n<p>当点击事件触发时，调用组件的点击处理器（<code>add()</code>），然后清空这个输入框，以便用来输入另一个名字。把下列代码添加到 <code>HeroesComponent</code> 类：</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (add)\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero => {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p>When the given name isn't blank, the handler creates an object based on the hero's name.\nThe handler passes the object name to the service's <code>addHero()</code> method.</p>\n<p>当指定的名字非空时，这个处理器会用这个名字创建一个基于此英雄名字的对象。此处理器把这个对象的名字传给服务的 <code>addHero()</code> 方法。</p>\n<p>When <code>addHero()</code> creates a new object, the <code>subscribe()</code> callback receives the new hero and pushes it into to the <code>heroes</code> list for display.</p>\n<p>当 <code>addHero()</code> 保存成功时，<code>subscribe()</code> 的回调函数会收到这个新英雄，并把它追加到 <code>heroes</code> 列表中以供显示。</p>\n<p>Add the following <code>addHero()</code> method to the <code>HeroService</code> class.</p>\n<p>往 <code>HeroService</code> 类中添加 <code>addHero()</code> 方法。</p>\n<code-example header=\"src/app/hero.service.ts (addHero)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the server */\naddHero(hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n    catchError(this.handleError&#x3C;Hero>('addHero'))\n  );\n}\n\n</code-example>\n<p><code>addHero()</code> differs from <code>updateHero()</code> in two ways:</p>\n<p><code>addHero()</code> 和 <code>updateHero()</code> 有两点不同。</p>\n<ul>\n<li>\n<p>It calls <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> instead of <code>put()</code></p>\n<p>它调用 <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 而不是 <code>put()</code>。</p>\n</li>\n<li>\n<p>It expects the server to create an id for the new hero, which it returns in the <code>Observable&#x3C;Hero></code> to the caller</p>\n<p>它期待服务器为这个新的英雄生成一个 id，然后把它通过 <code>Observable&#x3C;Hero></code> 返回给调用者。</p>\n</li>\n</ul>\n<p>Refresh the browser and add some heroes.</p>\n<p>刷新浏览器，并添加一些英雄。</p>\n<h2 id=\"delete-a-hero\">Delete a hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"删除某个英雄\">删除某个英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#删除某个英雄\"><i class=\"material-icons\">link</i></a></h2>\n<p>Each hero in the heroes list should have a delete button.</p>\n<p>英雄列表中的每个英雄都有一个删除按钮。</p>\n<p>Add the following button element to the <code>HeroesComponent</code> template, after the hero name in the repeated <code>&#x3C;li></code> element.</p>\n<p>把下列按钮（<code>button</code>）元素添加到 <code>HeroesComponent</code> 的模板中，就在每个 <code>&#x3C;li></code> 元素中的英雄名字后方。</p>\n<code-example header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"delete\">\n&#x3C;button type=\"button\" class=\"delete\" title=\"delete hero\"\n  (click)=\"delete(hero)\">x&#x3C;/button>\n\n</code-example>\n<p>The HTML for the list of heroes should look like this:</p>\n<p>英雄列表的 HTML 应该是这样的：</p>\n<code-example header=\"src/app/heroes/heroes.component.html (list of heroes)\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n    &#x3C;button type=\"button\" class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>To position the delete button at the far right of the hero entry, add some CSS from the <a href=\"tutorial/toh-pt6#heroescomponent\">final review code</a> to the <code>heroes.component.css</code>.</p>\n<p>要把删除按钮定位在每个英雄条目的最右边，就要从<a href=\"tutorial/toh-pt6#heroescomponent\">最终代码</a> 中往 <code>heroes.component.css</code> 中添加一些 CSS。</p>\n<p>Add the <code>delete()</code> handler to the component class.</p>\n<p>把 <code>delete()</code> 处理器添加到组件中。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (delete)\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h => h !== hero);\n  this.heroService.deleteHero(hero.id).subscribe();\n}\n\n</code-example>\n<p>Although the component delegates hero deletion to the <code>HeroService</code>, it remains responsible for updating its own list of heroes.\nThe component's <code>delete()</code> method immediately removes the <em>hero-to-delete</em> from that list, anticipating that the <code>HeroService</code> succeeds on the server.</p>\n<p>虽然这个组件把删除英雄的逻辑委托给了 <code>HeroService</code>，但仍保留了更新它自己的英雄列表的职责。组件的 <code>delete()</code> 方法会在 <code>HeroService</code> 对服务器的操作成功之前，先从列表中移除<em>要删除的英雄</em>。</p>\n<p>There's really nothing for the component to do with the <code>Observable</code> returned by <code>heroService.deleteHero()</code> <strong>but it must subscribe anyway</strong>.</p>\n<p>组件与 <code>heroService.deleteHero()</code> 返回的 <code>Observable</code> 还完全没有关联。<strong>必须订阅它</strong>。</p>\n<p>Next, add a <code>deleteHero()</code> method to <code>HeroService</code> like this.</p>\n<p>接下来，把 <code>deleteHero()</code> 方法添加到 <code>HeroService</code> 中，代码如下。</p>\n<code-example header=\"src/app/hero.service.ts (delete)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&#x3C;Hero>(url, this.httpOptions).pipe(\n    tap(_ => this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>('deleteHero'))\n  );\n}\n\n</code-example>\n<p>Notice the following key points:</p>\n<p>注意以下关键点：</p>\n<ul>\n<li>\n<p><code>deleteHero()</code> calls <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code></p>\n<p><code>deleteHero()</code> 调用了 <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code></p>\n</li>\n<li>\n<p>The URL is the heroes resource URL plus the <code>id</code> of the hero to delete</p>\n<p>URL 就是英雄的资源 URL 加上要删除的英雄的 <code>id</code></p>\n</li>\n<li>\n<p>You don't send data as you did with <code>put()</code> and <code>post()</code></p>\n<p>你不用像 <code>put()</code> 和 <code>post()</code> 中那样发送任何数据</p>\n</li>\n<li>\n<p>You still send the <code>httpOptions</code></p>\n<p>你仍要发送 <code>httpOptions</code></p>\n</li>\n</ul>\n<p>Refresh the browser and try the new delete capability.</p>\n<p>刷新浏览器并尝试新的删除特性。</p>\n<div class=\"alert is-important\">\n<p>If you neglect to <code>subscribe()</code>, the service can't send the delete request to the server.\nAs a rule, an <code>Observable</code> <em>does nothing</em> until something subscribes.</p>\n<p>如果你忘了 <code>subscribe()</code>，此服务就不会向服务器发送删除请求。作为一条规则 <code>Observable</code> 在被订阅前<strong>不会做任何事</strong>。</p>\n<p>Confirm this for yourself by temporarily removing the <code>subscribe()</code>, clicking <strong>Dashboard</strong>, then clicking <strong>Heroes</strong>.\nThis shows the full list of heroes again.</p>\n<p>你可以通过暂时移除 <code>subscribe()</code> 来确认这一点，点击 <strong>Dashboard</strong>，然后点击 <strong>Heroes</strong>。这里应该始终展示着英雄列表。</p>\n</div>\n<p>刷新浏览器，并试一下这个新的删除功能。</p>\n<h2 id=\"search-by-name\">Search by name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"根据名字搜索\">根据名字搜索<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#根据名字搜索\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this last exercise, you learn to chain <code>Observable</code> operators together so you can reduce the number of similar HTTP requests to consume network bandwidth economically.</p>\n<p>在最后一次练习中，你要学到把 <code>Observable</code> 的操作符串在一起，让你能将相似 HTTP 请求的数量最小化，并节省网络带宽。</p>\n<h3 id=\"add-a-heroes-search-feature-to-the-dashboard\">Add a heroes search feature to the Dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"往仪表盘中加入英雄搜索特性\">往<em>仪表盘</em>中加入<em>英雄搜索</em>特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#往仪表盘中加入英雄搜索特性\"><i class=\"material-icons\">link</i></a></h3>\n<p>As the user types a name into a search box, your application makes repeated HTTP requests for heroes filtered by that name.\nYour goal is to issue only as many requests as necessary.</p>\n<p>当用户在搜索框中输入名字时，你的应用就会不断发送根据名字过滤英雄的 HTTP 请求。你的目标是仅仅发出尽可能少的必要请求。</p>\n<h4 id=\"heroservicesearchheroes\"><code>HeroService.searchHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservicesearchheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p>Start by adding a <code>searchHeroes()</code> method to the <code>HeroService</code>.</p>\n<p>先把 <code>searchHeroes()</code> 方法添加到 <code>HeroService</code> 中。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  if (!term.trim()) {\n    // if not search term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&#x3C;Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n    tap(x => x.length ?\n       this.log(`found heroes matching \"${term}\"`) :\n       this.log(`no heroes matching \"${term}\"`)),\n    catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p>The method returns immediately with an empty array if there is no search term.\nThe rest of it closely resembles <code>getHeroes()</code>, the only significant difference being the URL, which includes a query string with the search term.</p>\n<p>如果没有搜索词，该方法立即返回一个空数组。剩下的部分和 <code>getHeroes()</code> 很像。唯一的不同点是 URL，它包含了一个由搜索词组成的查询字符串。</p>\n<h3 id=\"add-search-to-the-dashboard\">Add search to the dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"为仪表盘添加搜索功能\">为仪表盘添加搜索功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#为仪表盘添加搜索功能\"><i class=\"material-icons\">link</i></a></h3>\n<p>Open the <code>DashboardComponent</code> template and\nadd the hero search element, <code>&#x3C;app-hero-search></code>, to the bottom of the markup.</p>\n<p>打开 <code>DashboardComponent</code> 的模板并且把用于搜索英雄的元素 <code>&#x3C;app-hero-search></code> 添加到代码的底部。</p>\n<code-example header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&#x3C;h2>Top Heroes&#x3C;/h2>\n&#x3C;div class=\"heroes-menu\">\n  &#x3C;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      {{hero.name}}\n  &#x3C;/a>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-example>\n<p>This template looks a lot like the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeater in the <code>HeroesComponent</code> template.</p>\n<p>这个模板看起来很像 <code>HeroesComponent</code> 模板中的 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 复写器。</p>\n<p>For this to work, the next step is to add a component with a selector that matches <code>&#x3C;app-hero-search></code>.</p>\n<p>为此，下一步就是添加一个组件，它的选择器要能匹配 <code>&#x3C;app-hero-search></code>。</p>\n<h3 id=\"create-herosearchcomponent\">Create <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"创建-herosearchcomponent\">创建 <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#创建-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p>Run <code>ng generate</code> to create a <code>HeroSearchComponent</code>.</p>\n<p>运行 <code>ng generate</code> 以创建一个 <code>HeroSearchComponent</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-search\n\n</code-example>\n<p><code>ng generate</code> creates the three <code>HeroSearchComponent</code> files and adds the component to the <code>AppModule</code> declarations.</p>\n<p>CLI 生成了 <code>HeroSearchComponent</code> 的三个文件，并把该组件添加到了 <code>AppModule</code> 的声明中。</p>\n<p>Replace the <code>HeroSearchComponent</code> template with an <code>&#x3C;input></code> and a list of matching search results, as follows.</p>\n<p>把生成的 <code>HeroSearchComponent</code> 的<em>模板</em>改成一个 <code>&#x3C;input></code> 和一个匹配到的搜索结果的列表。代码如下。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;label for=\"search-box\">Hero Search&#x3C;/label>\n  &#x3C;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | async\" >\n      &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/a>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-example>\n<p>Add private CSS styles to <code>hero-search.component.css</code> as listed in the <a href=\"tutorial/toh-pt6#herosearchcomponent\">final code review</a> below.</p>\n<p>从下面的 <a href=\"tutorial/toh-pt6#herosearchcomponent\">最终代码</a> 中把私有 CSS 样式添加到 <code>hero-search.component.css</code> 中。</p>\n<p>As the user types in the search box, an input event binding calls the component's <code>search()</code> method with the new search box value.</p>\n<p>当用户在搜索框中输入时，一个 <code>input</code> 事件绑定会调用该组件的 <code>search()</code> 方法，并传入新的搜索框的值。</p>\n<p><a id=\"asyncpipe\"></a></p>\n<h3 id=\"asyncpipe\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#asyncpipe\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeats hero objects.\nNotice that the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> iterates over a list called <code>heroes$</code>, not <code>heroes</code>.\nThe <code>$</code> is a convention that indicates <code>heroes$</code> is an <code>Observable</code>, not an array.</p>\n<p><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 会重复渲染这些英雄对象。注意，<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 在一个名叫 <code>heroes$</code> 的列表上迭代，而不是 <code>heroes</code>。<code>$</code> 是一个约定，表示 <code>heroes$</code> 是一个 <code>Observable</code> 而不是数组。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"async\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | async\" >\n\n</code-example>\n<p>Since <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> can't do anything with an <code>Observable</code>, use the pipe <code>|</code> character followed by <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code>.\nThis identifies Angular's <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> and subscribes to an <code>Observable</code> automatically so you won't have to do so in the component class.</p>\n<p>由于 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 不能直接使用 <code>Observable</code>，所以要使用一个管道字符（<code>|</code>），后面紧跟着一个 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code>。这表示 Angular 的 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 管道，它会自动订阅 <code>Observable</code>，这样你就不用在组件类中这么做了。</p>\n<h3 id=\"edit-the-herosearchcomponent-class\">Edit the <code>HeroSearchComponent</code> class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#edit-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"修正-herosearchcomponent-类\">修正 <code>HeroSearchComponent</code> 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#修正-herosearchcomponent-类\"><i class=\"material-icons\">link</i></a></h3>\n<p>Replace the <code>HeroSearchComponent</code> class and metadata as follows.</p>\n<p>修改所生成的 <code>HeroSearchComponent</code> 类及其元数据，代码如下。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p>Notice the declaration of <code>heroes$</code> as an <code>Observable</code>:</p>\n<p>注意，<code>heroes$</code> 声明为一个 <code>Observable</code></p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\nheroes$!: Observable&#x3C;Hero[]>;\n\n</code-example>\n<p>Set this in <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a>.\nBefore you do, focus on the definition of <code>searchTerms</code>.</p>\n<p>你将会在 <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a> 中设置它，在此之前，先仔细看看 <code>searchTerms</code> 的定义。</p>\n<h3 id=\"the-searchterms-rxjs-subject\">The <code>searchTerms</code> RxJS subject<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"rxjs-subject-类型的-searchterms\">RxJS <code>Subject</code> 类型的 <code>searchTerms</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#rxjs-subject-类型的-searchterms\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>searchTerms</code> property is an RxJS <code>Subject</code>.</p>\n<p><code>searchTerms</code> 属性是 RxJS 的 <code>Subject</code> 类型。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&#x3C;string>();\n\n// Push a search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p>A <code>Subject</code> is both a source of observable values and an <code>Observable</code> itself.\nYou can subscribe to a <code>Subject</code> as you would any <code>Observable</code>.</p>\n<p><code>Subject</code> 既是可观察对象的数据源，本身也是 <code>Observable</code>。你可以像订阅任何 <code>Observable</code> 一样订阅 <code>Subject</code>。</p>\n<p>You can also push values into that <code>Observable</code> by calling its <code>next(value)</code> method as the <code>search()</code> method does.</p>\n<p>你还可以通过调用它的 <code>next(value)</code> 方法往 <code>Observable</code> 中推送一些值，就像 <code>search()</code> 方法中一样。</p>\n<p>The event binding to the text box's <code>input</code> event calls the <code>search()</code> method.</p>\n<p>文本框的 <code>input</code> 事件的<em>事件绑定</em>会调用 <code>search()</code> 方法。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"input\">\n&#x3C;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n</code-example>\n<p>Every time the user types in the text box, the binding calls <code>search()</code> with the text box value as a <em>search term</em>.\nThe <code>searchTerms</code> becomes an <code>Observable</code> emitting a steady stream of search terms.</p>\n<p>每当用户在文本框中输入时，这个事件绑定就会使用文本框的值（搜索词）调用 <code>search()</code> 函数。<code>searchTerms</code> 变成了一个能发出搜索词的稳定的流。</p>\n<p><a id=\"search-pipe\"></a></p>\n<h3 id=\"chaining-rxjs-operators\">Chaining RxJS operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"串联-rxjs-操作符\">串联 RxJS 操作符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#串联-rxjs-操作符\"><i class=\"material-icons\">link</i></a></h3>\n<p>Passing a new search term directly to the <code>searchHeroes()</code> after every user keystroke creates excessive HTTP requests, which taxes server resources and burning through data plans.</p>\n<p>如果每当用户按键后就直接调用 <code>searchHeroes()</code> 将导致创建海量的 HTTP 请求，浪费服务器资源并干扰数据调度计划。</p>\n<p>Instead, the <code>ngOnInit()</code> method pipes the <code>searchTerms</code> observable through a sequence of RxJS operators that reduce the number of calls to the <code>searchHeroes()</code>. Ultimately, this returns an observable of timely hero search results where each one is a <code>Hero[]</code>.</p>\n<p>应该怎么做呢？<code>ngOnInit()</code> 往 <code>searchTerms</code> 这个可观察对象的处理管道中加入了一系列 RxJS 操作符，用以缩减对 <code>searchHeroes()</code> 的调用次数。最终，它返回一个可及时给出英雄搜索结果的可观察对象，这里每次都是 <code>Hero[]</code>。</p>\n<p>Here's a closer look at the code.</p>\n<p>代码如下。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as previous term\n  distinctUntilChanged(),\n\n  // switch to new search observable each time the term changes\n  switchMap((term: string) => this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<p>Each operator works as follows:</p>\n<p>各个操作符的工作方式如下：</p>\n<ul>\n<li>\n<p><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds before passing along the latest string.\nRequests aren't likely to happen more frequently than 300 ms.</p>\n<p>在传出最终字符串之前，<code>debounceTime(300)</code> 将会等待，直到新增字符串的事件暂停了 300 毫秒。你实际发起请求的间隔永远不会小于 300ms。</p>\n</li>\n<li>\n<p><code>distinctUntilChanged()</code> ensures that a request is sent only if the filter text changed.</p>\n<p><code>distinctUntilChanged()</code> 会确保只在过滤条件变化时才发送请求。</p>\n</li>\n<li>\n<p><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce()</code> and <code>distinctUntilChanged()</code>.\nIt cancels and discards previous search observables, returning only the latest search service observable.</p>\n<p><code>switchMap()</code> 会为每个从 <code>debounce()</code> 和 <code>distinctUntilChanged()</code> 中通过的搜索词调用搜索服务。它会取消并丢弃以前的搜索可观察对象，只保留最近的。</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>With the <a href=\"https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap\"><code>switchMap</code> operator</a>, every qualifying key event can trigger an <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method call.\nEven with a 300 ms pause between requests, you could have many HTTP requests in flight and they may not return in the order sent.</p>\n<p>借助 <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap 操作符</a>，每个有效的按键事件都会触发一次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法调用。即使在每个请求之间都有至少 300ms 的间隔，仍然可能会同时存在多个尚未返回的 HTTP 请求。</p>\n<p><code>switchMap()</code> preserves the original request order while returning only the observable from the most recent HTTP method call.\nResults from prior calls are canceled and discarded.</p>\n<p><code>switchMap()</code> 会记住原始的请求顺序，只会返回最近一次 HTTP 方法调用的结果。以前的那些请求都会被取消和舍弃。</p>\n<div class=\"alert is-helpful\">\n<p>Canceling a previous <code>searchHeroes()</code> Observable doesn't actually cancel a pending HTTP request.\nUnwanted results are discarded before they reach your application code.</p>\n<p><strong>注意</strong>：<br>\n取消前一个 <code>searchHeroes()</code> 可观察对象并不会中止尚未完成的 HTTP 请求。那些不想要的结果只会在它们抵达应用代码之前被舍弃。</p>\n</div>\n</div>\n<p>Remember that the component <em>class</em> doesn't subscribe to the <code>heroes$</code> <em>observable</em>.\nThat's the job of the <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> in the template.</p>\n<p>记住，组件类中并没有订阅 <code>heroes$</code> 这个可观察对象，而是由模板中的 <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> 完成的。</p>\n<h4 id=\"try-it\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"试试看\">试试看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#试试看\"><i class=\"material-icons\">link</i></a></h4>\n<p>Run the application again.\nIn the <em>Dashboard</em>, enter some text in the search box.\nEnter characters that match any existing hero names, and look for something like this.</p>\n<p>再次运行本应用。在这个 <em>仪表盘</em> 中，在搜索框中输入一些文字。如果你输入的字符匹配上了任何现有英雄的名字，你将会看到如下效果。</p>\n<div class=\"lightbox\">\n<img alt=\"Hero Search field with the letters &#x27;m&#x27; and &#x27;a&#x27; along with four search results that match the query displayed in a list beneath the search input\" src=\"generated/images/guide/toh/toh-hero-search.gif\" width=\"400\" height=\"299\">\n</div>\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"查看最终代码\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#查看最终代码\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are the code files discussed on this page. They're found in the <code>src/app/</code> directory.</p>\n<p>本文讨论过的代码文件如下。它们都位于 <code>src/app/</code> 文件夹中。</p>\n<p><a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a></p>\n<p><a id=\"appmodule\"></a></p>\n<h3 id=\"heroservice-inmemorydataservice-appmodule\"><code>HeroService</code>, <code>InMemoryDataService</code>, <code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  httpOptions = {\n    headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable&#x3C;Hero[]> {\n    return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&#x3C;Hero[]>(url)\n      .pipe(\n        map(heroes => heroes[0]), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&#x3C;Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable&#x3C;Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&#x3C;Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable&#x3C;Hero> {\n    return this.http.post&#x3C;Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError&#x3C;Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&#x3C;Hero>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable&#x3C;any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&#x3C;any>('updateHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError&#x3C;T>(operation = 'operation', result?: T) {\n    return (error: any): Observable&#x3C;T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroSearchComponent } from './hero-search/hero-search.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when a real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"heroescomponent\"></a></p>\n<h3 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;div>\n  &#x3C;label for=\"new-hero\">Hero name: &#x3C;/label>\n  &#x3C;input id=\"new-hero\" #heroName />\n\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button type=\"button\" class=\"add-button\" (click)=\"add(heroName.value); heroName.value=''\">\n    Add hero\n  &#x3C;/button>\n&#x3C;/div>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n    &#x3C;button type=\"button\" class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n\n</code-pane>\n    <code-pane header=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero => {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h => h !== hero);\n    this.heroService.deleteHero(hero.id).subscribe();\n  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\ninput {\n  display: block;\n  width: 100%;\n  padding: .5rem;\n  margin: 1rem 0;\n  box-sizing: border-box;\n}\n\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n  display: block;\n  width: 100%;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.add-button {\n padding: .5rem 1.5rem;\n font-size: 1rem;\n margin-bottom: 2rem;\n}\n\n.add-button:hover {\n  color: white;\n  background-color: #42545C;\n}\n\nbutton.delete {\n  position: absolute;\n  left: 210px;\n  top: 5px;\n  background-color: white;\n  color:  #525252;\n  font-size: 1.1rem;\n  margin: 0;\n  padding: 1px 10px 3px 10px;\n}\n\nbutton.delete:hover {\n  background-color: #525252;\n  color: white;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herodetailcomponent\"></a></p>\n<h3 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"hero-name\">Hero name: &#x3C;/label>\n    &#x3C;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"Hero name\"/>\n  &#x3C;/div>\n  &#x3C;button type=\"button\" (click)=\"goBack()\">go back&#x3C;/button>\n  &#x3C;button type=\"button\" (click)=\"save()\">save&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n    <code-pane header=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero | undefined;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = parseInt(this.route.snapshot.paramMap.get('id')!, 10);\n    this.heroService.getHero(id)\n      .subscribe(hero => this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  save(): void {\n    if (this.hero) {\n      this.heroService.updateHero(this.hero)\n        .subscribe(() => this.goBack());\n    }\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-detail/hero-detail.component.css\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  color: #435960;\n  font-weight: bold;\n}\ninput {\n  font-size: 1em;\n  padding: .5rem;\n}\nbutton {\n  margin-top: 20px;\n  margin-right: .5rem;\n  background-color: #eee;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"dashboardcomponent\"></a></p>\n<h3 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&#x3C;h2>Top Heroes&#x3C;/h2>\n&#x3C;div class=\"heroes-menu\">\n  &#x3C;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      {{hero.name}}\n  &#x3C;/a>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-pane>\n    <code-pane header=\"dashboard/dashboard.component.ts\" path=\"toh-pt6/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"dashboard/dashboard.component.css\" path=\"toh-pt6/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: black;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herosearchcomponent\"></a></p>\n<h3 id=\"herosearchcomponent\"><code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;label for=\"search-box\">Hero Search&#x3C;/label>\n  &#x3C;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | async\" >\n      &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/a>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-pane>\n    <code-pane header=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n\nlabel {\n  display: block;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin-top: 1rem;\n  margin-bottom: .5rem;\n\n}\ninput {\n  padding: .5rem;\n  width: 100%;\n  max-width: 600px;\n  box-sizing: border-box;\n  display: block;\n}\n\ninput:focus {\n  outline: #336699 auto 1px;\n}\n\nli {\n  list-style-type: none;\n}\n.search-result li a {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  display: inline-block;\n  width: 100%;\n  max-width: 600px;\n  padding: .5rem;\n  box-sizing: border-box;\n  text-decoration: none;\n  color: black;\n}\n\n.search-result li a:hover {\n  background-color: #435A60;\n  color: white;\n}\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"小结\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#小结\"><i class=\"material-icons\">link</i></a></h2>\n<p>You're at the end of your journey, and you've accomplished a lot.</p>\n<p>旅程即将结束，不过你已经收获颇丰。</p>\n<ul>\n<li>\n<p>You added the necessary dependencies to use HTTP in the application</p>\n<p>你添加了在应用程序中使用 HTTP 的必备依赖</p>\n</li>\n<li>\n<p>You refactored <code>HeroService</code> to load heroes from a web API</p>\n<p>你重构了 <code>HeroService</code>，以通过 web API 来加载英雄数据</p>\n</li>\n<li>\n<p>You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods</p>\n<p>你扩展了 <code>HeroService</code> 来支持 <code>post()</code>、<code>put()</code> 和 <code>delete()</code> 方法</p>\n</li>\n<li>\n<p>You updated the components to allow adding, editing, and deleting of heroes</p>\n<p>你修改了组件，以允许用户添加、编辑和删除英雄</p>\n</li>\n<li>\n<p>You configured an in-memory web API</p>\n<p>你配置了一个内存 Web API</p>\n</li>\n<li>\n<p>You learned how to use observables</p>\n<p>你学会了如何使用“可观察对象”</p>\n</li>\n</ul>\n<p>This concludes the \"Tour of Heroes\" tutorial.\nYou're ready to learn more about Angular development in the fundamentals section, starting with the <a href=\"guide/architecture\" title=\"Architecture\">Architecture</a> guide.</p>\n<p>《英雄之旅》教程结束了。如果你准备开始学习 Angular 开发的原理，请开始 <a href=\"guide/architecture\" title=\"Architecture\">架构</a> 一章。</p>\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/Location\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#delete\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClientModule\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - guide/architecture\n - tutorial/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\n - tutorial/toh-pt6#add-a-new-hero\n - tutorial/toh-pt6#add-heroserviceupdatehero\n - tutorial/toh-pt6#add-search-to-the-dashboard\n - tutorial/toh-pt6#asyncpipe\n - tutorial/toh-pt6#chaining-rxjs-operators\n - tutorial/toh-pt6#create-herosearchcomponent\n - tutorial/toh-pt6#dashboardcomponent\n - tutorial/toh-pt6#delete-a-hero\n - tutorial/toh-pt6#edit-the-herosearchcomponent-class\n - tutorial/toh-pt6#enable-http-services\n - tutorial/toh-pt6#error-handling\n - tutorial/toh-pt6#final-code-review\n - tutorial/toh-pt6#get-data-from-a-server\n - tutorial/toh-pt6#get-hero-by-id\n - tutorial/toh-pt6#get-heroes-with-httpclient\n - tutorial/toh-pt6#handleerror\n - tutorial/toh-pt6#herodetailcomponent\n - tutorial/toh-pt6#heroes-and-http\n - tutorial/toh-pt6#heroescomponent\n - tutorial/toh-pt6#herosearchcomponent\n - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/toh-pt6#heroservicesearchheroes\n - tutorial/toh-pt6#httpclient-methods-return-one-value\n - tutorial/toh-pt6#httpclient-的方法返回单个值\n - tutorial/toh-pt6#httpclientget-returns-response-data\n - tutorial/toh-pt6#httpclientget-返回响应数据\n - tutorial/toh-pt6#import-heroes\n - tutorial/toh-pt6#rxjs-subject-类型的-searchterms\n - tutorial/toh-pt6#search-by-name\n - tutorial/toh-pt6#search-pipe\n - tutorial/toh-pt6#simulate-a-data-server\n - tutorial/toh-pt6#summary\n - tutorial/toh-pt6#tap-into-the-observable\n - tutorial/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/toh-pt6#try-it\n - tutorial/toh-pt6#update-heroes\n - tutorial/toh-pt6#串联-rxjs-操作符\n - tutorial/toh-pt6#为仪表盘添加搜索功能\n - tutorial/toh-pt6#从服务端获取数据\n - tutorial/toh-pt6#修改英雄\n - tutorial/toh-pt6#修正-herosearchcomponent-类\n - tutorial/toh-pt6#创建-herosearchcomponent\n - tutorial/toh-pt6#删除某个英雄\n - tutorial/toh-pt6#启用-http-服务\n - tutorial/toh-pt6#小结\n - tutorial/toh-pt6#往仪表盘中加入英雄搜索特性\n - tutorial/toh-pt6#查看最终代码\n - tutorial/toh-pt6#根据名字搜索\n - tutorial/toh-pt6#模拟数据服务器\n - tutorial/toh-pt6#添加-heroserviceupdatehero\n - tutorial/toh-pt6#添加一个新英雄\n - tutorial/toh-pt6#窥探-observable\n - tutorial/toh-pt6#英雄与-http\n - tutorial/toh-pt6#试试看\n - tutorial/toh-pt6#通过-httpclient-获取英雄\n - tutorial/toh-pt6#通过-id-获取英雄\n - tutorial/toh-pt6#错误处理\n - http://www.learnrxjs.io/operators/transformation/switchmap.html\n - https://github.com/angular/angular-cn/edit/cn/aio/content/tutorial/toh-pt6.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\n - https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap\n-->"
}