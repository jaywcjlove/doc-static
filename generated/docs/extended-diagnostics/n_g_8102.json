{
  "id": "extended-diagnostics/NG8102",
  "title": "NG8102: Nullish coalescing not nullable\n\n空值合并运算符用于不可空变量",
  "contents": "<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/extended-diagnostics/NG8102.md?message=docs(...)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n<div class=\"content\">\n\n  <h1 id=\"ng8102-nullish-coalescing-not-nullable空值合并运算符用于不可空变量\">NG8102: Nullish coalescing not nullable\n\n空值合并运算符用于不可空变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#ng8102-nullish-coalescing-not-nullable空值合并运算符用于不可空变量\"><i class=\"material-icons\">link</i></a></h1>\n\n  <div class=\"diagnostic-description\">\n    <h2 translation-result=\"on\" id=\"说明\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#说明\"><i class=\"material-icons\">link</i></a></h2>\n    <h2 translation-origin=\"off\" id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>This diagnostic detects a useless nullish coalescing operator (<code>??</code>) characters in Angular templates.\nSpecifically, it looks for operations where the input is not \"nullable\", meaning its type does not include <code>null</code> or <code>undefined</code>.\nFor such values, the right side of the <code>??</code> will never be used.</p>\n<p>此诊断会在 Angular 模板中检测到无用的空值合并运算符 ( <code>??</code> ) 字符。具体来说，它会查找输入不可“为空”的操作，这意味着其类型不包括 <code>null</code> 或 <code>undefined</code>。对于这样的值，<code>??</code> 的右侧永远不会被使用。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template displays `foo` if present, falls back to 'bar' if it is `null`\n  // or `undefined`.\n  template: `<div>{{ foo ?? 'bar' }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is declared as a `string` which *cannot* be `null` or `undefined`.\n  foo: string = 'test';\n}\n\n</code-example>\n<h2 id=\"whats-wrong-with-that\">What's wrong with that?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#whats-wrong-with-that\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"那有什么问题\">那有什么问题？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#那有什么问题\"><i class=\"material-icons\">link</i></a></h2>\n<p>Using the nullish coalescing operator with a non-nullable input has no effect and is indicative of a discrepancy between the allowed type of a value and how it is presented in the template.\nA developer might reasonably assume that the right side of the nullish coalescing operator is displayed in some case, but it will never actually be displayed.\nThis can lead to confusion about the expected output of the program.</p>\n<p>将空值合并运算符与不可为空的输入一起使用没有任何效果，并且揭示出允许的值类型与它在模板中的呈现方式之间可能存在差异。开发人员可能会合理地假定在某些情况下会显示空值合并运算符的右侧，但它永远不会真正显示出来。这可能会导致对程序的预期输出感到困惑。</p>\n<h2 id=\"what-should-i-do-instead\">What should I do instead?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#what-should-i-do-instead\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"我该怎么办\">我该怎么办？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#我该怎么办\"><i class=\"material-icons\">link</i></a></h2>\n<p>Update the template and declared type to be in sync.\nDouble-check the type of the input and confirm whether it is actually expected to be nullable.</p>\n<p>更新模板和声明的类型以同步两者。仔细检查输入的类型，并确认它是否真是可空的。</p>\n<p>If the input should be nullable, add <code>null</code> or <code>undefined</code> to its type to indicate this.</p>\n<p>如果输入应该是可空的，请在其类型中添加 <code>null</code> 或 <code>undefined</code> 以表明这一点。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `<div>{{ foo ?? 'bar' }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is now nullable. If it is ever set to `null`, 'bar' will be displayed.\n  foo: string | null = 'test';\n}\n\n</code-example>\n<p>If the input should <em>not</em> be nullable, delete the <code>??</code> operator and its right operand, since the value is guaranteed by TypeScript to always be non-nullable.</p>\n<p>如果输入<em>不</em>应该为空，请删除 <code>??</code> 运算符及其右操作数，因为 TypeScript 会保证该值始终不可为空。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template always displays `foo`, which is guaranteed to never be `null` or\n  // `undefined`.\n  template: `<div>{{ foo }}</div>`,\n  // …\n})\nclass MyComponent {\n  foo: string = 'test';\n}\n\n</code-example>\n<h2 id=\"configuration-requirements\">Configuration requirements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#configuration-requirements\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"配置要求\">配置要求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#配置要求\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"guide/template-typecheck#strict-mode\"><code>strictTemplates</code></a> must be enabled for any extended diagnostic to emit.\n<a href=\"guide/template-typecheck#strict-null-checks\"><code>strictNullChecks</code></a> must also be enabled to emit any <code>nullishCoalescingNotNullable</code> diagnostics.</p>\n<p>必须启用 <a href=\"guide/template-typecheck#strict-mode\"><code>strictTemplates</code></a> 才能发出任何扩展诊断。还必须启用 <a href=\"guide/template-typecheck#strict-null-checks\"><code>strictNullChecks</code></a> 才能发出任何 <code>nullishCoalescingNotNullable</code> 诊断信息。</p>\n<h2 id=\"what-if-i-cant-avoid-this\">What if I can't avoid this?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#what-if-i-cant-avoid-this\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"如果我无法避免这种情况怎么办\">如果我无法避免这种情况怎么办？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#如果我无法避免这种情况怎么办\"><i class=\"material-icons\">link</i></a></h2>\n<p>This diagnostic can be disabled by editing the project's <code>tsconfig.json</code> file:</p>\n<p>可以通过编辑项目的 <code>tsconfig.json</code> 文件来禁用此诊断：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"angularCompilerOptions\": {\n    \"extendedDiagnostics\": {\n      \"checks\": {\n        \"nullishCoalescingNotNullable\": \"suppress\"\n      }\n    }\n  }\n}\n\n</code-example>\n<p>See <a href=\"extended-diagnostics#configuration\">extended diagnostic configuration</a> for more info.</p>\n<p>有关更多信息，请参阅<a href=\"extended-diagnostics#configuration\">扩展诊断配置</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  </div>\n\n</div>\n\n<!-- links to this doc:\n - extended-diagnostics\n-->\n<!-- links from this doc:\n - api/core/Component\n - extended-diagnostics#configuration\n - extended-diagnostics/NG8102#configuration-requirements\n - extended-diagnostics/NG8102#description\n - extended-diagnostics/NG8102#ng8102-nullish-coalescing-not-nullable空值合并运算符用于不可空变量\n - extended-diagnostics/NG8102#what-if-i-cant-avoid-this\n - extended-diagnostics/NG8102#what-should-i-do-instead\n - extended-diagnostics/NG8102#whats-wrong-with-that\n - extended-diagnostics/NG8102#如果我无法避免这种情况怎么办\n - extended-diagnostics/NG8102#我该怎么办\n - extended-diagnostics/NG8102#说明\n - extended-diagnostics/NG8102#那有什么问题\n - extended-diagnostics/NG8102#配置要求\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#strict-null-checks\n - https://github.com/angular/angular-cn/edit/cn/aio/content/extended-diagnostics/NG8102.md?message=docs(...)%3A%20请简述你的修改...\n-->"
}