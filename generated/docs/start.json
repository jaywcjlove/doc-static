{
  "id": "start",
  "title": "Part 1: Getting started with a basic Angular app",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/start/index.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"part-1-getting-started-with-a-basic-angular-app\" translation-result=\"on\">Angular 入门：你的第一个应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#part-1-getting-started-with-a-basic-angular-app\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"part-1-getting-started-with-a-basic-angular-app\">Part 1: Getting started with a basic Angular app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#part-1-getting-started-with-a-basic-angular-app\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 欢迎你！</p><p translation-origin=\"off\">Welcome to Angular!</p>\n\n<p translation-result=\"on\">本教程将通过一个简单的电子商务网站，向你介绍 Angular 的基本知识。该网站具有商品名录、购物车和结账表单。\n为了帮助你更好地起步，本指南提供了一个已完成的简单应用，你可以在其中试验及互动，而不用<a href=\"guide/setup-local\" title=\"Setup guide\">建立本地开发环境</a>。</p><p translation-origin=\"off\">This tutorial introduces you to the essentials of Angular by walking you through a simple e-commerce site with a catalog, shopping cart, and check-out form.\nTo help you get started right away, this guide uses a simple ready-made application that you can examine and modify interactively (without having to <a href=\"guide/setup-local\" title=\"Setup guide\">set up a local work environment</a>).</p>\n\n<div class=\"callout is-helpful\">\n<header translation-result=\"on\">你是 Web 开发的新手吗？</header><header translation-origin=\"off\">New to web development?</header>\n\n<p translation-result=\"on\">你可以找到很多资源作为 Angular 文档的补充。Mozilla 的 MDN 文档同时包含了 <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML\" title=\"学习 HTML：指南和教程\">HTML</a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" title=\"JavaScript\">JavaScript 的</a> 介绍。<a href=\"https://www.typescriptlang.org/docs/home.html\" title=\"TypeScript 文档\">TypeScript 的文档</a>中包含一个 5 分钟教程。各种在线课程平台，比如 <a href=\"http://www.udemy.com\" title=\"Udemy 在线课程\">Udemy</a> 和 <a href=\"https://www.codecademy.com/\" title=\"Codeacademy 在线课程\">Codecademy</a>，也涵盖了 Web 开发的一些基础知识。</p><p translation-origin=\"off\"> There are many resources to complement the Angular docs. Mozilla's MDN docs include both <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML\" title=\"Learning HTML: Guides and tutorials\">HTML</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" title=\"JavaScript\">JavaScript</a> introductions. <a href=\"https://www.typescriptlang.org/docs/home.html\" title=\"TypeScript documentation\">TypeScript's docs</a> include a 5-minute tutorial. Various online course platforms, such as <a href=\"http://www.udemy.com\" title=\"Udemy online courses\">Udemy</a> and <a href=\"https://www.codecademy.com/\" title=\"Codecademy online courses\">Codecademy</a>, also cover web development basics.</p>\n\n</div>\n<a id=\"new-project\"></a>\n<h2 id=\"create-the-sample-project\" translation-result=\"on\">创建范例项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-sample-project\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-sample-project\">Create the sample project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-sample-project\"><i class=\"material-icons\">link</i></a></h2>\n\n<h4 id=\"点此在-stackblitz-上创建一个新项目。\">\n<live-example name=\"getting-started-v0\" nodownload=\"\">点此在 StackBlitz 上创建一个新项目。</live-example>\n<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#点此在-stackblitz-上创建一个新项目。\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/new-app-all.gif\" alt=\"Starter online store app\" width=\"600\" height=\"219\">\n</div>\n<ul>\n<li>\n<p translation-result=\"on\">  右侧的预览窗格显示了示例 Angular 应用程序的初始状态。它定义了一个带有顶栏的框架（包含商店名称和结账图标）以及一个产品列表的标题（它将用来自应用中的数据填充并动态更新产品列表）</p><p translation-origin=\"off\">The preview pane on the right shows the starting state of the sample Angular app.\nIt defines a frame with a top bar (containing the store name and checkout icon) and the title for a product list (which will be populated and dynamically updated with data from the application).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">左侧的项目窗格显示了组成应用程序的源文件，包括所有基础设施和配置文件。当前选中的文件显示在中间的编辑器窗格中。</p><p translation-origin=\"off\">The project pane on the left shows the source files that make up the application, including all of the infrastructure and configuration files. The currently selected file shows up in the editor pane in the middle.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在深入源码结构之前，下一节将介绍如何使用提供的示例数据为产品列表编写 HTML <em>模板</em>。\n这将让你知道动态修改和更新页面有多容易。</p><p translation-origin=\"off\">Before going into the source structure, the next section shows how to fill out the HTML <em>template</em> for the product list, using the provided sample data.\nThis should give you an idea how easy it is to modify and update the page dynamically.</p>\n\n<div class=\"callout is-helpful\">\n<header>StackBlitz 提示</header>\n<ul>\n<li>\n<p translation-result=\"on\">  登录 StackBlitz，就可以随时保存和恢复你的工作。如果你已经有了 GitHub 账号，也可以用该账号登录 StackBlitz。为了保存你的进程，首先使用左上方的 Fork 按钮来为本项目开个分支，然后你就能通过点击 “Save” 按钮来把你的工作保存到你自己的 StackBlitz 账号中了。</p><p translation-origin=\"off\">Log into StackBlitz so you can save and resume your work.\nIf you have a GitHub account, you can log into StackBlitz\nwith that account. In order to save your progress, first\nfork the project using the Fork button at the top left,\nthen you'll be able to save your work to your own StackBlitz\naccount by clicking the Save button.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   要复制本教程中的代码示例，请单击代码示例框右上角的图标，然后将剪贴板中的代码片段粘贴到 StackBlitz 中。</p><p translation-origin=\"off\">To copy a code example from this tutorial, click the icon\nat the top right of the code example box, and then paste the\ncode snippet from the clipboard into StackBlitz.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   如果 StackBlitz 预览窗格没有如你预期般显示出来，请保存并点击刷新按钮。</p><p translation-origin=\"off\">If the StackBlitz preview pane isn't showing what you\nexpect, save and then click the refresh button.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   StackBlitz 正在不断改进，因此生成的代码可能会略有不同，但应用的行为是一样的。</p><p translation-origin=\"off\">StackBlitz is continually improving, so there may be\nslight differences in generated code, but the app's\nbehavior will be the same.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  当生成本教程附带的 StackBlitz 示例应用时，StackBlitz 会为你创建启动程序文件和模拟数据。整个教程中你要用到的文件位于 StackBlitz 示例应用的 <code>src</code> 文件夹中。</p><p translation-origin=\"off\">When you generate the StackBlitz example apps that\naccompany the tutorials, StackBlitz creates the starter\nfiles and mock data for you. The files you'll use throughout\nthe tutorials are in the <code>src</code> folder of the StackBlitz\nexample apps.</p>\n\n</li>\n</ul>\n</div>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">如果直接进入 <a href=\"https://stackblitz.com/\">StackBlitz 在线开发环境</a> 并选择 <a href=\"https://stackblitz.com/fork/angular\">start a new Angular workspace</a>，你将获得一个通用的应用骨架，而不是此<a href=\"start#new-project\">解说性范例</a>。等介绍完这里的基本概念后，它对于你在学习 Angular 时交互式的进行工作很有帮助。</p><p translation-origin=\"off\">If you go directly to the <a href=\"https://stackblitz.com/\">StackBlitz online development environment</a> and choose to <a href=\"https://stackblitz.com/fork/angular\">start a new Angular workspace</a>, you get a generic stub application, rather than this <a href=\"start#new-project\">illustrative sample</a>. Once you have been introduced to the basic concepts here, this can be helpful for working interactively while you are learning Angular.</p>\n\n<p translation-result=\"on\">在实际开发中，通常会使用 <a href=\"guide/glossary#command-line-interface-cli\">Angular CLI</a>，这是一个功能强大的命令行工具，可以让你生成和修改应用程序。如果需要一个完整的分步指南，来学习如何使用 CLI 创建新项目及其各种部件，请参见<a href=\"tutorial\">英雄指南教程</a>。</p><p translation-origin=\"off\">In actual development you will typically use the <a href=\"guide/glossary#command-line-interface-cli\" title=\"Definition of CLI\">Angular CLI</a>, a powerful command-line tool that lets you generate and modify applications. For a full step-by-step guide that shows how to use the CLI to create a new project and all of its parts, see <a href=\"tutorial\">Tutorial: Tour of Heroes</a>.</p>\n\n</div>\n<a id=\"template-syntax\"></a>\n<h2 id=\"template-syntax\" translation-result=\"on\">模板语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#template-syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-syntax\">Template syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#template-syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 的模板语法扩展了 HTML 和 JavaScript。在本节中，你将通过增强 “商品” 区域来了解模板语法。</p><p translation-origin=\"off\">Angular's template syntax extends HTML and JavaScript.\nThis section introduces template syntax by enhancing the \"Products\" area.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">为了让你专注于模板语法，下列步骤使用了来自 <code>products.ts</code> 文件（由 StackBlitz 范例创建的）的预定义产品数据和来自 <code>product-list.component.ts</code> 文件的方法。</p><p translation-origin=\"off\">To help you get going, the following steps use predefined product data from the <code>products.ts</code> file (already created in StackBlitz example) and methods from the <code>product-list.component.ts</code> file.</p>\n\n</div>\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-list</code> 文件夹中，打开模板文件 <code>product-list.component.html</code>。</p><p translation-origin=\"off\">In the <code>product-list</code> folder, open the template file <code>product-list.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改商品列表模板，看是否列出了商品名称。</p><p translation-origin=\"off\">Modify the product list template to display a list of product names.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"> 列表中的每个商品都以同样的方式在页面上挨个显示出来。要遍历这些预定义的商品列表，请使用 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令，把 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令加到 <code>&#x3C;div></code> 上，如下图所示：</p><p translation-origin=\"off\">Each product in the list displays the same way, one after another on the page. To iterate over the predefined list of products, put the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive on a <code>&#x3C;div></code>, as follows:</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\" region=\"ngfor\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">有了 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，这个 <code>&#x3C;div></code> 就会被列表中的每个商品都重复渲染一次。</p><p translation-origin=\"off\">With <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, the <code>&#x3C;div></code> repeats for each product in the list.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 是一个 \"结构型指令\"。结构型指令会通过添加、删除和操纵它们的宿主元素等方式塑造或重塑 DOM 的结构。带有星号 <code>*</code> 的指令都是结构型指令。</p><p translation-origin=\"off\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is a \"structural directive\". Structural directives shape or reshape the DOM's structure, typically by adding, removing, and manipulating the elements to which they are attached. Directives with an asterisk, <code>*</code>, are structural directives.</p>\n\n</div>\n</li>\n<li>\n<p translation-result=\"on\"> 要显示商品的名称，请使用插值语法 <code>{{}}</code>。插值会把属性的值作为文本渲染出来。在 <code>&#x3C;div></code> 里面，添加一个 <code>&#x3C;h3></code> 标题来显示商品 name 属性的插值：</p><p translation-origin=\"off\">To display the names of the products, use the interpolation syntax <code>{{ }}</code>. Interpolation renders a property's value as text. Inside the <code>&#x3C;div></code>, add an <code>&#x3C;h3></code> to display the interpolation of the product's name property:</p>\n\n<code-example path=\"getting-started/src/app/product-list/product-list.component.2.html\" header=\"src/app/product-list/product-list.component.html\" region=\"interpolation\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n      {{ product.name }}\n  &#x3C;/h3>\n\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">预览窗格会立即更新，以显示列表中每个商品的名称。</p><p translation-origin=\"off\">The preview pane immediately updates to display the name of each product in the list.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/template-syntax-product-names.png\" alt=\"Product names added to list\" width=\"259\" height=\"271\">\n</div>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">为了让每个商品名称都能链接到商品详情，添加一个 <code>&#x3C;a></code> 元素，并使用属性绑定语法 <code>[]</code> 把该链接的 <code>title</code> 设置成该商品的名字，如下所示：</p><p translation-origin=\"off\">To make each product name a link to product details, add the <code>&#x3C;a></code> element and set its title to be the product's name by using the property binding <code>[ ]</code> syntax, as follows:</p>\n\n <code-example path=\"getting-started/src/app/product-list/product-list.component.2.html\" header=\"src/app/product-list/product-list.component.html\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\"> 在预览窗格中，将鼠标悬停在显示的商品名称上，可以看到绑定的 name 属性值。它们都是商品名加上单词 \"details\" 的格式。插值 <code>{{}}</code> 允许你把属性值渲染为文本；而属性绑定语法 <code>[]</code> 则允许你在模板表达式中使用属性值。</p><p translation-origin=\"off\"> In the preview pane, hold the pointer over a product\nname to see the bound name property value, which is\nthe product name plus the word \"details\".\nInterpolation <code>{{ }}</code> lets you render the\nproperty value as text; property binding <code>[ ]</code> lets you\nuse the property value in a template expression.</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/template-syntax-product-anchor.png\" alt=\"Product name anchor text is product name property\" width=\"259\" height=\"271\">\n </div>\n</li>\n<li>\n<p translation-result=\"on\">添加商品说明。在 <code>&#x3C;p></code> 标签上，使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令，这样 Angular 只会在当前商品有描述信息的情况下创建这个 <code>&#x3C;p></code> 元素。</p><p translation-origin=\"off\">Add the product descriptions. On the <code>&#x3C;p></code> element, use an <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive so that Angular only creates the <code>&#x3C;p></code> element if the current product has a description.</p>\n\n <code-example path=\"getting-started/src/app/product-list/product-list.component.3.html\" header=\"src/app/product-list/product-list.component.html\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n\n  &#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\">\n    Description: {{ product.description }}\n  &#x3C;/p>\n\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\"> 该应用会立即在列表中显示每种商品的名称和描述。请注意，最后一个商品根本没有描述信息。由于该商品的 description 属性为空，因此 Angular 不会创建 <code>&#x3C;p></code> 元素（包括静态文本 “Description”）。</p><p translation-origin=\"off\"> The app now displays the name and description of each product in the list. Notice that the final product does not have a description paragraph. Because the product's description property is empty, Angular doesn't create the <code>&#x3C;p></code> element—including the word \"Description\".</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/template-syntax-product-description.png\" alt=\"Product descriptions added to list\" width=\"259\" height=\"289\">\n </div>\n</li>\n<li>\n<p translation-result=\"on\">添加一个按钮，以便让用户可与朋友分享商品。把 button 的 <code>click</code> 事件绑定到我们替你定义好的 <code>share()</code> 方法上（位于 <code>product-list.component.ts</code> ）。事件绑定是通过把事件名称包裹在圆括号 <code>( )</code> 中完成的，如下面的 <code>&#x3C;button></code> 元素所示：</p><p translation-origin=\"off\">Add a button so users can share a product with friends. Bind the button's <code>click</code> event to the <code>share()</code> method (in <code>product-list.component.ts</code>). Event binding uses a set of parentheses, <code>( )</code>, around the event, as in the following <code>&#x3C;button></code> element:</p>\n\n <code-example path=\"getting-started/src/app/product-list/product-list.component.4.html\" header=\"src/app/product-list/product-list.component.html\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n\n  &#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\">\n    Description: {{ product.description }}\n  &#x3C;/p>\n\n  &#x3C;button (click)=\"share()\">\n    Share\n  &#x3C;/button>\n\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\"> 现在，每个商品都有一个 “Share” 按钮了：</p><p translation-origin=\"off\"> Each product now has a \"Share\" button:</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/template-syntax-product-share-button.png\" alt=\"Share button added for each product\" width=\"259\" height=\"376\">\n </div>\n<p translation-result=\"on\"> 测试 “Share” 按钮：</p><p translation-origin=\"off\"> Test the \"Share\" button:</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/template-syntax-product-share-alert.png\" alt=\"Alert box indicating product has been shared\" width=\"330\" height=\"104\">\n </div>\n</li>\n</ol>\n<p translation-result=\"on\">该应用现在具有商品列表和共享功能。在这个过程中，你已经学会了 Angular 模板语法的五个常用特性：</p><p translation-origin=\"off\">The app now has a product list and sharing feature.\nIn the process, you've learned to use five common features of Angular's template syntax:</p>\n\n<ul>\n<li>\n<p><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code></p>\n</li>\n<li>\n<p><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></p>\n</li>\n<li>\n<p translation-result=\"on\"> 插值 <code>{{}}</code></p><p translation-origin=\"off\">Interpolation <code>{{ }}</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 属性绑定 <code>[]</code></p><p translation-origin=\"off\">Property binding <code>[ ]</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 事件绑定 <code>()</code></p><p translation-origin=\"off\">Event binding <code>( )</code></p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">对 Angular 模板语法全的完整介绍，请参阅<a href=\"guide/architecture-components#template-syntax\" title=\"模板语法\">组件与模板简介</a>。</p><p translation-origin=\"off\">For a fuller introduction to Angular's template syntax, see <a href=\"guide/architecture-components#template-syntax\" title=\"Template Syntax\">Introduction to components and templates</a>.</p>\n\n</div>\n<a id=\"components\"></a>\n<h2 id=\"components\" translation-result=\"on\">组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"components\">Components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>组件</em>在用户界面（也就是 UI）中定义了一些责任区，让你能重用这些 UI 功能集。你已经通过商品列表组件构建了一个。</p><p translation-origin=\"off\"><em>Components</em> define areas of responsibility in the user interface, or UI,\nthat let you reuse sets of UI functionality.\nYou've already built one with the product list component.</p>\n\n<p translation-result=\"on\">组件包含三部分：</p><p translation-origin=\"off\">A component consists of three things:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><strong>一个组件类</strong>，它用来处理数据和功能。上一节，我们在组件类中定义了商品数据和 <code>share()</code> 方法，它们分别用来处理数据和功能。</p><p translation-origin=\"off\"><strong>A component class</strong> that handles data and functionality. In the previous section, the product data and the <code>share()</code> method in the component class handle data and functionality, respectively.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>一个 HTML 模板</strong>，它决定了 UI。在上一节中，商品列表的 HTML 模板用来显示每个商品的名称、描述和 “Share” 按钮。</p><p translation-origin=\"off\"><strong>An HTML template</strong> that determines the UI. In the previous section, the product list's HTML template displays the name, description, and a \"Share\" button for each product.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  <strong>组件专属的样式</strong>定义了外观和感觉。商品列表中还没有定义任何样式，那属于组件 CSS 负责。</p><p translation-origin=\"off\"><strong>Component-specific styles</strong> that define the look and feel.\nThough product list does not define any styles, this is where component CSS\nresides.</p>\n\n</li>\n</ul>\n<!--\n\n### Class definition\n\nLet's take a quick look a the product list component's class definition:\n\n1. In the `product-list` directory, open `product-list.component.ts`.\n\n1. Notice the `@Component` decorator. This provides metadata about the component, including its templates, styles, and a selector.\n\n    * The `selector` is used to identify the component. The selector is the name you give the Angular component when it is rendered as an HTML element on the page. By convention, Angular component selectors begin with the prefix such as `app-`, followed by the component name.\n\n    * The template and style filename also are provided here. By convention each of the component's parts is in a separate file, all in the same directory and with the same prefix.\n\n1. The component definition also includes an exported class, which handles functionality for the component. This is where the product list data and `Share()` method are defined.\n\n### Composition\n\n-->\n<p translation-result=\"on\">Angular 应用程序由一棵组件树组成，每个 Angular 组件都有一个明确的用途和责任。</p><p translation-origin=\"off\">An Angular application comprises a tree of components, in which each Angular component has a specific purpose and responsibility.</p>\n\n<p translation-result=\"on\">目前，该范例有三个组件：</p><p translation-origin=\"off\">Currently, the example app has three components:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/app-components.png\" alt=\"Online store with three components\" width=\"324\" height=\"527\">\n</div>\n<ul>\n<li>\n<p translation-result=\"on\"> <code>app-root</code>（橙色框）是应用的外壳。这是要加载的第一个组件，也是所有其它组件的父组件。你可以把它想象成一个基础页面。</p><p translation-origin=\"off\"><code>app-root</code> (orange box) is the application shell. This is the first component to load and the parent of all other components. You can think of it as the base page.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>app-top-bar</code>（蓝色背景）是商店名称和结帐按钮。</p><p translation-origin=\"off\"><code>app-top-bar</code> (blue background) is the store name and checkout button.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>app-product-list</code>（紫色框）是你在上一节中修改过的商品列表。</p><p translation-origin=\"off\"><code>app-product-list</code> (purple box) is the product list that you modified in the previous section.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下一节会扩展应用的功能，添加了一个新组件（产品提醒），并把它添加为商品列表组件的子组件。</p><p translation-origin=\"off\">The next section expands the app's capabilities by adding a new component—a product alert—as a child of the product list component.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解关于组件及其与模板交互的更多信息，请参阅<a href=\"guide/architecture-components\" title=\"概念>组件与模板介绍\">“组件简介”</a>。</p><p translation-origin=\"off\">For more information about components and how they interact with templates, see <a href=\"guide/architecture-components\" title=\"Concepts > Introduction to Components and Templates\">Introduction to Components</a>.</p>\n\n</div>\n<a id=\"input\"></a>\n<h2 id=\"input\" translation-result=\"on\">输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#input\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"input\">Input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#input\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">目前，商品列表会显示每个商品的名称和描述。\n该商品列表组件还定义了一个 <code>products</code> 属性，它包含每个商品的导入数据（来自 <code>products.ts</code> 中的 <code>products</code> 数组。）</p><p translation-origin=\"off\">Currently, the product list displays the name and description of each product.\nThe product list component also defines a <code>products</code> property that contains imported data for each product from the <code>products</code> array in <code>products.ts</code>.</p>\n\n<p translation-result=\"on\">接下来创建一个新的提醒功能。它会接收一个商品作为输入。它会检查商品的价格，如果价格高于 700 美元，它会显示一个“Notify Me”（通知我）按钮，让用户注册一个当商品上市时发送的通知。</p><p translation-origin=\"off\">The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a \"Notify Me\" button that lets users sign up for notifications when the product goes on sale.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">创建一个新商品提醒组件。</p><p translation-origin=\"off\">Create a new product alerts component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">右键单击 <code>app</code> 文件夹，使用 <code>Angular Generator</code> 生成一个名为 <code>product-alerts</code> 的新组件。</p><p translation-origin=\"off\">Right click on the <code>app</code> folder and use the <code>Angular Generator</code> to generate a new component named <code>product-alerts</code>.</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/generate-component.png\" alt=\"StackBlitz command to generate component\" width=\"407\" height=\"368\">\n </div>\n<p translation-result=\"on\"> 该 generator 为组件的三个部分创建了启动文件：</p><p translation-origin=\"off\"> The generator creates starter files for all three parts of the component:</p>\n\n<ul>\n<li>\n<p><code>product-alerts.component.ts</code></p>\n</li>\n<li>\n<p><code>product-alerts.component.html</code></p>\n</li>\n<li>\n<p><code>product-alerts.component.css</code></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">打开 <code>product-alerts.component.ts</code>。</p><p translation-origin=\"off\">Open <code>product-alerts.component.ts</code>.</p>\n\n<p> <code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"as-generated\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-product-alerts',\n  templateUrl: './product-alerts.component.html',\n  styleUrls: ['./product-alerts.component.css']\n})\nexport class ProductAlertsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">注意 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器。这表明它下面的类是一个组件。它提供了有关该组件的元数据，包括它的选择器、模板和样式。</p><p translation-origin=\"off\">Notice the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator. This indicates that the following class is a component. It provides metadata about the component, including its selector, templates, and styles.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">该 <code>selector</code> 用于标识该组件。该选择器是当 Angular 组件在页面中渲染出 HTML 元素时使用的名字。按照惯例，Angular 组件选择器会以前缀 <code>app-</code> 开头，后跟组件名称。</p><p translation-origin=\"off\">The <code>selector</code> identifies the component. The selector is the name you give the Angular component when it is rendered as an HTML element on the page. By convention, Angular component selectors begin with the prefix <code>app-</code>, followed by the component name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">模板和样式文件名。它们是对 StackBlitz 生成的 HTML 和 CSS 文件的引用。</p><p translation-origin=\"off\">The template and style filenames reference the HTML and CSS files that StackBlitz generates.</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">组件定义中还导出了类 <code>ProductAlertsComponent</code>，用于处理该组件的功能。</p><p translation-origin=\"off\">The component definition also exports the class, <code>ProductAlertsComponent</code>, which handles functionality for the component.</p>\n\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">设置新商品提醒组件，让它接收一个商品作为输入：</p><p translation-origin=\"off\">Set up the new product alerts component to receive a product as input:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>@angular/core</code> 导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">Import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> from <code>@angular/core</code>.</p>\n\n<p> <code-example path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"imports\" header=\"src/app/product-alerts/product-alerts.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example></p>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>ProductAlertsComponent</code> 类的定义中，定义一个带 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器的 <code>product</code> 属性。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器指出其属性值是从该组件的父组件商品列表组件中传入的。</p><p translation-origin=\"off\">In the <code>ProductAlertsComponent</code> class definition, define a property named <code>product</code> with an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator. The <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator indicates that the property value passes in from the component's parent, the product list component.</p>\n\n<p> <code-example path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"input-decorator\" header=\"src/app/product-alerts/product-alerts.component.ts\">\nexport class ProductAlertsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example></p>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">定义这个新商品提醒组件的视图。</p><p translation-origin=\"off\">Define the view for the new product alert component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">   打开 <code>product-alerts.component.html</code> 模板，把作为占位符的 p 替换为如果商品价格超过 700 美元就要显示出来的“通知我”按钮。</p><p translation-origin=\"off\">Open the <code>product-alerts.component.html</code> template and replace the placeholder paragraph with a \"Notify Me\" button that appears if the product price is over $700.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.html\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.price > 700\">\n  &#x3C;button>Notify Me&#x3C;/button>\n&#x3C;/p>\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">把这个新商品提醒组件显示为该商品列表的一部分（子组件）。</p><p translation-origin=\"off\">Display the new product alert component as a child of the product list.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>product-list.component.html</code>。</p><p translation-origin=\"off\">Open <code>product-list.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要包含这个新组件，只要像使用 HTML 元素一样使用它的选择器（ <code>app-product-alert</code> ）就可以了。</p><p translation-origin=\"off\">To include the new component, use its selector, <code>app-product-alerts</code>, as you would an HTML element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">通过属性绑定把当前商品作为输入传给组件。</p><p translation-origin=\"off\">Pass the current product as input to the component using property binding.</p>\n\n<p> <code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.5.html\" region=\"app-product-alerts\">\n&#x3C;button (click)=\"share()\">\n  Share\n&#x3C;/button>\n\n&#x3C;app-product-alerts\n  [product]=\"product\">\n&#x3C;/app-product-alerts>\n\n</code-example></p>\n</li>\n</ol>\n</li>\n</ol>\n<p translation-result=\"on\">新商品提醒组件会从商品列表中获取商品作为输入信息。通过该输入，它会根据商品的价格显示或隐藏 “Notify Me” 按钮。由于 Phone XL 的售价超过了 700 美元，所以该商品上会出现“Notify Me”按钮。</p><p translation-origin=\"off\">The new product alert component takes a product as input from the product list. With that input, it shows or hides the \"Notify Me\" button, based on the price of the product. The Phone XL price is over $700, so the \"Notify Me\" button appears on that product.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-alert-button.png\" alt=\"Product alert button added to products over $700\" width=\"259\" height=\"406\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解如何将数据从父组件传递到子组件、拦截并处理来自父组件的值，以及检测并对输入属性值进行更改的更多信息，请参阅 <a href=\"guide/component-interaction\" title=\"组件和模板>组件交互\">组件交互</a>一章。</p><p translation-origin=\"off\">See <a href=\"guide/component-interaction\" title=\"Components &#x26; Templates > Component Interaction\">Component Interaction</a> for more information about passing data from a parent to child component, intercepting and acting upon a value from the parent, and detecting and acting on changes to input property values.</p>\n\n</div>\n<a id=\"output\"></a>\n<h2 id=\"output\" translation-result=\"on\">输出<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#output\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"output\">Output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#output\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想让 “Notify Me” 按钮正常工作，你需要配置两处：</p><p translation-origin=\"off\">To make the \"Notify Me\" button work, you need to configure two things:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">当用户点击 “Notify Me” 时，产品提醒组件发出一个事件</p><p translation-origin=\"off\">the product alert component to emit an event when the user clicks \"Notify Me\"</p>\n\n</li>\n<li>\n<p translation-result=\"on\">商品列表组件对这个事件进行响应</p><p translation-origin=\"off\">the product list component to act on that event</p>\n\n</li>\n</ul>\n<ol>\n<li>\n<p translation-result=\"on\">打开 <code>product-alerts.component.ts</code>。</p><p translation-origin=\"off\">Open <code>product-alerts.component.ts</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">从 <code>@angular/core</code> 中导入 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>：</p><p translation-origin=\"off\">Import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> from <code>@angular/core</code>:</p>\n\n<p> <code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n</code-example></p>\n</li>\n<li>\n<p translation-result=\"on\">在组件类中，用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器和一个事件发射器 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code> 实例定义一个名为 <code>notify</code> 的属性。这可以让商品提醒组件在 notify 属性发生变化时发出事件。</p><p translation-origin=\"off\">In the component class, define a property named <code>notify</code> with an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator and an instance of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code>. This allows the product alert component to emit an event when the value of the notify property changes.</p>\n\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  当 Angular CLI 生成一个新组件时，它包含一个空的构造函数，<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 接口和 <code>ngOnInit()</code> 方法。\n以下示例未使用它们，为了简洁起见，此处将其省略。</p><p translation-origin=\"off\">  When the Angular CLI generates a new component, it includes an empty constructor, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface, and the <code>ngOnInit()</code> method.\nSince the following example isn't using them, they are omitted here for brevity.</p>\n\n</div>\n<p>    <code-example path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" header=\"src/app/product-alerts/product-alerts.component.ts\" region=\"input-output\">\nexport class ProductAlertsComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() notify = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">在商品提醒模板（<code>product-alerts.component.html</code>）中，用事件绑定更新“Notify Me”按钮，以调用 <code>notify.emit()</code> 方法。</p><p translation-origin=\"off\">In the product alert template, <code>product-alerts.component.html</code>, update the \"Notify Me\" button with an event binding to call the <code>notify.emit()</code> method.</p>\n\n<p> <code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.html\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.price > 700\">\n  &#x3C;button (click)=\"notify.emit()\">Notify Me&#x3C;/button>\n&#x3C;/p>\n\n\n</code-example></p>\n</li>\n<li>\n<p translation-result=\"on\">接下来，定义当用户单击该按钮时应该发生的行为。回想一下，应该由父组件（商品列表组件）采取行动，而不是商品提醒组件。在 <code>product-list.component.ts</code> 文件中，定义一个 <code>onNotify()</code> 方法，类似于 <code>share()</code> 方法：</p><p translation-origin=\"off\">Next, define the behavior that should happen when the user clicks the button. Recall that it's the parent, product list component—not the product alerts component—that acts when the child raises the event. In  <code>product-list.component.ts</code>, define an <code>onNotify()</code> method, similar to the <code>share()</code> method:</p>\n\n<p> <code-example header=\"src/app/product-list/product-list.component.ts\" path=\"getting-started/src/app/product-list/product-list.component.ts\" region=\"on-notify\">\nexport class ProductListComponent {\n  products = products;\n\n  share() {\n    window.alert('The product has been shared!');\n  }\n\n  onNotify() {\n    window.alert('You will be notified when the product goes on sale');\n  }\n}\n\n\n</code-example></p>\n</li>\n<li>\n<p translation-result=\"on\">最后，修改商品列表组件以接收商品提醒组件的输出。</p><p translation-origin=\"off\">Finally, update the product list component to receive output from the product alerts component.</p>\n\n<p translation-result=\"on\"> 在 <code>product-list.component.html</code> 中，把 <code>app-product-alerts</code> 组件（就是它显示的“Notify Me”按钮）的 <code>notify</code> 事件绑定到商品列表组件的 <code>onNotify()</code> 方法。</p><p translation-origin=\"off\"> In <code>product-list.component.html</code>, bind the <code>app-product-alerts</code> component (which is what displays the \"Notify Me\" button) to the <code>onNotify()</code> method of the product list component.</p>\n\n<p> <code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.6.html\" region=\"on-notify\">\n&#x3C;button (click)=\"share()\">\n  Share\n&#x3C;/button>\n\n&#x3C;app-product-alerts\n  [product]=\"product\" \n  (notify)=\"onNotify()\">\n&#x3C;/app-product-alerts>\n\n</code-example></p>\n</li>\n<li>\n<p translation-result=\"on\">试试“Notify Me”按钮：</p><p translation-origin=\"off\">Try the \"Notify Me\" button:</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/product-alert-notification.png\" alt=\"Product alert notification confirmation dialog\" width=\"329\" height=\"104\">\n </div>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解关于从子组件监听事件、读取子属性或调用子方法以及如何用服务在组件之间进行双向通信的详细信息，请参阅“<a href=\"guide/component-interaction\" title=\"组件和模板>组件交互\">组件交互</a>”一章。</p><p translation-origin=\"off\">See <a href=\"guide/component-interaction\" title=\"Components &#x26; Templates > Component Interaction\">Component Interaction</a> for more information about listening for events from child components, reading child properties or invoking child methods, and using a service for bi-directional communication between components.</p>\n\n</div>\n<a id=\"next-steps\"></a>\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">恭喜！你已经完成了第一个 Angular 应用！</p><p translation-origin=\"off\">Congratulations! You've completed your first Angular app!</p>\n\n<p translation-result=\"on\">你有了一个基本的在线商店目录，它带有商品列表，“Share”按钮和“Notify Me”按钮。你已经了解了 Angular 的基础知识：组件和模板语法。你还学习了组件类和模板如何交互，以及组件如何相互通信。</p><p translation-origin=\"off\">You have a basic online store catalog with a product list, \"Share\" button, and \"Notify Me\" button.\nYou've learned about the foundation of Angular: components and template syntax.\nYou've also learned how the component class and template interact, and how components communicate with each other.</p>\n\n<p translation-result=\"on\">要继续探索 Angular，请选择以下选项之一：</p><p translation-origin=\"off\">To continue exploring Angular, choose either of the following options:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"start/start-routing\" title=\"入门：路由\">继续浏览“应用内导航”部分</a>以创建一个商品详情页面，通过单击商品名称，可以访问该页面，该页面有自己的 URL 模式。</p><p translation-origin=\"off\"><a href=\"start/start-routing\" title=\"Try it: In-app navigation\">Continue to the \"In-app navigation\" section</a> to create a product details page that can be accessed by clicking a product name and that has its own URL pattern.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"start/start-deployment\" title=\"试一试：部署\">跳到“部署”部分，</a>把你的应用转移到本地开发、部署到 Firebase 或你自己的服务器。</p><p translation-origin=\"off\"><a href=\"start/start-deployment\" title=\"Try it: Deployment\">Skip ahead to the \"Deployment\" section</a> to move to local development, or deploy your app to Firebase or your own server.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - docs\n - features\n - guide/attribute-directives\n - guide/router\n - guide/setup-local\n - index\n - start/start-deployment\n - start/start-routing\n - tutorial\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnInit\n - api/core/Output\n - guide/architecture-components\n - guide/architecture-components#template-syntax\n - guide/component-interaction\n - guide/glossary#command-line-interface-cli\n - guide/setup-local\n - start#components\n - start#create-the-sample-project\n - start#input\n - start#new-project\n - start#next-steps\n - start#output\n - start#part-1-getting-started-with-a-basic-angular-app\n - start#template-syntax\n - start#点此在-stackblitz-上创建一个新项目。\n - start/start-deployment\n - start/start-routing\n - tutorial\n - http://www.udemy.com\n - https://developer.mozilla.org/en-US/docs/Learn/HTML\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript\n - https://github.com/angular/angular-cn/edit/aio/aio/content/start/index.md?message=docs%3A%20请简述你的修改...\n - https://stackblitz.com/\n - https://stackblitz.com/fork/angular\n - https://www.codecademy.com/\n - https://www.typescriptlang.org/docs/home.html\n-->"
}