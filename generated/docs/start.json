{"id":"start","title":"Angular 入门","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/start/index.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"getting-started-with-angular\" translation-result=\"on\">Angular 入门<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#getting-started-with-angular\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Getting started with Angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#getting-started-with-angular\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 欢迎你！</p><p translation-origin=\"off\">Welcome to Angular!</p>\n\n<p translation-result=\"on\">本教程将通过构建一个电子商务网站，向你介绍 Angular 的基本知识。该网站具有商品名录、购物车和结账表单。</p><p translation-origin=\"off\">This tutorial introduces you to the essentials of Angular by walking you through building an e-commerce site with a catalog, shopping cart, and check-out form.</p>\n\n<p translation-result=\"on\">为了帮助你更好地起步，本教程提供了一个已完成的应用，你可以在 <a href=\"https://stackblitz.com\">Stackblitz</a> 上试验及互动，而不用<a href=\"guide/setup-local\" title=\"Setup guide\">建立本地开发环境</a>。StackBlitz 是一个基于浏览器的开发环境，你可以在其中使用各种技术来创建、保存和共享项目。</p><p translation-origin=\"off\">To help you get started right away, this tutorial uses a ready-made application that you can examine and modify interactively on <a href=\"https://stackblitz.com\">StackBlitz</a> —without having to <a href=\"guide/setup-local\" title=\"Setup guide\">set up a local work environment</a>.\nStackBlitz is a browser-based development environment where you can create, save, and share projects using a variety of technologies.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">为了充分利用本教程，你应该已经对以下内容有基本的了解。</p><p translation-origin=\"off\">To get the most out of this tutorial, you should already have a basic understanding of the following.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/docs/Learn/HTML\" title=\"学习 HTML：指南和教程\">HTML</a></p><p translation-origin=\"off\"><a href=\"https://developer.mozilla.org/docs/Learn/HTML\" title=\"Learning HTML: Guides and tutorials\">HTML</a></p>\n\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript\" title=\"JavaScript\">JavaScript</a></p>\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 语言\">TypeScript</a></p><p translation-origin=\"off\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a></p>\n\n</li>\n</ul>\n<p><a id=\"components\"></a></p>\n<h2 id=\"take-a-tour-of-the-example-application\" translation-result=\"on\">浏览范例应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#take-a-tour-of-the-example-application\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Take a tour of the example application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#take-a-tour-of-the-example-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以用组件构建 Angular 应用。组件定义了 UI 中的职责范围，让你可以复用某些 UI 功能集。</p><p translation-origin=\"off\">You build Angular applications with components.\nComponents define areas of responsibility in the UI that let you reuse sets of UI functionality.</p>\n\n<p translation-result=\"on\">一个组件由三部分组成：</p><p translation-origin=\"off\">A component consists of three things:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">部分</nt-wrapper><nt-wrapper translation-origin=\"off\">Component Part</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">组件类</nt-wrapper><nt-wrapper translation-origin=\"off\">A component class</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">处理数据和功能。</nt-wrapper><nt-wrapper translation-origin=\"off\">Handles data and functionality</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">HTML 模板</nt-wrapper><nt-wrapper translation-origin=\"off\">An HTML template</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">决定 UI。</nt-wrapper><nt-wrapper translation-origin=\"off\">Determines the UI</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">组件专属样式</nt-wrapper><nt-wrapper translation-origin=\"off\">Component-specific styles</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定义外观和感觉。</nt-wrapper><nt-wrapper translation-origin=\"off\">Define the look and feel</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">本指南演示了如何使用下列组件构建应用。</p><p translation-origin=\"off\">This guide demonstrates building an application with the following components:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">组件</nt-wrapper><nt-wrapper translation-origin=\"off\">Components</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>&lt;app-root&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">第一个加载的组件，并且是其他组件的容器。</nt-wrapper><nt-wrapper translation-origin=\"off\">The first component to load and the container for the other components</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>&lt;app-top-bar&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">商店名称和结帐按钮。</nt-wrapper><nt-wrapper translation-origin=\"off\">The store name and checkout button</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>&lt;app-product-list&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">产品列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">The product list</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>&lt;app-product-alerts&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含应用中各种通知的组件。</nt-wrapper><nt-wrapper translation-origin=\"off\">A component that contains the application's alerts</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"lightbox\">\n<img alt=\"Online store with three components\" src=\"generated/images/guide/start/app-components.png\" width=\"324\" height=\"527\">\n</div>\n<p translation-result=\"on\">有关组件的更多信息，请参见<a href=\"guide/architecture-components\" title=\"组件和模板简介\">组件简介</a>。</p><p translation-origin=\"off\">For more information about components, see <a href=\"guide/architecture-components\" title=\"Introduction to Components and Templates\">Introduction to Components</a>.</p>\n\n<p><a id=\"new-project\"></a></p>\n<h2 id=\"create-the-sample-project\" translation-result=\"on\">创建范例项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-sample-project\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the sample project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-sample-project\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要创建范例项目，请<live-example name=\"getting-started-v0\" nodownload=\"\">在 StackBlitz 中生成一个预置的范例项目</live-example>。要保存你的工作，请执行以下操作：</p><p translation-origin=\"off\">To create the sample project, generate the <live-example name=\"getting-started-v0\" nodownload=\"\">ready-made sample project in StackBlitz</live-example>.\nTo save your work:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">登录到 StackBlitz。</p><p translation-origin=\"off\">Log into StackBlitz.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">对你生成的项目进行分支。</p><p translation-origin=\"off\">Fork the project you generated.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">定时保存。</p><p translation-origin=\"off\">Save periodically.</p>\n\n</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"Fork the project\" src=\"generated/images/guide/start/fork-the-project.png\" width=\"200\" height=\"118\">\n</div>\n<p translation-result=\"on\">在 StackBlitz 中，右侧的预览窗格会显示范例应用的启动状态。此预览有两个区域：</p><p translation-origin=\"off\">In StackBlitz, the preview pane on the right shows the starting state of the example application.\nThe preview features two areas:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">带有商店名称（<code>My Store</code>）和结账按钮的顶部栏</p><p translation-origin=\"off\">A top bar with the store name, <code>My Store</code>, and a checkout button</p>\n\n</li>\n<li>\n<p translation-result=\"on\">产品列表(<code>Products</code>)及其标题</p><p translation-origin=\"off\">A header for a product list, <code>Products</code></p>\n\n</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Starter online store application\" src=\"generated/images/guide/start/new-app-all.gif\" width=\"600\" height=\"219\">\n</div>\n<p translation-result=\"on\">左侧的项目区显示了构成本应用的源文件，包括基础结构和配置文件。</p><p translation-origin=\"off\">The project section on the left shows the source files that make up the application, including the infrastructure and configuration files.</p>\n\n<p translation-result=\"on\">当你生成本教程随附的 StackBlitz 范例应用时，StackBlitz 会为你创建启动程序文件和模拟数据。本教程中用到的文件位于 <code>src</code> 文件夹中。</p><p translation-origin=\"off\">When you generate the StackBlitz example applications that accompany the tutorials, StackBlitz creates the starter files and mock data for you.\nThe files you use throughout the tutorial are in the <code>src</code> folder.</p>\n\n<p translation-result=\"on\">有关如何使用 StackBlitz 的更多信息，请参见 <a href=\"https://developer.stackblitz.com/docs/platform\">StackBlitz 的文档</a>。</p><p translation-origin=\"off\">For more information on how to use StackBlitz, see the <a href=\"https://developer.stackblitz.com/docs/platform\">StackBlitz documentation</a>.</p>\n\n<p><a id=\"product-list\"></a></p>\n<h2 id=\"create-the-product-list\" translation-result=\"on\">创建产品列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-product-list\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the product list<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-product-list\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本节中，你将修改应用以显示产品列表。你会用到来自 <code>products.ts</code> 文件的预定义产品数据，和一些来自 <code>product-list.component.ts</code> 文件的方法。本节将指导你完成编辑 HTML（也称为模板）的过程。</p><p translation-origin=\"off\">In this section, you'll update the application to display a list of products.\nYou'll use predefined product data from the <code>products.ts</code> file and methods from the <code>product-list.component.ts</code> file.\nThis section guides you through editing the HTML, also known as the template.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-list</code> 文件夹中，打开模板文件 <code>product-list.component.html</code>。</p><p translation-origin=\"off\">In the <code>product-list</code> folder, open the template file <code>product-list.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>&lt;div&gt;</code> 上添加一个结构型指令 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，如下所示。</p><p translation-origin=\"off\">Add an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> structural directive on a <code>&lt;div&gt;</code>, as follows.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\" region=\"ngfor\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，会把这个 <code>&lt;div&gt;</code> 针对列表中的每个产品进行复写。</p><p translation-origin=\"off\">With <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, the <code>&lt;div&gt;</code> repeats for each product in the list.</p>\n\n<p translation-result=\"on\">结构型指令会通过添加、删除和操作元素来调整或重塑 DOM 结构。有关结构型指令的更多信息，请参见<a href=\"guide/structural-directives\">结构型指令</a>。</p><p translation-origin=\"off\">Structural directives shape or reshape the DOM's structure, by adding, removing, and manipulating elements.\nFor more information about structural directives, see <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在此 <code>&lt;div&gt;</code> 中，添加 <code>&lt;h3&gt;</code> 和 <code>{{ product.name }}</code>。<code>{{ product.name }}</code> 语句是 Angular 插值语法的范例。插值 <code>{{ }}</code> 可以让你把属性值渲染为文本。</p><p translation-origin=\"off\">Inside the <code>&lt;div&gt;</code>, add an <code>&lt;h3&gt;</code> and <code>{{ product.name }}</code>.\nThe <code>{{ product.name }}</code> statement is an example of Angular's interpolation syntax.\nInterpolation <code>{{ }}</code> lets you render the property value as text.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\" region=\"interpolation\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n      {{ product.name }}\n  &lt;/h3&gt;\n\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">预览窗格将会更新，以显示列表中每个商品的名称。</p><p translation-origin=\"off\">The preview pane updates to display the name of each product in the list.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product names added to list\" src=\"generated/images/guide/start/template-syntax-product-names.png\" width=\"259\" height=\"271\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">为了让每个商品名称都能链接到商品详情，请围绕 <code>{{ product.name }}</code> 添加一个 <code>&lt;a&gt;</code> 元素。</p><p translation-origin=\"off\">To make each product name a link to product details, add the <code>&lt;a&gt;</code> element around <code>{{ product.name }}</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>[ ]</code> 语法将标题设置为此产品的名称，如下所示：</p><p translation-origin=\"off\">Set the title to be the product's name by using the property binding <code>[ ]</code> syntax, as follows:</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a [title]=\"product.name + ' details'\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">在预览窗格中，将鼠标悬停在产品名称上，可以查看所绑定的 name 属性值，该值是产品名加上单词 “details”。通过属性绑定 <code>[ ]</code> 可以在模板表达式中使用属性值。</p><p translation-origin=\"off\">In the preview pane, hover over a product name to see the bound name property value, which is the product name plus the word \"details\".\nProperty binding <code>[ ]</code> lets you use the property value in a template expression.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product name anchor text is product name property\" src=\"generated/images/guide/start/template-syntax-product-anchor.png\" width=\"259\" height=\"271\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">添加产品说明。在 <code>&lt;p&gt;</code> 元素上使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令，以便 Angular 只让当前产品有描述 <code>&lt;p&gt;</code>。</p><p translation-origin=\"off\">Add the product descriptions.\nOn a <code>&lt;p&gt;</code> element, use an <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive so that Angular only creates the <code>&lt;p&gt;</code> element if the current product has a description.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.3.html\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a [title]=\"product.name + ' details'\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n  &lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\"&gt;\n    Description: {{ product.description }}\n  &lt;/p&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">现在，该应用将在列表中显示每个产品的名称和描述。请注意，最后一项产品没有描述段落。Angular 不会创建 <code>&lt;p&gt;</code> 元素，因为此产品的 description 属性为空。</p><p translation-origin=\"off\">The application now displays the name and description of each product in the list.\nNotice that the final product does not have a description paragraph.\nAngular doesn't create the <code>&lt;p&gt;</code> element because the product's description property is empty.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product descriptions added to list\" src=\"generated/images/guide/start/template-syntax-product-description.png\" width=\"259\" height=\"289\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">添加一个按钮，以便用户可以共享产品。将按钮的 <code>click</code> 事件绑定到 <code>product-list.component.ts</code> 中的 <code>share()</code> 方法。事件绑定要在此事件用一组圆括号 <code>( )</code> 括起来，就比如 <code>&lt;button&gt;</code> 元素上的 <code>(click)</code>。</p><p translation-origin=\"off\">Add a button so users can share a product.\nBind the button's <code>click</code> event to the <code>share()</code> method in <code>product-list.component.ts</code>.\nEvent binding uses a set of parentheses, <code>( )</code>, around the event, as in the <code>(click)</code> event on the  <code>&lt;button&gt;</code> element.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.4.html\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a [title]=\"product.name + ' details'\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n  &lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\"&gt;\n    Description: {{ product.description }}\n  &lt;/p&gt;\n\n  &lt;button type=\"button\" (click)=\"share()\"&gt;\n    Share\n  &lt;/button&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">每个产品现在都有一个 “<strong>Share</strong>” 按钮。</p><p translation-origin=\"off\">Each product now has a <strong>Share</strong> button.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Share button added for each product\" src=\"generated/images/guide/start/template-syntax-product-share-button.png\" width=\"259\" height=\"376\">\n</div>\n<p translation-result=\"on\">单击 “<strong>Share</strong>” 按钮将触发一条通知，指出 “The product has been shared!”。</p><p translation-origin=\"off\">Clicking the <strong>Share</strong> button triggers an alert that states, \"The product has been shared!\".</p>\n\n<div class=\"lightbox\">\n<img alt=\"Alert box indicating product has been shared\" src=\"generated/images/guide/start/template-syntax-product-share-alert.png\" width=\"330\" height=\"104\">\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">在编辑模板时，你已经了解了 Angular 模板的一些最常用的功能。更多信息，请参阅<a href=\"guide/architecture-components#template-syntax\" title=\"模板语法\">组件和模板简介</a>。</p><p translation-origin=\"off\">In editing the template, you have explored some of the most popular features of Angular templates.\nFor more information, see <a href=\"guide/architecture-components#template-syntax\" title=\"Template Syntax\">Introduction to components and templates</a>.</p>\n\n<p><a id=\"passing-data-in\"></a></p>\n<h2 id=\"pass-data-to-a-child-component\" translation-result=\"on\">将数据传递给子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Pass data to a child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">目前，产品列表中显示了每个产品的名称和描述。<code>ProductListComponent</code> 还定义了一个 <code>products</code> 属性，包含从 <code>products.ts</code> 的 <code>products</code> 数组导入的各个产品的数据。</p><p translation-origin=\"off\">Currently, the product list displays the name and description of each product.\nThe <code>ProductListComponent</code> also defines a <code>products</code> property that contains imported data for each product from the <code>products</code> array in <code>products.ts</code>.</p>\n\n<p translation-result=\"on\">下一步是创建一个新的通知功能，该功能会使用来自 <code>ProductListComponent</code> 的产品数据。通知会检查产品的价格，如果价格大于 700 美元，则会显示 <strong>Notify Me</strong> 按钮，当产品上市销售时，用户可以通过该按钮注册通知。</p><p translation-origin=\"off\">The next step is to create a new alert feature that uses product data from the <code>ProductListComponent</code>.\nThe alert checks the product's price, and, if the price is greater than $700, displays a <strong>Notify Me</strong> button that lets users sign up for notifications when the product goes on sale.</p>\n\n<p translation-result=\"on\">本节将引导你创建一个子组件 <code>ProductAlertsComponent</code>，该子组件可以从其父组件 <code>ProductListComponent</code> 接收数据。</p><p translation-origin=\"off\">This section walks you through creating a child component, <code>ProductAlertsComponent</code>, that can receive data from its parent component, <code>ProductListComponent</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">点击当前终端上方的加号，新建一个终端，运行命令生成组件。</p><p translation-origin=\"off\">Click on the plus sign above the current terminal to create a new terminal to run the command to generate the component.</p>\n\n<div class=\"lightbox\">\n<img alt=\"StackBlitz command to generate component\" src=\"generated/images/guide/start/create-new-terminal.png\" width=\"620\" height=\"204\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">在新终端中，通过运行以下命令生成一个名为 <code>product-alerts</code> 的新组件。</p><p translation-origin=\"off\">In the new terminal, generate a new component named <code>product-alerts</code> by running the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\n`ng generate component product-alerts`\n\n</code-example>\n<p translation-result=\"on\">该生成器会为组件的三个部分创建初始文件：</p><p translation-origin=\"off\">The generator creates starter files for the three parts of the component:</p>\n\n<ul>\n<li>\n<p><code>product-alerts.component.ts</code></p>\n</li>\n<li>\n<p><code>product-alerts.component.html</code></p>\n</li>\n<li>\n<p><code>product-alerts.component.css</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">打开 <code>product-alerts.component.ts</code>。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器会指出它后面的类是组件。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 还会提供有关组件的元数据，包括其选择器、模板和样式。</p><p translation-origin=\"off\">Open <code>product-alerts.component.ts</code>.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator indicates that the following class is a component.\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> also provides metadata about the component, including its selector, templates, and styles.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"as-generated\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-product-alerts',\n  templateUrl: './product-alerts.component.html',\n  styleUrls: ['./product-alerts.component.css']\n})\nexport class ProductAlertsComponent {\n\n\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 中的主要功能如下：</p><p translation-origin=\"off\">Key features in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> are as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>selector</code>（<code>app-product-alerts</code>）用于标识组件。按照惯例，Angular 组件选择器以前缀 <code>app-</code> 开头，后跟组件名称。</p><p translation-origin=\"off\">The <code>selector</code>, <code>app-product-alerts</code>, identifies the component.\nBy convention, Angular component selectors begin with the prefix <code>app-</code>, followed by the component name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">模板和样式文件名引用了组件的 HTML 和 CSS。</p><p translation-origin=\"off\">The template and style filenames reference the component's HTML and CSS</p>\n\n</li>\n<li>\n<p translation-result=\"on\">这个 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 定义还导出了类 <code>ProductAlertsComponent</code>，该类会处理组件的功能。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> definition also exports the class, <code>ProductAlertsComponent</code>, which handles functionality for the component</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">要将 <code>ProductAlertsComponent</code> 设置为接收产品数据，请首先从 <code>@angular/core</code> 中导入符号 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">To set up <code>ProductAlertsComponent</code> to receive product data, first import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> from <code>@angular/core</code>.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Product } from '../products';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>ProductAlertsComponent</code> 类定义中，使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器定义一个名为 <code>product</code> 的属性。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器指出此属性值要从本组件的父组件 <code>ProductListComponent</code> 中传入。</p><p translation-origin=\"off\">In the <code>ProductAlertsComponent</code> class definition, define a property named <code>product</code> with an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator.\nThe <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator indicates that the property value passes in from the component's parent, <code>ProductListComponent</code>.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"input-decorator\">\nexport class ProductAlertsComponent {\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product!: Product;\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">打开 <code>product-alerts.component.html</code> 并将占位符段落替换为 <strong>Notify Me</strong> 按钮，如果产品价格超过 700 美元，就会出现此按钮。</p><p translation-origin=\"off\">Open <code>product-alerts.component.html</code> and replace the placeholder paragraph with a <strong>Notify Me</strong> button that appears if the product price is over $700.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.html\">\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product &amp;&amp; product.price &gt; 700\"&gt;\n  &lt;button type=\"button\"&gt;Notify Me&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">生成器会自动把 <code>ProductAlertsComponent</code> 添加到 <code>AppModule</code> 中，以便它能用于本应用的其它组件中。</p><p translation-origin=\"off\">The generator automatically added the <code>ProductAlertsComponent</code> to the <code>AppModule</code> to make it available to other components in the application.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"declare-product-alerts\">\nimport { ProductAlertsComponent } from './product-alerts/product-alerts.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n  ],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">最后，要将 <code>ProductAlertsComponent</code> 显示为 <code>ProductListComponent</code> 的子级，请将 <code>&lt;app-product-alerts&gt;</code> 元素添加到 <code>product-list.component.html</code> 中。使用属性绑定将当前产品作为输入传给此组件。</p><p translation-origin=\"off\">Finally, to display <code>ProductAlertsComponent</code> as a child of <code>ProductListComponent</code>, add the <code>&lt;app-product-alerts&gt;</code> element to <code>product-list.component.html</code>.\nPass the current product as input to the component using property binding.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.5.html\" region=\"app-product-alerts\">\n&lt;button type=\"button\" (click)=\"share()\"&gt;\n  Share\n&lt;/button&gt;\n\n&lt;app-product-alerts\n  [product]=\"product\"&gt;\n&lt;/app-product-alerts&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">这个新的产品通知组件将产品作为产品列表中的输入。使用该输入，它将根据产品的价格显示或隐藏 <strong>Notify Me</strong> 按钮。Phone XL 的价格超过了 700 美元，因此该产品上会显示 <strong>Notify Me</strong> 按钮。</p><p translation-origin=\"off\">The new product alert component takes a product as input from the product list.\nWith that input, it shows or hides the <strong>Notify Me</strong> button, based on the price of the product.\nThe Phone XL price is over $700, so the <strong>Notify Me</strong> button appears on that product.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product alert button added to products over $700\" src=\"generated/images/guide/start/product-alert-button.png\" width=\"259\" height=\"406\">\n</div>\n<p><a id=\"output\"></a></p>\n<h2 id=\"pass-data-to-a-parent-component\" translation-result=\"on\">将数据传递到父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Pass data to a parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">为了使 <strong>Notify Me</strong> 按钮起作用，子组件需要通知并将数据传递给父组件。当用户单击 <strong>Notify Me</strong> 时 <code>ProductAlertsComponent</code> 需要引发一个事件，并且 <code>ProductListComponent</code> 需要响应此事件。</p><p translation-origin=\"off\">To make the <strong>Notify Me</strong> button work, the child component needs to notify and pass the data to the parent component.\nThe <code>ProductAlertsComponent</code> needs to emit an event when the user clicks <strong>Notify Me</strong> and the <code>ProductListComponent</code> needs to respond to the event.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在新建组件时，Angular 生成器会包含一个空的 <code>constructor()</code>、<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 接口和 <code>ngOnInit()</code> 方法。由于这些步骤不会使用它们，下列范例代码中都省略了它们，以求简洁。</p><p translation-origin=\"off\">In new components, the Angular Generator includes an empty <code>constructor()</code>, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface, and the <code>ngOnInit()</code> method.\nSince these steps don't use them, the following code examples omit them for brevity.</p>\n\n</div>\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-alerts.component.ts</code> 中，从 <code>@angular/core</code> 导入符号 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>。</p><p translation-origin=\"off\">In <code>product-alerts.component.ts</code>, import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> from <code>@angular/core</code>.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\nimport { Product } from '../products';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在组件类中，使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code> 的实例定义一个名为 <code>notify</code> 的属性。使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 配置 <code>ProductAlertsComponent</code>，这会让 <code>ProductAlertsComponent</code> 在 <code>notify</code> 属性的值发生变化时引发一个事件。</p><p translation-origin=\"off\">In the component class, define a property named <code>notify</code> with an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator and an instance of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code>.\nConfiguring <code>ProductAlertsComponent</code> with an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> allows the <code>ProductAlertsComponent</code> to emit an event when the value of the <code>notify</code> property changes.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" region=\"input-output\">\nexport class ProductAlertsComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product: Product | undefined;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() notify = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>product-alerts.component.html</code> 中，修改 <strong>Notify Me</strong> 按钮，增加事件绑定，并调用 <code>notify.emit()</code> 方法。</p><p translation-origin=\"off\">In <code>product-alerts.component.html</code>, update the <strong>Notify Me</strong> button with an event binding to call the <code>notify.emit()</code> method.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.html\">\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product &amp;&amp; product.price &gt; 700\"&gt;\n  &lt;button type=\"button\" (click)=\"notify.emit()\"&gt;Notify Me&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定义用户单击按钮时发生的行为。当子组件引发事件时，父组件 <code>ProductListComponent</code>（而不是 <code>ProductAlertsComponent</code>）会采取行动。在 <code>product-list.component.ts</code> 中，定义一个 <code>onNotify()</code> 方法，类似于 <code>share()</code> 方法。</p><p translation-origin=\"off\">Define the behavior that happens when the user clicks the button.\nThe parent, <code>ProductListComponent</code> —not the <code>ProductAlertsComponent</code>— acts when the child raises the event.\nIn  <code>product-list.component.ts</code>, define an <code>onNotify()</code> method, similar to the <code>share()</code> method.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.ts\" path=\"getting-started/src/app/product-list/product-list.component.ts\" region=\"on-notify\">\nexport class ProductListComponent {\n\n  products = [...products];\n\n  share() {\n    window.alert('The product has been shared!');\n  }\n\n  onNotify() {\n    window.alert('You will be notified when the product goes on sale');\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">更新 <code>ProductListComponent</code>，以从 <code>ProductAlertsComponent</code> 中接收数据。</p><p translation-origin=\"off\">Update the <code>ProductListComponent</code> to receive data from the <code>ProductAlertsComponent</code>.</p>\n\n<p translation-result=\"on\">在 <code>product-list.component.html</code> 中，将 <code>&lt;app-product-alerts&gt;</code> 绑定到产品列表组件的 <code>onNotify()</code> 方法。<code>&lt;app-product-alerts&gt;</code> 会显示 <strong>Notify Me</strong> 按钮的内容。</p><p translation-origin=\"off\">In <code>product-list.component.html</code>, bind <code>&lt;app-product-alerts&gt;</code>  to the <code>onNotify()</code> method of the product list component.\n<code>&lt;app-product-alerts&gt;</code> is what displays the <strong>Notify Me</strong> button.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.6.html\" region=\"on-notify\">\n&lt;button type=\"button\" (click)=\"share()\"&gt;\n  Share\n&lt;/button&gt;\n\n&lt;app-product-alerts\n  [product]=\"product\" \n  (notify)=\"onNotify()\"&gt;\n&lt;/app-product-alerts&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">单击 <strong>Notify Me</strong> 按钮以触发一条通知，内容为：\"You will be notified when the product goes on sale\"。</p><p translation-origin=\"off\">Click the <strong>Notify Me</strong> button to trigger an alert which reads, \"You will be notified when the product goes on sale\".</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product alert notification confirmation dialog\" src=\"generated/images/guide/start/product-alert-notification.png\" width=\"329\" height=\"104\">\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">有关组件之间的通信的更多信息，请参见<a href=\"guide/component-interaction\" title=\"组件互动\">组件交互</a>。</p><p translation-origin=\"off\">For more information on communication between components, see <a href=\"guide/component-interaction\" title=\"Component interaction\">Component Interaction</a>.</p>\n\n<p><a id=\"whats-next\"></a></p>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本节中，你已经创建了一个应用，该应用会遍历数据，并让特性组件彼此通讯。</p><p translation-origin=\"off\">In this section, you've created an application that iterates through data and features components that communicate with each other.</p>\n\n<p translation-result=\"on\">要继续探索 Angular 并开发此应用，请执行以下操作：</p><p translation-origin=\"off\">To continue exploring Angular and developing this application:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">继续进行<a href=\"start/start-routing\" title=\"入门：应用内导航\">应用内导航</a>，以创建产品详情页。</p><p translation-origin=\"off\">Continue to <a href=\"start/start-routing\" title=\"Getting started: In-app navigation\">In-app navigation</a> to create a product details page.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">跳至<a href=\"start/start-deployment\" title=\"入门：部署\">部署</a>以转为本地开发，或将你的应用部署到 Firebase 或你自己的服务器上。</p><p translation-origin=\"off\">Skip ahead to <a href=\"start/start-deployment\" title=\"Getting started: Deployment\">Deployment</a> to move to local development, or deploy your application to Firebase or your own server.</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - docs\n - features\n - guide/developer-guide-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/localizing-angular\n - guide/router-tutorial-toh\n - guide/setup-local\n - guide/understanding-angular-overview\n - guide/what-is-angular\n - index\n - start/start-data\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n - tutorial\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - guide/architecture-components\n - guide/architecture-components#template-syntax\n - guide/component-interaction\n - guide/setup-local\n - guide/structural-directives\n - start#angular-入门\n - start#create-the-product-list\n - start#create-the-sample-project\n - start#getting-started-with-angular\n - start#pass-data-to-a-child-component\n - start#pass-data-to-a-parent-component\n - start#prerequisites\n - start#take-a-tour-of-the-example-application\n - start#whats-next\n - start#下一步呢\n - start#创建产品列表\n - start#创建范例项目\n - start#前提条件\n - start#将数据传递到父组件\n - start#将数据传递给子组件\n - start#浏览范例应用\n - start/start-deployment\n - start/start-routing\n - https://developer.mozilla.org/docs/Learn/HTML\n - https://developer.mozilla.org/docs/Web/JavaScript\n - https://developer.stackblitz.com/docs/platform\n - https://github.com/angular/angular-cn/edit/cn/aio/content/start/index.md?message=docs%3A%20请简述你的修改...\n - https://stackblitz.com\n - https://www.typescriptlang.org/\n-->"}