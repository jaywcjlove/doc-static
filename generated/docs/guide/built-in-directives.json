{
  "id": "guide/built-in-directives",
  "title": "内置指令",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/built-in-directives.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"built-in-directives\">Built-in directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"内置指令\">内置指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#内置指令\"><i class=\"material-icons\">link</i></a></h1>\n<p>Directives are classes that add additional behavior to elements\nin your Angular applications.\nUse Angular's built-in directives to manage forms, lists, styles, and what users see.</p>\n<p>指令是为 Angular 应用程序中的元素添加额外行为的类。使用 Angular 的内置指令，你可以管理表单、列表、样式以及要让用户看到的任何内容。</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n<p>包含本指南中代码片段的可工作范例，参阅<live-example></live-example>。</p>\n</div>\n<p>The different types of Angular directives are as follows:</p>\n<p>Angular 指令的不同类型如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Directive Types</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">指令类型</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/component-overview\">Components</a></td>\n<td align=\"left\">Used with a template. This type of directive is the most common directive type.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/component-overview\">组件</a></td>\n<td align=\"left\">带有模板的指令。这种指令类型是最常见的指令类型。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#built-in-attribute-directives\">Attribute directives</a></td>\n<td align=\"left\">Change the appearance or behavior of an element, component, or another directive.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#built-in-attribute-directives\">属性型指令</a></td>\n<td align=\"left\">更改元素、组件或其他指令的外观或行为的指令。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#built-in-structural-directives\">Structural directives</a></td>\n<td align=\"left\">Change the DOM layout by adding and removing DOM elements.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#built-in-structural-directives\">结构型指令</a></td>\n<td align=\"left\">通过添加和删除 DOM 元素来更改 DOM 布局。</td>\n</tr>\n</tbody>\n</table>\n<p>This guide covers built-in <a href=\"guide/built-in-directives#built-in-attribute-directives\">attribute directives</a> and <a href=\"guide/built-in-directives#built-in-structural-directives\">structural directives</a>.</p>\n<p>本指南涵盖了内置的<a href=\"guide/built-in-directives#built-in-attribute-directives\">属性型指令</a>和<a href=\"guide/built-in-directives#built-in-structural-directives\">结构型指令</a>。</p>\n<p><a id=\"attribute-directives\"></a></p>\n<h2 id=\"built-in-attribute-directives\">Built-in attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"内置属性型指令\">内置属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#内置属性型指令\"><i class=\"material-icons\">link</i></a></h2>\n<p>Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components.</p>\n<p>属性型指令会监听并修改其它 HTML 元素和组件的行为、Attribute 和 Property。</p>\n<p>Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a> and the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n<p>许多 NgModule（比如 <a href=\"guide/router\" title=\"路由和导航\"><code>RouterModule</code></a> 和 <a href=\"guide/forms\" title=\"表单\"><code>FormsModule</code></a> 都定义了自己的属性型指令。最常见的属性型指令如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Common directives</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">通用指令</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a></td>\n<td align=\"left\">Adds and removes a set of CSS classes.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a></td>\n<td align=\"left\">添加和删除一组 CSS 类。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngstyle\"><code>NgStyle</code></a></td>\n<td align=\"left\">Adds and removes a set of HTML styles.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngstyle\"><code>NgStyle</code></a></td>\n<td align=\"left\">添加和删除一组 HTML 样式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a></td>\n<td align=\"left\">Adds two-way data binding to an HTML form element.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a></td>\n<td align=\"left\">将双向数据绑定添加到 HTML 表单元素。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p>Built-in directives use only public APIs.\nThey do not have special access to any private APIs that other directives can't access.</p>\n<p>内置指令只会使用公开 API。它们不会访问任何无法被其它指令访问的私有 API。</p>\n</div>\n<p><a id=\"ngClass\"></a></p>\n<h2 id=\"adding-and-removing-classes-with-ngclass\">Adding and removing classes with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-and-removing-classes-with-ngclass\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"用-ngclass-添加和删除类\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 添加和删除类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngclass-添加和删除类\"><i class=\"material-icons\">link</i></a></h2>\n<p>Add or remove multiple CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n<p>用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 同时添加或删除多个 CSS 类。</p>\n<div class=\"alert is-helpful\">\n<p>To add or remove a <em>single</em> class, use <a href=\"guide/class-binding\">class binding</a> rather than <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>.</p>\n<p>要添加或删除<em>单个</em>类，请使用<a href=\"guide/class-binding\">类绑定</a>而不是 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>。</p>\n</div>\n<h3 id=\"using-ngclass-with-an-expression\">Using <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> with an expression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-an-expression\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"将-ngclass-与表达式一起使用\">将 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 与表达式一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#将-ngclass-与表达式一起使用\"><i class=\"material-icons\">link</i></a></h3>\n<p>On the element you'd like to style, add <code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]</code> and set it equal to an expression.\nIn this case, <code>isSpecial</code> is a boolean set to <code>true</code> in <code>app.component.ts</code>.\nBecause <code>isSpecial</code> is true, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> applies the class of <code>special</code> to the <code>&#x3C;div></code>.</p>\n<p>在要设置样式的元素上，添加 <code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]</code> 并将其设置为等于某个表达式。在这里，是在 <code>app.component.ts</code> 中将 <code>isSpecial</code> 设置为布尔值 <code>true</code>。因为 <code>isSpecial</code> 为 true，所以 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 就会把 <code>special</code> 类应用于此 <code>&#x3C;div></code> 上。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\">\n&#x3C;!-- toggle the \"special\" class on/off with a property -->\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\">This div is special&#x3C;/div>\n\n</code-example>\n<h3 id=\"using-ngclass-with-a-method\">Using <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> with a method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-a-method\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"将-ngclass-与方法一起使用\">将 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 与方法一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#将-ngclass-与方法一起使用\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p>To use <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> with a method, add the method to the component class.\nIn the following example, <code>setCurrentClasses()</code> sets the property <code>currentClasses</code> with an object that adds or removes three classes based on the <code>true</code> or <code>false</code> state of three other component properties.</p>\n<p>要将 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 与方法一起使用，请将方法添加到组件类中。在下面的示例中，<code>setCurrentClasses()</code> 使用一个对象来设置属性 <code>currentClasses</code>，该对象根据另外三个组件属性为 <code>true</code> 或 <code>false</code> 来添加或删除三个 CSS 类。</p>\n<p>Each key of the object is a CSS class name.\nIf a key is <code>true</code>, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> adds the class.\nIf a key is <code>false</code>, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> removes the class.</p>\n<p>该对象的每个键（key）都是一个 CSS 类名。如果键为 <code>true</code>，则 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 添加该类。如果键为 <code>false</code>，则 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 删除该类。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\">\ncurrentClasses: Record&#x3C;string, boolean> = {};\n/* . . . */\nsetCurrentClasses() {\n  // CSS classes: added/removed per current state of component properties\n  this.currentClasses =  {\n    saveable: this.canSave,\n    modified: !this.isUnchanged,\n    special:  this.isSpecial\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p>In the template, add the <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> property binding to <code>currentClasses</code> to set the element's classes:</p>\n<p>在模板中，把 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 属性绑定到 <code>currentClasses</code>，根据它来设置此元素的 CSS 类：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\">This div is initially saveable, unchanged, and special.&#x3C;/div>\n\n</code-example>\n</li>\n</ol>\n<p>For this use case, Angular applies the classes on initialization and in case of changes.\nThe full example calls <code>setCurrentClasses()</code> initially with <code>ngOnInit()</code> and when the dependent properties change through a button click.\nThese steps are not necessary to implement <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.\nFor more information, see the <live-example></live-example> <code>app.component.ts</code> and <code>app.component.html</code>.</p>\n<p>在这个例子中，Angular 会在初始化以及发生更改的情况下应用这些类。完整的示例会在 <code>ngOnInit()</code> 中进行初始化以及通过单击按钮更改相关属性时调用 <code>setCurrentClasses()</code>。这些步骤对于实现 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 不是必需的。有关更多信息，请参见<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p>\n<p><a id=\"ngstyle\"></a></p>\n<h2 id=\"setting-inline-styles-with-ngstyle\">Setting inline styles with <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"用-ngstyle-设置内联样式\">用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 设置内联样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngstyle-设置内联样式\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set multiple inline styles simultaneously, based on the state of the component.</p>\n<p>可以用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 根据组件的状态同时设置多个内联样式。</p>\n<ol>\n<li>\n<p>To use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>, add a method to the component class.</p>\n<p>要使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>，请向组件类添加一个方法。</p>\n<p>In the following example, <code>setCurrentStyles()</code> sets the property <code>currentStyles</code> with an object that defines three styles, based on the state of three other component properties.</p>\n<p>在下面的例子中，<code>setCurrentStyles()</code> 方法基于该组件另外三个属性的状态，用一个定义了三个样式的对象设置了 <code>currentStyles</code> 属性。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\">\ncurrentStyles: Record&#x3C;string, string> = {};\n/* . . . */\nsetCurrentStyles() {\n  // CSS styles: set per current state of component properties\n  this.currentStyles = {\n    'font-style':  this.canSave      ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n    'font-size':   this.isSpecial    ? '24px'   : '12px'\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p>To set the element's styles, add an <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> property binding to <code>currentStyles</code>.</p>\n<p>要设置元素的样式，请将 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 属性绑定到 <code>currentStyles</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n</li>\n</ol>\n<p>For this use case, Angular applies the styles upon initialization and in case of changes.\nTo do this, the full example calls <code>setCurrentStyles()</code> initially with <code>ngOnInit()</code> and when the dependent properties change through a button click.\nHowever, these steps are not necessary to implement <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> on its own.\nSee the <live-example></live-example> <code>app.component.ts</code> and <code>app.component.html</code> for this optional implementation.</p>\n<p>在这个例子中，Angular 会在初始化以及发生更改的情况下应用这些类。完整的示例会在 <code>ngOnInit()</code> 中进行初始化以及通过单击按钮更改相关属性时调用 <code>setCurrentStyles()</code>。不过，这些步骤对于实现 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 不是必需的。有关更多信息，请参见<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p>\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"displaying-and-updating-properties-with-ngmodel\">Displaying and updating properties with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"用-ngmodel-显示和更新属性\">用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 显示和更新属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngmodel-显示和更新属性\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive to display a data property and update that property when the user makes changes.</p>\n<p>可以用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令显示数据属性，并在用户进行更改时更新该属性。</p>\n<ol>\n<li>\n<p>Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>  and add it to the NgModule's <code>imports</code> list.</p>\n<p>导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，并将其添加到 NgModule 的 <code>imports</code> 列表中。</p>\n<code-example header=\"src/app/app.module.ts (FormsModule import)\" path=\"built-in-directives/src/app/app.module.ts\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  /* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;--- import into the <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>\n  ],\n  /* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n</li>\n<li>\n<p>Add an <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> binding on an HTML <code>&#x3C;form></code> element and set it equal to the property, here <code>name</code>.</p>\n<p>在 HTML 的 <code>&#x3C;form></code> 元素上添加 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 绑定，并将其设置为等于此属性，这里是 <code>name</code>。</p>\n<code-example header=\"src/app/app.component.html (NgModel example)\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<p>This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only set a data-bound property.</p>\n<p>此 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法只能设置数据绑定属性。</p>\n</li>\n</ol>\n<p>To customize your configuration, write the expanded form, which separates the property and event binding.\nUse <a href=\"guide/property-binding\">property binding</a> to set the property and <a href=\"guide/event-binding\">event binding</a> to respond to changes.\nThe following example changes the <code>&#x3C;input></code> value to uppercase:</p>\n<p>要自定义配置，你可以编写可展开的表单，该表单将属性绑定和事件绑定分开。使用<a href=\"guide/property-binding\">属性绑定</a>来设置属性，并使用<a href=\"guide/event-binding\">事件绑定</a>来响应更改。以下示例将 <code>&#x3C;input></code> 值更改为大写：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\">\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\">\n\n</code-example>\n<p>Here are all variations in action, including the uppercase version:</p>\n<p>这里是所有这些变体的动画，包括这个大写转换的版本：</p>\n<div class=\"lightbox\">\n<img alt=\"NgModel variations\" src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" width=\"540\" height=\"264\">\n</div>\n<h3 id=\"ngmodel-and-value-accessors\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ngmodel-和值访问器\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和值访问器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-和值访问器\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive works for an element supported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements.\nFor more information, see <a href=\"guide/forms\">Forms</a>.</p>\n<p><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令适用于<a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>支持的元素。Angular 为所有基本 HTML 表单元素提供了<em>值访问器。</em>有关更多信息，请参见<a href=\"guide/forms\">Forms</a>。</p>\n<p>To apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form built-in element or a third-party custom component, you have to write a value accessor.\nFor more information, see the API documentation on <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n<p>要将 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 应用于非表单型内置元素或第三方自定义组件，必须编写一个值访问器。有关更多信息，请参见 <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a> 上的 API 文档。</p>\n<div class=\"alert is-helpful\">\n<p>When you write an Angular component, you don't need a value accessor or <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> if you  name the value and event properties according to Angular's <a href=\"guide/two-way-binding#how-two-way-binding-works\">two-way binding syntax</a>.</p>\n<p>编写 Angular 组件时，如果根据 Angular 的<a href=\"guide/two-way-binding#how-two-way-binding-works\">双向绑定语法</a>命名 value 和 event 属性，则不需要用值访问器（ControlValueAccessor）或 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。</p>\n</div>\n<p><a id=\"structural-directives\"></a></p>\n<h2 id=\"built-in-structural-directives\">Built-in structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"内置结构型指令\">内置结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#内置结构型指令\"><i class=\"material-icons\">link</i></a></h2>\n<p>Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.</p>\n<p>结构型指令的职责是 HTML 布局。它们塑造或重塑 DOM 的<em>结构</em>，这通常是通过添加、移除和操纵它们所附加到的宿主元素来实现的。</p>\n<p>This section introduces the most common built-in structural directives:</p>\n<p>本节会介绍最常见的内置结构型指令：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Common built-in structural directives</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">常见的内置结构型指令</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a></td>\n<td align=\"left\">Conditionally creates or disposes of subviews from the template.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a></td>\n<td align=\"left\">有条件地从模板创建或销毁子视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a></td>\n<td align=\"left\">Repeat a node for each item in a list.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a></td>\n<td align=\"left\">为列表中的每个条目重复渲染一个节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a></td>\n<td align=\"left\">A set of directives that switch among alternative views.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a></td>\n<td align=\"left\">一组在备用视图之间切换的指令。</td>\n</tr>\n</tbody>\n</table>\n<p>For more information, see <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n<p>欲知详情，参阅<a href=\"guide/structural-directives\">结构型指令</a>。</p>\n<p><a id=\"ngIf\"></a></p>\n<h2 id=\"adding-or-removing-an-element-with-ngif\">Adding or removing an element with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-or-removing-an-element-with-ngif\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"用-ngif-添加或删除元素\">用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 添加或删除元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngif-添加或删除元素\"><i class=\"material-icons\">link</i></a></h2>\n<p>Add or remove an element by applying an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive to a host element.</p>\n<p>可以将 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令应用于宿主元素来添加或删除元素。</p>\n<p>When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes an element and its descendants from the DOM.\nAngular then disposes of their components, which frees up memory and resources.</p>\n<p>如果 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 为 <code>false</code>，则 Angular 将从 DOM 中移除一个元素及其后代。然后，Angular 会销毁其组件，从而释放内存和资源。</p>\n<p>To add or remove an element, bind <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> to a condition expression such as <code>isActive</code> in the following example.</p>\n<p>要添加或删除元素，请在以下示例 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 绑定到条件表达式，比如 <code>isActive</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\">\n&#x3C;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>When the <code>isActive</code> expression returns a truthy value, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> adds the <code>ItemDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes the <code>ItemDetailComponent</code> from the DOM and disposes of the component and all of its subcomponents.</p>\n<p>当 <code>isActive</code> 表达式返回真值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会把 <code>ItemDetailComponent</code> 添加到 DOM 中。当表达式为假值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会从 DOM 中删除 <code>ItemDetailComponent</code> 并销毁该组件及其所有子组件。</p>\n<p>For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>NgIfElse</code>, see the <a href=\"api/common/NgIf\">NgIf API documentation</a>.</p>\n<p>关于 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>NgIfElse</code> 的更多信息，请参见<a href=\"api/common/NgIf\">NgIf API 文档</a>。</p>\n<h3 id=\"guarding-against-null\">Guarding against <code>null</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guarding-against-null\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"防止-null\">防止 <code>null</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#防止-null\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> prevents display of an element bound to a null value.</p>\n<p>默认情况下，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会阻止显示已绑定到空值的元素。</p>\n<p>To use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> to guard a <code>&#x3C;div></code>, add <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"yourProperty\"</code> to the <code>&#x3C;div></code>.\nIn the following example, the <code>currentCustomer</code> name appears because there is a <code>currentCustomer</code>.</p>\n<p>要使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 保护 <code>&#x3C;div></code>，请将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"yourProperty\"</code> 添加到此 <code>&#x3C;div></code>。在下面的例子中，<code>currentCustomer</code> 名字出现了，是因为确实存在一个 <code>currentCustomer</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\">Hello, {{currentCustomer.name}}&#x3C;/div>\n\n</code-example>\n<p>However, if the property is <code>null</code>, Angular does not display the <code>&#x3C;div></code>.\nIn this example, Angular does not display the <code>nullCustomer</code> because it is <code>null</code>.</p>\n<p>但是，如果该属性为 <code>null</code>，则 Angular 就不会显示 <code>&#x3C;div></code>。在这个例子中，Angular 就不会显示 <code>nullCustomer</code>，因为它为 <code>null</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\">Hello, &#x3C;span>{{nullCustomer}}&#x3C;/span>&#x3C;/div>\n\n</code-example>\n<p><a id=\"ngFor\"></a></p>\n<h2 id=\"listing-items-with-ngfor\">Listing items with <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#listing-items-with-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"ngfor-条目列表\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 条目列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-条目列表\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive to present a list of items.</p>\n<p>可以用 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 来指令显示条目列表。</p>\n<ol>\n<li>\n<p>Define a block of HTML that determines how Angular renders a single item.</p>\n<p>定义一个 HTML 块，该块会决定 Angular 如何渲染单个条目。</p>\n</li>\n<li>\n<p>To list your items, assign the shorthand <code>let item of items</code> to <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.</p>\n<p>要列出你的条目，请把一个简写形式 <code>let item of items</code> 赋值给 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。</p>\n</li>\n</ol>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\">\n&#x3C;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n\n</code-example>\n<p>The string <code>\"let item of items\"</code> instructs Angular to do the following:</p>\n<p>字符串 <code>\"let item of items\"</code> 会指示 Angular 执行以下操作：</p>\n<ul>\n<li>\n<p>Store each item in the <code>items</code> array in the local <code>item</code> looping variable</p>\n<p>将 <code>items</code> 中的每个条目存储在局部循环变量 <code>item</code> 中</p>\n</li>\n<li>\n<p>Make each item available to the templated HTML for each iteration</p>\n<p>让每个条目都可用于每次迭代时的模板 HTML 中</p>\n</li>\n<li>\n<p>Translate <code>\"let item of items\"</code> into an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> around the host element</p>\n<p>将 <code>\"let item of items\"</code> 转换为环绕宿主元素的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code></p>\n</li>\n<li>\n<p>Repeat the <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> for each <code>item</code> in the list</p>\n<p>对列表中的每个 <code>item</code> 复写这个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code></p>\n</li>\n</ul>\n<p>For more information see the <a href=\"guide/structural-directives#shorthand\">Structural directive shorthand</a> section of <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n<p>欲知详情，参阅<a href=\"guide/structural-directives\">结构型指令</a>中的<a href=\"guide/structural-directives#shorthand\">结构型指令的简写形式</a>部分。</p>\n<h3 id=\"repeating-a-component-view\">Repeating a component view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-a-component-view\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"复写组件视图\">复写组件视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#复写组件视图\"><i class=\"material-icons\">link</i></a></h3>\n<p>To repeat a component element, apply <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to the selector.\nIn the following example, the selector is <code>&#x3C;app-item-detail></code>.</p>\n<p>要复写某个组件元素，请将 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 应用于其选择器。在以下示例中，选择器为 <code>&#x3C;app-item-detail></code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\">\n&#x3C;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Reference a template input variable, such as <code>item</code>, in the following locations:</p>\n<p>你可以在以下位置引用模板输入变量，比如 <code>item</code>：</p>\n<ul>\n<li>\n<p>Within the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> host element</p>\n<p>在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的宿主元素中</p>\n</li>\n<li>\n<p>Within the host element descendants to access the item's properties</p>\n<p>在宿主元素的后代中，用以访问条目的属性</p>\n</li>\n</ul>\n<p>The following example references <code>item</code> first in an interpolation and then passes in a binding to the <code>item</code> property of the <code>&#x3C;app-item-detail></code> component.</p>\n<p>以下示例首先在插值中引用 <code>item</code>，然后将它通过绑定传递给 <code>&#x3C;app-item-detail></code> 组件的 <code>item</code> 属性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\">\n&#x3C;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n&#x3C;!-- . . . -->\n&#x3C;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>For more information about template input variables, see <a href=\"guide/structural-directives#shorthand\">Structural directive shorthand</a>.</p>\n<p>有关模板输入变量的更多信息，请参见《结构型指令简写形式》](guide/structural-directives#shorthand)。</p>\n<h3 id=\"getting-the-index-of-ngfor\">Getting the <code>index</code> of <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#getting-the-index-of-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"获取-ngfor-的-index\">获取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#获取-ngfor-的-index\"><i class=\"material-icons\">link</i></a></h3>\n<p>Get the <code>index</code> of <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> in a template input variable and use it in the template.</p>\n<p>可以获取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code>，并在模板中使用它。</p>\n<p>In the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, add a semicolon and <code>let i=index</code> to the shorthand.\nThe following example gets the <code>index</code> in a variable named <code>i</code> and displays it with the item name.</p>\n<p>在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中，添加一个分号和 <code>let i=index</code> 简写形式。下面的例子中把 <code>index</code> 取到一个名为 <code>i</code> 的变量中，并将其与条目名称一起显示。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\">\n&#x3C;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\">{{i + 1}} - {{item.name}}&#x3C;/div>\n\n</code-example>\n<p>The index property of the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive context returns the zero-based index of the item in each iteration.</p>\n<p><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令上下文的 <code>index</code> 属性在每次迭代中都会返回该条目的从零开始的索引号。</p>\n<p>Angular translates this instruction into an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code>item</code>\nin the list.\nFor more information about shorthand, see the <a href=\"guide/structural-directives#shorthand\">Structural Directives</a> guide.</p>\n<p>Angular 会将此指令转换为 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code>，然后反复使用此模板为列表中的每个 <code>item</code> 创建一组新的元素和绑定。有关简写形式的更多信息，请参见<a href=\"guide/structural-directives#shorthand\">《结构型指令》</a>指南。</p>\n<h2 id=\"repeating-elements-when-a-condition-is-true\">Repeating elements when a condition is true<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-elements-when-a-condition-is-true\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"当条件为真时复写元素\">当条件为真时复写元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#当条件为真时复写元素\"><i class=\"material-icons\">link</i></a></h2>\n<p>To repeat a block of HTML when a particular condition is true, put the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on a container element that wraps an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> element.</p>\n<p>要在特定条件为真时重复某个 HTML 块，请将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在包裹此 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 元素的容器元素上。</p>\n<p>For more information see <a href=\"guide/structural-directives#one-per-element\">one structural directive per element</a>.</p>\n<p>有关更多信息，参阅<a href=\"guide/structural-directives#one-per-element\">每个元素只能有一个结构型指令</a>。</p>\n<p><a id=\"ngfor-with-trackby\"></a></p>\n<h3 id=\"tracking-items-with-ngfor-trackby\">Tracking items with <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#tracking-items-with-ngfor-trackby\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"用-ngfor-的-trackby-跟踪条目\">用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 跟踪条目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngfor-的-trackby-跟踪条目\"><i class=\"material-icons\">link</i></a></h3>\n<p>Reduce the number of calls your application makes to the server by tracking changes to an item list.\nWith the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> <code>trackBy</code> property, Angular can change and re-render only those items that have changed, rather than reloading the entire list of items.</p>\n<p>通过跟踪对条目列表的更改，可以减少应用程序对服务器的调用次数。使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 属性，Angular 只能更改和重新渲染已更改的条目，而不必重新加载整个条目列表。</p>\n<ol>\n<li>\n<p>Add a method to the component that returns the value <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> should track.\nIn this example, the value to track is the item's <code>id</code>.\nIf the browser has already rendered <code>id</code>, Angular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n<p>向该组件添加一个方法，该方法返回 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 应该跟踪的值。这个例子中，该值是英雄的 <code>id</code>。如果浏览器已经渲染过此 <code>id</code>，Angular 就会跟踪它，而不会重新向服务器查询相同的 <code>id</code>。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\">\ntrackByItems(index: number, item: Item): number { return item.id; }\n\n</code-example>\n</li>\n<li>\n<p>In the shorthand expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n<p>在简写表达式中，将 <code>trackBy</code> 设置为 <code>trackByItems()</code> 方法。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\">\n&#x3C;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\">\n  ({{item.id}}) {{item.name}}\n&#x3C;/div>\n\n</code-example>\n</li>\n</ol>\n<p><strong>Change ids</strong> creates new items with new <code>item.id</code>s.\nIn the following illustration of the <code>trackBy</code> effect, <strong>Reset items</strong> creates new items with the same <code>item.id</code>s.</p>\n<p><strong>更改这些 ID</strong> 会使用新的 <code>item.id</code> 创建新的条目。在下面的 <code>trackBy</code> 效果演示中，<strong>Reset items</strong> 会创建一些具有和以前相同的 <code>item.id</code> 的新条目。</p>\n<ul>\n<li>\n<p>With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</p>\n<p>如果没有 <code>trackBy</code>，这些按钮都会触发完全的 DOM 元素替换。</p>\n</li>\n<li>\n<p>With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</p>\n<p>有了 <code>trackBy</code>，则只有修改了 <code>id</code> 的按钮才会触发元素替换。</p>\n</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Animation of trackBy\" src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" width=\"492\" height=\"442\">\n</div>\n<p><a id=\"ngcontainer\"></a></p>\n<h2 id=\"hosting-a-directive-without-a-dom-element\">Hosting a directive without a DOM element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#hosting-a-directive-without-a-dom-element\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"为没有-dom-元素的指令安排宿主\">为没有 DOM 元素的指令安排宿主<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#为没有-dom-元素的指令安排宿主\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM.</p>\n<p>Angular 的 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 是一个分组元素，它不会干扰样式或布局，因为 Angular 不会将其放置在 DOM 中。</p>\n<p>Use <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> when there's no single element to host the directive.</p>\n<p>当没有单个元素承载指令时，可以使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code>。</p>\n<p>Here's a conditional paragraph using <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code>.</p>\n<p>这是使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 的条件化段落。</p>\n<code-example header=\"src/app/app.component.html (ngif-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"ngif-ngcontainer\">\n&#x3C;p>\n  I turned the corner\n  &#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n    and saw {{hero.name}}. I waved\n  &#x3C;/ng-container>\n  and continued on my way.\n&#x3C;/p>\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer paragraph with proper style\" src=\"generated/images/guide/structural-directives/good-paragraph.png\" width=\"509\" height=\"15\">\n</div>\n<ol>\n<li>\n<p>Import the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive from <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n<p>从 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 中导入 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p>\n</li>\n<li>\n<p>Add <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the imports section of the relevant Angular module.</p>\n<p>将 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到相关 Angular 模块的 imports 部分。</p>\n</li>\n<li>\n<p>To conditionally exclude an <code>&#x3C;option></code>, wrap the <code>&#x3C;option></code> in an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code>.</p>\n<p>要有条件地排除 <code>&#x3C;option></code>，请将 <code>&#x3C;option></code> 包裹在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 中。</p>\n<code-example header=\"src/app/app.component.html (select-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"select-ngcontainer\">\n&#x3C;div>\n  Pick your favorite hero\n  (&#x3C;label>&#x3C;input type=\"checkbox\" checked (change)=\"showSad = !showSad\">show sad&#x3C;/label>)\n&#x3C;/div>\n&#x3C;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\">\n  &#x3C;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\">\n    &#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\">\n      &#x3C;option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})&#x3C;/option>\n    &#x3C;/ng-container>\n  &#x3C;/ng-container>\n&#x3C;/select>\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer options work properly\" src=\"generated/images/guide/structural-directives/select-ngcontainer-anim.gif\" width=\"312\" height=\"100\">\n</div>\n</li>\n</ol>\n<p><a id=\"ngSwitch\"></a></p>\n<h2 id=\"switching-cases-with-ngswitch\">Switching cases with <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#switching-cases-with-ngswitch\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"用-ngswitch\">用 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngswitch\"><i class=\"material-icons\">link</i></a></h2>\n<p>Like the JavaScript <code>switch</code> statement, <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.</p>\n<p>就像 JavaScript 的 <code>switch</code> 语句一样。<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 会根据切换条件显示几个可能的元素中的一个。Angular 只会将选定的元素放入 DOM。</p>\n<!--todo: API Flagged -->\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is a set of three directives:</p>\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是一组指令（共三个）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> directives</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 指令</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code></td>\n<td align=\"left\">An attribute directive that changes the behavior of its companion directives.</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code></td>\n<td align=\"left\">一个属性型指令，会更改其伴生指令的行为。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code></td>\n<td align=\"left\">Structural directive that adds its element to the DOM when its bound value equals the switch value and removes its bound value when it doesn't equal the switch value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code></td>\n<td align=\"left\">当其绑定值等于开关值时将其元素添加到 DOM 中，而在其不等于开关值时将其绑定值移除。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code></td>\n<td align=\"left\">Structural directive that adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code></td>\n<td align=\"left\">当没有选中的 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 时，将其宿主元素添加到 DOM 中。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<p>On an element, such as a <code>&#x3C;div></code>, add <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> bound to an expression that returns the switch value, such as <code>feature</code>.\nThough the <code>feature</code> value in this example is a string, the switch value can be of any type.</p>\n<p>在每个元素（比如 <code>&#x3C;div></code>）上，把 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 绑定到一个返回开关值的表达式（比如 <code>feature</code>）。尽管这个例子中 <code>feature</code> 值是字符串，但此开关值可以是任何类型。</p>\n</li>\n<li>\n<p>Bind to <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> on the elements for the cases.</p>\n<p>将各个分支元素绑定到 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\">\n  &#x3C;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\">&#x3C;/app-stout-item>\n  &#x3C;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\">&#x3C;/app-device-item>\n  &#x3C;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\">&#x3C;/app-lost-item>\n  &#x3C;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\">&#x3C;/app-best-item>\n&#x3C;!-- . . . -->\n  &#x3C;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\">&#x3C;/app-unknown-item>\n&#x3C;/div>\n\n</code-example>\n</li>\n<li>\n<p>In the parent component, define <code>currentItem</code>, to use it in the <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> expression.</p>\n<p>在父组件中，定义 <code>currentItem</code> 以便可以在 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 表达式中使用它。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"item\">\ncurrentItem!: Item;\n\n</code-example>\n</li>\n<li>\n<p>In each child component, add an <code>item</code> <a href=\"guide/inputs-outputs#input\" title=\"Input property\">input property</a> which is bound to the <code>currentItem</code> of the parent component.\nThe following two snippets show the parent component and one of the child components.\nThe other child components are identical to <code>StoutItemComponent</code>.</p>\n<p>在每个子组件中，添加一个<a href=\"guide/inputs-outputs#input\" title=\"输入属性\">输入属性</a> <code>item</code>，该属性会绑定到父组件的 <code>currentItem</code>。以下两个片段显示了父组件和其中一个子组件。其他子组件与 <code>StoutItemComponent</code> 中的相同。</p>\n<code-example header=\"In each child component, here StoutItemComponent\" path=\"built-in-directives/src/app/item-switch.component.ts\" region=\"input\">\nexport class StoutItemComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item!: Item;\n}\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"Animation of NgSwitch\" src=\"generated/images/guide/built-in-directives/ngswitch.gif\" width=\"370\" height=\"256\">\n</div>\n</li>\n</ol>\n<p>Switch directives also work with built-in HTML elements and web components.\nFor example, you could replace the <code>&#x3C;app-best-item></code> switch case with a <code>&#x3C;div></code> as follows.</p>\n<p>Switch 指令也同样适用于内置 HTML 元素和 Web Component。比如，你可以像下面的例子中一样把 <code>&#x3C;app-best-item></code> 分支替换为 <code>&#x3C;div></code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\">\n&#x3C;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"> Are you as bright as {{currentItem.name}}?&#x3C;/div>\n\n</code-example>\n<h2 id=\"whats-next\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"下一步呢\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#下一步呢\"><i class=\"material-icons\">link</i></a></h2>\n<p>For information on how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n<p>有关如何构建自己的自定义指令的信息，请参见<a href=\"guide/attribute-directives\">“属性型指令”</a>和<a href=\"guide/structural-directives\">“结构型指令”</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/example-apps-list\n - guide/glossary\n - guide/structural-directives\n - guide/template-overview\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/two-way-binding\n - guide/understanding-angular-overview\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - guide/what-is-angular\n - tutorial/toh-pt2\n-->\n<!-- links from this doc:\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Input\n - api/core/NgModule\n - api/core/ng-container\n - api/core/ng-template\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/attribute-directives\n - guide/built-in-directives#adding-and-removing-classes-with-ngclass\n - guide/built-in-directives#adding-or-removing-an-element-with-ngif\n - guide/built-in-directives#built-in-attribute-directives\n - guide/built-in-directives#built-in-directives\n - guide/built-in-directives#built-in-structural-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#getting-the-index-of-ngfor\n - guide/built-in-directives#guarding-against-null\n - guide/built-in-directives#hosting-a-directive-without-a-dom-element\n - guide/built-in-directives#listing-items-with-ngfor\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngModel\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngfor-条目列表\n - guide/built-in-directives#ngmodel-and-value-accessors\n - guide/built-in-directives#ngmodel-和值访问器\n - guide/built-in-directives#ngstyle\n - guide/built-in-directives#repeating-a-component-view\n - guide/built-in-directives#repeating-elements-when-a-condition-is-true\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/built-in-directives#tracking-items-with-ngfor-trackby\n - guide/built-in-directives#using-ngclass-with-a-method\n - guide/built-in-directives#using-ngclass-with-an-expression\n - guide/built-in-directives#whats-next\n - guide/built-in-directives#下一步呢\n - guide/built-in-directives#为没有-dom-元素的指令安排宿主\n - guide/built-in-directives#内置属性型指令\n - guide/built-in-directives#内置指令\n - guide/built-in-directives#内置结构型指令\n - guide/built-in-directives#复写组件视图\n - guide/built-in-directives#将-ngclass-与方法一起使用\n - guide/built-in-directives#将-ngclass-与表达式一起使用\n - guide/built-in-directives#当条件为真时复写元素\n - guide/built-in-directives#用-ngclass-添加和删除类\n - guide/built-in-directives#用-ngfor-的-trackby-跟踪条目\n - guide/built-in-directives#用-ngif-添加或删除元素\n - guide/built-in-directives#用-ngmodel-显示和更新属性\n - guide/built-in-directives#用-ngstyle-设置内联样式\n - guide/built-in-directives#用-ngswitch\n - guide/built-in-directives#获取-ngfor-的-index\n - guide/built-in-directives#防止-null\n - guide/class-binding\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/inputs-outputs#input\n - guide/property-binding\n - guide/router\n - guide/structural-directives\n - guide/structural-directives#one-per-element\n - guide/structural-directives#shorthand\n - guide/two-way-binding#how-two-way-binding-works\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/built-in-directives.md?message=docs%3A%20请简述你的修改...\n-->"
}