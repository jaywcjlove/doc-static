{
  "id": "guide/set-document-title",
  "title": "Set the document title",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/set-document-title.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<a id=\"top\"></a>\n<h1 id=\"set-the-document-title\" translation-result=\"on\">设置文档标题<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#set-the-document-title\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"set-the-document-title\">Set the document title<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#set-the-document-title\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">你的应用应该能让浏览器标题栏显示你想让它显示的内容。本文会解释怎么做。</p><p translation-origin=\"off\">Your app should be able to make the browser title bar say whatever you want it to say.\nThis cookbook explains how to do it.</p>\n\n<p translation-result=\"on\">参见<live-example name=\"set-document-title\"></live-example></p><p translation-origin=\"off\">See the <live-example name=\"set-document-title\"></live-example>.</p>\n\n<h2 id=\"the-problem-with-title\" translation-result=\"on\"><em>&#x3C;title></em>的问题<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#the-problem-with-title\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-problem-with-title\">The problem with <em>&#x3C;title></em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#the-problem-with-title\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">显而易见的方法是把组件的属性绑定到 HTML 的 <code>&#x3C;title></code> 标签上，像这样：</p><p translation-origin=\"off\">The obvious approach is to bind a property of the component to the HTML <code>&#x3C;title></code> like this:</p>\n\n<code-example format=\"\">\n  &#x3C;title>{{This_Does_Not_Work}}&#x3C;/title>\n</code-example>\n<p translation-result=\"on\">抱歉，这样不行。应用程序的根组件是一个包含在 <code>&#x3C;body></code> 标签里的元素。该 HTML 的 <code>&#x3C;title></code> 在文档的 <code>&#x3C;head></code> 元素里，在 <code>&#x3C;body></code> 之外，Angular 的数据绑定无法访问到它。</p><p translation-origin=\"off\">Sorry but that won't work.\nThe root component of the application is an element contained within the <code>&#x3C;body></code> tag.\nThe HTML <code>&#x3C;title></code> is in the document <code>&#x3C;head></code>, outside the body, making it inaccessible to Angular data binding.</p>\n\n<p translation-result=\"on\">可以从浏览器获得 <code>document</code> 对象，并且手动设置标题。但是这样看起来很脏，而且将无法在浏览器之外运行应用程序。</p><p translation-origin=\"off\">You could grab the browser <code>document</code> object and set the title manually.\nThat's dirty and undermines your chances of running the app outside of a browser someday.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  在浏览器外运行应用程序意味着：利用服务器端预先渲染，为应用程序实现几乎实时的首次渲染，同时还能支持 SEO(搜索引擎优化)。\n意味着你可以在一个 Web Worker 中运行你的应用程序，通过多线程技术增强应用程序的响应性。\n还意味着你可以在 Electron.js 或者 Windows Universal 里面运行，发布到桌面环境。</p><p translation-origin=\"off\">  Running your app outside a browser means that you can take advantage of server-side\npre-rendering for near-instant first app render times and for SEO. It means you could run from\ninside a Web Worker to improve your app's responsiveness by using multiple threads. And it\nmeans that you could run your app inside Electron.js or Windows Universal to deliver it to the desktop.</p>\n\n</div>\n<h2 id=\"use-the-title-service\" translation-result=\"on\">使用 <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#use-the-title-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"use-the-title-service\">Use the <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#use-the-title-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">幸运的是，Angular 在<em>浏览器平台</em>的包中，提供了一个 <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> 服务，弥补了这种差异。\n<a href=\"api/platform-browser/Title\">Title</a>服务是一个简单的类，提供了一个 API，用来获取和设置当前 HTML 文档的标题。</p><p translation-origin=\"off\">Fortunately, Angular bridges the gap by providing a <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> service as part of the <em>Browser platform</em>.\nThe <a href=\"api/platform-browser/Title\">Title</a> service is a simple class that provides an API\nfor getting and setting the current HTML document title:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>getTitle(): string</code> —— 获取当前 HTML 文档的标题。</p><p translation-origin=\"off\"><code>getTitle() : string</code>—Gets the title of the current HTML document.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>setTitle( newTitle: string)</code> —— 设置当前 HTML 文档的标题。</p><p translation-origin=\"off\"><code>setTitle( newTitle : string )</code>—Sets the title of the current HTML document.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你可以把 <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> 服务注入到根组件 <code>AppComponent</code>，并暴露出可供绑定的 <code>setTitle</code> 方法让别人来调用该服务：</p><p translation-origin=\"off\">You can inject the <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> service into the root <code>AppComponent</code> and expose a bindable <code>setTitle</code> method that calls it:</p>\n\n<code-example path=\"set-document-title/src/app/app.component.ts\" region=\"class\" header=\"src/app/app.component.ts (class)\">\nexport class AppComponent {\n  public constructor(private titleService: <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> ) { }\n\n  public setTitle( newTitle: string) {\n    this.titleService.setTitle( newTitle );\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">把这个方法绑定到三个 A 标签，瞧瞧！</p><p translation-origin=\"off\">Bind that method to three anchor tags and voilà!</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/set-document-title/set-title-anim.gif\" alt=\"Set title\" width=\"596\" height=\"316\">\n</div>\n<p translation-result=\"on\">这里是完整的方案(代码)。</p><p translation-origin=\"off\">Here's the complete solution:</p>\n\n<code-tabs>\n  <code-pane header=\"src/main.ts\" path=\"set-document-title/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.module.ts\" path=\"set-document-title/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.ts\" path=\"set-document-title/src/app/app.component.ts\">\n// Import the native Angular services.\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> }     from '@angular/platform-browser';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\nselector: 'app-root',\ntemplate:\n  `&#x3C;p>\n    Select a title to set on the current HTML document:\n  &#x3C;/p>\n\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a (click)=\"setTitle( 'Good morning!' )\">Good morning&#x3C;/a>.&#x3C;/li>\n    &#x3C;li>&#x3C;a (click)=\"setTitle( 'Good afternoon!' )\">Good afternoon&#x3C;/a>.&#x3C;/li>\n    &#x3C;li>&#x3C;a (click)=\"setTitle( 'Good evening!' )\">Good evening&#x3C;/a>.&#x3C;/li>\n  &#x3C;/ul>\n  `\n})\nexport class AppComponent {\n  public constructor(private titleService: <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> ) { }\n\n  public setTitle( newTitle: string) {\n    this.titleService.setTitle( newTitle );\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"why-provide-the-title-service-in-bootstrap\" translation-result=\"on\">为什么要在 <em>bootstrap</em> 里面提供这个 <em>Title</em> 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#why-provide-the-title-service-in-bootstrap\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-provide-the-title-service-in-bootstrap\">Why provide the <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> service in <code>bootstrap</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#why-provide-the-title-service-in-bootstrap\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你通常会在应用程序的根组件 <code>AppComponent</code> 中提供应用程序级的服务。</p><p translation-origin=\"off\">Generally you want to provide application-wide services in the root application component, <code>AppComponent</code>.</p>\n\n<p translation-result=\"on\">但这里，要在引导过程中注册这个 Title 服务，这个位置是为你设置 Angular 运行环境而保留的。</p><p translation-origin=\"off\">This cookbook recommends registering the title service during bootstrapping,\na location you reserve for configuring the runtime Angular environment.</p>\n\n<p translation-result=\"on\">你的做法正是如此。这里的 <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> 服务是 Angular<em>浏览器平台</em>的一部分。如果在其它平台上引导应用程序，就得提供另一个专为那个平台准备的 <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> 服务。</p><p translation-origin=\"off\">That's exactly what you're doing.\nThe <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> service is part of the Angular <em>browser platform</em>.\nIf you bootstrap your application into a different platform,\nyou'll have to provide a different <code><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a></code> service that understands\nthe concept of a \"document title\" for that specific platform.\nIdeally, the application itself neither knows nor cares about the runtime environment.</p>\n\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/platform-browser/Title\n - guide/set-document-title#set-the-document-title\n - guide/set-document-title#the-problem-with-title\n - guide/set-document-title#use-the-title-service\n - guide/set-document-title#why-provide-the-title-service-in-bootstrap\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/set-document-title.md?message=docs%3A%20请简述你的修改...\n-->"
}