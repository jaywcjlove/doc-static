{
  "id": "guide/image-directive",
  "title": "NgOptimizedImage 入门",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/image-directive.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"getting-started-with-ngoptimizedimage\">Getting started with NgOptimizedImage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#getting-started-with-ngoptimizedimage\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"ngoptimizedimage-入门\">NgOptimizedImage 入门<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#ngoptimizedimage-入门\"><i class=\"material-icons\">link</i></a></h1>\n<p>The <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> directive makes it easy to adopt performance best practices for loading images.</p>\n<p><code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 指令可以轻松采用关于性能的最佳实践来加载图片。</p>\n<p>The directive ensures that the loading of the <a href=\"http://web.dev/lcp\">Largest Contentful Paint (LCP)</a> image is prioritized by:</p>\n<p>该指令可确保<a href=\"http://web.dev/lcp\">最大内容绘制 (LCP)</a>图片的加载优先级为：</p>\n<ul>\n<li>\n<p>Automatically setting the <code>fetchpriority</code> attribute on the <code>&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a>></code> tag</p>\n<p>自动设置 <code>&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a>></code> 标签上的 <code>fetchpriority</code> 属性</p>\n</li>\n<li>\n<p>Lazy loading other images by default</p>\n<p>默认惰性加载其他图片</p>\n</li>\n<li>\n<p>Asserting that there is a corresponding preconnect link tag in the document head</p>\n<p>断言文档头中有相应的预连接链接标签</p>\n</li>\n<li>\n<p>Automatically generating a <code>srcset</code> attribute</p>\n<p>自动生成 <code>srcset</code> 属性</p>\n</li>\n<li>\n<p>Generating a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\">preload hint</a> if app is using SSR</p>\n<p>如果应用程序使用 SSR，则生成<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\">预加载提示</a></p>\n</li>\n</ul>\n<p>In addition to optimizing the loading of the LCP image, <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> enforces a number of image best practices, such as:</p>\n<p>除了优化 LCP 图片的加载之外，<code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 还实施了许多图片最佳实践，例如：</p>\n<ul>\n<li>\n<p>Using <a href=\"https://web.dev/image-cdns/#how-image-cdns-use-urls-to-indicate-optimization-options\">image CDN URLs to apply image optimizations</a></p>\n<p>使用<a href=\"https://web.dev/image-cdns/#how-image-cdns-use-urls-to-indicate-optimization-options\">图片 CDN URL 应用图片优化</a></p>\n</li>\n<li>\n<p>Preventing layout shift by requiring <code>width</code> and <code>height</code></p>\n<p>通过要求 <code>width</code> 和 <code>height</code> 来防止布局偏移</p>\n</li>\n<li>\n<p>Warning if <code>width</code> or <code>height</code> have been set incorrectly</p>\n<p>如果 <code>width</code> 或 <code>height</code> 设置不正确，则会发出警告</p>\n</li>\n<li>\n<p>Warning if the image will be visually distorted when rendered</p>\n<p>给出渲染时图片是否会在视觉上失真的警告</p>\n</li>\n</ul>\n<h2 id=\"getting-started\">Getting Started<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"快速上手\">快速上手<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#快速上手\"><i class=\"material-icons\">link</i></a></h2>\n<h4 id=\"step-1-import-ngoptimizedimage\">Step 1: Import NgOptimizedImage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#step-1-import-ngoptimizedimage\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"步骤-1导入-ngoptimizedimage\">步骤 1：导入 NgOptimizedImage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#步骤-1导入-ngoptimizedimage\"><i class=\"material-icons\">link</i></a></h4>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a> } from '@angular/common'\n\n</code-example>\n<p>The directive is defined as a <a href=\"/guide/standalone-components\">standalone directive</a>, so components should import it directly.</p>\n<p>该指令被定义为<a href=\"/guide/standalone-components\">独立指令</a>，因此组件应该直接导入它。</p>\n<h4 id=\"step-2-optional-set-up-a-loader\">Step 2: (Optional) Set up a Loader<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#step-2-optional-set-up-a-loader\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"第-2-步可选设置加载器\">第 2 步：（可选）设置加载器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#第-2-步可选设置加载器\"><i class=\"material-icons\">link</i></a></h4>\n<p>An image loader is not <strong>required</strong> in order to use NgOptimizedImage, but using one with an image CDN enables powerful performance features, including automatic <code>srcset</code>s for your images.</p>\n<p>使用 NgOptimizedImage <strong>不一定需要</strong>图片加载器，但使用带有图片 CDN 的加载器可以实现强大的性能特性，包括为图片自动设置 <code>srcset</code> 。</p>\n<p>A brief guide for setting up a loader can be found in the <a href=\"guide/image-directive#configuring-an-image-loader-for-ngoptimizedimage\">Configuring an Image Loader</a> section at the end of this page.</p>\n<p>有关设置加载器的简短指南，请参阅本页末尾的<a href=\"guide/image-directive#configuring-an-image-loader-for-ngoptimizedimage\">配置图片加载器</a>部分。</p>\n<h4 id=\"step-3-enable-the-directive\">Step 3: Enable the directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#step-3-enable-the-directive\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"第-3-步启用该指令\">第 3 步：启用该指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#第-3-步启用该指令\"><i class=\"material-icons\">link</i></a></h4>\n<p>To activate the <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> directive, replace your image's <code>src</code> attribute with <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a></code>.</p>\n<p>要激活 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 指令，请将图片的 <code>src</code> 属性替换为 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a></code> 。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"cat.jpg\">\n\n</code-example>\n<p>If you're using a <a href=\"guide/image-directive#built-in-loaders\">built-in third-party loader</a>, make sure to omit the base URL path from <code>src</code>, as that will be prepended automatically by the loader.</p>\n<p>如果你使用的是<a href=\"guide/image-directive#built-in-loaders\">内置的第三方加载器</a>，请确保忽略了 <code>src</code> 中的基本 URL 路径，因为它会由此加载器自动附加。</p>\n<h4 id=\"step-4-mark-images-as-priority\">Step 4: Mark images as <code>priority</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#step-4-mark-images-as-priority\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"步骤-4将图片标记为-priority\">步骤 4：将图片标记为 <code>priority</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#步骤-4将图片标记为-priority\"><i class=\"material-icons\">link</i></a></h4>\n<p>Always mark the <a href=\"https://web.dev/lcp/#what-elements-are-considered\">LCP image</a> on your page as <code>priority</code> to prioritize its loading.</p>\n<p>始终将页面上的 <a href=\"https://web.dev/lcp/#what-elements-are-considered\">LCP 图片</a> 标记为 <code>priority</code> 的，以优先加载它。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"cat.jpg\" width=\"400\" height=\"200\" priority>\n\n</code-example>\n<p>Marking an image as <code>priority</code> applies the following optimizations:</p>\n<p>将图片标记为 <code>priority</code> 会应用以下优化：</p>\n<ul>\n<li>\n<p>Sets <code>fetchpriority=high</code> (read more about priority hints <a href=\"https://web.dev/priority-hints\">here</a>)</p>\n<p>设置 <code>fetchpriority=high</code> （在<a href=\"https://web.dev/priority-hints\">这里</a>阅读有关优先级提示的更多内容）</p>\n</li>\n<li>\n<p>Sets <code>loading=eager</code> (read more about native lazy loading <a href=\"https://web.dev/browser-level-image-lazy-loading\">here</a>)</p>\n<p>设置 <code>loading=eager</code> （在<a href=\"https://web.dev/browser-level-image-lazy-loading\">这里</a>阅读有关原生惰性加载的更多信息）</p>\n</li>\n<li>\n<p>Automatically generates a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\">preload link element</a> if <a href=\"/guide/universal\">rendering on the server</a>.</p>\n<p>如果做<a href=\"/guide/universal\">服务器端渲染</a>，则会自动生成<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\">预加载链接元素</a>。</p>\n</li>\n</ul>\n<p>Angular displays a warning during development if the LCP element is an image that does not have the <code>priority</code> attribute. A page’s LCP element can vary based on a number of factors - such as the dimensions of a user's screen, so a page may have multiple images that should be marked <code>priority</code>. See <a href=\"https://web.dev/css-web-vitals/#images-and-largest-contentful-paint-lcp\">CSS for Web Vitals</a> for more details.</p>\n<p>如果 LCP 元素是不具有 <code>priority</code> 属性的图片，则 Angular 会在开发过程中显示警告。页面的 LCP 元素可能会因许多因素而异 - 例如用户屏幕的尺寸，因此一个页面可能有多个应该标记为 <code>priority</code> 的图片。有关更多详细信息，请参阅 <a href=\"https://web.dev/css-web-vitals/#images-and-largest-contentful-paint-lcp\">CSS for Web Vitals</a> 。</p>\n<h4 id=\"step-5-include-height-and-width\">Step 5: Include Height and Width<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#step-5-include-height-and-width\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"第-5-步包括高度和宽度\">第 5 步：包括高度和宽度<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#第-5-步包括高度和宽度\"><i class=\"material-icons\">link</i></a></h4>\n<p>In order to prevent <a href=\"https://web.dev/css-web-vitals/#images-and-layout-shifts\">image-related layout shifts</a>, NgOptimizedImage requires that you specify a height and width for your image, as follows:</p>\n<p>为了防止<a href=\"https://web.dev/css-web-vitals/#images-and-layout-shifts\">与图片相关的布局移位</a>，NgOptimizedImage 要求你为图片指定高度和宽度，如下所示：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"cat.jpg\" width=\"400\" height=\"200\">\n\n</code-example>\n<p>For <strong>responsive images</strong> (images which you've styled to grow and shrink relative to the viewport), the <code>width</code> and <code>height</code> attributes should be the instrinsic size of the image file.</p>\n<p>对于<strong>响应式图片</strong>（会相对于视口而增长和缩小的图片），<code>width</code> 和 <code>height</code> 属性应该是图片文件的内在大小。</p>\n<p>For <strong>fixed size images</strong>, the <code>width</code> and <code>height</code> attributes should reflect the desired rendered size of the image. The aspect ratio of these attributes should always match the intrinsic aspect ratio of the image.</p>\n<p>对于<strong>固定大小的图片</strong>，<code>width</code> 和 <code>height</code> 属性应该反映图片的所需渲染的大小。这些属性的纵横比应始终与图片的固有纵横比匹配。</p>\n<p>Note: If you don't know the size of your images, consider using \"fill mode\" to inherit the size of the parent container, as described below:</p>\n<p>注意：如果你不知道图片的大小，请考虑使用“填充（<code>fill</code>）模式”来继承父容器的大小，如下所述：</p>\n<h3 id=\"using-fill-mode\">Using <code>fill</code> mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#using-fill-mode\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"使用-fill-模式\">使用 <code>fill</code> 模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#使用-fill-模式\"><i class=\"material-icons\">link</i></a></h3>\n<p>In cases where you want to have an image fill a containing element, you can use the <code>fill</code> attribute. This is often useful when you want to achieve a \"background image\" behavior. It can also be helpful when you don't know the exact width and height of your image, but you do have a parent container with a known size that you'd like to fit your image into (see \"object-fit\" below).</p>\n<p>如果你希望让图片填充其容器元素，可以用 <code>fill</code> 属性。当你想实现“背景图片”行为时，这通常会很有用。当你不知道图片的确切宽度和高度时，它也会很有帮助，但如果你确实有一个具有已知大小的父容器，可能希望将图片适配进其中（请参阅下面的“object-fit”） .</p>\n<p>When you add the <code>fill</code> attribute to your image, you do not need and should not include a <code>width</code> and <code>height</code>, as in this example:</p>\n<p>当你将 <code>fill</code> 属性添加到图片时，不需要也不应该包含 <code>width</code> 和 <code>height</code> ，如下例所示：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"cat.jpg\" fill>\n\n</code-example>\n<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\">object-fit</a> CSS property to change how the image will fill its container. If you style your image with <code>object-fit: \"contain\"</code>, the image will maintain its aspect ratio and be \"letterboxed\" to fit the element. If you set <code>object-fit: \"cover\"</code>, the element will retain its aspect ratio, fully fill the element, and some content may be \"cropped\" off. </p>\n<p>你可以用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\">object-fit</a> 这个 CSS 属性来更改图片填充其容器的方式。如果你使用 <code>object-fit: \"contain\"</code> 来设置图片的样式，则图片将保持其纵横比并被黑边化（译注：类似于电影在不同分辨率播放时加黑边）以适配此元素。如果你设置了 <code>object-fit: \"cover\"</code> ，则元素将保留其长宽比，完全填充元素，并且某些内容可能会被“裁剪”。</p>\n<p>See visual examples of the above at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\">MDN object-fit documentation.</a></p>\n<p>请在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\">MDN object-fit 文档</a>中查看上述内容的可视化示例。</p>\n<p>You can also style your image with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-position\">object-position property</a> to adjust its position within its containing element.</p>\n<p>你还可以用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-position\">object-location 属性来设置</a>图片的样式，以调整其在容器元素中的位置。</p>\n<p><strong>Important note:</strong> For the \"fill\" image to render properly, its parent element <strong>must</strong> be styled with <code>position: \"relative\"</code>, <code>position: \"fixed\"</code>, or <code>position: \"absolute\"</code>. </p>\n<p><strong>重要说明</strong>：为了正确渲染“fill”图片，其父元素<strong>必须</strong>使用 <code>position: \"relative\"</code>、<code>position: \"fixed\"</code> 或 <code>position: \"absolute\"</code> 来设置样式。</p>\n<h3 id=\"adjusting-image-styling\">Adjusting image styling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#adjusting-image-styling\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"调整图片样式\">调整图片样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#调整图片样式\"><i class=\"material-icons\">link</i></a></h3>\n<p>Depending on the image's styling, adding <code>width</code> and <code>height</code> attributes may cause the image to render differently. <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> warns you if your image styling renders the image at a distorted aspect ratio.</p>\n<p>根据图片的样式，添加 <code>width</code> 和 <code>height</code> 属性可能会导致图片的渲染方式不同。如果你的图片样式正在以扭曲的纵横比渲染图片， <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 会发出警告。</p>\n<p>You can typically fix this by adding <code>height: auto</code> or <code>width: auto</code> to your image styles. For more information, see the <a href=\"https://web.dev/patterns/web-vitals-patterns/images/img-tag\">web.dev article on the <code>&#x3C;img></code> tag</a>.</p>\n<p>你通常可以通过将 <code>height: auto</code> 或 <code>width: auto</code> 添加到图片的样式中来解决此问题。有关更多信息，请参阅<a href=\"https://web.dev/patterns/web-vitals-patterns/images/img-tag\">关于 <code>&#x3C;img></code> 标签的 web.dev 文章</a>。</p>\n<p>If the <code>height</code> and <code>width</code> attribute on the image are preventing you from sizing the image the way you want with CSS, consider using \"fill\" mode instead, and styling the image's parent element.</p>\n<p>如果图片上的 <code>height</code> 和 <code>width</code> 属性让你无法用 CSS 以你想要的方式调整图片大小，请考虑改用“填充”模式，并为图片的父元素设置样式。</p>\n<h2 id=\"performance-features\">Performance Features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#performance-features\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"性能优化特性\">性能优化特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#性能优化特性\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgOptimizedImage includes a number of features designed to improve loading performance in your app. These features are described in this section.</p>\n<p>NgOptimizedImage 包含许多旨在提高应用程序加载性能的特性。本节会介绍这些特性。</p>\n<h3 id=\"add-resource-hints\">Add resource hints<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#add-resource-hints\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"添加资源提示\">添加资源提示<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#添加资源提示\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can add a <a href=\"https://web.dev/preconnect-and-dns-prefetch\"><code>preconnect</code> resource hint</a> for your image origin to ensure that the LCP image loads as quickly as possible. Always put resource hints in the <code>&#x3C;head></code> of the document.</p>\n<p>你可以为图片源添加 <a href=\"https://web.dev/preconnect-and-dns-prefetch\"><code>preconnect</code> 资源提示</a>，以确保 LCP 图片尽快加载。始终将资源提示放在文档的 <code>&#x3C;head></code> 中。</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;link rel=\"preconnect\" href=\"https://my.cdn.origin\" />\n\n</code-example>\n<p>By default, if you use a loader for a third-party image service, the <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> directive will warn during development if it detects that there is no <code>preconnect</code> resource hint for the origin that serves the LCP image.</p>\n<p>默认情况下，如果你使用第三方图片服务的加载器，当 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 指令检测到提供 LCP 图片的源缺少 <code>preconnect</code> 资源提示时，它将在开发期间发出警告。</p>\n<p>To disable these warnings, inject the <code><a href=\"api/common/PRECONNECT_CHECK_BLOCKLIST\" class=\"code-anchor\">PRECONNECT_CHECK_BLOCKLIST</a></code> token:</p>\n<p>要禁用这些警告，请注入 <code><a href=\"api/common/PRECONNECT_CHECK_BLOCKLIST\" class=\"code-anchor\">PRECONNECT_CHECK_BLOCKLIST</a></code> 标记：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nproviders: [\n  {provide: <a href=\"api/common/PRECONNECT_CHECK_BLOCKLIST\" class=\"code-anchor\">PRECONNECT_CHECK_BLOCKLIST</a>, useValue: 'https://your-domain.com'}\n],\n\n</code-example>\n<h3 id=\"request-images-at-the-correct-size-with-automatic-srcset\">Request images at the correct size with automatic <code>srcset</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#request-images-at-the-correct-size-with-automatic-srcset\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"使用自动-srcset-请求正确大小的图片\">使用自动 <code>srcset</code> 请求正确大小的图片<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#使用自动-srcset-请求正确大小的图片\"><i class=\"material-icons\">link</i></a></h3>\n<p>Defining a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset\"><code>srcset</code> attribute</a> ensures that the browser requests an image at the right size for your user's viewport, so it doesn't waste time downloading an image that's too large. <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> generates an appropriate <code>srcset</code> for the image, based on the presence and value of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\"><code>sizes</code> attribute</a> on the image tag.</p>\n<p>定义 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset\"><code>srcset</code> 属性</a>可确保浏览器为用户的视口请求正确大小的图片，因此不会浪费时间下载太大的图片。 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 会根据 img 标签上 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\"><code>sizes</code></a> 属性的存在与否和值来为图片生成适当的 <code>srcset</code>。</p>\n<h4 id=\"fixed-size-images\">Fixed-size images<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#fixed-size-images\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"固定大小的图片\">固定大小的图片<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#固定大小的图片\"><i class=\"material-icons\">link</i></a></h4>\n<p>If your image should be \"fixed\" in size  (i.e. the same size across devices, except for <a href=\"https://web.dev/codelab-density-descriptors/\">pixel density</a>), there is no need to set a <code>sizes</code> attribute. A <code>srcset</code> can be generated automatically from the image's width and height attributes with no further input required. </p>\n<p>如果你的图片的大小应该是“固定的”（即跨设备的大小相同，除了<a href=\"https://web.dev/codelab-density-descriptors/\">像素密度</a>不同），则无需设置 <code>sizes</code> 属性。可以从图片的 <code>width</code> 和 <code>height</code> 属性自动生成 <code>srcset</code>，无需更多的输入属性。</p>\n<p>Example srcset generated: <code>&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ... srcset=\"image-400w.jpg 1x, image-800w.jpg 2x\"></code></p>\n<p>生成的示例 srcset： <code>&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ... srcset=\"image-400w.jpg 1x, image-800w.jpg 2x\"></code></p>\n<h4 id=\"responsive-images\">Responsive images<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#responsive-images\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"响应式图片\">响应式图片<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#响应式图片\"><i class=\"material-icons\">link</i></a></h4>\n<p>If your image should be responsive (i.e. grow and shrink according to viewport size), then you will need to define a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\"><code>sizes</code> attribute</a> to generate the <code>srcset</code>.</p>\n<p>如果你的图片应该是响应式的（即会根据视口大小放大和缩小），那么你需要定义一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\"><code>sizes</code></a> 属性来生成 <code>srcset</code> 。</p>\n<p>If you haven't used <code>sizes</code> before, a good place to start is to set it based on viewport width. For example, if your CSS causes the image to fill 100% of viewport width, set <code>sizes</code> to <code>100vw</code> and the browser will select the image in the <code>srcset</code> that is closest to the viewport width (after accounting for pixel density). If your image is only likely to take up half the screen (ex: in a sidebar), set <code>sizes</code> to <code>50vw</code> to ensure the browser selects a smaller image. And so on.</p>\n<p>如果你以前没有使用过 <code>sizes</code> ，一个很好的起点是根据视口宽度来设置它。例如，如果你的 CSS 要让图片填充视口宽度的 100% ，则将 <code>sizes</code> 设置为 <code>100vw</code> ，浏览器将选择 <code>srcset</code> 中最接近视口宽度的图片（在考虑像素密度之后）。如果你的图片只可能占屏幕的一半（例如：在侧边栏中），请将 <code>sizes</code> 设置为 <code>50vw</code> 以确保浏览器选择较小的图片。以此类推。</p>\n<p>If you find that the above does not cover your desired image behavior, see the documentation on <a href=\"guide/image-directive#advanced-sizes-values\">advanced sizes values</a>.</p>\n<p>如果你发现上述内容无法涵盖你所需的图片行为，请参阅有关<a href=\"guide/image-directive#advanced-sizes-values\">高级尺寸值</a>的文档。</p>\n<p>By default, the responsive breakpoints are:</p>\n<p>默认情况下，响应式断点是：</p>\n<p><code>[16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840]</code></p>\n<p>If you would like to customize these breakpoints, you can do so using the <code><a href=\"api/common/IMAGE_CONFIG\" class=\"code-anchor\">IMAGE_CONFIG</a></code> provider:</p>\n<p>如果你想自定义这些断点，可以用 <code><a href=\"api/common/IMAGE_CONFIG\" class=\"code-anchor\">IMAGE_CONFIG</a></code> 提供者来实现：</p>\n<code-example format=\"typescript\" language=\"typescript\">\nproviders: [\n  {\n    provide: <a href=\"api/common/IMAGE_CONFIG\" class=\"code-anchor\">IMAGE_CONFIG</a>,\n    useValue: {\n      breakpoints: [16, 48, 96, 128, 384, 640, 750, 828, 1080, 1200, 1920]\n    }\n  },\n],\n</code-example>\n<p>If you would like to manually define a <code>srcset</code> attribute, you can provide your own using the <code>ngSrcset</code> attribute:</p>\n<p>如果你想手动定义 <code>srcset</code> 属性，可以用 <code>ngSrcset</code> 属性提供自己的：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"hero.jpg\" ngSrcset=\"100w, 200w, 300w\">\n\n</code-example>\n<p>If the <code>ngSrcset</code> attribute is present, <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> generates and sets the <code>srcset</code> based on the sizes included. Do not include image file names in <code>ngSrcset</code> - the directive infers this information from <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a></code>. The directive supports both width descriptors (e.g. <code>100w</code>) and density descriptors (e.g. <code>1x</code>).</p>\n<p>如果存在 <code>ngSrcset</code> 属性，则 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 会根据包含的大小生成并设置 <code>srcset</code> 。不要在 <code>ngSrcset</code> 中包含图片文件名 - 该指令会从 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a></code> 推断此信息。该指令支持宽度描述符（例如 <code>100w</code> ）和密度描述符（例如 <code>1x</code> ）。</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"hero.jpg\" ngSrcset=\"100w, 200w, 300w\" sizes=\"50vw\">\n\n</code-example>\n<h3 id=\"disabling-automatic-srcset-generation\">Disabling automatic srcset generation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#disabling-automatic-srcset-generation\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"禁用自动-srcset-生成\">禁用自动 srcset 生成<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#禁用自动-srcset-生成\"><i class=\"material-icons\">link</i></a></h3>\n<p>To disable srcset generation for a single image, you can add the <code>disableOptimizedSrcset</code> attribute on the image:</p>\n<p>要禁用单个图片的 srcset 生成，你可以在图片上添加 <code>disableOptimizedSrcset</code> 属性：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"about.jpg\" disableOptimizedSrcset>\n\n</code-example>\n<h3 id=\"disabling-image-lazy-loading\">Disabling image lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#disabling-image-lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"禁用图片惰性加载\">禁用图片惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#禁用图片惰性加载\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> sets <code>loading=lazy</code> for all images that are not marked <code>priority</code>. You can disable this behavior for non-priority images by setting the <code>loading</code> attribute. This attribute accepts values: <code>eager</code>, <code>auto</code>, and <code>lazy</code>. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading#value\">See the documentation for the standard image <code>loading</code> attribute for details</a>.</p>\n<p>默认情况下， <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 为所有未标记 <code>priority</code> 的图片设置 <code>loading=lazy</code> 。你可以通过设置 <code>loading</code> 属性来为非优先图片禁用此行为。此属性会接受值： <code>eager</code> 、 <code>auto</code> 和 <code>lazy</code> 。<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading#value\">有关详细信息，请参阅标准图片 <code>loading</code> 属性的文档</a>。</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"cat.jpg\" width=\"400\" height=\"200\" loading=\"eager\">\n\n</code-example>\n<h3 id=\"advanced-sizes-values\">Advanced 'sizes' values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#advanced-sizes-values\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"高级的-sizes-值\">高级的 <code>sizes</code> 值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#高级的-sizes-值\"><i class=\"material-icons\">link</i></a></h3>\n<p>You may want to have images displayed at varying widths on differently-sized screens. A common example of this pattern is a grid- or column-based layout that renders a single column on mobile devices, and two columns on larger devices. You can capture this behavior in the <code>sizes</code> attribute, using a \"media query\" syntax, such as the following:</p>\n<p>你可能希望在不同大小的屏幕上以不同的宽度显示图片。这种模式的一个常见例子是基于网格或列的布局，它在移动设备上渲染为单列，在较大的设备上渲染为两列。你可以用“媒体查询”语法在 <code>sizes</code> 属性中捕获此行为，例如以下内容：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">ngSrc</a>=\"cat.jpg\" width=\"400\" height=\"200\" sizes=\"(max-width: 768px) 100vw, 50vw\">\n\n</code-example>\n<p>The <code>sizes</code> attribute in the above example says \"I expect this image to be 100 percent of the screen width on devices under 768px wide. Otherwise, I expect it to be 50 percent of the screen width.</p>\n<p>上面的示例中的 <code>sizes</code> 属性表示“我希望此图片在 768px 宽的设备上是屏幕宽度的 100% 。否则，我希望它是屏幕宽度的 50% 。</p>\n<p>For additional information about the <code>sizes</code> attribute, see <a href=\"https://web.dev/learn/design/responsive-images/#sizes\">web.dev</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\">mdn</a>.</p>\n<p>有关 <a href=\"https://web.dev/learn/design/responsive-images/#sizes\">size 属性的其它信息，请参阅 web.dev</a> <code>sizes</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\">mdn</a> 。</p>\n<h2 id=\"configuring-an-image-loader-for-ngoptimizedimage\">Configuring an image loader for <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#configuring-an-image-loader-for-ngoptimizedimage\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"为-ngoptimizedimage-配置图片加载器\">为 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 配置图片加载器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#为-ngoptimizedimage-配置图片加载器\"><i class=\"material-icons\">link</i></a></h2>\n<p>A \"loader\" is a function that generates an <a href=\"https://web.dev/image-cdns/#how-image-cdns-use-urls-to-indicate-optimization-options\">image transformation URL</a> for a given image file. When appropriate, <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> sets the size, format, and image quality transformations for an image.</p>\n<p>“加载器”是一个为给定图片文件生成<a href=\"https://web.dev/image-cdns/#how-image-cdns-use-urls-to-indicate-optimization-options\">图片转换 URL</a>的函数。如果合适，<code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 就会设置图片的大小、格式和图片质量转换。</p>\n<p><code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> provides both a generic loader that applies no transformations, as well as loaders for various third-party image services. It also supports writing your own custom loader.</p>\n<p><code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 提供了一个不应用转换的通用加载器和一个用于各种第三方图片服务的加载器。它还支持编写你自己的自定义加载器。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Loader type</th>\n<th align=\"left\">Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">加载器类型</td>\n<td align=\"left\">行为</td>\n</tr>\n<tr>\n<td align=\"left\">Generic loader</td>\n<td align=\"left\">The URL returned by the generic loader will always match the value of <code>src</code>. In other words, this loader applies no transformations. Sites that use Angular to serve images are the primary intended use case for this loader.</td>\n</tr>\n<tr>\n<td align=\"left\">通用加载器</td>\n<td align=\"left\">通用加载器返回的 URL 将始终与 <code>src</code> 的值匹配。换句话说，此加载器不应用任何转换。使用 Angular 来提供图片的站点是此加载器的主要预期用例。</td>\n</tr>\n<tr>\n<td align=\"left\">Loaders for third-party image services</td>\n<td align=\"left\">The URL returned by the loaders for third-party image services will follow API conventions used by that particular image service.</td>\n</tr>\n<tr>\n<td align=\"left\">第三方图片服务的加载器</td>\n<td align=\"left\">此加载器为第三方图片服务返回的 URL 将遵循该特定图片服务使用的 API 约定。</td>\n</tr>\n<tr>\n<td align=\"left\">Custom loaders</td>\n<td align=\"left\">A custom loader's behavior is defined by its developer. You should use a custom loader if your image service isn't supported by the loaders that come preconfigured with <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\">自定义加载器</td>\n<td align=\"left\">自定义加载器的行为由其开发人员定义。如果使用 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 预配置的加载器不支持你想要的图片服务，就应该使用自定义加载器。</td>\n</tr>\n</tbody>\n</table>\n<p>Based on the image services commonly used with Angular applications, <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> provides loaders preconfigured to work with the following image services:</p>\n<p>基于 Angular 应用程序常用的图片服务，<code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 提供了预配置的加载器以使用以下图片服务：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Image Service</th>\n<th align=\"left\">Angular API</th>\n<th align=\"left\">Documentation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">图片服务</td>\n<td align=\"left\">Angular API</td>\n<td align=\"left\">文档</td>\n</tr>\n<tr>\n<td align=\"left\">Cloudflare Image Resizing</td>\n<td align=\"left\"><code><a href=\"api/common/provideCloudflareLoader\" class=\"code-anchor\">provideCloudflareLoader</a></code></td>\n<td align=\"left\"><a href=\"https://developers.cloudflare.com/images/image-resizing/\">Documentation</a></td>\n</tr>\n<tr>\n<td align=\"left\">Cloudflare 图片大小调整</td>\n<td align=\"left\"><code><a href=\"api/common/provideCloudflareLoader\" class=\"code-anchor\">provideCloudflareLoader</a></code></td>\n<td align=\"left\"><a href=\"https://developers.cloudflare.com/images/image-resizing/\">文档</a></td>\n</tr>\n<tr>\n<td align=\"left\">Cloudinary</td>\n<td align=\"left\"><code><a href=\"api/common/provideCloudinaryLoader\" class=\"code-anchor\">provideCloudinaryLoader</a></code></td>\n<td align=\"left\"><a href=\"https://cloudinary.com/documentation/resizing_and_cropping\">Documentation</a></td>\n</tr>\n<tr>\n<td align=\"left\">Cloudinary</td>\n<td align=\"left\"><code><a href=\"api/common/provideCloudinaryLoader\" class=\"code-anchor\">provideCloudinaryLoader</a></code></td>\n<td align=\"left\"><a href=\"https://cloudinary.com/documentation/resizing_and_cropping\">文档</a></td>\n</tr>\n<tr>\n<td align=\"left\">ImageKit</td>\n<td align=\"left\"><code><a href=\"api/common/provideImageKitLoader\" class=\"code-anchor\">provideImageKitLoader</a></code></td>\n<td align=\"left\"><a href=\"https://docs.imagekit.io/\">Documentation</a></td>\n</tr>\n<tr>\n<td align=\"left\">ImageKit</td>\n<td align=\"left\"><code><a href=\"api/common/provideImageKitLoader\" class=\"code-anchor\">provideImageKitLoader</a></code></td>\n<td align=\"left\"><a href=\"https://docs.imagekit.io/\">文档</a></td>\n</tr>\n<tr>\n<td align=\"left\">Imgix</td>\n<td align=\"left\"><code><a href=\"api/common/provideImgixLoader\" class=\"code-anchor\">provideImgixLoader</a></code></td>\n<td align=\"left\"><a href=\"https://docs.imgix.com/\">Documentation</a></td>\n</tr>\n<tr>\n<td align=\"left\">Imgix</td>\n<td align=\"left\"><code><a href=\"api/common/provideImgixLoader\" class=\"code-anchor\">provideImgixLoader</a></code></td>\n<td align=\"left\"><a href=\"https://docs.imgix.com/\">文档</a></td>\n</tr>\n</tbody>\n</table>\n<p>To use the <strong>generic loader</strong> no additional code changes are necessary. This is the default behavior.</p>\n<p>要使用<strong>通用加载器</strong>，无需额外的代码更改。这是默认行为。</p>\n<h3 id=\"built-in-loaders\">Built-in Loaders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#built-in-loaders\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"内置加载器\">内置加载器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#内置加载器\"><i class=\"material-icons\">link</i></a></h3>\n<p>To use an existing loader for a <strong>third-party image service</strong>, add the provider factory for your chosen service to the <code>providers</code> array. In the example below, the Imgix loader is used:</p>\n<p>要将现有的加载器用于<strong>第三方图片服务</strong>，请将你选择的服务的提供者工厂添加到 <code>providers</code> 数组中。在下面的示例中，使用了 Imgix 加载器：</p>\n<code-example format=\"typescript\" language=\"typescript\">\nproviders: [\n  <a href=\"api/common/provideImgixLoader\" class=\"code-anchor\">provideImgixLoader</a>('https://my.base.url/'),\n],\n</code-example>\n<p>The base URL for your image assets should be passed to the provider factory as an argument. For most sites, this base URL should match one of the following patterns:</p>\n<p>图片资产的基本 URL 应作为参数传递给提供者工厂。对于大多数网站，此基本 URL 应匹配以下模式之一：</p>\n<ul>\n<li>\n<p><a href=\"https://yoursite.yourcdn.com\">https://yoursite.yourcdn.com</a></p>\n</li>\n<li>\n<p><a href=\"https://subdomain.yoursite.com\">https://subdomain.yoursite.com</a></p>\n</li>\n<li>\n<p><a href=\"https://subdomain.yourcdn.com/yoursite\">https://subdomain.yourcdn.com/yoursite</a></p>\n</li>\n</ul>\n<p>You can learn more about the base URL structure in the docs of a corresponding CDN provider.</p>\n<p>你可以在相应 CDN 提供者的文档中了解有关基本 URL 结构的更多信息。</p>\n<h3 id=\"custom-loaders\">Custom Loaders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#custom-loaders\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"自定义加载器\">自定义加载器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/image-directive#自定义加载器\"><i class=\"material-icons\">link</i></a></h3>\n<p>To use a <strong>custom loader</strong>, provide your loader function as a value for the <code><a href=\"api/common/IMAGE_LOADER\" class=\"code-anchor\">IMAGE_LOADER</a></code> DI token. In the example below, the custom loader function returns a URL starting with <code>https://example.com</code> that includes <code>src</code> and <code>width</code> as URL parameters.</p>\n<p>要使用<strong>自定义加载器</strong>，请提供你的加载器函数作为 <code><a href=\"api/common/IMAGE_LOADER\" class=\"code-anchor\">IMAGE_LOADER</a></code> DI 标记的值。在下面的示例中，自定义加载器函数会返回一个以 <code>https://example.com</code> 开头的 URL，其中包含 <code>src</code> 和 <code>width</code> 作为 URL 参数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\nproviders: [\n  {\n    provide: <a href=\"api/common/IMAGE_LOADER\" class=\"code-anchor\">IMAGE_LOADER</a>,\n    useValue: (config: <a href=\"api/common/ImageLoaderConfig\" class=\"code-anchor\">ImageLoaderConfig</a>) => {\n      return `https://example.com/images?src=${config.src}&#x26;width=${config.width}`;\n    },\n  },\n],\n</code-example>\n<p>A loader function for the <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> directive takes an object with the <code><a href=\"api/common/ImageLoaderConfig\" class=\"code-anchor\">ImageLoaderConfig</a></code> type (from <code>@angular/common</code>) as its argument and returns the absolute URL of the image asset. The <code><a href=\"api/common/ImageLoaderConfig\" class=\"code-anchor\">ImageLoaderConfig</a></code> object contains the <code>src</code> and <code>width</code> properties.</p>\n<p><code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">NgOptimizedImage</a></code> 指令的加载器函数接受 <code><a href=\"api/common/ImageLoaderConfig\" class=\"code-anchor\">ImageLoaderConfig</a></code> 类型的对象（来自 <code>@angular/common</code> ）作为其参数，并返回图片资产的绝对 URL。 <code><a href=\"api/common/ImageLoaderConfig\" class=\"code-anchor\">ImageLoaderConfig</a></code> 对象包含 <code>src</code> 和 <code>width</code> 属性。</p>\n<p>Note: a custom loader must support requesting images at various widths in order for <code>ngSrcset</code> to work properly.</p>\n<p>注意：自定义加载器必须支持请求各种宽度的图片，以便 <code>ngSrcset</code> 正常工作。</p>\n<!-- links -->\n<!-- external links -->\n<!--end links -->\n\n  <div class=\"reviewed\">最后复查时间： 11/7/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/ImageConfig\n - guide/update-to-version-15\n-->\n<!-- links from this doc:\n - /guide/standalone-components\n - /guide/universal\n - api/common/IMAGE_CONFIG\n - api/common/IMAGE_LOADER\n - api/common/ImageLoaderConfig\n - api/common/NgOptimizedImage\n - api/common/PRECONNECT_CHECK_BLOCKLIST\n - api/common/provideCloudflareLoader\n - api/common/provideCloudinaryLoader\n - api/common/provideImageKitLoader\n - api/common/provideImgixLoader\n - guide/image-directive#add-resource-hints\n - guide/image-directive#adjusting-image-styling\n - guide/image-directive#advanced-sizes-values\n - guide/image-directive#built-in-loaders\n - guide/image-directive#configuring-an-image-loader-for-ngoptimizedimage\n - guide/image-directive#custom-loaders\n - guide/image-directive#disabling-automatic-srcset-generation\n - guide/image-directive#disabling-image-lazy-loading\n - guide/image-directive#fixed-size-images\n - guide/image-directive#getting-started\n - guide/image-directive#getting-started-with-ngoptimizedimage\n - guide/image-directive#ngoptimizedimage-入门\n - guide/image-directive#performance-features\n - guide/image-directive#request-images-at-the-correct-size-with-automatic-srcset\n - guide/image-directive#responsive-images\n - guide/image-directive#step-1-import-ngoptimizedimage\n - guide/image-directive#step-2-optional-set-up-a-loader\n - guide/image-directive#step-3-enable-the-directive\n - guide/image-directive#step-4-mark-images-as-priority\n - guide/image-directive#step-5-include-height-and-width\n - guide/image-directive#using-fill-mode\n - guide/image-directive#为-ngoptimizedimage-配置图片加载器\n - guide/image-directive#使用-fill-模式\n - guide/image-directive#使用自动-srcset-请求正确大小的图片\n - guide/image-directive#内置加载器\n - guide/image-directive#响应式图片\n - guide/image-directive#固定大小的图片\n - guide/image-directive#快速上手\n - guide/image-directive#性能优化特性\n - guide/image-directive#步骤-1导入-ngoptimizedimage\n - guide/image-directive#步骤-4将图片标记为-priority\n - guide/image-directive#添加资源提示\n - guide/image-directive#禁用图片惰性加载\n - guide/image-directive#禁用自动-srcset-生成\n - guide/image-directive#第-2-步可选设置加载器\n - guide/image-directive#第-3-步启用该指令\n - guide/image-directive#第-5-步包括高度和宽度\n - guide/image-directive#自定义加载器\n - guide/image-directive#调整图片样式\n - guide/image-directive#高级的-sizes-值\n - http://web.dev/lcp\n - https://cloudinary.com/documentation/resizing_and_cropping\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading#value\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset\n - https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\n - https://developer.mozilla.org/en-US/docs/Web/CSS/object-position\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\n - https://developers.cloudflare.com/images/image-resizing/\n - https://docs.imagekit.io/\n - https://docs.imgix.com/\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/image-directive.md?message=docs%3A%20请简述你的修改...\n - https://subdomain.yourcdn.com/yoursite\n - https://subdomain.yoursite.com\n - https://web.dev/browser-level-image-lazy-loading\n - https://web.dev/codelab-density-descriptors/\n - https://web.dev/css-web-vitals/#images-and-largest-contentful-paint-lcp\n - https://web.dev/css-web-vitals/#images-and-layout-shifts\n - https://web.dev/image-cdns/#how-image-cdns-use-urls-to-indicate-optimization-options\n - https://web.dev/lcp/#what-elements-are-considered\n - https://web.dev/learn/design/responsive-images/#sizes\n - https://web.dev/patterns/web-vitals-patterns/images/img-tag\n - https://web.dev/preconnect-and-dns-prefetch\n - https://web.dev/priority-hints\n - https://yoursite.yourcdn.com\n-->"
}