{
  "id": "guide/template-syntax",
  "title": "Template syntax",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-syntax.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"template-syntax\" translation-result=\"on\">模板语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-syntax\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"template-syntax\">Template syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-syntax\"><i class=\"material-icons\">link</i></a></h1>\n\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n  h4 .syntax { font-size: 100%; }\n</style>\n<p translation-result=\"on\">Angular 应用管理着用户之所见和所为，并通过 Component 类的实例（<em>组件</em>）和面向用户的模板交互来实现这一点。</p><p translation-origin=\"off\">The Angular application manages what the user sees and can do, achieving this through the interaction of a component class instance (the <em>component</em>) and its user-facing template.</p>\n\n<p translation-result=\"on\">从使用模型-视图-控制器 (MVC) 或模型-视图-视图模型 (MVVM) 的经验中，很多开发人员都熟悉了组件和模板这两个概念。\n在 Angular 中，组件扮演着控制器或视图模型的角色，模板则扮演视图的角色。</p><p translation-origin=\"off\">You may be familiar with the component/template duality from your experience with model-view-controller (MVC) or model-view-viewmodel (MVVM).\nIn Angular, the component plays the part of the controller/viewmodel, and the template represents the view.</p>\n\n<p translation-result=\"on\">这是一篇关于 Angular 模板语言的技术大全。\n它解释了模板语言的基本原理，并描述了你将在文档中其它地方遇到的大部分语法。</p><p translation-origin=\"off\">This page is a comprehensive technical reference to the Angular template language.\nIt explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</p>\n\n<p translation-result=\"on\">这里还有很多代码片段用来解释技术点和概念，它们全都在<live-example title=\"模板语法的现场演练\"></live-example>中。</p><p translation-origin=\"off\">Many code snippets illustrate the points and concepts, all of them available\nin the <live-example title=\"Template Syntax Live Code\"></live-example>.</p>\n\n<a id=\"html\"></a>\n<h2 id=\"html-in-templates\" translation-result=\"on\">模板中的 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-in-templates\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"html-in-templates\">HTML in templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">HTML 是 Angular 模板的语言。几乎所有的 HTML 语法都是有效的模板语法。\n但值得注意的例外是 <code>&#x3C;script></code> 元素，它被禁用了，以阻止脚本注入攻击的风险。（实际上，<code>&#x3C;script></code> 只是被忽略了。）\n参见<a href=\"guide/security\">安全</a>页了解详情。</p><p translation-origin=\"off\">HTML is the language of the Angular template.\nAlmost all HTML syntax is valid template syntax.\nThe <code>&#x3C;script></code> element is a notable exception;\nit is forbidden, eliminating the risk of script injection attacks.\nIn practice, <code>&#x3C;script></code> is ignored and a warning appears in the browser console.\nSee the <a href=\"guide/security\">Security</a> page for details.</p>\n\n<p translation-result=\"on\">有些合法的 HTML 被用在模板中是没有意义的。<code>&#x3C;html></code>、<code>&#x3C;body></code> 和 <code>&#x3C;base></code> 元素这个舞台上中并没有扮演有用的角色。剩下的所有元素基本上就都一样用了。</p><p translation-origin=\"off\">Some legal HTML doesn't make much sense in a template.\nThe <code>&#x3C;html></code>, <code>&#x3C;body></code>, and <code>&#x3C;base></code> elements have no useful role.\nPretty much everything else is fair game.</p>\n\n<p translation-result=\"on\">可以通过组件和指令来扩展模板中的 HTML 词汇。它们看上去就是新元素和属性。接下来将学习如何通过数据绑定来动态获取/设置 DOM（文档对象模型）的值。</p><p translation-origin=\"off\">You can extend the HTML vocabulary of your templates with components and directives that appear as new elements and attributes.\nIn the following sections, you'll learn how to get and set DOM (Document Object Model) values dynamically through data binding.</p>\n\n<p translation-result=\"on\">首先看看数据绑定的第一种形式 —— 插值，它展示了模板的 HTML 可以有多丰富。</p><p translation-origin=\"off\">Begin with the first form of data binding—interpolation—to see how much richer template HTML can be.</p>\n\n<hr>\n<a id=\"interpolation\"></a>\n<h2 id=\"interpolation-and-template-expressions\" translation-result=\"on\">插值与模板表达式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation-and-template-expressions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"interpolation-and-template-expressions\">Interpolation and Template Expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation-and-template-expressions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">插值能让你把计算后的字符串合并到 HTML 元素标签之间和属性赋值语句内的文本中。模板表达式则是用来供你求出这些字符串的。</p><p translation-origin=\"off\">Interpolation allows you to incorporate calculated strings into the text\nbetween HTML element tags and within attribute assignments. Template\nexpressions are what you use to calculate those strings.</p>\n\n<p translation-result=\"on\">这个关于插值的<live-example></live-example>演示了本节所讲的全部语法和代码片段。</p><p translation-origin=\"off\">The interpolation <live-example></live-example> demonstrates all of\nthe syntax and code snippets described in this section.</p>\n\n<h3 id=\"interpolation-\" translation-result=\"on\">插值 <code>{{...}}</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation-\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"interpolation-\">Interpolation <code>{{...}}</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation-\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">所谓 \"插值\" 是指将表达式嵌入到标记文本中。\n默认情况下，插值会用双花括号 <code>{{</code> 和 <code>}}</code> 作为分隔符。</p><p translation-origin=\"off\">Interpolation refers to embedding expressions into marked up text.\nBy default, interpolation uses as its delimiter the double curly braces, <code>{{</code> and <code>}}</code>.</p>\n\n<p translation-result=\"on\">在下面的代码片段中，<code>{{ currentCustomer }}</code> 就是插值的例子。</p><p translation-origin=\"off\">In the following snippet, <code>{{ currentCustomer }}</code> is an example of interpolation.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"interpolation-example1\" header=\"src/app/app.component.html\">\n&#x3C;h3>Current customer: {{ currentCustomer }}&#x3C;/h3>\n\n</code-example>\n<p translation-result=\"on\">花括号之间的文本通常是组件属性的名字。Angular 会把这个名字替换为响应组件属性的字符串值。</p><p translation-origin=\"off\">The text between the braces is often the name of a component\nproperty. Angular replaces that name with the\nstring value of the corresponding component property.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-property\" header=\"src/app/app.component.html\">\n&#x3C;p>{{title}}&#x3C;/p>\n&#x3C;div>&#x3C;img src=\"{{itemImageUrl}}\">&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">在上面的示例中，Angular 计算 <code>title</code> 和 <code>itemImageUrl</code> 属性并填充空白，首先显示一些标题文本，然后显示图像。</p><p translation-origin=\"off\">In the example above, Angular evaluates the <code>title</code> and <code>itemImageUrl</code> properties\nand fills in the blanks, first displaying some title text and then an image.</p>\n\n<p translation-result=\"on\">一般来说，括号间的素材是一个<strong>模板表达式</strong>，Angular 先<strong>对它求值</strong>，再把它<strong>转换成字符串</strong>。\n下列插值通过把括号中的两个数字相加说明了这一点：</p><p translation-origin=\"off\">More generally, the text between the braces is a <strong>template expression</strong>\nthat Angular first <strong>evaluates</strong> and then <strong>converts to a string</strong>.\nThe following interpolation illustrates the point by adding two numbers:</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"convert-string\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is 2\" -->\n&#x3C;p>The sum of 1 + 1 is {{1 + 1}}.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">这个表达式可以调用宿主组件的方法，就像下面用的 <code>getVal()</code>：</p><p translation-origin=\"off\">The expression can invoke methods of the host component such as <code>getVal()</code> in\nthe following example:</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"invoke-method\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is not 4\" -->\n&#x3C;p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">Angular 对所有双花括号中的表达式求值，把求值的结果转换成字符串，并把它们跟相邻的字符串字面量连接起来。最后，把这个组合出来的插值结果赋给<strong>元素或指令的属性</strong>。</p><p translation-origin=\"off\">Angular evaluates all expressions in double curly braces,\nconverts the expression results to strings, and links them with neighboring literal strings. Finally,\nit assigns this composite interpolated result to an <strong>element or directive property</strong>.</p>\n\n<p translation-result=\"on\">你看上去似乎正在将结果插入元素标签之间，并将其赋值给属性。\n但实际上，插值是一种特殊语法，Angular 会将其转换为<em>属性绑定</em>。</p><p translation-origin=\"off\">You appear to be inserting the result between element tags and assigning it to attributes.\nHowever, interpolation is a special syntax that Angular converts into a <em>property binding</em>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你想用别的分隔符来代替 <code>{{</code> 和 <code>}}</code>，也可以通过 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中的 <a href=\"api/core/Component#interpolation\">interpolation</a> 选项来配置插值分隔符。</p><p translation-origin=\"off\">If you'd like to use something other than <code>{{</code> and <code>}}</code>, you can\nconfigure the interpolation delimiter via the\n<a href=\"api/core/Component#interpolation\">interpolation</a>\noption in the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata.</p>\n\n</div>\n<h3 id=\"template-expressions\" translation-result=\"on\">模板表达式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expressions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"template-expressions\">Template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expressions\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板<strong>表达式</strong>会产生一个值，并出现在双花括号 <code>{{ }}</code> 中。\nAngular 执行这个表达式，并把它赋值给绑定目标的属性，这个绑定目标可能是 HTML 元素、组件或指令。</p><p translation-origin=\"off\">A template <strong>expression</strong> produces a value and appears within the double\ncurly braces, <code>{{ }}</code>.\nAngular executes the expression and assigns it to a property of a binding target;\nthe target could be an HTML element, a component, or a directive.</p>\n\n<p translation-result=\"on\"><code>{{1 + 1}}</code> 中所包含的模板表达式是 <code>1 + 1</code>。\n在属性绑定中会再次看到模板表达式，它出现在 <code>=</code> 右侧的引号中，就像这样：<code>[property]=\"expression\"</code>。</p><p translation-origin=\"off\">The interpolation braces in <code>{{1 + 1}}</code> surround the template expression <code>1 + 1</code>.\nIn the property binding,\na template expression appears in quotes to the right of the <code>=</code> symbol as in <code>[property]=\"expression\"</code>.</p>\n\n<p translation-result=\"on\">在语法上，模板表达式与 JavaScript 很像。很多 JavaScript 表达式都是合法的模板表达式，但也有一些例外。</p><p translation-origin=\"off\">In terms of syntax, template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with a few exceptions.</p>\n\n<p translation-result=\"on\">你不能使用那些具有或可能引发副作用的 JavaScript 表达式，包括：</p><p translation-origin=\"off\">You can't use JavaScript expressions that have or promote side effects,\nincluding:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 赋值 (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</p><p translation-origin=\"off\">Assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>new</code>、<code>typeof</code>、<code>instanceof</code> 等运算符。</p><p translation-origin=\"off\">Operators such as <code>new</code>, <code>typeof</code>, <code>instanceof</code>, etc.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 使用 <code>;</code> 或 <code>,</code> 串联起来的表达式</p><p translation-origin=\"off\">Chaining expressions with <code>;</code> or <code>,</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 自增和自减运算符：<code>++</code> 和 <code>--</code></p><p translation-origin=\"off\">The increment and decrement operators <code>++</code> and <code>--</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 一些 ES2015+ 版本的运算符</p><p translation-origin=\"off\">Some of the ES2015+ operators</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">和 JavaScript 语法的其它显著差异包括：</p><p translation-origin=\"off\">Other notable differences from JavaScript syntax include:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 不支持位运算，比如 <code>|</code> 和 <code>&#x26;</code></p><p translation-origin=\"off\">No support for the bitwise operators such as <code>|</code> and <code>&#x26;</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">新的<a href=\"guide/template-syntax#expression-operators\">模板表达式运算符</a>，例如 <code>|</code>，<code>?.</code> 和 <code>!</code></p><p translation-origin=\"off\">New <a href=\"guide/template-syntax#expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code></p>\n\n</li>\n</ul>\n<h3 id=\"expression-context\" translation-result=\"on\">表达式上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-context\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"expression-context\">Expression context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-context\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">典型的<em>表达式上下文</em>就是这个<strong>组件实例</strong>，它是各种绑定值的来源。\n在下面的代码片段中，双花括号中的 <code>recommended</code> 和引号中的 <code>itemImageUrl2</code> 所引用的都是 <code>AppComponent</code> 中的属性。</p><p translation-origin=\"off\">The <em>expression context</em> is typically the <em>component</em> instance.\nIn the following snippets, the <code>recommended</code> within double curly braces and the\n<code>itemImageUrl2</code> in quotes refer to properties of the <code>AppComponent</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&#x3C;h4>{{recommended}}&#x3C;/h4>\n&#x3C;img [src]=\"itemImageUrl2\">\n\n</code-example>\n<p translation-result=\"on\">表达式也可以引用模板中的上下文属性，例如模板输入变量，</p><p translation-origin=\"off\">An expression may also refer to properties of the <em>template's</em> context\nsuch as a template input variable,</p>\n\n<!-- link to built-in-directives#template-input-variables -->\n<p translation-result=\"on\"><code>let customer</code>，或模板引用变量 <code>#customerInput</code>。</p><p translation-origin=\"off\"><code>let customer</code>, or a template reference variable, <code>#customerInput</code>.</p>\n\n<!-- link to guide/template-ref-variables -->\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{customer.name}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&#x3C;label><a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &#x3C;input #customerInput>{{customerInput.value}}\n&#x3C;/label>\n\n</code-example>\n<p translation-result=\"on\">表达式中的上下文变量是由<em>模板变量</em>、指令的<em>上下文变量</em>（如果有）和组件的<em>成员</em>叠加而成的。\n如果你要引用的变量名存在于一个以上的命名空间中，那么，模板变量是最优先的，其次是指令的上下文变量，最后是组件的成员。</p><p translation-origin=\"off\">The context for terms in an expression is a blend of the <em>template variables</em>,\nthe directive's <em>context</em> object (if it has one), and the component's <em>members</em>.\nIf you reference a name that belongs to more than one of these namespaces,\nthe template variable name takes precedence, followed by a name in the directive's <em>context</em>,\nand, lastly, the component's member names.</p>\n\n<p translation-result=\"on\">上一个例子中就体现了这种命名冲突。组件具有一个名叫 <code>customer</code> 的属性，而 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 声明了一个也叫 <code>customer</code> 的模板变量。</p><p translation-origin=\"off\">The previous example presents such a name collision. The component has a <code>customer</code>\nproperty and the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> defines a <code>customer</code> template variable.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在 <code>{{customer.name}}</code> 表达式中的 <code>customer</code> 实际引用的是模板变量，而不是组件的属性。</p><p translation-origin=\"off\">The <code>customer</code> in <code>{{customer.name}}</code>\nrefers to the template input variable, not the component's property.</p>\n\n<p translation-result=\"on\">模板表达式不能引用全局命名空间中的任何东西，比如 <code>window</code> 或 <code>document</code>。它们也不能调用 <code>console.log</code> 或 <code>Math.max</code>。\n它们只能引用表达式上下文中的成员。</p><p translation-origin=\"off\">Template expressions cannot refer to anything in\nthe global namespace, except <code>undefined</code>. They can't refer to\n<code>window</code> or <code>document</code>. Additionally, they\ncan't call <code>console.log()</code> or <code>Math.max()</code> and they are restricted to referencing\nmembers of the expression context.</p>\n\n</div>\n<h3 id=\"expression-guidelines\" translation-result=\"on\">表达式使用指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-guidelines\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"expression-guidelines\">Expression guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当使用模板表达式时，请遵循下列指南：</p><p translation-origin=\"off\">When using template expressions follow these guidelines:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/template-syntax#simplicity\">非常简单</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#simplicity\">Simplicity</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/template-syntax#quick-execution\">执行迅速</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#quick-execution\">Quick execution</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/template-syntax#no-visible-side-effects\">没有可见的副作用</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#no-visible-side-effects\">No visible side effects</a></p>\n\n</li>\n</ul>\n<h4 id=\"simplicity\" translation-result=\"on\">简单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#simplicity\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"simplicity\">Simplicity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#simplicity\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">虽然也可以写复杂的模板表达式，不过最好避免那样做。</p><p translation-origin=\"off\">Although it's possible to write complex template expressions, it's a better\npractice to avoid them.</p>\n\n<p translation-result=\"on\">属性名或方法调用应该是常态，但偶然使用逻辑取反 <code>!</code> 也是可以的。\n其它情况下，应该把应用程序和业务逻辑限制在组件中，这样它才能更容易开发和测试。</p><p translation-origin=\"off\">A property name or method call should be the norm, but an occasional Boolean negation, <code>!</code>, is OK.\nOtherwise, confine application and business logic to the component,\nwhere it is easier to develop and test.</p>\n\n<h4 id=\"quick-execution\" translation-result=\"on\">快速执行<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#quick-execution\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"quick-execution\">Quick execution<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#quick-execution\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">Angular 会在每个变更检测周期后执行模板表达式。\n变更检测周期会被多种异步活动触发，比如 Promise 解析、HTTP 结果、定时器时间、按键或鼠标移动。</p><p translation-origin=\"off\">Angular executes template expressions after every change detection cycle.\nChange detection cycles are triggered by many asynchronous activities such as\npromise resolutions, HTTP results, timer events, key presses and mouse moves.</p>\n\n<p translation-result=\"on\">表达式应该快速结束，否则用户就会感到拖沓，特别是在较慢的设备上。\n当计算代价较高时，应该考虑缓存那些从其它值计算得出的值。</p><p translation-origin=\"off\">Expressions should finish quickly or the user experience may drag, especially on slower devices.\nConsider caching values when their computation is expensive.</p>\n\n<h4 id=\"no-visible-side-effects\" translation-result=\"on\">没有可见的副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#no-visible-side-effects\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"no-visible-side-effects\">No visible side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#no-visible-side-effects\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">模板表达式除了目标属性的值以外，不应该改变应用的任何状态。</p><p translation-origin=\"off\">A template expression should not change any application state other than the value of the\ntarget property.</p>\n\n<p translation-result=\"on\">这条规则是 Angular “单向数据流”策略的基础。\n永远不用担心读取组件值可能改变另外的显示值。\n在一次单独的渲染过程中，视图应该总是稳定的。</p><p translation-origin=\"off\">This rule is essential to Angular's \"unidirectional data flow\" policy.\nYou should never worry that reading a component value might change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n\n<p translation-result=\"on\"><a href=\"https://en.wikipedia.org/wiki/Idempotence\">幂等</a>的表达式是最理想的，因为它没有副作用，并且可以提高 Angular 的变更检测性能。\n用 Angular 术语来说，幂等表达式总会返回<em>完全相同的东西</em>，除非其依赖值之一发生了变化。</p><p translation-origin=\"off\">An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is ideal because\nit is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns\n<em>exactly the same thing</em> until one of its dependent values changes.</p>\n\n<p translation-result=\"on\">在单独的一次事件循环中，被依赖的值不应该改变。\n如果幂等的表达式返回一个字符串或数字，连续调用它两次，也应该返回相同的字符串或数字。\n如果幂等的表达式返回一个对象（包括 <code>Date</code> 或 <code>Array</code>），连续调用它两次，也应该返回同一个对象的<em>引用</em>。</p><p translation-origin=\"off\">Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object, including an <code>array</code>, it returns the same object <em>reference</em> when called twice in a row.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">对于 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，这种行为有一个例外。<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 具有 <code>trackBy</code> 功能，在迭代对象时它可以处理对象的相等性。详情参见 <a href=\"guide/template-syntax#ngfor-with-trackby\">带 <code>trackBy</code> 的 *ngFor</a>。</p><p translation-origin=\"off\">There is one exception to this behavior that applies to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> has <code>trackBy</code> functionality that can deal with referential inequality of objects when iterating over them. See <a href=\"guide/template-syntax#ngfor-with-trackby\">*ngFor with <code>trackBy</code></a> for details.</p>\n\n</div>\n<!-- end of Interpolation doc -->\n<hr>\n<a id=\"template-statements\"></a>\n<h2 id=\"template-statements\" translation-result=\"on\">模板语句<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-statements\">Template statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">模板<strong>语句</strong>用来响应由绑定目标（如 HTML 元素、组件或指令）触发的<strong>事件</strong>。\n模板语句将在<a href=\"guide/template-syntax#event-binding\">事件绑定</a>一节看到，它出现在 <code>=</code> 号右侧的引号中，就像这样：<code>(event)=\"statement\"</code>。</p><p translation-origin=\"off\">A template <strong>statement</strong> responds to an <strong>event</strong> raised by a binding target\nsuch as an element, component, or directive.\nYou'll see template statements in the <a href=\"guide/template-syntax#event-binding\">event binding</a> section,\nappearing in quotes to the right of the <code>=</code> symbol as in <code>(event)=\"statement\"</code>.</p>\n\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">模板语句<em>有副作用</em>。\n这是事件处理的关键。因为你要根据用户的输入更新应用状态。</p><p translation-origin=\"off\">A template statement <em>has a side effect</em>.\nThat's the whole point of an event.\nIt's how you update application state from user action.</p>\n\n<p translation-result=\"on\">响应事件是 Angular 中“单向数据流”的另一面。\n在一次事件循环中，可以随意改变任何地方的任何东西。</p><p translation-origin=\"off\">Responding to events is the other side of Angular's \"unidirectional data flow\".\nYou're free to change anything, anywhere, during this turn of the event loop.</p>\n\n<p translation-result=\"on\">和模板表达式一样，模板<em>语句</em>使用的语言也像 JavaScript。\n模板语句解析器和模板表达式解析器有所不同，特别之处在于它支持基本赋值 (<code>=</code>) 和表达式链 (<code>;</code>)。</p><p translation-origin=\"off\">Like template expressions, template <em>statements</em> use a language that looks like JavaScript.\nThe template statement parser differs from the template expression parser and\nspecifically supports both basic assignment (<code>=</code>) and chaining expressions with <code>;</code>.</p>\n\n<p translation-result=\"on\">然而，某些 JavaScript 语法和模板表达式语法仍然是不允许的：</p><p translation-origin=\"off\">However, certain JavaScript and template expression syntax is not allowed:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>new</code> 运算符</p><p translation-origin=\"off\"><code>new</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 自增和自减运算符：<code>++</code> 和 <code>--</code></p><p translation-origin=\"off\">increment and decrement operators, <code>++</code> and <code>--</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 操作并赋值，例如 <code>+=</code> 和 <code>-=</code></p><p translation-origin=\"off\">operator assignment, such as <code>+=</code> and <code>-=</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 位运算符，例如 <code>|</code> 和 <code>&#x26;</code></p><p translation-origin=\"off\">the bitwise operators, such as <code>|</code> and <code>&#x26;</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/template-syntax#expression-operators\">管道运算符</a></p><p translation-origin=\"off\">the <a href=\"guide/template-syntax#pipe\">pipe operator</a></p>\n\n</li>\n</ul>\n<h3 id=\"statement-context\" translation-result=\"on\">语句上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-context\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"statement-context\">Statement context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-context\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">和表达式中一样，语句只能引用语句上下文中 —— 通常是正在绑定事件的那个<strong>组件实例</strong>。</p><p translation-origin=\"off\">As with expressions, statements can refer only to what's in the statement context\nsuch as an event handling method of the component instance.</p>\n\n<p translation-result=\"on\">典型的<em>语句上下文</em>就是当前组件的实例。\n<code>(click)=\"deleteHero()\"</code> 中的 <em>deleteHero</em> 就是这个数据绑定组件上的一个方法。</p><p translation-origin=\"off\">The <em>statement context</em> is typically the component instance.\nThe <em>deleteHero</em> in <code>(click)=\"deleteHero()\"</code> is a method of the data-bound component.</p>\n\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">语句上下文可以引用模板自身上下文中的属性。\n在下面的例子中，就把模板的 <code>$event</code> 对象、<a href=\"guide/template-syntax#template-input-variable\">模板输入变量</a> (<code>let hero</code>)和<a href=\"guide/template-syntax#ref-vars\">模板引用变量</a> (<code>#heroForm</code>)传给了组件中的一个事件处理器方法。</p><p translation-origin=\"off\">The statement context may also refer to properties of the template's own context.\nIn the following examples, the template <code>$event</code> object,\na <a href=\"guide/template-syntax#template-input-variable\">template input variable</a> (<code>let hero</code>),\nand a <a href=\"guide/template-syntax#ref-vars\">template reference variable</a> (<code>#heroForm</code>)\nare passed to an event handling method of the component.</p>\n\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n&#x3C;button *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}&#x3C;/button>\n&#x3C;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... &#x3C;/form>\n\n</code-example>\n<p translation-result=\"on\">模板上下文中的变量名的优先级高于组件上下文中的变量名。在上面的 <code>deleteHero(hero)</code> 中，<code>hero</code> 是一个模板输入变量，而不是组件中的 <code>hero</code> 属性。</p><p translation-origin=\"off\">Template context names take precedence over component context names.\nIn <code>deleteHero(hero)</code> above, the <code>hero</code> is the template input variable,\nnot the component's <code>hero</code> property.</p>\n\n<h3 id=\"statement-guidelines\" translation-result=\"on\">语句指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-guidelines\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"statement-guidelines\">Statement guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板语句不能引用全局命名空间的任何东西。比如不能引用 <code>window</code> 或 <code>document</code>，也不能调用 <code>console.log</code> 或 <code>Math.max</code>。</p><p translation-origin=\"off\">Template statements cannot refer to anything in the global namespace. They\ncan't refer to <code>window</code> or <code>document</code>.\nThey can't call <code>console.log</code> or <code>Math.max</code>.</p>\n\n<p translation-result=\"on\">和表达式一样，避免写复杂的模板语句。\n常规是函数调用或者属性赋值。</p><p translation-origin=\"off\">As with expressions, avoid writing complex template statements.\nA method call or simple property assignment should be the norm.</p>\n\n<hr>\n<a id=\"binding-syntax\"></a>\n<h2 id=\"binding-syntax-an-overview\" translation-result=\"on\">绑定语法：概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-syntax-an-overview\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"binding-syntax-an-overview\">Binding syntax: an overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-syntax-an-overview\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">数据绑定是一种机制，用来协调用户可见的内容，特别是应用数据的值。\n虽然也可以手动从 HTML 中推送或拉取这些值，但是如果将这些任务转交给绑定框架，应用就会更易于编写、阅读和维护。\n你只需声明数据源和目标 HTML 元素之间的绑定关系就可以了，框架会完成其余的工作。</p><p translation-origin=\"off\">Data-binding is a mechanism for coordinating what users see, specifically\nwith application data values.\nWhile you could push values to and pull values from HTML,\nthe application is easier to write, read, and maintain if you turn these tasks over to a binding framework.\nYou simply declare bindings between binding sources, target HTML elements, and let the framework do the rest.</p>\n\n<p translation-result=\"on\">对本节中语法和代码片段的说明，参见<live-example name=\"binding-syntax\">绑定语法范例</live-example>。</p><p translation-origin=\"off\">For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"binding-syntax\">binding syntax example</live-example>.</p>\n\n<p translation-result=\"on\">Angular 提供了多种数据绑定方式。绑定类型可以分为三类，按数据流的方向分为：</p><p translation-origin=\"off\">Angular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">从<em>数据源到视图</em></p><p translation-origin=\"off\">From the <em>source-to-view</em></p>\n\n</li>\n<li>\n<p translation-result=\"on\">从<em>视图到数据源</em></p><p translation-origin=\"off\">From <em>view-to-source</em></p>\n\n</li>\n<li>\n<p translation-result=\"on\">双向：<em>视图到数据源到视图</em></p><p translation-origin=\"off\">Two-way sequence: <em>view-to-source-to-view</em></p>\n\n</li>\n</ul>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"30%\">\n  \n  <col width=\"50%\">\n  \n  <col width=\"20%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      绑定类型</p><p translation-origin=\"off\">      Type</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      语法</p><p translation-origin=\"off\">      Syntax</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      分类</p><p translation-origin=\"off\">      Category</p>\n\n    </th>\n  </tr>\n  <tr>\n     <td>\n<p translation-result=\"on\">      插值<br>\n属性<br>\nAttribute<br>\nCSS 类<br>\n样式</p><p translation-origin=\"off\">      Interpolation<br>\nProperty<br>\nAttribute<br>\nClass<br>\nStyle</p>\n\n     </td>\n    <td>\n      <code-example>\n        {{expression}}\n        [target]=\"expression\"\n        bind-target=\"expression\"\n      </code-example>\n    </td>\n    <td>\n<p translation-result=\"on\">      单向<br>从数据源<br>到视图</p><p translation-origin=\"off\">      One-way<br>from data source<br>to view target</p>\n\n    </td>\n    </tr><tr>\n      <td>\n<p translation-result=\"on\">        事件</p><p translation-origin=\"off\">        Event</p>\n\n      </td>\n      <td>\n        <code-example>\n          (target)=\"statement\"\n          on-target=\"statement\"\n        </code-example>\n      </td>\n      <td>\n<p translation-result=\"on\">        从视图到数据源的单向绑定</p><p translation-origin=\"off\">        One-way<br>from view target<br>to data source</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td>\n<p translation-result=\"on\">        双向</p><p translation-origin=\"off\">        Two-way</p>\n\n      </td>\n      <td>\n        <code-example>\n          [(target)]=\"expression\"\n          bindon-target=\"expression\"\n        </code-example>\n      </td>\n      <td>\n<p translation-result=\"on\">        双向</p><p translation-origin=\"off\">        Two-way</p>\n\n      </td>\n    </tr>\n  \n</tbody></table>\n<p translation-result=\"on\">除插值以外的其它绑定类型在等号的左侧都有一个“目标名称”，由绑定符 <code>[]</code> 或 <code>()</code> 包起来，\n或者带有前缀：<code>bind-</code>，<code>on-</code>，<code>bindon-</code>。</p><p translation-origin=\"off\">Binding types other than interpolation have a <strong>target name</strong> to the left of the equal sign, either surrounded by punctuation, <code>[]</code> or <code>()</code>,\nor preceded by a prefix: <code>bind-</code>, <code>on-</code>, <code>bindon-</code>.</p>\n\n<p translation-result=\"on\">绑定的“目标”是绑定符内部的属性或事件：<code>[]</code>、<code>()</code> 或 <code>[()]</code>。</p><p translation-origin=\"off\">The <em>target</em> of a binding is the property or event inside the binding punctuation: <code>[]</code>, <code>()</code> or <code>[()]</code>.</p>\n\n<p translation-result=\"on\">在绑定时可以使用<strong>来源</strong>指令的每个公共成员。\n你无需进行任何特殊操作即可在模板表达式或语句内访问指令的成员。</p><p translation-origin=\"off\">Every public member of a <strong>source</strong> directive is automatically available for binding.\nYou don't have to do anything special to access a directive member in a template expression or statement.</p>\n\n<h3 id=\"data-binding-and-html\" translation-result=\"on\">数据绑定与 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#data-binding-and-html\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"data-binding-and-html\">Data-binding and HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#data-binding-and-html\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在正常的 HTML 开发过程中，你使用 HTML 元素来创建视觉结构，\n通过把字符串常量设置到元素的 attribute 来修改那些元素。</p><p translation-origin=\"off\">In the normal course of HTML development, you create a visual structure with HTML elements, and\nyou modify those elements by setting element attributes with string constants.</p>\n\n<code-example language=\"html\">\n&#x3C;div class=\"special\">Plain old HTML&#x3C;/div>\n\n&#x3C;img src=\"images/item.png\">\n&#x3C;button disabled>Save&#x3C;/button>\n</code-example>\n<p translation-result=\"on\">使用数据绑定，你可以控制按钮状态等各个方面：</p><p translation-origin=\"off\">With data-binding, you can control things like the state of a button:</p>\n\n<code-example path=\"binding-syntax/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- Bind button disabled <a href=\"api/animations/state\" class=\"code-anchor\">state</a> to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Save&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">请注意，这里绑定到的是按钮的 DOM 元素的 <code>disabled</code> 这个 <em>Property</em>，而不是 <em>Attribute</em>。\n这是数据绑定的通用规则。数据绑定使用 DOM 元素、组件和指令的 <em>Property</em>，而不是 HTML 的<em>Attribute</em>。</p><p translation-origin=\"off\">Notice that the binding is to the <code>disabled</code> property of the button's DOM element,\n<strong>not</strong> the attribute. This applies to data-binding in general. Data-binding works with <em>properties</em> of DOM elements, components, and directives, not HTML <em>attributes</em>.</p>\n\n<h3 id=\"html-attribute-vs-dom-property\" translation-result=\"on\">HTML attribute 与 DOM property 的对比<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-attribute-vs-dom-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"html-attribute-vs-dom-property\">HTML attribute vs. DOM property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-attribute-vs-dom-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">理解 HTML 属性和 DOM 属性之间的区别，是了解 Angular 绑定如何工作的关键。<strong>Attribute 是由 HTML 定义的。Property 是从 DOM（文档对象模型）节点访问的。</strong></p><p translation-origin=\"off\">The distinction between an HTML attribute and a DOM property is key to understanding\nhow Angular binding works. <strong>Attributes are defined by HTML. Properties are accessed from DOM (Document Object Model) nodes.</strong></p>\n\n<ul>\n<li>\n<p translation-result=\"on\">一些 HTML Attribute 可以 1:1 映射到 Property；例如，“ id”。</p><p translation-origin=\"off\">A few HTML attributes have 1:1 mapping to properties; for example, <code>id</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">某些 HTML Attribute 没有相应的 Property。例如，<code>aria-*</code>。</p><p translation-origin=\"off\">Some HTML attributes don't have corresponding properties; for example, <code>aria-*</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">某些 DOM Property 没有相应的 Attribute。例如，<code>textContent</code>。</p><p translation-origin=\"off\">Some DOM properties don't have corresponding attributes; for example, <code>textContent</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">重要的是要记住，<em>HTML Attribute</em> 和 <em>DOM Property</em> 是不同的，就算它们具有相同的名称也是如此。\n在 Angular 中，HTML Attribute 的唯一作用是初始化元素和指令的状态。</p><p translation-origin=\"off\">It is important to remember that <em>HTML attribute</em> and the <em>DOM property</em> are different things, even when they have the same name.\nIn Angular, the only role of HTML attributes is to initialize element and directive state.</p>\n\n<p translation-result=\"on\"><strong>模板绑定使用的是 <em>Property</em> 和<em>事件</em>，而不是 <em>Attribute</em>。</strong></p><p translation-origin=\"off\"><strong>Template binding works with <em>properties</em> and <em>events</em>, not <em>attributes</em>.</strong></p>\n\n<p translation-result=\"on\">编写数据绑定时，你只是在和目标对象的 <em>DOM Property</em> 和<em>事件</em>打交道。</p><p translation-origin=\"off\">When you write a data-binding, you're dealing exclusively with the <em>DOM properties</em> and <em>events</em> of the target object.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">该通用规则可以帮助你建立 HTML Attribute 和 DOM Property 的思维模型：\n<strong>属性负责初始化 DOM 属性，然后完工。Property 值可以改变；Attribute 值则不能。</strong></p><p translation-origin=\"off\">This general rule can help you build a mental model of attributes and DOM properties:\n<strong>Attributes initialize DOM properties and then they are done.\nProperty values can change; attribute values can't.</strong></p>\n\n<p translation-result=\"on\">此规则有一个例外。\n可以通过 <code>setAttribute()</code> 来更改 Attribute，接着它会重新初始化相应的 DOM 属性。</p><p translation-origin=\"off\">There is one exception to this rule.\nAttributes can be changed by <code>setAttribute()</code>, which re-initializes corresponding DOM properties.</p>\n\n</div>\n<p translation-result=\"on\">欲知详情，参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\">MDN 接口文档</a>，其中包含所有标准 DOM 元素及其 Property 的 API 文档。\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"><code>&#x3C;td></code> Attribute</a> 与 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\"><code>&#x3C;td></code> Property</a> 之间的比较是一个很有用的例子。\n特别是，你可以通过 “DOM 接口” 链接从 Attribute 页面导航到 Property 页面，并在继承层次中导航到 <code>HTMLTableCellElement</code>。</p><p translation-origin=\"off\">For more information, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\">MDN Interfaces documentation</a> which has API docs for all the standard DOM elements and their properties.\nComparing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"><code>&#x3C;td></code> attributes</a> to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\"><code>&#x3C;td></code> properties</a> provides a helpful example for differentiation.\nIn particular, you can navigate from the attributes page to the properties via \"DOM interface\" link, and navigate the inheritance hierarchy up to <code>HTMLTableCellElement</code>.</p>\n\n<h4 id=\"example-1-an-input\" translation-result=\"on\">范例 1：<code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-1-an-input\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"example-1-an-input\">Example 1: an <code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-1-an-input\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">当浏览器渲染 <code>&#x3C;input type=\"text\" value=\"Sarah\"></code> 时，它会创建一个对应的 DOM 节点，其 <code>value</code> Property 已初始化为 “Sarah”。</p><p translation-origin=\"off\">When the browser renders <code>&#x3C;input type=\"text\" value=\"Sarah\"></code>, it creates a\ncorresponding DOM node with a <code>value</code> property initialized to \"Sarah\".</p>\n\n<code-example language=\"html\">\n&#x3C;input type=\"text\" value=\"Sarah\">\n</code-example>\n<p translation-result=\"on\">当用户在 <code>&#x3C;input></code> 中输入 <code>Sally</code> 时，DOM 元素的 <code>value</code> <em>Property</em> 将变为 <code>Sally</code>。\n但是，如果使用 <code>input.getAttribute('value')</code> 查看 HTML 的 Attribute <code>value</code>，则可以看到该 <em>attribute</em> 保持不变 —— 它返回了 <code>Sarah</code>。</p><p translation-origin=\"off\">When the user enters \"Sally\" into the <code>&#x3C;input></code>, the DOM element <code>value</code> <em>property</em> becomes \"Sally\".\nHowever, if you look at the HTML attribute <code>value</code> using <code>input.getAttribute('value')</code>, you can see that the <em>attribute</em> remains unchanged—it returns \"Sarah\".</p>\n\n<p translation-result=\"on\">HTML 的 <code>value</code> 这个 attribute 指定了<em>初始</em>值；DOM 的 <code>value</code> 这个 property 是<em>当前</em>值。</p><p translation-origin=\"off\">The HTML attribute <code>value</code> specifies the <em>initial</em> value; the DOM <code>value</code> property is the <em>current</em> value.</p>\n\n<p translation-result=\"on\">要通过可运行的应用查看 Attribute 和 DOM Property 的差别，请参阅 <live-example name=\"binding-syntax\"></live-example>，特别注意其绑定语法。</p><p translation-origin=\"off\">To see attributes versus DOM properties in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax.</p>\n\n<h4 id=\"example-2-a-disabled-button\" translation-result=\"on\">范例 2：禁用按钮<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-2-a-disabled-button\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"example-2-a-disabled-button\">Example 2: a disabled button<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-2-a-disabled-button\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>disabled</code> Attribute 是另一个例子。按钮的 <code>disabled</code> <em>Property</em> 默认为 <code>false</code>，因此按钮是启用的。</p><p translation-origin=\"off\">The <code>disabled</code> attribute is another example. A button's <code>disabled</code>\n<em>property</em> is <code>false</code> by default so the button is enabled.</p>\n\n<p translation-result=\"on\">当你添加 <code>disabled</code> <em>Attribute</em> 时，仅仅它的出现就将按钮的 <code>disabled</code> <em>Property</em> 初始化成了 <code>true</code>，因此该按钮就被禁用了。</p><p translation-origin=\"off\">When you add the <code>disabled</code> <em>attribute</em>, its presence alone\ninitializes the button's <code>disabled</code> <em>property</em> to <code>true</code>\nso the button is disabled.</p>\n\n<code-example language=\"html\">\n&#x3C;button disabled>Test Button&#x3C;/button>\n</code-example>\n<p translation-result=\"on\">添加和删​​除 <code>disabled</code> <em>Attribute</em> 会禁用和启用该按钮。\n但是，<em>Attribute</em> 的值无关紧要，这就是为什么你不能通过编写 <code>&#x3C;button disabled=\"false\">仍被禁用&#x3C;/button></code> 来启用此按钮的原因。</p><p translation-origin=\"off\">Adding and removing the <code>disabled</code> <em>attribute</em> disables and enables the button.\nHowever, the value of the <em>attribute</em> is irrelevant,\nwhich is why you cannot enable a button by writing <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code>.</p>\n\n<p translation-result=\"on\">要控制按钮的状态，请设置 <code>disabled</code> <em>Property</em>，</p><p translation-origin=\"off\">To control the state of the button, set the <code>disabled</code> <em>property</em>,</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">虽然技术上说你可以设置 <code>[attr.disabled]</code> 属性绑定，但是它们的值是不同的，Property 绑定要求一个布尔值，而其相应的 Attribute 绑定则取决于该值是否为 <code>null</code>。例子如下：</p><p translation-origin=\"off\">Though you could technically set the <code>[attr.disabled]</code> attribute binding, the values are different in that the property binding requires to be a boolean value, while its corresponding attribute binding relies on whether the value is <code>null</code> or not. Consider the following:</p>\n\n<code-example language=\"html\">\n&#x3C;input [disabled]=\"condition ? true : false\">\n&#x3C;input [attr.disabled]=\"condition ? 'disabled' : null\">\n</code-example>\n<p translation-result=\"on\">通常，要使用 Property 绑定而不是 Attribute 绑定，因为它更直观（是一个布尔值），语法更短，并且性能更高。</p><p translation-origin=\"off\">Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</p>\n\n</div>\n<p translation-result=\"on\">要通过可运行的应用查看 <code>disabled</code> 按钮示例，请参见<live-example name=\"binding-syntax\"></live-example>，特别注意其绑定语法。本示例展示了如何从组件中切换禁用属性。</p><p translation-origin=\"off\">To see the <code>disabled</code> button example in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax. This example shows you how to toggle the disabled property from the component.</p>\n\n<h2 id=\"binding-types-and-targets\" translation-result=\"on\">绑定类型与绑定目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-types-and-targets\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"binding-types-and-targets\">Binding types and targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-types-and-targets\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">数据绑定的目标是 DOM 中的对象。\n根据绑定类型，该目标可以是 Property 名（元素、组件或指令的）、事件名（元素、组件或指令的），有时是 Attribute 名。下表中总结了不同绑定类型的目标。</p><p translation-origin=\"off\">The <strong>target of a data-binding</strong> is something in the DOM.\nDepending on the binding type, the target can be a property (element, component, or directive),\nan event (element, component, or directive), or sometimes an attribute name.\nThe following table summarizes the targets for the different binding types.</p>\n\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"10%\">\n  \n  <col width=\"15%\">\n  \n  <col width=\"75%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      绑定类型</p><p translation-origin=\"off\">      Type</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      目标</p><p translation-origin=\"off\">      Target</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      范例</p><p translation-origin=\"off\">      Examples</p>\n\n    </th>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      属性</p><p translation-origin=\"off\">      Property</p>\n\n    </td>\n    <td>\n<p translation-result=\"on\">      元素的 property<br>\n组件的 property<br>\n指令的 property</p><p translation-origin=\"off\">      Element property<br>\nComponent property<br>\nDirective property</p>\n\n    </td>\n    <td>\n<p translation-result=\"on\">      <code>src</code>, <code>hero</code>, 和 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 如下所示:</p><p translation-origin=\"off\">      <code>src</code>, <code>hero</code>, and <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> in the following:</p>\n\n<p>      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\">\n&#x3C;img [src]=\"heroImageUrl\">\n&#x3C;app-hero-detail [hero]=\"currentHero\">&#x3C;/app-hero-detail>\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example></p>\n      <!-- For more information, see [Property Binding](guide/property-binding). -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      事件</p><p translation-origin=\"off\">      Event</p>\n\n    </td>\n    <td>\n<p translation-result=\"on\">      元素的事件<br>\n组件的事件<br>\n指令的事件</p><p translation-origin=\"off\">      Element event<br>\nComponent event<br>\nDirective event</p>\n\n    </td>\n    <td>\n<p translation-result=\"on\">      <code>click</code>, <code>deleteRequest</code>, 和 <code>myClick</code> 如下所示：</p><p translation-origin=\"off\">      <code>click</code>, <code>deleteRequest</code>, and <code>myClick</code> in the following:</p>\n\n<p>      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;app-hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/app-hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example></p>\n      <!-- KW--Why don't these links work in the table? -->\n      <!-- <div>For more information, see [Event Binding](guide/event-binding).</div> -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      双向</p><p translation-origin=\"off\">      Two-way</p>\n\n    </td>\n    <td>\n<p translation-result=\"on\">      事件与 property</p><p translation-origin=\"off\">      Event and property</p>\n\n    </td>\n    <td>\n<p>      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">\n\n</code-example></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      Attribute</p>\n    </td>\n    <td>\n<p translation-result=\"on\">      attribute（例外情况）</p><p translation-origin=\"off\">      Attribute\n(the exception)</p>\n\n    </td>\n    <td>\n<p>      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\">\n&#x3C;button [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      CSS 类</p><p translation-origin=\"off\">      Class</p>\n\n    </td>\n    <td>\n<p>      <code>class</code> property</p>\n    </td>\n    <td>\n<p>      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      样式</p><p translation-origin=\"off\">      Style</p>\n\n    </td>\n    <td>\n<p>      <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> property</p>\n    </td>\n    <td>\n<p>      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\">\n&#x3C;button [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example></p>\n    </td>\n  </tr>\n</tbody></table>\n<!-- end of binding syntax -->\n<hr>\n<a id=\"property-binding\"></a>\n<h2 id=\"property-binding-property\" translation-result=\"on\">Property 绑定 <code>[property]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-property\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"property-binding-property\">Property binding <code>[property]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-property\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 Property 绑定到目标元素或指令 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器的 set 型属性。\n演示本节中所有要点的例子，请参见<live-example name=\"property-binding\"></live-example>。</p><p translation-origin=\"off\">Use property binding to <em>set</em> properties of target elements or\ndirective <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorators. For an example\ndemonstrating all of the points in this section, see the\n<live-example name=\"property-binding\">property binding example</live-example>.</p>\n\n<h3 id=\"one-way-in\" translation-result=\"on\">单向<em>输入</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-way-in\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"one-way-in\">One-way in<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-way-in\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Property 绑定的值在一个方向上流动，从组件的 Property 变为目标元素的 Property。</p><p translation-origin=\"off\">Property binding flows a value in one direction,\nfrom a component's property into a target element property.</p>\n\n<p translation-result=\"on\">你不能使用属性绑定从目标元素读取或拉取值。同样的，你也不能使用属性绑定在目标元素上调用方法。如果元素要引发事件，则可以使用<a href=\"guide/template-syntax#event-binding\">事件绑定</a>来监听它们。</p><p translation-origin=\"off\">You can't use property\nbinding to read or pull values out of target elements. Similarly, you cannot use\nproperty binding to call a method on the target element.\nIf the element raises events, you can listen to them with an <a href=\"guide/template-syntax#event-binding\">event binding</a>.</p>\n\n<p translation-result=\"on\">如果你要读取目标元素的属性或调用其方法，请参阅 <a href=\"api/core/ViewChild\">ViewChild</a> 和 <a href=\"api/core/ContentChild\">ContentChild</a> 的 API 参考。</p><p translation-origin=\"off\">If you must read a target element property or call one of its methods,\nsee the API reference for <a href=\"api/core/ViewChild\">ViewChild</a> and\n<a href=\"api/core/ContentChild\">ContentChild</a>.</p>\n\n<h3 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#examples\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#examples\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">最常见的 Property 绑定将元素的 Property 设置为组件的 Property 值。例子之一是将 <code>img</code> 元素的 <code>src</code>  Property 绑定到组件的 <code>itemImageUrl</code>  Property：</p><p translation-origin=\"off\">The most common property binding sets an element property to a component\nproperty value. An example is\nbinding the <code>src</code> property of an image element to a component's <code>itemImageUrl</code> property:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p translation-result=\"on\">这是绑定到 <code>colSpan</code> Property 的示例。请注意，它不是 <code>colspan</code>，后者是 Attribute，用小写的 s 拼写。</p><p translation-origin=\"off\">Here's an example of binding to the <code>colSpan</code> property. Notice that it's not <code>colspan</code>,\nwhich is the attribute, spelled with a lowercase <code>s</code>.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- Notice the colSpan property is camel case -->\n&#x3C;tr>&#x3C;td [colSpan]=\"2\">Span 2 columns&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n<p translation-result=\"on\">欲知详情，参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\">MDN HTMLTableCellElement</a> 文档。</p><p translation-origin=\"off\">For more details, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\">MDN HTMLTableCellElement</a> documentation.</p>\n\n<!-- Add link when Attribute Binding updates are merged:\nFor more about `colSpan` and `colspan`, see (Attribute Binding)[guide/template-syntax]. -->\n<p translation-result=\"on\">另一个例子是当组件说它 <code>isUnchanged</code>（未改变）时禁用按钮：</p><p translation-origin=\"off\">Another example is disabling a button when the component says that it <code>isUnchanged</code>:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- Bind button disabled <a href=\"api/animations/state\" class=\"code-anchor\">state</a> to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Disabled Button&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">另一个例子是设置指令的属性：</p><p translation-origin=\"off\">Another is setting a property of a directive:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"classes\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the classes property making this blue&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">另一种方法是设置自定义组件的模型属性 —— 这是一种父级和子级组件进行通信的好办法：</p><p translation-origin=\"off\">Yet another is setting the model property of a custom component—a great way\nfor parent and child components to communicate:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<h3 id=\"binding-targets\" translation-result=\"on\">绑定目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-targets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"binding-targets\">Binding targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-targets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">包裹在方括号中的元素属性名标记着目标属性。下列代码中的目标属性是 image 元素的 <code>src</code> 属性。</p><p translation-origin=\"off\">An element property between enclosing square brackets identifies the target property.\nThe target property in the following code is the image element's <code>src</code> property.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p translation-result=\"on\">还有一种使用 <code>bind-</code> 前缀的替代方案：</p><p translation-origin=\"off\">There's also the <code>bind-</code> prefix alternative:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"bind-prefix\" header=\"src/app/app.component.html\">\n&#x3C;img bind-src=\"itemImageUrl\">\n\n</code-example>\n<p translation-result=\"on\">在大多数情况下，目标名都是 Property 名，虽然它看起来像 Attribute 名。因此，在这个例子中，<code>src</code> 是 <code>&#x3C;img></code> 元素属性的名称。</p><p translation-origin=\"off\">In most cases, the target name is the name of a property, even\nwhen it appears to be the name of an attribute.\nSo in this case, <code>src</code> is the name of the <code>&#x3C;img></code> element property.</p>\n\n<p translation-result=\"on\">元素属性可能是最常见的绑定目标，但 Angular 会先去看这个名字是否是某个已知指令的属性名，就像下面的例子中一样：</p><p translation-origin=\"off\">Element properties may be the more common targets,\nbut Angular looks first to see if the name is a property of a known directive,\nas it is in the following example:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"classes\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the classes property making this blue&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">从技术上讲，Angular 将这个名称与指令的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 进行匹配，它来自指令的 <code>inputs</code> 数组中列出的 Property 名称之一或是用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰的属性。这些输入都映射到指令自身的属性。</p><p translation-origin=\"off\">Technically, Angular is matching the name to a directive <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>,\none of the property names listed in the directive's <code>inputs</code> array\nor a property decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.\nSuch inputs map to the directive's own properties.</p>\n\n<p translation-result=\"on\">如果名字没有匹配上已知指令或元素的属性，Angular 就会报告“未知指令”的错误。</p><p translation-origin=\"off\">If the name fails to match a property of a known directive or element, Angular reports an “unknown directive” error.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">尽管目标名称通常是 Property 的名称，但是在 Angular 中，有几个常见属性会自动将 Attribute 映射为 Property。这些包括 <code>class</code> / <code>className</code>，<code>innerHtml</code> / <code>innerHTML</code> 和 <code>tabindex</code> / <code>tabIndex</code>。</p><p translation-origin=\"off\">Though the target name is usually the name of a property,\nthere is an automatic attribute-to-property mapping in Angular for\nseveral common attributes. These include <code>class</code>/<code>className</code>, <code>innerHtml</code>/<code>innerHTML</code>, and\n<code>tabindex</code>/<code>tabIndex</code>.</p>\n\n</div>\n<h3 id=\"avoid-side-effects\" translation-result=\"on\">消除副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"avoid-side-effects\">Avoid side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板表达的计算应该没有明显的副作用。表达式语言本身或你编写模板表达式的方式在一定程度上有所帮助。你不能为属性绑定表达式中的任何内容赋值，也不能使用递增和递减运算符。</p><p translation-origin=\"off\">Evaluation of a template expression should have no visible side effects.\nThe expression language itself, or the way you write template expressions,\nhelps to a certain extent;\nyou can't assign a value to anything in a property binding expression\nnor use the increment and decrement operators.</p>\n\n<p translation-result=\"on\">例如，假设你有一个表达式，该表达式调用了具有副作用的属性或方法。该表达式可以调用类似 <code>getFoo()</code> 的函数，只有你知道 <code>getFoo()</code> 做了什么。如果 <code>getFoo()</code> 更改了某些内容，而你恰巧绑定到该内容，则 Angular 可能会也可能不会显示更改后的值。Angular 可能会检测到更改并抛出警告错误。最佳实践是坚持使用属性和返回值并避免副作用的方法。</p><p translation-origin=\"off\">For example, you could have an expression that invoked a property or method that had\nside effects. The expression could call something like <code>getFoo()</code> where only you\nknow what <code>getFoo()</code> does. If <code>getFoo()</code> changes something\nand you happen to be binding to that something,\nAngular may or may not display the changed value. Angular may detect the\nchange and throw a warning error.\nAs a best practice, stick to properties and to methods that return\nvalues and avoid side effects.</p>\n\n<h3 id=\"return-the-proper-type\" translation-result=\"on\">返回正确的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"return-the-proper-type\">Return the proper type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板表达式的计算结果应该是目标属性所需要的值类型。如果 <code>target</code> 属性需要一个字符串，则返回一个字符串；如果需要一个数字，则返回一个数字；如果需要一个对象，则返回一个对象，依此类推。</p><p translation-origin=\"off\">The template expression should evaluate to the type of value\nthat the target property expects.\nReturn a string if the target property expects a string, a number if it\nexpects a number, an object if it expects an object, and so on.</p>\n\n<p translation-result=\"on\">在下面的例子中，<code>ItemDetailComponent</code> 的 <code>childItem</code> 属性需要一个字符串，而这正是你要发送给属性绑定的内容：</p><p translation-origin=\"off\">In the following example, the <code>childItem</code> property of the <code>ItemDetailComponent</code> expects a string, which is exactly what you're sending in the property binding:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">你可以查看 <code>ItemDetailComponent</code> 来确认这一点，它的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 类型设为了字符串：</p><p translation-origin=\"off\">You can confirm this by looking in the <code>ItemDetailComponent</code> where the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> type is set to a string:</p>\n\n<code-example path=\"property-binding/src/app/item-detail/item-detail.component.ts\" region=\"input-type\" header=\"src/app/item-detail/item-detail.component.ts (setting the @Input() type)\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem: string;\n\n</code-example>\n<p translation-result=\"on\">如你所见，<code>AppComponent</code> 中的 <code>parentItem</code> 是一个字符串，而 <code>ItemDetailComponent</code> 需要的就是字符串：</p><p translation-origin=\"off\">As you can see here, the <code>parentItem</code> in <code>AppComponent</code> is a string, which the <code>ItemDetailComponent</code> expects:</p>\n\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\" header=\"src/app/app.component.ts\">\nparentItem = 'lamp';\n\n</code-example>\n<h4 id=\"passing-in-an-object\" translation-result=\"on\">传入对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"passing-in-an-object\">Passing in an object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">前面的简单示例演示了传入字符串的情况。要传递对象，其语法和思想是相同的。</p><p translation-origin=\"off\">The previous simple example showed passing in a string. To pass in an object,\nthe syntax and thinking are the same.</p>\n\n<p translation-result=\"on\">在这种情况下，<code>ItemListComponent</code> 嵌套在 <code>AppComponent</code> 中，并且 <code>items</code> 属性需要一个对象数组。</p><p translation-origin=\"off\">In this scenario, <code>ItemListComponent</code> is nested within <code>AppComponent</code> and the <code>items</code> property expects an array of objects.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"pass-object\" header=\"src/app/app.component.html\">\n&#x3C;app-item-list [items]=\"currentItems\">&#x3C;/app-item-list>\n\n</code-example>\n<p translation-result=\"on\"><code>items</code> 属性是在 <code>ItemListComponent</code> 中用 <code>Item</code> 类型声明的，并带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器：</p><p translation-origin=\"off\">The <code>items</code> property is declared in the <code>ItemListComponent</code> with a type of <code>Item</code> and decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n\n<code-example path=\"property-binding/src/app/item-list/item-list.component.ts\" region=\"item-input\" header=\"src/app/item-list.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[];\n\n</code-example>\n<p translation-result=\"on\">在此示例应用程序中，<code>Item</code> 是具有两个属性的对象。一个 <code>id</code> 和一个 <code>name</code>。</p><p translation-origin=\"off\">In this sample app, an <code>Item</code> is an object that has two properties; an <code>id</code> and a <code>name</code>.</p>\n\n<code-example path=\"property-binding/src/app/item.ts\" region=\"item-class\" header=\"src/app/item.ts\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p translation-result=\"on\">当另一个文件 <code>mock-items.ts</code> 中存在一个条目列表时，你可以在 <code>app.component.ts</code> 中指定另一个条目，以便渲染新条目：</p><p translation-origin=\"off\">While a list of items exists in another file, <code>mock-items.ts</code>, you can\nspecify a different item in <code>app.component.ts</code> so that the new item will render:</p>\n\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\" header=\"src/app.component.ts\">\ncurrentItems = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p translation-result=\"on\">在这个例子中，你只需要确保你所提供的对象数组的类型，也就是这个 <code>Item</code> 的类型是嵌套组件 <code>ItemListComponent</code> 所需要的类型。</p><p translation-origin=\"off\">You just have to make sure, in this case, that you're supplying an array of objects because that's the type of <code>Item</code> and is what the nested component, <code>ItemListComponent</code>, expects.</p>\n\n<p translation-result=\"on\">在此示例中，<code>AppComponent</code> 指定了另一个 <code>item</code> 对象（ <code>currentItems</code> ）并将其传给嵌套的 <code>ItemListComponent</code>。<code>ItemListComponent</code> 之所以能够使用 <code>currentItems</code> 是因为它与 <code>item.ts</code> 中定义的 <code>Item</code> 对象的类型相匹配。在 <code>item.ts</code> 文件中，<code>ItemListComponent</code> 获得了其对 <code>item</code> 的定义。</p><p translation-origin=\"off\">In this example, <code>AppComponent</code> specifies a different <code>item</code> object\n(<code>currentItems</code>) and passes it to the nested <code>ItemListComponent</code>. <code>ItemListComponent</code> was able to use <code>currentItems</code> because it matches what an <code>Item</code> object is according to <code>item.ts</code>. The <code>item.ts</code> file is where\n<code>ItemListComponent</code> gets its definition of an <code>item</code>.</p>\n\n<h3 id=\"remember-the-brackets\" translation-result=\"on\">别忘了方括号<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#remember-the-brackets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"remember-the-brackets\">Remember the brackets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#remember-the-brackets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">方括号 <code>[]</code> 告诉 Angular 计算该模板表达式。如果省略括号，Angular 会将字符串视为常量，并使用该字符串<em>初始化目标属性</em> ：</p><p translation-origin=\"off\">The brackets, <code>[]</code>, tell Angular to evaluate the template expression.\nIf you omit the brackets, Angular treats the string as a constant\nand <em>initializes the target property</em> with that string:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"no-evaluation\" header=\"src/app.component.html\">\n&#x3C;app-item-detail childItem=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">省略方括号将渲染字符串 <code>parentItem</code>，而不是 <code>parentItem</code> 的值。</p><p translation-origin=\"off\">Omitting the brackets will render the string\n<code>parentItem</code>, not the value of <code>parentItem</code>.</p>\n\n<h3 id=\"one-time-string-initialization\" translation-result=\"on\">一次性字符串初始化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-time-string-initialization\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"one-time-string-initialization\">One-time string initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-time-string-initialization\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当满足下列条件时，<em>应该</em>省略括号：</p><p translation-origin=\"off\">You <em>should</em> omit the brackets when all of the following are true:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 目标属性接受字符串值。</p><p translation-origin=\"off\">The target property accepts a string value.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">字符串是一个固定值，你可以直接将其放入模板中。</p><p translation-origin=\"off\">The string is a fixed value that you can put directly into the template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 这个初始值永不改变。</p><p translation-origin=\"off\">This initial value never changes.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你通常会以这种方式在标准 HTML 中初始化属性，并且它对指令和组件的属性初始化同样有效。\n下面的示例将 <code>StringInitComponent</code> 中的 <code>prefix</code> 属性初始化为固定字符串，而不是模板表达式。Angular 设置它，然后就不管它了。</p><p translation-origin=\"off\">You routinely initialize attributes this way in standard HTML, and it works\njust as well for directive and component property initialization.\nThe following example initializes the <code>prefix</code> property of the <code>StringInitComponent</code> to a fixed string,\nnot a template expression. Angular sets it and forgets about it.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"string-init\" header=\"src/app/app.component.html\">\n&#x3C;app-string-init prefix=\"This is a one-time initialized string.\">&#x3C;/app-string-init>\n\n</code-example>\n<p translation-result=\"on\">另一方面，<code>[item]</code> 绑定仍然是与组件的 <code>currentItems</code> 属性的实时绑定。</p><p translation-origin=\"off\">The <code>[item]</code> binding, on the other hand, remains a live binding to the component's <code>currentItems</code> property.</p>\n\n<h3 id=\"property-binding-vs-interpolation\" translation-result=\"on\">属性绑定与插值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-vs-interpolation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"property-binding-vs-interpolation\">Property binding vs. interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-vs-interpolation\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你通常得在插值和属性绑定之间做出选择。\n下列这几对绑定做的事情完全相同：</p><p translation-origin=\"off\">You often have a choice between interpolation and property binding.\nThe following binding pairs do the same thing:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding-interpolation\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;img src=\"{{itemImageUrl}}\"> is the &#x3C;i>interpolated&#x3C;/i> image.&#x3C;/p>\n&#x3C;p>&#x3C;img [src]=\"itemImageUrl\"> is the &#x3C;i>property bound&#x3C;/i> image.&#x3C;/p>\n\n&#x3C;p>&#x3C;span>\"{{interpolationTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> title.&#x3C;/span>&#x3C;/p>\n&#x3C;p>\"&#x3C;span [innerHTML]=\"propertyTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> title.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">在许多情况下，插值是属性绑定的便捷替代法。当要把数据值渲染为字符串时，虽然可读性方面倾向于插值，但没有技术上的理由偏爱一种形式。但是，<em>将元素属性设置为非字符串的数据值时，必须使用属性绑定</em>。</p><p translation-origin=\"off\">Interpolation is a convenient alternative to property binding in\nmany cases. When rendering data values as strings, there is no\ntechnical reason to prefer one form to the other, though readability\ntends to favor interpolation. However, <em>when setting an element\nproperty to a non-string data value, you must use property binding</em>.</p>\n\n<h3 id=\"content-security\" translation-result=\"on\">内容安全<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#content-security\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"content-security\">Content security<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#content-security\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">假设如下<em>恶意内容</em></p><p translation-origin=\"off\">Imagine the following malicious content.</p>\n\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"malicious-content\" header=\"src/app/app.component.ts\">\nevilTitle = 'Template &#x3C;script>alert(\"evil never sleeps\")&#x3C;/script> Syntax';\n\n</code-example>\n<p translation-result=\"on\">在组件模板中，内容可以与插值一起使用：</p><p translation-origin=\"off\">In the component template, the content might be used with interpolation:</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-interpolated\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;span>\"{{evilTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> evil title.&#x3C;/span>&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">幸运的是，Angular 数据绑定对于危险的 HTML 高度戒备。在上述情况下，HTML 将按原样显示，而 Javascript 不执行。Angular <strong>不允许</strong>带有 <code>script</code> 标签的 HTML 泄漏到浏览器中，无论是插值还是属性绑定。</p><p translation-origin=\"off\">Fortunately, Angular data binding is on alert for dangerous HTML. In the above case,\nthe HTML displays as is, and the Javascript does not execute. Angular <strong>does not</strong>\nallow HTML with script tags to leak into the browser, neither with interpolation\nnor property binding.</p>\n\n<p translation-result=\"on\">不过，在下列示例中，Angular 会在显示值之前先对它们进行<a href=\"guide/security#sanitization-and-security-contexts\">无害化处理</a>。</p><p translation-origin=\"off\">In the following example, however, Angular <a href=\"guide/security#sanitization-and-security-contexts\">sanitizes</a>\nthe values before displaying them.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-content\" header=\"src/app/app.component.html\">\n &#x3C;!--\n Angular generates a warning for the following line as it sanitizes them\n WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n-->\n &#x3C;p>\"&#x3C;span [innerHTML]=\"evilTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> evil title.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">插值处理 <code>&#x3C;script></code> 标记与属性绑定的方式不同，但是这两种方法都可以使内容无害。以下是 <code>evilTitle</code> 示例的浏览器输出。</p><p translation-origin=\"off\">Interpolation handles the <code>&#x3C;script></code> tags differently than\nproperty binding but both approaches render the\ncontent harmlessly. The following is the browser output\nof the <code>evilTitle</code> examples.</p>\n\n<code-example language=\"bash\">\n\"Template &#x3C;script>alert(\"evil never sleeps\")&#x3C;/script> Syntax\" is the interpolated evil title.\n\"Template Syntax\" is the property bound evil title.\n</code-example>\n<hr>\n<a id=\"other-bindings\"></a>\n<h2 id=\"attribute-class-and-style-bindings\" translation-result=\"on\">attribute、class 和 style 绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-class-and-style-bindings\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"attribute-class-and-style-bindings\">Attribute, class, and style bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-class-and-style-bindings\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">模板语法为那些不太适合使用属性绑定的场景提供了专门的单向数据绑定形式。</p><p translation-origin=\"off\">The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</p>\n\n<p translation-result=\"on\">要在运行中的应用查看 Attribute 绑定、类绑定和样式绑定，请参见 <live-example name=\"attribute-binding\"></live-example> 特别是对于本节。</p><p translation-origin=\"off\">To see attribute, class, and style bindings in a functioning app, see the <live-example name=\"attribute-binding\"></live-example> especially for this section.</p>\n\n<h3 id=\"attribute-binding\" translation-result=\"on\">attribute 绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"attribute-binding\">Attribute binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以直接使用 <strong>Attribute 绑定</strong>设置 Attribute 的值。一般来说，绑定时设置的是目标的 Property，而 Attribute 绑定是唯一的例外，它创建和设置的是 Attribute。</p><p translation-origin=\"off\">Set the value of an attribute directly with an <strong>attribute binding</strong>. This is the only exception to the rule that a binding sets a target property and the only binding that creates and sets an attribute.</p>\n\n<p translation-result=\"on\">通常，使用 <a href=\"guide/template-syntax#property-binding\">Property 绑定</a>设置元素的 Property 优于使用字符串设置 Attribute。但是，有时没有要绑定的元素的 Property，所以其解决方案就是 Attribute 绑定。</p><p translation-origin=\"off\">Usually, setting an element property with a <a href=\"guide/template-syntax#property-binding\">property binding</a>\nis preferable to setting the attribute with a string. However, sometimes\nthere is no element property to bind, so attribute binding is the solution.</p>\n\n<p translation-result=\"on\">考虑 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>。它们都纯粹是 Attribute，不对应于元素的 Property，也不能设置元素的 Property。\n在这些情况下，就没有要绑定到的目标 Property。</p><p translation-origin=\"off\">Consider the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</p>\n\n<p translation-result=\"on\">Attribute 绑定的语法类似于 Property 绑定，但其括号之间不是元素的 Property，而是由前缀 <code>attr</code>、点（ <code>.</code> ）和 Attribute 名称组成。然后，你就可以使用能解析为字符串的表达式来设置该 Attribute 的值，或者当表达式解析为 <code>null</code> 时删除该 Attribute。</p><p translation-origin=\"off\">Attribute binding syntax resembles property binding, but\ninstead of an element property between brackets, start with the prefix <code>attr</code>,\nfollowed by a dot (<code>.</code>), and the name of the attribute.\nYou then set the attribute value, using an expression that resolves to a string,\nor remove the attribute when the expression resolves to <code>null</code>.</p>\n\n<p translation-result=\"on\">attribute 绑定的主要用例之一是设置 ARIA attribute（译注：ARIA 指无障碍功能，用于给残障人士访问互联网提供便利），\n就像这个例子中一样：</p><p translation-origin=\"off\">One of the primary use cases for attribute binding\nis to set ARIA attributes, as in this example:</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"attrib-binding-aria\" header=\"src/app/app.component.html\">\n&#x3C;!-- create and set an aria attribute for assistive technology -->\n&#x3C;button [attr.aria-label]=\"actionName\">{{actionName}} with Aria&#x3C;/button>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<h4 id=\"colspan-and-colspan\" translation-result=\"on\"><code>colspan</code> 和 <code>colSpan</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#colspan-and-colspan\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"colspan-and-colspan\"><code>colspan</code> and <code>colSpan</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#colspan-and-colspan\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">注意 <code>colspan</code> Attribute 和 <code>colSpan</code> Property 之间的区别。</p><p translation-origin=\"off\">Notice the difference between the <code>colspan</code> attribute and the <code>colSpan</code> property.</p>\n\n<p translation-result=\"on\">如果你这样写：</p><p translation-origin=\"off\">If you wrote something like this:</p>\n\n<code-example language=\"html\">\n  &#x3C;tr>&#x3C;td colspan=\"{{1 + 1}}\">Three-Four&#x3C;/td>&#x3C;/tr>\n</code-example>\n<p translation-result=\"on\">你会收到如下错误：</p><p translation-origin=\"off\">You'd get this error:</p>\n\n<code-example language=\"bash\">\n  Template parse errors:\n  Can't bind to 'colspan' since it isn't a known native property\n</code-example>\n<p translation-result=\"on\">如错误消息所示，<code>&#x3C;td></code> 元素没有 <code>colspan</code> 这个 Property。这是正确的，因为 <code>colspan</code> 是一个 Attribute，而 <code>colSpan</code> （<code>colSpan</code> 中的 <code>S</code> 是大写）则是相应的 Property。插值和 Property 绑定只能设置 <em>Property</em>，不能设置 Attribute。</p><p translation-origin=\"off\">As the message says, the <code>&#x3C;td></code> element does not have a <code>colspan</code> property. This is true\nbecause <code>colspan</code> is an attribute—<code>colSpan</code>, with a capital <code>S</code>, is the\ncorresponding property. Interpolation and property binding can set only <em>properties</em>, not attributes.</p>\n\n<p translation-result=\"on\">相反，你可以使用 Property 绑定并将其改写为：</p><p translation-origin=\"off\">Instead, you'd use property binding and write it like this:</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- Notice the colSpan property is camel case -->\n&#x3C;tr>&#x3C;td [colSpan]=\"1 + 1\">Three-Four&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n</div>\n<hr>\n<h3 id=\"class-binding\" translation-result=\"on\">类绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#class-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"class-binding\">Class binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#class-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下面是在普通 HTML 中不用绑定来设置 <code>class</code> Attribute 的方法：</p><p translation-origin=\"off\">Here's how to set the <code>class</code> attribute without a binding in plain HTML:</p>\n\n<code-example language=\"html\">\n&#x3C;!-- standard class attribute setting -->\n\n&#x3C;div class=\"foo bar\">Some text&#x3C;/div>\n</code-example>\n<p translation-result=\"on\">你还可以使用<strong>类绑定</strong>来为一个元素添加和移除 CSS 类。</p><p translation-origin=\"off\">You can also add and remove CSS class names from an element's <code>class</code> attribute with a <strong>class binding</strong>.</p>\n\n<p translation-result=\"on\">要创建单个类的绑定，请使用 <code>class</code> 前缀，紧跟一个点（<code>.</code>），再跟上 CSS 类名，比如 <code>[class.foo]=\"hasFoo\"</code>。\n当绑定表达式为真值的时候，Angular 就会加上这个类，为假值则会移除，但 <code>undefined</code> 是假值中的例外，参见<a href=\"guide/template-syntax#styling-delegation\">样式委派</a> 部分。</p><p translation-origin=\"off\">To create a single class binding, start with the prefix <code>class</code> followed by a dot (<code>.</code>) and the name of the CSS class (for example, <code>[class.foo]=\"hasFoo\"</code>).\nAngular adds the class when the bound expression is truthy, and it removes the class when the expression is falsy (with the exception of <code>undefined</code>, see <a href=\"guide/template-syntax#styling-delegation\">styling delegation</a>).</p>\n\n<p translation-result=\"on\">要想创建多个类的绑定，请使用通用的 <code>[class]</code> 形式来绑定类，而不要带点，比如 <code>[class]=\"classExpr\"</code>。\n该表达式可以是空格分隔的类名字符串，或者用一个以类名为键、真假值表达式为值的对象。\n当使用对象格式时，Angular 只会加上那些相关的值为真的类名。</p><p translation-origin=\"off\">To create a binding to multiple classes, use a generic <code>[class]</code> binding without the dot (for example, <code>[class]=\"classExpr\"</code>).\nThe expression can be a space-delimited string of class names, or you can format it as an object with class names as the keys and truthy/falsy expressions as the values.\nWith object format, Angular will add a class only if its associated value is truthy. </p>\n\n<p translation-result=\"on\">一定要注意，在对象型表达式中（如 <code>object</code>、<code>Array</code>、<code>Map</code>、<code>Set</code> 等），当这个类列表改变时，对象的引用也必须修改。仅仅修改其属性而不修改对象引用是无法生效的。</p><p translation-origin=\"off\">It's important to note that with any object-like expression (<code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, etc), the identity of the object must change for the class list to be updated.\nUpdating the property without changing object identity will have no effect.</p>\n\n<p translation-result=\"on\">如果有多处绑定到了同一个类名，出现的冲突将根据<a href=\"guide/template-syntax#styling-precedence\">样式的优先级规则</a>进行解决。</p><p translation-origin=\"off\">If there are multiple bindings to the same class name, conflicts are resolved using <a href=\"guide/template-syntax#styling-precedence\">styling precedence</a>.</p>\n\n <style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <th><p translation-result=\"on\">\n      绑定类型\n    </p><p translation-origin=\"off\">\n      Binding Type\n    </p></th>\n    <th><p translation-result=\"on\">\n      语法\n    </p><p translation-origin=\"off\">\n      Syntax\n    </p></th>\n    <th><p translation-result=\"on\">\n      输入类型\n    </p><p translation-origin=\"off\">\n      Input Type\n    </p></th>\n    <th><p translation-result=\"on\">\n      输入值范例\n    </p><p translation-origin=\"off\">\n      Example Input Values\n    </p></th>\n  </tr>\n  \n  <tr>\n    <td><p translation-result=\"on\">单个类绑定</p><p translation-origin=\"off\">Single class binding</p></td>\n    <td><code>[class.foo]=\"hasFoo\"</code></td>\n    <td><code>boolean | undefined | null</code></td>\n    <td><code>true</code>, <code>false</code></td>\n  </tr>\n  \n  <tr>\n    <td rowspan=\"3\"><p translation-result=\"on\">多个类绑定</p><p translation-origin=\"off\">Multi-class binding</p></td>\n    <td rowspan=\"3\"><code>[class]=\"classExpr\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"my-class-1 my-class-2 my-class-3\"</code></td>\n  </tr>\n  \n  <tr>\n    <td><code>{[key: string]: boolean | undefined | null}</code></td>\n    <td><code>{foo: true, bar: false}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['foo', 'bar']</code></td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\">尽管此技术适用于切换单个类名，但在需要同时管理多个类名时请考虑使用 <a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a> 指令。</p><p translation-origin=\"off\">The <a href=\"guide/template-syntax#ngclass\">NgClass</a> directive can be used as an alternative to direct <code>[class]</code> bindings.\nHowever, using the above class binding syntax without <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> is preferred because due to improvements in class binding in Angular, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> no longer provides significant value, and might eventually be removed in the future.</p>\n\n<hr>\n<h3 id=\"style-binding\" translation-result=\"on\">样式绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#style-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"style-binding\">Style binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#style-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下面演示了如何不通过绑定在普通 HTML 中设置 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 属性：</p><p translation-origin=\"off\">Here's how to set the <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> attribute without a binding in plain HTML:</p>\n\n<code-example language=\"html\">\n&#x3C;!-- standard <a href=\"api/animations/style\" class=\"code-anchor\">style</a> attribute setting -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\">Some text&#x3C;/div>\n</code-example>\n<p translation-result=\"on\">你还可以通过<strong>样式绑定</strong>来动态设置样式。</p><p translation-origin=\"off\">You can also set styles dynamically with a <strong>style binding</strong>.</p>\n\n<p translation-result=\"on\">要想创建单个样式的绑定，请以 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 前缀开头，紧跟一个点（<code>.</code>），再跟着 CSS 样式的属性名，比如 <code>[style.width]=\"width\"</code>。\n该属性将会被设置为绑定表达式的值，该值通常为字符串。\n不过你还可以添加一个单位表达式，比如 <code>em</code> 或 <code>%</code>，这时候该值就要是一个 <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code> 类型。</p><p translation-origin=\"off\">To create a single style binding, start with the prefix <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> followed by a dot (<code>.</code>) and the name of the CSS style property (for example, <code>[style.width]=\"width\"</code>).\nThe property will be set to the value of the bound expression, which is normally a string.\nOptionally, you can add a unit extension like <code>em</code> or <code>%</code>, which requires a number type.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">注意，<em>样式属性</em>命名方法可以用<a href=\"guide/glossary#dash-case\">中线命名法</a>，像上面的一样\n也可以用<a href=\"guide/glossary#camelcase\">驼峰式命名法</a>，如 <code>fontSize</code>。</p><p translation-origin=\"off\">Note that a <em>style property</em> name can be written in either\n<a href=\"guide/glossary#dash-case\">dash-case</a>, as shown above, or\n<a href=\"guide/glossary#camelcase\">camelCase</a>, such as <code>fontSize</code>.</p>\n\n</div>\n<p translation-result=\"on\">如果要切换多个样式，你可以直接绑定到 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 属性而不用点（比如，<code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code>）。赋给 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 的绑定表达式通常是一系列样式组成的字符串，比如 <code>\"width: 100px; height: 100px;\"</code>。</p><p translation-origin=\"off\">If there are multiple styles you'd like to toggle, you can bind to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> property directly without the dot (for example, <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code>).\nThe expression attached to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding is most often a string list of styles like <code>\"width: 100px; height: 100px;\"</code>. </p>\n\n<p translation-result=\"on\">你也可以把该表达式格式化成一个以样式名为键、以样式值为值的对象，比如 <code>{width: '100px', height: '100px'}</code>。一定要注意，对于任何对象型的表达式（ 如 <code>object</code>，<code>Array</code>，<code>Map</code>，<code>Set</code> 等），当这个样式列表改变时，对象的引用也必须修改。仅仅修改其属性而不修改对象引用是无法生效的。。</p><p translation-origin=\"off\">You can also format the expression as an object with style names as the keys and style values as the values, like <code>{width: '100px', height: '100px'}</code>.\nIt's important to note that with any object-like expression (<code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, etc), the identity of the object must change for the class list to be updated.\nUpdating the property without changing object identity will have no effect.</p>\n\n<p translation-result=\"on\">如果有多处绑定了同一个样式属性，则会使用<a href=\"guide/template-syntax#styling-precedence\">样式的优先级规则</a>来解决冲突。</p><p translation-origin=\"off\">If there are multiple bindings to the same style property, conflicts are resolved using <a href=\"guide/template-syntax#styling-precedence\">styling precedence rules</a>.</p>\n\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <th><p translation-result=\"on\">\n      绑定类型\n    </p><p translation-origin=\"off\">\n      Binding Type\n    </p></th>\n    <th><p translation-result=\"on\">\n      语法\n    </p><p translation-origin=\"off\">\n      Syntax\n    </p></th>\n    <th><p translation-result=\"on\">\n      输入类型\n    </p><p translation-origin=\"off\">\n      Input Type\n    </p></th>\n    <th><p translation-result=\"on\">\n      输入值范例\n    </p><p translation-origin=\"off\">\n      Example Input Values\n    </p></th>\n  </tr>\n  \n  <tr>\n    <td><p translation-result=\"on\">单一样式绑定</p><p translation-origin=\"off\">Single style binding</p></td>\n    <td><code>[style.width]=\"width\"</code></td>\n    <td><code>string | undefined | null</code></td>\n    <td><code>\"100px\"</code></td>\n  </tr>\n  \n  <tr>\n  </tr><tr>\n    <td><p translation-result=\"on\">带单位的单一样式绑定</p><p translation-origin=\"off\">Single style binding with units</p></td>\n    <td><code>[style.width.px]=\"width\"</code></td>\n    <td><code>number | undefined | null</code></td>\n    <td><code>100</code></td>\n  </tr>\n  \n    <tr>\n    <td rowspan=\"3\"><p translation-result=\"on\">多个样式绑定</p><p translation-origin=\"off\">Multi-style binding</p></td>\n    <td rowspan=\"3\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"width: 100px; height: 100px\"</code></td>\n  </tr>\n    \n  <tr>\n    <td><code>{[key: string]: string | undefined | null}</code></td>\n    <td><code>{width: '100px', height: '100px'}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['width', '100px']</code></td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngstyle\">NgStyle</a> 指令可以作为 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 绑定的替代指令。但是，应该把上面这种 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 样式绑定语法作为首选，因为随着 Angular 中样式绑定的改进，<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 将不再提供重要的价值，并最终在未来的某个版本中删除。</p><p translation-origin=\"off\">The <a href=\"guide/template-syntax#ngstyle\">NgStyle</a> directive can be used as an alternative to direct <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> bindings.\nHowever, using the above style binding syntax without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> is preferred because due to improvements in style binding in Angular, <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> no longer provides significant value, and might eventually be removed in the future.</p>\n\n<hr>\n<a id=\"styling-precedence\"></a>\n<h3 id=\"styling-precedence\" translation-result=\"on\">样式的优先级规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#styling-precedence\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"styling-precedence\">Styling Precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#styling-precedence\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">一个 HTML 元素可以把它的 CSS 类列表和样式值绑定到多个来源（例如，来自多个指令的宿主 <code>host</code> 绑定）。</p><p translation-origin=\"off\">A single HTML element can have its CSS class list and style values bound to multiple sources (for example, host bindings from multiple directives).</p>\n\n<p translation-result=\"on\">当对同一个类名或样式属性存在多个绑定时，Angular 会使用一组优先级规则来解决冲突，并确定最终哪些类或样式会应用到该元素中。</p><p translation-origin=\"off\">When there are multiple bindings to the same class name or style property, Angular uses a set of precedence rules to resolve conflicts and determine which classes or styles are ultimately applied to the element.</p>\n\n<div class=\"alert is-helpful\">\n<h4 id=\"styling-precedence-highest-to-lowest\" translation-result=\"on\">样式的优先级规则（从高到低）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#styling-precedence-highest-to-lowest\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"styling-precedence-highest-to-lowest\">Styling precedence (highest to lowest)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#styling-precedence-highest-to-lowest\"><i class=\"material-icons\">link</i></a></h4>\n\n<ol>\n<li>\n<p translation-result=\"on\">模板绑定</p><p translation-origin=\"off\">Template bindings</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   属性绑定（例如 <code>&#x3C;div [class.foo]=\"hasFoo\"></code> 或 <code>&#x3C;div [style.color]=\"color\"></code>）</p><p translation-origin=\"off\">Property binding (for example, <code>&#x3C;div [class.foo]=\"hasFoo\"></code> or <code>&#x3C;div [style.color]=\"color\"></code>)</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">Map 绑定（例如，<code>&#x3C;div [class]=\"classExpr\"></code> 或 <code>&#x3C;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"></code> ）</p><p translation-origin=\"off\">Map binding (for example, <code>&#x3C;div [class]=\"classExpr\"></code> or <code>&#x3C;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"></code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">静态值（例如 <code>&#x3C;div class=\"foo\"></code> 或 <code>&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"></code> ）</p><p translation-origin=\"off\">Static value (for example, <code>&#x3C;div class=\"foo\"></code> or <code>&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"></code>) </p>\n\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">指令宿主绑定</p><p translation-origin=\"off\">Directive host bindings</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   属性绑定（例如，<code>host: {'[class.foo]': 'hasFoo'}</code> 或 <code>host: {'[style.color]': 'color'}</code> ）</p><p translation-origin=\"off\">Property binding (for example, <code>host: {'[class.foo]': 'hasFoo'}</code> or <code>host: {'[style.color]': 'color'}</code>)</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">Map 绑定（例如，<code>host: {'[class]': 'classExpr'}</code> 或者 <code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code> ）</p><p translation-origin=\"off\">Map binding (for example, <code>host: {'[class]': 'classExpr'}</code> or <code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">静态值（例如，<code>host: {'class': 'foo'}</code> 或 <code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code> ）</p><p translation-origin=\"off\">Static value (for example, <code>host: {'class': 'foo'}</code> or <code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code>)    </p>\n\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">组件宿主绑定</p><p translation-origin=\"off\">Component host bindings</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   属性绑定（例如，<code>host: {'[class.foo]': 'hasFoo'}</code> 或 <code>host: {'[style.color]': 'color'}</code> ）</p><p translation-origin=\"off\">Property binding (for example, <code>host: {'[class.foo]': 'hasFoo'}</code> or <code>host: {'[style.color]': 'color'}</code>)</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">Map 绑定（例如，<code>host: {'[class]': 'classExpr'}</code> 或者 <code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code> ）</p><p translation-origin=\"off\">Map binding (for example, <code>host: {'[class]': 'classExpr'}</code> or <code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">静态值（例如，<code>host: {'class': 'foo'}</code> 或 <code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code> ）</p><p translation-origin=\"off\">Static value (for example, <code>host: {'class': 'foo'}</code> or <code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code>)    </p>\n\n</li>\n</ol>\n</li>\n</ol>\n</div>\n<p translation-result=\"on\">某个类或样式绑定越具体，它的优先级就越高。</p><p translation-origin=\"off\">The more specific a class or style binding is, the higher its precedence.</p>\n\n<p translation-result=\"on\">对具体类（例如 <code>[class.foo]</code> ）的绑定优先于一般化的 <code>[class]</code> 绑定，对具体样式（例如 <code>[style.bar]</code> ）的绑定优先于一般化的 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 绑定。</p><p translation-origin=\"off\">A binding to a specific class (for example, <code>[class.foo]</code>) will take precedence over a generic <code>[class]</code> binding, and a binding to a specific style (for example, <code>[style.bar]</code>) will take precedence over a generic <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding.</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"basic-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>Basic specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` binding will override any value for the `special` class in `classExpr`.  -->\n&#x3C;div [class.special]=\"isSpecial\" [class]=\"classExpr\">Some text.&#x3C;/div>\n\n&#x3C;!-- The `style.color` binding will override any value for the `color` property in `styleExpr`.  -->\n&#x3C;div [style.color]=\"color\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\">Some text.&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">当处理不同来源的绑定时，也适用这种基于具体度的规则。\n某个元素可能在声明它的模板中有一些绑定、在所匹配的指令中有一些宿主绑定、在所匹配的组件中有一些宿主绑定。</p><p translation-origin=\"off\">Specificity rules also apply when it comes to bindings that originate from different sources.\nIt's possible for an element to have bindings in the template where it's declared, from host bindings on matched directives, and from host bindings on matched components.</p>\n\n<p translation-result=\"on\">模板中的绑定是最具体的，因为它们直接并且唯一地应用于该元素，所以它们具有最高的优先级。</p><p translation-origin=\"off\">Template bindings are the most specific because they apply to the element directly and exclusively, so they have the highest precedence.</p>\n\n<p translation-result=\"on\">指令的宿主绑定被认为不太具体，因为指令可以在多个位置使用，所以它们的优先级低于模板绑定。</p><p translation-origin=\"off\">Directive host bindings are considered less specific because directives can be used in multiple locations, so they have a lower precedence than template bindings.</p>\n\n<p translation-result=\"on\">指令经常会增强组件的行为，所以组件的宿主绑定优先级最低。</p><p translation-origin=\"off\">Directives often augment component behavior, so host bindings from components have the lowest precedence. </p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"source-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>Source specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` template binding will override any host binding to the `special` class set by `dirWithClassBinding` or `comp-with-host-binding`.-->\n&#x3C;comp-with-host-binding [class.special]=\"isSpecial\" dirWithClassBinding>Some text.&#x3C;/comp-with-host-binding>\n\n&#x3C;!-- The `style.color` template binding will override any host binding to the `color` property set by `dirWithStyleBinding` or `comp-with-host-binding`. -->\n&#x3C;comp-with-host-binding [style.color]=\"color\" dirWithStyleBinding>Some text.&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p translation-result=\"on\">另外，绑定总是优先于静态属性。</p><p translation-origin=\"off\">In addition, bindings take precedence over static attributes. </p>\n\n<p translation-result=\"on\">在下面的例子中，<code>class</code> 和 <code>[class]</code> 具有相似的具体度，但 <code>[class]</code> 绑定优先，因为它是动态的。</p><p translation-origin=\"off\">In the following case, <code>class</code> and <code>[class]</code> have similar specificity, but the <code>[class]</code> binding will take precedence because it is dynamic.</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"dynamic-priority\" header=\"src/app/app.component.html\">\n&#x3C;h3>Dynamic vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&#x3C;/h3>\n\n&#x3C;!-- If `classExpr` has a value for the `special` class, this value will override the `class=\"special\"` below -->\n&#x3C;div class=\"special\" [class]=\"classExpr\">Some text.&#x3C;/div>\n\n&#x3C;!-- If `styleExpr` has a value for the `color` property, this value will override the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"` below -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\">Some text.&#x3C;/div>\n\n\n</code-example>\n<a id=\"styling-delegation\"></a>\n<h3 id=\"delegating-to-styles-with-lower-precedence\" translation-result=\"on\">委托优先级较低的样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"delegating-to-styles-with-lower-precedence\">Delegating to styles with lower precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">更高优先级的样式可以使用 <code>undefined</code> 值“委托”给低级的优先级样式。虽然把 style 属性设置为 <code>null</code> 可以确保该样式被移除，但把它设置为 <code>undefined</code> 会导致 Angular 回退到该样式的次高优先级。</p><p translation-origin=\"off\">It is possible for higher precedence styles to \"delegate\" to lower precedence styles using <code>undefined</code> values.\nWhereas setting a style property to <code>null</code> ensures the style is removed, setting it to <code>undefined</code> will cause Angular to fall back to the next-highest precedence binding to that style.</p>\n\n<p translation-result=\"on\">例如，考虑以下模板：</p><p translation-origin=\"off\">For example, consider the following template: </p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"style-delegation\" header=\"src/app/app.component.html\">\n&#x3C;comp-with-host-binding dirWithHostBinding>&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p translation-result=\"on\">想象一下，<code>dirWithHostBinding</code> 指令和 <code>comp-with-host-binding</code> 组件都有 <code>[style.width]</code> 宿主绑定。在这种情况下，如果 <code>dirWithHostBinding</code> 把它的绑定设置为 <code>undefined</code>，则 <code>width</code> 属性将回退到 <code>comp-with-host-binding</code> 主机绑定的值。但是，如果 <code>dirWithHostBinding</code> 把它的绑定设置为 <code>null</code>，那么 <code>width</code> 属性就会被完全删除。</p><p translation-origin=\"off\">Imagine that the <code>dirWithHostBinding</code> directive and the <code>comp-with-host-binding</code> component both have a <code>[style.width]</code> host binding.\nIn that case, if <code>dirWithHostBinding</code> sets its binding to <code>undefined</code>, the <code>width</code> property will fall back to the value of the <code>comp-with-host-binding</code> host binding.\nHowever, if <code>dirWithHostBinding</code> sets its binding to <code>null</code>, the <code>width</code> property will be removed entirely.</p>\n\n<a id=\"event-binding\"></a>\n<h2 id=\"event-binding-event\" translation-result=\"on\">事件绑定 <code>(event)</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-binding-event\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"event-binding-event\">Event binding <code>(event)</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-binding-event\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">事件绑定允许你监听某些事件，比如按键、鼠标移动、点击和触屏。要查看本节中所有要点的演示，请参见<live-example name=\"event-binding\">事件绑定范例</live-example>。</p><p translation-origin=\"off\">Event binding allows you to listen for certain events such as\nkeystrokes, mouse movements, clicks, and touches. For an example\ndemonstrating all of the points in this section, see the <live-example name=\"event-binding\">event binding example</live-example>.</p>\n\n<p translation-result=\"on\">Angular 的事件绑定语法由等号左侧带圆括号的<strong>目标事件</strong>和右侧引号中的<a href=\"guide/template-syntax#template-statements\">模板语句</a>组成。\n下面事件绑定监听按钮的点击事件。每当点击发生时，都会调用组件的 <code>onSave()</code> 方法。</p><p translation-origin=\"off\">Angular event binding syntax consists of a <strong>target event</strong> name\nwithin parentheses on the left of an equal sign, and a quoted\ntemplate statement on the right.\nThe following event binding listens for the button's click events, calling\nthe component's <code>onSave()</code> method whenever a click occurs:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/template-syntax/syntax-diagram.svg\" alt=\"Syntax diagram\" width=\"600\" height=\"125\">\n</div>\n<h3 id=\"target-event\" translation-result=\"on\">目标事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#target-event\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"target-event\">Target event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#target-event\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如前所述，其目标就是此按钮的单击事件。</p><p translation-origin=\"off\">As above, the target is the button's click event.</p>\n\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-1\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">有些人更喜欢带 <code>on-</code> 前缀的备选形式，称之为<strong>规范形式</strong>：</p><p translation-origin=\"off\">Alternatively, use the <code>on-</code> prefix, known as the canonical form:</p>\n\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-2\" header=\"src/app/app.component.html\">\n&#x3C;button on-click=\"onSave($event)\">on-click Save&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">元素事件可能是更常见的目标，但 Angular 会先看这个名字是否能匹配上已知指令的事件属性，就像下面这个例子：</p><p translation-origin=\"off\">Element events may be the more common targets, but Angular looks first to see if the name matches an event property\nof a known directive, as it does in the following example:</p>\n\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"custom-directive\" header=\"src/app/app.component.html\">\n&#x3C;h4>myClick is an event on the custom ClickDirective:&#x3C;/h4>\n&#x3C;button (myClick)=\"clickMessage=$event\" clickable>click with myClick&#x3C;/button>\n{{clickMessage}}\n\n</code-example>\n<p translation-result=\"on\">如果这个名字没能匹配到元素事件或已知指令的输出属性，Angular 就会报“未知指令”错误。</p><p translation-origin=\"off\">If the name fails to match an element event or an output property of a known directive,\nAngular reports an “unknown directive” error.</p>\n\n<h3 id=\"event-and-event-handling-statements\" translation-result=\"on\"><em>$event</em> 和事件处理语句<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-and-event-handling-statements\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"event-and-event-handling-statements\"><em>$event</em> and event handling statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-and-event-handling-statements\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在事件绑定中，Angular 会为目标事件设置事件处理器。</p><p translation-origin=\"off\">In an event binding, Angular sets up an event handler for the target event.</p>\n\n<p translation-result=\"on\">当事件发生时，这个处理器会执行模板语句。\n典型的模板语句通常涉及到响应事件执行动作的接收器，例如从 HTML 控件中取得值，并存入模型。</p><p translation-origin=\"off\">When the event is raised, the handler executes the template statement.\nThe template statement typically involves a receiver, which performs an action\nin response to the event, such as storing a value from the HTML control\ninto a model.</p>\n\n<p translation-result=\"on\">绑定会通过<strong>名叫 <code>$event</code> 的事件对象</strong>传递关于此事件的信息（包括数据值）。</p><p translation-origin=\"off\">The binding conveys information about the event. This information can include data values such as an event object, string, or number named <code>$event</code>.</p>\n\n<p translation-result=\"on\">事件对象的形态取决于目标事件。如果目标事件是原生 DOM 元素事件，\n<code>$event</code> 就是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM 事件对象</a>，它有像 <code>target</code> 和 <code>target.value</code> 这样的属性。</p><p translation-origin=\"off\">The target event determines the shape of the <code>$event</code> object.\nIf the target event is a native DOM element event, then <code>$event</code> is a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM event object</a>,\nwith properties such as <code>target</code> and <code>target.value</code>.</p>\n\n<p translation-result=\"on\">考虑这个范例：</p><p translation-origin=\"off\">Consider this example:</p>\n\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\" header=\"src/app/app.component.html\">\n&#x3C;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=$event.target.value\" >\nwithout <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>\n\n</code-example>\n<p translation-result=\"on\">上面的代码在把输入框的 <code>value</code> 属性绑定到 <code>name</code> 属性。\n要监听对值的修改，代码绑定到输入框的 <code>input</code> 事件。\n当用户造成更改时，<code>input</code> 事件被触发，并在包含了 DOM 事件对象 (<code>$event</code>) 的上下文中执行这条语句。</p><p translation-origin=\"off\">This code sets the <code>&#x3C;input></code> <code>value</code> property by binding to the <code>name</code> property.\nTo listen for changes to the value, the code binds to the <code>input</code>\nevent of the <code>&#x3C;input></code> element.\nWhen the user makes changes, the <code>input</code> event is raised, and the binding executes\nthe statement within a context that includes the DOM event object, <code>$event</code>.</p>\n\n<p translation-result=\"on\">要更新 <code>name</code> 属性，就要通过路径 <code>$event.target.value</code> 来获取更改后的值。</p><p translation-origin=\"off\">To update the <code>name</code> property, the changed text is retrieved by following the path <code>$event.target.value</code>.</p>\n\n<p translation-result=\"on\">如果事件属于指令（回想一下，组件是指令的一种），那么 <code>$event</code> 具体是什么由指令决定。</p><p translation-origin=\"off\">If the event belongs to a directive—recall that components\nare directives—<code>$event</code> has whatever shape the directive produces.</p>\n\n<h3 id=\"custom-events-with-eventemitter\" translation-result=\"on\">使用 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 实现自定义事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#custom-events-with-eventemitter\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"custom-events-with-eventemitter\">Custom events with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#custom-events-with-eventemitter\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">通常，指令使用 Angular <a href=\"api/core/EventEmitter\">EventEmitter</a> 来触发自定义事件。\n指令创建一个 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 实例，并且把它作为属性暴露出来。\n指令调用 <code>EventEmitter.emit(payload)</code> 来触发事件，可以传入任何东西作为消息载荷。\n父指令通过绑定到这个属性来监听事件，并通过 <code>$event</code> 对象来访问载荷。</p><p translation-origin=\"off\">Directives typically raise custom events with an Angular <a href=\"api/core/EventEmitter\">EventEmitter</a>.\nThe directive creates an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> and exposes it as a property.\nThe directive calls <code>EventEmitter.emit(payload)</code> to fire an event, passing in a message payload, which can be anything.\nParent directives listen for the event by binding to this property and accessing the payload through the <code>$event</code> object.</p>\n\n<p translation-result=\"on\">假设 <code>ItemDetailComponent</code> 用于显示英雄的信息，并响应用户的动作。\n虽然 <code>ItemDetailComponent</code> 包含删除按钮，但它自己并不知道该如何删除这个英雄。\n最好的做法是触发事件来报告“删除用户”的请求。</p><p translation-origin=\"off\">Consider an <code>ItemDetailComponent</code> that presents item information and responds to user actions.\nAlthough the <code>ItemDetailComponent</code> has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.</p>\n\n<p translation-result=\"on\">下面的代码节选自 <code>ItemDetailComponent</code>：</p><p translation-origin=\"off\">Here are the pertinent excerpts from that <code>ItemDetailComponent</code>:</p>\n\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.html\" header=\"src/app/item-detail/item-detail.component.html (template)\" region=\"line-through\">\n&#x3C;img src=\"{{itemImageUrl}}\" [style.display]=\"displayNone\">\n&#x3C;span [style.text-decoration]=\"lineThrough\">{{ item.name }}\n&#x3C;/span>\n&#x3C;button (click)=\"delete()\">Delete&#x3C;/button>\n\n</code-example>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.ts\" header=\"src/app/item-detail/item-detail.component.ts (deleteRequest)\" region=\"deleteRequest\">\n// This component makes a request but it can't actually delete a hero.\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Item>();\n\ndelete() {\n  this.deleteRequest.emit(this.item);\n  this.displayNone = this.displayNone ? '' : 'none';\n  this.lineThrough = this.lineThrough ? '' : 'line-through';\n}\n\n</code-example>\n<p translation-result=\"on\">组件定义了 <code>deleteRequest</code> 属性，它是 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 实例。\n当用户点击<em>删除</em>时，组件会调用 <code>delete()</code> 方法，让 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 发出一个 <code>Item</code> 对象。</p><p translation-origin=\"off\">The component defines a <code>deleteRequest</code> property that returns an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.\nWhen the user clicks <em>delete</em>, the component invokes the <code>delete()</code> method,\ntelling the <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> to emit an <code>Item</code> object.</p>\n\n<p translation-result=\"on\">现在，假设有个宿主的父组件，它绑定了 <code>ItemDetailComponent</code> 的 <code>deleteRequest</code> 事件。</p><p translation-origin=\"off\">Now imagine a hosting parent component that binds to the <code>deleteRequest</code> event\nof the <code>ItemDetailComponent</code>.</p>\n\n<code-example path=\"event-binding/src/app/app.component.html\" header=\"src/app/app.component.html (event-binding-to-component)\" region=\"event-binding-to-component\">\n&#x3C;app-item-detail (deleteRequest)=\"deleteItem($event)\" [item]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">当 <code>deleteRequest</code> 事件触发时，Angular 调用父组件的 <code>deleteItem</code> 方法，\n在 <code>$event</code> 变量中传入<em>要删除的英雄</em>（来自 <code>ItemDetail</code>）。</p><p translation-origin=\"off\">When the <code>deleteRequest</code> event fires, Angular calls the parent component's\n<code>deleteItem()</code> method, passing the <em>item-to-delete</em> (emitted by <code>ItemDetail</code>)\nin the <code>$event</code> variable.</p>\n\n<h3 id=\"template-statements-have-side-effects\" translation-result=\"on\">模板语句有副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements-have-side-effects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"template-statements-have-side-effects\">Template statements have side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements-have-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">虽然<a href=\"guide/template-syntax#template-expressions\">模板表达式</a>不应该有<a href=\"guide/template-syntax#avoid-side-effects\">副作用</a>，但是模板语句通常会有。这里的 <code>deleteItem()</code> 方法就有一个副作用：它删除了一个条目。</p><p translation-origin=\"off\">Though <a href=\"guide/template-syntax#template-expressions\">template expressions</a> shouldn't have <a href=\"guide/template-syntax#avoid-side-effects\">side effects</a>, template\nstatements usually do. The <code>deleteItem()</code> method does have\na side effect: it deletes an item.</p>\n\n<p translation-result=\"on\">删除这个英雄会更新模型，还可能触发其它修改，包括向远端服务器的查询和保存。\n这些变更通过系统进行扩散，并最终显示到当前以及其它视图中。</p><p translation-origin=\"off\">Deleting an item updates the model, and depending on your code, triggers\nother changes including queries and saving to a remote server.\nThese changes propagate through the system and ultimately display in this and other views.</p>\n\n<hr>\n<a id=\"two-way\"></a>\n<h2 id=\"two-way-binding-\" translation-result=\"on\">双向绑定 <code>[(...)]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"two-way-binding-\">Two-way binding <code>[(...)]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">双向绑定为你的应用程序提供了一种在组件类及其模板之间共享数据的方式。</p><p translation-origin=\"off\">Two-way binding gives your app a way to share data between a component class and\nits template.</p>\n\n<p translation-result=\"on\">有关本节中语法和代码段的演示，请参见 <live-example name=\"two-way-binding\">双向绑定范例</live-example>。</p><p translation-origin=\"off\">For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"two-way-binding\">two-way binding example</live-example>.</p>\n\n<h3 id=\"basics-of-two-way-binding\" translation-result=\"on\">双向绑定的基础知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#basics-of-two-way-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"basics-of-two-way-binding\">Basics of two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#basics-of-two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">双向绑定会做两件事：</p><p translation-origin=\"off\">Two-way binding does two things:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">设置特定的元素属性。</p><p translation-origin=\"off\">Sets a specific element property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">监听元素的变更事件。</p><p translation-origin=\"off\">Listens for an element change event.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">Angular 为此提供了一种特殊<em>的双向数据绑定</em>语法 <code>[()]</code>。<code>[()]</code> 语法将属性绑定的括号 <code>[]</code> 与事件绑定的括号 <code>()</code> 组合在一起。</p><p translation-origin=\"off\">Angular offers a special <em>two-way data binding</em> syntax for this purpose, <code>[()]</code>.\nThe <code>[()]</code> syntax combines the brackets\nof property binding, <code>[]</code>, with the parentheses of event binding, <code>()</code>.</p>\n\n<div class=\"callout is-important\">\n<header translation-result=\"on\">[( )] = 盒子里的香蕉</header><header translation-origin=\"off\">\n  [( )] = banana in a box\n</header>\n\n<p translation-result=\"on\">想象<em>盒子里的香蕉</em>来记住方括号套圆括号。</p><p translation-origin=\"off\">Visualize a <em>banana in a box</em> to remember that the parentheses go <em>inside</em> the brackets.</p>\n\n</div>\n<p translation-result=\"on\"><code>[()]</code> 语法很容易想明白：该元素具有名为 <code>x</code> 的可设置属性和名为 <code>xChange</code> 的相应事件。\n<code>SizerComponent</code> 就是用的这种模式。它具有一个名为 <code>size</code> 的值属性和一个与之相伴的 <code>sizeChange</code> 事件：</p><p translation-origin=\"off\">The <code>[()]</code> syntax is easy to demonstrate when the element has a settable\nproperty called <code>x</code> and a corresponding event named <code>xChange</code>.\nHere's a <code>SizerComponent</code> that fits this pattern.\nIt has a <code>size</code> value property and a companion <code>sizeChange</code> event:</p>\n\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" header=\"src/app/sizer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sizer',\n  templateUrl: './sizer.component.html',\n  styleUrls: ['./sizer.component.css']\n})\nexport class SizerComponent {\n\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  size: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n\n}\n\n\n</code-example>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&#x3C;div>\n  &#x3C;button (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n  &#x3C;button (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n  &#x3C;label [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/label>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\"><code>size</code> 的初始值来自属性绑定的输入值。单击按钮可在最小值/最大值范围内增大或减小 <code>size</code>，然后带上调整后的大小发出 <code>sizeChange</code> 事件。</p><p translation-origin=\"off\">The initial <code>size</code> is an input value from a property binding.\nClicking the buttons increases or decreases the <code>size</code>, within\nmin/max value constraints,\nand then raises, or emits, the <code>sizeChange</code> event with the adjusted size.</p>\n\n<p translation-result=\"on\">下面的例子中，<code>AppComponent.fontSize</code> 被双向绑定到 <code>SizerComponent</code>：</p><p translation-origin=\"off\">Here's an example in which the <code>AppComponent.fontSizePx</code> is two-way bound to the <code>SizerComponent</code>:</p>\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-1)\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent.fontSizePx</code> 建立初始 <code>SizerComponent.size</code> 值。</p><p translation-origin=\"off\">The <code>AppComponent.fontSizePx</code> establishes the initial <code>SizerComponent.size</code> value.</p>\n\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p translation-result=\"on\">单击按钮就会通过双向绑定更新 <code>AppComponent.fontSizePx</code>。修改后的 <code>AppComponent.fontSizePx</code> 值将传递到<em>样式</em>绑定，从而使显示的文本更大或更小。</p><p translation-origin=\"off\">Clicking the buttons updates the <code>AppComponent.fontSizePx</code> via the two-way binding.\nThe revised <code>AppComponent.fontSizePx</code> value flows through to the <em>style</em> binding,\nmaking the displayed text bigger or smaller.</p>\n\n<p translation-result=\"on\">双向绑定语法实际上是<em>属性</em>绑定和<em>事件绑定</em>的语法糖。\nAngular 将 <code>SizerComponent</code> 的绑定分解成这样：</p><p translation-origin=\"off\">The two-way binding syntax is really just syntactic sugar for a <em>property</em> binding and an <em>event</em> binding.\nAngular desugars the <code>SizerComponent</code> binding into this:</p>\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-2)\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<p translation-result=\"on\"><code>$event</code> 变量包含了 <code>SizerComponent.sizeChange</code> 事件的荷载。\n当用户点击按钮时，Angular 将 <code>$event</code> 赋值给 <code>AppComponent.fontSizePx</code>。</p><p translation-origin=\"off\">The <code>$event</code> variable contains the payload of the <code>SizerComponent.sizeChange</code> event.\nAngular assigns the <code>$event</code> value to the <code>AppComponent.fontSizePx</code> when the user clicks the buttons.</p>\n\n<h3 id=\"two-way-binding-in-forms\" translation-result=\"on\">表单中的双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-in-forms\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"two-way-binding-in-forms\">Two-way binding in forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-in-forms\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">与单独的属性绑定和事件绑定相比，双向绑定语法非常方便。将双向绑定与 HTML 表单元素（例如 <code>&#x3C;input></code> 和 <code>&#x3C;select></code>）一起使用会很方便。但是，没有哪个原生 HTML 元素会遵循 <code>x</code> 值和 <code>xChange</code> 事件的命名模式。</p><p translation-origin=\"off\">The two-way binding syntax is a great convenience compared to\nseparate property and event bindings. It would be convenient to\nuse two-way binding with HTML form elements like <code>&#x3C;input></code> and\n<code>&#x3C;select></code>. However, no native HTML element follows the <code>x</code>\nvalue and <code>xChange</code> event pattern.</p>\n\n<p translation-result=\"on\">要了解如何在表单中使用双向绑定的更多信息，请参见 Angular <a href=\"guide/template-syntax#ngModel\">NgModel</a>。</p><p translation-origin=\"off\">For more on how to use two-way binding in forms, see\nAngular <a href=\"guide/template-syntax#ngModel\">NgModel</a>.</p>\n\n<hr>\n<a id=\"directives\"></a>\n<h2 id=\"built-in-directives\" translation-result=\"on\">内置指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"built-in-directives\">Built-in directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 提供了两种内置指令：属性型指令和结构型指令。本节会回顾一些最常见的内置指令，分为<a href=\"guide/template-syntax#attribute-directives\"><em>属性型</em>指令</a>或<a href=\"guide/template-syntax#structural-directives\"><em>结构型</em>指令，</a>并有相应的<live-example name=\"built-in-directives\">内置指令示例</live-example>。</p><p translation-origin=\"off\">Angular offers two kinds of built-in directives: attribute\ndirectives and structural directives. This segment reviews some of the most common built-in directives,\nclassified as either <a href=\"guide/template-syntax#attribute-directives\"><em>attribute</em> directives</a> or <a href=\"guide/template-syntax#structural-directives\"><em>structural</em> directives</a> and has its own <live-example name=\"built-in-directives\">built-in directives example</live-example>.</p>\n\n<p translation-result=\"on\">欲知详情，包括如何构建你自己的自定义指令，请参阅<a href=\"guide/attribute-directives\">属性型指令</a>和<a href=\"guide/structural-directives\">结构型指令</a>。</p><p translation-origin=\"off\">For more detail, including how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n<hr>\n<a id=\"attribute-directives\"></a>\n<h3 id=\"built-in-attribute-directives\" translation-result=\"on\">内置属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"built-in-attribute-directives\">Built-in attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">属性型指令会监听并修改其它 HTML 元素和组件的行为、Attribute 和 Property。\n它们通常被应用在元素上，就好像它们是 HTML 属性一样，因此得名属性型指令。</p><p translation-origin=\"off\">Attribute directives listen to and modify the behavior of\nother HTML elements, attributes, properties, and components.\nYou usually apply them to elements as if they were HTML attributes, hence the name.</p>\n\n<p translation-result=\"on\">许多 NgModule（例如 <a href=\"guide/router\" title=\"路由和导航\"><code>RouterModule</code></a> 和 <a href=\"guide/forms\" title=\"表单\"><code>FormsModule</code></a> 都定义了自己的属性型指令。最常见的属性型指令如下：</p><p translation-origin=\"off\">Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a> —— 添加和删除一组 CSS 类。</p><p translation-origin=\"off\"><a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a>—adds and removes a set of CSS classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a> —— 添加和删除一组 HTML 样式。</p><p translation-origin=\"off\"><a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a>—adds and removes a set of HTML styles.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngModel\"><code>NgModel</code></a> —— 将数据双向绑定添加到 HTML 表单元素。</p><p translation-origin=\"off\"><a href=\"guide/template-syntax#ngModel\"><code>NgModel</code></a>—adds two-way data binding to an HTML form element.</p>\n\n</li>\n</ul>\n<hr>\n<a id=\"ngClass\"></a>\n<h3 id=\"ngclass\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 同时添加或删除几个 CSS 类。</p><p translation-origin=\"off\">Add or remove several CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\" header=\"src/app/app.component.html\">\n&#x3C;!-- toggle the \"special\" class on/off with a property -->\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\">This div is special&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要添加或删除<em>单个</em>类，请使用<a href=\"guide/template-syntax#class-binding\">类绑定</a>而不是 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>。</p><p translation-origin=\"off\">To add or remove a <em>single</em> class, use <a href=\"guide/template-syntax#class-binding\">class binding</a> rather than <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>.</p>\n\n</div>\n<p translation-result=\"on\">考虑一个 <code>setCurrentClasses()</code> 组件方法，该方法设置一个组件属性 <code>currentClasses</code>，该对象具有一个根据其它三个组件属性的 <code>true</code> / <code>false</code> 状态来添加或删除三个 CSS 类的对象。该对象的每个键(key)都是一个 CSS 类名。如果要添加上该类，则其值为 <code>true</code>，反之则为 <code>false</code>。</p><p translation-origin=\"off\">Consider a <code>setCurrentClasses()</code> component method that sets a component property,\n<code>currentClasses</code>, with an object that adds or removes three classes based on the\n<code>true</code>/<code>false</code> state of three other component properties. Each key of the object is a CSS class name; its value is <code>true</code> if the class should be added,\n<code>false</code> if it should be removed.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\" header=\"src/app/app.component.ts\">\ncurrentClasses: {};\nsetCurrentClasses() {\n  // CSS classes: added/removed per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component properties\n  this.currentClasses =  {\n    'saveable': this.canSave,\n    'modified': !this.isUnchanged,\n    'special':  this.isSpecial\n  };\n}\n\n</code-example>\n<p translation-result=\"on\">把 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 属性绑定到 <code>currentClasses</code>，根据它来设置此元素的 CSS 类：</p><p translation-origin=\"off\">Adding an <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> property binding to <code>currentClasses</code> sets the element's classes accordingly:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\">This div is initially saveable, unchanged, and special.&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">请记住，在这种情况下，你要在初始化时和它依赖的属性发生变化时调用 <code>setCurrentClasses()</code>。</p><p translation-origin=\"off\">Remember that in this situation you'd call <code>setCurrentClasses()</code>,\nboth initially and when the dependent properties change.</p>\n\n</div>\n<hr>\n<a id=\"ngStyle\"></a>\n<h3 id=\"ngstyle\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 根据组件的状态同时动态设置多个内联样式。</p><p translation-origin=\"off\">Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set many inline styles simultaneously and dynamically, based on the state of the component.</p>\n\n<h4 id=\"without-ngstyle\" translation-result=\"on\">不用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#without-ngstyle\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"without-ngstyle\">Without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#without-ngstyle\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">有些情况下，要考虑使用<a href=\"guide/template-syntax#style-binding\">样式绑定</a>来设置<em>单个</em>样式值，而不使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>。</p><p translation-origin=\"off\">For context, consider setting a <em>single</em> style value with <a href=\"guide/template-syntax#style-binding\">style binding</a>, without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-ng-style\" header=\"src/app/app.component.html\">\n&#x3C;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">但是，如果要同时设置<em>多个</em>内联样式，请使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 指令。</p><p translation-origin=\"off\">However, to set <em>many</em> inline styles at the same time, use the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> directive.</p>\n\n<p translation-result=\"on\">下面的例子是一个 <code>setCurrentStyles()</code> 方法，它基于该组件另外三个属性的状态，用一个定义了三个样式的对象设置了 <code>currentStyles</code> 属性。</p><p translation-origin=\"off\">The following is a <code>setCurrentStyles()</code> method that sets a component\nproperty, <code>currentStyles</code>, with an object that defines three styles,\nbased on the state of three other component properties:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\" header=\"src/app/app.component.ts\">\ncurrentStyles: {};\nsetCurrentStyles() {\n  // CSS styles: set per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component properties\n  this.currentStyles = {\n    'font-style':  this.canSave      ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n    'font-size':   this.isSpecial    ? '24px'   : '12px'\n  };\n}\n\n</code-example>\n<p translation-result=\"on\">把 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 属性绑定到 <code>currentStyles</code>，来根据它设置此元素的样式：</p><p translation-origin=\"off\">Adding an <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> property binding to <code>currentStyles</code> sets the element's styles accordingly:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">请记住，无论是在初始时还是其依赖的属性发生变化时，都要调用 <code>setCurrentStyles()</code>。</p><p translation-origin=\"off\">Remember to call <code>setCurrentStyles()</code>, both initially and when the dependent properties change.</p>\n\n</div>\n<hr>\n<a id=\"ngModel\"></a>\n<h3 id=\"ngmodel-two-way-binding\" translation-result=\"on\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> ：双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"ngmodel-two-way-binding\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>: Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令允许你显示数据属性并在用户进行更改时更新该属性。这是一个例子：</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive allows you to display a data property and\nupdate that property when the user makes changes. Here's an example:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" header=\"src/app/app.component.html (NgModel example)\" region=\"NgModel-1\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<h4 id=\"import-formsmodule-to-use-ngmodel\" translation-result=\"on\">导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 以使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"import-formsmodule-to-use-ngmodel\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要想在双向数据绑定中使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令，必须先导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 并将其添加到 NgModule 的 <code>imports</code> 列表中。要了解关于 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 和 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的更多信息，参见<a href=\"guide/forms#ngModel\">表单</a>一章。</p><p translation-origin=\"off\">Before using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive in a two-way data binding,\nyou must import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and add it to the NgModule's <code>imports</code> list.\nLearn more about the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> in <a href=\"guide/forms#ngModel\">Forms</a>.</p>\n\n<p translation-result=\"on\">记住，要导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 才能让 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 可用，如下所示：</p><p translation-origin=\"off\">Remember to import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to make <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> available as follows:</p>\n\n<code-example path=\"built-in-directives/src/app/app.module.ts\" header=\"src/app/app.module.ts (FormsModule import)\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;--- import into the <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>\n  ],\n/* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n<p translation-result=\"on\">通过分别绑定到 <code>&#x3C;input></code> 元素的 <code>value</code> 属性和 <code>input</code> 事件，可以达到同样的效果：</p><p translation-origin=\"off\">You could achieve the same result with separate bindings to\nthe <code>&#x3C;input></code> element's  <code>value</code> property and <code>input</code> event:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-NgModel\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"without\">without <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>:&#x3C;/label>\n&#x3C;input [value]=\"currentItem.name\" (input)=\"currentItem.name=$event.target.value\" id=\"without\">\n\n</code-example>\n<p translation-result=\"on\">为了简化语法，<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令把技术细节隐藏在其输入属性 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 和输出属性 <code>ngModelChange</code> 的后面：</p><p translation-origin=\"off\">To streamline the syntax, the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive hides the details behind its own <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input and <code>ngModelChange</code> output properties:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModelChange\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-change\">(ngModelChange)=\"...name=$event\":&#x3C;/label>\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"currentItem.name=$event\" id=\"example-change\">\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 输入属性会设置该元素的值，并通过 <code>ngModelChange</code> 的输出属性来监听元素值的变化。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> data property sets the element's value property and the <code>ngModelChange</code> event property\nlistens for changes to the element's value.</p>\n\n<h4 id=\"ngmodel-and-value-accessors\" translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和值访问器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"ngmodel-and-value-accessors\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这些技术细节是针对每种具体元素的，因此 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令仅适用于通过 <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a> 适配过这种协议的元素。Angular 已经为所有基本的 HTML 表单元素提供了<em>值访问器</em>，<a href=\"guide/forms\">表单</a>一章示范了如何绑定到它们。</p><p translation-origin=\"off\">The details are specific to each kind of element and therefore the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive only works for an element\nsupported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>\nthat adapts an element to this protocol.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements and the\n<a href=\"guide/forms\">Forms</a> guide shows how to bind to them.</p>\n\n<p translation-result=\"on\">在编写适当的值访问器之前，不能将 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 应用于非表单的原生元素或第三方自定义组件。欲知详情，参见<a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>上的 API 文档。</p><p translation-origin=\"off\">You can't apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form native element or a\nthird-party custom component until you write a suitable value accessor. For more information, see\nthe API documentation on <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n\n<p translation-result=\"on\">你不一定非用为所编写的 Angular 组件提供值访问器，因为你还可以把值属性和事件属性命名为符合 Angular 的基本<a href=\"guide/template-syntax#two-way\">双向绑定语法</a>的形式，并完全跳过 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。<a href=\"guide/template-syntax#two-way\">双向绑定</a>部分的 <code>sizer</code> 是此技术的一个示例。</p><p translation-origin=\"off\">You don't need a value accessor for an Angular component that\nyou write because you can name the value and event properties\nto suit Angular's basic <a href=\"guide/template-syntax#two-way\">two-way binding syntax</a>\nand skip <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> altogether.\nThe <code>sizer</code> in the\n<a href=\"guide/template-syntax#two-way\">Two-way Binding</a> section is an example of this technique.</p>\n\n<p translation-result=\"on\">单独的 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 绑定是对绑定到元素的原生属性方式的一种改进，但你可以使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法来通过单个声明简化绑定：</p><p translation-origin=\"off\">Separate <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> bindings are an improvement over binding to the\nelement's native properties, but you can streamline the binding with a\nsingle declaration using the <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<p translation-result=\"on\">此 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法只能<em>设置</em>数据绑定属性。如果你要做得更多，可以编写扩展表单。例如，下面的代码将 <code>&#x3C;input></code> 值更改为大写：</p><p translation-origin=\"off\">This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only <em>set</em> a data-bound property.\nIf you need to do something more, you can write the expanded form;\nfor example, the following changes the <code>&#x3C;input></code> value to uppercase:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\" header=\"src/app/app.component.html\">\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\">\n\n</code-example>\n<p translation-result=\"on\">这里是所有这些变体的动画，包括这个大写转换的版本：</p><p translation-origin=\"off\">Here are all variations in action, including the uppercase version:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" alt=\"NgModel variations\" width=\"540\" height=\"264\">\n</div>\n<hr>\n<a id=\"structural-directives\"></a>\n<h2 id=\"built-in-structural-directives\" translation-result=\"on\">内置<em>结构型</em>指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"built-in-structural-directives\">Built-in <em>structural</em> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">结构型指令的职责是 HTML 布局。\n它们塑造或重塑 DOM 的<em>结构</em>，这通常是通过添加、移除和操纵它们所附加到的宿主元素来实现的。</p><p translation-origin=\"off\">Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating\nthe host elements to which they are attached.</p>\n\n<p translation-result=\"on\">本节会介绍常见的内置结构型指令：</p><p translation-origin=\"off\">This section is an introduction to the common built-in structural directives:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngIf\"><code>NgIf</code></a> —— 从模板中创建或销毁子视图。</p><p translation-origin=\"off\"><a href=\"guide/template-syntax#ngIf\"><code>NgIf</code></a>—conditionally creates or destroys subviews from the template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngFor\"><code>NgFor</code></a> —— 为列表中的每个条目重复渲染一个节点。</p><p translation-origin=\"off\"><a href=\"guide/template-syntax#ngFor\"><code>NgFor</code></a>—repeat a node for each item in a list.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#ngSwitch\"><code>NgSwitch</code></a> —— 一组在备用视图之间切换的指令。</p><p translation-origin=\"off\"><a href=\"guide/template-syntax#ngSwitch\"><code>NgSwitch</code></a>—a set of directives that switch among alternative views.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"guide/structural-directives\">结构型指令</a>一章涵盖了结构型指令的详细内容，它解释了以下内容：</p><p translation-origin=\"off\">The deep details of structural directives are covered in the\n<a href=\"guide/structural-directives\">Structural Directives</a> guide,\nwhich explains the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">  为什么<a href=\"guide/structural-directives#the-asterisk--prefix\">在要指令名称前加上星号（*）</a>。</p><p translation-origin=\"off\">Why you\n<a href=\"guide/structural-directives#the-asterisk--prefix\">prefix the directive name with an asterisk (*)</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  当指令没有合适的宿主元素时，使用 <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a> 对元素进行分组。</p><p translation-origin=\"off\">Using <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a>\nto group elements when there is no suitable host element for the directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 如何写自己的结构型指令。</p><p translation-origin=\"off\">How to write your own structural directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你只能往一个元素上应用<a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">一个结构型指令</a>。</p><p translation-origin=\"off\">That you can only apply <a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">one structural directive</a> to an element.</p>\n\n</li>\n</ul>\n</div>\n<hr>\n<a id=\"ngIf\"></a>\n<h3 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngif\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">你可以通过将 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令应用在宿主元素上来从 DOM 中添加或删除元素。在此示例中，将指令绑定到了条件表达式，例如 <code>isActive</code>。</p><p translation-origin=\"off\">You can add or remove an element from the DOM by applying an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive to\na host element.\nBind the directive to a condition expression like <code>isActive</code> in this example.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">不要忘了 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的星号（<code>*</code>）。有关星号的更多信息，请参见 <a href=\"guide/structural-directives\">结构型指令</a>中的<a href=\"guide/structural-directives#the-asterisk--prefix\">星号（*）前缀</a>部分。</p><p translation-origin=\"off\">Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n</div>\n<p translation-result=\"on\">当 <code>isActive</code> 表达式返回真值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会把 <code>ItemDetailComponent</code> 添加到 DOM 中。当表达式为假值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 将从 DOM 中删除 <code>ItemDetailComponent</code>，从而销毁该组件及其所有子组件。</p><p translation-origin=\"off\">When the <code>isActive</code> expression returns a truthy value, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> adds the\n<code>ItemDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes the <code>ItemDetailComponent</code>\nfrom the DOM, destroying that component and all of its sub-components.</p>\n\n<h4 id=\"showhide-vs-ngif\" translation-result=\"on\">显示/隐藏与 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"showhide-vs-ngif\">Show/hide vs. <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">隐藏元素与使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 删除元素不同。为了进行比较，下面的示例演示如何使用<a href=\"guide/template-syntax#class-binding\">类</a>或<a href=\"guide/template-syntax#style-binding\">样式</a>绑定来控制元素的可见性。</p><p translation-origin=\"off\">Hiding an element is different from removing it with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.\nFor comparison, the following example shows how to control\nthe visibility of an element with a\n<a href=\"guide/template-syntax#class-binding\">class</a> or <a href=\"guide/template-syntax#style-binding\">style</a> binding.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-3\" header=\"src/app/app.component.html\">\n&#x3C;!-- isSpecial is true -->\n&#x3C;div [class.hidden]=\"!isSpecial\">Show with class&#x3C;/div>\n&#x3C;div [class.hidden]=\"isSpecial\">Hide with class&#x3C;/div>\n\n&#x3C;p>ItemDetail is in the DOM but hidden&#x3C;/p>\n&#x3C;app-item-detail [class.hidden]=\"isSpecial\">&#x3C;/app-item-detail>\n\n&#x3C;div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n&#x3C;div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">隐藏元素时，该元素及其所有后代仍保留在 DOM 中。这些元素的所有组件都保留在内存中，Angular 会继续做变更检查。它可能会占用大量计算资源，并且会不必要地降低性能。</p><p translation-origin=\"off\">When you hide an element, that element and all of its descendants remain in the DOM.\nAll components for those elements stay in memory and\nAngular may continue to check for changes.\nYou could be holding onto considerable computing resources and degrading performance\nunnecessarily.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 工作方式有所不同。如果 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 为 <code>false</code>，则 Angular 将从 DOM 中删除该元素及其后代。这销毁了它们的组件，释放了资源，从而带来更好的用户体验。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> works differently. When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes the element and its descendants from the DOM.\nIt destroys their components, freeing up resources, which\nresults in a better user experience.</p>\n\n<p translation-result=\"on\">如果要隐藏大型组件树，请考虑使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 作为显示/隐藏的更有效替代方法。</p><p translation-origin=\"off\">If you are hiding large component trees, consider <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> as a more\nefficient alternative to showing/hiding.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有关 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>ngIfElse</code> 的更多信息，请参阅 <a href=\"api/common/NgIf\">关于 NgIf 的 API 文档</a>。</p><p translation-origin=\"off\">For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>ngIfElse</code>, see the <a href=\"api/common/NgIf\">API documentation about NgIf</a>.</p>\n\n</div>\n<h4 id=\"guard-against-null\" translation-result=\"on\">防范空指针错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#guard-against-null\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"guard-against-null\">Guard against null<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#guard-against-null\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 另一个优点是你可以使用它来防范空指针错误。显示/隐藏就是最合适的极简用例，当你需要防范时，请改用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 代替。如果其中嵌套的表达式尝试访问 <code>null</code> 的属性，Angular 将引发错误。</p><p translation-origin=\"off\">Another advantage of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is that you can use it to guard against null. Show/hide\nis best suited for very simple use cases, so when you need a guard, opt instead for <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. Angular will throw an error if a nested expression tries to access a property of <code>null</code>.</p>\n\n<p translation-result=\"on\">下面的例子中 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 保护着两个 <code>&#x3C;div></code>。仅当存在 <code>currentCustomer</code> 时，才会显示 <code>currentCustomer</code> 名称。除非它为 <code>null</code> 否则不会显示 <code>nullCustomer</code>。</p><p translation-origin=\"off\">The following shows <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> guarding two <code>&#x3C;div></code>s.\nThe <code>currentCustomer</code> name appears only when there is a <code>currentCustomer</code>.\nThe <code>nullCustomer</code> will not be displayed as long as it is <code>null</code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\">Hello, {{currentCustomer.name}}&#x3C;/div>\n\n</code-example>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\">Hello, &#x3C;span>{{nullCustomer}}&#x3C;/span>&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">另请参见下面的<a href=\"guide/template-syntax#safe-navigation-operator\" title=\"安全导航运算符（?.）\">安全导航运算符</a>。</p><p translation-origin=\"off\">See also the\n<a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe navigation operator (?.)\">safe navigation operator</a> below.</p>\n\n</div>\n<hr>\n<a id=\"ngFor\"></a>\n<h3 id=\"ngfor\"><code>NgFor</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>NgFor</code> 是一个重复器指令 —— 一种用来显示条目列表的方法。你定义了一个 HTML 块，该 HTML 块定义了应如何显示单个条目，然后告诉 Angular 以该块为模板来渲染列表中的每个条目。赋值给 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的文本是用来指导重复器工作过程的指令。</p><p translation-origin=\"off\"><code>NgFor</code> is a repeater directive—a way to present a list of items.\nYou define a block of HTML that defines how a single item should be displayed\nand then you tell Angular to use that block as a template for rendering each item in the list.\nThe text assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is the instruction that guides the repeater process.</p>\n\n<p translation-result=\"on\">以下示例显示了如何将 <code>NgFor</code> 应用于简单的 <code>&#x3C;div></code>。（不要忘了 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的星号（<code>*</code>）。）</p><p translation-origin=\"off\">The following example shows <code>NgFor</code> applied to a simple <code>&#x3C;div></code>. (Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.)</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">不要忘了 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的星号（<code>*</code>）。有关星号的更多信息，请参见<a href=\"guide/structural-directives\">结构型指令</a>中的<a href=\"guide/structural-directives#the-asterisk--prefix\">星号（*）前缀</a>部分。</p><p translation-origin=\"off\">Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n</div>\n<p translation-result=\"on\">你还可以将 <code>NgFor</code> 应用于组件元素，如以下示例所示。</p><p translation-origin=\"off\">You can also apply an <code>NgFor</code> to a component element, as in the following example.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<a id=\"microsyntax\"></a>\n<div class=\"callout is-critical\">\n<header translation-result=\"on\">`*ngFor` 微语法</header><header translation-origin=\"off\">*ngFor microsyntax</header>\n\n<p translation-result=\"on\">赋值给 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的字符串不是<a href=\"guide/template-syntax#template-expressions\">模板表达式</a>。而是一个<em>微语法</em> —— 由 Angular 解释的一种小型语言。字符串 <code>\"let item of items\"</code> 的意思是：</p><p translation-origin=\"off\">The string assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is not a <a href=\"guide/template-syntax#template-expressions\">template expression</a>. Rather,\nit's a <em>microsyntax</em>—a little language of its own that Angular interprets.\nThe string <code>\"let item of items\"</code> means:</p>\n\n<blockquote>\n<p translation-result=\"on\"><em>将 <code>items</code> 数组中的每个条目存储在局部循环变量 <code>item</code> 中，并使其可用于每次迭代的模板 HTML 中。</em></p><p translation-origin=\"off\"><em>Take each item in the <code>items</code> array, store it in the local <code>item</code> looping variable, and\nmake it available to the templated HTML for each iteration.</em></p>\n\n</blockquote>\n<p translation-result=\"on\">Angular 将该指令转换为包裹着宿主元素的 <code>&#x3C;ng-template></code>，然后反复使用此模板为列表中的每个 <code>item</code> 创建一组新的元素和绑定。有关微语法的更多信息，请参见<a href=\"guide/structural-directives#microsyntax\">结构型指令</a>一章。</p><p translation-origin=\"off\">Angular translates this instruction into an <code>&#x3C;ng-template></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code>item</code>\nin the list.\nFor more information about microsyntax, see the <a href=\"guide/structural-directives#microsyntax\">Structural Directives</a> guide.</p>\n\n</div>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h4 id=\"template-input-variables\" translation-result=\"on\">模板输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-input-variables\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"template-input-variables\">Template input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-input-variables\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>item</code> 前面的 <code>let</code> 关键字创建了一个名为 <code>item</code> 的模板输入变量。<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令迭代父组件的 <code>items</code> 属性所返回的 <code>items</code> 数组，并在每次迭代期间将 <code>item</code> 设置为该数组中的当前条目。</p><p translation-origin=\"off\">The <code>let</code> keyword before <code>item</code> creates a template input variable called <code>item</code>.\nThe <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive iterates over the <code>items</code> array returned by the parent component's <code>items</code> property\nand sets <code>item</code> to the current item from the array during each iteration.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的宿主元素及其后代中可引用 <code>item</code>，来访问该条目的属性。以下示例首先在插值中引用 <code>item</code>，然后把一个绑定表达式传入 <code>&#x3C;app-item-detail></code> 组件的 <code>item</code> 属性。</p><p translation-origin=\"off\">Reference <code>item</code> within the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> host element\nas well as within its descendants to access the item's properties.\nThe following example references <code>item</code> first in an interpolation\nand then passes in a binding to the <code>item</code> property of the <code>&#x3C;app-item-detail></code> component.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\" header=\"src/app/app.component.html\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n&#x3C;!-- . . . -->\n  &#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">有关模板输入变量的更多信息，请参见<a href=\"guide/structural-directives#template-input-variable\">结构型指令</a>。</p><p translation-origin=\"off\">For more information about template input variables, see\n<a href=\"guide/structural-directives#template-input-variable\">Structural Directives</a>.</p>\n\n<h4 id=\"ngfor-with-index\" translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 与 <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"ngfor-with-index\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> with <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>NgFor</code> 指令上下文中的 <code>index</code> 属性在每次迭代中返回该条目的从零开始的索引。\n你可以在模板输入变量中捕获 <code>index</code>，并在模板中使用它。</p><p translation-origin=\"off\">The <code>index</code> property of the <code>NgFor</code> directive context\nreturns the zero-based index of the item in each iteration.\nYou can capture the <code>index</code> in a template input variable and use it in the template.</p>\n\n<p translation-result=\"on\">下面的例子在名为 <code>i</code> 的变量中捕获 <code>index</code>，并将其与条目名称一起显示。</p><p translation-origin=\"off\">The next example captures the <code>index</code> in a variable named <code>i</code> and displays it with the item name.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\">{{i + 1}} - {{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要学习更多的<em>类似 index</em> 的值，例如 <code>last</code>、<code>even</code> 和 <code>odd</code>，请参阅 <a href=\"api/common/NgForOf\">NgFor API 参考</a>。</p><p translation-origin=\"off\"><code>NgFor</code> is implemented by the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive. Read more about the other <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> context values such as <code>last</code>, <code>even</code>,\nand <code>odd</code> in the <a href=\"api/common/NgForOf\">NgForOf API reference</a>.</p>\n\n</div>\n<a id=\"trackBy\"></a>\n<h4 id=\"ngfor-with-trackby\" translation-result=\"on\">带 <code>trackBy</code> 的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"ngfor-with-trackby\">*ngFor with <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果将 <code>NgFor</code> 与大型列表一起使用，则对某个条目的较小更改（例如删除或添加一项）就会触发一系列 DOM 操作。\n例如，重新查询服务器可能会重置包含所有新条目对象的列表，即使先前已显示这些条目也是如此。在这种情况下，Angular 只能看到由新的对象引用组成的新列表，它别无选择，只能用所有新的 DOM 元素替换旧的 DOM 元素。</p><p translation-origin=\"off\">If you use <code>NgFor</code> with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</p>\n\n<p translation-result=\"on\">你可以使用 <code>trackBy</code> 来让它更加高效。向该组件添加一个方法，该方法返回 <code>NgFor</code> 应该跟踪的值。这个例子中，该值是英雄的 <code>id</code>。如果 <code>id</code> 已经被渲染，Angular 就会跟踪它，而不会重新向服务器查询相同的 <code>id</code>。</p><p translation-origin=\"off\">You can make this more efficient with <code>trackBy</code>.\nAdd a method to the component that returns the value <code>NgFor</code> should track.\nIn this case, that value is the hero's <code>id</code>. If the <code>id</code> has already been rendered,\nAngular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\" header=\"src/app/app.component.ts\">\ntrackByItems(index: number, item: Item): number { return item.id; }\n\n</code-example>\n<p translation-result=\"on\">在微语法表达式中，将 <code>trackBy</code> 设置为 <code>trackByItems()</code> 方法。</p><p translation-origin=\"off\">In the microsyntax expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\">\n  ({{item.id}}) {{item.name}}\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">这就是 <code>trackBy</code> 效果的说明。“Reset items” 将创建具有相同 <code>item.id</code> 的新条目。“Change ids” 将使用新的 <code>item.id</code> 创建新条目。</p><p translation-origin=\"off\">Here is an illustration of the <code>trackBy</code> effect.\n\"Reset items\" creates new items with the same <code>item.id</code>s.\n\"Change ids\" creates new items with new <code>item.id</code>s.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 如果没有 <code>trackBy</code>，这些按钮都会触发完全的 DOM 元素替换。</p><p translation-origin=\"off\">With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 有了 <code>trackBy</code>，则只有修改了 <code>id</code> 的按钮才会触发元素替换。</p><p translation-origin=\"off\">With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</p>\n\n</li>\n</ul>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" alt=\"Animation of trackBy\" width=\"492\" height=\"442\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">内置指令仅仅使用了公共 API。也就是说，它们没有用到任何其它指令无权访问的私有 API。</p><p translation-origin=\"off\">Built-in directives use only public APIs; that is,\nthey do not have special access to any private APIs that other directives can't access.</p>\n\n</div>\n<hr>\n<a id=\"ngSwitch\"></a>\n<h2 id=\"the-ngswitch-directives\" translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-ngswitch-directives\">The <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">NgSwitch 类似于 JavaScript <code>switch</code> 语句。它根据切换条件显示几个可能的元素中的一个。Angular 只会将选定的元素放入 DOM。</p><p translation-origin=\"off\">NgSwitch is like the JavaScript <code>switch</code> statement.\nIt displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.</p>\n\n<!-- API Flagged -->\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 实际上是三个协作指令的集合： <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>，<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>，如以下示例所示。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is actually a set of three, cooperating directives:\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> as in the following example.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\">\n  &#x3C;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\">&#x3C;/app-stout-item>\n  &#x3C;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\">&#x3C;/app-device-item>\n  &#x3C;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\">&#x3C;/app-lost-item>\n  &#x3C;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\">&#x3C;/app-best-item>\n&#x3C;!-- . . . -->\n  &#x3C;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\">&#x3C;/app-unknown-item>\n&#x3C;/div>\n\n</code-example>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngswitch.gif\" alt=\"Animation of NgSwitch\" width=\"370\" height=\"256\">\n</div>\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是控制器指令。把它绑定到一个返回<em>开关值</em>的表达式，例如 <code>feature</code>。尽管此示例中的 <code>feature</code> 值是字符串，但开关值可以是任何类型。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is the controller directive. Bind it to an expression that returns\nthe <em>switch value</em>, such as <code>feature</code>. Though the <code>feature</code> value in this\nexample is a string, the switch value can be of any type.</p>\n\n<p translation-result=\"on\"><strong>绑定到 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong>。如果试图写成 <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code>，就会出现错误，因为 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是<em>属性型</em>指令，而不是<em>结构型</em>指令。它不会直接接触 DOM，而是会更改与之相伴的指令的行为。</p><p translation-origin=\"off\"><strong>Bind to <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong>. You'll get an error if you try to set <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> because\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is an <em>attribute</em> directive, not a <em>structural</em> directive.\nRather than touching the DOM directly, it changes the behavior of its companion directives.</p>\n\n<p translation-result=\"on\"><strong>绑定到 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code></strong>\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 指令都是<em>结构型指令</em>，因为它们会从 DOM 中添加或移除元素。</p><p translation-origin=\"off\"><strong>Bind to <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code></strong>.\nThe <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> directives are <em>structural</em> directives\nbecause they add or remove elements from the DOM.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">  当 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 的绑定值等于开关值时，就将其元素添加到 DOM 中；否则从 DOM 中删除。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> adds its element to the DOM when its bound value equals the switch value and removes\nits bound value when it doesn't equal the switch value.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 会在没有任何一个 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 被选中时把它所在的元素加入 DOM 中。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">开关指令对于添加和删除<em>组件元素</em>特别有用。本示例在 <code>item-switch.components.ts</code> 文件中定义的四个 <code>item</code> 组件之间切换。每个组件都有一个名叫 <code>item</code> 的<a href=\"guide/template-syntax#inputs-outputs\" title=\"输入属性\">输入属性</a>，它会绑定到父组件的 <code>currentItem</code>。</p><p translation-origin=\"off\">The switch directives are particularly useful for adding and removing <em>component elements</em>.\nThis example switches among four <code>item</code> components defined in the <code>item-switch.components.ts</code> file.\nEach component has an <code>item</code> <a href=\"guide/template-syntax#inputs-outputs\" title=\"Input property\">input property</a>\nwhich is bound to the <code>currentItem</code> of the parent component.</p>\n\n<p translation-result=\"on\">开关指令也同样适用于原生元素和 Web Component。\n比如，你可以把 <code>&#x3C;app-best-item></code> 分支替换为如下代码。</p><p translation-origin=\"off\">Switch directives work as well with native elements and web components too.\nFor example, you could replace the <code>&#x3C;app-best-item></code> switch case with the following.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"> Are you as bright as {{currentItem.name}}?&#x3C;/div>\n\n</code-example>\n<hr>\n<a id=\"template-reference-variable\"></a>\n<a id=\"template-reference-variables--var-\"></a>\n<a id=\"ref-vars\"></a>\n<a id=\"ref-var\"></a>\n<h2 id=\"template-reference-variables-var\" translation-result=\"on\">模板引用变量（ <code>#var</code> ）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variables-var\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-reference-variables-var\">Template reference variables (<code>#var</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variables-var\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><strong>模板引用变量</strong>通常是对模板中 DOM 元素的引用。它还可以引用指令（包含组件）、元素、<a href=\"api/core/TemplateRef\">TemplateRef</a> 或 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN：Web Component\">Web Component</a>。</p><p translation-origin=\"off\">A <strong>template reference variable</strong> is often a reference to a DOM element within a template.\nIt can also refer to a directive (which contains a component), an element, <a href=\"api/core/TemplateRef\">TemplateRef</a>, or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.</p>\n\n<p translation-result=\"on\">有关本节中语法和代码段的演示，请参见<live-example name=\"template-reference-variables\">模板参考变量示例</live-example>。</p><p translation-origin=\"off\">For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"template-reference-variables\">template reference variables example</live-example>.</p>\n\n<p translation-result=\"on\">使用井号（#）声明模板引用变量。以下模板引用变量 <code>#phone</code> 会在 <code>&#x3C;input></code> 元素上声明了一个 <code>phone</code> 变量。</p><p translation-origin=\"off\">Use the hash symbol (#) to declare a reference variable.\nThe following reference variable, <code>#phone</code>, declares a <code>phone</code> variable on an <code>&#x3C;input></code> element.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p translation-result=\"on\">你可以在组件模板中的任何位置引用模板引用变量。这个例子中，模板下方的 <code>&#x3C;button></code> 就引用了 <code>phone</code> 变量。</p><p translation-origin=\"off\">You can refer to a template reference variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<h3 class=\"no-toc\" id=\"how-a-reference-variable-gets-its-value\" translation-result=\"on\">模板引用变量怎么得到它的值？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-a-reference-variable-gets-its-value\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"how-a-reference-variable-gets-its-value\">How a reference variable gets its value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-a-reference-variable-gets-its-value\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在大多数情况下，Angular 会将模板引用变量的值设置为声明该变量的元素。在上一个示例中，<code>phone</code> 指的是电话号码的 <code>&#x3C;input></code>。按钮的单击处理程序将把这个 <code>&#x3C;input></code> 的值传给组件的 <code>callPhone()</code> 方法。</p><p translation-origin=\"off\">In most cases, Angular sets the reference variable's value to the element on which it is declared.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令可以更改该行为并将该值设置为其它值。在以下示例中，模板引用变量 <code>itemForm</code> 出现了 3 次，由 HTML 分隔。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive can change that behavior and set the value to something else. In the following example, the template reference variable, <code>itemForm</code>, appears three times separated\nby HTML.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\"\n    >Name &#x3C;input class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;/label>\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\">当 itemForm 的引用没有 <code>\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"</code> 值时，它将是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>。不过，组件和指令之间的区别在于，在不指定属性值的情况下组件将引用自身（隐式引用），而指令不会更改隐式引用（仍为所在元素）。</p><p translation-origin=\"off\">The reference value of itemForm, without the ngForm attribute value, would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>.\nThere is, however, a difference between a Component and a Directive in that a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nwill be referenced without specifying the attribute value, and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> will not\nchange the implicit reference (that is, the element).</p>\n\n<p translation-result=\"on\">但是，带有 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 时，<code>itemForm</code> 就是对 <a href=\"api/forms/NgForm\" title=\"API：NgForm\">NgForm</a> 指令的引用，它能够跟踪表单中每个控件的值和有效性。</p><p translation-origin=\"off\">However, with <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code>, <code>itemForm</code> is a reference to the <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a>\ndirective with the ability to track the value and validity of every control in the form.</p>\n\n<p translation-result=\"on\">原生 <code>&#x3C;form></code> 元素没有 <code>form</code> 属性，但 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令有，这样就能在 <code>itemForm.form.valid</code> 无效的情况下禁用提交按钮，并将整个表单控制树传给父组件的 <code>onSubmit()</code> 方法。。</p><p translation-origin=\"off\">The native <code>&#x3C;form></code> element doesn't have a <code>form</code> property, but the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive does, which allows disabling the submit button\nif the <code>itemForm.form.valid</code> is invalid and passing the entire form control tree\nto the parent component's <code>onSubmit()</code> method.</p>\n\n<h3 class=\"no-toc\" id=\"template-reference-variable-considerations\" translation-result=\"on\">对模板引用变量的思考<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variable-considerations\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"template-reference-variable-considerations\">Template reference variable considerations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variable-considerations\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板<em>引用</em>变量（<code>#phone</code>）与模板<em>输入</em>变量（<code>let phone</code>）不同，例如 <a href=\"guide/template-syntax#template-input-variable\"><code>*ngFor</code></a> 中。欲知详情，请参见<a href=\"guide/structural-directives#template-input-variable\"><em>结构型指令</em></a>。</p><p translation-origin=\"off\">A template <em>reference</em> variable (<code>#phone</code>) is not the same as a template <em>input</em> variable (<code>let phone</code>) such as in an <a href=\"guide/template-syntax#template-input-variable\"><code>*ngFor</code></a>.\nSee <a href=\"guide/structural-directives#template-input-variable\"><em>Structural Directives</em></a> for more information.</p>\n\n<p translation-result=\"on\">模板引用变量的范围是整个模板。因此，不要在同一模板中多次定义相同的变量名，因为它在运行时的值将不可预测。</p><p translation-origin=\"off\">The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</p>\n\n<h4 id=\"alternative-syntax\" translation-result=\"on\">替代语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#alternative-syntax\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"alternative-syntax\">Alternative syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#alternative-syntax\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你也可以用 <code>ref-</code> 前缀代替 <code>#</code>。\n下面的例子中就用把 <code>fax</code> 变量声明成了 <code>ref-fax</code> 而不是 <code>#fax</code>。</p><p translation-origin=\"off\">You can use the <code>ref-</code> prefix alternative to <code>#</code>.\nThis example declares the <code>fax</code> variable as <code>ref-fax</code> instead of <code>#fax</code>.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-fax\" header=\"src/app/app.component.html\">\n&#x3C;input ref-fax placeholder=\"fax number\" />\n&#x3C;button (click)=\"callFax(fax.value)\">Fax&#x3C;/button>\n\n</code-example>\n<hr>\n<a id=\"inputs-outputs\"></a>\n<h2 id=\"input-and-output-properties\" translation-result=\"on\">输入和输出属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-properties\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"input-and-output-properties\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-properties\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 允许 Angular 在其父上下文和子指令或组件之间共享数据。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性是可写的，而 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性是可观察对象。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> allow Angular to share data between the parent context\nand child directives or components. An <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property is writable\nwhile an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property is observable.</p>\n\n<p translation-result=\"on\">考虑以下父子关系示例：</p><p translation-origin=\"off\">Consider this example of a child/parent relationship:</p>\n\n<code-example language=\"html\">\n&#x3C;parent-component>\n  &#x3C;child-component>&#x3C;/child-component>\n&#x3C;/parent-component>\n</code-example>\n<p translation-result=\"on\">在这里，<code>&#x3C;child-component></code> 选择器或子指令嵌入在 <code>&#x3C;parent-component></code> 中，用作子级上下文。</p><p translation-origin=\"off\">Here, the <code>&#x3C;child-component></code> selector, or child directive, is embedded\nwithin a <code>&#x3C;parent-component></code>, which serves as the child's context.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 充当子组件的 API 或应用编程接口，因为它们允许子组件与父组件进行通信。可以把 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 看做港口或门，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 是进入组件的门，允许数据流入，而 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 是离开组件的门，允许子组件向外发出数据。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> act as\nthe API, or application programming interface, of the child\ncomponent in that they allow the child to\ncommunicate with the parent. Think of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> like ports\nor doorways—<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> is the doorway into the component allowing data\nto flow in while <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is the doorway out of the component, allowing the\nchild component to send data out.</p>\n\n<p translation-result=\"on\">关于 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 这一部分有其自己的<live-example name=\"inputs-outputs\"></live-example>。以下小节将重点介绍示例应用程序中的关键点。</p><p translation-origin=\"off\">This section about <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> has its own <live-example name=\"inputs-outputs\"></live-example>. The following subsections highlight\nkey points in the sample app.</p>\n\n<div class=\"alert is-helpful\">\n<h4 id=\"input-and-output-are-independent\" translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 是独立的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-are-independent\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"input-and-output-are-independent\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> are independent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-are-independent\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">尽管 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 通常在应用程序中同时出现，但是你可以单独使用它们。如果嵌套组件只需要向其父级发送数据，则不需要 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，而只需 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>。反之亦然，如果子级只需要从父级接收数据，则只需要 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>。</p><p translation-origin=\"off\">Though <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> often appear together in apps, you can use\nthem separately. If the nested\ncomponent is such that it only needs to send data to its parent, you wouldn't\nneed an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, only an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. The reverse is also true in that if the\nchild only needs to receive data from the parent, you'd only need <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.</p>\n\n</div>\n<a id=\"input\"></a>\n<h2 id=\"how-to-use-input\" translation-result=\"on\">如何使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-input\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-to-use-input\">How to use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-input\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在子组件或指令中使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器，可以让 Angular 知道该组件中的属性可以从其父组件中接收值。这很好记，因为这种数据流是从子组件的角度来看就是输入。因此，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 允许将数据从父组件输入<em>到</em>子组件中。</p><p translation-origin=\"off\">Use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component or directive to let Angular know\nthat a property in that component can receive its value from its parent component.\nIt helps to remember that the data flow is from the perspective of the\nchild component. So an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> allows data to be input <em>into</em> the\nchild component from the parent component.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input.svg\" alt=\"Input data flow diagram\" width=\"671\" height=\"346\">\n</div>\n<p translation-result=\"on\">为了说明 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的用法，请编辑应用程序的以下部分：</p><p translation-origin=\"off\">To illustrate the use of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, edit these parts of your app:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">子组件类及其模板</p><p translation-origin=\"off\">The child component class and template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">父组件类及其模板</p><p translation-origin=\"off\">The parent component class and template</p>\n\n</li>\n</ul>\n<h3 id=\"in-the-child\" translation-result=\"on\">在子组件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"in-the-child\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要在子组件类中使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器，请首先导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，然后使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 来装饰一个属性：</p><p translation-origin=\"off\">To use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component class, first import\n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and then decorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.ts\" region=\"use-input\" header=\"src/app/item-detail/item-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // First, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item: string; // decorate the property with @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n}\n\n</code-example>\n<p translation-result=\"on\">在这个例子中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰具有 <code>string</code> 类型的属性 <code>item</code>，但是，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性可以具有任何类型，例如 <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>，<code>string</code>，<code>boolean</code> 或 <code>object</code>。<code>item</code> 的值会来自下一部分要介绍的父组件。</p><p translation-origin=\"off\">In this case, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorates the property <code class=\"no-auto-link\">item</code>, which has\na type of <code>string</code>, however, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> properties can have any type, such as\n<code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>, <code>string</code>, <code>boolean</code>, or <code>object</code>. The value for <code>item</code> will come from the parent component, which the next section covers.</p>\n\n<p translation-result=\"on\">接下来，在子组件模板中，添加以下内容：</p><p translation-origin=\"off\">Next, in the child component template, add the following:</p>\n\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.html\" region=\"property-in-template\" header=\"src/app/item-detail/item-detail.component.html\">\n&#x3C;p>\n  Today's item: {{item}}\n&#x3C;/p>\n\n</code-example>\n<h3 id=\"in-the-parent\" translation-result=\"on\">在父组件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"in-the-parent\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下一步是在父组件的模板中绑定该属性。在此示例中，父组件模板是 <code>app.component.html</code>。</p><p translation-origin=\"off\">The next step is to bind the property in the parent component's template.\nIn this example, the parent component template is <code>app.component.html</code>.</p>\n\n<p translation-result=\"on\">首先，使用子组件的选择器（这里是 <code>&#x3C;app-item-detail></code> ）作为父组件模板中的指令。然后，使用<a href=\"guide/template-syntax#property-binding\">属性绑定</a>将子组件中的属性绑定到父组件中的属性。</p><p translation-origin=\"off\">First, use the child's selector, here <code>&#x3C;app-item-detail></code>, as a directive within the\nparent component template. Then, use <a href=\"guide/template-syntax#property-binding\">property binding</a>\nto bind the property in the child to the property of the parent.</p>\n\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [item]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">接下来，在父组件类 <code>app.component.ts</code> 中，为 <code>currentItem</code> 指定一个值：</p><p translation-origin=\"off\">Next, in the parent component class, <code>app.component.ts</code>, designate a value for <code>currentItem</code>:</p>\n\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n<p translation-result=\"on\">借助 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，Angular 将 <code>currentItem</code> 的值传给子级，以便该 <code>item</code> 渲染为 <code>Television</code>。</p><p translation-origin=\"off\">With <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, Angular passes the value for <code>currentItem</code> to the child so that <code>item</code> renders as <code>Television</code>.</p>\n\n<p translation-result=\"on\">下图显示了这种结构：</p><p translation-origin=\"off\">The following diagram shows this structure:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" alt=\"Property binding diagram\" width=\"502\" height=\"304\">\n</div>\n<p translation-result=\"on\">方括号 <code>[]</code> 中的目标是子组件中带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器的属性。绑定源（等号右边的部分）是父组件要传给内嵌组件的数据。</p><p translation-origin=\"off\">The target in the square brackets, <code>[]</code>, is the property you decorate\nwith <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component. The binding source, the part\nto the right of the equal sign, is the data that the parent\ncomponent passes to the nested component.</p>\n\n<p translation-result=\"on\">关键是，当要在父组件中绑定到子组件中的属性（即方括号中的内容）时，必须在子组件中使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 来装饰该属性。</p><p translation-origin=\"off\">The key takeaway is that when binding to a child component's property in a parent component—that is, what's\nin square brackets—you must\ndecorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component.</p>\n\n<div class=\"alert is-helpful\">\n<h4 id=\"onchanges-and-input\" translation-result=\"on\"><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 和 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#onchanges-and-input\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"onchanges-and-input\"><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> and <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#onchanges-and-input\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要监视 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性的更改，请使用 Angular 的<a href=\"guide/lifecycle-hooks#onchanges\">生命周期钩子</a>之一 <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>。<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 是专门设计用于具有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器的属性的。欲知详情，请参见<a href=\"guide/lifecycle-hooks\">生命周期钩子</a>指南的<a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a>部分。</p><p translation-origin=\"off\">To watch for changes on an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, use\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, one of Angular's <a href=\"guide/lifecycle-hooks#onchanges\">lifecycle hooks</a>.\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> is specifically designed to work with properties that have the\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator. See the <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a> section of the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> guide for more details and examples.</p>\n\n</div>\n<a id=\"output\"></a>\n<h2 id=\"how-to-use-output\" translation-result=\"on\">如何使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-output\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-to-use-output\">How to use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-output\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在子组件或指令中使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器，允许数据从子级<em>流出</em>到父级。</p><p translation-origin=\"off\">Use the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator in the child component or directive to allow data to flow from\nthe child <em>out</em> to the parent.</p>\n\n<p translation-result=\"on\">通常应将 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性初始化为 Angular <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a>，并将值作为<a href=\"guide/template-syntax#event-binding\">事件</a>从组件中向外流出。</p><p translation-origin=\"off\">An <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property should normally be initialized to an Angular <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a> with values flowing out of the component as <a href=\"guide/template-syntax#event-binding\">events</a>.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/output.svg\" alt=\"Output diagram\" width=\"666\" height=\"340\">\n</div>\n<p translation-result=\"on\">就像 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 一样，你也要在子组件的属性上使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，但其类型为 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>。</p><p translation-origin=\"off\">Just like with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, you can use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\non a property of the child component but its type should be\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 将子组件中的属性标记为一扇门，数据可以通过这扇门从子组件传到父组件。\n然后，子组件必须引发一个事件，以便父组件知道发生了某些变化。为了引发事件，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 要和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 配合使用，<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 是 <code>@angular/core</code> 中的一个类，用于发出自定义事件。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> marks a property in a child component as a doorway\nthrough which data can travel from the child to the parent.\nThe child component then has to raise an event so the\nparent knows something has changed. To raise an event,\n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> works hand in hand with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich is a class in <code>@angular/core</code> that you\nuse to emit custom events.</p>\n\n<p translation-result=\"on\">要使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，请编辑应用程序的以下部分：</p><p translation-origin=\"off\">When you use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, edit these parts of your app:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">子组件类及其模板</p><p translation-origin=\"off\">The child component class and template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">父组件类及其模板</p><p translation-origin=\"off\">The parent component class and template</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下面的示例演示了如何在子组件中设置 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，以将你在 HTML 的 <code>&#x3C;input></code> 中输入数据，并将其追加到父组件中的数组里。</p><p translation-origin=\"off\">The following example shows how to set up an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in a child\ncomponent that pushes data you enter in an HTML <code>&#x3C;input></code> to an array in the\nparent component.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">HTML 元素 <code>&#x3C;input></code> 和 Angular 装饰器 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 是不同的。本文档是讲 Angular 中的组件通信的，因此讲的是 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>。关于 HTML 元素 <code>&#x3C;input></code> 的更多信息，请参见 <a href=\"https://www.w3.org/TR/html5/sec-forms.html#the-input-element\">W3C Recommendation</a>。</p><p translation-origin=\"off\">The HTML element <code>&#x3C;input></code> and the Angular decorator <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>\nare different. This documentation is about component communication in Angular as it pertains to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. For more information on the HTML element <code>&#x3C;input></code>, see the <a href=\"https://www.w3.org/TR/html5/sec-forms.html#the-input-element\">W3C Recommendation</a>.</p>\n\n</div>\n<h3 id=\"in-the-child-1\" translation-result=\"on\">在子组件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"in-the-child-1\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">此示例有一个 <code>&#x3C;input></code>，用户可以在其中输入一个值并单击引发事件的 <code>&#x3C;button></code>。然后，通过 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 将数据转给父组件。</p><p translation-origin=\"off\">This example features an <code>&#x3C;input></code> where a user can enter a value and click a <code>&#x3C;button></code> that raises an event. The <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> then relays the data to the parent component.</p>\n\n<p translation-result=\"on\">首先，请确保在子组件类中导入 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> ：</p><p translation-origin=\"off\">First, be sure to import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>\nin the child component class:</p>\n\n<code-example language=\"js\">\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n</code-example>\n<p translation-result=\"on\">接下来，仍然在子组件中，使用组件类中的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰属性。下面例子中的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 名叫 <code>newItemEvent</code>，其类型是 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>，这表示它是一个事件。</p><p translation-origin=\"off\">Next, still in the child, decorate a property with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in the component class.\nThe following example <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is called <code>newItemEvent</code> and its type is\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which means it's an event.</p>\n\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output\" header=\"src/app/item-output/item-output.component.ts\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n\n</code-example>\n<p translation-result=\"on\">上述声明的不同之处如下：</p><p translation-origin=\"off\">The different parts of the above declaration are as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> —— 一个装饰器函数，它将该属性标记为把数据从子级传递到父级的一种方式</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>—a decorator function marking the property as a way for data to go from the child to the parent</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>newItemEvent</code> — <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的名字</p><p translation-origin=\"off\"><code>newItemEvent</code>—the name of the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code> — <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的类型</p><p translation-origin=\"off\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code>—the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>'s type</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code> 告诉 Angular 创建一个新的事件发射器，并且它发射的数据为 <code>string</code> 类型。该类型也可以是任何类型，例如 <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>，<code>boolean</code> 等。有关 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 的更多信息，请参阅 <a href=\"api/core/EventEmitter\">EventEmitter API 文档</a>。</p><p translation-origin=\"off\"><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code>—tells Angular to create a new event emitter and that the data it emits is of type string. The type could be any type, such as <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>, <code>boolean</code>, and so on. For more information on <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, see the <a href=\"api/core/EventEmitter\">EventEmitter API documentation</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">接下来，在同一个组件类中创建一个 <code>addNewItem()</code> 方法：</p><p translation-origin=\"off\">Next, create an <code>addNewItem()</code> method in the same component class:</p>\n\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output-class\" header=\"src/app/item-output/item-output.component.ts\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>addNewItem()</code> 函数使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> <code>newItemEvent</code> 引发一个事件，在该事件中它将发出用户键入到 <code>&#x3C;input></code> 中的内容。换句话说，当用户单击 UI 中的 “Add” 按钮时，子组件会让父组件知道该事件，并将该数据传给父组件。</p><p translation-origin=\"off\">The <code>addNewItem()</code> function uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, <code>newItemEvent</code>,\nto raise an event in which it emits the value the user\ntypes into the <code>&#x3C;input></code>. In other words, when\nthe user clicks the add button in the UI, the child lets the parent know\nabout the event and gives that data to the parent.</p>\n\n<h4 id=\"in-the-childs-template\" translation-result=\"on\">在子组件的模板中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-childs-template\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"in-the-childs-template\">In the child's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-childs-template\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">子组件的模板中有两个控件。第一个是带有<a href=\"guide/template-syntax#ref-var\">模板引用变量</a> <code>#newItem</code> 的 HTML <code>&#x3C;input></code>，用户可在其中键入条目名称。用户键入到 <code>&#x3C;input></code> 中的内容都存储在 <code>#newItem</code> 变量中。</p><p translation-origin=\"off\">The child's template has two controls. The first is an HTML <code>&#x3C;input></code> with a\n<a href=\"guide/template-syntax#ref-var\">template reference variable</a> , <code>#newItem</code>,\nwhere the user types in an item name. Whatever the user types\ninto the <code>&#x3C;input></code> gets stored in the <code>#newItem</code> variable.</p>\n\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.html\" region=\"child-output\" header=\"src/app/item-output/item-output.component.html\">\n&#x3C;label>Add an item: &#x3C;input #newItem>&#x3C;/label>\n&#x3C;button (click)=\"addNewItem(newItem.value)\">Add to parent's list&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">第二个元素是带有<a href=\"guide/template-syntax#event-binding\">事件绑定</a>的 <code>&#x3C;button></code>。之所以知道这是事件绑定，是因为等号的左侧部分在圆括号中 <code>(click)</code>。</p><p translation-origin=\"off\">The second element is a <code>&#x3C;button></code>\nwith an <a href=\"guide/template-syntax#event-binding\">event binding</a>. You know it's\nan event binding because the part to the left of the equal\nsign is in parentheses, <code>(click)</code>.</p>\n\n<p translation-result=\"on\"><code>(click)</code> 事件绑定到子组件类中的 <code>addNewItem()</code> 方法，无论 <code>#newItem</code> 的值如何，该子组件类均将其作为参数。</p><p translation-origin=\"off\">The <code>(click)</code> event is bound to the <code>addNewItem()</code> method in the child component class which\ntakes as its argument whatever the value of <code>#newItem</code> is.</p>\n\n<p translation-result=\"on\">现在，子组件已经有了用于将数据发送到父组件的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 和引发事件的方法。下一步是在父组件中。</p><p translation-origin=\"off\">Now the child component has an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nfor sending data to the parent and a method for raising an event.\nThe next step is in the parent.</p>\n\n<h3 id=\"in-the-parent-1\" translation-result=\"on\">在父组件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"in-the-parent-1\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在此示例中，父组件是 <code>AppComponent</code>，但是你可以使用任何能嵌套子组件的组件。</p><p translation-origin=\"off\">In this example, the parent component is <code>AppComponent</code>, but you could use\nany component in which you could nest the child.</p>\n\n<p translation-result=\"on\">此示例中的 <code>AppComponent</code> 具有数组型的 <code>items</code> 列表以及将更多条目添加到数组中的方法。</p><p translation-origin=\"off\">The <code>AppComponent</code> in this example features a list of <code>items</code>\nin an array and a method for adding more items to the array.</p>\n\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>addItem()</code> 方法接收字符串形式的参数，然后将该字符串添加到 <code>items</code> 数组中。</p><p translation-origin=\"off\">The <code>addItem()</code> method takes an argument in the form of a string\nand then pushes, or adds, that string to the <code>items</code> array.</p>\n\n<h4 id=\"in-the-parents-template\" translation-result=\"on\">在父组件的模板中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parents-template\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"in-the-parents-template\">In the parent's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parents-template\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">接下来，在父组件的模板中，将父组件的方法绑定到子组件的事件。将子组件选择器（这里是 <code>&#x3C;app-item-output></code>）放在父组件的模板 <code>app.component.html</code> 中。</p><p translation-origin=\"off\">Next, in the parent's template, bind the parent's\nmethod to the child's event. Put the child selector, here <code>&#x3C;app-item-output></code>,\nwithin the parent component's\ntemplate, <code>app.component.html</code>.</p>\n\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-output (newItemEvent)=\"addItem($event)\">&#x3C;/app-item-output>\n\n</code-example>\n<p translation-result=\"on\">事件绑定 <code>(newItemEvent)='addItem($event)'</code> 告诉 Angular 将子组件的 <code>newItemEvent</code> 事件连接到父组件中的方法 <code>addItem()</code>，以及将子组件通知父组件的事件作为 <code>addItem()</code> 的参数。换句话说，这是实际传递数据的地方。<code>$event</code> 包含用户在子模板 UI 中键入到 <code>&#x3C;input></code> 中的数据。</p><p translation-origin=\"off\">The event binding, <code>(newItemEvent)='addItem($event)'</code>, tells\nAngular to connect the event in the child, <code>newItemEvent</code>, to\nthe method in the parent, <code>addItem()</code>, and that the event that the child\nis notifying the parent about is to be the argument of <code>addItem()</code>.\nIn other words, this is where the actual hand off of data takes place.\nThe <code>$event</code> contains the data that the user types into the <code>&#x3C;input></code>\nin the child template UI.</p>\n\n<p translation-result=\"on\">现在，为了查看 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 工作情况，请将以下内容添加到父组件的模板中：</p><p translation-origin=\"off\">Now, in order to see the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> working, add the following to the parent's template:</p>\n\n<code-example language=\"html\">\n  &#x3C;ul>\n\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">\n\n        {{item}}\n\n    &#x3C;/li>\n\n  &#x3C;/ul>\n</code-example>\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 会遍历 <code>items</code> 数组中的条目。当你在子组件的 <code>&#x3C;input></code> 中输入值并单击按钮时，子组件将发出事件，父组件的 <code>addItem()</code> 方法将值推送到 <code>items</code> 数组，并将其渲染在列表中。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over the items in the <code>items</code> array. When you enter a value in the child's <code>&#x3C;input></code> and click the button, the child emits the event and the parent's <code>addItem()</code> method pushes the value to the <code>items</code> array and it renders in the list.</p>\n\n<h2 id=\"input-and-output-together\" translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 在一起<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-together\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"input-and-output-together\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以在和下面代码相同的子组件上使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> ：</p><p translation-origin=\"off\">You can use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same child component as in the following:</p>\n\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"together\" header=\"src/app/app.component.html\">\n&#x3C;app-input-output [item]=\"currentItem\" (deleteRequest)=\"crossOffItem($event)\">&#x3C;/app-input-output>\n\n</code-example>\n<p translation-result=\"on\">目标 <code>item</code> 是子组件类中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性，它从父组件的属性 <code>currentItem</code> 中接收值。当你单击删除时，子组件将引发事件 <code>deleteRequest</code>，它携带的值将作为父组件的 <code>crossOffItem()</code> 方法的参数。</p><p translation-origin=\"off\">The target, <code>item</code>, which is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property in the child component class, receives its value from the parent's property, <code>currentItem</code>. When you click delete, the child component raises an event, <code>deleteRequest</code>, which is the argument for the parent's <code>crossOffItem()</code> method.</p>\n\n<p translation-result=\"on\">下图是同一子组件上的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，并显示了每个子组件的不同部分：</p><p translation-origin=\"off\">The following diagram is of an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same\nchild component and shows the different parts of each:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" alt=\"Input/Output diagram\" width=\"800\" height=\"333\">\n</div>\n<p translation-result=\"on\">如图所示，像分别使用它们那样同时使用输入和输出。在这里，子选择器是 <code>&#x3C;app-input-output></code>，其中 <code>item</code> 和 <code>deleteRequest</code> 是子组件类中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性。属性 <code>currentItem</code> 和方法 <code>crossOffItem()</code> 都位于父组件类中。</p><p translation-origin=\"off\">As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is <code>&#x3C;app-input-output></code> with <code>item</code> and <code>deleteRequest</code> being <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nproperties in the child component class. The property <code>currentItem</code> and the method <code>crossOffItem()</code> are both in the parent component class.</p>\n\n<p translation-result=\"on\">要使用“盒子里的香蕉”语法 <code>[()]</code> 组合属性和事件绑定，请参见<a href=\"guide/template-syntax#two-way\">双向绑定</a>。</p><p translation-origin=\"off\">To combine property and event bindings using the banana-in-a-box\nsyntax, <code>[()]</code>, see <a href=\"guide/template-syntax#two-way\">Two-way Binding</a>.</p>\n\n<p translation-result=\"on\">关于这些工作原理的更多详细信息，请参见前面有关 <a href=\"guide/template-syntax#input\">Input</a> 和 <a href=\"guide/template-syntax#output\">Output 的部分</a>。要查看实际效果，参见<live-example name=\"inputs-outputs\">输入和输出范例</live-example>。</p><p translation-origin=\"off\">For more detail on how these work, see the previous sections on <a href=\"guide/template-syntax#input\">Input</a> and <a href=\"guide/template-syntax#output\">Output</a>. To see it in action, see the <live-example name=\"inputs-outputs\">Inputs and Outputs Example</live-example>.</p>\n\n<h2 id=\"input-and-output-declarations\" translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 声明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-declarations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"input-and-output-declarations\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> declarations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-declarations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你还可以在指令元数据的 <code>inputs</code> 和 <code>outputs</code> 数组中标出这些成员，而不是使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器来声明输入和输出，如本例所示：</p><p translation-origin=\"off\">Instead of using the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorators\nto declare inputs and outputs, you can identify\nmembers in the <code>inputs</code> and <code>outputs</code> arrays\nof the directive metadata, as in this example:</p>\n\n<code-example path=\"inputs-outputs/src/app/in-the-metadata/in-the-metadata.component.ts\" region=\"metadata\" header=\"src/app/in-the-metadata/in-the-metadata.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['clearanceItem'],\noutputs: ['buyEvent']\n// tslint:enable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<p translation-result=\"on\">固然可以在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中声明 <code>inputs</code> 和 <code>outputs</code>，但最好使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 类修饰符，如下所示：</p><p translation-origin=\"off\">While declaring <code>inputs</code> and <code>outputs</code> in the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nmetadata is possible, it is a better practice to use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nclass decorators instead, as follows:</p>\n\n<code-example path=\"inputs-outputs/src/app/input-output/input-output.component.ts\" region=\"input-output\" header=\"src/app/input-output/input-output.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item: string;\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n</code-example>\n<p translation-result=\"on\">欲知详情，请参见<a href=\"guide/styleguide\">风格指南</a>的<a href=\"guide/styleguide#decorate-input-and-output-properties\">给输入和输出属性加装饰器</a>部分。</p><p translation-origin=\"off\">See the <a href=\"guide/styleguide#decorate-input-and-output-properties\">Decorate input and output properties</a> section of the\n<a href=\"guide/styleguide\">Style Guide</a> for details.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果在尝试使用输入或输出时收到了模板解析错误，但是你知道该属性一定存在，请仔细检查你的属性是否使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 进行了注解，或者是否已在 <code>inputs</code> / <code>outputs</code> 数组中声明了它们：</p><p translation-origin=\"off\">If you get a template parse error when trying to use inputs or outputs, but you know that the\nproperties do indeed exist, double check\nthat your properties are annotated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> or that you've declared\nthem in an <code>inputs</code>/<code>outputs</code> array:</p>\n\n<code-example language=\"bash\">\nUncaught Error: Template parse errors:\nCan't bind to 'item' since it isn't a known property of 'app-item-detail'\n</code-example>\n</div>\n<a id=\"aliasing-io\"></a>\n<h2 id=\"aliasing-inputs-and-outputs\" translation-result=\"on\">为输入和输出指定别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"aliasing-inputs-and-outputs\">Aliasing inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有时，输入/输出属性的公共名称应与内部名称不同。虽然最好的方法是避免这种情况，但 Angular 确实提供了一种解决方案。</p><p translation-origin=\"off\">Sometimes the public name of an input/output property should be different from the internal name. While it is a best practice to avoid this situation, Angular does\noffer a solution.</p>\n\n<h3 id=\"aliasing-in-the-metadata\" translation-result=\"on\">元数据中的别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-in-the-metadata\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"aliasing-in-the-metadata\">Aliasing in the metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-in-the-metadata\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要在元数据中为输入和输出指定别名，请使用冒号分隔（<code>:</code>）的字符串，其左边是属性名，右边是别名：</p><p translation-origin=\"off\">Alias inputs and outputs in the metadata using a colon-delimited (<code>:</code>) string with\nthe directive property name on the left and the public alias on the right:</p>\n\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias\" header=\"src/app/aliasing/aliasing.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['input1: saveForLaterItem'], // propertyName:alias\noutputs: ['outputEvent1: saveForLaterEvent']\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<h3 id=\"aliasing-with-the-inputoutput-decorator\" translation-result=\"on\">使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器指定别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-with-the-inputoutput-decorator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"aliasing-with-the-inputoutput-decorator\">Aliasing with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-with-the-inputoutput-decorator\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以通过将别名传给 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器来为属性名指定别名。其内部名称保持不变。</p><p translation-origin=\"off\">You can specify the alias for the property name by passing the alias name to the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator. The internal name remains as usual.</p>\n\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias-input-output\" header=\"src/app/aliasing/aliasing.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('wishListItem') input2: string; //  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>(alias)\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('wishEvent') outputEvent2 = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>(); //  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>(alias) propertyName = ...\n\n</code-example>\n<hr>\n<a id=\"expression-operators\"></a>\n<h2 id=\"template-expression-operators\" translation-result=\"on\">模板表达式中的运算符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expression-operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-expression-operators\">Template expression operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expression-operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 模板表达式的语言是 JavaScript 语法的子集，并为特定情况添加了一些特殊的运算符。接下来将介绍其中的三个运算符：</p><p translation-origin=\"off\">The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios. The next sections cover three of these operators:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#pipe\">管道</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#pipe\">pipe</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#safe-navigation-operator\">安全导航运算符</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#safe-navigation-operator\">safe navigation operator</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax#non-null-assertion-operator\">非空断言运算符</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#non-null-assertion-operator\">non-null assertion operator</a></p>\n\n</li>\n</ul>\n<a id=\"pipe\"></a>\n<h3 id=\"the-pipe-operator-\" translation-result=\"on\">管道运算符（ <code>|</code> ）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-pipe-operator-\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-pipe-operator-\">The pipe operator (<code>|</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-pipe-operator-\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在准备将其用于绑定之前，表达式的结果可能需要进行一些转换。例如，你可以将数字显示为货币，将文本更改为大写，或过滤列表并对其进行排序。</p><p translation-origin=\"off\">The result of an expression might require some transformation before you're ready to use it in a binding.\nFor example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</p>\n\n<p translation-result=\"on\">管道是简单的函数，它们接受输入值并返回转换后的值。使用管道运算符（<code>|</code>），很容易在模板表达式中使用它们：</p><p translation-origin=\"off\">Pipes are simple functions that accept an input value and return a transformed value.\nThey're easy to apply within template expressions, using the pipe operator (<code>|</code>):</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"uppercase-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through uppercase pipe: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">管道运算符会把它左侧的表达式结果传给它右侧的管道函数。</p><p translation-origin=\"off\">The pipe operator passes the result of an expression on the left to a pipe function on the right.</p>\n\n<p translation-result=\"on\">还可以通过多个管道串联表达式：</p><p translation-origin=\"off\">You can chain expressions through multiple pipes:</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"pipe-chain\" header=\"src/app/app.component.html\">\n&#x3C;!-- convert title to uppercase, then to lowercase -->\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through a pipe chain: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">你还可以对管道<a href=\"guide/pipes#parameterizing-a-pipe\">使用参数</a>：</p><p translation-origin=\"off\">And you can also <a href=\"guide/pipes#parameterizing-a-pipe\">apply parameters</a> to a pipe:</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"date-pipe\" header=\"src/app/app.component.html\">\n&#x3C;!-- pipe with configuration argument => \"February 25, 1980\" -->\n&#x3C;p>Manufacture date with date format pipe: {{item.manufactureDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'longDate'}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> 管道对调试绑定特别有用：</p><p translation-origin=\"off\">The <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> pipe is particularly helpful for debugging bindings:</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"json-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p>Item json pipe: {{item | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">生成的输出如下所示：</p><p translation-origin=\"off\">The generated output would look something like this:</p>\n\n<code-example language=\"json\">\n  { \"name\": \"Telephone\",\n    \"manufactureDate\": \"1980-02-25T05:00:00.000Z\",\n    \"price\": 98 }\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">管道运算符的优先级比三元运算符（ <code>?:</code> ）高，这意味着 <code>a ? b : c | x</code> 将被解析为 <code>a ? b : (c | x)</code>。但是，由于多种原因，如果在 <code>?:</code> 的第一和第二操作数中没有括号，则不能使用管道运算符。一个较好的做法是在第三个操作数中也使用括号。</p><p translation-origin=\"off\">The pipe operator has a higher precedence than the ternary operator (<code>?:</code>),\nwhich means <code>a ? b : c | x</code> is parsed as <code>a ? b : (c | x)</code>.\nNevertheless, for a number of reasons,\nthe pipe operator cannot be used without parentheses in the first and second operands of <code>?:</code>.\nA good practice is to use parentheses in the third operand too.</p>\n\n</div>\n<hr>\n<a id=\"safe-navigation-operator\"></a>\n<h3 id=\"the-safe-navigation-operator----and-null-property-paths\" translation-result=\"on\">安全导航运算符（ <code>?</code> ）和空属性路径<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-safe-navigation-operator----and-null-property-paths\">The safe navigation operator ( <code>?</code> ) and null property paths<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 安全导航运算符 <code>?</code> 可以对在属性路径中出现 <code>null</code> 和 <code>undefined</code> 值进行保护。在这里，如果 <code>item</code> 为 <code>null</code>，它可以防止视图渲染失败。</p><p translation-origin=\"off\">The Angular safe navigation operator, <code>?</code>, guards against <code>null</code> and <code>undefined</code>\nvalues in property paths. Here, it protects against a view render failure if <code>item</code> is <code>null</code>.</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"safe\" header=\"src/app/app.component.html\">\n&#x3C;p>The item name is: {{item?.name}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">如果 <code>item</code> 为 <code>null</code>，则视图仍然渲染，但显示的值为空白；你只会看到 “The item name is:”，后面没有任何内容。</p><p translation-origin=\"off\">If <code>item</code> is <code>null</code>, the view still renders but the displayed value is blank; you see only \"The item name is:\" with nothing after it.</p>\n\n<p translation-result=\"on\">考虑接下来这个带有 <code>nullItem</code> 的例子。</p><p translation-origin=\"off\">Consider the next example, with a <code>nullItem</code>.</p>\n\n<code-example language=\"html\">\n  The null item name is {{nullItem.name}}\n</code-example>\n<p translation-result=\"on\">由于没有安全导航运算符，并且 <code>nullItem</code> 为 <code>null</code>，因此 JavaScript 和 Angular 会引发空指针错误并中断 Angular 的渲染过程：</p><p translation-origin=\"off\">Since there is no safe navigation operator and <code>nullItem</code> is <code>null</code>, JavaScript and Angular would throw a <code>null</code> reference error and break the rendering process of Angular:</p>\n\n<code-example language=\"bash\">\n  TypeError: Cannot read property 'name' of null.\n</code-example>\n<p translation-result=\"on\">但是，有时在某些情况下，属性路径中的 <code>null</code> 值可能是可接受的，尤其是当该值开始时为空但数据最终会到达时。</p><p translation-origin=\"off\">Sometimes however, <code>null</code> values in the property\npath may be OK under certain circumstances,\nespecially when the value starts out null but the data arrives eventually.</p>\n\n<p translation-result=\"on\">使用安全导航运算符 <code>?</code>，当 Angular 表达式遇到第一个空值时，它将停止对表达式的求值，并渲染出无错误的视图。</p><p translation-origin=\"off\">With the safe navigation operator, <code>?</code>, Angular stops evaluating the expression when it hits the first <code>null</code> value and renders the view without errors.</p>\n\n<p translation-result=\"on\">在像 <code>a?.b?.c?.d</code> 这样的长属性路径中，它工作得很完美。</p><p translation-origin=\"off\">It works perfectly with long property paths such as <code>a?.b?.c?.d</code>.</p>\n\n<hr>\n<a id=\"non-null-assertion-operator\"></a>\n<h3 id=\"the-non-null-assertion-operator---\" translation-result=\"on\">非空断言运算符（<code>!</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-non-null-assertion-operator---\">The non-null assertion operator ( <code>!</code> )<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 TypeScript 2.0 中，你可以使用 <code>--strictNullChecks</code> 标志强制开启<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">严格空值检查</a>。TypeScript 就会确保不存在意料之外的 null 或 undefined。</p><p translation-origin=\"off\">As of Typescript 2.0, you can enforce <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">strict null checking</a> with the <code>--strictNullChecks</code> flag. TypeScript then ensures that no variable is unintentionally <code>null</code> or <code>undefined</code>.</p>\n\n<p translation-result=\"on\">在这种模式下，有类型的变量默认是不允许 <code>null</code> 或 <code>undefined</code> 值的，如果有未赋值的变量，或者试图把 <code>null</code> 或 <code>undefined</code> 赋值给不允许为空的变量，类型检查器就会抛出一个错误。</p><p translation-origin=\"off\">In this mode, typed variables disallow <code>null</code> and <code>undefined</code> by default. The type checker throws an error if you leave a variable unassigned or try to assign <code>null</code> or <code>undefined</code> to a variable whose type disallows <code>null</code> and <code>undefined</code>.</p>\n\n<p translation-result=\"on\">如果无法在运行类型检查器期间确定变量是否 <code>null</code> 或 <code>undefined</code>，则会抛出错误。你可以通过应用后缀<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"非空断言运算符\">非空断言运算符!</a>来告诉类型检查器不要抛出错误。</p><p translation-origin=\"off\">The type checker also throws an error if it can't determine whether a variable will be <code>null</code> or <code>undefined</code> at runtime. You tell the type checker not to throw an error by applying the postfix\n<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"Non-null assertion operator\">non-null assertion operator, !</a>.</p>\n\n<p translation-result=\"on\">Angular 的非空断言运算符 <code>!</code> 在 Angular 模板中具有相同的目的。例如，在使用 <a href=\"guide/template-syntax#ngIf\"><code>*ngIf</code></a> 检查过 <code>item</code> 是否已定义之后，就可以断言 <code>item</code> 属性也已定义。</p><p translation-origin=\"off\">The Angular non-null assertion operator, <code>!</code>, serves the same purpose in\nan Angular template. For example, you can assert that <code>item</code> properties are also defined.</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&#x3C;!-- Assert color is defined, even if according to the `Item` type it could be undefined. -->\n&#x3C;p>The item's color is: {{item.color!.toUpperCase()}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">当 Angular 编译器把你的模板转换成 TypeScript 代码时，它会防止 TypeScript 不要报告此 <code>item.color</code> 可能为 <code>null</code> 或 <code>undefined</code> 的错误。</p><p translation-origin=\"off\">When the Angular compiler turns your template into TypeScript code,\nit prevents TypeScript from reporting that <code>item.color</code> might be <code>null</code> or <code>undefined</code>.</p>\n\n<p translation-result=\"on\">与<a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe naviation operator (?.)\"><em>安全导航运算符</em></a>不同的是，<strong>非空断言运算符</strong>不会防止出现 null 或 undefined。\n它只是告诉 TypeScript 的类型检查器对特定的属性表达式，不做 \"严格空值检测\"。</p><p translation-origin=\"off\">Unlike the <a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe navigation operator (?)\"><em>safe navigation operator</em></a>,\nthe non-null assertion operator does not guard against <code>null</code> or <code>undefined</code>.\nRather, it tells the TypeScript type checker to suspend strict <code>null</code> checks for a specific property expression.</p>\n\n<p translation-result=\"on\">非空断言运算符 <code>!</code>，是可选的，但在打开严格空检查选项时必须使用它。</p><p translation-origin=\"off\">The non-null assertion operator, <code>!</code>, is optional with the exception that you must use it when you turn on strict null checks.</p>\n\n<p translation-result=\"on\"><a href=\"guide/template-syntax#top-of-page\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n\n<hr>\n<a id=\"built-in-template-functions\"></a>\n<h2 id=\"built-in-template-functions\" translation-result=\"on\">内置模板函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-template-functions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"built-in-template-functions\">Built-in template functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-template-functions\"><i class=\"material-icons\">link</i></a></h2>\n\n<a id=\"any-type-cast-function\"></a>\n<h3 id=\"the-any-type-cast-function\" translation-result=\"on\">类型转换函数 <code>$any()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-any-type-cast-function\">The <code>$any()</code> type cast function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">有时候，绑定表达式可能会在 <a href=\"guide/aot-compiler\">AOT 编译</a>时报类型错误，并且它不能或很难指定类型。要消除这种报错，你可以使用 <code>$any()</code> 转换函数来把表达式转换成 <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> 类型</a>，范例如下：</p><p translation-origin=\"off\">Sometimes a binding expression triggers a type error during <a href=\"guide/aot-compiler\">AOT compilation</a> and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the <code>$any()</code> cast function to cast\nthe expression to the <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> type</a> as in the following example:</p>\n\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(item).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">当 Angular 编译器把模板转换成 TypeScript 代码时，<code>$any</code> 表达式可以防止 TypeScript 编译器在进行类型检查时报错说 <code>bestByDate</code> 不是 <code>item</code> 对象的成员。</p><p translation-origin=\"off\">When the Angular compiler turns this template into TypeScript code,\nit prevents TypeScript from reporting that <code>bestByDate</code> is not a member of the <code>item</code>\nobject when it runs type checking on the template.</p>\n\n<p translation-result=\"on\"><code>$any()</code> 转换函数可以和 <code>this</code> 联合使用，以便访问组件中未声明过的成员。</p><p translation-origin=\"off\">The <code>$any()</code> cast function also works with <code>this</code> to allow access to undeclared members of\nthe component.</p>\n\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(this).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\"><code>$any()</code> 转换函数可以用在绑定表达式中任何可以进行方法调用的地方。</p><p translation-origin=\"off\">The <code>$any()</code> cast function works anywhere in a binding expression where a method call is valid.</p>\n\n<h2 id=\"svg-in-templates\" translation-result=\"on\">模板中的 SVG<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#svg-in-templates\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"svg-in-templates\">SVG in templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#svg-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以将 SVG 用作 Angular 中的有效模板。以下所有模板语法均适用于 SVG 和 HTML。在 SVG <a href=\"https://www.w3.org/TR/SVG11/\">1.1</a>和<a href=\"https://www.w3.org/TR/SVG2/\">2.0</a> 规范中了解更多信息。</p><p translation-origin=\"off\">It is possible to use SVG as valid templates in Angular. All of the template syntax below is\napplicable to both SVG and HTML. Learn more in the SVG <a href=\"https://www.w3.org/TR/SVG11/\">1.1</a> and\n<a href=\"https://www.w3.org/TR/SVG2/\">2.0</a> specifications.</p>\n\n<p translation-result=\"on\">为什么要用 SVG 作为模板，而不是简单地将其作为图像添加到应用程序中？</p><p translation-origin=\"off\">Why would you use SVG as template, instead of simply adding it as image to your application?</p>\n\n<p translation-result=\"on\">当你使用 SVG 作为模板时，就可以像 HTML 模板一样使用指令和绑定。这意味着你将能够动态生成交互式图形。</p><p translation-origin=\"off\">When you use an SVG as the template, you are able to use directives and bindings just like with HTML\ntemplates. This means that you will be able to dynamically generate interactive graphics.</p>\n\n<p translation-result=\"on\">有关语法示例，请参见下面的示例代码片段：</p><p translation-origin=\"off\">Refer to the sample code snippet below for a syntax example:</p>\n\n<code-example path=\"template-syntax/src/app/svg.component.ts\" header=\"src/app/svg.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-svg',\n  templateUrl: './svg.component.svg',\n  styleUrls: ['./svg.component.css']\n})\nexport class SvgComponent {\n  fillColor = 'rgb(255, 0, 0)';\n\n  changeColor() {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    this.fillColor = `rgb(${r}, ${g}, ${b})`;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">将以下代码添加到你的 <code>svg.component.svg</code> 文件中：</p><p translation-origin=\"off\">Add the following code to your <code>svg.component.svg</code> file:</p>\n\n<code-example path=\"template-syntax/src/app/svg.component.svg\" header=\"src/app/svg.component.svg\">\n&#x3C;svg>\n  &#x3C;g>\n    &#x3C;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" [attr.fill]=\"fillColor\" (click)=\"changeColor()\" />\n    &#x3C;text x=\"120\" y=\"50\">click the rectangle to change the fill color&#x3C;/text>\n  &#x3C;/g>\n&#x3C;/svg>\n\n\n</code-example>\n<p translation-result=\"on\">在这里，你可以看到事件绑定语法 <code>click()</code> 和属性绑定语法（<code>[attr.fill]=\"fillColor\"</code>）的用法。</p><p translation-origin=\"off\">Here you can see the use of a <code>click()</code> event binding and the property binding syntax\n(<code>[attr.fill]=\"fillColor\"</code>).</p>\n\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Input\n - api/core/Output\n - guide/accessibility\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/attribute-directives\n - guide/component-interaction\n - guide/displaying-data\n - guide/forms\n - guide/glossary\n - guide/observables-in-angular\n - guide/pipes\n - guide/router\n - guide/structural-directives\n - guide/styleguide\n - guide/template-typecheck\n - guide/upgrade\n - guide/user-input\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/animations/style\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#interpolation\n - api/core/ContentChild\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/Output\n - api/core/TemplateRef\n - api/core/Type\n - api/core/ViewChild\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/Title\n - api/upgrade/static\n - guide/aot-compiler\n - guide/attribute-directives\n - guide/forms\n - guide/forms#ngModel\n - guide/glossary#camelcase\n - guide/glossary#dash-case\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/pipes#parameterizing-a-pipe\n - guide/router\n - guide/security\n - guide/security#sanitization-and-security-contexts\n - guide/structural-directives\n - guide/structural-directives#microsyntax\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#one-per-element\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#the-asterisk--prefix\n - guide/styleguide\n - guide/styleguide#decorate-input-and-output-properties\n - guide/template-syntax#aliasing-in-the-metadata\n - guide/template-syntax#aliasing-inputs-and-outputs\n - guide/template-syntax#aliasing-with-the-inputoutput-decorator\n - guide/template-syntax#alternative-syntax\n - guide/template-syntax#attribute-binding\n - guide/template-syntax#attribute-class-and-style-bindings\n - guide/template-syntax#attribute-directives\n - guide/template-syntax#avoid-side-effects\n - guide/template-syntax#basics-of-two-way-binding\n - guide/template-syntax#binding-syntax-an-overview\n - guide/template-syntax#binding-targets\n - guide/template-syntax#binding-types-and-targets\n - guide/template-syntax#built-in-attribute-directives\n - guide/template-syntax#built-in-directives\n - guide/template-syntax#built-in-structural-directives\n - guide/template-syntax#built-in-template-functions\n - guide/template-syntax#class-binding\n - guide/template-syntax#colspan-and-colspan\n - guide/template-syntax#content-security\n - guide/template-syntax#custom-events-with-eventemitter\n - guide/template-syntax#data-binding-and-html\n - guide/template-syntax#delegating-to-styles-with-lower-precedence\n - guide/template-syntax#event-and-event-handling-statements\n - guide/template-syntax#event-binding\n - guide/template-syntax#event-binding-event\n - guide/template-syntax#example-1-an-input\n - guide/template-syntax#example-2-a-disabled-button\n - guide/template-syntax#examples\n - guide/template-syntax#expression-context\n - guide/template-syntax#expression-guidelines\n - guide/template-syntax#expression-operators\n - guide/template-syntax#guard-against-null\n - guide/template-syntax#how-a-reference-variable-gets-its-value\n - guide/template-syntax#how-to-use-input\n - guide/template-syntax#how-to-use-output\n - guide/template-syntax#html-attribute-vs-dom-property\n - guide/template-syntax#html-in-templates\n - guide/template-syntax#import-formsmodule-to-use-ngmodel\n - guide/template-syntax#in-the-child\n - guide/template-syntax#in-the-child-1\n - guide/template-syntax#in-the-childs-template\n - guide/template-syntax#in-the-parent\n - guide/template-syntax#in-the-parent-1\n - guide/template-syntax#in-the-parents-template\n - guide/template-syntax#input\n - guide/template-syntax#input-and-output-are-independent\n - guide/template-syntax#input-and-output-declarations\n - guide/template-syntax#input-and-output-properties\n - guide/template-syntax#input-and-output-together\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#interpolation-\n - guide/template-syntax#interpolation-and-template-expressions\n - guide/template-syntax#ngClass\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngModel\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#ngclass\n - guide/template-syntax#ngfor\n - guide/template-syntax#ngfor-with-index\n - guide/template-syntax#ngfor-with-trackby\n - guide/template-syntax#ngif\n - guide/template-syntax#ngmodel-and-value-accessors\n - guide/template-syntax#ngmodel-two-way-binding\n - guide/template-syntax#ngstyle\n - guide/template-syntax#no-visible-side-effects\n - guide/template-syntax#non-null-assertion-operator\n - guide/template-syntax#onchanges-and-input\n - guide/template-syntax#one-time-string-initialization\n - guide/template-syntax#one-way-in\n - guide/template-syntax#output\n - guide/template-syntax#passing-in-an-object\n - guide/template-syntax#pipe\n - guide/template-syntax#property-binding\n - guide/template-syntax#property-binding-property\n - guide/template-syntax#property-binding-vs-interpolation\n - guide/template-syntax#quick-execution\n - guide/template-syntax#ref-var\n - guide/template-syntax#ref-vars\n - guide/template-syntax#remember-the-brackets\n - guide/template-syntax#return-the-proper-type\n - guide/template-syntax#safe-navigation-operator\n - guide/template-syntax#showhide-vs-ngif\n - guide/template-syntax#simplicity\n - guide/template-syntax#statement-context\n - guide/template-syntax#statement-guidelines\n - guide/template-syntax#structural-directives\n - guide/template-syntax#style-binding\n - guide/template-syntax#styling-delegation\n - guide/template-syntax#styling-precedence\n - guide/template-syntax#styling-precedence-highest-to-lowest\n - guide/template-syntax#svg-in-templates\n - guide/template-syntax#target-event\n - guide/template-syntax#template-expression-operators\n - guide/template-syntax#template-expressions\n - guide/template-syntax#template-input-variable\n - guide/template-syntax#template-input-variables\n - guide/template-syntax#template-reference-variable-considerations\n - guide/template-syntax#template-reference-variables-var\n - guide/template-syntax#template-statements\n - guide/template-syntax#template-statements-have-side-effects\n - guide/template-syntax#template-syntax\n - guide/template-syntax#the-any-type-cast-function\n - guide/template-syntax#the-ngswitch-directives\n - guide/template-syntax#the-non-null-assertion-operator---\n - guide/template-syntax#the-pipe-operator-\n - guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\n - guide/template-syntax#top-of-page\n - guide/template-syntax#two-way\n - guide/template-syntax#two-way-binding-\n - guide/template-syntax#two-way-binding-in-forms\n - guide/template-syntax#without-ngstyle\n - http://www.typescriptlang.org/docs/handbook/basic-types.html#any\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\n - https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\n - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n - https://developer.mozilla.org/en-US/docs/Web/SVG\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://en.wikipedia.org/wiki/Idempotence\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-syntax.md?message=docs%3A%20请简述你的修改...\n - https://www.w3.org/TR/SVG11/\n - https://www.w3.org/TR/SVG2/\n - https://www.w3.org/TR/html5/sec-forms.html#the-input-element\n-->"
}