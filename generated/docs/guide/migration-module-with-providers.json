{
  "id": "guide/migration-module-with-providers",
  "title": "ModuleWithProviders Migration",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/migration-module-with-providers.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"modulewithproviders-migration\" translation-result=\"on\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 迁移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#modulewithproviders-migration\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"modulewithproviders-migration\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> Migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#modulewithproviders-migration\"><i class=\"material-icons\">link</i></a></h1>\n\n<h2 id=\"what-does-this-schematic-do\" translation-result=\"on\">这个原理图做了什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-does-this-schematic-do\">What does this schematic do?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一些 Angular 库，比如 <code>@angular/router</code> 和 <code>@ngrx/store</code>，实现了某些返回 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型的 API（通常是一个名叫 <code>forRoot()</code> 的方法）。这种类型代表了一个 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 以及其提供者。Angular 9 不推荐使用不带泛型的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>，泛型类型就是 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的类型。</p><p translation-origin=\"off\">Some Angular libraries, such as <code>@angular/router</code> and <code>@ngrx/store</code>, implement APIs that return a type called <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> (typically via a method named <code>forRoot()</code>).\nThis type represents an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> along with additional providers.\nAngular version 9 deprecates use of <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> without an explicitly generic type, where the generic type refers to the type of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n\n<p translation-result=\"on\">这个原理图会给那些缺少泛型的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 用法添加泛型类型。在下面的例子中，<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的类型是 <code>SomeModule</code>，所以原理图就把类型修改为 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&#x3C;SomeModule></code>。</p><p translation-origin=\"off\">This schematic will add a generic type to any <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> usages that are missing the generic.\nIn the example below, the type of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> is <code>SomeModule</code>, so the schematic changes the type to be <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&#x3C;SomeModule></code>.</p>\n\n<p translation-result=\"on\"><strong>以前</strong></p><p translation-origin=\"off\"><strong>Before</strong></p>\n\n<code-example language=\"ts\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({...})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a> {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config}\n      ]\n    };\n  }\n}\n</code-example>\n<p translation-result=\"on\"><strong>以后</strong></p><p translation-origin=\"off\"><strong>After</strong></p>\n\n<code-example language=\"ts\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({...})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&#x3C;SomeModule> {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config }\n      ]\n    };\n  }\n}\n</code-example>\n<p translation-result=\"on\">在极少数情况下，原理图无法确定 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 的类型，你可能会看到原理图打印出一条 TODO 注释来让你手动更新代码。</p><p translation-origin=\"off\">In the rare case that the schematic can't determine the type of <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>, you may see the schematic print a TODO comment to update the code manually.</p>\n\n<h2 id=\"why-is-this-migration-necessary\" translation-result=\"on\">为何这项迁移是必要的？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#why-is-this-migration-necessary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-is-this-migration-necessary\">Why is this migration necessary?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#why-is-this-migration-necessary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">自 Angular 7 开始，<code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 就有了泛型类型，但它是可选的。即使缺了也可以正常编译，因为 <code>metadata.json</code> 文件中包含了所有的元数据。在 Ivy 中，不再需要 <code>metadata.json</code> 文件了，所以框架不能再假定已经有了所有必要的类型。相反，Ivy 要依赖 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 的泛型类型来获取正确的类型信息。</p><p translation-origin=\"off\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> has had the generic type since Angular version 7, but it has been optional.\nThis has compiled because the <code>metadata.json</code> files contained all the metadata.\nWith Ivy, <code>metadata.json</code> files are no longer required, so the framework cannot assume that one with the necessary types has been provided.\nInstead, Ivy relies on the generic type for <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> to get the correct type information.</p>\n\n<p translation-result=\"on\">出于这个原因，Angular 9 版本不推荐使用不带泛型类型的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>。Angular 的未来版本会删除默认的泛型类型，并且要求一个明确的类型。</p><p translation-origin=\"off\">For this reason, Angular version 9 deprecates <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> without a generic type.\nA future version of Angular will remove the default generic type, making an explicit type required.</p>\n\n<h2 id=\"should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\" translation-result=\"on\">当我把新的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型添加到应用中时，是否应该添加泛型？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\">Should I add the generic type when I add new <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> types to my application?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">是的，任何时候，当你的代码引用了 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型，都要有一个与其返回的实际 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 相匹配的泛型类型（例如，<code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&#x3C;MyModule></code> ）。</p><p translation-origin=\"off\">Yes, any time your code references the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type, it should have a generic type that matches the actual <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> that is returned (for example, <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&#x3C;MyModule></code>).</p>\n\n<h2 id=\"what-should-i-do-if-the-schematic-prints-a-todo-comment\" translation-result=\"on\">如果此原理图打印出了 TODO 注释，我该怎么办？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-should-i-do-if-the-schematic-prints-a-todo-comment\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-should-i-do-if-the-schematic-prints-a-todo-comment\">What should I do if the schematic prints a TODO comment?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-should-i-do-if-the-schematic-prints-a-todo-comment\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">此原理图会在它无法检测出 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型的正确泛型类型的情况下打印 TODO 注释。在这种情况下，你需要手动为 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 添加正确的泛型。它应该匹配 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 对象中返回的那个 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</p><p translation-origin=\"off\">The schematic will print a TODO comment in the event that it cannot detect the correct generic for the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type.\nIn this case, you'll want to manually add the correct generic to <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>. It should match the type of whichever <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> is returned in the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> object.</p>\n\n<h2 id=\"what-does-this-mean-for-libraries\" translation-result=\"on\">这对库意味着什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-mean-for-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-does-this-mean-for-libraries\">What does this mean for libraries?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-mean-for-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">库应该把泛型类型添加到 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型的任何一次使用中。</p><p translation-origin=\"off\">Libraries should add the generic type to any usages of the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type.</p>\n\n<h2 id=\"what-about-applications-using-non-migrated-libraries\" translation-result=\"on\">那些使用未迁移库的应用呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-about-applications-using-non-migrated-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-about-applications-using-non-migrated-libraries\">What about applications using non-migrated libraries?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-about-applications-using-non-migrated-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#ngcc\">Angular 兼容性编译器</a> （ <code>ngcc</code> ）会自动转换所有未迁移的库来生成合适的代码。</p><p translation-origin=\"off\">The <a href=\"guide/glossary#ngcc\">Angular compatibility compiler</a> (<code>ngcc</code>) should automatically transform any non-migrated libraries to generate the proper code.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/deprecations\n - guide/updating-to-version-10\n-->\n<!-- links from this doc:\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/upgrade/static\n - guide/glossary#ngcc\n - guide/migration-module-with-providers#modulewithproviders-migration\n - guide/migration-module-with-providers#should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\n - guide/migration-module-with-providers#what-about-applications-using-non-migrated-libraries\n - guide/migration-module-with-providers#what-does-this-mean-for-libraries\n - guide/migration-module-with-providers#what-does-this-schematic-do\n - guide/migration-module-with-providers#what-should-i-do-if-the-schematic-prints-a-todo-comment\n - guide/migration-module-with-providers#why-is-this-migration-necessary\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/migration-module-with-providers.md?message=docs%3A%20请简述你的修改...\n-->"
}