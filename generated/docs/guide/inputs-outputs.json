{
  "id": "guide/inputs-outputs",
  "title": "在父子指令及组件之间共享数据",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/inputs-outputs.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"sharing-data-between-child-and-parent-directives-and-components\">Sharing data between child and parent directives and components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"在父子指令及组件之间共享数据\">在父子指令及组件之间共享数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#在父子指令及组件之间共享数据\"><i class=\"material-icons\">link</i></a></h1>\n<p>A common pattern in Angular is sharing data between a parent component and one or more child components.\nImplement this pattern with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorators.</p>\n<p>Angular 中的一个常见模式就是在父组件和一个或多个子组件之间共享数据。可以用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 来实现这个模式。</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n<p>本章包含代码片段的可工作实例参阅<live-example></live-example>。</p>\n</div>\n<p>Consider the following hierarchy:</p>\n<p>考虑以下层次结构：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;parent-component>\n  &#x3C;child-component>&#x3C;/child-component>\n&#x3C;/parent-component>\n\n</code-example>\n<p>The <code>&#x3C;parent-component></code> serves as the context for the <code>&#x3C;child-component></code>.</p>\n<p><code>&#x3C;parent-component></code> 充当了 <code>&#x3C;child-component></code> 的上下文。</p>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> give a child component a way to communicate with its parent component.\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> lets a parent component update data in the child component.\nConversely, <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> lets the child send data to a parent component.</p>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 为子组件提供了一种与其父组件通信的方法。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 允许父组件更新子组件中的数据。相反，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 允许子组件向父组件发送数据。</p>\n<p><a id=\"input\"></a></p>\n<h2 id=\"sending-data-to-a-child-component\">Sending data to a child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"把数据发送到子组件\">把数据发送到子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#把数据发送到子组件\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component or directive signifies that the property can receive its value from its parent component.</p>\n<p>子组件或指令中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器表示该属性可以从其父组件中获取值。</p>\n<div class=\"lightbox\">\n<img alt=\"Input data flow diagram of data flowing from parent to child\" src=\"generated/images/guide/inputs-outputs/input.svg\" width=\"671\" height=\"346\">\n</div>\n<p>To use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, you must configure the parent and child.</p>\n<p>要使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，就必须对父组件和子组件进行配置。</p>\n<h3 id=\"configuring-the-child-component\">Configuring the child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"配置子组件\">配置子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#配置子组件\"><i class=\"material-icons\">link</i></a></h3>\n<p>To use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component class, first import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and then decorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, as in the following example.</p>\n<p>要使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器，首先要导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，然后用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰该属性，如下例所示。</p>\n<code-example header=\"src/app/item-detail/item-detail.component.ts\" path=\"inputs-outputs/src/app/item-detail/item-detail.component.ts\" region=\"use-input\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // First, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item = ''; // decorate the property with @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n}\n\n</code-example>\n<p>In this case, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorates the property <code class=\"no-auto-link\">item</code>, which has a type of <code>string</code>, however, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> properties can have any type, such as <code>number</code>, <code>string</code>, <code>boolean</code>, or <code>object</code>.\nThe value for <code>item</code> comes from the parent component.</p>\n<p>在这个例子中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 会修饰属性 <code class=\"no-auto-link\">item</code>，它的类型为 <code>string</code>，但 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性可以是任意类型，比如 <code>number</code>、<code>string</code>、<code>boolean</code> 或 <code>object</code>。<code>item</code> 的值来自父组件。</p>\n<p>Next, in the child component template, add the following:</p>\n<p>接下来，在子组件模板中添加以下内容：</p>\n<code-example header=\"src/app/item-detail/item-detail.component.html\" path=\"inputs-outputs/src/app/item-detail/item-detail.component.html\" region=\"property-in-template\">\n&#x3C;p>\n  Today's item: {{item}}\n&#x3C;/p>\n\n</code-example>\n<h3 id=\"configuring-the-parent-component\">Configuring the parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"配置父组件\">配置父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#配置父组件\"><i class=\"material-icons\">link</i></a></h3>\n<p>The next step is to bind the property in the parent component's template.\nIn this example, the parent component template is <code>app.component.html</code>.</p>\n<p>下一步是在父组件的模板中绑定该属性。在这个例子中，父组件模板是 <code>app.component.html</code>。</p>\n<ol>\n<li>\n<p>Use the child's selector, here <code>&#x3C;app-item-detail></code>, as a directive within the parent component template.</p>\n<p>使用子组件的 selector (<code>&#x3C;app-item-detail></code>) 作为父组件模板中的指令。</p>\n</li>\n<li>\n<p>Use <a href=\"guide/property-binding\">property binding</a> to bind the <code>item</code> property in the child to the <code>currentItem</code> property of the parent.</p>\n<p>使用<a href=\"guide/property-binding\">属性绑定</a>把子组件的 <code>item</code> 属性绑定到父组件的 <code>currentItem</code> 属性上。</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\">\n&#x3C;app-item-detail [item]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n</li>\n<li>\n<p>In the parent component class, designate a value for <code>currentItem</code>:</p>\n<p>在父组件类中，为 <code>currentItem</code> 指定一个值：</p>\n<code-example header=\"src/app/app.component.ts\" path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n</li>\n</ol>\n<p>With <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, Angular passes the value for <code>currentItem</code> to the child so that <code>item</code> renders as <code>Television</code>.</p>\n<p>通过 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，Angular 把 <code>currentItem</code> 的值传给子组件，以便 <code>item</code> 渲染为 <code>Television</code>。</p>\n<p>The following diagram shows this structure:</p>\n<p>下图展示了这种结构：</p>\n<div class=\"lightbox\">\n<img alt=\"Property binding diagram of the target, item, in square brackets set to the source, currentItem, on the right of an equal sign\" src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" width=\"502\" height=\"304\">\n</div>\n<p>The target in the square brackets, <code>[]</code>, is the property you decorate with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component.\nThe binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</p>\n<p>方括号 <code>[]</code> 中的目标就是子组件中用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰的那个属性。绑定源（等号的右边部分）则是父组件传给内嵌组件的数据。</p>\n<h3 id=\"watching-for-input-changes\">Watching for <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> changes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#watching-for-input-changes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"监视-input-的变更\">监视 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的变更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#监视-input-的变更\"><i class=\"material-icons\">link</i></a></h3>\n<p>To watch for changes on an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, use <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, one of Angular's <a href=\"guide/lifecycle-hooks\">lifecycle hooks</a>.\nSee the <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a> section of the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> guide for more details and examples.</p>\n<p>要想监视 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性的变化，可以用 Angular 的<a href=\"guide/lifecycle-hooks\">生命周期钩子</a><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>。更多详情和范例，请参阅<a href=\"guide/lifecycle-hooks\">生命周期钩子</a> 一章的 <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a>部分。</p>\n<p><a id=\"output\"></a></p>\n<h2 id=\"sending-data-to-a-parent-component\">Sending data to a parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"把数据发送到父组件\">把数据发送到父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#把数据发送到父组件\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator in a child component or directive lets data flow from the child to the parent.</p>\n<p>子组件或指令中的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器允许数据从子组件传给父组件。</p>\n<div class=\"lightbox\">\n<img alt=\"Output diagram of the data flow going from child to parent\" src=\"generated/images/guide/inputs-outputs/output.svg\" width=\"666\" height=\"340\">\n</div>\n<p><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> marks a property in a child component as a doorway through which data can travel from the child to the parent.</p>\n<p><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 在子组件中标记了一个属性，作为数据从子组件传递到父组件的途径。</p>\n<p>The child component uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property to raise an event to notify the parent of the change.\nTo raise an event, an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> must have the type of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which is a class in <code>@angular/core</code> that you use to emit custom events.</p>\n<p>子组件使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性来引发事件，以通知父组件这一变化。为了引发事件，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 必须是 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 类型，它是 <code>@angular/core</code> 中用来发出自定义事件的类。</p>\n<p>The following example shows how to set up an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in a child component that pushes data from an HTML <code>&#x3C;input></code> to an array in the parent component.</p>\n<p>下面的例子给出了如何在组件中设置 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，来把数据从 HTML 的 <code>&#x3C;input></code> 推送到父组件的数组中。</p>\n<p>To use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, you must configure the parent and child.</p>\n<p>要使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，就必须配置父组件和子组件。</p>\n<h3 id=\"configuring-the-child-component-1\">Configuring the child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component-1\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"配置子组件-1\">配置子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#配置子组件-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>The following example features an <code>&#x3C;input></code> where a user can enter a value and click a <code>&#x3C;button></code> that raises an event.\nThe <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> then relays the data to the parent component.</p>\n<p>下面的例子中有一个 <code>&#x3C;input></code>，用户可以输入一个值，然后点击一个引发事件 <code>&#x3C;button></code> 然后，<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 数据中继到父组件。</p>\n<ol>\n<li>\n<p>Import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> in the child component class:</p>\n<p>在子组件类中导入 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code></p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p>In the component class, decorate a property with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>.\nThe following example <code>newItemEvent</code> <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> has a type of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which means it's an event.</p>\n<p>在组件类中，用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰一个属性。下面的例子中 <code>newItemEvent</code> 这个 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的类型为 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>，这意味着它是一个事件。</p>\n<code-example header=\"src/app/item-output/item-output.component.ts\" path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n\n</code-example>\n<p>The different parts of the preceding declaration are as follows:</p>\n<p>上述声明中的差异点如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Declaration parts</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">装饰器部件</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></td>\n<td align=\"left\">A decorator function marking the property as a way for data to go from the child to the parent.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></td>\n<td align=\"left\">一个装饰器函数，它把该属性标记为数据从子组件进入父组件的一种途径。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>newItemEvent</code></td>\n<td align=\"left\">The name of the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>newItemEvent</code></td>\n<td align=\"left\">这个 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的名字。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code></td>\n<td align=\"left\">The <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>'s type.</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code></td>\n<td align=\"left\">这个 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的类型。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code></td>\n<td align=\"left\">Tells Angular to create a new event emitter and that the data it emits is of type string.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code></td>\n<td align=\"left\">要求 Angular 创建一个新的事件发射器，它发出的数据是 <code>string</code> 类型的。</td>\n</tr>\n</tbody>\n</table>\n<p>For more information on <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, see the <a href=\"api/core/EventEmitter\">EventEmitter API documentation</a>.</p>\n<p>关于 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 的详细信息，请参阅 <a href=\"api/core/EventEmitter\">EventEmitter API 文档</a>。</p>\n</li>\n<li>\n<p>Create an <code>addNewItem()</code> method in the same component class:</p>\n<p>在同一个组件类中创建一个 <code>addNewItem()</code> 方法：</p>\n<code-example header=\"src/app/item-output/item-output.component.ts\" path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output-class\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p>The <code>addNewItem()</code> function uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, <code>newItemEvent</code>, to raise an event with the value the user types into the <code>&#x3C;input></code>.</p>\n<p><code>addNewItem()</code> 函数使用 <code>newItemEvent</code> 这个 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 来引发一个事件，该事件带有用户输入到 <code>&#x3C;input></code> 中的值。</p>\n</li>\n</ol>\n<h3 id=\"configuring-the-childs-template\">Configuring the child's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-childs-template\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"配置子组件的模板\">配置子组件的模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#配置子组件的模板\"><i class=\"material-icons\">link</i></a></h3>\n<p>The child's template has two controls.\nThe first is an HTML <code>&#x3C;input></code> with a <a href=\"guide/template-reference-variables\">template reference variable</a>, <code>#newItem</code>, where the user types in an item name.\nThe <code>value</code> property of the <code>#newItem</code> variable stores what the user types into the <code>&#x3C;input></code>.</p>\n<p>子组件的模板有两个控件。第一个是带有<a href=\"guide/template-reference-variables\">模板引用变量</a> <code>#newItem</code> 的 <code>&#x3C;input></code>，用户可在其中输入条目名称。<code>#newItem</code> 变量的 <code>value</code> 属性存储了用户输入到 <code>&#x3C;input></code> 中的值。</p>\n<code-example header=\"src/app/item-output/item-output.component.html\" path=\"inputs-outputs/src/app/item-output/item-output.component.html\" region=\"child-output\">\n&#x3C;label for=\"item-input\">Add an item:&#x3C;/label>\n&#x3C;input type=\"text\" id=\"item-input\" #newItem>\n&#x3C;button type=\"button\" (click)=\"addNewItem(newItem.value)\">Add to parent's list&#x3C;/button>\n\n</code-example>\n<p>The second element is a <code>&#x3C;button></code> with a <code>click</code> <a href=\"guide/event-binding\">event binding</a>.</p>\n<p>第二个元素是带有 <code>click</code> <a href=\"guide/event-binding\">事件绑定</a> 的 <code>&#x3C;button></code> 元素。</p>\n<p>The <code>(click)</code> event is bound to the <code>addNewItem()</code> method in the child component class.\nThe <code>addNewItem()</code> method takes as its argument the value of the <code>#newItem.value</code> property.</p>\n<p><code>(click)</code> 事件绑定到了子组件类中 <code>addNewItem()</code> 方法。<code>addNewItem()</code> 方法接受一个 <code>#newItem.value</code> 属性的值作为参数。</p>\n<h3 id=\"configuring-the-parent-component-1\">Configuring the parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component-1\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"配置父组件-1\">配置父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#配置父组件-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>AppComponent</code> in this example features a list of <code>items</code> in an array and a method for adding more items to the array.</p>\n<p>此范例中的 <code>AppComponent</code> 有一个 <code>items</code> 列表，以及一个向数组中添加更多条目的方法。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p>The <code>addItem()</code> method takes an argument in the form of a string and then adds that string to the <code>items</code> array.</p>\n<p><code>addItem()</code> 方法接受一个字符串形式的参数，然后把该字符串添加到 <code>items</code> 数组中。</p>\n<h3 id=\"configuring-the-parents-template\">Configuring the parent's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parents-template\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"配置父组件的模板\">配置父组件的模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#配置父组件的模板\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p>In the parent's template, bind the parent's method to the child's event.</p>\n<p>在父模板中，把父组件的方法绑定到子组件的事件上。</p>\n</li>\n<li>\n<p>Put the child selector, here <code>&#x3C;app-item-output></code>, within the parent component's template, <code>app.component.html</code>.</p>\n<p>把子组件选择器（<code>&#x3C;app-item-output></code>）放在父组件的模板 <code>app.component.html</code> 中。</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\">\n&#x3C;app-item-output (newItemEvent)=\"addItem($event)\">&#x3C;/app-item-output>\n\n</code-example>\n<p>The event binding, <code>(newItemEvent)='addItem($event)'</code>, connects the event in the child, <code>newItemEvent</code>, to the method in the parent, <code>addItem()</code>.</p>\n<p>事件绑定 <code>(newItemEvent)='addItem($event)'</code> 会把子组件中的 <code>newItemEvent</code> 事件连接到父组件的 <code>addItem()</code> 方法。</p>\n<p>The <code>$event</code> contains the data that the user types into the <code>&#x3C;input></code> in the child template UI.</p>\n<p><code>$event</code> 中包含用户在子组件模板上的 <code>&#x3C;input></code> 中键入的数据。</p>\n<p>To see the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> working, add the following to the parent's template:</p>\n<p>要了解 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的工作方式，你可以把以下内容添加到父组件的模板中：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> iterates over the items in the <code>items</code> array.\nWhen you enter a value in the child's <code>&#x3C;input></code> and click the button, the child emits the event and the parent's <code>addItem()</code> method pushes the value to the <code>items</code> array and new item renders in the list.</p>\n<p><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 会迭代 <code>items</code> 数组中的条目。当你在子组件的 <code>&#x3C;input></code> 中输入一个值并单击该按钮时，子组件就会发出该事件，而父组件的 <code>addItem()</code> 方法会把这个值追加到其 <code>items</code> 数组中，并且列表中会渲染出这个新条目。</p>\n</li>\n</ol>\n<h2 id=\"using-input-and-output-together\">Using <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#using-input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"同时使用-input-和-output\">同时使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#同时使用-input-和-output\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same child component as follows:</p>\n<p>可以在同一个子组件上使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，范例如下：</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"together\">\n&#x3C;app-input-output\n  [item]=\"currentItem\"\n  (deleteRequest)=\"crossOffItem($event)\">\n&#x3C;/app-input-output>\n\n</code-example>\n<p>The target, <code>item</code>, which is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property in the child component class, receives its value from the parent's property, <code>currentItem</code>.\nWhen you click delete, the child component raises an event, <code>deleteRequest</code>, which is the argument for the parent's <code>crossOffItem()</code> method.</p>\n<p>目标 <code>item</code> 是子组件类中的一个 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性，它会从父组件的 <code>currentItem</code> 属性中获取它的值。当你单击“删除”时，子组件就会引发一个事件 <code>deleteRequest</code>，它会作为父组件中 <code>crossOffItem()</code> 方法的参数。</p>\n<p>The following diagram shows the different parts of the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the <code>&#x3C;app-input-output></code> child component.</p>\n<p>下图展示了子组件 <code>&#x3C;app-input-output></code> 中 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的各个部分。</p>\n<div class=\"lightbox\">\n<img alt=\"Diagram of an input target and an output target each bound to a source.\" src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" width=\"800\" height=\"333\">\n</div>\n<p>The child selector is <code>&#x3C;app-input-output></code> with <code>item</code> and <code>deleteRequest</code> being <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> properties in the child component class.\nThe property <code>currentItem</code> and the method <code>crossOffItem()</code> are both in the parent component class.</p>\n<p>这里的子选择器是 <code>&#x3C;app-input-output></code>，它所带的 <code>item</code> 和 <code>deleteRequest</code> 是子组件类中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性。而 <code>currentItem</code> 属性和 <code>crossOffItem()</code> 方法都位于父组件类中。</p>\n<p>To combine property and event bindings using the banana-in-a-box syntax, <code>[()]</code>, see <a href=\"guide/two-way-binding\">Two-way Binding</a>.</p>\n<p>要想用“盒子里的香蕉” <code>[()]</code> 语法来组合属性和事件绑定，参阅<a href=\"guide/two-way-binding\">双向绑定</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Input\n - api/core/Output\n - guide/built-in-directives\n - guide/component-interaction\n - guide/example-apps-list\n - guide/glossary\n - guide/observables-in-angular\n - guide/template-overview\n - guide/template-syntax\n - guide/two-way-binding\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnChanges\n - api/core/Output\n - guide/event-binding\n - guide/inputs-outputs#configuring-the-child-component\n - guide/inputs-outputs#configuring-the-child-component-1\n - guide/inputs-outputs#configuring-the-childs-template\n - guide/inputs-outputs#configuring-the-parent-component\n - guide/inputs-outputs#configuring-the-parent-component-1\n - guide/inputs-outputs#configuring-the-parents-template\n - guide/inputs-outputs#sending-data-to-a-child-component\n - guide/inputs-outputs#sending-data-to-a-parent-component\n - guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\n - guide/inputs-outputs#using-input-and-output-together\n - guide/inputs-outputs#watching-for-input-changes\n - guide/inputs-outputs#同时使用-input-和-output\n - guide/inputs-outputs#在父子指令及组件之间共享数据\n - guide/inputs-outputs#把数据发送到子组件\n - guide/inputs-outputs#把数据发送到父组件\n - guide/inputs-outputs#监视-input-的变更\n - guide/inputs-outputs#配置子组件\n - guide/inputs-outputs#配置子组件-1\n - guide/inputs-outputs#配置子组件的模板\n - guide/inputs-outputs#配置父组件\n - guide/inputs-outputs#配置父组件-1\n - guide/inputs-outputs#配置父组件的模板\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/property-binding\n - guide/template-reference-variables\n - guide/two-way-binding\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/inputs-outputs.md?message=docs%3A%20请简述你的修改...\n-->"
}