{
  "id": "guide/component-interaction",
  "title": "Component interaction",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/component-interaction.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"component-interaction\" translation-result=\"on\">组件之间的交互<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#component-interaction\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"component-interaction\">Component interaction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#component-interaction\"><i class=\"material-icons\">link</i></a></h1>\n\n<a id=\"top\"></a>\n<p translation-result=\"on\">本文包含了常见的组件通讯场景，也就是让两个或多个组件之间共享信息的方法。</p><p translation-origin=\"off\">This cookbook contains recipes for common component communication scenarios\nin which two or more components share information.</p>\n\n<a id=\"toc\"></a>\n<!--\n\n# Contents\n\n# 目录\n\n* [Pass data from parent to child with input binding](guide/component-interaction#parent-to-child)\n\n   [使用输入绑定把数据从父组件传给子组件](guide/component-interaction#parent-to-child)\n\n* [Intercept input property changes with a setter](guide/component-interaction#parent-to-child-setter)\n\n   [使用赋值器（setter）拦截输入属性的变化](guide/component-interaction#parent-to-child-setter)\n\n* [Intercept input property changes with `ngOnChanges()`](guide/component-interaction#parent-to-child-on-changes)\n\n   [使用 `ngOnChanges()` 拦截输入属性的变化](guide/component-interaction#parent-to-child-on-changes)\n\n* [Parent calls an `@ViewChild()`](guide/component-interaction#parent-to-view-child)\n\n   [在父组件中调用 `@ViewChild()`](guide/component-interaction#parent-to-view-child)\n\n* [Parent and children communicate via a service](guide/component-interaction#bidirectional-service)\n\n   [通过服务进行父子通讯](guide/component-interaction#bidirectional-service)\n\n-->\n<p translation-result=\"on\"><strong>参见<live-example name=\"component-interaction\"></live-example></strong>。</p><p translation-origin=\"off\"><strong>See the <live-example name=\"component-interaction\"></live-example></strong>.</p>\n\n<a id=\"parent-to-child\"></a>\n<h2 id=\"pass-data-from-parent-to-child-with-input-binding\" translation-result=\"on\">通过输入型绑定把数据从父组件传到子组件。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"pass-data-from-parent-to-child-with-input-binding\">Pass data from parent to child with input binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroChildComponent</code> 有两个<strong><em>输入型属性</em></strong>，它们通常带<a href=\"guide/template-syntax#inputs-outputs\">@Input 装饰器</a>。</p><p translation-origin=\"off\"><code>HeroChildComponent</code> has two <strong><em>input properties</em></strong>,\ntypically adorned with <a href=\"guide/template-syntax#inputs-outputs\">@Input decorations</a>.</p>\n\n<code-example path=\"component-interaction/src/app/hero-child.component.ts\" header=\"component-interaction/src/app/hero-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-child',\n  template: `\n    &#x3C;h3>{{hero.name}} says:&#x3C;/h3>\n    &#x3C;p>I, {{hero.name}}, am at your service, {{masterName}}.&#x3C;/p>\n  `\n})\nexport class HeroChildComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('master') masterName: string;\n}\n\n</code-example>\n<p translation-result=\"on\">第二个 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 为子组件的属性名 <code>masterName</code> 指定一个别名 <code>master</code>(译者注：不推荐为起别名，请参见风格指南).</p><p translation-origin=\"off\">The second <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> aliases the child component property name <code>masterName</code> as <code>'master'</code>.</p>\n\n<p translation-result=\"on\">父组件 <code>HeroParentComponent</code> 把子组件的 <code>HeroChildComponent</code> 放到 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 循环器中，把自己的 <code>master</code> 字符串属性绑定到子组件的 <code>master</code> 别名上，并把每个循环的 <code>hero</code> 实例绑定到子组件的 <code>hero</code> 属性。</p><p translation-origin=\"off\">The <code>HeroParentComponent</code> nests the child <code>HeroChildComponent</code> inside an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater,\nbinding its <code>master</code> string property to the child's <code>master</code> alias,\nand each iteration's <code>hero</code> instance to the child's <code>hero</code> property.</p>\n\n<code-example path=\"component-interaction/src/app/hero-parent.component.ts\" header=\"component-interaction/src/app/hero-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HEROES } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-parent',\n  template: `\n    &#x3C;h2>{{master}} controls {{heroes.length}} heroes&#x3C;/h2>\n    &#x3C;app-hero-child *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      [hero]=\"hero\"\n      [master]=\"master\">\n    &#x3C;/app-hero-child>\n  `\n})\nexport class HeroParentComponent {\n  heroes = HEROES;\n  master = 'Master';\n}\n\n</code-example>\n<p translation-result=\"on\">运行应用程序会显示三个英雄：</p><p translation-origin=\"off\">The running application displays three heroes:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/component-interaction/parent-to-child.png\" alt=\"Parent-to-child\" width=\"272\" height=\"267\">\n</div>\n<h3 class=\"no-toc\" id=\"test-it\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">端到端测试，用于确保所有的子组件都如预期般初始化并显示出来：</p><p translation-origin=\"off\">E2E test that all children were instantiated and displayed as expected:</p>\n\n<code-example path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"parent-to-child\" header=\"component-interaction/e2e/src/app.e2e-spec.ts\">\n// ...\nlet _heroNames = ['Dr IQ', 'Magneta', 'Bombasto'];\nlet _masterName = 'Master';\n\nit('should pass properties to children properly', function () {\n  let parent = element.all(by.tagName('app-hero-parent')).get(0);\n  let heroes = parent.all(by.tagName('app-hero-child'));\n\n  for (let i = 0; i &#x3C; _heroNames.length; i++) {\n    let childTitle = heroes.get(i).element(by.tagName('h3')).getText();\n    let childDetail = heroes.get(i).element(by.tagName('p')).getText();\n    expect(childTitle).toEqual(_heroNames[i] + ' says:');\n    expect(childDetail).toContain(_masterName);\n  }\n});\n// ...\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n<a id=\"parent-to-child-setter\"></a>\n<h2 id=\"intercept-input-property-changes-with-a-setter\" translation-result=\"on\">通过 setter 截听输入属性值的变化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#intercept-input-property-changes-with-a-setter\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"intercept-input-property-changes-with-a-setter\">Intercept input property changes with a setter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#intercept-input-property-changes-with-a-setter\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用一个输入属性的 setter，以拦截父组件中值的变化，并采取行动。</p><p translation-origin=\"off\">Use an input property setter to intercept and act upon a value from the parent.</p>\n\n<p translation-result=\"on\">子组件 <code>NameChildComponent</code> 的输入属性 <code>name</code> 上的这个 setter，会 trim 掉名字里的空格，并把空值替换成默认字符串。</p><p translation-origin=\"off\">The setter of the <code>name</code> input property in the child <code>NameChildComponent</code>\ntrims the whitespace from a name and replaces an empty value with default text.</p>\n\n<code-example path=\"component-interaction/src/app/name-child.component.ts\" header=\"component-interaction/src/app/name-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-child',\n  template: '&#x3C;h3>\"{{name}}\"&#x3C;/h3>'\n})\nexport class NameChildComponent {\n  private _name = '';\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  set name(name: string) {\n    this._name = (name &#x26;&#x26; name.trim()) || '&#x3C;no name set>';\n  }\n\n  get name(): string { return this._name; }\n}\n\n</code-example>\n<p translation-result=\"on\">下面的 <code>NameParentComponent</code> 展示了各种名字的处理方式，包括一个全是空格的名字。</p><p translation-origin=\"off\">Here's the <code>NameParentComponent</code> demonstrating name variations including a name with all spaces:</p>\n\n<code-example path=\"component-interaction/src/app/name-parent.component.ts\" header=\"component-interaction/src/app/name-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-parent',\n  template: `\n  &#x3C;h2>Master controls {{names.length}} names&#x3C;/h2>\n  &#x3C;app-name-child *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let name of names\" [name]=\"name\">&#x3C;/app-name-child>\n  `\n})\nexport class NameParentComponent {\n  // Displays 'Dr IQ', '&#x3C;no name set>', 'Bombasto'\n  names = ['Dr IQ', '   ', '  Bombasto  '];\n}\n\n</code-example>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/component-interaction/setter.png\" alt=\"Parent-to-child-setter\" width=\"322\" height=\"193\">\n</div>\n<h3 class=\"no-toc\" id=\"test-it-1\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-1\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it-1\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">端到端测试：输入属性的 setter，分别使用空名字和非空名字。</p><p translation-origin=\"off\">E2E tests of input property setter with empty and non-empty names:</p>\n\n<code-example path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"parent-to-child-setter\" header=\"component-interaction/e2e/src/app.e2e-spec.ts\">\n// ...\nit('should display trimmed, non-empty names', function () {\n  let _nonEmptyNameIndex = 0;\n  let _nonEmptyName = '\"Dr IQ\"';\n  let parent = element.all(by.tagName('app-name-parent')).get(0);\n  let hero = parent.all(by.tagName('app-name-child')).get(_nonEmptyNameIndex);\n\n  let displayName = hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(_nonEmptyName);\n});\n\nit('should replace empty name with default name', function () {\n  let _emptyNameIndex = 1;\n  let _defaultName = '\"&#x3C;no name set>\"';\n  let parent = element.all(by.tagName('app-name-parent')).get(0);\n  let hero = parent.all(by.tagName('app-name-child')).get(_emptyNameIndex);\n\n  let displayName = hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(_defaultName);\n});\n// ...\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n<a id=\"parent-to-child-on-changes\"></a>\n<h2 id=\"intercept-input-property-changes-with-ngonchanges\" translation-result=\"on\">通过<em>ngOnChanges()</em>来截听输入属性值的变化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#intercept-input-property-changes-with-ngonchanges\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"intercept-input-property-changes-with-ngonchanges\">Intercept input property changes with <em>ngOnChanges()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#intercept-input-property-changes-with-ngonchanges\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 生命周期钩子接口的 <code>ngOnChanges()</code> 方法来监测输入属性值的变化并做出回应。</p><p translation-origin=\"off\">Detect and act upon changes to input property values with the <code>ngOnChanges()</code> method of the <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> lifecycle hook interface.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">当需要监视多个、交互式输入属性的时候，本方法比用属性的 setter 更合适。</p><p translation-origin=\"off\">You may prefer this approach to the property setter when watching multiple, interacting input properties.</p>\n\n<p translation-result=\"on\">学习关于 <code>ngOnChanges()</code> 的更多知识，参见<a href=\"guide/lifecycle-hooks\">生命周期钩子</a>一章。</p><p translation-origin=\"off\">Learn about <code>ngOnChanges()</code> in the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> chapter.</p>\n\n</div>\n<p translation-result=\"on\">这个 <code>VersionChildComponent</code> 会监测输入属性 <code>major</code> 和 <code>minor</code> 的变化，并把这些变化编写成日志以报告这些变化。</p><p translation-origin=\"off\">This <code>VersionChildComponent</code> detects changes to the <code>major</code> and <code>minor</code> input properties and composes a log message reporting these changes:</p>\n\n<code-example path=\"component-interaction/src/app/version-child.component.ts\" header=\"component-interaction/src/app/version-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/SimpleChange\" class=\"code-anchor\">SimpleChange</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-version-child',\n  template: `\n    &#x3C;h3><a href=\"api/core/Version\" class=\"code-anchor\">Version</a> {{major}}.{{minor}}&#x3C;/h3>\n    &#x3C;h4>Change log:&#x3C;/h4>\n    &#x3C;ul>\n      &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let change of changeLog\">{{change}}&#x3C;/li>\n    &#x3C;/ul>\n  `\n})\nexport class VersionChildComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() major: number;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() minor: number;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: {[propKey: string]: <a href=\"api/core/SimpleChange\" class=\"code-anchor\">SimpleChange</a>}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let to = JSON.stringify(changedProp.currentValue);\n      if (changedProp.isFirstChange()) {\n        log.push(`Initial value of ${propName} set to ${to}`);\n      } else {\n        let from = JSON.stringify(changedProp.previousValue);\n        log.push(`${propName} changed from ${from} to ${to}`);\n      }\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>VersionParentComponent</code> 提供 <code>minor</code> 和 <code>major</code> 值，把修改它们值的方法绑定到按钮上。</p><p translation-origin=\"off\">The <code>VersionParentComponent</code> supplies the <code>minor</code> and <code>major</code> values and binds buttons to methods that change them.</p>\n\n<code-example path=\"component-interaction/src/app/version-parent.component.ts\" header=\"component-interaction/src/app/version-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-version-parent',\n  template: `\n    &#x3C;h2>Source code version&#x3C;/h2>\n    &#x3C;button (click)=\"newMinor()\">New minor version&#x3C;/button>\n    &#x3C;button (click)=\"newMajor()\">New major version&#x3C;/button>\n    &#x3C;app-version-child [major]=\"major\" [minor]=\"minor\">&#x3C;/app-version-child>\n  `\n})\nexport class VersionParentComponent {\n  major = 1;\n  minor = 23;\n\n  newMinor() {\n    this.minor++;\n  }\n\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">下面是点击按钮的结果。</p><p translation-origin=\"off\">Here's the output of a button-pushing sequence:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/component-interaction/parent-to-child-on-changes.gif\" alt=\"Parent-to-child-onchanges\" width=\"481\" height=\"264\">\n</div>\n<h3 class=\"no-toc\" id=\"test-it-2\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-2\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it-2\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-2\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">测试确保<strong><em>这两个</em></strong>输入属性值都被初始化了，当点击按钮后，<code>ngOnChanges</code> 应该被调用，属性的值也符合预期。</p><p translation-origin=\"off\">Test that <strong><em>both</em></strong> input properties are set initially and that button clicks trigger\nthe expected <code>ngOnChanges</code> calls and values:</p>\n\n<code-example path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"parent-to-child-onchanges\" header=\"component-interaction/e2e/src/app.e2e-spec.ts\">\n// ...\n// Test must all execute in this exact order\nit('should set expected initial values', function () {\n  let actual = getActual();\n\n  let initialLabel = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 1.23';\n  let initialLog = 'Initial value of major set to 1, Initial value of minor set to 23';\n\n  expect(actual.label).toBe(initialLabel);\n  expect(actual.count).toBe(1);\n  expect(actual.logs.get(0).getText()).toBe(initialLog);\n});\n\nit('should set expected values after clicking \\'Minor\\' twice', function () {\n  let repoTag = element(by.tagName('app-version-parent'));\n  let newMinorButton = repoTag.all(by.tagName('button')).get(0);\n\n  newMinorButton.click().then(function() {\n    newMinorButton.click().then(function() {\n      let actual = getActual();\n\n      let labelAfter2Minor = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 1.25';\n      let logAfter2Minor = 'minor changed from 24 to 25';\n\n      expect(actual.label).toBe(labelAfter2Minor);\n      expect(actual.count).toBe(3);\n      expect(actual.logs.get(2).getText()).toBe(logAfter2Minor);\n    });\n  });\n});\n\nit('should set expected values after clicking \\'Major\\' once', function () {\n  let repoTag = element(by.tagName('app-version-parent'));\n  let newMajorButton = repoTag.all(by.tagName('button')).get(1);\n\n  newMajorButton.click().then(function() {\n    let actual = getActual();\n\n    let labelAfterMajor = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 2.0';\n    let logAfterMajor = 'major changed from 1 to 2, minor changed from 25 to 0';\n\n    expect(actual.label).toBe(labelAfterMajor);\n    expect(actual.count).toBe(4);\n    expect(actual.logs.get(3).getText()).toBe(logAfterMajor);\n  });\n});\n\nfunction getActual() {\n  let versionTag = element(by.tagName('app-version-child'));\n  let label = versionTag.element(by.tagName('h3')).getText();\n  let ul = versionTag.element((by.tagName('ul')));\n  let logs = ul.all(by.tagName('li'));\n\n  return {\n    label: label,\n    logs: logs,\n    count: logs.count()\n  };\n}\n// ...\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n<a id=\"child-to-parent\"></a>\n<h2 id=\"parent-listens-for-child-event\" translation-result=\"on\">父组件监听子组件的事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-listens-for-child-event\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"parent-listens-for-child-event\">Parent listens for child event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-listens-for-child-event\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">子组件暴露一个 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 属性，当事件发生时，子组件利用该属性 <code>emits</code>(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应。</p><p translation-origin=\"off\">The child component exposes an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> property with which it <code>emits</code> events when something happens.\nThe parent binds to that event property and reacts to those events.</p>\n\n<p translation-result=\"on\">子组件的 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 属性是一个<strong>输出属性</strong>，通常带有<a href=\"guide/template-syntax#inputs-outputs\">@Output 装饰器</a>，就像在 <code>VoterComponent</code> 中看到的。</p><p translation-origin=\"off\">The child's <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> property is an <strong><em>output property</em></strong>,\ntypically adorned with an <a href=\"guide/template-syntax#inputs-outputs\">@Output decoration</a>\nas seen in this <code>VoterComponent</code>:</p>\n\n<code-example path=\"component-interaction/src/app/voter.component.ts\" header=\"component-interaction/src/app/voter.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-voter',\n  template: `\n    &#x3C;h4>{{name}}&#x3C;/h4>\n    &#x3C;button (click)=\"vote(true)\"  [disabled]=\"didVote\">Agree&#x3C;/button>\n    &#x3C;button (click)=\"vote(false)\" [disabled]=\"didVote\">Disagree&#x3C;/button>\n  `\n})\nexport class VoterComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  name: string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() voted = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;boolean>();\n  didVote = false;\n\n  vote(agreed: boolean) {\n    this.voted.emit(agreed);\n    this.didVote = true;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">点击按钮会触发 <code>true</code> 或 <code>false</code>(布尔型<em>有效载荷</em>)的事件。</p><p translation-origin=\"off\">Clicking a button triggers emission of a <code>true</code> or <code>false</code>, the boolean <em>payload</em>.</p>\n\n<p translation-result=\"on\">父组件 <code>VoteTakerComponent</code> 绑定了一个事件处理器(<code>onVoted()</code>)，用来响应子组件的事件(<code>$event</code>)并更新一个计数器。</p><p translation-origin=\"off\">The parent <code>VoteTakerComponent</code> binds an event handler called <code>onVoted()</code> that responds to the child event\npayload <code>$event</code> and updates a counter.</p>\n\n<code-example path=\"component-interaction/src/app/votetaker.component.ts\" header=\"component-interaction/src/app/votetaker.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }      from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-vote-taker',\n  template: `\n    &#x3C;h2>Should mankind colonize the Universe?&#x3C;/h2>\n    &#x3C;h3>Agree: {{agreed}}, Disagree: {{disagreed}}&#x3C;/h3>\n    &#x3C;app-voter *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let voter of voters\"\n      [name]=\"voter\"\n      (voted)=\"onVoted($event)\">\n    &#x3C;/app-voter>\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Narco', 'Celeritas', 'Bombasto'];\n\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">本框架把事件参数(用 <code>$event</code> 表示)传给事件处理方法，该方法会处理它：</p><p translation-origin=\"off\">The framework passes the event argument—represented by <code>$event</code>—to the handler method,\nand the method processes it:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/component-interaction/child-to-parent.gif\" alt=\"Child-to-parent\" width=\"418\" height=\"342\">\n</div>\n<h3 class=\"no-toc\" id=\"test-it-3\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-3\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it-3\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-3\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">测试确保点击 <em>Agree</em> 和 <em>Disagree</em> 按钮时，计数器被正确更新。</p><p translation-origin=\"off\">Test that clicking the <em>Agree</em> and <em>Disagree</em> buttons update the appropriate counters:</p>\n\n<code-example path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"child-to-parent\" header=\"component-interaction/e2e/src/app.e2e-spec.ts\">\n// ...\nit('should not emit the event initially', function () {\n  let voteLabel = element(by.tagName('app-vote-taker'))\n    .element(by.tagName('h3')).getText();\n  expect(voteLabel).toBe('Agree: 0, Disagree: 0');\n});\n\nit('should process Agree vote', function () {\n  let agreeButton1 = element.all(by.tagName('app-voter')).get(0)\n    .all(by.tagName('button')).get(0);\n  agreeButton1.click().then(function() {\n    let voteLabel = element(by.tagName('app-vote-taker'))\n      .element(by.tagName('h3')).getText();\n    expect(voteLabel).toBe('Agree: 1, Disagree: 0');\n  });\n});\n\nit('should process Disagree vote', function () {\n  let agreeButton1 = element.all(by.tagName('app-voter')).get(1)\n    .all(by.tagName('button')).get(1);\n  agreeButton1.click().then(function() {\n    let voteLabel = element(by.tagName('app-vote-taker'))\n      .element(by.tagName('h3')).getText();\n    expect(voteLabel).toBe('Agree: 1, Disagree: 1');\n  });\n});\n// ...\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n<h2 id=\"parent-interacts-with-child-via-local-variable\" translation-result=\"on\">父组件与子组件通过<em>本地变量</em>互动<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-interacts-with-child-via-local-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"parent-interacts-with-child-via-local-variable\">Parent interacts with child via <em>local variable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-interacts-with-child-via-local-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">父组件不能使用数据绑定来读取子组件的属性或调用子组件的方法。但可以在父组件模板里，新建一个本地变量来代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法，如下例所示。</p><p translation-origin=\"off\">A parent component cannot use data binding to read child properties\nor invoke child methods. You can do both\nby creating a template reference variable for the child element\nand then reference that variable <em>within the parent template</em>\nas seen in the following example.</p>\n\n<a id=\"countdown-timer-example\"></a>\n<p translation-result=\"on\">子组件 <code>CountdownTimerComponent</code> 进行倒计时，归零时发射一个导弹。<code>start</code> 和 <code>stop</code> 方法负责控制时钟并在模板里显示倒计时的状态信息。</p><p translation-origin=\"off\">The following is a child <code>CountdownTimerComponent</code> that repeatedly counts down to zero and launches a rocket.\nIt has <code>start</code> and <code>stop</code> methods that control the clock and it displays a\ncountdown status message in its own template.</p>\n\n<code-example path=\"component-interaction/src/app/countdown-timer.component.ts\" header=\"component-interaction/src/app/countdown-timer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-timer',\n  template: '&#x3C;p>{{message}}&#x3C;/p>'\n})\nexport class CountdownTimerComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n\n  intervalId = 0;\n  message = '';\n  seconds = 11;\n\n  clearTimer() { clearInterval(this.intervalId); }\n\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n\n  private countDown() {\n    this.clearTimer();\n    this.intervalId = window.setInterval(() => {\n      this.seconds -= 1;\n      if (this.seconds === 0) {\n        this.message = 'Blast off!';\n      } else {\n        if (this.seconds &#x3C; 0) { this.seconds = 10; } // reset\n        this.message = `T-${this.seconds} seconds and counting`;\n      }\n    }, 1000);\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">计时器组件的宿主组件 <code>CountdownLocalVarParentComponent</code> 如下：</p><p translation-origin=\"off\">The <code>CountdownLocalVarParentComponent</code> that hosts the timer component is as follows:</p>\n\n<code-example path=\"component-interaction/src/app/countdown-parent.component.ts\" region=\"lv\" header=\"component-interaction/src/app/countdown-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-parent-lv',\n  template: `\n  &#x3C;h3>Countdown to Liftoff (via local variable)&#x3C;/h3>\n  &#x3C;button (click)=\"timer.start()\">Start&#x3C;/button>\n  &#x3C;button (click)=\"timer.stop()\">Stop&#x3C;/button>\n  &#x3C;div class=\"seconds\">{{timer.seconds}}&#x3C;/div>\n  &#x3C;app-countdown-timer #timer>&#x3C;/app-countdown-timer>\n  `,\n  styleUrls: ['../assets/demo.css']\n})\nexport class CountdownLocalVarParentComponent { }\n\n</code-example>\n<p translation-result=\"on\">父组件不能通过数据绑定使用子组件的 <code>start</code> 和 <code>stop</code> 方法，也不能访问子组件的 <code>seconds</code> 属性。</p><p translation-origin=\"off\">The parent component cannot data bind to the child's\n<code>start</code> and <code>stop</code> methods nor to its <code>seconds</code> property.</p>\n\n<p translation-result=\"on\">把本地变量(<code>#timer</code>)放到(<code>&#x3C;countdown-timer></code>)标签中，用来代表子组件。这样父组件的模板就得到了子组件的引用，于是可以在父组件的模板中访问子组件的所有属性和方法。</p><p translation-origin=\"off\">You can place a local variable, <code>#timer</code>, on the tag <code>&#x3C;countdown-timer></code> representing the child component.\nThat gives you a reference to the child component and the ability to access\n<em>any of its properties or methods</em> from within the parent template.</p>\n\n<p translation-result=\"on\">这个例子把父组件的按钮绑定到子组件的 <code>start</code> 和 <code>stop</code> 方法，并用插值来显示子组件的 <code>seconds</code> 属性。</p><p translation-origin=\"off\">This example wires parent buttons to the child's <code>start</code> and <code>stop</code> and\nuses interpolation to display the child's <code>seconds</code> property.</p>\n\n<p translation-result=\"on\">下面是父组件和子组件一起工作时的效果。</p><p translation-origin=\"off\">Here we see the parent and child working together.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/component-interaction/countdown-timer-anim.gif\" alt=\"countdown timer\" width=\"212\" height=\"172\">\n</div>\n<a id=\"countdown-tests\"></a>\n<h3 class=\"no-toc\" id=\"test-it-4\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-4\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it-4\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-4\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">测试确保在父组件模板中显示的秒数和子组件状态信息里的秒数同步。它还会点击 <em>Stop</em> 按钮来停止倒计时：</p><p translation-origin=\"off\">Test that the seconds displayed in the parent template\nmatch the seconds displayed in the child's status message.\nTest also that clicking the <em>Stop</em> button pauses the countdown timer:</p>\n\n<code-example path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"countdown-timer-tests\" header=\"component-interaction/e2e/src/app.e2e-spec.ts\">\n// ...\nit('timer and parent seconds should match', function () {\n  let parent = element(by.tagName(parentTag));\n  let message = parent.element(by.tagName('app-countdown-timer')).getText();\n  browser.sleep(10); // give `seconds` a chance to catchup with `message`\n  let seconds = parent.element(by.className('seconds')).getText();\n  expect(message).toContain(seconds);\n});\n\nit('should stop the countdown', function () {\n  let parent = element(by.tagName(parentTag));\n  let stopButton = parent.all(by.tagName('button')).get(1);\n\n  stopButton.click().then(function() {\n    let message = parent.element(by.tagName('app-countdown-timer')).getText();\n    expect(message).toContain('Holding');\n  });\n});\n// ...\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n<a id=\"parent-to-view-child\"></a>\n<h2 id=\"parent-calls-an-viewchild\" translation-result=\"on\">父组件调用<em>@ViewChild()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-calls-an-viewchild\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"parent-calls-an-viewchild\">Parent calls an <em>@ViewChild()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-calls-an-viewchild\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">这个<em>本地变量</em>方法是个简单便利的方法。但是它也有局限性，因为父组件-子组件的连接必须全部在父组件的模板中进行。父组件本身的代码对子组件没有访问权。</p><p translation-origin=\"off\">The <em>local variable</em> approach is simple and easy. But it is limited because\nthe parent-child wiring must be done entirely within the parent template.\nThe parent component <em>itself</em> has no access to the child.</p>\n\n<p translation-result=\"on\">如果父组件的<em>类</em>需要读取子组件的属性值或调用子组件的方法，就不能使用<em>本地变量</em>方法。</p><p translation-origin=\"off\">You can't use the <em>local variable</em> technique if an instance of the parent component <em>class</em>\nmust read or write child component values or must call child component methods.</p>\n\n<p translation-result=\"on\">当父组件<em>类</em>需要这种访问时，可以把子组件作为 <em>ViewChild</em>，<strong><em>注入</em></strong>到父组件里面。</p><p translation-origin=\"off\">When the parent component <em>class</em> requires that kind of access,\n<strong><em>inject</em></strong> the child component into the parent as a <em>ViewChild</em>.</p>\n\n<p translation-result=\"on\">下面的例子用与<a href=\"guide/component-interaction#countdown-timer-example\">倒计时</a>相同的范例来解释这种技术。\n它的外观或行为没有变化。子组件<a href=\"guide/component-interaction#countdown-timer-example\">CountdownTimerComponent</a>也和原来一样。</p><p translation-origin=\"off\">The following example illustrates this technique with the same\n<a href=\"guide/component-interaction#countdown-timer-example\">Countdown Timer</a> example.\nNeither its appearance nor its behavior will change.\nThe child <a href=\"guide/component-interaction#countdown-timer-example\">CountdownTimerComponent</a> is the same as well.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">由<em>本地变量</em>切换到 <em>ViewChild</em> 技术的唯一目的就是做示范。</p><p translation-origin=\"off\">The switch from the <em>local variable</em> to the <em>ViewChild</em> technique\nis solely for the purpose of demonstration.</p>\n\n</div>\n<p translation-result=\"on\">下面是父组件 <code>CountdownViewChildParentComponent</code>:</p><p translation-origin=\"off\">Here is the parent, <code>CountdownViewChildParentComponent</code>:</p>\n\n<code-example path=\"component-interaction/src/app/countdown-parent.component.ts\" region=\"vc\" header=\"component-interaction/src/app/countdown-parent.component.ts\">\nimport { <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>, <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a> } from '@angular/core';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-parent-vc',\n  template: `\n  &#x3C;h3>Countdown to Liftoff (via <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>)&#x3C;/h3>\n  &#x3C;button (click)=\"start()\">Start&#x3C;/button>\n  &#x3C;button (click)=\"stop()\">Stop&#x3C;/button>\n  &#x3C;div class=\"seconds\">{{ seconds() }}&#x3C;/div>\n  &#x3C;app-countdown-timer>&#x3C;/app-countdown-timer>\n  `,\n  styleUrls: ['../assets/demo.css']\n})\nexport class CountdownViewChildParentComponent implements <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n\n  seconds() { return 0; }\n\n  ngAfterViewInit() {\n    // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n    // but wait a <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> first to avoid one-time devMode\n    // unidirectional-data-flow-violation error\n    setTimeout(() => this.seconds = () => this.timerComponent.seconds, 0);\n  }\n\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n\n</code-example>\n<p translation-result=\"on\">把子组件的视图插入到父组件类需要做一点额外的工作。</p><p translation-origin=\"off\">It takes a bit more work to get the child view into the parent component <em>class</em>.</p>\n\n<p translation-result=\"on\">首先，你必须导入对装饰器 <code><a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 以及生命周期钩子 <code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a></code> 的引用。</p><p translation-origin=\"off\">First, you have to import references to the <code><a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> decorator and the <code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a></code> lifecycle hook.</p>\n\n<p translation-result=\"on\">接着，通过 <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 属性装饰器，将子组件 <code>CountdownTimerComponent</code> 注入到私有属性 <code>timerComponent</code> 里面。</p><p translation-origin=\"off\">Next, inject the child <code>CountdownTimerComponent</code> into the private <code>timerComponent</code> property\nvia the <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> property decoration.</p>\n\n<p translation-result=\"on\">组件元数据里就不再需要 <code>#timer</code> 本地变量了。而是把按钮绑定到父组件自己的 <code>start</code> 和 <code>stop</code> 方法，使用父组件的 <code>seconds</code> 方法的插值来展示秒数变化。</p><p translation-origin=\"off\">The <code>#timer</code> local variable is gone from the component metadata.\nInstead, bind the buttons to the parent component's own <code>start</code> and <code>stop</code> methods and\npresent the ticking seconds in an interpolation around the parent component's <code>seconds</code> method.</p>\n\n<p translation-result=\"on\">这些方法可以直接访问被注入的计时器组件。</p><p translation-origin=\"off\">These methods access the injected timer component directly.</p>\n\n<p translation-result=\"on\"><code>ngAfterViewInit()</code> 生命周期钩子是非常重要的一步。被注入的计时器组件只有在 Angular 显示了父组件视图之后才能访问，所以它先把秒数显示为 0.</p><p translation-origin=\"off\">The <code>ngAfterViewInit()</code> lifecycle hook is an important wrinkle.\nThe timer component isn't available until <em>after</em> Angular displays the parent view.\nSo it displays <code>0</code> seconds initially.</p>\n\n<p translation-result=\"on\">然后 Angular 会调用 <code>ngAfterViewInit</code> 生命周期钩子，但这时候再更新父组件视图的倒计时就已经太晚了。Angular 的单向数据流规则会阻止在同一个周期内更新父组件视图。应用在显示秒数之前会被迫<em>再等一轮</em>。</p><p translation-origin=\"off\">Then Angular calls the <code>ngAfterViewInit</code> lifecycle hook at which time it is <em>too late</em>\nto update the parent view's display of the countdown seconds.\nAngular's unidirectional data flow rule prevents updating the parent view's\nin the same cycle. The app has to <em>wait one turn</em> before it can display the seconds.</p>\n\n<p translation-result=\"on\">使用 <code>setTimeout()</code> 来等下一轮，然后改写 <code>seconds()</code> 方法，这样它接下来就会从注入的这个计时器组件里获取秒数的值。</p><p translation-origin=\"off\">Use <code>setTimeout()</code> to wait one tick and then revise the <code>seconds()</code> method so\nthat it takes future values from the timer component.</p>\n\n<h3 class=\"no-toc\" id=\"test-it-5\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-5\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it-5\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-5\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用和之前<a href=\"guide/component-interaction#countdown-tests\">一样的倒计时测试</a>。</p><p translation-origin=\"off\">Use <a href=\"guide/component-interaction#countdown-tests\">the same countdown timer tests</a> as before.</p>\n\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n<a id=\"bidirectional-service\"></a>\n<h2 id=\"parent-and-children-communicate-via-a-service\" translation-result=\"on\">父组件和子组件通过服务来通讯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-and-children-communicate-via-a-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"parent-and-children-communicate-via-a-service\">Parent and children communicate via a service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-and-children-communicate-via-a-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">父组件和它的子组件共享同一个服务，利用该服务<em>在组件家族内部</em>实现双向通讯。</p><p translation-origin=\"off\">A parent component and its children share a service whose interface enables bi-directional communication\n<em>within the family</em>.</p>\n\n<p translation-result=\"on\">该服务实例的作用域被限制在父组件和其子组件内。这个组件子树之外的组件将无法访问该服务或者与它们通讯。</p><p translation-origin=\"off\">The scope of the service instance is the parent component and its children.\nComponents outside this component subtree have no access to the service or their communications.</p>\n\n<p translation-result=\"on\">这个 <code>MissionService</code> 把 <code>MissionControlComponent</code> 和多个 <code>AstronautComponent</code> 子组件连接起来。</p><p translation-origin=\"off\">This <code>MissionService</code> connects the <code>MissionControlComponent</code> to multiple <code>AstronautComponent</code> children.</p>\n\n<code-example path=\"component-interaction/src/app/mission.service.ts\" header=\"component-interaction/src/app/mission.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Subject }    from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MissionService {\n\n  // Observable string sources\n  private missionAnnouncedSource = new Subject&#x3C;string>();\n  private missionConfirmedSource = new Subject&#x3C;string>();\n\n  // Observable string streams\n  missionAnnounced$ = this.missionAnnouncedSource.asObservable();\n  missionConfirmed$ = this.missionConfirmedSource.asObservable();\n\n  // Service message commands\n  announceMission(mission: string) {\n    this.missionAnnouncedSource.next(mission);\n  }\n\n  confirmMission(astronaut: string) {\n    this.missionConfirmedSource.next(astronaut);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>MissionControlComponent</code> 提供服务的实例，并将其共享给它的子组件(通过 <code>providers</code> 元数据数组)，子组件可以通过构造函数将该实例注入到自身。</p><p translation-origin=\"off\">The <code>MissionControlComponent</code> both provides the instance of the service that it shares with its children\n(through the <code>providers</code> metadata array) and injects that instance into itself through its constructor:</p>\n\n<code-example path=\"component-interaction/src/app/missioncontrol.component.ts\" header=\"component-interaction/src/app/missioncontrol.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }          from '@angular/core';\n\nimport { MissionService }     from './mission.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-mission-control',\n  template: `\n    &#x3C;h2>Mission Control&#x3C;/h2>\n    &#x3C;button (click)=\"announce()\">Announce mission&#x3C;/button>\n    &#x3C;app-astronaut *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let astronaut of astronauts\"\n      [astronaut]=\"astronaut\">\n    &#x3C;/app-astronaut>\n    &#x3C;h3>History&#x3C;/h3>\n    &#x3C;ul>\n      &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let event of history\">{{event}}&#x3C;/li>\n    &#x3C;/ul>\n  `,\n  providers: [MissionService]\n})\nexport class MissionControlComponent {\n  astronauts = ['Lovell', 'Swigert', 'Haise'];\n  history: string[] = [];\n  missions = ['Fly to the moon!',\n              'Fly to mars!',\n              'Fly to Vegas!'];\n  nextMission = 0;\n\n  constructor(private missionService: MissionService) {\n    missionService.missionConfirmed$.subscribe(\n      astronaut => {\n        this.history.push(`${astronaut} confirmed the mission`);\n      });\n  }\n\n  announce() {\n    let mission = this.missions[this.nextMission++];\n    this.missionService.announceMission(mission);\n    this.history.push(`Mission \"${mission}\" announced`);\n    if (this.nextMission >= this.missions.length) { this.nextMission = 0; }\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>AstronautComponent</code> 也通过自己的构造函数注入该服务。由于每个 <code>AstronautComponent</code> 都是 <code>MissionControlComponent</code> 的子组件，所以它们获取到的也是父组件的这个服务实例。</p><p translation-origin=\"off\">The <code>AstronautComponent</code> also injects the service in its constructor.\nEach <code>AstronautComponent</code> is a child of the <code>MissionControlComponent</code> and therefore receives its parent's service instance:</p>\n\n<code-example path=\"component-interaction/src/app/astronaut.component.ts\" header=\"component-interaction/src/app/astronaut.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> } from '@angular/core';\n\nimport { MissionService } from './mission.service';\nimport { Subscription }   from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-astronaut',\n  template: `\n    &#x3C;p>\n      {{astronaut}}: &#x3C;strong>{{mission}}&#x3C;/strong>\n      &#x3C;button\n        (click)=\"confirm()\"\n        [disabled]=\"!announced || confirmed\">\n        Confirm\n      &#x3C;/button>\n    &#x3C;/p>\n  `\n})\nexport class AstronautComponent implements <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() astronaut: string;\n  mission = '&#x3C;no mission announced>';\n  confirmed = false;\n  announced = false;\n  subscription: Subscription;\n\n  constructor(private missionService: MissionService) {\n    this.subscription = missionService.missionAnnounced$.subscribe(\n      mission => {\n        this.mission = mission;\n        this.announced = true;\n        this.confirmed = false;\n    });\n  }\n\n  confirm() {\n    this.confirmed = true;\n    this.missionService.confirmMission(this.astronaut);\n  }\n\n  ngOnDestroy() {\n    // prevent memory leak when component destroyed\n    this.subscription.unsubscribe();\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">注意，这个例子保存了 <code>subscription</code> 变量，并在 <code>AstronautComponent</code> 被销毁时调用 <code>unsubscribe()</code> 退订。\n这是一个用于防止内存泄漏的保护措施。实际上，在这个应用程序中并没有这个风险，因为 <code>AstronautComponent</code> 的生命期和应用程序的生命期一样长。但在更复杂的应用程序环境中就不一定了。</p><p translation-origin=\"off\">Notice that this example captures the <code>subscription</code> and <code>unsubscribe()</code> when the <code>AstronautComponent</code> is destroyed.\nThis is a memory-leak guard step. There is no actual risk in this app because the\nlifetime of a <code>AstronautComponent</code> is the same as the lifetime of the app itself.\nThat <em>would not</em> always be true in a more complex application.</p>\n\n<p translation-result=\"on\">不需要在 <code>MissionControlComponent</code> 中添加这个保护措施，因为它作为父组件，控制着 <code>MissionService</code> 的生命期。</p><p translation-origin=\"off\">You don't add this guard to the <code>MissionControlComponent</code> because, as the parent,\nit controls the lifetime of the <code>MissionService</code>.</p>\n\n</div>\n<p translation-result=\"on\"><em>History</em> 日志证明了：在父组件 <code>MissionControlComponent</code> 和子组件 <code>AstronautComponent</code> 之间，信息通过该服务实现了双向传递。</p><p translation-origin=\"off\">The <em>History</em> log demonstrates that messages travel in both directions between\nthe parent <code>MissionControlComponent</code> and the <code>AstronautComponent</code> children,\nfacilitated by the service:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/component-interaction/bidirectional-service.gif\" alt=\"bidirectional-service\" width=\"310\" height=\"346\">\n</div>\n<h3 class=\"no-toc\" id=\"test-it-6\" translation-result=\"on\">测试一下！<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-6\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"test-it-6\">Test it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-6\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">测试确保点击父组件 <code>MissionControlComponent</code> 和子组件 <code>AstronautComponent</code> 两个的组件的按钮时，<em>History</em> 日志和预期的一样。</p><p translation-origin=\"off\">Tests click buttons of both the parent <code>MissionControlComponent</code> and the <code>AstronautComponent</code> children\nand verify that the history meets expectations:</p>\n\n<code-example path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"bidirectional-service\" header=\"component-interaction/e2e/src/app.e2e-spec.ts\">\n// ...\nit('should announce a mission', function () {\n  let missionControl = element(by.tagName('app-mission-control'));\n  let announceButton = missionControl.all(by.tagName('button')).get(0);\n  announceButton.click().then(function () {\n    let history = missionControl.all(by.tagName('li'));\n    expect(history.count()).toBe(1);\n    expect(history.get(0).getText()).toMatch(/Mission.* announced/);\n  });\n});\n\nit('should confirm the mission by Lovell', function () {\n  testConfirmMission(1, 2, 'Lovell');\n});\n\nit('should confirm the mission by Haise', function () {\n  testConfirmMission(3, 3, 'Haise');\n});\n\nit('should confirm the mission by Swigert', function () {\n  testConfirmMission(2, 4, 'Swigert');\n});\n\nfunction testConfirmMission(buttonIndex: number, expectedLogCount: number, astronaut: string) {\n  let _confirmedLog = ' confirmed the mission';\n  let missionControl = element(by.tagName('app-mission-control'));\n  let confirmButton = missionControl.all(by.tagName('button')).get(buttonIndex);\n  confirmButton.click().then(function () {\n    let history = missionControl.all(by.tagName('li'));\n    expect(history.count()).toBe(expectedLogCount);\n    expect(history.get(expectedLogCount - 1).getText()).toBe(astronaut + _confirmedLog);\n  });\n}\n// ...\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/component-interaction#top\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/component-interaction#top\">Back to top</a></p>\n\n\n</div>\n\n<!-- links to this doc:\n - start\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/AfterViewInit\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Output\n - api/core/SimpleChange\n - api/core/Version\n - api/core/ViewChild\n - api/core/testing/tick\n - guide/component-interaction#component-interaction\n - guide/component-interaction#countdown-tests\n - guide/component-interaction#countdown-timer-example\n - guide/component-interaction#intercept-input-property-changes-with-a-setter\n - guide/component-interaction#intercept-input-property-changes-with-ngonchanges\n - guide/component-interaction#parent-and-children-communicate-via-a-service\n - guide/component-interaction#parent-calls-an-viewchild\n - guide/component-interaction#parent-interacts-with-child-via-local-variable\n - guide/component-interaction#parent-listens-for-child-event\n - guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\n - guide/component-interaction#test-it\n - guide/component-interaction#test-it-1\n - guide/component-interaction#test-it-2\n - guide/component-interaction#test-it-3\n - guide/component-interaction#test-it-4\n - guide/component-interaction#test-it-5\n - guide/component-interaction#test-it-6\n - guide/component-interaction#top\n - guide/lifecycle-hooks\n - guide/template-syntax#inputs-outputs\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/component-interaction.md?message=docs%3A%20请简述你的修改...\n-->"
}