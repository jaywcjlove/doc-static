{
  "id": "guide/http",
  "title": "HttpClient",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/http.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"httpclient\">HttpClient<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#httpclient\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-result=\"on\">大多数前端应用都需要通过 HTTP 协议与后端服务器通讯。现代浏览器支持使用两种不同的 API 发起 HTTP 请求：<code>XMLHttpRequest</code> 接口和 <code>fetch()</code> API。</p><p translation-origin=\"off\">Most front-end applications communicate with backend services over the HTTP protocol. Modern browsers support two different APIs for making HTTP requests: the <code>XMLHttpRequest</code> interface and the <code>fetch()</code> API.</p>\n\n<p translation-result=\"on\"><code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 中的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 类为 Angular 应用程序提供了一个简化的 API 来实现 HTTP 客户端功能。它基于浏览器提供的 <code>XMLHttpRequest</code> 接口。\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 带来的其它优点包括：可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持，以及更好的、基于可观察（Observable）对象的 API 以及流式错误处理机制。</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> offers a simplified client HTTP API for Angular applications\nthat rests on the <code>XMLHttpRequest</code> interface exposed by browsers.\nAdditional benefits of <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> include testability features, typed request and response objects, request and response interception, <code>Observable</code> apis, and streamlined error handling.</p>\n\n<p translation-result=\"on\">你可以到 <live-example></live-example> 中运行本章的代码。</p><p translation-origin=\"off\">You can run the <live-example></live-example> that accompanies this guide.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">该应用代码并不需要数据服务器。\n它基于 <a href=\"https://github.com/angular/in-memory-web-api/blob/master/README.md\">Angular <em>in-memory-web-api</em></a> 库，该库会替换 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 模块中的 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>。用于替换的这个服务会模拟 REST 风格的后端的行为。</p><p translation-origin=\"off\">The sample app does not require a data server.\nIt relies on the\n<a href=\"https://github.com/angular/in-memory-web-api/blob/master/README.md\">Angular <em>in-memory-web-api</em></a>,\nwhich replaces the <em>HttpClient</em> module's <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>.\nThe replacement service simulates the behavior of a REST-like backend.</p>\n\n<p translation-result=\"on\">到 <code>AppModule</code> 的 <code>imports</code> 中查看这个库是如何配置的。</p><p translation-origin=\"off\">Look at the <code>AppModule</code> <em>imports</em> to see how it is configured.</p>\n\n</div>\n<h2 id=\"setup\" translation-result=\"on\">准备工作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，就要先导入 Angular 的 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。大多数应用都会在根模块 <code>AppModule</code> 中导入它。</p><p translation-origin=\"off\">Before you can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you need to import the Angular <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>.\nMost apps do so in the root <code>AppModule</code>.</p>\n\n<code-example path=\"http/src/app/app.module.ts\" region=\"sketch\" header=\"app/app.module.ts (excerpt)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }         from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }    from '@angular/platform-browser';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    // import <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> after BrowserModule.\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p translation-result=\"on\">在 <code>AppModule</code> 中导入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 之后，你可以把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到应用类中，就像下面的 <code>ConfigService</code> 例子中这样。</p><p translation-origin=\"off\">Having imported <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> into the <code>AppModule</code>, you can inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>\ninto an application class as shown in the following <code>ConfigService</code> example.</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"proto\" header=\"app/config/config.service.ts (excerpt)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class ConfigService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<h2 id=\"requesting-data-from-server\" translation-result=\"on\">从服务器获取数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-data-from-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"requesting-data-from-server\">Requesting data from server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-data-from-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">应用通常会从服务器上获取 JSON 数据。\n比如，该应用可能要从服务器上获取配置文件 <code>config.json</code>，其中指定了一些特定资源的 URL。</p><p translation-origin=\"off\">Applications often request JSON data from the server.\nFor example, the app might need a configuration file on the server, <code>config.json</code>,\nthat specifies resource URLs.</p>\n\n<code-example path=\"http/src/assets/config.json\" header=\"assets/config.json\">\n{\n  \"heroesUrl\": \"api/heroes\",\n  \"textfile\": \"assets/textfile.txt\"\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>ConfigService</code> 会通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 <code>get()</code> 方法取得这个文件。</p><p translation-origin=\"off\">The <code>ConfigService</code> fetches this file with a <code>get()</code> method on <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_1\" header=\"app/config/config.service.ts (getConfig v.1)\">\nconfigUrl = 'assets/config.json';\n\ngetConfig() {\n  return this.http.get(this.configUrl);\n}\n\n</code-example>\n<p translation-result=\"on\">像 <code>ConfigComponent</code> 这样的组件会注入 <code>ConfigService</code>，并调用其 <code>getConfig</code> 方法。</p><p translation-origin=\"off\">A component, such as <code>ConfigComponent</code>, injects the <code>ConfigService</code> and calls\nthe <code>getConfig</code> service method.</p>\n\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v1\" header=\"app/config/config.component.ts (showConfig v.1)\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe((data: Config) => this.config = {\n        heroesUrl: data['heroesUrl'],\n        textfile:  data['textfile']\n    });\n}\n\n</code-example>\n<p translation-result=\"on\">这个服务方法返回配置数据的 <code>Observable</code> 对象，所以组件要<strong>订阅（subscribe）</strong> 该方法的返回值。\n订阅时的回调函数会把这些数据字段复制到组件的 <code><a href=\"api/router/Router#config\" class=\"code-anchor\">config</a></code> 对象中，它会在组件的模板中绑定，以供显示。</p><p translation-origin=\"off\">Because the service method returns an <code>Observable</code> of configuration data,\nthe component <strong>subscribes</strong> to the method's return value.\nThe subscription callback copies the data fields into the component's <code><a href=\"api/router/Router#config\" class=\"code-anchor\">config</a></code> object,\nwhich is data-bound in the component template for display.</p>\n\n<div class=\"callout is-helpful\">\n <header translation-result=\"on\">为什么要写服务？</header><header translation-origin=\"off\">Why write a service?</header>\n \n<p translation-result=\"on\">这个例子太简单，所以它也可以在组件本身的代码中调用 <code>Http.get()</code>，而不用借助服务。\n不过，在实战中，数据访问很少能一直这么简单。\n你通常要对数据做后处理、添加错误处理器，还可能加一些重试逻辑，以便应对网络抽风的情况。</p><p translation-origin=\"off\">This example is so simple that it is tempting to write the <code>Http.get()</code> inside the\ncomponent itself and skip the service.\nIn practice, however, data access rarely stays this simple.\nYou typically need to post-process the data, add error handling, and maybe some retry logic to\ncope with intermittent connectivity.</p>\n\n<p translation-result=\"on\">该组件很快就会因为这些数据方式的细节而变得杂乱不堪。\n组件变得难以理解、难以测试，并且这些数据访问逻辑无法被复用，也无法标准化。</p><p translation-origin=\"off\">The component quickly becomes cluttered with data access minutia.\nThe component becomes harder to understand, harder to test, and the data access logic can't be re-used or standardized.</p>\n\n<p translation-result=\"on\">这就是为什么最佳实践中要求把数据展现逻辑从数据访问逻辑中拆分出去，也就是说把数据访问逻辑包装进一个单独的服务中，\n并且在组件中把数据访问逻辑委托给这个服务。就算是这么简单的应用也要如此。</p><p translation-origin=\"off\">That's why it's a best practice to separate presentation of data from data access by\nencapsulating data access in a separate service and delegating to that service in\nthe component, even in simple cases like this one.</p>\n\n</div>\n<h3 id=\"requesting-a-typed-response\" translation-result=\"on\">请求带类型的响应<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-a-typed-response\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"requesting-a-typed-response\">Requesting a typed response<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-a-typed-response\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">您可以将 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 请求结构化，以声明响应对象的类型，从而使输出的用法更轻松和明显。\n所指定的响应类型会在编译期间充当类型声明。</p><p translation-origin=\"off\">You can structure your <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> request to declare the type of the response object, to make consuming the output easier and more obvious.\nSpecifying the response type acts as a type assertion during the compile time.</p>\n\n<p translation-result=\"on\">要指定响应对象类型，首先要定义一个具有所需属性的接口。（请使用接口而不是类；响应不能自动转换为类的实例。）</p><p translation-origin=\"off\">To specify the response object type, first define an interface with the required properties.\n(Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"config-interface\">\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n}\n\n</code-example>\n<p translation-result=\"on\">接下来，在服务器中把该接口指定为 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 调用的类型参数。</p><p translation-origin=\"off\">Next, specify that interface as the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> call's type parameter in the service.</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_2\" header=\"app/config/config.service.ts (getConfig v.2)\">\ngetConfig() {\n  // now returns an Observable of Config\n  return this.http.get&#x3C;Config>(this.configUrl);\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"> 当把接口作为类型参数传给 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法时，请使用 RxJS <code>map</code> 运算符根据 UI 的需要转换响应数据。然后，您可以将转换后的数据传给<a href=\"api/common/AsyncPipe\">异步管道</a> 。</p><p translation-origin=\"off\"> When you pass an interface as a type parameter to the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method, use the RxJS <code>map</code> operator to transform the response data as needed by the UI. You can then pass the transformed data to the <a href=\"api/common/AsyncPipe\">async pipe</a>.</p>\n\n</div>\n<p translation-result=\"on\">修改后的组件方法，其回调函数中获取一个带类型的对象，它易于使用，且消费起来更安全：</p><p translation-origin=\"off\">The callback in the updated component method receives a typed data object, which is\neasier and safer to consume:</p>\n\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v2\" header=\"app/config/config.component.ts (showConfig v.2)\">\n<a href=\"api/router/Router#config\" class=\"code-anchor\">config</a>: Config;\n\nshowConfig() {\n  this.configService.getConfig()\n    // clone the data object, using its known Config shape\n    .subscribe((data: Config) => this.config = { ...data });\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">指定响应类型是给 TypeScript 看的声明，它期待您的响应属于给定类型。\n这是一个构建时检查，并不保证服务器会实际使用此类型的对象进行响应。服务器 API 返回的实际类型是由服务端来保证的。</p><p translation-origin=\"off\">Specifying the response type is a declaration to TypeScript that it should expect your response to be of the given type.\nThis is a build-time check and doesn't guarantee that the server will actually respond with an object of this type. It is up to the server to ensure that the type specified by the server API is returned.</p>\n\n</div>\n<p translation-result=\"on\">要访问接口中定义的属性，必须将从 JSON 获得的对象显式转换为所需的响应类型。例如，以下 <code>subscribe</code> 回调会将 <code>data</code> 作为对象接收，然后进行类型转换以访问属性。</p><p translation-origin=\"off\">To access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type.\nFor example, the following <code>subscribe</code> callback receives <code>data</code> as an Object, and then type-casts it in order to access the properties.</p>\n\n<code-example>\n   .subscribe(data => this.config = {\n    heroesUrl: (data as any).heroesUrl,\n    textfile:  (data as any).textfile,\n   });\n\n</code-example>\n<h3 id=\"reading-the-full-response\" translation-result=\"on\">读取完整的响应体<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#reading-the-full-response\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"reading-the-full-response\">Reading the full response<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#reading-the-full-response\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">响应体可能并不包含你需要的全部信息。有时候服务器会返回一个特殊的响应头或状态码，以标记出特定的条件，因此读取它们可能是必要的。</p><p translation-origin=\"off\">The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</p>\n\n<p translation-result=\"on\">要这样做，你就要通过 <code>observe</code> 选项来告诉 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，你想要完整的响应信息，而不是只有响应体：</p><p translation-origin=\"off\">Tell <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> that you want the full response with the <code>observe</code> option:</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfigResponse\">\ngetConfigResponse(): Observable&#x3C;<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>> {\n  return this.http.get&#x3C;Config>(\n    this.configUrl, { observe: 'response' });\n}\n\n</code-example>\n<p translation-result=\"on\">现在 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 会返回一个 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 类型的 <code>Observable</code>，而不只是 JSON 数据。</p><p translation-origin=\"off\">Now <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns an <code>Observable</code> of type <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> rather than just the JSON data.</p>\n\n<p translation-result=\"on\">该组件的 <code>showConfigResponse()</code> 方法会像显示配置数据一样显示响应头：</p><p translation-origin=\"off\">The component's <code>showConfigResponse()</code> method displays the response headers as well as the configuration:</p>\n\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"showConfigResponse\" header=\"app/config/config.component.ts (showConfigResponse)\">\nshowConfigResponse() {\n  this.configService.getConfigResponse()\n    // resp is of type `<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>`\n    .subscribe(resp => {\n      // display its headers\n      const <a href=\"api/router/ParamMap#keys\" class=\"code-anchor\">keys</a> = resp.headers.keys();\n      this.headers = keys.map(key =>\n        `${key}: ${resp.headers.get(key)}`);\n\n      // access the body directly, which is typed as `Config`.\n      this.config = { ... resp.body };\n    });\n}\n\n</code-example>\n<p translation-result=\"on\">如你所见，该响应对象具有一个带有正确类型的 <code>body</code> 属性。</p><p translation-origin=\"off\">As you can see, the response object has a <code>body</code> property of the correct type.</p>\n\n<h3 id=\"making-a-jsonp-request\" translation-result=\"on\">发起 JSONP 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-jsonp-request\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"making-a-jsonp-request\">Making a JSONP request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-jsonp-request\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当服务器不支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS 协议</a>时，应用程序可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 跨域发出 <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> 请求。</p><p translation-origin=\"off\">Apps can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to make <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> requests across domains when the server doesn't support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS protocol</a>.</p>\n\n<p translation-result=\"on\">Angular 的JSONP 请求会返回一个 <code>Observable</code>。\n遵循订阅可观察对象变量的模式，并在使用 <a href=\"api/common/AsyncPipe\">async 管道</a>管理结果之前，使用 RxJS <code>map</code> 运算符转换响应。</p><p translation-origin=\"off\">Angular JSONP requests return an <code>Observable</code>.\nFollow the pattern for subscribing to observables and use the RxJS <code>map</code> operator to transform the response before using the <a href=\"api/common/AsyncPipe\">async pipe</a> to manage the results.</p>\n\n<p translation-result=\"on\">在 Angular 中，通过在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 中包含 <code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code> 来使用 JSONP。在以下示例中， <code>searchHeroes()</code> 方法使用 JSONP 请求来查询名称包含搜索词的英雄。</p><p translation-origin=\"off\">In Angular, use JSONP by including <code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code> in the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> imports.\nIn the following example, the <code>searchHeroes()</code> method uses a JSONP request to query for heroes whose names contain the search term.</p>\n\n<code-example language=\"ts\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable {\n  term = term.trim();\n\n  let heroesURL = `${this.heroesURL}?${term}`;\n  return this.http.jsonp(heroesUrl, 'callback').pipe(\n      catchError(this.handleError('searchHeroes', []) // then handle the error\n    );\n};\n</code-example>\n<p translation-result=\"on\">该请求将 <code>heroesURL</code> 作为第一个参数，并将回调函数名称作为第二个参数。响应被包装在回调函数中，该函数接受 JSONP 方法返回的可观察对象，并将它们通过管道传给错误处理程序。</p><p translation-origin=\"off\">This request passes the <code>heroesURL</code> as the first parameter and the callback function name as the second parameter.\nThe response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</p>\n\n<h3 id=\"requesting-non-json-data\" translation-result=\"on\">请求非 JSON 数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-non-json-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"requesting-non-json-data\">Requesting non-JSON data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-non-json-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">不是所有的 API 都会返回 JSON 数据。在下面这个例子中，<code>DownloaderService</code> 中的方法会从服务器读取文本文件，\n并把文件的内容记录下来，然后把这些内容使用 <code>Observable&#x3C;string></code> 的形式返回给调用者。</p><p translation-origin=\"off\">Not all APIs return JSON data.\nIn this next example, a <code>DownloaderService</code> method reads a text file from the server and logs the file contents, before returning those contents to the caller as an <code>Observable&#x3C;string></code>.</p>\n\n<code-example path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\" header=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\">\ngetTextFile(filename: string) {\n  // The Observable returned by get() is of type Observable&#x3C;string>\n  // because a text response was specified.\n  // There's no need to pass a &#x3C;string> type parameter to get().\n  return this.http.get(filename, {<a href=\"api/common/http/HttpRequest#responseType\" class=\"code-anchor\">responseType</a>: 'text'})\n    .pipe(\n      tap( // Log the result or error\n        data => this.log(filename, data),\n        error => this.logError(filename, error)\n      )\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">这里的 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回字符串而不是默认的 JSON 对象，因为它的 <code><a href=\"api/common/http/HttpRequest#responseType\" class=\"code-anchor\">responseType</a></code> 选项是 <code>'text'</code>。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns a string rather than the default JSON because of the <code><a href=\"api/common/http/HttpRequest#responseType\" class=\"code-anchor\">responseType</a></code> option.</p>\n\n<p translation-result=\"on\">RxJS 的 <code>tap</code> 操作符（如“窃听”中所述）使代码可以检查通过可观察对象的成功值和错误值，而不会干扰它们。</p><p translation-origin=\"off\">The RxJS <code>tap</code> operator (as in \"wiretap\") lets the code inspect both success and error values passing through the observable without disturbing them.</p>\n\n<p translation-result=\"on\">在 <code>DownloaderComponent</code> 中的 <code>download()</code> 方法通过订阅这个服务中的方法来发起一次请求。</p><p translation-origin=\"off\">A <code>download()</code> method in the <code>DownloaderComponent</code> initiates the request by subscribing to the service method.</p>\n\n<code-example path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\" header=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results => this.contents = results);\n}\n\n</code-example>\n<h2 id=\"error-handling\" translation-result=\"on\">错误处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#error-handling\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"error-handling\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#error-handling\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果这个请求导致了服务器错误怎么办？甚至，在烂网络下请求都没到服务器该怎么办？<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 就会返回一个错误（error）而不再是成功的响应。</p><p translation-origin=\"off\">What happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server? <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> will return an <em>error</em> object instead of a successful response.</p>\n\n<p translation-result=\"on\">通过在 <code>.subscribe()</code> 中添加第二个回调函数，你<em>可以</em>在组件中处理它：</p><p translation-origin=\"off\">You <em>could</em> handle in the component by adding a second callback to the <code>.subscribe()</code>:</p>\n\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v3\" header=\"app/config/config.component.ts (showConfig v.3 with error handling)\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe(\n      (data: Config) => this.config = { ...data }, // success path\n      error => this.error = error // error path\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">在数据访问失败时给用户一些反馈，确实是个好主意。\n不过，直接显示由 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 返回的原始错误数据还远远不够。</p><p translation-origin=\"off\">It's certainly a good idea to give the user some kind of feedback when data access fails.\nBut displaying the raw error object returned by <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is far from the best way to do it.</p>\n\n<a id=\"error-details\"></a>\n<h3 id=\"getting-error-details\" translation-result=\"on\">获取错误详情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#getting-error-details\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"getting-error-details\">Getting error details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#getting-error-details\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">检测错误的发生是第一步，不过如果知道具体发生了什么错误才会更有用。上面例子中传给回调函数的 <code>err</code> 参数的类型是 <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code>，它包含了这个错误中一些很有用的信息。</p><p translation-origin=\"off\">Detecting that an error occurred is one thing.\nInterpreting that error and composing a user-friendly response is a bit more involved.</p>\n\n<p translation-result=\"on\">可能发生的错误分为两种。如果后端返回了一个失败的返回码（如 404、500 等），它会返回一个错误响应体。</p><p translation-origin=\"off\">Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error <em>responses</em>.</p>\n\n<p translation-result=\"on\">或者，如果在客户端这边出了错误（比如在 RxJS 操作符 (operator) 中抛出的异常或某些阻碍完成这个请求的网络错误），就会抛出一个 <code><a href=\"api/core/MissingTranslationStrategy#Error\" class=\"code-anchor\">Error</a></code> 类型的异常。</p><p translation-origin=\"off\">Or something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator. These errors produce JavaScript <code>ErrorEvent</code> objects.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 会在 <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> 中捕获所有类型的错误信息，你可以查看这个响应体以了解到底发生了什么。</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> captures both kinds of errors in its <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> and you can inspect that response to figure out what really happened.</p>\n\n<p translation-result=\"on\">错误的探查、解释和解决是你应该在<em>服务</em>中做的事情，而不是在<em>组件</em>中。</p><p translation-origin=\"off\">Error inspection, interpretation, and resolution is something you want to do in the <em>service</em>,\nnot in the <em>component</em>.</p>\n\n<p translation-result=\"on\">你可能首先要设计一个错误处理器，就像这样：</p><p translation-origin=\"off\">You might first devise an error handler like this one:</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"handleError\" header=\"app/config/config.service.ts (handleError)\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.error instanceof ErrorEvent) {\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error.message);\n  } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n    console.error(\n      `Backend returned code ${error.status}, ` +\n      `body was: ${error.error}`);\n  }\n  // return an observable with a user-facing error <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>\n  return throwError(\n    'Something bad happened; please try again later.');\n};\n\n</code-example>\n<p translation-result=\"on\">注意，该处理器返回一个带有用户友好的错误信息的 RxJS <a href=\"guide/http#rxjs\"><code>ErrorObservable</code></a> 对象。\n该服务的消费者期望服务的方法返回某种形式的 <code>Observable</code>，就算是“错误的”也可以。</p><p translation-origin=\"off\">Notice that this handler returns an RxJS <a href=\"guide/http#rxjs\"><code>ErrorObservable</code></a> with a user-friendly error message.\nConsumers of the service expect service methods to return an <code>Observable</code> of some kind,\neven a \"bad\" one.</p>\n\n<p translation-result=\"on\">现在，你获取了由 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法返回的 <code>Observable</code>，并<em>把它们通过管道</em>传给错误处理器。</p><p translation-origin=\"off\">Now you take the <code>Observables</code> returned by the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods\nand <em>pipe them through</em> to the error handler.</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\" header=\"app/config/config.service.ts (getConfig v.3 with error handler)\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<h3 id=\"retrying\" translation-result=\"on\">重试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#retrying\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"retrying\">Retrying<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#retrying\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">有时候，错误只是临时性的，只要重试就可能会自动消失。\n比如，在移动端场景中可能会遇到网络中断的情况，只要重试一下就能拿到正确的结果。</p><p translation-origin=\"off\">Sometimes the error is transient and will go away automatically if you try again.\nFor example, network interruptions are common in mobile scenarios, and trying again\nmay produce a successful result.</p>\n\n<p translation-result=\"on\"><a href=\"guide/http#rxjs\">RxJS 库</a>提供了几个 <code>retry</code> 操作符，它们值得仔细看看。\n其中最简单的是 <code>retry()</code>，它可以对失败的 <code>Observable</code> 自动重新订阅几次。对 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法调用的结果进行<em>重新订阅</em>会导致重新发起 HTTP 请求。</p><p translation-origin=\"off\">The <a href=\"guide/http#rxjs\">RxJS library</a> offers several <em>retry</em> operators that are worth exploring.\nThe simplest is called <code>retry()</code> and it automatically re-subscribes to a failed <code>Observable</code> a specified number of times. <em>Re-subscribing</em> to the result of an <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call has the effect of reissuing the HTTP request.</p>\n\n<p translation-result=\"on\">把它插入到 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法结果的<em>管道</em>中，就放在错误处理器的紧前面。</p><p translation-origin=\"off\"><em>Pipe</em> it onto the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method result just before the error handler.</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig\" header=\"app/config/config.service.ts (getConfig with retry)\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n    );\n}\n\n</code-example>\n<a id=\"rxjs\"></a>\n<h2 id=\"observables-and-operators\" translation-result=\"on\">可观察对象 (Observable) 与操作符 (operator)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#observables-and-operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"observables-and-operators\">Observables and operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#observables-and-operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本章的前一节中引用了 RxJS 的 <code>Observable</code> 和 <code>operator</code>，比如 <code>catchError</code> 和 <code>retry</code>。\n接下来你还会遇到更多 RxJS 中的概念。</p><p translation-origin=\"off\">The previous sections of this guide referred to RxJS <code>Observables</code> and operators such as <code>catchError</code> and <code>retry</code>.\nYou will encounter more RxJS artifacts as you continue below.</p>\n\n<p translation-result=\"on\"><a href=\"http://reactivex.io/rxjs/\">RxJS</a> 是一个库，用于把异步调用和基于回调的代码组合成<em>函数式（functional）的</em>、<em>响应式（reactive）的</em>风格。\n很多 Angular API，包括 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 都会生成和消费 RxJS 的 <code>Observable</code>。</p><p translation-origin=\"off\"><a href=\"http://reactivex.io/rxjs/\">RxJS</a> is a library for composing asynchronous and callback-based code\nin a <em>functional, reactive style</em>.\nMany Angular APIs, including <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, produce and consume RxJS <code>Observables</code>.</p>\n\n<p translation-result=\"on\">RxJS 本身超出了本章的范围。你可以在网络上找到更多的学习资源。\n虽然只用少量的 RxJS 知识就可以获得解决方案，不过以后你会逐步提高 RxJS 技能，以便更高效的使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p><p translation-origin=\"off\">RxJS itself is out-of-scope for this guide. You will find many learning resources on the web.\nWhile you can get by with a minimum of RxJS knowledge, you'll want to grow your RxJS skills over time in order to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> effectively.</p>\n\n<p translation-result=\"on\">如果你在跟着教程敲下面这些代码片段，要注意你要自己导入这里出现的 RxJS 的可观察对象和操作符。就像 <code>ConfigService</code> 中的这些导入。</p><p translation-origin=\"off\">If you're following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These <code>ConfigService</code> imports are typical.</p>\n\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"rxjs-imports\" header=\"app/config/config.service.ts (RxJS imports)\">\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n</code-example>\n<h2 id=\"http-headers\" translation-result=\"on\">HTTP 标头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-headers\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"http-headers\">HTTP headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-headers\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">许多服务器需要额外的标头进行保存操作。例如，它们可能需要 <code>Content-Type</code> 标头来显式声明请求正文的 MIME 类型；或者服务器可能需要一个授权令牌。</p><p translation-origin=\"off\">Many servers require extra headers for save operations.\nFor example, they may require a \"Content-Type\" header to explicitly declare the MIME type of the request body; or the server may require an authorization token.</p>\n\n<h3 id=\"adding-headers\" translation-result=\"on\">添加请求头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#adding-headers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-headers\">Adding headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#adding-headers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroesService</code> 在 <code>httpOptions</code> 对象中就定义了一些这样的请求头，并把它传给每个 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的保存型方法。</p><p translation-origin=\"off\">The <code>HeroesService</code> defines such headers in an <code>httpOptions</code> object that will be passed\nto every <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> save method.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\" header=\"app/heroes/heroes.service.ts (httpOptions)\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    'Authorization': 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"updating-headers\" translation-result=\"on\">修改请求头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#updating-headers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"updating-headers\">Updating headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#updating-headers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你没法直接修改前述配置对象中的现有头，因为这个 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 类的实例是不可变的。</p><p translation-origin=\"off\">You can't directly modify the existing headers within the previous options\nobject because instances of the <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> class are immutable.</p>\n\n<p translation-result=\"on\">改用 <code>set()</code> 方法，以返回当前实例应用这些新更改后的克隆。</p><p translation-origin=\"off\">Use the <code>set()</code> method instead, to return a clone of the current instance with the new changes applied.</p>\n\n<p translation-result=\"on\">比如在发起下一个请求之前，如果旧的令牌已经过期了，你可能还要修改认证头。</p><p translation-origin=\"off\">Here's how you might update the authorization header (after the old token expired) before making the next request.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\" linenums=\"false\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<h2 id=\"sending-data-to-the-server\" translation-result=\"on\">把数据发送到服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#sending-data-to-the-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"sending-data-to-the-server\">Sending data to the server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#sending-data-to-the-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">除了从服务器获取数据之外，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 还支持修改型的请求，也就是说，通过 <code>PUT</code>、<code>POST</code>、<code>DELETE</code> 这样的 HTTP 方法把数据发送到服务器。</p><p translation-origin=\"off\">In addition to fetching data from the server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports mutating requests, that is, sending data to the server with other HTTP methods such as PUT, POST, and DELETE.</p>\n\n<p translation-result=\"on\">本指南中的这个范例应用包括一个简化版本的《英雄指南》，它会获取英雄数据，并允许用户添加、删除和修改它们。</p><p translation-origin=\"off\">The sample app for this guide includes a simplified version of the \"Tour of Heroes\" example\nthat fetches heroes and enables users to add, delete, and update them.</p>\n\n<p translation-result=\"on\">下面的这些章节中包括该范例的 <code>HeroesService</code> 中的一些方法片段。</p><p translation-origin=\"off\">The following sections excerpt methods of the sample's <code>HeroesService</code>.</p>\n\n<h3 id=\"making-a-post-request\" translation-result=\"on\">发起一个 POST 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-post-request\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"making-a-post-request\">Making a POST request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-post-request\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">应用经常把数据 <code>POST</code> 到服务器。它们会在提交表单时进行 <code>POST</code>。\n下面这个例子中，<code>HeroesService</code> 在把英雄添加到数据库中时，就会使用 <code>POST</code>。</p><p translation-origin=\"off\">Apps often POST data to a server. They POST when submitting a form.\nIn the following example, the <code>HeroesService</code> posts when adding a hero to the database.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\" header=\"app/heroes/heroes.service.ts (addHero)\">\n/** POST: add a new hero to the database */\naddHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 方法像 <code>get()</code> 一样也有类型参数（你会希望服务器返回一个新的英雄对象），它包含一个资源 URL。</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> method is similar to <code>get()</code> in that it has a type parameter\n(you're expecting the server to return the new hero)\nand it takes a resource URL.</p>\n\n<p translation-result=\"on\">它还接受另外两个参数：</p><p translation-origin=\"off\">It takes two more parameters:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><code>hero</code> - 要 <code>POST</code> 的请求体数据。</p><p translation-origin=\"off\"><code>hero</code> - the data to POST in the body of the request.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>httpOptions</code> - 这个例子中，该方法的选项<a href=\"guide/http#adding-headers\">指定了所需的请求头</a>。</p><p translation-origin=\"off\"><code>httpOptions</code> - the method options which, in this case, <a href=\"guide/http#adding-headers\">specify required headers</a>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">当然，它捕获错误的方式很像<a href=\"guide/http#error-details\">前面描述的</a>操作方式。</p><p translation-origin=\"off\">Of course it catches errors in much the same manner <a href=\"guide/http#error-details\">described above</a>.</p>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 通过订阅该服务方法返回的 <code>Observable</code> 发起了一次实际的 <code>POST</code> 操作。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> initiates the actual POST operation by subscribing to\nthe <code>Observable</code> returned by this service method.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\" header=\"app/heroes/heroes.component.ts (addHero)\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero => this.heroes.push(hero));\n\n</code-example>\n<p translation-result=\"on\">当服务器成功做出响应时，会带有这个新创建的英雄，然后该组件就会把这个英雄添加到正在显示的 <code>heroes</code> 列表中。</p><p translation-origin=\"off\">When the server responds successfully with the newly added hero, the component adds\nthat hero to the displayed <code>heroes</code> list.</p>\n\n<h3 id=\"making-a-delete-request\" translation-result=\"on\">发起 <code>DELETE</code> 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-delete-request\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"making-a-delete-request\">Making a DELETE request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-delete-request\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">该应用可以把英雄的 id 传给 <code>HttpClient.delete</code> 方法的请求 URL 来删除一个英雄。</p><p translation-origin=\"off\">This application deletes a hero with the <code>HttpClient.delete</code> method by passing the hero's id\nin the request URL.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\" header=\"app/heroes/heroes.service.ts (deleteHero)\">\n/** DELETE: delete the hero from the server */\ndeleteHero (id: number): Observable&#x3C;{}> {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">当 <code>HeroesComponent</code> 订阅了该服务方法返回的 <code>Observable</code> 时，就会发起一次实际的 <code>DELETE</code> 操作。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> initiates the actual DELETE operation by subscribing to\nthe <code>Observable</code> returned by this service method.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\" header=\"app/heroes/heroes.component.ts (deleteHero)\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p translation-result=\"on\">该组件不会等待删除操作的结果，所以它的 subscribe （订阅）中没有回调函数。不过就算你不关心结果，也仍然要订阅它。调用 <code>subscribe()</code> 方法会<strong>执行</strong>这个可观察对象，这时才会真的发起 DELETE 请求。</p><p translation-origin=\"off\">The component isn't expecting a result from the delete operation, so it subscribes without a callback. Even though you are not using the result, you still have to subscribe. Calling the <code>subscribe()</code> method <em>executes</em> the observable, which is what initiates the DELETE request.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">你必须调用 <code>subscribe()</code>，否则什么都不会发生。仅仅调用 <code>HeroesService.deleteHero()</code> 是<strong>不会发起 DELETE 请求的。</strong></p><p translation-origin=\"off\">You must call <em>subscribe()</em> or nothing happens. Just calling <code>HeroesService.deleteHero()</code> <strong>does not initiate the DELETE request.</strong></p>\n\n</div>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n<a id=\"always-subscribe\"></a>\n<p translation-result=\"on\"><strong>别忘了<em>订阅</em>！</strong></p><p translation-origin=\"off\"><strong>Always <em>subscribe</em>!</strong></p>\n\n<p translation-result=\"on\">在调用方法返回的可观察对象的 <code>subscribe()</code> 方法之前，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法不会发起 HTTP 请求。这适用于 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的<em>所有方法</em>。</p><p translation-origin=\"off\">An <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method does not begin its HTTP request until you call <code>subscribe()</code> on the observable returned by that method. This is true for <em>all</em> <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <em>methods</em>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"api/common/AsyncPipe\"><code>AsyncPipe</code></a> 会自动为你订阅（以及取消订阅）。</p><p translation-origin=\"off\">The <a href=\"api/common/AsyncPipe\"><code>AsyncPipe</code></a> subscribes (and unsubscribes) for you automatically.</p>\n\n</div>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的所有方法返回的可观察对象都设计为<em>冷的</em>。\nHTTP 请求的执行都是<em>延期执行的</em>，让你可以用 <code>tap</code> 和 <code>catchError</code> 这样的操作符来在实际执行什么之前，先对这个可观察对象进行扩展。</p><p translation-origin=\"off\">All observables returned from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods are <em>cold</em> by design.\nExecution of the HTTP request is <em>deferred</em>, allowing you to extend the\nobservable with additional operations such as  <code>tap</code> and <code>catchError</code> before anything actually happens.</p>\n\n<p translation-result=\"on\">调用 <code>subscribe(...)</code> 会触发这个可观察对象的执行，并导致 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 组合并把 HTTP 请求发给服务器。</p><p translation-origin=\"off\">Calling <code>subscribe(...)</code> triggers execution of the observable and causes\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to compose and send the HTTP request to the server.</p>\n\n<p translation-result=\"on\">你可以把这些可观察对象看做实际 HTTP 请求的<em>蓝图</em>。</p><p translation-origin=\"off\">You can think of these observables as <em>blueprints</em> for actual HTTP requests.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">实际上，每个 <code>subscribe()</code> 都会初始化此可观察对象的一次单独的、独立的执行。\n订阅两次就会导致发起两个 HTTP 请求。</p><p translation-origin=\"off\">In fact, each <code>subscribe()</code> initiates a separate, independent execution of the observable.\nSubscribing twice results in two HTTP requests.</p>\n\n<code-example language=\"javascript\">\nconst req = http.get&#x3C;Heroes>('/api/heroes');\n// 0 requests made - .subscribe() not called.\nreq.subscribe();\n// 1 request made.\nreq.subscribe();\n// 2 requests made.\n</code-example>\n</div>\n<h3 id=\"making-a-put-request\" translation-result=\"on\">发起 PUT 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-put-request\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"making-a-put-request\">Making a PUT request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-put-request\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">应用可以发送 PUT 请求，来使用修改后的数据完全替换掉一个资源。\n下面的 <code>HeroesService</code> 例子和 POST 的例子很像。</p><p translation-origin=\"off\">An app will send a PUT request to completely replace a resource with updated data.\nThe following <code>HeroesService</code> example is just like the POST example.</p>\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\" header=\"app/heroes/heroes.service.ts (updateHero)\">\n/** PUT: <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> the hero on the server. Returns the updated hero upon success. */\nupdateHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.put&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">因为<a href=\"guide/http#always-subscribe\">前面解释过的</a>原因，调用者（这里是 <code>HeroesComponent.update()</code>）必须 <code>subscribe()</code> 由 <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 返回的可观察对象，以发起这个调用。</p><p translation-origin=\"off\">For the reasons <a href=\"guide/http#always-subscribe\">explained above</a>, the caller (<code>HeroesComponent.update()</code> in this case) must <code>subscribe()</code> to the observable returned from the <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code>\nin order to initiate the request.</p>\n\n<h2 id=\"advanced-usage\" translation-result=\"on\">高级用法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#advanced-usage\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"advanced-usage\">Advanced usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#advanced-usage\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">我们已经讨论了 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 的基本 HTTP 功能，但有时候除了单纯发起请求和取回数据之外，你还要再做点别的。</p><p translation-origin=\"off\">We have discussed the basic HTTP functionality in <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>, but sometimes you need to do more than make simple requests and get data back.</p>\n\n<a id=\"intercepting-requests-and-responses\"></a>\n<h3 id=\"http-interceptors\" translation-result=\"on\">拦截请求和响应<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-interceptors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"http-interceptors\">HTTP interceptors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-interceptors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><em>HTTP</em> 拦截机制是 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 中的主要特性之一。\n使用这种拦截机制，你可以声明<em>一些拦截器</em>，用它们监视和转换从应用发送到服务器的 HTTP 请求。\n拦截器还可以用监视和转换从服务器返回到本应用的那些响应。\n多个拦截器会构成一个“请求/响应处理器”的双向链表。</p><p translation-origin=\"off\"><em>HTTP Interception</em> is a major feature of <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>.\nWith interception, you declare <em>interceptors</em> that inspect and transform HTTP requests from your application to the server.\nThe same interceptors may also inspect and transform the server's responses on their way back to the application.\nMultiple interceptors form a <em>forward-and-backward</em> chain of request/response handlers.</p>\n\n<p translation-result=\"on\">拦截器可以用一种常规的、标准的方式对每一次 HTTP 的请求/响应任务执行从认证到记日志等很多种<em>隐式</em>任务。</p><p translation-origin=\"off\">Interceptors can perform a variety of  <em>implicit</em> tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response.</p>\n\n<p translation-result=\"on\">如果没有拦截机制，那么开发人员将不得不对每次 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 调用<em>显式</em>实现这些任务。</p><p translation-origin=\"off\">Without interception, developers would have to implement these tasks <em>explicitly</em>\nfor each <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call.</p>\n\n<h4 id=\"write-an-interceptor\" translation-result=\"on\">编写拦截器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#write-an-interceptor\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"write-an-interceptor\">Write an interceptor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#write-an-interceptor\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要实现拦截器，就要实现一个实现了 <code><a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a></code> 接口中的 <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> 方法的类。</p><p translation-origin=\"off\">To implement an interceptor, declare a class that implements the <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> method of the <code><a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a></code> interface.</p>\n\n<p translation-result=\"on\"> 这里是一个什么也不做的<em>空白</em>拦截器，它只会不做任何修改的传递这个请求。</p><p translation-origin=\"off\"> Here is a do-nothing <em>noop</em> interceptor that simply passes the request through without touching it:</p>\n\n<code-example path=\"http/src/app/http-interceptors/noop-interceptor.ts\" header=\"app/http-interceptors/noop-interceptor.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport {\n  <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>, <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a>, <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>, <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>\n} from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\n\n/** Pass untouched request through to the next request handler. */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class NoopInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>):\n    Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    return next.handle(req);\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>intercept</code> 方法会把请求转换成一个最终返回 HTTP 响应体的 <code>Observable</code>。\n在这个场景中，每个拦截器都完全能自己处理这个请求。</p><p translation-origin=\"off\">The <code>intercept</code> method transforms a request into an <code>Observable</code> that eventually returns the HTTP response.\nIn this sense, each interceptor is fully capable of handling the request entirely by itself.</p>\n\n<p translation-result=\"on\">大多数拦截器拦截都会在传入时检查请求，然后把（可能被修改过的）请求转发给 <code>next</code> 对象的 <code>handle()</code> 方法，而 <code>next</code> 对象实现了 <a href=\"api/common/http/HttpHandler\"><code>HttpHandler</code></a> 接口。</p><p translation-origin=\"off\">Most interceptors inspect the request on the way in and forward the (perhaps altered) request to the <code>handle()</code> method of the <code>next</code> object which implements the <a href=\"api/common/http/HttpHandler\"><code>HttpHandler</code></a> interface.</p>\n\n<code-example language=\"javascript\">\nexport abstract class <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a> {\n  abstract handle(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>>;\n}\n</code-example>\n<p translation-result=\"on\">像 <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> 一样，<code>handle()</code> 方法也会把 HTTP 请求转换成 <a href=\"guide/http#httpevents\"><code>HttpEvents</code></a> 组成的 <code>Observable</code>，它最终包含的是来自服务器的响应。\n<code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> 函数可以检查这个可观察对象，并在把它返回给调用者之前修改它。</p><p translation-origin=\"off\">Like <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code>, the <code>handle()</code> method transforms an HTTP request into an <code>Observable</code> of <a href=\"guide/http#httpevents\"><code>HttpEvents</code></a> which ultimately include the server's response. The <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> method could inspect that observable and alter it before returning it to the caller.</p>\n\n<p translation-result=\"on\">这个<em>无操作的</em>拦截器，会直接使用原始的请求调用 <code>next.handle()</code>，并返回它返回的可观察对象，而不做任何后续处理。</p><p translation-origin=\"off\">This <em>no-op</em> interceptor simply calls <code>next.handle()</code> with the original request and returns the observable without doing a thing.</p>\n\n<h4 id=\"the-next-object\" translation-result=\"on\"><code>next</code> 对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#the-next-object\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"the-next-object\">The <em>next</em> object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#the-next-object\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>next</code> 对象表示拦截器链表中的下一个拦截器。\n这个链表中的最后一个 <code>next</code> 对象就是 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的后端处理器（backend handler），它会把请求发给服务器，并接收服务器的响应。</p><p translation-origin=\"off\">The <code>next</code> object represents the next interceptor in the chain of interceptors.\nThe final <code>next</code> in the chain is the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> backend handler that sends the request to the server and receives the server's response.</p>\n\n<p translation-result=\"on\">大多数的拦截器都会调用 <code>next.handle()</code>，以便这个请求流能走到下一个拦截器，并最终传给后端处理器。\n拦截器也<em>可以</em>不调用 <code>next.handle()</code>，使这个链路短路，并返回一个带有人工构造出来的服务器响应的 <a href=\"guide/http#caching\">自己的 <code>Observable</code></a>。</p><p translation-origin=\"off\">Most interceptors call <code>next.handle()</code> so that the request flows through to the next interceptor and, eventually, the backend handler.\nAn interceptor <em>could</em> skip calling <code>next.handle()</code>, short-circuit the chain, and <a href=\"guide/http#caching\">return its own <code>Observable</code></a> with an artificial server response.</p>\n\n<p translation-result=\"on\">这是一种常见的中间件模式，在像 Express.js 这样的框架中也会找到它。</p><p translation-origin=\"off\">This is a common middleware pattern found in frameworks such as Express.js.</p>\n\n<h4 id=\"provide-the-interceptor\" translation-result=\"on\">提供这个拦截器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#provide-the-interceptor\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"provide-the-interceptor\">Provide the interceptor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#provide-the-interceptor\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这个 <code>NoopInterceptor</code> 就是一个由 Angular <a href=\"guide/dependency-injection\">依赖注入 (DI)</a>系统管理的服务。\n像其它服务一样，你也必须先提供这个拦截器类，应用才能使用它。</p><p translation-origin=\"off\">The <code>NoopInterceptor</code> is a service managed by Angular's <a href=\"guide/dependency-injection\">dependency injection (DI)</a> system.\nLike other services, you must provide the interceptor class before the app can use it.</p>\n\n<p translation-result=\"on\">由于拦截器是 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务的（可选）依赖，所以你必须在提供 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的同一个（或其各级父注入器）注入器中提供这些拦截器。\n那些在 DI 创建完 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <em>之后</em>再提供的拦截器将会被忽略。</p><p translation-origin=\"off\">Because interceptors are (optional) dependencies of the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service,\nyou must provide them in the same injector (or a parent of the injector) that provides <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.\nInterceptors provided <em>after</em> DI creates the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> are ignored.</p>\n\n<p translation-result=\"on\">由于在 <code>AppModule</code> 中导入了 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>，导致本应用在其根注入器中提供了 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。所以你也同样要在 <code>AppModule</code> 中提供这些拦截器。</p><p translation-origin=\"off\">This app provides <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in the app's root injector, as a side-effect of importing the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> in <code>AppModule</code>.\nYou should provide interceptors in <code>AppModule</code> as well.</p>\n\n<p translation-result=\"on\">在从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 中导入了 <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> 注入令牌之后，编写如下的 <code>NoopInterceptor</code> 提供者注册语句：</p><p translation-origin=\"off\">After importing the <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> injection token from <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>,\nwrite the <code>NoopInterceptor</code> provider like this:</p>\n\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"noop-provider\">\n{ provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n\n</code-example>\n<p translation-result=\"on\">注意 <code>multi: true</code> 选项。\n这个必须的选项会告诉 Angular <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> 是一个<em>多重提供者</em>的令牌，表示它会注入一个多值的数组，而不是单一的值。</p><p translation-origin=\"off\">Note the <code>multi: true</code> option.\nThis required setting tells Angular that <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> is a token for a <em>multiprovider</em>\nthat injects an array of values, rather than a single value.</p>\n\n<p translation-result=\"on\">你<em>也可以</em>直接把这个提供者添加到 <code>AppModule</code> 中的提供者数组中，不过那样会非常啰嗦。况且，你将来还会用这种方式创建更多的拦截器并提供它们。\n你还要<a href=\"guide/http#interceptor-order\">特别注意提供这些拦截器的顺序</a>。</p><p translation-origin=\"off\">You <em>could</em> add this provider directly to the providers array of the <code>AppModule</code>.\nHowever, it's rather verbose and there's a good chance that\nyou'll create more interceptors and provide them in the same way.\nYou must also pay <a href=\"guide/http#interceptor-order\">close attention to the order</a>\nin which you provide these interceptors.</p>\n\n<p translation-result=\"on\">认真考虑创建一个封装桶（barrel）文件，用于把所有拦截器都收集起来，一起提供给 <code>httpInterceptorProviders</code> 数组，可以先从这个 <code>NoopInterceptor</code> 开始。</p><p translation-origin=\"off\">Consider creating a \"barrel\" file that gathers all the interceptor providers into an <code>httpInterceptorProviders</code> array, starting with this first one, the <code>NoopInterceptor</code>.</p>\n\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"interceptor-providers\" header=\"app/http-interceptors/index.ts\">\n/* \"Barrel\" of Http Interceptors */\nimport { <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { NoopInterceptor } from './noop-interceptor';\n\n/** Http interceptor providers in outside-in order */\nexport const httpInterceptorProviders = [\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n];\n\n</code-example>\n<p translation-result=\"on\">然后导入它，并把它加到 <code>AppModule</code> 的 <em><code>providers</code> 数组</em>中，就像这样：</p><p translation-origin=\"off\">Then import and add it to the <code>AppModule</code> <em>providers array</em> like this:</p>\n\n<code-example path=\"http/src/app/app.module.ts\" region=\"interceptor-providers\" header=\"app/app.module.ts (interceptor providers)\">\nproviders: [\n  httpInterceptorProviders\n],\n\n</code-example>\n<p translation-result=\"on\">当你再创建新的拦截器时，就同样把它们添加到 <code>httpInterceptorProviders</code> 数组中，而不用再修改 <code>AppModule</code>。</p><p translation-origin=\"off\">As you create new interceptors, add them to the <code>httpInterceptorProviders</code> array and\nyou won't have to revisit the <code>AppModule</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在完整版的范例代码中还有更多的拦截器。</p><p translation-origin=\"off\">There are many more interceptors in the complete sample code.</p>\n\n</div>\n<h4 id=\"interceptor-order\" translation-result=\"on\">拦截器的顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#interceptor-order\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"interceptor-order\">Interceptor order<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#interceptor-order\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">Angular 会按照你提供它们的顺序应用这些拦截器。\n如果你提供拦截器的顺序是先 <em>A</em>，再 <em>B</em>，再 <em>C</em>，那么请求阶段的执行顺序就是 <em>A->B->C</em>，而响应阶段的执行顺序则是\n<em>C->B->A</em>。</p><p translation-origin=\"off\">Angular applies interceptors in the order that you provide them.\nIf you provide interceptors <em>A</em>, then <em>B</em>, then <em>C</em>,  requests will flow in <em>A->B->C</em> and\nresponses will flow out <em>C->B->A</em>.</p>\n\n<p translation-result=\"on\">以后你就再也不能修改这些顺序或移除某些拦截器了。\n如果你需要动态启用或禁用某个拦截器，那就要在那个拦截器中自行实现这个功能。</p><p translation-origin=\"off\">You cannot change the order or remove interceptors later.\nIf you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.</p>\n\n<h4 id=\"httpevents\"><em>HttpEvents</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#httpevents\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">你可能会期望 <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> 和 <code>handle()</code> 方法会像大多数 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 中的方法那样返回 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;any></code> 的可观察对象。</p><p translation-origin=\"off\">You may have expected the <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> and <code>handle()</code> methods to return observables of <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;any></code> as most <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods do.</p>\n\n<p translation-result=\"on\">然而并没有，它们返回的是 <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any></code> 的可观察对象。</p><p translation-origin=\"off\">Instead they return observables of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any></code>.</p>\n\n<p translation-result=\"on\">这是因为拦截器工作的层级比那些 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法更低一些。每个 HTTP 请求都可能会生成很多个<em>事件</em>，包括上传和下载的进度事件。\n实际上，<code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 类本身就是一个事件，它的类型（<code>type</code>）是 <code><a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a></code>。</p><p translation-origin=\"off\">That's because interceptors work at a lower level than those <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods. A single HTTP request can generate multiple <em>events</em>, including upload and download progress events. The <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> class itself is actually an event, whose type is <code><a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a></code>.</p>\n\n<p translation-result=\"on\">很多拦截器只关心发出的请求，而对 <code>next.handle()</code> 返回的事件流不会做任何修改。</p><p translation-origin=\"off\">Many interceptors are only concerned with the outgoing request and simply return the event stream from <code>next.handle()</code> without modifying it.</p>\n\n<p translation-result=\"on\">但那些要检查和修改来自 <code>next.handle()</code> 的响应体的拦截器希望看到所有这些事件。\n所以，你的拦截器应该返回<em>你没碰过的所有事件</em>，除非你<em>有充分的理由不这么做</em>。</p><p translation-origin=\"off\">But interceptors that examine and modify the response from <code>next.handle()</code>\nwill see all of these events.\nYour interceptor should return <em>every event untouched</em> unless it has a <em>compelling reason to do otherwise</em>.</p>\n\n<h4 id=\"immutability\" translation-result=\"on\">不可变性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#immutability\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"immutability\">Immutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#immutability\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">虽然拦截器有能力改变请求和响应，但 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 和 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 实例的属性却是只读（<code>readonly</code>）的，\n因此让它们基本上是不可变的。</p><p translation-origin=\"off\">Although interceptors are capable of mutating requests and responses,\nthe <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> and <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> instance properties are <code>readonly</code>,\nrendering them largely immutable.</p>\n\n<p translation-result=\"on\">有充足的理由把它们做成不可变对象：应用可能会重试发送很多次请求之后才能成功，这就意味着这个拦截器链表可能会多次重复处理同一个请求。\n如果拦截器可以修改原始的请求对象，那么重试阶段的操作就会从修改过的请求开始，而不是原始请求。\n而这种不可变性，可以确保这些拦截器在每次重试时看到的都是同样的原始请求。</p><p translation-origin=\"off\">They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times.\nIf an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</p>\n\n<p translation-result=\"on\">通过把 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 的属性设置为只读的，TypeScript 可以防止你犯这种错误。</p><p translation-origin=\"off\">TypeScript will prevent you from setting <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> readonly properties.</p>\n\n<code-example language=\"javascript\">\n  // Typescript disallows the following assignment because req.url is readonly\n  req.url = req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://');\n</code-example>\n<p translation-result=\"on\">要想修改该请求，就要先克隆它，并修改这个克隆体，然后再把这个克隆体传给 <code>next.handle()</code>。\n你可以用一步操作中完成对请求的克隆和修改，例子如下：</p><p translation-origin=\"off\">To alter the request, clone it first and modify the clone before passing it to <code>next.handle()</code>.\nYou can clone and modify the request in a single step as in this example.</p>\n\n<code-example path=\"http/src/app/http-interceptors/ensure-https-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/ensure-https-interceptor.ts (excerpt)\">\n// clone request and replace '<a href=\"api/common/http\" class=\"code-anchor\">http</a>://' with 'https://' at the same <a href=\"\" class=\"code-anchor\">time</a>\nconst secureReq = req.clone({\n  url: req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://')\n});\n// send the cloned, \"secure\" request to the next handler.\nreturn next.handle(secureReq);\n\n</code-example>\n<p translation-result=\"on\">这个 <code>clone()</code> 方法的哈希型参数允许你在复制出克隆体的同时改变该请求的某些特定属性。</p><p translation-origin=\"off\">The <code>clone()</code> method's hash argument allows you to mutate specific properties of the request while copying the others.</p>\n\n<h5 id=\"the-request-body\" translation-result=\"on\">请求体<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#the-request-body\"><i class=\"material-icons\">link</i></a></h5><h5 translation-origin=\"off\" id=\"the-request-body\">The request body<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#the-request-body\"><i class=\"material-icons\">link</i></a></h5>\n\n<p translation-result=\"on\"><code>readonly</code> 这种赋值保护，无法防范深修改（修改子对象的属性），也不能防范你修改请求体对象中的属性。</p><p translation-origin=\"off\">The <code>readonly</code> assignment guard can't prevent deep updates and, in particular,\nit can't prevent you from modifying a property of a request body object.</p>\n\n<code-example language=\"javascript\">\n  req.body.name = req.body.name.trim(); // bad idea!\n</code-example>\n<p translation-result=\"on\">如果你必须修改请求体，那么就要先复制它，然后修改这个副本，<code>clone()</code> 这个请求，然后把这个请求体的副本作为新的请求体，例子如下：</p><p translation-origin=\"off\">If you must mutate the request body, copy it first, change the copy,\n<code>clone()</code> the request, and set the clone's body with the new body, as in the following example.</p>\n\n<code-example path=\"http/src/app/http-interceptors/trim-name-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/trim-name-interceptor.ts (excerpt)\">\n// copy the body and trim whitespace from the name property\nconst newBody = { ...body, name: body.name.trim() };\n// clone request and set its body\nconst newReq = req.clone({ body: newBody });\n// send the cloned request to the next handler.\nreturn next.handle(newReq);\n\n</code-example>\n<h5 id=\"clearing-the-request-body\" translation-result=\"on\">清空请求体<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#clearing-the-request-body\"><i class=\"material-icons\">link</i></a></h5><h5 translation-origin=\"off\" id=\"clearing-the-request-body\">Clearing the request body<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#clearing-the-request-body\"><i class=\"material-icons\">link</i></a></h5>\n\n<p translation-result=\"on\">有时你需要清空请求体，而不是替换它。\n如果你把克隆后的请求体设置成 <code>undefined</code>，Angular 会认为你是想让这个请求体保持原样。\n这显然不是你想要的。\n但如果把克隆后的请求体设置成 <code>null</code>，那 Angular 就知道你是想清空这个请求体了。</p><p translation-origin=\"off\">Sometimes you need to clear the request body rather than replace it.\nIf you set the cloned request body to <code>undefined</code>, Angular assumes you intend to leave the body as is.\nThat is not what you want.\nIf you set the cloned request body to <code>null</code>, Angular knows you intend to clear the request body.</p>\n\n<code-example language=\"javascript\">\n  newReq = req.clone({ ... }); // body not mentioned => preserve original body\n  newReq = req.clone({ body: undefined }); // preserve original body\n  newReq = req.clone({ body: null }); // clear the body\n</code-example>\n<h4 id=\"set-default-headers\" translation-result=\"on\">设置默认请求头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#set-default-headers\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"set-default-headers\">Set default headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#set-default-headers\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">应用通常会使用拦截器来设置外发请求的默认请求头。</p><p translation-origin=\"off\">Apps often use an interceptor to set default headers on outgoing requests.</p>\n\n<p translation-result=\"on\">该范例应用具有一个 <code>AuthService</code>，它会生成一个认证令牌。\n在这里，<code>AuthInterceptor</code> 会注入该服务以获取令牌，并对每一个外发的请求添加一个带有该令牌的认证头：</p><p translation-origin=\"off\">The sample app has an <code>AuthService</code> that produces an authorization token.\nHere is its <code>AuthInterceptor</code> that injects that service to get the token and\nadds an authorization header with that token to every outgoing request:</p>\n\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" header=\"app/http-interceptors/auth-interceptor.ts\">\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // Get the auth token from the service.\n    const authToken = this.auth.getAuthorizationToken();\n\n    // Clone the request and replace the original headers with\n    // cloned headers, updated with the authorization.\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    // send cloned request with header to the next handler.\n    return next.handle(authReq);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">这种在克隆请求的同时设置新请求头的操作太常见了，因此它还有一个快捷方式 <code>setHeaders</code>：</p><p translation-origin=\"off\">The practice of cloning a request to set new headers is so common that\nthere's a <code>setHeaders</code> shortcut for it:</p>\n\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" region=\"set-header-shortcut\">\n// Clone the request and set the new header in one step.\nconst authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n</code-example>\n<p translation-result=\"on\">这种可以修改头的拦截器可以用于很多不同的操作，比如：</p><p translation-origin=\"off\">An interceptor that alters headers can be used for a number of different operations, including:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 认证 / 授权</p><p translation-origin=\"off\">Authentication/authorization</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 控制缓存行为。比如 <code>If-Modified-Since</code></p><p translation-origin=\"off\">Caching behavior; for example, <code>If-Modified-Since</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> XSRF 防护</p><p translation-origin=\"off\">XSRF protection</p>\n\n</li>\n</ul>\n<h4 id=\"logging\" translation-result=\"on\">记日志<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#logging\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"logging\">Logging<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#logging\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">因为拦截器可以<em>同时</em>处理请求和响应，所以它们也可以对整个 HTTP 操作进行计时和记录日志。</p><p translation-origin=\"off\">Because interceptors can process the request and response <em>together</em>, they can do things like time and log\nan entire HTTP operation.</p>\n\n<p translation-result=\"on\">考虑下面这个 <code>LoggingInterceptor</code>，它捕获请求的发起时间、响应的接收时间，并使用注入的 <code>MessageService</code> 来发送总共花费的时间。</p><p translation-origin=\"off\">Consider the following <code>LoggingInterceptor</code>, which captures the time of the request,\nthe time of the response, and logs the outcome with the elapsed time\nwith the injected <code>MessageService</code>.</p>\n\n<code-example path=\"http/src/app/http-interceptors/logging-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/logging-interceptor.ts)\">\nimport { finalize, tap } from 'rxjs/operators';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class LoggingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private messenger: MessageService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    const started = Date.now();\n    let ok: string;\n\n    // extend server response observable with logging\n    return next.handle(req)\n      .pipe(\n        tap(\n          // Succeeds when there is a response; ignore other events\n          event => ok = event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a> ? 'succeeded' : '',\n          // Operation failed; error is an <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>\n          error => ok = 'failed'\n        ),\n        // Log when response observable either completes or errors\n        finalize(() => {\n          const elapsed = Date.now() - started;\n          const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n          this.messenger.add(msg);\n        })\n      );\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">RxJS 的 <code>tap</code> 操作符会捕获请求成功了还是失败了。\nRxJS 的 <code>finalize</code> 操作符无论在响应成功还是失败时都会调用（这是必须的），然后把结果汇报给 <code>MessageService</code>。</p><p translation-origin=\"off\">The RxJS <code>tap</code> operator captures whether the request succeeded or failed.\nThe RxJS <code>finalize</code> operator is called when the response observable either errors or completes (which it must),\nand reports the outcome to the <code>MessageService</code>.</p>\n\n<p translation-result=\"on\">在这个可观察对象的流中，无论是 <code>tap</code> 还是 <code>finalize</code> 接触过的值，都会照常发送给调用者。</p><p translation-origin=\"off\">Neither <code>tap</code> nor <code>finalize</code> touch the values of the observable stream returned to the caller.</p>\n\n<h4 id=\"caching\" translation-result=\"on\">缓存<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#caching\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"caching\">Caching<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#caching\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">拦截器还可以自行处理这些请求，而不用转发给 <code>next.handle()</code>。</p><p translation-origin=\"off\">Interceptors can handle requests by themselves, without forwarding to <code>next.handle()</code>.</p>\n\n<p translation-result=\"on\">比如，你可能会想缓存某些请求和响应，以便提升性能。\n你可以把这种缓存操作委托给某个拦截器，而不破坏你现有的各个数据服务。</p><p translation-origin=\"off\">For example, you might decide to cache certain requests and responses to improve performance.\nYou can delegate caching to an interceptor without disturbing your existing data services.</p>\n\n<p translation-result=\"on\"><code>CachingInterceptor</code> 演示了这种方式。</p><p translation-origin=\"off\">The <code>CachingInterceptor</code> demonstrates this approach.</p>\n\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"v1\" header=\"app/http-interceptors/caching-interceptor.ts)\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CachingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private cache: RequestCache) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // continue if not cachable.\n    if (!isCachable(req)) { return next.handle(req); }\n\n    const cachedResponse = this.cache.get(req);\n    return cachedResponse ?\n      of(cachedResponse) : sendRequest(req, next, this.cache);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>isCachable()</code> 函数用于决定该请求是否允许缓存。\n在这个例子中，只有发到 npm 包搜索 API 的 GET 请求才是可以缓存的。</p><p translation-origin=\"off\">The <code>isCachable()</code> function determines if the request is cachable.\nIn this sample, only GET requests to the npm package search api are cachable.</p>\n\n<p translation-result=\"on\">如果该请求是不可缓存的，该拦截器只会把该请求转发给链表中的下一个处理器。</p><p translation-origin=\"off\">If the request is not cachable, the interceptor simply forwards the request\nto the next handler in the chain.</p>\n\n<p translation-result=\"on\">如果可缓存的请求在缓存中找到了，该拦截器就会通过 <code>of()</code> 函数返回一个已缓存的响应体的<em>可观察对象</em>，然后绕过 <code>next</code> 处理器（以及所有其它下游拦截器）。</p><p translation-origin=\"off\">If a cachable request is found in the cache, the interceptor returns an <code>of()</code> <em>observable</em> with\nthe cached response, by-passing the <code>next</code> handler (and all other interceptors downstream).</p>\n\n<p translation-result=\"on\">如果可缓存的请求在缓存中没找到，代码就会调用 <code>sendRequest</code>。</p><p translation-origin=\"off\">If a cachable request is not in cache, the code calls <code>sendRequest</code>.</p>\n\n<a id=\"send-request\"></a>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"send-request\">\n/**\n * Get server response observable by sending request to `next()`.\n * Will add the response to the cache on the way out.\n */\nfunction sendRequest(\n  req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>,\n  next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>,\n  cache: RequestCache): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n\n  // No headers allowed in npm search request\n  const noHeaderReq = req.clone({ headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>() });\n\n  return next.handle(noHeaderReq).pipe(\n    tap(event => {\n      // There may be other events besides the response.\n      if (event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>) {\n        cache.put(req, event); // <a href=\"\" class=\"code-anchor\">Update</a> the cache.\n      }\n    })\n  );\n}\n\n</code-example>\n<p translation-result=\"on\"><code>sendRequest</code> 函数创建了一个不带请求头的<a href=\"guide/http#immutability\">请求克隆体</a>，因为 npm API 不会接受它们。</p><p translation-origin=\"off\">The <code>sendRequest</code> function creates a <a href=\"guide/http#immutability\">request clone</a> without headers\nbecause the npm api forbids them.</p>\n\n<p translation-result=\"on\">它会把这个请求转发给 <code>next.handle()</code>，它最终会调用服务器，并且返回服务器的响应。</p><p translation-origin=\"off\">It forwards that request to <code>next.handle()</code> which ultimately calls the server and\nreturns the server's response.</p>\n\n<p translation-result=\"on\">注意 <code>sendRequest</code> 是如何在发回给应用之前<em>拦截这个响应的</em>。\n它会通过 <code>tap()</code> 操作符对响应进行管道处理，并在其回调中把响应加到缓存中。</p><p translation-origin=\"off\">Note how <code>sendRequest</code> <em>intercepts the response</em> on its way back to the application.\nIt <em>pipes</em> the response through the <code>tap()</code> operator,\nwhose callback adds the response to the cache.</p>\n\n<p translation-result=\"on\">然后，原始的响应会通过这些拦截器链，原封不动的回到服务器的调用者那里。</p><p translation-origin=\"off\">The original response continues untouched back up through the chain of interceptors\nto the application caller.</p>\n\n<p translation-result=\"on\">数据服务，比如 <code>PackageSearchService</code>，并不知道它们收到的某些 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 请求实际上是从缓存的请求中返回来的。</p><p translation-origin=\"off\">Data services, such as <code>PackageSearchService</code>, are unaware that\nsome of their <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> requests actually return cached responses.</p>\n\n<a id=\"cache-refresh\"></a>\n<h4 id=\"return-a-multi-valued-observable\" translation-result=\"on\">返回多值可观察对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#return-a-multi-valued-observable\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"return-a-multi-valued-observable\">Return a multi-valued <em>Observable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#return-a-multi-valued-observable\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法正常情况下只会返回一个<em>可观察对象</em>，它或者发出数据，或者发出错误。\n有些人说它是“一次性完成”的可观察对象。</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method normally returns an <em>observable</em>\nthat either emits the data or an error.\nSome folks describe it as a \"<em>one and done</em>\" observable.</p>\n\n<p translation-result=\"on\">但是拦截器也可以把这个修改成发出多个值的<em>可观察对象</em>。</p><p translation-origin=\"off\">But an interceptor can change this to an <em>observable</em> that emits more than once.</p>\n\n<p translation-result=\"on\">修改后的 <code>CachingInterceptor</code> 版本可以返回一个立即发出缓存的响应，然后仍然把请求发送到 NPM 的 Web API，然后再把修改过的搜索结果重新发出一次。</p><p translation-origin=\"off\">A revised version of the <code>CachingInterceptor</code> optionally returns an <em>observable</em> that\nimmediately emits the cached response, sends the request to the NPM web API anyway,\nand emits again later with the updated search results.</p>\n\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"intercept-refresh\">\n// cache-then-refresh\nif (req.headers.get('x-refresh')) {\n  const results$ = sendRequest(req, next, this.cache);\n  return cachedResponse ?\n    results$.pipe( startWith(cachedResponse) ) :\n    results$;\n}\n// cache-or-fetch\nreturn cachedResponse ?\n  of(cachedResponse) : sendRequest(req, next, this.cache);\n\n</code-example>\n<p translation-result=\"on\">这种<em>缓存并刷新</em>的选项是由<strong>自定义的 <code>x-refresh</code> 头</strong>触发的。</p><p translation-origin=\"off\">The <em>cache-then-refresh</em> option is triggered by the presence of a <strong>custom <code>x-refresh</code> header</strong>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>PackageSearchComponent</code> 中的一个检查框会切换 <code>withRefresh</code> 标识，\n它是 <code>PackageSearchService.search()</code> 的参数之一。\n<code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> 方法创建了自定义的 <code>x-refresh</code> 头，并在调用 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 前把它添加到请求里。</p><p translation-origin=\"off\">A checkbox on the <code>PackageSearchComponent</code> toggles a <code>withRefresh</code> flag,\nwhich is one of the arguments to <code>PackageSearchService.search()</code>.\nThat <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> method creates the custom <code>x-refresh</code> header\nand adds it to the request before calling <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code>.</p>\n\n</div>\n<p translation-result=\"on\">修改后的 <code>CachingInterceptor</code> 会发起一个服务器请求，而不管有没有缓存的值。\n就像 <a href=\"guide/http#send-request\">前面</a> 的 <code>sendRequest()</code> 方法一样进行订阅。\n在订阅 <code>results$</code> 可观察对象时，就会发起这个请求。</p><p translation-origin=\"off\">The revised <code>CachingInterceptor</code> sets up a server request\nwhether there's a cached value or not,\nusing the same <code>sendRequest()</code> method described <a href=\"guide/http#send-request\">above</a>.\nThe <code>results$</code> observable will make the request when subscribed.</p>\n\n<p translation-result=\"on\">如果没有缓存的值，拦截器直接返回 <code>result$</code>。</p><p translation-origin=\"off\">If there's no cached value, the interceptor returns <code>results$</code>.</p>\n\n<p translation-result=\"on\">如果有缓存的值，这些代码就会把缓存的响应加入到 <code>result$</code> 的管道中，使用重组后的可观察对象进行处理，并发出两次。\n先立即发出一次缓存的响应体，然后发出来自服务器的响应。\n订阅者将会看到一个包含这<em>两个</em>响应的序列。</p><p translation-origin=\"off\">If there is a cached value, the code <em>pipes</em> the cached response onto\n<code>results$</code>, producing a recomposed observable that emits twice,\nthe cached response first (and immediately), followed later\nby the response from the server.\nSubscribers see a sequence of <em>two</em> responses.</p>\n\n<h3 id=\"configuring-the-request\" translation-result=\"on\">配置请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-the-request\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configuring-the-request\">Configuring the request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-the-request\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">待发送请求的其它方面可以通过传给 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法的最后一个参数指定的配置对象进行配置。</p><p translation-origin=\"off\">Other aspects of an outgoing request can be configured via the options object\npassed as the last argument to the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method.</p>\n\n<p translation-result=\"on\">在<a href=\"guide/http#adding-headers\">添加请求头</a> 部分，<code>HeroesService</code> 通过将选项对象（ <code>httpOptions</code> ）传给它的保存方法来设置默认请求头。您还可以做更多事。</p><p translation-origin=\"off\">In <a href=\"guide/http#adding-headers\">Adding headers</a>, the <code>HeroesService</code> set the default headers by\npassing an options object (<code>httpOptions</code>) to its save methods.\nYou can do more.</p>\n\n<h4 id=\"url-query-strings\" translation-result=\"on\">URL 查询字符串<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#url-query-strings\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"url-query-strings\">URL query strings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#url-query-strings\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">在本节中，您将看到如何使用 <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> 类在 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 中添加 URL 查询字符串。</p><p translation-origin=\"off\">In this section, you will see how to use the <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> class to add URL query strings in your <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>.</p>\n\n<p translation-result=\"on\">以下 <code>searchHeroes</code> 方法查询名称中包含搜索词的英雄。首先要导入 <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> 类。</p><p translation-origin=\"off\">The following <code>searchHeroes</code> method queries for heroes whose names contain the search term.\nStart by importing <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> class.</p>\n\n<code-example hidecopy=\"\" language=\"typescript\">\nimport {<a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>} from \"@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>\";\n</code-example>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroes\" linenums=\"false\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  term = term.trim();\n\n  // Add safe, <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a> encoded search parameter if there is a search term\n  const options = term ?\n   { params: new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>().set('name', term) } : {};\n\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl, options)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">如果有搜索词，这段代码就会构造一个包含进行过 URL 编码的搜索词的选项对象。如果这个搜索词是“foo”，这个 GET 请求的 URL 就会是 <code>api/heroes/?name=foo</code>。</p><p translation-origin=\"off\">If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter.\nIf the term were \"foo\", the GET request URL would be <code>api/heroes?name=foo</code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> 是不可变的，因此您必须保存 <code>.set()</code> 方法的返回值才能更新选项。</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> are immutable so you'll have to save the returned value of the <code>.set()</code> method in order to update the options.</p>\n\n<h4 id=\"use-fromstring-to-create-httpparams\" translation-result=\"on\">使用 <code>fromString</code> 创建 HttpParams<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#use-fromstring-to-create-httpparams\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"use-fromstring-to-create-httpparams\">Use <code>fromString</code> to create HttpParams<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#use-fromstring-to-create-httpparams\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">您还可以使用 <code>fromString</code> 变量直接从查询字符串创建 HTTP 参数：</p><p translation-origin=\"off\">You can also create HTTP parameters directly from a query string by using the <code>fromString</code> variable:</p>\n\n<code-example hidecopy=\"\" language=\"typescript\">\nconst params = new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>({fromString: 'name=foo'});\n</code-example>\n<h3 id=\"debouncing-requests\" translation-result=\"on\">请求的防抖（debounce）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#debouncing-requests\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"debouncing-requests\">Debouncing requests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#debouncing-requests\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">这个例子还包含了<em>搜索 npm 包</em>的特性。</p><p translation-origin=\"off\">The sample includes an <em>npm package search</em> feature.</p>\n\n<p translation-result=\"on\">当用户在搜索框中输入名字时，<code>PackageSearchComponent</code> 就会把一个根据名字搜索包的请求发送给 NPM 的 web api。</p><p translation-origin=\"off\">When the user enters a name in a search-box, the <code>PackageSearchComponent</code> sends\na search request for a package with that name to the NPM web API.</p>\n\n<p translation-result=\"on\">下面是模板中的相关代码片段：</p><p translation-origin=\"off\">Here's a pertinent excerpt from the template:</p>\n\n<code-example path=\"http/src/app/package-search/package-search.component.html\" region=\"search\" header=\"app/package-search/package-search.component.html (search)\">\n&#x3C;input (keyup)=\"search($event.target.value)\" id=\"name\" placeholder=\"Search\"/>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let package of packages$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\">\n    &#x3C;b>{{package.name}} v.{{package.version}}&#x3C;/b> -\n    &#x3C;i>{{package.description}}&#x3C;/i>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-result=\"on\"><code>(keyup)</code> 事件绑定把每次击键都发送给了组件的 <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> 方法。</p><p translation-origin=\"off\">The <code>keyup</code> event binding sends every keystroke to the component's <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> method.</p>\n\n<p translation-result=\"on\">如果每次击键都发送一次请求就太昂贵了。\n最好能等到用户停止输入时才发送请求。\n使用 RxJS 的操作符就能轻易实现它，参见下面的代码片段：</p><p translation-origin=\"off\">Sending a request for every keystroke could be expensive.\nIt's better to wait until the user stops typing and then send a request.\nThat's easy to implement with RxJS operators, as shown in this excerpt.</p>\n\n<code-example path=\"http/src/app/package-search/package-search.component.ts\" region=\"debounce\" header=\"app/package-search/package-search.component.ts (excerpt)\">\nwithRefresh = false;\npackages$: Observable&#x3C;NpmPackageInfo[]>;\nprivate searchText$ = new Subject&#x3C;string>();\n\nsearch(packageName: string) {\n  this.searchText$.next(packageName);\n}\n\nngOnInit() {\n  this.packages$ = this.searchText$.pipe(\n    debounceTime(500),\n    distinctUntilChanged(),\n    switchMap(packageName =>\n      this.searchService.search(packageName, this.withRefresh))\n  );\n}\n\nconstructor(private searchService: PackageSearchService) { }\n\n\n</code-example>\n<p translation-result=\"on\"><code>searchText$</code> 是来自用户的搜索框值的序列。它被定义为 RxJS <code>Subject</code> 类型，这意味着它是一个多播 <code>Observable</code> ，它还可以通过调用 <code>next(value)</code> 来自行发出值，就像在 <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> 方法中一样。</p><p translation-origin=\"off\">The <code>searchText$</code> is the sequence of search-box values coming from the user.\nIt's defined as an RxJS <code>Subject</code>, which means it is a multicasting <code>Observable</code>\nthat can also emit values for itself by calling <code>next(value)</code>,\nas happens in the <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> method.</p>\n\n<p translation-result=\"on\">除了把每个 <code>searchText</code> 的值都直接转发给 <code>PackageSearchService</code> 之外，<code>ngOnInit()</code> 中的代码还通过下列三个操作符对这些搜索值进行<em>管道</em>处理：</p><p translation-origin=\"off\">Rather than forward every <code>searchText</code> value directly to the injected <code>PackageSearchService</code>,\nthe code in <code>ngOnInit()</code> <em>pipes</em> search values through three operators:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><code>debounceTime(500)</code> - 等待，直到用户停止输入（这个例子中是停止 1/2 秒）。</p><p translation-origin=\"off\"><code>debounceTime(500)</code> - wait for the user to stop typing (1/2 second in this case).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>distinctUntilChanged()</code> - 等待搜索文本发生变化。</p><p translation-origin=\"off\"><code>distinctUntilChanged()</code> - wait until the search text changes.</p>\n\n</li>\n</ol>\n<ol start=\"3\">\n<li>\n<p translation-result=\"on\"><code>switchMap()</code> - 将搜索请求发送到服务。</p><p translation-origin=\"off\"><code>switchMap()</code> - send the search request to the service.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">这些代码把 <code>packages$</code> 设置成了使用搜索结果组合出的 <code>Observable</code> 对象。\n模板中使用 <a href=\"api/common/AsyncPipe\">AsyncPipe</a> 订阅了 <code>packages$</code>，一旦搜索结果的值发回来了，就显示这些搜索结果。</p><p translation-origin=\"off\">The code sets <code>packages$</code> to this re-composed <code>Observable</code> of search results.\nThe template subscribes to <code>packages$</code> with the <a href=\"api/common/AsyncPipe\">AsyncPipe</a>\nand displays search results as they arrive.</p>\n\n<p translation-result=\"on\">这样，只有当用户停止了输入且搜索值和以前不一样的时候，搜索值才会传给服务。</p><p translation-origin=\"off\">A search value reaches the service only if it's a new value and the user has stopped typing.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"guide/http#cache-refresh\">稍后</a> 解释了这个 <code>withRefresh</code> 选项。</p><p translation-origin=\"off\">The <code>withRefresh</code> option is explained <a href=\"guide/http#cache-refresh\">below</a>.</p>\n\n</div>\n<h4 id=\"switchmap\"><em>switchMap()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#switchmap\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">这个 <code>switchMap()</code> 操作符有三个重要的特征：</p><p translation-origin=\"off\">The <code>switchMap()</code> operator has three important characteristics.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">   它的参数是一个返回 <code>Observable</code> 的函数。<code>PackageSearchService.search</code> 会返回 <code>Observable</code>，其它数据服务也一样。</p><p translation-origin=\"off\">It takes a function argument that returns an <code>Observable</code>.\n<code>PackageSearchService.search</code> returns an <code>Observable</code>, as other data service methods do.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   如果先前的搜索请求仍在<em>进行中</em> （如网络连接不良），它将取消该请求并发送新的请求。</p><p translation-origin=\"off\">If a previous search request is still <em>in-flight</em> (as when the network connection is poor),\nit cancels that request and sends a new one.</p>\n\n</li>\n</ol>\n<ol start=\"3\">\n<li>\n<p translation-result=\"on\">   它会按照原始的请求顺序返回这些服务的响应，而不用关心服务器实际上是以乱序返回的它们。</p><p translation-origin=\"off\">It returns service responses in their original request order, even if the\nserver returns them out of order.</p>\n\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你觉得将来会复用这些防抖逻辑，\n可以把它移到单独的工具函数中，或者移到 <code>PackageSearchService</code> 中。</p><p translation-origin=\"off\">If you think you'll reuse this debouncing logic,\nconsider moving it to a utility function or into the <code>PackageSearchService</code> itself.</p>\n\n</div>\n<h3 id=\"listening-to-progress-events\" translation-result=\"on\">监听进度事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#listening-to-progress-events\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"listening-to-progress-events\">Listening to progress events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#listening-to-progress-events\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">有时，应用会传输大量数据，并且这些传输可能会花费很长时间。\n典型的例子是文件上传。\n可以通过在传输过程中提供进度反馈，来提升用户体验。</p><p translation-origin=\"off\">Sometimes applications transfer large amounts of data and those transfers can take a long time.\nFile uploads are a typical example.\nGive the users a better experience by providing feedback on the progress of such transfers.</p>\n\n<p translation-result=\"on\">要想发起带有进度事件的请求，你可以创建一个把 <code><a href=\"api/common/http/HttpRequest#reportProgress\" class=\"code-anchor\">reportProgress</a></code> 选项设置为 <code>true</code> 的 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 实例，以开启进度跟踪事件。</p><p translation-origin=\"off\">To make a request with progress events enabled, you can create an instance of <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>\nwith the <code><a href=\"api/common/http/HttpRequest#reportProgress\" class=\"code-anchor\">reportProgress</a></code> option set true to enable tracking of progress events.</p>\n\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-request\" header=\"app/uploader/uploader.service.ts (upload request)\">\nconst req = new <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>('POST', '/upload/file', file, {\n  <a href=\"api/common/http/HttpRequest#reportProgress\" class=\"code-anchor\">reportProgress</a>: true\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">每个进度事件都会触发变更检测，所以，只有当确实希望在 UI 中报告进度时，你才应该打开这个选项。</p><p translation-origin=\"off\">Every progress event triggers change detection, so only turn them on if you truly intend to report progress in the UI.</p>\n\n<p translation-result=\"on\">当和 HTTP 方法一起使用 <a href=\"api/common/http/HttpClient#request\"><code>HttpClient#request()</code></a> 时，配置上 <a href=\"api/common/http/HttpClient#request\"><code>observe: 'events'</code></a> 选项可以看到所有事件，包括传输过程中的事件。</p><p translation-origin=\"off\">When using <a href=\"api/common/http/HttpClient#request\"><code>HttpClient#request()</code></a> with an HTTP method, configure with\n<a href=\"api/common/http/HttpClient#request\"><code>observe: 'events'</code></a> to see all events, including the progress of transfers.</p>\n\n</div>\n<p translation-result=\"on\">接下来，把这个请求对象传给 <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> 方法，它返回一个 <code>HttpEvents</code> 的 <code>Observable</code>，同样也可以在拦截器中处理这些事件。</p><p translation-origin=\"off\">Next, pass this request object to the <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> method, which\nreturns an <code>Observable</code> of <code>HttpEvents</code>, the same events processed by interceptors:</p>\n\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-body\" header=\"app/uploader/uploader.service.ts (upload body)\">\n// The `HttpClient.request` API produces a raw event stream\n// which includes start (sent), progress, and response events.\nreturn this.http.request(req).pipe(\n  map(event => this.getEventMessage(event, file)),\n  tap(<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> => this.showProgress(<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>)),\n  last(), // return last (completed) <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> to caller\n  catchError(this.handleError(file))\n);\n\n</code-example>\n<p translation-result=\"on\"><code>getEventMessage</code> 方法会解释事件流中的每一个 <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code> 类型。</p><p translation-origin=\"off\">The <code>getEventMessage</code> method interprets each type of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code> in the event stream.</p>\n\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"getEventMessage\" header=\"app/uploader/uploader.service.ts (getEventMessage)\">\n/** Return distinct <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> for sent, upload progress, &#x26; response events */\nprivate getEventMessage(event: <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>, file: File) {\n  switch (event.type) {\n    case <a href=\"api/common/http/HttpEventType#Sent\" class=\"code-anchor\">HttpEventType.Sent</a>:\n      return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n    case <a href=\"api/common/http/HttpEventType#UploadProgress\" class=\"code-anchor\">HttpEventType.UploadProgress</a>:\n      // Compute and show the % <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>:\n      const percentDone = Math.round(100 * event.loaded / event.total);\n      return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n    case <a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a>:\n      return `File \"${file.name}\" was completely uploaded!`;\n\n    default:\n      return `File \"${file.name}\" surprising upload event: ${event.type}.`;\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">这个范例应用中并没有一个用来接收上传的文件的真实的服务器。\n<code>app/http-interceptors/upload-interceptor.ts</code> 中的 <code>UploadInterceptor</code> 会拦截并短路掉上传请求，改为返回一个带有各个模拟事件的可观察对象。</p><p translation-origin=\"off\">The sample app for this guide doesn't have a server that accepts uploaded files.\nThe <code>UploadInterceptor</code> in <code>app/http-interceptors/upload-interceptor.ts</code>\nintercepts and short-circuits upload requests\nby returning an observable of simulated events.</p>\n\n</div>\n<h2 id=\"security-xsrf-protection\" translation-result=\"on\">安全：XSRF 防护<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#security-xsrf-protection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"security-xsrf-protection\">Security: XSRF protection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#security-xsrf-protection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">跨站请求伪造 (XSRF 或 CSRF)</a>是一个攻击技术，它能让攻击者假冒一个已认证的用户在你的网站上执行未知的操作。<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 支持一种<a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\">通用的机制</a>来防范 XSRF 攻击。当执行 HTTP 请求时，一个拦截器会从 cookie 中读取 XSRF 令牌（默认名字为 <code>XSRF-TOKEN</code>），并且把它设置为一个 HTTP 头 <code>X-XSRF-TOKEN</code>，由于只有运行在你自己的域名下的代码才能读取这个 cookie，因此后端可以确认这个 HTTP 请求真的来自你的客户端应用，而不是攻击者。</p><p translation-origin=\"off\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">Cross-Site Request Forgery (XSRF or CSRF)</a> is an attack technique by which the attacker can trick an authenticated user into unknowingly executing actions on your website.\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports a <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\">common mechanism</a> used to prevent XSRF attacks.\nWhen performing HTTP requests, an interceptor reads a token from a cookie, by default <code>XSRF-TOKEN</code>, and sets it as an HTTP header, <code>X-XSRF-TOKEN</code>.\nSince only code that runs on your domain could read the cookie, the backend can be certain that the HTTP request came from your client application and not an attacker.</p>\n\n<p translation-result=\"on\">默认情况下，拦截器会在所有的修改型请求中（比如 POST 等）把这个请求头发送给使用相对 URL 的请求。但不会在 GET/HEAD 请求中发送，也不会发送给使用绝对 URL 的请求。</p><p translation-origin=\"off\">By default, an interceptor sends this header on all mutating requests (such as POST)\nto relative URLs, but not on GET/HEAD requests or on requests with an absolute URL.</p>\n\n<p translation-result=\"on\">要获得这种优点，你的服务器需要在页面加载或首个 GET 请求中把一个名叫 <code>XSRF-TOKEN</code> 的令牌写入可被 JavaScript 读到的会话 cookie 中。\n而在后续的请求中，服务器可以验证这个 cookie 是否与 HTTP 头 <code>X-XSRF-TOKEN</code> 的值一致，以确保只有运行在你自己域名下的代码才能发起这个请求。这个令牌必须对每个用户都是唯一的，并且必须能被服务器验证，因此不能由客户端自己生成令牌。把这个令牌设置为你的站点认证信息并且加了盐（salt）的摘要，以提升安全性。</p><p translation-origin=\"off\">To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called <code>XSRF-TOKEN</code> on either the page load or the first GET request.\nOn subsequent requests the server can verify that the cookie matches the <code>X-XSRF-TOKEN</code> HTTP header, and therefore be sure that only code running on your domain could have sent the request.\nThe token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens.\nSet the token to a digest of your site's authentication cookie with a salt for added security.</p>\n\n<p translation-result=\"on\">为了防止多个 Angular 应用共享同一个域名或子域时出现冲突，要给每个应用分配一个唯一的 cookie 名称。</p><p translation-origin=\"off\">In order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><em><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 支持的只是 XSRF 防护方案的客户端这一半。</em> 你的后端服务必须配置为给页面设置 cookie ，并且要验证请求头，以确保全都是合法的请求。否则，Angular 默认的这种防护措施就会失效。</p><p translation-origin=\"off\"><em><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports only the client half of the XSRF protection scheme.</em>\nYour backend service must be configured to set the cookie for your page, and to verify that\nthe header is present on all eligible requests.\nIf not, Angular's default protection will be ineffective.</p>\n\n</div>\n<h3 id=\"configuring-custom-cookieheader-names\" translation-result=\"on\">配置自定义 cookie/header 名称<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-custom-cookieheader-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configuring-custom-cookieheader-names\">Configuring custom cookie/header names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-custom-cookieheader-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你的后端服务中对 XSRF 令牌的 cookie 或 头使用了不一样的名字，就要使用 <code>HttpClientXsrfModule.withConfig()</code> 来覆盖掉默认值。</p><p translation-origin=\"off\">If your backend service uses different names for the XSRF token cookie or header,\nuse <code><a href=\"api/common/http/HttpClientXsrfModule#withOptions\" class=\"code-anchor\">HttpClientXsrfModule.withOptions()</a></code> to override the defaults.</p>\n\n<code-example path=\"http/src/app/app.module.ts\" region=\"xsrf\">\nimports: [\n  <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  HttpClientXsrfModule.withOptions({\n    cookieName: 'My-Xsrf-Cookie',\n    headerName: 'My-Xsrf-Header',\n  }),\n],\n\n</code-example>\n<h2 id=\"testing-http-requests\" translation-result=\"on\">测试 HTTP 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#testing-http-requests\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"testing-http-requests\">Testing HTTP requests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#testing-http-requests\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如同所有的外部依赖一样，你必须把 HTTP 后端也 Mock 掉，以便你的测试可以模拟这种与后端的互动。\n<code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> 库能让这种 Mock 工作变得直截了当。</p><p translation-origin=\"off\">As for any external dependency, you must mock the HTTP backend so your tests can simulate interaction with a remote server.\nThe <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> library makes it straightforward to set up such mocking.</p>\n\n<p translation-result=\"on\">Angular 的 HTTP 测试库是专为其中的测试模式而设计的。在这种模式下，会首先在应用中执行代码并发起请求。\n然后，这个测试会期待发起或未发起过某个请求，并针对这些请求进行断言，\n最终对每个所预期的请求进行刷新（flush）来对这些请求提供响应。</p><p translation-origin=\"off\">Angular's HTTP testing library is designed for a pattern of testing in which the app executes code and makes requests first.\nThe test then expects that certain requests have or have not been made,\nperforms assertions against those requests,\nand finally provides responses by \"flushing\" each expected request.</p>\n\n<p translation-result=\"on\">最终，测试可能会验证这个应用不曾发起过非预期的请求。</p><p translation-origin=\"off\">At the end, tests may verify that the app has made no unexpected requests.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你可以到在线编程环境中运行<live-example stackblitz=\"specs\">这些范例测试</live-example>。</p><p translation-origin=\"off\">You can run <live-example stackblitz=\"specs\">these sample tests</live-example>\nin a live coding environment.</p>\n\n<p translation-result=\"on\">本章所讲的这些测试位于 <code>src/testing/http-client.spec.ts</code> 中。\n在 <code>src/app/heroes/heroes.service.spec.ts</code> 中还有一些测试，用于测试那些调用了 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的数据服务。</p><p translation-origin=\"off\">The tests described in this guide are in <code>src/testing/http-client.spec.ts</code>.\nThere are also tests of an application data service that call <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in\n<code>src/app/heroes/heroes.service.spec.ts</code>.</p>\n\n</div>\n<h3 id=\"setup-1\" translation-result=\"on\">搭建环境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"setup-1\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要开始测试那些通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 发起的请求，就要导入 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> 模块，并把它加到你的 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 设置里去，代码如下：</p><p translation-origin=\"off\">To begin testing calls to <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>,\nimport the <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> and the mocking controller, <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>,\nalong with the other symbols your tests require.</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"imports\" header=\"app/testing/http-client.spec.ts (imports)\">\n// Http testing module and mocking controller\nimport { <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a>, <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing';\n\n// <a href=\"api/common/Plural#Other\" class=\"code-anchor\">Other</a> imports\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n\n</code-example>\n<p translation-result=\"on\">然后把 <code>HTTPClientTestingModule</code> 添加到 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 中，并继续设置<em>被测服务</em>。</p><p translation-origin=\"off\">Then add the <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> to the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> and continue with\nthe setup of the <em>service-under-test</em>.</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"setup\" header=\"app/testing/http-client.spec.ts(setup)\">\ndescribe('<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> testing', () => {\n  let httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>;\n  let httpTestingController: <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [ <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a> ]\n    });\n\n    // <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> the <a href=\"api/common/http\" class=\"code-anchor\">http</a> service and test controller for each test\n    httpClient = TestBed.get(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>);\n    httpTestingController = TestBed.get(<a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>);\n  });\n  /// Tests begin ///\n});\n\n</code-example>\n<p translation-result=\"on\">现在，在测试中发起的这些请求会发给这些测试用的后端（testing backend），而不是标准的后端。</p><p translation-origin=\"off\">Now requests made in the course of your tests will hit the testing backend instead of the normal backend.</p>\n\n<p translation-result=\"on\">这种设置还会调用 <code>TestBed.inject()</code>，来获取注入的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务和模拟对象的控制器 <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>，以便在测试期间引用它们。</p><p translation-origin=\"off\">This setup also calls <code>TestBed.inject()</code> to inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service and the mocking controller\nso they can be referenced during the tests.</p>\n\n<h3 id=\"expecting-and-answering-requests\" translation-result=\"on\">期待并回复请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#expecting-and-answering-requests\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"expecting-and-answering-requests\">Expecting and answering requests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#expecting-and-answering-requests\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">现在，你就可以编写测试，等待 GET 请求并给出模拟响应。</p><p translation-origin=\"off\">Now you can write a test that expects a GET Request to occur and provides a mock response.</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"get-test\" header=\"app/testing/http-client.spec.ts(httpClient.get)\">\nit('can test HttpClient.get', () => {\n  const testData: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a> = {name: 'Test <a href=\"api/router/Data\" class=\"code-anchor\">Data</a>'};\n\n  // Make an HTTP GET request\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(testUrl)\n    .subscribe(data =>\n      // When observable resolves, result should match test data\n      expect(data).toEqual(testData)\n    );\n\n  // The following `expectOne()` will match the request's URL.\n  // If no requests or <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> requests matched that <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a>\n  // `expectOne()` would throw.\n  const req = httpTestingController.expectOne('/data');\n\n  // Assert that the request is a GET.\n  expect(req.request.method).toEqual('GET');\n\n  // Respond with mock data, causing Observable to resolve.\n  // Subscribe callback asserts that correct data was returned.\n  req.flush(testData);\n\n  // Finally, assert that there are no outstanding requests.\n  httpTestingController.verify();\n});\n\n</code-example>\n<p translation-result=\"on\">最后一步，验证没有发起过预期之外的请求，足够通用，因此你可以把它移到 <code>afterEach()</code> 中：</p><p translation-origin=\"off\">The last step, verifying that no requests remain outstanding, is common enough for you to move it into an <code>afterEach()</code> step:</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"afterEach\">\nafterEach(() => {\n  // After every test, assert that there are no more pending requests.\n  httpTestingController.verify();\n});\n\n</code-example>\n<h4 id=\"custom-request-expectations\" translation-result=\"on\">自定义对请求的预期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#custom-request-expectations\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"custom-request-expectations\">Custom request expectations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#custom-request-expectations\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果仅根据 URL 匹配还不够，你还可以自行实现匹配函数。\n比如，你可以验证外发的请求是否带有某个认证头：</p><p translation-origin=\"off\">If matching by URL isn't sufficient, it's possible to implement your own matching function.\nFor example, you could look for an outgoing request that has an authorization header:</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"predicate\">\n// Expect one request with an authorization header\nconst req = httpTestingController.expectOne(\n  req => req.headers.has('Authorization')\n);\n\n</code-example>\n<p translation-result=\"on\">像前面的 <code>expectOne()</code> 测试一样，如果零或两个以上的请求满足了这个断言，它就会抛出异常。</p><p translation-origin=\"off\">As with the previous <code>expectOne()</code>,\nthe test will fail if 0 or 2+ requests satisfy this predicate.</p>\n\n<h4 id=\"handling-more-than-one-request\" translation-result=\"on\">处理一个以上的请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#handling-more-than-one-request\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"handling-more-than-one-request\">Handling more than one request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#handling-more-than-one-request\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果你需要在测试中对重复的请求进行响应，可以使用 <code>match()</code> API 来代替 <code>expectOne()</code>，它的参数不变，但会返回一个与这些请求相匹配的数组。一旦返回，这些请求就会从将来要匹配的列表中移除，你要自己验证和刷新（flush）它。</p><p translation-origin=\"off\">If you need to respond to duplicate requests in your test, use the <code>match()</code> API instead of <code>expectOne()</code>.\nIt takes the same arguments but returns an array of matching requests.\nOnce returned, these requests are removed from future matching and\nyou are responsible for flushing and verifying them.</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"multi-request\">\n// get all pending requests that match the given <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a>\nconst requests = httpTestingController.match(testUrl);\nexpect(requests.length).toEqual(3);\n\n// Respond to each request with different results\nrequests[0].flush([]);\nrequests[1].flush([testData[0]]);\nrequests[2].flush(testData);\n\n</code-example>\n<h3 id=\"testing-for-errors\" translation-result=\"on\">测试对错误的预期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#testing-for-errors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"testing-for-errors\">Testing for errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#testing-for-errors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你还要测试应用对于 HTTP 请求失败时的防护。</p><p translation-origin=\"off\">You should test the app's defenses against HTTP requests that fail.</p>\n\n<p translation-result=\"on\">调用 <code>request.flush()</code> 并传入一个错误信息，如下所示：</p><p translation-origin=\"off\">Call <code>request.flush()</code> with an error message, as seen in the following example.</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"404\">\nit('can test for 404 error', () => {\n  const emsg = 'deliberate 404 error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the 404 error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.status).toEqual(404, 'status');\n      expect(error.error).toEqual(emsg, '<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // Respond with mock error\n  req.flush(emsg, { status: 404, <a href=\"api/common/http/HttpResponseBase#statusText\" class=\"code-anchor\">statusText</a>: 'Not Found' });\n});\n\n</code-example>\n<p translation-result=\"on\">另外，你还可以使用 <code>ErrorEvent</code> 来调用 <code>request.error()</code>.</p><p translation-origin=\"off\">Alternatively, you can call <code>request.error()</code> with an <code>ErrorEvent</code>.</p>\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"network-error\">\nit('can test for network error', () => {\n  const emsg = 'simulated network error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the network error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.error.message).toEqual(emsg, '<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // Create mock ErrorEvent, raised when something goes wrong at the network level.\n  // Connection timeout, DNS error, offline, etc\n  const mockError = new ErrorEvent('Network error', {\n    <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>: emsg,\n  });\n\n  // Respond with mock error\n  req.error(mockError);\n});\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpInterceptor\n - guide/architecture-next-steps\n - guide/browser-support\n - guide/deprecations\n - guide/npm-packages\n - guide/pipes\n - guide/testing\n - start/data\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgForOf\n - api/common/Plural#Other\n - api/common/http\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpBackend\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClient#request\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/common/http/HttpClientXsrfModule#withOptions\n - api/common/http/HttpErrorResponse\n - api/common/http/HttpErrorResponse#message\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpEventType#Sent\n - api/common/http/HttpEventType#UploadProgress\n - api/common/http/HttpHandler\n - api/common/http/HttpHeaders\n - api/common/http/HttpInterceptor\n - api/common/http/HttpParams\n - api/common/http/HttpRequest\n - api/common/http/HttpRequest#reportProgress\n - api/common/http/HttpRequest#responseType\n - api/common/http/HttpResponse\n - api/common/http/HttpResponseBase#statusText\n - api/common/http/JsonpInterceptor#intercept\n - api/common/http/testing/HttpClientTestingModule\n - api/common/http/testing/HttpTestingController\n - api/common/upgrade/$locationShim#search\n - api/core/ApplicationInitStatus#done\n - api/core/Inject\n - api/core/Injectable\n - api/core/MissingTranslationStrategy#Error\n - api/core/NgModule\n - api/core/SecurityContext#URL\n - api/core/testing/TestBed\n - api/core/testing/async\n - api/forms/NgModel#update\n - api/forms/SelectMultipleControlValueAccessor\n - api/platform-browser/BrowserModule\n - api/router/Data\n - api/router/ParamMap#keys\n - api/router/Router#config\n - guide/dependency-injection\n - guide/http#adding-headers\n - guide/http#advanced-usage\n - guide/http#always-subscribe\n - guide/http#cache-refresh\n - guide/http#caching\n - guide/http#clearing-the-request-body\n - guide/http#configuring-custom-cookieheader-names\n - guide/http#configuring-the-request\n - guide/http#custom-request-expectations\n - guide/http#debouncing-requests\n - guide/http#error-details\n - guide/http#error-handling\n - guide/http#expecting-and-answering-requests\n - guide/http#getting-error-details\n - guide/http#handling-more-than-one-request\n - guide/http#http-headers\n - guide/http#http-interceptors\n - guide/http#httpclient\n - guide/http#httpevents\n - guide/http#immutability\n - guide/http#interceptor-order\n - guide/http#listening-to-progress-events\n - guide/http#logging\n - guide/http#making-a-delete-request\n - guide/http#making-a-jsonp-request\n - guide/http#making-a-post-request\n - guide/http#making-a-put-request\n - guide/http#observables-and-operators\n - guide/http#provide-the-interceptor\n - guide/http#reading-the-full-response\n - guide/http#requesting-a-typed-response\n - guide/http#requesting-data-from-server\n - guide/http#requesting-non-json-data\n - guide/http#retrying\n - guide/http#return-a-multi-valued-observable\n - guide/http#rxjs\n - guide/http#security-xsrf-protection\n - guide/http#send-request\n - guide/http#sending-data-to-the-server\n - guide/http#set-default-headers\n - guide/http#setup\n - guide/http#setup-1\n - guide/http#switchmap\n - guide/http#testing-for-errors\n - guide/http#testing-http-requests\n - guide/http#the-next-object\n - guide/http#the-request-body\n - guide/http#updating-headers\n - guide/http#url-query-strings\n - guide/http#use-fromstring-to-create-httpparams\n - guide/http#write-an-interceptor\n - http://reactivex.io/rxjs/\n - https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\n - https://en.wikipedia.org/wiki/JSONP\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/http.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/in-memory-web-api/blob/master/README.md\n-->"
}