{
  "id": "guide/router",
  "title": "In-app navigation: routing to views",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/router.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"in-app-navigation-routing-to-views\" translation-result=\"on\">应用内导航：路由到视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#in-app-navigation-routing-to-views\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"in-app-navigation-routing-to-views\">In-app navigation: routing to views<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#in-app-navigation-routing-to-views\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">在单页面应用中，你可以通过显示或隐藏特定组件的显示部分来改变用户能看到的内容，而不用去服务器获取新页面。当用户执行应用任务时，他们要在你预定义的不同<a href=\"guide/glossary#view\" title=\"视图的定义\">视图</a>之间移动。要想在应用的单个页面中实现这种导航，你可以使用 Angular 的<strong><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></strong>（路由器）。</p><p translation-origin=\"off\">In a single-page app, you change what the user sees by showing or hiding portions of the display that correspond to particular components, rather than going out to the server to get a new page.\nAs users perform application tasks, they need to move between the different <a href=\"guide/glossary#view\" title=\"Definition of view\">views</a> that you have defined.\nTo implement this kind of navigation within the single page of your app, you use the Angular <strong><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></strong>.</p>\n\n<p translation-result=\"on\">为了处理从一个<a href=\"guide/glossary#view\">视图</a>到下一个视图之间的导航，你可以使用 Angular 的<em>路由器</em>。路由器会把浏览器 URL 解释成改变视图的操作指南，以完成导航。</p><p translation-origin=\"off\">To handle the navigation from one <a href=\"guide/glossary#view\">view</a> to the next, you use the Angular <em>router</em>.\nThe router enables navigation by interpreting a browser URL as an instruction to change the view.</p>\n\n<p translation-result=\"on\">要探索一个具备路由器主要功能的示例应用，请参见<live-example></live-example>。</p><p translation-origin=\"off\">To explore a sample app featuring the router's primary features, see the <live-example></live-example>.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">先决条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在创建路由之前，你应该熟悉以下内容：</p><p translation-origin=\"off\">Before creating a route, you should be familiar with the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components\">组件的基础知识</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components\">Basics of components</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/glossary#template\">模板的基础知识</a></p><p translation-origin=\"off\"><a href=\"guide/glossary#template\">Basics of templates</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\">一个 Angular 应用，你可以使用 <a href=\"cli\">Angular CLI</a> 生成一个基本的 Angular 应用。</p><p translation-origin=\"off\">An Angular app—you can generate a basic Angular app using the <a href=\"cli\">Angular CLI</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">有关这个现成应用的 Angular 简介，请参见<a href=\"start\">快速上手</a>。有关构建 Angular 应用的更深入体验，请参见<a href=\"tutorial\">英雄指南</a>教程。两者都会指导你使用组件类和模板。</p><p translation-origin=\"off\">For an introduction to Angular with a ready-made app, see <a href=\"start\">Getting Started</a>.\nFor a more in-depth experience of building an Angular app, see the <a href=\"tutorial\">Tour of Heroes</a> tutorial. Both guide you through using component classes and templates.</p>\n\n<hr>\n<a id=\"basics\"></a>\n<h2 id=\"generate-an-app-with-routing-enabled\" translation-result=\"on\">生成一个支持路由的应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#generate-an-app-with-routing-enabled\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"generate-an-app-with-routing-enabled\">Generate an app with routing enabled<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#generate-an-app-with-routing-enabled\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面的命令会用 Angular CLI 来生成一个带有应用路由模块（<code>AppRoutingModule</code>）的基本 Angular 应用，它是一个 NgModule，可用来配置路由。下面的例子中应用的名字是 <code>routing-app</code>。</p><p translation-origin=\"off\">The following command uses the Angular CLI to generate a basic Angular app with an app routing module, called <code>AppRoutingModule</code>, which is an NgModule where you can configure your routes.\nThe app name in the following example is <code>routing-app</code>.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng new routing-app --routing\n</code-example>\n<p translation-result=\"on\">一旦生成新应用，CLI 就会提示你选择 CSS 或 CSS 预处理器。在这个例子中，我们接受 <code>CSS</code> 的默认值。</p><p translation-origin=\"off\">When generating a new app, the CLI prompts you to select CSS or a CSS preprocessor.\nFor this example, accept the default of <code>CSS</code>.</p>\n\n<h3 id=\"adding-components-for-routing\" translation-result=\"on\">为路由添加组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#adding-components-for-routing\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-components-for-routing\">Adding components for routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#adding-components-for-routing\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">为了使用 Angular 的路由器，应用至少要有两个组件才能从一个导航到另一个。要使用 CLI 创建组件，请在命令行输入以下内容，其中 <code>first</code> 是组件的名称：</p><p translation-origin=\"off\">To use the Angular router, an app needs to have at least two components so that it can navigate from one to the other. To create a component using the CLI, enter the following at the command line where <code>first</code> is the name of your component:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component first\n</code-example>\n<p translation-result=\"on\">为第二个组件重复这个步骤，但给它一个不同的名字。这里的新名字是 <code>second</code>。</p><p translation-origin=\"off\">Repeat this step for a second component but give it a different name.\nHere, the new name is <code>second</code>.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component second\n</code-example>\n<p translation-result=\"on\">CLI 会自动添加 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 后缀，所以如果在编写 <code>first-component</code>，那么其组件名就是 <code>FirstComponentComponent</code>。</p><p translation-origin=\"off\">The CLI automatically appends <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>, so if you were to write <code>first-component</code>, your component would be <code>FirstComponentComponent</code>.</p>\n\n<a id=\"basics-base-href\"></a>\n<div class=\"alert is-helpful\">\n<h4 id=\"base-href\"><code>&#x3C;base href></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#base-href\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">  本指南适用于 CLI 生成的 Angular 应用。如果你是手动工作的，请确保你的 index.html 文件的 <code>&#x3C;head></code> 中有 <code>&#x3C;base href=\"/\"></code> 语句。这里假定 <code>app</code> 文件夹是应用的根目录，并使用 <code>\"/\"</code> 作为基础路径。</p><p translation-origin=\"off\">  This guide works with a CLI-generated Angular app.\nIf you are working manually, make sure that you have <code>&#x3C;base href=\"/\"></code> in the <code>&#x3C;head></code> of your index.html file.\nThis assumes that the <code>app</code> folder is the application root, and uses <code>\"/\"</code>.</p>\n\n</div>\n<h3 id=\"importing-your-new-components\" translation-result=\"on\">导入这些新组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#importing-your-new-components\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"importing-your-new-components\">Importing your new components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#importing-your-new-components\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要使用这些新组件，请把它们导入到该文件顶部的 <code>AppRoutingModule</code> 中，具体如下：</p><p translation-origin=\"off\">To use your new components, import them into <code>AppRoutingModule</code> at the top of the file, as follows:</p>\n\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nimport { FirstComponent } from './first/first.component';\nimport { SecondComponent } from './second/second.component';\n\n</code-example>\n<a id=\"basic-route\"></a>\n<h2 id=\"defining-a-basic-route\" translation-result=\"on\">定义一个基本路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#defining-a-basic-route\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"defining-a-basic-route\">Defining a basic route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#defining-a-basic-route\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">创建路由有三个基本的构建块。</p><p translation-origin=\"off\">There are three fundamental building blocks to creating a route.</p>\n\n<p translation-result=\"on\">把 <code>AppRoutingModule</code> 导入 <code>AppModule</code> 并把它添加到 <code>imports</code> 数组中。</p><p translation-origin=\"off\">Import the <code>AppRoutingModule</code> into <code>AppModule</code> and add it to the <code>imports</code> array.</p>\n\n<p translation-result=\"on\">Angular CLI 会为你执行这一步骤。但是，如果要手动创建应用或使用现存的非 CLI 应用，请验证导入和配置是否正确。下面是使用 <code>--routing</code> 标志生成的默认 <code>AppModule</code>。</p><p translation-origin=\"off\">The Angular CLI performs this step for you.\nHowever, if you are creating an app manually or working with an existing, non-CLI app, verify that the imports and configuration are correct.\nThe following is the default <code>AppModule</code> using the CLI with the <code>--routing</code> flag.</p>\n\n<code-example path=\"router/src/app/app.module.8.ts\" header=\"Default CLI AppModule with routing\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module'; // CLI imports AppRoutingModule\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    AppRoutingModule // CLI adds AppRoutingModule to the AppModule's imports array\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 导入到你的路由模块中。</p><p translation-origin=\"off\">Import <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> and <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> into your routing module.</p>\n\n<p translation-result=\"on\">Angular CLI 会自动执行这一步骤。CLI 还为你的路由设置了 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 数组，并为 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 配置了 <code>imports</code> 和 <code>exports</code> 数组。</p><p translation-origin=\"off\">The Angular CLI performs this step automatically.\nThe CLI also sets up a <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> array for your routes and configures the <code>imports</code> and <code>exports</code> arrays for <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code>.</p>\n\n<code-example path=\"router/src/app/app-routing.module.7.ts\" header=\"CLI app routing module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router'; // CLI imports router\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = []; // sets up routes constant where you define your routes\n\n// configures <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports and exports\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 数组中定义你的路由。</p><p translation-origin=\"off\">Define your routes in your <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> array.</p>\n\n<p translation-result=\"on\">这个数组中的每个路由都是一个包含两个属性的 JavaScript 对象。第一个属性 <code>path</code> 定义了该路由的 URL 路径。第二个属性 <code>component</code> 定义了要让 Angular 用作相应路径的组件。</p><p translation-origin=\"off\">Each route in this array is a JavaScript object that contains two properties.\nThe first property, <code>path</code>, defines the URL path for the route.\nThe second property, <code>component</code>, defines the component Angular should use for the corresponding path.</p>\n\n</li>\n</ol>\n<code-example path=\"router/src/app/app-routing.module.8.ts\" region=\"routes\" header=\"AppRoutingModule (excerpt)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n];\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">把这些路由添加到你的应用中。</p><p translation-origin=\"off\">Add your routes to your application.</p>\n\n<p translation-result=\"on\">现在你已经定义了路由，可以把它们添加到应用中了。首先，添加到这两个组件的链接。把要添加路由的链接赋值给 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 属性。将属性的值设置为该组件，以便在用户点击各个链接时显示这个值。接下来，修改组件模板以包含 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 标签。该元素会通知 Angular，你可以用所选路由的组件更新应用的视图。</p><p translation-origin=\"off\">Now that you have defined your routes, you can add them to your application.\nFirst, add links to the two components.\nAssign the anchor tag that you want to add the route to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute.\nSet the value of the attribute to the component to show when a user clicks on each link.\nNext, update your component template to include <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.\nThis element informs Angular to update the application view with the component for the selected route.</p>\n\n<code-example path=\"router/src/app/app.component.7.html\" header=\"Template with routerLink and router-outlet\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> App&#x3C;/h1>\n&#x3C;!-- This nav gives you links to click, which tells the router which route to use (defined in the routes constant in  AppRoutingModule) -->\n&#x3C;nav>\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/first-component\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">First <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/second-component\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Second <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&#x3C;/a>&#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/nav>\n&#x3C;!-- The routed views render in the &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>-->\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n</li>\n</ol>\n<a id=\"route-order\"></a>\n<h3 id=\"route-order\" translation-result=\"on\">路由顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-order\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"route-order\">Route order<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-order\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">路由的顺序很重要，因为 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在匹配路由时使用“先到先得”策略，所以应该在不那么具体的路由前面放置更具体的路由。首先列出静态路径的路由，然后是一个与默认路由匹配的空路径路由。<a href=\"guide/router#setting-up-wildcard-routes\">通配符路由</a>是最后一个，因为它匹配每一个 URL，只有当其它路由都没有匹配时，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 才会选择它。</p><p translation-origin=\"off\">The order of routes is important because the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> uses a first-match wins strategy when matching routes, so more specific routes should be placed above less specific routes.\nList routes with a static path first, followed by an empty path route, which matches the default route.\nThe <a href=\"guide/router#setting-up-wildcard-routes\">wildcard route</a> comes last because it matches every URL and the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>  selects it only if no other routes match first.</p>\n\n<a id=\"activated-route\"></a>\n<h2 id=\"getting-route-information\" translation-result=\"on\">获取路由信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#getting-route-information\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"getting-route-information\">Getting route information<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#getting-route-information\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">通常，当用户导航你的应用时，你会希望把信息从一个组件传递到另一个组件。例如，考虑一个显示杂货商品购物清单的应用。列表中的每一项都有一个唯一的 <code>id</code>。要想编辑某个项目，用户需要单击“编辑”按钮，打开一个 <code>EditGroceryItem</code> 组件。你希望该组件得到该商品的 <code>id</code>，以便它能向用户显示正确的信息。</p><p translation-origin=\"off\">Often, as a user navigates your application, you want to pass information from one component to another.\nFor example, consider an application that displays a shopping list of grocery items.\nEach item in the list has a unique <code>id</code>.\nTo edit an item, users click an Edit button, which opens an <code>EditGroceryItem</code> component.\nYou want that component to retrieve the <code>id</code> for the grocery item so it can display the right information to the user.</p>\n\n<p translation-result=\"on\">你也可以使用一个路由把这种类型的信息传给你的应用组件。要做到这一点，你可以使用 <a href=\"api/router/ActivatedRoute\">ActivatedRoute</a> 接口。</p><p translation-origin=\"off\">You can use a route to pass this type of information to your application components.\nTo do so, you use the <a href=\"api/router/ActivatedRoute\">ActivatedRoute</a> interface.</p>\n\n<p translation-result=\"on\">要从路由中获取信息：</p><p translation-origin=\"off\">To get information from a route:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> 导入你的组件。</p><p translation-origin=\"off\">Import <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> and <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> to your component.</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.ts\" region=\"imports-route-info\" header=\"In the component class (excerpt)\">\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\n</code-example>\n<p translation-result=\"on\">这些 <code>import</code> 语句添加了组件所需的几个重要元素。要详细了解每个 API，请参阅以下 API 页面：</p><p translation-origin=\"off\">These <code>import</code> statements add several important elements that your component needs.\nTo learn more about each, see the following API pages:</p>\n\n<ul>\n<li><a href=\"api/router\"><code>Router</code></a></li>\n<li><a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a></li>\n<li><a href=\"api/router/ParamMap\"><code>ParamMap</code></a></li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">通过把 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的一个实例添加到你的应用的构造函数中来注入它：</p><p translation-origin=\"off\">Inject an instance of <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> by adding it to your application's constructor:</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.ts\" region=\"activated-route\" header=\"In the component class (excerpt)\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n) {}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">更新 <code>ngOnInit()</code> 方法来访问这个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 并跟踪 <code>id</code> 参数：</p><p translation-origin=\"off\">Update the <code>ngOnInit()</code> method to access the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> and track the <code>id</code> parameter:</p>\n\n  <code-example header=\"In the component (excerpt)\">\n    ngOnInit() {\n      this.route.queryParams.subscribe(params => {\n        this.name = params['name'];\n      });\n    }\n  </code-example>\n<p translation-result=\"on\">注意：前面的例子使用了一个变量 <code>name</code>，并根据 <code>name</code> 参数给它赋值。</p><p translation-origin=\"off\">Note: The preceding example uses a variable, <code>name</code>, and assigns it the value based on the <code>name</code> parameter.</p>\n\n</li>\n</ol>\n<a id=\"wildcard-route-how-to\"></a>\n<h2 id=\"setting-up-wildcard-routes\" translation-result=\"on\">设置通配符路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-up-wildcard-routes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"setting-up-wildcard-routes\">Setting up wildcard routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-up-wildcard-routes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当用户试图导航到那些不存在的应用部件时，在正常的应用中应该能得到很好的处理。要在应用中添加此功能，需要设置通配符路由。当所请求的 URL 与任何路由器路径都不匹配时，Angular 路由器就会选择这个路由。</p><p translation-origin=\"off\">A well-functioning application should gracefully handle when users attempt to navigate to a part of your application that does not exist.\nTo add this functionality to your application, you set up a wildcard route.\nThe Angular router selects this route any time the requested URL doesn't match any router paths.</p>\n\n<p translation-result=\"on\">要设置通配符路由，请在 <code>routes</code> 定义中添加以下代码。</p><p translation-origin=\"off\">To set up a wildcard route, add the following code to your <code>routes</code> definition.</p>\n\n<code-example header=\"AppRoutingModule (excerpt)\">\n\n{ path: '**', component: <component-name> }\n\n</component-name></code-example>\n<p translation-result=\"on\">这两个星号 <code>**</code> 告诉 Angular，这个 <code>routes</code> 定义是通配符路由。对于 component 属性，你可以使用应用中的任何组件。常见的选择包括应用专属的 <code>PageNotFoundComponent</code>，你可以定义它来向用户<a href=\"guide/router#404-page-how-to\">展示 404 页面</a>，或者跳转到应用的主组件。通配符路由是最后一个路由，因为它匹配所有的 URL。有关路由顺序的更多详细信息，请参阅<a href=\"guide/router#route-order\">路由顺序</a>。</p><p translation-origin=\"off\">The two asterisks, <code>**</code>, indicate to Angular that this <code>routes</code> definition is a wildcard route.\nFor the component property, you can define any component in your application.\nCommon choices include an application-specific <code>PageNotFoundComponent</code>, which you can define to <a href=\"guide/router#404-page-how-to\">display a 404 page</a> to your users; or a redirect to your application's main component.\nA wildcard route is the last route because it matches any URL.\nFor more detail on why order matters for routes, see <a href=\"guide/router#route-order\">Route order</a>.</p>\n\n<a id=\"404-page-how-to\"></a>\n<h2 id=\"displaying-a-404-page\" translation-result=\"on\">显示 404 页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#displaying-a-404-page\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"displaying-a-404-page\">Displaying a 404 page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#displaying-a-404-page\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要显示 404 页面，请设置一个<a href=\"guide/router#wildcard-route-how-to\">通配符路由</a>，并将 <code>component</code> 属性设置为你要用于 404 页面的组件，如下所示：</p><p translation-origin=\"off\">To display a 404 page, set up a <a href=\"guide/router#wildcard-route-how-to\">wildcard route</a> with the <code>component</code> property set to the component you'd like to use for your 404 page as follows:</p>\n\n<code-example path=\"router/src/app/app-routing.module.8.ts\" region=\"routes-with-wildcard\" header=\"AppRoutingModule (excerpt)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n  { path: '',   redirectTo: '/first-component', pathMatch: 'full' }, // redirect to `first-component`\n  { path: '**', component: FirstComponent },\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\n];\n\n</code-example>\n<p translation-result=\"on\"><code>path</code> 为 <code>**</code> 的最后一条路由是通配符路由。如果请求的 URL 与前面列出的路径不匹配，路由器会选择这个路由，并把该用户送到 <code>PageNotFoundComponent</code>。</p><p translation-origin=\"off\">The last route with the <code>path</code> of <code>**</code> is a wildcard route.\nThe router selects this route if the requested URL doesn't match any of the paths earlier in the list and sends the user to the <code>PageNotFoundComponent</code>.</p>\n\n<h2 id=\"setting-up-redirects\" translation-result=\"on\">设置重定向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-up-redirects\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"setting-up-redirects\">Setting up redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-up-redirects\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要设置重定向，请使用重定向源的 <code>path</code>、要重定向目标的 <code>component</code> 和一个 <code>pathMatch</code> 值来配置路由，以告诉路由器该如何匹配 URL。</p><p translation-origin=\"off\">To set up a redirect, configure a route with the <code>path</code> you want to redirect from, the <code>component</code> you want to redirect to, and a <code>pathMatch</code> value that tells the router how to match the URL.</p>\n\n<code-example path=\"router/src/app/app-routing.module.8.ts\" region=\"redirect\" header=\"AppRoutingModule (excerpt)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n  { path: '',   redirectTo: '/first-component', pathMatch: 'full' }, // redirect to `first-component`\n  { path: '**', component: FirstComponent },\n];\n\n</code-example>\n<p translation-result=\"on\">在这个例子中，第三个路由是重定向路由，所以路由器会默认跳到 <code>first-component</code> 路由。注意，这个重定向路由位于通配符路由之前。这里的 <code>path: ''</code> 表示使用初始的相对 URL（ <code>''</code> ）。</p><p translation-origin=\"off\">In this example, the third route is a redirect so that the router defaults to the <code>first-component</code> route.\nNotice that this redirect precedes the wildcard route.\nHere, <code>path: ''</code> means to use the initial relative URL (<code>''</code>).</p>\n\n<p translation-result=\"on\">有关 <code>pathMatch</code> 的详情，请参阅<a href=\"guide/router#pathmatch\">聚焦 <code>pathMatch</code></a>部分。</p><p translation-origin=\"off\">For more details on <code>pathMatch</code> see <a href=\"guide/router#pathmatch\">Spotlight on <code>pathMatch</code></a>.</p>\n\n<a id=\"nesting-routes\"></a>\n<h2 id=\"nesting-routes\" translation-result=\"on\">嵌套路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#nesting-routes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"nesting-routes\">Nesting routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#nesting-routes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">随着你的应用变得越来越复杂，你可能要创建一些根组件之外的相对路由。这些嵌套路由类型称为子路由。这意味着你要为你的应用添加第二 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>，因为它是 <code>AppComponent</code> 之外的另一个 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>。</p><p translation-origin=\"off\">As your application grows more complex, you may want to create routes that are relative to a component other than your root component.\nThese types of nested routes are called child routes.\nThis means you're adding a second <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> to your app, because it is in addition to the <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> in <code>AppComponent</code>.</p>\n\n<p translation-result=\"on\">在这个例子中，还有两个子组件，<code>child-a</code> 和 <code>child-b</code>。这里的 <code>FirstComponent</code> 有它自己的 <code>&#x3C;nav></code> 和 <code>AppComponent</code> 之外的第二 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>。</p><p translation-origin=\"off\">In this example, there are two additional child components, <code>child-a</code>, and <code>child-b</code>.\nHere, <code>FirstComponent</code> has its own <code>&#x3C;nav></code> and a second <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> in addition to the one in <code>AppComponent</code>.</p>\n\n<code-example path=\"router/src/app/app.component.8.html\" region=\"child-routes\" header=\"In the template\">\n&#x3C;h2>First <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&#x3C;/h2>\n\n&#x3C;nav>\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"child-a\">Child A&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"child-b\">Child B&#x3C;/a>&#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/nav>\n\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<p translation-result=\"on\">子路由和其它路由一样，同时需要 <code>path</code> 和 <code>component</code>。唯一的区别是你要把子路由放在父路由的 <code>children</code> 数组中。</p><p translation-origin=\"off\">A child route is like any other route, in that it needs both a <code>path</code> and a <code>component</code>.\nThe one difference is that you place child routes in a <code>children</code> array within the parent route.</p>\n\n<code-example path=\"router/src/app/app-routing.module.9.ts\" region=\"child-routes\" header=\"AppRoutingModule (excerpt)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component',\n    component: FirstComponent, // this is the component with the &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> in the template\n    children: [\n      {\n        path: 'child-a', // child route path\n        component: ChildAComponent // child route component that the router renders\n      },\n      {\n        path: 'child-b',\n        component: ChildBComponent // another child route component that the router renders\n      }\n    ] },\n\n</code-example>\n<a id=\"using-relative-paths\"></a>\n<h2 id=\"using-relative-paths\" translation-result=\"on\">使用相对路径<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#using-relative-paths\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"using-relative-paths\">Using relative paths<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#using-relative-paths\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">相对路径允许你定义相对于当前 URL 段的路径。下面的例子展示了到另一个组件 <code>second-component</code> 的相对路由。<code>FirstComponent</code> 和 <code>SecondComponent</code> 在树中处于同一级别，但是，指向 <code>SecondComponent</code> 的链接位于 <code>FirstComponent</code> 中，这意味着路由器必须先上升一个级别，然后进入二级目录才能找到 <code>SecondComponent</code>。你可以使用 <code>../</code> 符号来上升一个级别，而不用写出到 <code>SecondComponent</code> 的完整路径。</p><p translation-origin=\"off\">Relative paths allow you to define paths that are relative to the current URL segment.\nThe following example shows a relative route to another component, <code>second-component</code>.\n<code>FirstComponent</code> and <code>SecondComponent</code> are at the same level in the tree, however, the link to <code>SecondComponent</code> is situated within the <code>FirstComponent</code>, meaning that the router has to go up a level and then into the second directory to find the <code>SecondComponent</code>.\nRather than writing out the whole path to get to <code>SecondComponent</code>, you can use the <code>../</code> notation to go up a level.</p>\n\n<code-example path=\"router/src/app/app.component.8.html\" region=\"relative-route\" header=\"In the template\">\n\n&#x3C;h2>First <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&#x3C;/h2>\n\n&#x3C;nav>\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"../second-component\">Relative <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> to second component&#x3C;/a>&#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p translation-result=\"on\">除了 <code>../</code>，还可以使用 <code>./</code> 或者不带前导斜杠来指定当前级别。</p><p translation-origin=\"off\">In addition to <code>../</code>, you can use <code>./</code> or no leading slash to specify the current level.</p>\n\n<h3 id=\"specifying-a-relative-route\" translation-result=\"on\">指定相对路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#specifying-a-relative-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"specifying-a-relative-route\">Specifying a relative route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#specifying-a-relative-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要指定相对路由，请使用 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> 中的 <code>relativeTo</code> 属性。在组件类中，从 <code>@angular/router</code> 导入 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code>。</p><p translation-origin=\"off\">To specify a relative route, use the <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> <code>relativeTo</code> property.\nIn the component class, import <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> from the <code>@angular/router</code>.</p>\n\n<p translation-result=\"on\">然后在导航方法中使用 <code>relativeTo</code> 参数。在链接参数数组（它包含 <code>items</code>）之后添加一个对象，把该对象的 <code>relativeTo</code> 属性设置为当前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，也就是 <code>this.route</code>。</p><p translation-origin=\"off\">Then use <code>relativeTo</code> in your navigation method.\nAfter the link parameters array, which here contains <code>items</code>, add an object with the <code>relativeTo</code> property set to the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, which is <code>this.route</code>.</p>\n\n<code-example path=\"router/src/app/app.component.4.ts\" region=\"relative-to\" header=\"RelativeTo\">\ngoToItems() {\n  this.router.navigate(['items'], { relativeTo: this.route });\n}\n\n</code-example>\n<p translation-result=\"on\"><code>goToItems()</code> 方法会把目标 URI 解释为相对于当前路由的，并导航到 <code>items</code> 路由。</p><p translation-origin=\"off\">The <code>goToItems()</code> method interprets the destination URI as relative to the activated route and navigates to the <code>items</code> route.</p>\n\n<h2 id=\"accessing-query-parameters-and-fragments\" translation-result=\"on\">访问查询参数和片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#accessing-query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"accessing-query-parameters-and-fragments\">Accessing query parameters and fragments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#accessing-query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有时，应用中的某个特性需要访问路由的部件，比如查询参数或片段（fragment）。本教程的这个阶段使用了一个“英雄指南”中的列表视图，你可以在其中点击一个英雄来查看详情。路由器使用 <code>id</code> 来显示正确的英雄的详情。</p><p translation-origin=\"off\">Sometimes, a feature of your application requires accessing a part of a route, such as a query parameter or a fragment. The Tour of Heroes app at this stage in the tutorial uses a list view in which you can click on a hero to see details. The router uses an <code>id</code> to show the correct hero's details.</p>\n\n<p translation-result=\"on\">首先，在要导航的组件中导入以下成员。</p><p translation-origin=\"off\">First, import the following members in the component you want to navigate from.</p>\n\n<code-example header=\"Component import statements (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p translation-result=\"on\">接下来，注入当前路由（ActivatedRoute）服务：</p><p translation-origin=\"off\">Next inject the activated route service:</p>\n\n<code-example header=\"Component (excerpt)\">\nconstructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n</code-example>\n<p translation-result=\"on\">配置这个类，让你有一个可观察对象 <code>heroes$</code>、一个用来保存英雄的 <code>id</code> 号的 <code>selectedId</code>，以及 <code>ngOnInit()</code> 中的英雄们，添加下面的代码来获取所选英雄的 <code>id</code>。这个代码片段假设你有一个英雄列表、一个英雄服务、一个能获取你的英雄的函数，以及用来渲染你的列表和细节的 HTML，就像在《英雄指南》例子中一样。</p><p translation-origin=\"off\">Configure the class so that you have an observable, <code>heroes$</code>, a <code>selectedId</code> to hold the <code>id</code> number of the hero, and the heroes in the <code>ngOnInit()</code>, add the following code to get the <code>id</code> of the selected hero.\nThis code snippet assumes that you have a heroes list, a hero service, a function to get your heroes, and the HTML to render your list and details, just as in the Tour of Heroes example.</p>\n\n<code-example header=\"Component 1 (excerpt)\">\n\nheroes$: Observable<hero[]>;\nselectedId: number;\nheroes = HEROES;\n\nngOnInit() {\n  this.heroes$ = this.route.paramMap.pipe(\n    switchMap(params => {\n      this.selectedId = Number(params.get('id'));\n      return this.service.getHeroes();\n    })\n  );\n}\n\n</hero[]></code-example>\n<p translation-result=\"on\">接下来，在要导航到的组件中，导入以下成员。</p><p translation-origin=\"off\">Next, in the component that you want to navigate to, import the following members.</p>\n\n<code-example header=\"Component 2 (excerpt)\">\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n</code-example>\n<p translation-result=\"on\">在组件类的构造函数中注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，这样在这个组件中就可以用它们了：</p><p translation-origin=\"off\">Inject <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> and <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> in the constructor of the component class so they are available to this component:</p>\n\n<code-example header=\"Component 2 (excerpt)\">\n\n  item$: Observable<item>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router  ) {}\n\n  ngOnInit() {\n    let id = this.route.snapshot.paramMap.get('id');\n    this.hero$ = this.service.getHero(id);\n  }\n\n  gotoItems(item: Item) {\n    let heroId = item ? hero.id : null;\n    // Pass along the item id if available\n    // so that the HeroList component can select that item.\n    this.router.navigate(['/heroes', { id: itemId }]);\n  }\n\n</item></code-example>\n<a id=\"lazy-loading\"></a>\n<h2 id=\"lazy-loading\" translation-result=\"on\">惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-loading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"lazy-loading\">Lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以配置路由定义来实现惰性加载模块，这意味着 Angular 只会在需要时才加载这些模块，而不是在应用启动时就加载全部。\n另外，你可以在后台预加载一些应用部件来改善用户体验。</p><p translation-origin=\"off\">You can configure your routes to lazy load modules, which means that Angular only loads modules as needed, rather than loading all modules when the app launches.\nAdditionally, you can preload parts of your app in the background to improve the user experience.</p>\n\n<p translation-result=\"on\">关于惰性加载和预加载的详情，请参见专门的指南<a href=\"guide/lazy-loading-ngmodules\">惰性加载 NgModule</a>。</p><p translation-origin=\"off\">For more information on lazy loading and preloading see the dedicated guide <a href=\"guide/lazy-loading-ngmodules\">Lazy loading NgModules</a>.</p>\n\n<h2 id=\"preventing-unauthorized-access\" translation-result=\"on\">防止未经授权的访问<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#preventing-unauthorized-access\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"preventing-unauthorized-access\">Preventing unauthorized access<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#preventing-unauthorized-access\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用路由守卫来防止用户未经授权就导航到应用的某些部分。Angular 中提供了以下路由守卫：</p><p translation-origin=\"off\">Use route guards to prevent users from navigating to parts of an app without authorization.\nThe following route guards are available in Angular:</p>\n\n<ul>\n<li><a href=\"api/router/CanActivate\"><code>CanActivate</code></a></li>\n<li><a href=\"api/router/CanActivateChild\"><code>CanActivateChild</code></a></li>\n<li><a href=\"api/router/CanDeactivate\"><code>CanDeactivate</code></a></li>\n<li><a href=\"api/router/Resolve\"><code>Resolve</code></a></li>\n<li><a href=\"api/router/CanLoad\"><code>CanLoad</code></a></li>\n</ul>\n<p translation-result=\"on\">要想使用路由守卫，可以考虑使用无组件路由，因为这对于保护子路由很方便。</p><p translation-origin=\"off\">To use route guards, consider using component-less routes as this facilitates guarding child routes.</p>\n\n<p translation-result=\"on\">为你的守卫创建一项服务：</p><p translation-origin=\"off\">Create a service for your guard:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate guard your-guard\n</code-example>\n<p translation-result=\"on\">请在守卫类里实现你要用到的守卫。下面的例子使用 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 来保护该路由。</p><p translation-origin=\"off\">In your guard class, implement the guard you want to use.\nThe following example uses <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> to guard the route.</p>\n\n<code-example header=\"Component (excerpt)\">\nexport class YourGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> {\n  canActivate(\n    next: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n      // your  logic goes here\n  }\n}\n</code-example>\n<p translation-result=\"on\">在路由模块中，在 <code>routes</code> 配置中使用相应的属性。这里的 <code>canActivate</code> 会告诉路由器它要协调到这个特定路由的导航。</p><p translation-origin=\"off\">In your routing module, use the appropriate property in your <code>routes</code> configuration.\nHere, <code>canActivate</code> tells the router to mediate navigation to this particular route.</p>\n\n<code-example header=\"Routing module (excerpt)\">\n{\n  path: '/your-path',\n  component: YourComponent,\n  canActivate: [YourGuard],\n}\n</code-example>\n<p translation-result=\"on\">关于这个可运行示例的更多信息，请参阅<a href=\"guide/router#milestone-5-route-guards\">路由教程中的路由守卫部分</a>。</p><p translation-origin=\"off\">For more information with a working example, see the <a href=\"guide/router#milestone-5-route-guards\">routing tutorial section on route guards</a>.</p>\n\n<a id=\"router-tutorial\"></a>\n<h2 id=\"router-tutorial-tour-of-heroes\" translation-result=\"on\">路由器教程：英雄指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-tutorial-tour-of-heroes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"router-tutorial-tour-of-heroes\">Router tutorial: tour of heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-tutorial-tour-of-heroes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">虽然<a href=\"tutorial\">“快速上手：英雄指南”</a>教程介绍了 Angular 中的一般概念，而本篇 <a href=\"guide/router#getting-started\">“路由器教程”</a>详细介绍了 Angular 的路由能力。本教程将指导你在基本的路由器配置之上，创建子路由、读取路由参数、惰性加载 NgModules、路由守卫，和预加载数据，以改善用户体验。</p><p translation-origin=\"off\">While the <a href=\"tutorial\">Getting Started: Tour of Heroes</a> tutorial introduces general Angular concepts, this <a href=\"guide/router#getting-started\">Router Tutorial</a> goes into greater detail regarding Angular's routing capabilities.\nThis tutorial guides you through building upon basic router configuration to create child routes, read route parameters, lazy load NgModules, guard routes, and preload data to improve the user experience.</p>\n\n<a id=\"router-tutorial-overview\"></a>\n<h3 id=\"router-tutorial-overview\" translation-result=\"on\">路由器教程概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-tutorial-overview\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-tutorial-overview\">Router tutorial overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-tutorial-overview\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本章要讲的是如何开发一个带路由的多页面应用。\n接下来会重点讲解了路由的关键特性，比如：</p><p translation-origin=\"off\">This guide describes development of a multi-page routed sample application.\nAlong the way, it highlights key features of the router such as:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 把应用的各个特性组织成模块。</p><p translation-origin=\"off\">Organizing the application features into modules.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 导航到组件（<em>Heroes</em> 链接到“英雄列表”组件）。</p><p translation-origin=\"off\">Navigating to a component (<em>Heroes</em> link to \"Heroes List\").</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 包含一个路由参数（当路由到“英雄详情”时，把该英雄的 <code>id</code> 传进去）。</p><p translation-origin=\"off\">Including a route parameter (passing the Hero <code>id</code> while routing to the \"Hero Detail\").</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 子路由（<em>危机中心</em>特性有一组自己的路由）。</p><p translation-origin=\"off\">Child routes (the <em>Crisis Center</em> has its own routes).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫（检查路由的访问权限）。</p><p translation-origin=\"off\">The <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> guard (checking route access).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫（检查子路由的访问权限）。</p><p translation-origin=\"off\">The <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> guard (checking child route access).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫（询问是否丢弃未保存的更改）。</p><p translation-origin=\"off\">The <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> guard (ask permission to discard unsaved changes).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 守卫（预先获取路由数据）。</p><p translation-origin=\"off\">The <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> guard (pre-fetching route data).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 惰性加载一个模块。</p><p translation-origin=\"off\">Lazy loading an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫（在加载特性模块之前进行检查）。</p><p translation-origin=\"off\">The <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guard (check before loading feature module assets).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">就像你正逐步构建应用一样，本指南设置了一系列里程碑。不过这里假设你已经熟悉了 <a href=\"guide/architecture\">Angular 的基本概念</a>。有关 Angular 的一般性介绍，参见<a href=\"start\">“快速上手”</a>。有关更深入的概述，请参阅<a href=\"tutorial\">“英雄指南”</a>教程。</p><p translation-origin=\"off\">This guide proceeds as a sequence of milestones as if you were building the app step-by-step, but assumes you are familiar with basic <a href=\"guide/architecture\">Angular concepts</a>.\nFor a general introduction to angular, see the <a href=\"start\">Getting Started</a>. For a more in-depth overview, see the <a href=\"tutorial\">Tour of Heroes</a> tutorial.</p>\n\n<p translation-result=\"on\">有关该应用最终版本的可工作范例，请参阅<live-example></live-example>。</p><p translation-origin=\"off\">For a working example of the final version of the app, see the <live-example></live-example>.</p>\n\n<h3 id=\"the-sample-application-in-action\" translation-result=\"on\">范例程序实战<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#the-sample-application-in-action\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-sample-application-in-action\">The sample application in action<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#the-sample-application-in-action\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本教程的示例应用会帮助“英雄职业管理局”找到需要英雄来解决的危机。</p><p translation-origin=\"off\">The sample application for this tutorial helps the Hero Employment Agency find crises for heroes to solve.</p>\n\n<p translation-result=\"on\">本应用具有三个主要的特性区：</p><p translation-origin=\"off\">The application has three main feature areas:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><em>危机中心</em>用于维护要指派给英雄的危机列表。</p><p translation-origin=\"off\">A <em>Crisis Center</em> for maintaining the list of crises for assignment to heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>英雄</em>区用于维护管理局雇佣的英雄列表。</p><p translation-origin=\"off\">A <em>Heroes</em> area for maintaining the list of heroes employed by the agency.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>管理</em>区会管理危机和英雄的列表。</p><p translation-origin=\"off\">An <em>Admin</em> area to manage the list of crises and heroes.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">点击<live-example title=\"英雄职介中心的现场演练\"></live-example>试用一下。</p><p translation-origin=\"off\">Try it by clicking on this <live-example title=\"Hero Employment Agency Live Example\">live example link</live-example>.</p>\n\n<p translation-result=\"on\">该应用会渲染出一排导航按钮和和一个<em>英雄列表</em>视图。</p><p translation-origin=\"off\">The app renders with a row of navigation buttons and the <em>Heroes</em> view with its list of heroes.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/hero-list.png\" alt=\"Hero List\" width=\"250\" height=\"225\">\n</div>\n<p translation-result=\"on\">选择其中之一，该应用就会把你带到此英雄的编辑页面。</p><p translation-origin=\"off\">Select one hero and the app takes you to a hero editing screen.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/hero-detail.png\" alt=\"Crisis Center Detail\" width=\"250\" height=\"162\">\n</div>\n<p translation-result=\"on\">修改完名字，再点击“后退”按钮，应用又回到了英雄列表页，其中显示的英雄名已经变了。注意，对名字的修改会立即生效。</p><p translation-origin=\"off\">Alter the name.\nClick the \"Back\" button and the app returns to the heroes list which displays the changed hero name.\nNotice that the name change took effect immediately.</p>\n\n<p translation-result=\"on\">另外你也可以点击浏览器本身的后退按钮（而不是应用中的 “Back” 按钮），这也同样会回到英雄列表页。\n在 Angular 应用中导航也会和标准的 Web 导航一样更新浏览器中的历史。</p><p translation-origin=\"off\">Had you clicked the browser's back button instead of the app's \"Back\" button, the app would have returned you to the heroes list as well.\nAngular app navigation updates the browser history as normal web navigation does.</p>\n\n<p translation-result=\"on\">现在，点击<em>危机中心</em>链接，前往<em>危机</em>列表页。</p><p translation-origin=\"off\">Now click the <em>Crisis Center</em> link for a list of ongoing crises.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/crisis-center-list.png\" alt=\"Crisis Center List\" width=\"250\" height=\"209\">\n</div>\n<p translation-result=\"on\">选择其中之一，该应用就会把你带到此危机的编辑页面。\n<em>危机详情</em>是当前页的子组件，就在列表的紧下方。</p><p translation-origin=\"off\">Select a crisis and the application takes you to a crisis editing screen.\nThe <em>Crisis Detail</em> appears in a child component on the same page, beneath the list.</p>\n\n<p translation-result=\"on\">修改危机的名称。\n注意，危机列表中的相应名称<strong>并没有</strong>修改。</p><p translation-origin=\"off\">Alter the name of a crisis.\nNotice that the corresponding name in the crisis list does <em>not</em> change.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/crisis-center-detail.png\" alt=\"Crisis Center Detail\" width=\"250\" height=\"281\">\n</div>\n<p translation-result=\"on\">这和<em>英雄详情</em>页略有不同。<em>英雄详情</em>会立即保存你所做的更改。\n而<em>危机详情</em>页中，你的更改都是临时的 —— 除非按“保存”按钮保存它们，或者按“取消”按钮放弃它们。\n这两个按钮都会导航回<em>危机中心</em>，显示危机列表。</p><p translation-origin=\"off\">Unlike <em>Hero Detail</em>, which updates as you type, <em>Crisis Detail</em> changes are temporary until you either save or discard them by pressing the \"Save\" or \"Cancel\" buttons.\nBoth buttons navigate back to the <em>Crisis Center</em> and its list of crises.</p>\n\n<p translation-result=\"on\">单击浏览器后退按钮或 “Heroes” 链接，可以激活一个对话框。</p><p translation-origin=\"off\">Click the browser back button or the \"Heroes\" link to activate a dialog.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/confirm-dialog.png\" alt=\"Confirm Dialog\" width=\"250\" height=\"101\">\n</div>\n<p translation-result=\"on\">你可以回答“确定”以放弃这些更改，或者回答“取消”来继续编辑。</p><p translation-origin=\"off\">You can say \"OK\" and lose your changes or click \"Cancel\" and continue editing.</p>\n\n<p translation-result=\"on\">这种行为的幕后是路由器的 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫。\n该守卫让你有机会进行清理工作或在离开当前视图之前请求用户的许可。</p><p translation-origin=\"off\">Behind this behavior is the router's <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> guard.\nThe guard gives you a chance to clean-up or ask the user's permission before navigating away from the current view.</p>\n\n<p translation-result=\"on\"><code>Admin</code> 和 <code>Login</code> 按钮用于演示路由器的其它能力，本章稍后的部分会讲解它们。</p><p translation-origin=\"off\">The <code>Admin</code> and <code>Login</code> buttons illustrate other router capabilities covered later in the guide.</p>\n\n<a id=\"getting-started\"></a>\n<h2 id=\"milestone-1-getting-started\" translation-result=\"on\">里程碑 1：起步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-1-getting-started\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"milestone-1-getting-started\">Milestone 1: Getting started<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-1-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">开始本应用的一个简版，它在两个空路由之间导航。</p><p translation-origin=\"off\">Begin with a basic version of the app that navigates between two empty views.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/router-1-anim.gif\" alt=\"App in action\" width=\"250\" height=\"152\">\n</div>\n<a id=\"import\"></a>\n<p translation-result=\"on\">用 Angular CLI 生成一个范例应用。</p><p translation-origin=\"off\">Generate a sample application with the Angular CLI.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng new angular-router-sample\n</code-example>\n<h3 id=\"define-routes\" translation-result=\"on\">定义路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#define-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"define-routes\">Define Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#define-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">路由器必须用“路由定义”的列表进行配置。</p><p translation-origin=\"off\">A router must be configured with a list of route definitions.</p>\n\n<p translation-result=\"on\">每个定义都被翻译成了一个<a href=\"api/router/Route\">Route</a>对象。该对象有一个 <code>path</code> 字段，表示该路由中的 URL 路径部分，和一个 <code>component</code> 字段，表示与该路由相关联的组件。</p><p translation-origin=\"off\">Each definition translates to a <a href=\"api/router/Route\">Route</a> object which has two things: a <code>path</code>, the URL path segment for this route; and a <code>component</code>, the component associated with this route.</p>\n\n<p translation-result=\"on\">当浏览器的 URL 变化时或在代码中告诉路由器导航到一个路径时，路由器就会翻出它用来保存这些路由定义的注册表。</p><p translation-origin=\"off\">The router draws upon its registry of definitions when the browser URL changes or when application code tells the router to navigate along a route path.</p>\n\n<p translation-result=\"on\">第一个路由执行以下操作：</p><p translation-origin=\"off\">The first route does the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 当浏览器地址栏的 URL 变化时，如果它匹配上了路径部分 <code>/crisis-center</code>，路由器就会激活一个 <code>CrisisListComponent</code> 的实例，并显示它的视图。</p><p translation-origin=\"off\">When the browser's location URL changes to match the path segment <code>/crisis-center</code>, then the router activates an instance of the <code>CrisisListComponent</code> and displays its view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当应用程序请求导航到路径 <code>/crisis-center</code> 时，路由器激活一个 <code>CrisisListComponent</code> 的实例，显示它的视图，并将该路径更新到浏览器地址栏和历史。</p><p translation-origin=\"off\">When the application requests navigation to the path <code>/crisis-center</code>, the router activates an instance of <code>CrisisListComponent</code>, displays its view, and updates the browser's address location and history with the URL for that path.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">第一个配置定义了由两个路由构成的数组，它们用最短路径指向了 <code>CrisisListComponent</code> 和 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">The first configuration defines an array of two routes with minimal paths leading to the <code>CrisisListComponent</code> and <code>HeroListComponent</code>.</p>\n\n<p translation-result=\"on\">生成 <code>CrisisList</code> 和 <code>HeroList</code> 组件，以便路由器能够渲染它们。</p><p translation-origin=\"off\">Generate the <code>CrisisList</code> and <code>HeroList</code> components so that the router has something to render.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component crisis-list\n</code-example>\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component hero-list\n</code-example>\n<p translation-result=\"on\">把每个组件的内容都替换成下列范例 HTML。</p><p translation-origin=\"off\">Replace the contents of each component with the sample HTML below.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router/src/app/crisis-list/crisis-list.component.1.html\">\n&#x3C;h2>CRISIS CENTER&#x3C;/h2>\n&#x3C;p>Get your crisis here&#x3C;/p>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-list/hero-list.component.html\" path=\"router/src/app/hero-list/hero-list.component.1.html\" region=\"template\">\n&#x3C;h2>HEROES&#x3C;/h2>\n&#x3C;p>Get your heroes here&#x3C;/p>\n\n\n</code-pane>\n\n</code-tabs>\n<h3 id=\"register-router-and-routes\" translation-result=\"on\">注册 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#register-router-and-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"register-router-and-routes\">Register <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> and <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#register-router-and-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">为了使用 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，你必须注册来自 <code>@angular/router</code> 包中的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。定义一个路由数组 <code>appRoutes</code>，并把它传给 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法。<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法会返回一个模块，其中包含配置好的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务提供者，以及路由库所需的其它提供者。一旦启动了应用，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 就会根据当前的浏览器 URL 进行首次导航。</p><p translation-origin=\"off\">In order to use the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>, you must first register the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> from the <code>@angular/router</code> package.\nDefine an array of routes, <code>appRoutes</code>, and pass them to the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method.\nThe <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method returns a module that containa the configured <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service provider, plus other providers that the routing library requires.\nOnce the application is bootstrapped, the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> performs the initial navigation based on the current browser URL.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">  <strong>注意：</strong> <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法是用于注册全应用级提供者的编码模式。要详细了解全应用级提供者，参见<a href=\"guide/singleton-services#forRoot-router\">单例服务</a> 一章。</p><p translation-origin=\"off\">  <strong>Note:</strong> The <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method is a pattern used to register application-wide providers. Read more about application-wide providers in the <a href=\"guide/singleton-services#forRoot-router\">Singleton services</a> guide.</p>\n\n</div>\n<code-example path=\"router/src/app/app.module.1.ts\" header=\"src/app/app.module.ts (first-config)\" region=\"first-config\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }        from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { AppComponent }          from './app.component';\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\nimport { HeroListComponent }     from './hero-list/hero-list.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes', component: HeroListComponent },\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">对于最小化的路由配置，把配置好的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到 <code>AppModule</code> 中就足够了。但是，随着应用的成长，你将需要<a href=\"guide/router#refactor-the-routing-configuration-into-a-routing-module\">将路由配置重构</a>到单独的文件中，并创建<a href=\"guide/router#routing-module\">路由模块</a>，路由模块是一种特殊的、专做路由的<strong>服务模块</strong>。</p><p translation-origin=\"off\">Adding the configured <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to the <code>AppModule</code> is sufficient for minimal route configurations.\nHowever, as the application grows, <a href=\"guide/router#refactor-the-routing-configuration-into-a-routing-module\">refactor the routing configuration</a> into a separate file and create a <a href=\"guide/router#routing-module\">Routing Module</a>.\nA routing module is a special type of <code>Service Module</code> dedicated to routing.</p>\n\n</div>\n<p translation-result=\"on\">把 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 注册到 <code>AppModule</code> 的 <code>imports</code> 数组中，能让该 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务在应用的任何地方都能使用。</p><p translation-origin=\"off\">Registering the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> in the <code>AppModule</code> <code>imports</code> array makes the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service available everywhere in the application.</p>\n\n<a id=\"shell\"></a>\n<h3 id=\"add-the-router-outlet\" translation-result=\"on\">添加路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-the-router-outlet\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-the-router-outlet\">Add the Router Outlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-the-router-outlet\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">根组件 <code>AppComponent</code> 是本应用的壳。它在顶部有一个标题、一个带两个链接的导航条，在底部有一个<em>路由器出口</em>，路由器会在它所指定的位置上渲染各个组件。</p><p translation-origin=\"off\">The root <code>AppComponent</code> is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router renders components.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/shell-and-outlet.png\" alt=\"Shell\" width=\"300\" height=\"102\">\n</div>\n<p translation-result=\"on\">路由出口扮演一个占位符的角色，表示路由组件将会渲染到哪里。</p><p translation-origin=\"off\">The router outlet serves as a placeholder where the routed components are rendered.</p>\n\n<a id=\"shell-template\"></a>\n<p translation-result=\"on\">该组件所对应的模板是这样的：</p><p translation-origin=\"off\">The corresponding component template looks like this:</p>\n\n<code-example path=\"router/src/app/app.component.1.html\" header=\"src/app/app.component.html\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<a id=\"wildcard\"></a>\n<h3 id=\"define-a-wildcard-route\" translation-result=\"on\">定义通配符路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#define-a-wildcard-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"define-a-wildcard-route\">Define a Wildcard route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#define-a-wildcard-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你以前在应用中创建过两个路由，一个是 <code>/crisis-center</code>，另一个是 <code>/heroes</code>。\n所有其它 URL 都会导致路由器抛出错误，并让应用崩溃。</p><p translation-origin=\"off\">You've created two routes in the app so far, one to <code>/crisis-center</code> and the other to <code>/heroes</code>.\nAny other URL causes the router to throw an error and crash the app.</p>\n\n<p translation-result=\"on\">可以添加一个通配符路由来拦截所有无效的 URL，并优雅的处理它们。\n通配符路由的 <code>path</code> 是两个星号（<code>**</code>），它会匹配任何 URL。\n而当路由器匹配不上以前定义的那些路由时，它就会选择这个通配符路由。\n通配符路由可以导航到自定义的“404 Not Found”组件，也可以<a href=\"guide/router#redirect\">重定向</a>到一个现有路由。</p><p translation-origin=\"off\">Add a wildcard route to intercept invalid URLs and handle them gracefully.\nA wildcard route has a path consisting of two asterisks.\nIt matches every URL.\nThus, the router selects this wildcard route if it can't match a route earlier in the configuration.\nA wildcard route can navigate to a custom \"404 Not Found\" component or <a href=\"guide/router#redirect\">redirect</a> to an existing route.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">路由器会使用<a href=\"guide/router#example-config\">先到先得</a>的策略来选择路由。\n由于通配符路由是最不具体的那个，因此务必确保它是路由配置中的<em>最后一个</em>路由。</p><p translation-origin=\"off\">The router selects the route with a <a href=\"guide/router#example-config\"><em>first match wins</em></a> strategy.\nBecause a wildcard route is the least specific route, place it last in the route configuration.</p>\n\n</div>\n<p translation-result=\"on\">要测试本特性，请往 <code>HeroListComponent</code> 的模板中添加一个带 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的按钮，并且把它的链接设置为一个不存在的路由 <code>\"/sidekicks\"</code>。</p><p translation-origin=\"off\">To test this feature, add a button with a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> to the <code>HeroListComponent</code> template and set the link to a non-existant route called <code>\"/sidekicks\"</code>.</p>\n\n<code-example path=\"router/src/app/hero-list/hero-list.component.1.html\" header=\"src/app/hero-list/hero-list.component.html (excerpt)\">\n&#x3C;h2>HEROES&#x3C;/h2>\n&#x3C;p>Get your heroes here&#x3C;/p>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\">Go to sidekicks&#x3C;/button>\n\n\n</code-example>\n<p translation-result=\"on\">当用户点击该按钮时，应用就会失败，因为你尚未定义过 <code>\"/sidekicks\"</code> 路由。</p><p translation-origin=\"off\">The application fails if the user clicks that button because you haven't defined a <code>\"/sidekicks\"</code> route yet.</p>\n\n<p translation-result=\"on\">不要添加 <code>\"/sidekicks\"</code> 路由，而是定义一个“通配符”路由，让它导航到 <code>PageNotFoundComponent</code> 组件。</p><p translation-origin=\"off\">Instead of adding the <code>\"/sidekicks\"</code> route, define a <code>wildcard</code> route and have it navigate to a <code>PageNotFoundComponent</code>.</p>\n\n<code-example path=\"router/src/app/app.module.1.ts\" header=\"src/app/app.module.ts (wildcard)\" region=\"wildcard\">\n{ path: '**', component: PageNotFoundComponent }\n\n</code-example>\n<p translation-result=\"on\">创建 <code>PageNotFoundComponent</code>，以便在用户访问无效网址时显示它。</p><p translation-origin=\"off\">Create the <code>PageNotFoundComponent</code> to display when users visit invalid URLs.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component page-not-found\n</code-example>\n<code-example path=\"router/src/app/page-not-found/page-not-found.component.html\" header=\"src/app/page-not-found.component.html (404 component)\">\n&#x3C;h2>Page not found&#x3C;/h2>\n\n</code-example>\n<p translation-result=\"on\">现在，当用户访问 <code>/sidekicks</code> 或任何无效的 URL 时，浏览器就会显示“Page not found”。\n浏览器的地址栏仍指向无效的 URL。</p><p translation-origin=\"off\">Now when the user visits <code>/sidekicks</code>, or any other invalid URL, the browser displays \"Page not found\".\nThe browser address bar continues to point to the invalid URL.</p>\n\n<a id=\"redirect\"></a>\n<h3 id=\"set-up-redirects\" translation-result=\"on\">设置跳转<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#set-up-redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"set-up-redirects\">Set up redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#set-up-redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">应用启动时，浏览器地址栏中的初始 URL 默认是这样的：</p><p translation-origin=\"off\">When the application launches, the initial URL in the browser bar is by default:</p>\n\n<code-example>\n  localhost:4200\n</code-example>\n<p translation-result=\"on\">它不能匹配上任何硬编码进来的路由，于是就会走到通配符路由中去，并且显示 <code>PageNotFoundComponent</code>。</p><p translation-origin=\"off\">That doesn't match any of the hard-coded routes which means the router falls through to the wildcard route and displays the <code>PageNotFoundComponent</code>.</p>\n\n<p translation-result=\"on\">这个应用需要一个有效的默认路由，在这里应该用英雄列表作为默认页。当用户点击\"Heroes\"链接或把 <code>localhost:4200/heroes</code> 粘贴到地址栏时，它应该导航到列表页。</p><p translation-origin=\"off\">The application needs a default route to a valid page.\nThe default page for this app is the list of heroes.\nThe app should navigate there as if the user clicked the \"Heroes\" link or pasted <code>localhost:4200/heroes</code> into the address bar.</p>\n\n<p translation-result=\"on\">添加一个 <code>redirect</code> 路由，把最初的相对 URL（<code>''</code>）转换成所需的默认路径（<code>/heroes</code>）。</p><p translation-origin=\"off\">Add a <code>redirect</code> route that translates the initial relative URL (<code>''</code>) to the desired default path (<code>/heroes</code>).</p>\n\n<p translation-result=\"on\">在通配符路由<em>上方</em>添加一个默认路由。\n在下方的代码片段中，它出现在通配符路由的紧上方，展示了这个里程碑的完整 <code>appRoutes</code>。</p><p translation-origin=\"off\">Add the default route somewhere <em>above</em> the wildcard route.\nIt's just above the wildcard route in the following excerpt showing the complete <code>appRoutes</code> for this milestone.</p>\n\n<code-example path=\"router/src/app/app-routing.module.1.ts\" header=\"src/app/app-routing.module.ts (appRoutes)\" region=\"appRoutes\">\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n</code-example>\n<p translation-result=\"on\">浏览器的地址栏会显示 <code>.../heroes</code>，好像你直接在那里导航一样。</p><p translation-origin=\"off\">The browser address bar shows <code>.../heroes</code> as if you'd navigated there directly.</p>\n\n<p translation-result=\"on\">重定向路由需要一个 <code>pathMatch</code> 属性，来告诉路由器如何用 URL 去匹配路由的路径。\n在本应用中，路由器应该只有在*完整的 URL_等于 <code>''</code> 时才选择 <code>HeroListComponent</code> 组件，因此要把 <code>pathMatch</code> 设置为 <code>'full'</code>。</p><p translation-origin=\"off\">A redirect route requires a <code>pathMatch</code> property to tell the router how to match a URL to the path of a route.\nIn this app, the router should select the route to the <code>HeroListComponent</code> only when the <em>entire URL</em> matches <code>''</code>, so set the <code>pathMatch</code> value to <code>'full'</code>.</p>\n\n<a id=\"pathmatch\"></a>\n<div class=\"callout is-helpful\">\n  <header translation-result=\"on\">聚焦 pathMatch</header><header translation-origin=\"off\">Spotlight on pathMatch</header>\n  \n<p translation-result=\"on\">  从技术角度看，<code>pathMatch = 'full'</code> 会导致 URL 中<em>剩下的</em>、未匹配的部分必须等于 <code>''</code>。  在这个例子中，跳转路由在一个顶层路由中，因此<em>剩下的_URL 和</em>完整的_URL 是一样的。</p><p translation-origin=\"off\">  Technically, <code>pathMatch = 'full'</code> results in a route hit when the <em>remaining</em>, unmatched  segments of the URL match <code>''</code>.\nIn this example, the redirect is in a top level route so the <em>remaining</em> URL and the  <em>entire</em> URL are the same thing.</p>\n\n<p translation-result=\"on\">  <code>pathMatch</code> 的另一个可能的值是 <code>'prefix'</code>，它会告诉路由器：当*剩下的_URL 以这个跳转路由中的 <code>prefix</code> 值开头时，就会匹配上这个跳转路由。\n但这不适用于此示例应用，因为如果 <code>pathMatch</code> 值是 <code>'prefix'</code>，那么每个 URL 都会匹配 <code>''</code>。</p><p translation-origin=\"off\">  The other possible <code>pathMatch</code> value is <code>'prefix'</code> which tells the router to match the  redirect route when the remaining URL begins with the redirect route's prefix  path.\nThis doesn't apply to this sample app because if the <code>pathMatch</code> value were <code>'prefix'</code>,   every URL would match <code>''</code>.</p>\n\n<p translation-result=\"on\">  尝试把它设置为 <code>'prefix'</code>，并点击 <code>Go to sidekicks</code> 按钮。这是因为它是一个无效 URL，本应显示“Page not found”页。\n但是，你仍然在“英雄列表”页中。在地址栏中输入一个无效的 URL，你又被路由到了 <code>/heroes</code>。\n<em>每一个</em> URL，无论有效与否，都会匹配上这个路由定义。</p><p translation-origin=\"off\">Try setting it to <code>'prefix'</code> and clicking the <code>Go to sidekicks</code> button.\nSince that's a bad URL, you should see the \"Page not found\" page.\nInstead, you're still on the \"Heroes\" page.\nEnter a bad URL in the browser address bar.\nYou're instantly re-routed to <code>/heroes</code>.\nEvery URL, good or bad, that falls through to this route definition is a match.</p>\n\n<p translation-result=\"on\">  默认路由应该只有在整个URL 等于 <code>''</code> 时才重定向到 <code>HeroListComponent</code>，别忘了把重定向路由设置为 <code>pathMatch = 'full'</code>。</p><p translation-origin=\"off\">  The default route should redirect to the <code>HeroListComponent</code> only when the entire url is  <code>''</code>.\nRemember to restore the redirect to <code>pathMatch = 'full'</code>.</p>\n\n<p translation-result=\"on\">  要了解更多，参见 Victor Savkin 的帖子<a href=\"http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\">关于重定向</a>。</p><p translation-origin=\"off\">  Learn more in Victor Savkin's\n<a href=\"http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes\">post on redirects</a>.</p>\n\n</div>\n<h3 id=\"milestone-1-wrap-up\" translation-result=\"on\">里程碑 1 小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-1-wrap-up\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"milestone-1-wrap-up\">Milestone 1 wrap up<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-1-wrap-up\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当用户单击某个链接时，该示例应用可以在两个视图之间切换。</p><p translation-origin=\"off\">Your sample app can switch between two views when the user clicks a link.</p>\n\n<p translation-result=\"on\">里程碑 1 涵盖了以下几点的做法：</p><p translation-origin=\"off\">Milestone 1 has covered how to do the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 加载路由库</p><p translation-origin=\"off\">Load the router library.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 往壳组件的模板中添加一个导航条，导航条中有一些 A 标签、<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令和 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令</p><p translation-origin=\"off\">Add a nav bar to the shell template with anchor tags, <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>  and <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directives.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 往壳组件的模板中添加一个 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令，视图将会被显示在那里</p><p translation-origin=\"off\">Add a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> to the shell template where views are displayed.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 配置路由器模块</p><p translation-origin=\"off\">Configure the router module with <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 设置路由器，使其合成 HTML5 模式的浏览器 URL</p><p translation-origin=\"off\">Set the router to compose HTML5 browser URLs.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 使用通配符路由来处理无效路由</p><p translation-origin=\"off\">Handle invalid routes with a <code>wildcard</code> route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当应用在空路径下启动时，导航到默认路由</p><p translation-origin=\"off\">Navigate to the default route when the app launches with an empty path.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这个初学者应用的结构是这样的：</p><p translation-origin=\"off\">The starter app's structure looks like this:</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-router-sample\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          crisis-list\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            crisis-list.component.css</p>\n          </div>\n        <div class=\"file\">\n<p>          crisis-list.component.html</p>\n        </div>\n        <div class=\"file\">\n<p>          crisis-list.component.ts</p>\n        </div>\n        </div>\n        <div class=\"file\">\n          hero-list\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            hero-list.component.css</p>\n          </div>\n          <div class=\"file\">\n<p>            hero-list.component.html</p>\n          </div>\n          <div class=\"file\">\n<p>            hero-list.component.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n          page-not-found\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            page-not-found.component.css</p>\n          </div>\n          <div class=\"file\">\n<p>            page-not-found.component.html</p>\n          </div>\n          <div class=\"file\">\n<p>            page-not-found.component.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.css\n        </div>\n        <div class=\"file\">\n          app.component.html\n        </div>\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n<p>          app.module.ts</p>\n        </div>\n      </div>\n      <div class=\"file\">\n<p>        main.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        index.html</p>\n      </div>\n      <div class=\"file\">\n<p>        styles.css</p>\n      </div>\n      <div class=\"file\">\n<p>        tsconfig.json</p>\n      </div>\n    </div>\n    <div class=\"file\">\n<p>      node_modules ...</p>\n    </div>\n    <div class=\"file\">\n<p>      package.json</p>\n    </div>\n  </div>\n</div>\n<p translation-result=\"on\">下面是本里程碑中的文件列表：</p><p translation-origin=\"off\">Here are the files in this milestone.</p>\n\n<code-tabs>\n\n  <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.1.html\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-pane>\n\n  <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }        from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { AppComponent }          from './app.component';\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\nimport { HeroListComponent }     from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes', component: HeroListComponent },\n\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"hero-list/hero-list.component.html\" path=\"router/src/app/hero-list/hero-list.component.1.html\">\n&#x3C;h2>HEROES&#x3C;/h2>\n&#x3C;p>Get your heroes here&#x3C;/p>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\">Go to sidekicks&#x3C;/button>\n\n\n</code-pane>\n\n  <code-pane header=\"crisis-list/crisis-list.component.html\" path=\"router/src/app/crisis-list/crisis-list.component.1.html\">\n&#x3C;h2>CRISIS CENTER&#x3C;/h2>\n&#x3C;p>Get your crisis here&#x3C;/p>\n\n\n</code-pane>\n\n  <code-pane header=\"page-not-found/page-not-found.component.html\" path=\"router/src/app/page-not-found/page-not-found.component.html\">\n&#x3C;h2>Page not found&#x3C;/h2>\n\n</code-pane>\n\n  <code-pane header=\"index.html\" path=\"router/src/index.html\">\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;!-- Set the base href -->\n    &#x3C;base href=\"/\">\n    &#x3C;title>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/title>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &#x3C;/head>\n\n  &#x3C;body>\n    &#x3C;app-root>&#x3C;/app-root>\n  &#x3C;/body>\n\n&#x3C;/html>\n\n</code-pane>\n\n</code-tabs>\n<a id=\"routing-module\"></a>\n<h2 id=\"milestone-2-routing-module\" translation-result=\"on\">里程碑 2：<strong>路由模块</strong><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-2-routing-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"milestone-2-routing-module\">Milestone 2: <em>Routing module</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-2-routing-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">这个里程碑会向你展示如何配置一个名叫<em>路由模块</em>的专用<em>模块</em>，它会保存你应用的路由配置。</p><p translation-origin=\"off\">This milestone shows you how to configure a special-purpose module called a <em>Routing Module</em>, which holds your app's routing configuration.</p>\n\n<p translation-result=\"on\">路由模块有以下几个特点：</p><p translation-origin=\"off\">The Routing Module has several characteristics:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 把路由这个关注点从其它应用类关注点中分离出去。</p><p translation-origin=\"off\">Separates routing concerns from other application concerns.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 测试特性模块时，可以替换或移除路由模块。</p><p translation-origin=\"off\">Provides a module to replace or remove when testing the application.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 为路由服务提供者（如守卫和解析器等）提供一个众所周知的位置。</p><p translation-origin=\"off\">Provides a well-known location for routing service providers such as guards and resolvers.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">不要声明组件。</p><p translation-origin=\"off\">Does not declare components.</p>\n\n</li>\n</ul>\n<a id=\"integrate-routing\"></a>\n<h3 id=\"integrate-routing-with-your-app\" translation-result=\"on\">把路由集成到应用中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#integrate-routing-with-your-app\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"integrate-routing-with-your-app\">Integrate routing with your app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#integrate-routing-with-your-app\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">路由应用范例中默认不包含路由。\n要想在使用 <a href=\"cli\">Angular CLI</a> 创建项目时支持路由，请为项目或应用的每个 NgModule 设置 <code>--routing</code> 选项。\n当你用 CLI 命令 <a href=\"cli/new\"><code>ng new</code></a> 创建新项目或用 <a href=\"cli/generate\"><code>ng generate app</code></a> 命令创建新应用，请指定 <code>--routing</code> 选项。这会告诉 CLI 包含上 <code>@angular/router</code> 包，并创建一个名叫 <code>app-routing.module.ts</code> 的文件。\n然后你就可以在添加到项目或应用中的任何 NgModule 中使用路由功能了。</p><p translation-origin=\"off\">The sample routing application does not include routing by default.\nWhen you use the <a href=\"cli\">Angular CLI</a> to create a project that does use routing, set the <code>--routing</code> option for the project or app, and for each NgModule.\nWhen you create or initialize a new project (using the CLI <a href=\"cli/new\"><code>ng new</code></a> command) or a new app (using the <a href=\"cli/generate\"><code>ng generate app</code></a> command), specify the <code>--routing</code> option.\nThis tells the CLI to include the <code>@angular/router</code> npm package and create a file named <code>app-routing.module.ts</code>.\nYou can then use routing in any NgModule that you add to the project or app.</p>\n\n<p translation-result=\"on\">比如，可以用下列命令生成带路由的 NgModule。</p><p translation-origin=\"off\">For example, the following command generates an NgModule that can use routing.</p>\n\n<code-example language=\"sh\">\nng generate module my-module --routing\n</code-example>\n<p translation-result=\"on\">这将创建一个名叫 <code>my-module-routing.module.ts</code> 的独立文件，来保存这个 NgModule 的路由信息。\n该文件包含一个空的 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 对象，你可以使用一些指向各个组件和 NgModule 的路由来填充该对象。</p><p translation-origin=\"off\">This creates a separate file named <code>my-module-routing.module.ts</code> to store the NgModule's routes.\nThe file includes an empty <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> object that you can fill with routes to different components and NgModules.</p>\n\n<a id=\"routing-refactor\"></a>\n<h3 id=\"refactor-the-routing-configuration-into-a-routing-module\" translation-result=\"on\">将路由配置重构为路由模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#refactor-the-routing-configuration-into-a-routing-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"refactor-the-routing-configuration-into-a-routing-module\">Refactor the routing configuration into a routing module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#refactor-the-routing-configuration-into-a-routing-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>/app</code> 目录下创建一个 <code>AppRouting</code> 模块，以包含路由配置。</p><p translation-origin=\"off\">Create an <code>AppRouting</code> module in the <code>/app</code> folder to contain the routing configuration.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate module app-routing --module app --flat\n</code-example>\n<p translation-result=\"on\">导入 <code>CrisisListComponent</code>、<code>HeroListComponent</code> 和 <code>PageNotFoundCompponent</code> 组件，就像 <code>app.module.ts</code> 中那样。然后把 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的导入语句和路由配置以及 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 移入这个路由模块中。</p><p translation-origin=\"off\">Import the <code>CrisisListComponent</code>, <code>HeroListComponent</code>, and <code>PageNotFoundComponent</code> symbols\njust like you did in the <code>app.module.ts</code>.\nThen move the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> imports and routing configuration, including <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>, into this routing module.</p>\n\n<p translation-result=\"on\">把 Angular 的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到该模块的 <code>exports</code> 数组中，以便再次导出它。\n通过再次导出 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，当在 <code>AppModule</code> 中导入了 <code>AppRoutingModule</code> 之后，那些声明在 <code>AppModule</code> 中的组件就可以访问路由指令了，比如 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 和 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>。</p><p translation-origin=\"off\">Re-export the Angular <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> by adding it to the module <code>exports</code> array.\nBy re-exporting the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> here, the components declared in <code>AppModule</code> have access to router directives such as <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> and <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>.</p>\n\n<p translation-result=\"on\">做完这些之后，该文件变成了这样：</p><p translation-origin=\"off\">After these steps, the file should look like this.</p>\n\n<code-example path=\"router/src/app/app-routing.module.1.ts\" header=\"src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\nimport { HeroListComponent }     from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p translation-result=\"on\">接下来，修改 <code>app.module.ts</code> 文件，从 <code>imports</code> 数组中移除 <code>RouterModule.forRoot</code>。</p><p translation-origin=\"off\">Next, update the <code>app.module.ts</code> file by removing <code>RouterModule.forRoot</code> in the <code>imports</code> array.</p>\n\n<code-example path=\"router/src/app/app.module.2.ts\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }     from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\nimport { HeroListComponent }     from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">稍后，本指南将向你展示如何创建<a href=\"guide/router#heroes-functionality\">多个路由模块</a>，并<a href=\"guide/router#routing-module-order\">以正确的顺序</a>导入这些路由模块。</p><p translation-origin=\"off\">Later, this guide shows you how to create <a href=\"guide/router#heroes-functionality\">multiple routing modules</a> and import those routing modules <a href=\"guide/router#routing-module-order\">in the correct order</a>.</p>\n\n</div>\n<p translation-result=\"on\">应用继续照常运行，你可以把路由模块作为将来每个模块维护路由配置的中心位置。</p><p translation-origin=\"off\">The application continues to work just the same, and you can use <code>AppRoutingModule</code> as the central place to maintain future routing configuration.</p>\n\n<a id=\"why-routing-module\"></a>\n<h3 id=\"benfits-of-a-routing-module\" translation-result=\"on\">路由模块的优点<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#benfits-of-a-routing-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"benfits-of-a-routing-module\">Benfits of a routing module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#benfits-of-a-routing-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">路由模块（通常称为 <code>AppRoutingModule</code> ）代替了根模板或特性模块中的路由模块。</p><p translation-origin=\"off\">The routing module, often called the <code>AppRoutingModule</code>, replaces the routing configuration in the root or feature module.</p>\n\n<p translation-result=\"on\">这种路由模块在你的应用不断增长，以及配置中包括了专门的守卫和解析器服务时会非常有用。</p><p translation-origin=\"off\">The routing module is helpful as your app grows and when the configuration includes specialized guard and resolver services.</p>\n\n<p translation-result=\"on\">在配置很简单时，一些开发者会跳过路由模块，并将路由配置直接混合在关联模块中（比如 <code>AppModule</code> ）。</p><p translation-origin=\"off\">Some developers skip the routing module when the configuration is minimal and merge the routing configuration directly into the companion module (for example, <code>AppModule</code>).</p>\n\n<p translation-result=\"on\">大多数应用都应该采用路由模块，以保持一致性。\n它在配置复杂时，能确保代码干净。\n它让测试特性模块更加容易。\n它的存在让人一眼就能看出这个模块是带路由的。\n开发者可以很自然的从路由模块中查找和扩展路由配置。</p><p translation-origin=\"off\">Most apps should implement a routing module for consistency.\nIt keeps the code clean when configuration becomes complex.\nIt makes testing the feature module easier.\nIts existence calls attention to the fact that a module is routed.\nIt is where developers expect to find and expand routing configuration.</p>\n\n<a id=\"heroes-feature\"></a>\n<h2 id=\"milestone-3-heroes-feature\" translation-result=\"on\">里程碑 3: 英雄特征区<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-3-heroes-feature\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"milestone-3-heroes-feature\">Milestone 3: Heroes feature<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-3-heroes-feature\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本里程碑涵盖了以下内容：</p><p translation-origin=\"off\">This milestone covers the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 用模块把应用和路由组织为一些特性区。</p><p translation-origin=\"off\">Organizing the app and routes into feature areas using modules.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 命令式的从一个组件导航到另一个</p><p translation-origin=\"off\">Navigating imperatively from one component to another.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 通过路由传递必要信息和可选信息</p><p translation-origin=\"off\">Passing required and optional information in route parameters.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这个示例应用在<a href=\"tutorial/toh-pt4\" title=\"英雄指南：服务\">“英雄指南”教程</a>的“服务”部分重新创建了英雄特性区，并复用了<live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\"></live-example>中的大部分代码。</p><p translation-origin=\"off\">This sample app recreates the heroes feature in the \"Services\" section of the <a href=\"tutorial/toh-pt4\" title=\"Tour of Heroes: Services\">Tour of Heroes tutorial</a>, and reuses much of the code from the <live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\"></live-example>.</p>\n\n<!-- KW - this gif isn't ideal for accessibility. Would like to remove it.-->\n<!-- Here's how the user will experience this version of the app:\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/router/router-2-anim.gif' alt=\"App in action\">\n</div> -->\n<p translation-result=\"on\">典型的应用具有多个<em>特性区</em>，每个特性区都专注于特定的业务用途并拥有自己的文件夹。</p><p translation-origin=\"off\">A typical application has multiple feature areas, each dedicated to a particular business purpose with its own folder.</p>\n\n<p translation-result=\"on\">该部分将向你展示如何将应用重构为不同的特性模块、将它们导入到主模块中，并在它们之间导航。</p><p translation-origin=\"off\">This section shows you how refactor the app into different feature modules, import them into the main module and navigate among them.</p>\n\n<a id=\"heroes-functionality\"></a>\n<h3 id=\"add-heroes-functionality\" translation-result=\"on\">添加英雄管理功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-heroes-functionality\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-heroes-functionality\">Add heroes functionality<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-heroes-functionality\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">遵循下列步骤：</p><p translation-origin=\"off\">Follow these steps:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">为了管理这些英雄，在 <code>heroes</code> 目录下创建一个带路由的 <code>HeroesModule</code>，并把它注册到根模块 <code>AppModule</code> 中。</p><p translation-origin=\"off\">To manage the heroes, create a <code>HeroesModule</code> with routing in the heroes folder and register it with the root <code>AppModule</code>.</p>\n\n</li>\n</ul>\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate module heroes/heroes --module app --flat --routing\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\">把 <code>app</code> 下占位用的 <code>hero-list</code> 目录移到 <code>heroes</code> 目录中。</p><p translation-origin=\"off\">Move the placeholder <code>hero-list</code> folder that's in the <code>app</code> folder into the <code>heroes</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">从 <live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\">教程的 \"服务\" 部分</live-example>把 <code>heroes/heroes.component.html</code> 的内容复制到 <code>hero-list.component.html</code> 模板中。</p><p translation-origin=\"off\">Copy the contents of the <code>heroes/heroes.component.html</code> from\nthe <live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\">\"Services\" tutorial</live-example> into the <code>hero-list.component.html</code> template.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">给 <code>&#x3C;h2></code> 加文字，改成 <code>&#x3C;h2>HEROES&#x3C;/h2></code>。</p><p translation-origin=\"off\">Re-label the <code>&#x3C;h2></code> to <code>&#x3C;h2>HEROES&#x3C;/h2></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 删除模板底部的 <code>&#x3C;app-hero-detail></code> 组件。</p><p translation-origin=\"off\">Delete the <code>&#x3C;app-hero-detail></code> component at the bottom of the template.</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">把现场演练中 <code>heroes/heroes.component.css</code> 文件的内容复制到 <code>hero-list.component.css</code> 文件中。</p><p translation-origin=\"off\">Copy the contents of the <code>heroes/heroes.component.css</code> from the live example into the <code>hero-list.component.css</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把现场演练中 <code>heroes/heroes.component.ts</code> 文件的内容复制到 <code>hero-list.component.ts</code> 文件中。</p><p translation-origin=\"off\">Copy the contents of the <code>heroes/heroes.component.ts</code> from the live example into the <code>hero-list.component.ts</code> file.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">把组件类名改为 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">Change the component class name to <code>HeroListComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把 <code>selector</code> 改为 <code>app-hero-list</code>。</p><p translation-origin=\"off\">Change the <code>selector</code> to <code>app-hero-list</code>.</p>\n\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">   对于路由组件来说，这些选择器不是必须的，因为这些组件是在渲染页面时动态插入的，不过选择器对于在 HTML 元素树中标记和选中它们是很有用的。</p><p translation-origin=\"off\">   Selectors are not required for routed components because components are dynamically inserted when the page is rendered. However, they are useful for identifying and targeting them in your HTML element tree.</p>\n\n</div>\n<ul>\n<li>\n<p translation-result=\"on\">把 <code>hero-detail</code> 目录中的 <code>hero.ts</code>、<code>hero.service.ts</code> 和 <code>mock-heroes.ts</code> 文件复制到 <code>heroes</code> 子目录下。</p><p translation-origin=\"off\">Copy the <code>hero-detail</code> folder, the <code>hero.ts</code>, <code>hero.service.ts</code>,  and <code>mock-heroes.ts</code> files into the <code>heroes</code> subfolder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把 <code>message.service.ts</code> 文件复制到 <code>src/app</code> 目录下。</p><p translation-origin=\"off\">Copy the <code>message.service.ts</code> into the <code>src/app</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>hero.service.ts</code> 文件中修改导入 <code>message.service</code> 的相对路径。</p><p translation-origin=\"off\">Update the relative path import to the <code>message.service</code> in the <code>hero.service.ts</code> file.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">接下来，更新 <code>HeroesModule</code> 的元数据。</p><p translation-origin=\"off\">Next, update the <code>HeroesModule</code> metadata.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">导入 <code>HeroDetailComponent</code> 和 <code>HeroListComponent</code>，并添加到 <code>HeroesModule</code> 模块的 <code>declarations</code> 数组中。</p><p translation-origin=\"off\">Import and add the <code>HeroDetailComponent</code> and <code>HeroListComponent</code> to the <code>declarations</code> array in the <code>HeroesModule</code>.</p>\n\n</li>\n</ul>\n<code-example path=\"router/src/app/heroes/heroes.module.ts\" header=\"src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list/hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nimport { HeroesRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ]\n})\nexport class HeroesModule {}\n\n</code-example>\n<p translation-result=\"on\">英雄管理部分的文件结构如下：</p><p translation-origin=\"off\">The hero management file structure is as follows:</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    src/app/heroes</p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      hero-detail\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          hero-detail.component.css\n        </div>\n        <div class=\"file\">\n          hero-detail.component.html\n        </div>\n        <div class=\"file\">      \n          hero-detail.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      hero-list\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          hero-list.component.css\n        </div>\n        <div class=\"file\">\n          hero-list.component.html\n        </div>\n        <div class=\"file\">      \n          hero-list.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n<p>      hero.service.ts</p>\n    </div>\n    <div class=\"file\">\n      hero.ts\n    </div>\n    <div class=\"file\">\n      heroes-routing.module.ts\n    </div>\n    <div class=\"file\">\n<p>      heroes.module.ts</p>\n    </div>\n    <div class=\"file\">\n      mock-heroes.ts\n    </div>\n    </div>\n</div>\n\n<a id=\"hero-routing-requirements\"></a>\n<h4 id=\"hero-feature-routing-requirements\" translation-result=\"on\">英雄特性区的路由需求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#hero-feature-routing-requirements\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"hero-feature-routing-requirements\">Hero feature routing requirements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#hero-feature-routing-requirements\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">英雄特性区中有两个相互协作的组件：英雄列表和英雄详情。当你导航到列表视图时，它会获取英雄列表并显示出来。当你点击一个英雄时，详细视图就会显示那个特定的英雄。</p><p translation-origin=\"off\">The heroes feature has two interacting components, the hero list and the hero detail.\nWhen you navigate to list view, it gets a list of heroes and displays them.\nWhen you click on a hero, the detail view has to display that particular hero.</p>\n\n<p translation-result=\"on\">  通过把所选英雄的 id 编码进路由的 URL 中，就能告诉详情视图该显示哪个英雄。</p><p translation-origin=\"off\">You tell the detail view which hero to display by including the selected hero's id in the route URL.</p>\n\n<p translation-result=\"on\">从新位置 <code>src/app/heroes/</code> 目录中导入英雄相关的组件，并定义两个“英雄管理”路由。</p><p translation-origin=\"off\">Import the hero components from their new locations in the <code>src/app/heroes/</code> folder and define the two hero routes.</p>\n\n<p translation-result=\"on\">现在，你有了 <code>Heroes</code> 模块的路由，还得在 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中把它们注册给<em>路由器</em>，和 <code>AppRoutingModule</code> 中的做法几乎完全一样，只有一项重要的差别。</p><p translation-origin=\"off\">Now that you have routes for the <code>Heroes</code> module, register them with the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> via the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> as you did in the <code>AppRoutingModule</code>, with an important difference.</p>\n\n<p translation-result=\"on\">在 <code>AppRoutingModule</code> 中，你使用了静态的 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法来注册路由和全应用级服务提供者。在特性模块中你要改用 <code>forChild()</code> 静态方法。</p><p translation-origin=\"off\">In the <code>AppRoutingModule</code>, you used the static <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method to register the routes and application level service providers.\nIn a feature module you use the static <code>forChild()</code> method.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">只在根模块 <code>AppRoutingModule</code> 中调用 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>（如果在 <code>AppModule</code> 中注册应用的顶层路由，那就在 <code>AppModule</code> 中调用）。\n在其它模块中，你就必须调用 <code>RouterModule.forChild</code> 方法来注册附属路由。</p><p translation-origin=\"off\">Only call <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> in the root <code>AppRoutingModule</code>\n(or the <code>AppModule</code> if that's where you register top level application routes).\nIn any other module, you must call the <code><a href=\"api/router/RouterModule#forChild\" class=\"code-anchor\">RouterModule.forChild()</a></code> method to register additional routes.</p>\n\n</div>\n<p translation-result=\"on\">修改后的 <code>HeroesRoutingModule</code> 是这样的：</p><p translation-origin=\"off\">The updated <code>HeroesRoutingModule</code> looks like this:</p>\n\n<code-example path=\"router/src/app/heroes/heroes-routing.module.1.ts\" header=\"src/app/heroes/heroes-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list/hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">考虑为每个特性模块提供自己的路由配置文件。虽然特性路由目前还很少，但即使在小型应用中，路由也会变得越来越复杂。</p><p translation-origin=\"off\">Consider giving each feature module its own route configuration file.\nThough the feature routes are currently minimal, routes have a tendency to grow more complex even in small apps.</p>\n\n</div>\n<a id=\"remove-duplicate-hero-routes\"></a>\n<h4 id=\"remove-duplicate-hero-routes\" translation-result=\"on\">移除重复的“英雄管理”路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#remove-duplicate-hero-routes\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"remove-duplicate-hero-routes\">Remove duplicate hero routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#remove-duplicate-hero-routes\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">英雄类的路由目前定义在两个地方：<code>HeroesRoutingModule</code> 中（并最终给 <code>HeroesModule</code>）和 <code>AppRoutingModule</code> 中。</p><p translation-origin=\"off\">The hero routes are currently defined in two places: in the <code>HeroesRoutingModule</code>,\nby way of the <code>HeroesModule</code>, and in the <code>AppRoutingModule</code>.</p>\n\n<p translation-result=\"on\">由特性模块提供的路由会被路由器再组合上它们所导入的模块的路由。\n这让你可以继续定义特性路由模块中的路由，而不用修改主路由配置。</p><p translation-origin=\"off\">Routes provided by feature modules are combined together into their imported module's routes by the router.\nThis allows you to continue defining the feature module routes without modifying the main route configuration.</p>\n\n<p translation-result=\"on\">移除 <code>HeroListComponent</code> 的导入和来自 <code>app-routing.module.ts</code> 中的 <code>/heroes</code> 路由。</p><p translation-origin=\"off\">Remove the <code>HeroListComponent</code> import and the <code>/heroes</code> route from the <code>app-routing.module.ts</code>.</p>\n\n<p translation-result=\"on\">保留默认路由和通配符路由，因为这些路由仍然要在应用的顶层使用。</p><p translation-origin=\"off\">Leave the default and the wildcard routes as these are still in use at the top level of the application.</p>\n\n<code-example path=\"router/src/app/app-routing.module.2.ts\" header=\"src/app/app-routing.module.ts (v2)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\n// import { HeroListComponent }  from './hero-list/hero-list.component';  // &#x3C;-- delete this line\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  // { path: 'heroes',     component: HeroListComponent }, // &#x3C;-- delete this line\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<a id=\"merge-hero-routes\"></a>\n<h4 id=\"remove-heroes-declarations\" translation-result=\"on\">移除英雄列表的声明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#remove-heroes-declarations\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"remove-heroes-declarations\">Remove heroes declarations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#remove-heroes-declarations\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">因为 <code>HeroesModule</code> 现在提供了 <code>HeroListComponent</code>，所以把它从 <code>AppModule</code> 的 <code>declarations</code> 数组中移除。现在你已经有了一个单独的 <code>HeroesModule</code>，你可以用更多的组件和不同的路由来演进英雄特性区。</p><p translation-origin=\"off\">Because the <code>HeroesModule</code> now provides the <code>HeroListComponent</code>, remove it from the <code>AppModule</code>'s <code>declarations</code> array.\nNow that you have a separate <code>HeroesModule</code>, you can evolve the hero feature with more components and different routes.</p>\n\n<p translation-result=\"on\">经过这些步骤，<code>AppModule</code> 变成了这样：</p><p translation-origin=\"off\">After these steps, the <code>AppModule</code> should look like this:</p>\n\n<code-example path=\"router/src/app/app.module.3.ts\" header=\"src/app/app.module.ts\" region=\"remove-heroes\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { AppComponent }     from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule }     from './heroes/heroes.module';\n\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<a id=\"routing-module-order\"></a>\n<h3 id=\"module-import-order\" translation-result=\"on\">模块导入顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#module-import-order\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"module-import-order\">Module import order<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#module-import-order\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">请注意该模块的 <code>imports</code> 数组，<code>AppRoutingModule</code> 是最后一个，并且位于 <code>HeroesModule</code> 之后。</p><p translation-origin=\"off\">Notice that in the module <code>imports</code> array, the <code>AppRoutingModule</code> is last and comes <em>after</em> the <code>HeroesModule</code>.</p>\n\n<code-example path=\"router/src/app/app.module.3.ts\" region=\"module-imports\" header=\"src/app/app.module.ts (module-imports)\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  HeroesModule,\n  AppRoutingModule\n],\n\n</code-example>\n<p translation-result=\"on\">路由配置的顺序很重要，因为路由器会接受第一个匹配上导航所要求的路径的那个路由。</p><p translation-origin=\"off\">The order of route configuration is important because the router accepts the first route that matches a navigation request path.</p>\n\n<p translation-result=\"on\">当所有路由都在同一个 <code>AppRoutingModule</code> 时，你要把默认路由和<a href=\"guide/router#wildcard\">通配符路由</a>放在最后（这里是在 <code>/heroes</code> 路由后面），\n这样路由器才有机会匹配到 <code>/heroes</code> 路由，否则它就会先遇到并匹配上该通配符路由，并导航到“页面未找到”路由。</p><p translation-origin=\"off\">When all routes were in one <code>AppRoutingModule</code>, you put the default and <a href=\"guide/router#wildcard\">wildcard</a> routes last, after the <code>/heroes</code> route, so that the router had a chance to match a URL to the <code>/heroes</code> route <em>before</em> hitting the wildcard route and navigating to \"Page not found\".</p>\n\n<p translation-result=\"on\">每个路由模块都会根据导入的顺序把自己的路由配置追加进去。\n如果你先列出了 <code>AppRoutingModule</code>，那么通配符路由就会被注册在“英雄管理”路由<em>之前</em>。\n通配符路由（它匹配<em>任意</em>URL）将会拦截住每一个到“英雄管理”路由的导航，因此事实上屏蔽了所有“英雄管理”路由。</p><p translation-origin=\"off\">Each routing module augments the route configuration in the order of import.\nIf you listed <code>AppRoutingModule</code> first, the wildcard route would be registered <em>before</em> the hero routes.\nThe wildcard route—which matches <em>every</em> URL—would intercept the attempt to navigate to a hero route.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">反转路由模块的导入顺序，就会看到当点击英雄相关的链接时被导向了“页面未找到”路由。\n要学习如何在运行时查看路由器配置，参见<a href=\"guide/router#inspect-config\" title=\"Inspect the router config\">稍后的内容</a>。</p><p translation-origin=\"off\">Reverse the routing modules to see a click of the heroes link resulting in \"Page not found\".\nLearn about inspecting the runtime router configuration <a href=\"guide/router#inspect-config\" title=\"Inspect the router config\">below</a>.</p>\n\n</div>\n<h3 id=\"route-parameters\" translation-result=\"on\">路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-parameters\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"route-parameters\">Route Parameters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-parameters\"><i class=\"material-icons\">link</i></a></h3>\n\n<a id=\"route-def-with-parameter\"></a>\n<h4 id=\"route-definition-with-a-parameter\" translation-result=\"on\">带参数的路由定义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-definition-with-a-parameter\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"route-definition-with-a-parameter\">Route definition with a parameter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-definition-with-a-parameter\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">回到 <code>HeroesRoutingModule</code> 并再次检查这些路由定义。\n<code>HeroDetailComponent</code> 路由的路径中带有 <code>:id</code> 令牌。</p><p translation-origin=\"off\">Return to the <code>HeroesRoutingModule</code> and look at the route definitions again.\nThe route to <code>HeroDetailComponent</code> has an <code>:id</code> token in the path.</p>\n\n<code-example path=\"router/src/app/heroes/heroes-routing.module.1.ts\" header=\"src/app/heroes/heroes-routing.module.ts (excerpt)\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p translation-result=\"on\"><code>:id</code> 令牌会为路由参数在路径中创建一个“空位”。在这里，这种配置会让路由器把英雄的 <code>id</code> 插入到那个“空位”中。</p><p translation-origin=\"off\">The <code>:id</code> token creates a slot in the path for a Route Parameter.\nIn this case,  this configuration causes the router to insert the <code>id</code> of a hero into that slot.</p>\n\n<p translation-result=\"on\">如果要告诉路由器导航到详情组件，并让它显示“Magneta”，你会期望这个英雄的 <code>id</code> 像这样显示在浏览器的 URL 中：</p><p translation-origin=\"off\">If you tell the router to navigate to the detail component and display \"Magneta\", you expect a hero id to appear in the browser URL like this:</p>\n\n<code-example format=\"nocode\">\n  localhost:4200/hero/15\n\n</code-example>\n<p translation-result=\"on\">如果用户把此 URL 输入到浏览器的地址栏中，路由器就会识别出这种模式，同样进入“Magneta”的详情视图。</p><p translation-origin=\"off\">If a user enters that URL into the browser address bar, the router should recognize the pattern and go to the same \"Magneta\" detail view.</p>\n\n<div class=\"callout is-helpful\">\n<header translation-result=\"on\">路由参数：必须的还是可选的？</header><header translation-origin=\"off\">Route parameter: Required or optional?</header>\n\n<p translation-result=\"on\">在这个场景下，把路由参数的令牌 <code>:id</code> 嵌入到路由定义的 <code>path</code> 中是一个好主意，因为对于 <code>HeroDetailComponent</code> 来说 <code>id</code> 是<em>必须的</em>，\n而且路径中的值 <code>15</code> 已经足够把到“Magneta”的路由和到其它英雄的路由明确区分开。</p><p translation-origin=\"off\">Embedding the route parameter token, <code>:id</code>, in the route definition path is a good choice for this scenario because the <code>id</code> is <em>required</em> by the <code>HeroDetailComponent</code> and because the value <code>15</code> in the path clearly distinguishes the route to \"Magneta\" from a route for some other hero.</p>\n\n</div>\n<a id=\"route-parameters\"></a>\n<h4 id=\"setting-the-route-parameters-in-the-list-view\" translation-result=\"on\">在列表视图中设置路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-the-route-parameters-in-the-list-view\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"setting-the-route-parameters-in-the-list-view\">Setting the route parameters in the list view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-the-route-parameters-in-the-list-view\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">然后导航到 <code>HeroDetailComponent</code> 组件。在那里，你期望看到所选英雄的详情，这需要两部分信息：导航目标和该英雄的 <code>id</code>。</p><p translation-origin=\"off\">After navigating to the <code>HeroDetailComponent</code>, you expect to see the details of the selected hero.\nYou need two pieces of information: the routing path to the component and the hero's <code>id</code>.</p>\n\n<p translation-result=\"on\">因此，这个<em>链接参数数组</em>中有两个条目：路由的<em>路径</em>和一个用来指定所选英雄 <code>id</code> 的<em>路由参数</em>。</p><p translation-origin=\"off\">Accordingly, the <em>link parameters array</em> has two items: the routing <em>path</em> and a <em>route parameter</em> that specifies the\n<code>id</code> of the selected hero.</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" header=\"src/app/heroes/hero-list/hero-list.component.html (link-parameters-array)\" region=\"link-parameters-array\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\">\n\n</code-example>\n<p translation-result=\"on\">路由器从该数组中组合出了目标 URL：\n<code>localhost:3000/hero/15</code>。</p><p translation-origin=\"off\">The router composes the destination URL from the array like this: <code>localhost:4200/hero/15</code>.</p>\n\n<p translation-result=\"on\">路由器从 URL 中解析出路由参数（<code>id:15</code>），并通过 <strong>ActivatedRoute</strong> 服务来把它提供给 <code>HeroDetailComponent</code> 组件。</p><p translation-origin=\"off\">The router extracts the route parameter (<code>id:15</code>) from the URL and supplies it to\nthe <code>HeroDetailComponent</code> via the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> service.</p>\n\n<a id=\"activated-route-in-action\"></a>\n<h3 id=\"activated-route-in-action\" translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 实战<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#activated-route-in-action\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"activated-route-in-action\"><code>Activated <a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> in action<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#activated-route-in-action\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">从路由器（<code>router</code>）包中导入 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>、<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/Params\" class=\"code-anchor\">Params</a></code> 类。</p><p translation-origin=\"off\">Import the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>, <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, and <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> tokens from the router package.</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (activated route)\" region=\"imports\">\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\n</code-example>\n<p translation-result=\"on\">这里导入 <code>switchMap</code> 操作符是因为你稍后将会处理路由参数的可观察对象 <code>Observable</code>。</p><p translation-origin=\"off\">Import the <code>switchMap</code> operator because you need it later to process the <code>Observable</code> route parameters.</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (switchMap operator import)\" region=\"rxjs-operator-import\">\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<a id=\"hero-detail-ctor\"></a>\n<p translation-result=\"on\">把这些服务作为私有变量添加到构造函数中，以便 Angular 注入它们（让它们对组件可见）。</p><p translation-origin=\"off\">Add the services as private variables to the constructor so that Angular injects them (makes them visible to the component).</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (constructor)\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private service: HeroService\n) {}\n\n</code-example>\n<p translation-result=\"on\">在 <code>ngOnInit()</code> 方法中，使用 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务来检索路由的参数，从参数中提取出英雄的 <code>id</code>，并检索要显示的英雄。</p><p translation-origin=\"off\">In the <code>ngOnInit()</code> method, use the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> service to retrieve the parameters for the route, pull the hero <code>id</code> from the parameters, and retrieve the hero to display.</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (ngOnInit)\" region=\"ngOnInit\">\nngOnInit() {\n  this.hero$ = this.route.paramMap.pipe(\n    switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =>\n      this.service.getHero(params.get('id')))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">当这个 map 发生变化时，<code>paramMap</code> 会从更改后的参数中获取 <code>id</code> 参数。</p><p translation-origin=\"off\">When the map changes, <code>paramMap</code> gets the <code>id</code> parameter from the changed parameters.</p>\n\n<p translation-result=\"on\">然后，让 <code>HeroService</code> 去获取具有该 <code>id</code> 的英雄，并返回 <code>HeroService</code> 请求的结果。</p><p translation-origin=\"off\">Then you tell the <code>HeroService</code> to fetch the hero with that <code>id</code> and return the result of the <code>HeroService</code> request.</p>\n\n<p translation-result=\"on\"><code>switchMap</code> 操作符做了两件事。它把 <code>HeroService</code> 返回的 <code>Observable&#x3C;Hero></code> 拍平，并取消以前的未完成请求。当 <code>HeroService</code> 仍在检索旧的 <code>id</code> 时，如果用户使用新的 <code>id</code> 重新导航到这个路由，<code>switchMap</code> 会放弃那个旧请求，并返回新 <code>id</code> 的英雄。</p><p translation-origin=\"off\">The <code>switchMap</code> operator does two things. It flattens the <code>Observable&#x3C;Hero></code> that <code>HeroService</code> returns and cancels previous pending requests.\nIf the user re-navigates to this route with a new <code>id</code> while the <code>HeroService</code> is still retrieving the old <code>id</code>, <code>switchMap</code> discards that old request and returns the hero for the new <code>id</code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 处理这个可观察的订阅，而且该组件的 <code>hero</code> 属性也会用检索到的英雄（重新）进行设置。</p><p translation-origin=\"off\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> handles the observable subscription and the component's <code>hero</code> property will be (re)set with the retrieved hero.</p>\n\n<h4 id=\"parammap-api\"><em>ParamMap</em> API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#parammap-api\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\"><code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API 的灵感来自于 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams 接口</a>。它提供了处理路由参数（ <code>paramMap</code> ）和查询参数（ <code>queryParamMap</code> ）访问的方法。</p><p translation-origin=\"off\">The <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API is inspired by the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams interface</a>.\nIt provides methods to handle parameter access for both route parameters (<code>paramMap</code>) and query parameters (<code>queryParamMap</code>).</p>\n\n<table>\n  <tbody><tr>\n    <th>\n<p translation-result=\"on\">      成员</p><p translation-origin=\"off\">      Member</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      说明</p><p translation-origin=\"off\">      Description</p>\n\n    </th>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>has(name)</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">    如果参数名位于参数列表中，就返回 <code>true</code>。</p><p translation-origin=\"off\">    Returns <code>true</code> if the parameter name is in the map of parameters.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>get(name)</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">    如果这个 map 中有参数名对应的参数值（字符串），就返回它，否则返回 <code>null</code>。如果参数值实际上是一个数组，就返回它的<em>第一个</em>元素。</p><p translation-origin=\"off\">    Returns the parameter name value (a <code>string</code>) if present, or <code>null</code> if the parameter name is not in the map. Returns the <em>first</em> element if the parameter value is actually an array of values.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>getAll(name)</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">    如果这个 map 中有参数名对应的值，就返回一个字符串数组，否则返回空数组。当一个参数名可能对应多个值的时候，请使用 <code>getAll</code>。</p><p translation-origin=\"off\">    Returns a <code>string array</code> of the parameter name value if found, or an empty <code>array</code> if the parameter name value is not in the map. Use <code>getAll</code> when a single parameter could have multiple values.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>keys</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">    返回这个 map 中的所有参数名组成的字符串数组。</p><p translation-origin=\"off\">    Returns a <code>string array</code> of all parameter names in the map.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"reuse\"></a>\n<h4 id=\"observable-parammap-and-component-reuse\" translation-result=\"on\"><i>参数</i>的可观察对象（Observable）与组件复用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#observable-parammap-and-component-reuse\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"observable-parammap-and-component-reuse\">Observable <i>paramMap</i> and component reuse<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#observable-parammap-and-component-reuse\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">在这个例子中，你接收了路由参数的 <code>Observable</code> 对象。\n这种写法暗示着这些路由参数在该组件的生存期内可能会变化。</p><p translation-origin=\"off\">In this example, you retrieve the route parameter map from an <code>Observable</code>.\nThat implies that the route parameter map can change during the lifetime of this component.</p>\n\n<p translation-result=\"on\">默认情况下，如果它没有访问过其它组件就导航到了同一个组件实例，那么路由器倾向于复用组件实例。如果复用，这些参数可以变化。</p><p translation-origin=\"off\">By default, the router re-uses a component instance when it re-navigates to the same component type\nwithout visiting a different component first. The route parameters could change each time.</p>\n\n<p translation-result=\"on\">假设父组件的导航栏有“前进”和“后退”按钮，用来轮流显示英雄列表中中英雄的详情。\n每次点击都会强制导航到带前一个或后一个 <code>id</code> 的 <code>HeroDetailComponent</code> 组件。</p><p translation-origin=\"off\">Suppose a parent component navigation bar had \"forward\" and \"back\" buttons\nthat scrolled through the list of heroes.\nEach click navigated imperatively to the <code>HeroDetailComponent</code> with the next or previous <code>id</code>.</p>\n\n<p translation-result=\"on\">你肯定不希望路由器先从 DOM 中移除当前的 <code>HeroDetailComponent</code> 实例，只是为了用下一个 <code>id</code> 重新创建它，因为它将重新渲染视图。为了更好的用户体验，路由器会复用同一个组件实例，而只是更新参数。</p><p translation-origin=\"off\">You wouldn't want the router to remove the current <code>HeroDetailComponent</code> instance from the DOM only to re-create it for the next <code>id</code> as this would re-render the view.\nFor better UX, the router re-uses the same component instance and updates the parameter.</p>\n\n<p translation-result=\"on\">由于 <code>ngOnInit()</code> 在每个组件实例化时只会被调用一次，所以你可以使用 <code>paramMap</code> 可观察对象来检测路由参数<em>在同一个实例中</em>何时发生了变化。</p><p translation-origin=\"off\">Since <code>ngOnInit()</code> is only called once per component instantiation, you can detect when the route parameters change from <em>within the same instance</em> using the observable <code>paramMap</code> property.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">当在组件中订阅一个可观察对象时，你通常总是要在组件销毁时取消这个订阅。</p><p translation-origin=\"off\">When subscribing to an observable in a component, you almost always unsubscribe when the component is destroyed.</p>\n\n<p translation-result=\"on\">不过，<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 中的可观察对象是一个例外，因为 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 及其可观察对象与 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 本身是隔离的。\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 会在不再需要时销毁这个路由组件，而注入进去的 <code>ActivateRoute</code> 也随之销毁了。</p><p translation-origin=\"off\">However, <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> observables are among the exceptions because <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> and its observables are insulated from the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> itself.\nThe <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> destroys a routed component when it is no longer needed along with the injected <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</p>\n\n</div>\n<a id=\"snapshot\"></a>\n<h4 id=\"snapshot-the-no-observable-alternative\" translation-result=\"on\"><code>snapshot</code>：当不需要 Observable 时的替代品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#snapshot-the-no-observable-alternative\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"snapshot-the-no-observable-alternative\"><code>snapshot</code>: the no-observable alternative<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#snapshot-the-no-observable-alternative\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">本应用不需要复用 <code>HeroDetailComponent</code>。\n用户总是会先返回英雄列表，再选择另一位英雄。\n所以，不存在从一个英雄详情导航到另一个而不用经过英雄列表的情况。\n这意味着路由器每次都会创建一个全新的 <code>HeroDetailComponent</code> 实例。</p><p translation-origin=\"off\">This application won't re-use the <code>HeroDetailComponent</code>.\nThe user always returns to the hero list to select another hero to view.\nThere's no way to navigate from one hero detail to another hero detail without visiting the list component in between.\nTherefore, the router creates a new <code>HeroDetailComponent</code> instance every time.</p>\n\n<p translation-result=\"on\">假如你很确定这个 <code>HeroDetailComponent</code> 实例永远不会被重用，你可以使用 <code>snapshot</code>。</p><p translation-origin=\"off\">When you know for certain that a <code>HeroDetailComponent</code> instance will never be re-used, you can use <code>snapshot</code>.</p>\n\n<p translation-result=\"on\"><code>route.snapshot</code> 提供了路由参数的初始值。\n你可以通过它来直接访问参数，而不用订阅或者添加 Observable 的操作符，代码如下：</p><p translation-origin=\"off\"><code>route.snapshot</code> provides the initial value of the route parameter map.\nYou can access the parameters directly without subscribing or adding observable operators as in the following:</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.2.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (ngOnInit snapshot)\" region=\"snapshot\">\nngOnInit() {\n  let id = this.route.snapshot.paramMap.get('id');\n\n  this.hero$ = this.service.getHero(id);\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">用这种技术，<code>snapshot</code> 只会得到这些参数的初始值。如果路由器可能复用该组件，那么就该用 <code>paramMap</code> 可观察对象的方式。本教程的示例应用中就用了 <code>paramMap</code> 可观察对象。</p><p translation-origin=\"off\"><code>snapshot</code> only gets the initial value of the parameter map with this technique.\nUse the observable <code>paramMap</code> approach if there's a possibility that the router could re-use the component.\nThis tutorial sample app uses with the observable <code>paramMap</code>.</p>\n\n</div>\n<a id=\"nav-to-list\"></a>\n<h3 id=\"navigating-back-to-the-list-component\" translation-result=\"on\">导航回列表组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#navigating-back-to-the-list-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"navigating-back-to-the-list-component\">Navigating back to the list component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#navigating-back-to-the-list-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 的 “Back” 按钮使用了 <code>gotoHeroes()</code> 方法，该方法会强制导航回 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> \"Back\" button uses the <code>gotoHeroes()</code> method that navigates imperatively back to the <code>HeroListComponent</code>.</p>\n\n<p translation-result=\"on\">路由的 <code>navigate()</code> 方法同样接受一个单条目的<em>链接参数数组</em>，你也可以把它绑定到 <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> 指令上。\n它保存着到 <code>HeroListComponent</code> 组件的路径：</p><p translation-origin=\"off\">The router <code>navigate()</code> method takes the same one-item <em>link parameters array</em> that you can bind to a <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> directive.\nIt holds the path to the <code>HeroListComponent</code>:</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (excerpt)\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<a id=\"optional-route-parameters\"></a>\n<h4 id=\"route-parameters-required-or-optional\" translation-result=\"on\">路由参数：必须还是可选？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-parameters-required-or-optional\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"route-parameters-required-or-optional\">Route Parameters: Required or optional?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-parameters-required-or-optional\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果想导航到 <code>HeroDetailComponent</code> 以对 id 为 <code>15</code> 的英雄进行查看并编辑，就要在路由的 URL 中使用<a href=\"guide/router#route-parameters\">路由参数</a>来指定必要参数值。</p><p translation-origin=\"off\">Use <a href=\"guide/router#route-parameters\">route parameters</a> to specify a required parameter value within the route URL\nas you do when navigating to the <code>HeroDetailComponent</code> in order to view the hero with <code>id</code> 15:</p>\n\n<code-example format=\"nocode\">\n  localhost:4200/hero/15\n\n</code-example>\n<p translation-result=\"on\">你也能在路由请求中添加<em>可选</em>信息。\n比如，当从 <code>hero-detail.component.ts</code> 返回到列表时，如果能自动选中刚刚查看过的英雄就好了。</p><p translation-origin=\"off\">You can also add optional information to a route request.\nFor example, when returning to the <code>hero-detail.component.ts</code> list from the hero detail view, it would be nice if the viewed hero were preselected in the list.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/selected-hero.png\" alt=\"Selected hero\" width=\"336\" height=\"110\">\n</div>\n<p translation-result=\"on\">当从 <code>HeroDetailComponent</code> 返回时，你可以会通过把正在查看的英雄的 <code>id</code> 作为可选参数包含在 URL 中来实现这个特性。</p><p translation-origin=\"off\">You implement this feature by including the viewed hero's <code>id</code> in the URL as an optional parameter when returning from the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">可选信息还可以包含其它形式，例如：</p><p translation-origin=\"off\">Optional information can also include other forms such as:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">结构松散的搜索条件。比如 <code>name='wind_'</code>。</p><p translation-origin=\"off\">Loosely structured search criteria; for example, <code>name='wind*'</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  多个值。比如 <code>after='12/31/2015' &#x26; before='1/1/2017'</code> - 没有特定的顺序 - <code>before='1/1/2017' &#x26; after='12/31/2015'</code> - 具有各种格式 - <code>during='currentYear'</code>。</p><p translation-origin=\"off\">Multiple values;  for example, <code>after='12/31/2015' &#x26; before='1/1/2017'</code>—in no\nparticular order—<code>before='1/1/2017' &#x26; after='12/31/2015'</code>— in a\nvariety of formats—<code>during='currentYear'</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">由于这些参数不适合用作 URL 路径，因此可以使用可选参数在导航过程中传递任意复杂的信息。可选参数不参与模式匹配，因此在表达上提供了巨大的灵活性。</p><p translation-origin=\"off\">As these kinds of parameters don't fit easily in a URL path, you can use optional parameters for conveying arbitrarily complex information during navigation.\nOptional parameters aren't involved in pattern matching and afford flexibility of expression.</p>\n\n<p translation-result=\"on\">和必要参数一样，路由器也支持通过可选参数导航。\n在你定义完必要参数之后，再通过一个<em>独立的对象</em>来定义可选参数。</p><p translation-origin=\"off\">The router supports navigation with optional parameters as well as required route parameters.\nDefine optional parameters in a separate object <em>after</em> you define the required route parameters.</p>\n\n<p translation-result=\"on\">通常，对于必传的值（比如用于区分两个路由路径的）使用<em>必备参数</em>；当这个值是可选的、复杂的或多值的时，使用可选参数。</p><p translation-origin=\"off\">In general, use a required route parameter when the value is mandatory (for example, if necessary to distinguish one route path from another); and an optional parameter when the value is optional, complex, and/or multivariate.</p>\n\n<a id=\"optionally-selecting\"></a>\n<a id=\"optional-selecting\"></a>\n<h4 id=\"heroes-list-optionally-selecting-a-hero\" translation-result=\"on\">英雄列表：选定一个英雄（也可不选）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#heroes-list-optionally-selecting-a-hero\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"heroes-list-optionally-selecting-a-hero\">Heroes list: optionally selecting a hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#heroes-list-optionally-selecting-a-hero\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">当导航到 <code>HeroDetailComponent</code> 时，你可以在<em>路由参数</em>中指定一个所要编辑的英雄 <code>id</code>，只要把它作为<a href=\"guide/router#link-parameters-array\">链接参数数组</a>中的第二个条目就可以了。</p><p translation-origin=\"off\">When navigating to the <code>HeroDetailComponent</code> you specified the required <code>id</code> of the hero-to-edit in the\nroute parameter and made it the second item of the <a href=\"guide/router#link-parameters-array\"><em>link parameters array</em></a>.</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" header=\"src/app/heroes/hero-list/hero-list.component.html (link-parameters-array)\" region=\"link-parameters-array\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\">\n\n</code-example>\n<p translation-result=\"on\">路由器在导航 URL 中内嵌了 <code>id</code> 的值，这是因为你把它用一个 <code>:id</code> 占位符当做路由参数定义在了路由的 <code>path</code> 中：</p><p translation-origin=\"off\">The router embedded the <code>id</code> value in the navigation URL because you had defined it as a route parameter with an <code>:id</code> placeholder token in the route <code>path</code>:</p>\n\n<code-example path=\"router/src/app/heroes/heroes-routing.module.1.ts\" header=\"src/app/heroes/heroes-routing.module.ts (hero-detail-route)\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p translation-result=\"on\">当用户点击后退按钮时，<code>HeroDetailComponent</code> 构造了另一个<em>链接参数数组</em>，可以用它导航回 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">When the user clicks the back button, the <code>HeroDetailComponent</code> constructs another <em>link parameters array</em>\nwhich it uses to navigate back to the <code>HeroListComponent</code>.</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (gotoHeroes)\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<p translation-result=\"on\">该数组缺少一个路由参数，这是因为以前你不需要往 <code>HeroListComponent</code> 发送信息。</p><p translation-origin=\"off\">This array lacks a route parameter because previously you didn't need to send information to the <code>HeroListComponent</code>.</p>\n\n<p translation-result=\"on\">现在，使用导航请求发送当前英雄的 <code>id</code>，以便 <code>HeroListComponent</code> 在其列表中突出显示该英雄。</p><p translation-origin=\"off\">Now, send the <code>id</code> of the current hero with the navigation request so that the\n<code>HeroListComponent</code> can highlight that hero in its list.</p>\n\n<p translation-result=\"on\">传送一个包含可选 <code>id</code> 参数的对象。\n为了演示，这里还在对象中定义了一个没用的额外参数（<code>foo</code>），<code>HeroListComponent</code> 应该忽略它。\n下面是修改过的导航语句：</p><p translation-origin=\"off\">Send the <code>id</code> with an object that contains an optional <code>id</code> parameter.\nFor demonstration purposes, there's an extra junk parameter (<code>foo</code>) in the object that the <code>HeroListComponent</code> should ignore.\nHere's the revised navigation statement:</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (go to heroes)\" region=\"gotoHeroes\">\ngotoHeroes(hero: Hero) {\n  let heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include a junk 'foo' property for fun.\n  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n}\n\n</code-example>\n<p translation-result=\"on\">该应用仍然能工作。点击“back”按钮返回英雄列表视图。</p><p translation-origin=\"off\">The application still works. Clicking \"back\" returns to the hero list view.</p>\n\n<p translation-result=\"on\">注意浏览器的地址栏。</p><p translation-origin=\"off\">Look at the browser address bar.</p>\n\n<p translation-result=\"on\">它应该是这样的，不过也取决于你在哪里运行它：</p><p translation-origin=\"off\">It should look something like this, depending on where you run it:</p>\n\n<code-example language=\"bash\">\n  localhost:4200/heroes;id=15;foo=foo\n\n</code-example>\n<p translation-result=\"on\"><code>id</code> 的值像这样出现在 URL 中（<code>;id=15;foo=foo</code>），但不在 URL 的路径部分。\n“Heroes”路由的路径部分并没有定义 <code>:id</code>。</p><p translation-origin=\"off\">The <code>id</code> value appears in the URL as (<code>;id=15;foo=foo</code>), not in the URL path.\nThe path for the \"Heroes\" route doesn't have an <code>:id</code> token.</p>\n\n<p translation-result=\"on\">可选的路由参数没有使用“？”和“&#x26;”符号分隔，因为它们将用在 URL 查询字符串中。\n它们是用“;”分隔的。\n这是<em>矩阵 URL</em>标记法。</p><p translation-origin=\"off\">The optional route parameters are not separated by \"?\" and \"&#x26;\" as they would be in the URL query string.\nThey are separated by semicolons \";\".\nThis is matrix URL notation.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">Matrix URL 写法首次提出是在<a href=\"http://www.w3.org/DesignIssues/MatrixURIs.html\">1996 提案</a>中，提出者是 Web 的奠基人：Tim Berners-Lee。</p><p translation-origin=\"off\">Matrix URL notation is an idea first introduced in a <a href=\"http://www.w3.org/DesignIssues/MatrixURIs.html\">1996 proposal</a> by the founder of the web, Tim Berners-Lee.</p>\n\n<p translation-result=\"on\">虽然 Matrix 写法未曾进入过 HTML 标准，但它是合法的。而且在浏览器的路由系统中，它作为从父路由和子路由中单独隔离出参数的方式而广受欢迎。Angular 的路由器正是这样一个路由系统，并支持跨浏览器的 Matrix 写法。</p><p translation-origin=\"off\">Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes.\nAs such, the Router provides support for the matrix notation across browsers.</p>\n\n</div>\n<a id=\"route-parameters-activated-route\"></a>\n<h3 id=\"route-parameters-in-the-activatedroute-service\" translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务中的路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-parameters-in-the-activatedroute-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"route-parameters-in-the-activatedroute-service\">Route parameters in the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-parameters-in-the-activatedroute-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">开发到现在，英雄列表还没有变化。没有突出显示的英雄行。</p><p translation-origin=\"off\">In its current state of development, the list of heroes is unchanged.\nNo hero row is highlighted.</p>\n\n<p translation-result=\"on\"><code>HeroListComponent</code> 需要添加使用这些参数的代码。</p><p translation-origin=\"off\">The <code>HeroListComponent</code> needs code that expects parameters.</p>\n\n<p translation-result=\"on\">以前，当从 <code>HeroListComponent</code> 导航到 <code>HeroDetailComponent</code> 时，你通过 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务订阅了路由参数这个 <code>Observable</code>，并让它能用在 <code>HeroDetailComponent</code> 中。\n你把该服务注入到了 <code>HeroDetailComponent</code> 的构造函数中。</p><p translation-origin=\"off\">Previously, when navigating from the <code>HeroListComponent</code> to the <code>HeroDetailComponent</code>,\nyou subscribed to the route parameter map <code>Observable</code> and made it available to the <code>HeroDetailComponent</code>\nin the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> service.\nYou injected that service in the constructor of the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">这次，你要进行反向导航，从 <code>HeroDetailComponent</code> 到 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">This time you'll be navigating in the opposite direction, from the <code>HeroDetailComponent</code> to the <code>HeroListComponent</code>.</p>\n\n<p translation-result=\"on\">首先，扩展该路由的导入语句，以包含进 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务的类；</p><p translation-origin=\"off\">First, extend the router import statement to include the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> service symbol:</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" header=\"src/app/heroes/hero-list/hero-list.component.ts (import)\" region=\"import-router\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n</code-example>\n<p translation-result=\"on\">导入 <code>switchMap</code> 操作符，在路由参数的 <code>Observable</code> 对象上执行操作。</p><p translation-origin=\"off\">Import the <code>switchMap</code> operator to perform an operation on the <code>Observable</code> of route parameter map.</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" header=\"src/app/heroes/hero-list/hero-list.component.ts (rxjs imports)\" region=\"rxjs-imports\">\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p translation-result=\"on\">在 <code>HeroListComponent</code> 构造函数中注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p><p translation-origin=\"off\">Inject the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> in the <code>HeroListComponent</code> constructor.</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" header=\"src/app/heroes/hero-list/hero-list.component.ts (constructor and ngOnInit)\" region=\"ctor\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  selectedId: number;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap.pipe(\n      switchMap(params => {\n        // (+) before `params.get()` turns the string into a number\n        this.selectedId = +params.get('id');\n        return this.service.getHeroes();\n      })\n    );\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 属性是一个路由参数的 <code>Observable</code>。当用户导航到这个组件时，paramMap 会发射一个新值，其中包含 <code>id</code>。\n在 <code>ngOnInit()</code> 中，你订阅了这些值，设置到 <code>selectedId</code>，并获取英雄数据。</p><p translation-origin=\"off\">The <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> property is an <code>Observable</code> map of route parameters.\nThe <code>paramMap</code> emits a new map of values that includes <code>id</code> when the user navigates to the component.\nIn <code>ngOnInit()</code> you subscribe to those values, set the <code>selectedId</code>, and get the heroes.</p>\n\n<p translation-result=\"on\">用 <a href=\"guide/template-syntax#class-binding\">CSS 类绑定</a>更新模板，把它绑定到 <code>isSelected</code> 方法上。\n如果该方法返回 <code>true</code>，此绑定就会添加 CSS 类 <code>selected</code>，否则就移除它。\n在 <code>&#x3C;li></code> 标记中找到它，就像这样：</p><p translation-origin=\"off\">Update the template with a <a href=\"guide/template-syntax#class-binding\">class binding</a>.\nThe binding adds the <code>selected</code> CSS class when the comparison returns <code>true</code> and removes it when <code>false</code>.\nLook for it within the repeated <code>&#x3C;li></code> tag as shown here:</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.html\" header=\"src/app/heroes/hero-list/hero-list.component.html\">\n&#x3C;h2>HEROES&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\"\n    [class.selected]=\"hero.id === selectedId\">\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\">\n      &#x3C;span class=\"badge\">{{ hero.id }}&#x3C;/span>{{ hero.name }}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\">Go to sidekicks&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">当选中列表条目时，要添加一些样式。</p><p translation-origin=\"off\">Add some styles to apply when the list item is selected.</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.css\" region=\"selected\" header=\"src/app/heroes/hero-list/hero-list.component.css\">\n.heroes li.selected {\n  background-color: #CFD8DC;\n  color: white;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC;\n}\n\n</code-example>\n<p translation-result=\"on\">当用户从英雄列表导航到英雄“Magneta”并返回时，“Magneta”看起来是选中的：</p><p translation-origin=\"off\">When the user navigates from the heroes list to the \"Magneta\" hero and back, \"Magneta\" appears selected:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/selected-hero.png\" alt=\"Selected List\" width=\"336\" height=\"110\">\n</div>\n<p translation-result=\"on\">这个可选的 <code>foo</code> 路由参数人畜无害，路由器会继续忽略它。</p><p translation-origin=\"off\">The optional <code>foo</code> route parameter is harmless and the router continues to ignore it.</p>\n\n<a id=\"route-animation\"></a>\n<h3 id=\"adding-routable-animations\" translation-result=\"on\">添加路由动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#adding-routable-animations\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-routable-animations\">Adding routable animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#adding-routable-animations\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在这一节，你将为<em>英雄详情</em>组件添加一些<a href=\"guide/animations\">动画</a>。</p><p translation-origin=\"off\">This section shows you how to add some <a href=\"guide/animations\">animations</a> to the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">首先导入 <code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>，并添加到 <code>imports</code> 数组中：</p><p translation-origin=\"off\">First, import the <code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code> and add it to the <code>imports</code> array:</p>\n\n<code-example path=\"router/src/app/app.module.ts\" header=\"src/app/app.module.ts (animations-module)\" region=\"animations-module\">\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n  ],\n})\n\n</code-example>\n<p translation-result=\"on\">接下来，为指向 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 的路由定义添加一个 <code>data</code> 对象。\n转场是基于 <code>states</code> 的，你将使用来自路由的 <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 数据为转场提供一个有名字的动画 <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>。</p><p translation-origin=\"off\">Next, add a <code>data</code> object to the routes for <code>HeroListComponent</code> and <code>HeroDetailComponent</code>.\nTransitions are based on <code>states</code> and you use the <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> data from the route to provide a named animation <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> for the transitions.</p>\n\n<code-example path=\"router/src/app/heroes/heroes-routing.module.2.ts\" header=\"src/app/heroes/heroes-routing.module.ts (animation data)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list/hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'hero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<p translation-result=\"on\">在根目录 <code>src/app/</code> 下创建一个 <code>animations.ts</code>。内容如下：</p><p translation-origin=\"off\">Create an <code>animations.ts</code> file in the root <code>src/app/</code> folder. The contents look like this:</p>\n\n<code-example path=\"router/src/app/animations.ts\" header=\"src/app/animations.ts (excerpt)\">\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\n\n// Routable animations\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('heroes &#x3C;=> hero', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n\n</code-example>\n<p translation-result=\"on\">该文件做了如下工作：</p><p translation-origin=\"off\">This file does the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 导入动画符号以构建动画触发器、控制状态并管理状态之间的过渡。</p><p translation-origin=\"off\">Imports the animation symbols that build the animation triggers, control state, and manage transitions between states.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 导出了一个名叫 <code>slideInAnimation</code> 的常量，并把它设置为一个名叫 <code>routeAnimation</code> 的动画触发器。</p><p translation-origin=\"off\">Exports a constant named <code>slideInAnimation</code> set to an animation trigger named <code>routeAnimation</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">定义一个转场动画，当在 <code>heroes</code> 和 <code>hero</code> 路由之间来回切换时，如果进入（<code>:enter</code>）应用视图则让组件从屏幕的左侧滑入，如果离开（<code>:leave</code>）应用视图则让组件从右侧划出。</p><p translation-origin=\"off\">Defines one transition when switching back and forth from the <code>heroes</code> and <code>hero</code> routes to ease the component in from the left of the screen as it enters the application view (<code>:enter</code>), the other to animate the component to the right as it leaves the application view (<code>:leave</code>).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">回到 <code>AppComponent</code>，从 <code>@angular/router</code> 包导入 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，并从 <code>'./animations.ts</code> 导入 <code>slideInAnimation</code>。</p><p translation-origin=\"off\">Back in the <code>AppComponent</code>, import the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> token from the <code>@angular/router</code> package and the <code>slideInAnimation</code> from <code>'./animations.ts</code>.</p>\n\n<p translation-result=\"on\">为包含 <code>slideInAnimation</code> 的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据添加一个 <code>animations</code> 数组。</p><p translation-origin=\"off\">Add an <code>animations</code> array to the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata that contains the <code>slideInAnimation</code>.</p>\n\n<code-example path=\"router/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (animations)\" region=\"animation-imports\">\nimport { <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a> } from '@angular/router';\nimport { slideInAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [ slideInAnimation ]\n})\n\n</code-example>\n<p translation-result=\"on\">要想使用路由动画，就要把 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 包装到一个元素中。再把 <code>@routeAnimation</code> 触发器绑定到该元素上。</p><p translation-origin=\"off\">In order to use the routable animations, wrap the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> inside an element, use the <code>@routeAnimation</code> trigger, and bind it to the element.</p>\n\n<p translation-result=\"on\">为了把 <code>@routeAnimation</code> 转场转场到指定的状态，你需要从 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的 <code>data</code> 中提供它。\n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 导出成了一个模板变量 <code>outlet</code>，这样你就可以绑定一个到路由出口的引用了。这个例子中使用了一个 <code>routerOutlet</code> 变量。</p><p translation-origin=\"off\">For the <code>@routeAnimation</code> transitions to key off states, provide it with the <code>data</code> from the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.\nThe <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> is exposed as an <code>outlet</code> template variable, so you bind a reference to the router outlet.\nThis example uses a variable of <code>routerOutlet</code>.</p>\n\n<code-example path=\"router/src/app/app.component.2.html\" header=\"src/app/app.component.html (router outlet)\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;div [@routeAnimation]=\"getAnimationData(routerOutlet)\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #routerOutlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\"><code>@routeAnimation</code> 属性使用所提供的 <code>routerOutlet</code> 引用来绑定到 <code>getAnimationData()</code>，因此下一步就要在 <code>AppComponent</code> 中定义那个函数。<code>getAnimationData</code> 函数会根据 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 所提供的 <code>data</code> 对象返回动画的属性。<code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 属性会根据你在 <code>animations.ts</code> 中定义 <code>slideInAnimation()</code> 时使用的 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 名称进行匹配。</p><p translation-origin=\"off\">The <code>@routeAnimation</code> property is bound to the <code>getAnimationData()</code> with the provided <code>routerOutlet</code> reference, so the next step is to define that function in the <code>AppComponent</code>.\nThe <code>getAnimationData()</code> function returns the animation property from the <code>data</code> provided through the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>. The <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> property matches the <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> names you used in the <code>slideInAnimation</code> defined in <code>animations.ts</code>.</p>\n\n<code-example path=\"router/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (router outlet)\" region=\"function-binding\">\nexport class AppComponent {\n  getAnimationData(outlet: <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>) {\n    return outlet &#x26;&#x26; outlet.activatedRouteData &#x26;&#x26; outlet.activatedRouteData['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">如果在两个路由之间切换，导航进来时，<code>HeroDetailComponent</code> 和 <code>HeroListComponent</code> 会从左侧滑入；导航离开时将会从右侧划出。</p><p translation-origin=\"off\">When switching between the two routes, the <code>HeroDetailComponent</code> and <code>HeroListComponent</code> now ease in from the left when routed to and will slide to the right when navigating away.</p>\n\n<a id=\"milestone-3-wrap-up\"></a>\n<h3 id=\"milestone-3-wrap-up\" translation-result=\"on\">里程碑 3 的小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-3-wrap-up\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"milestone-3-wrap-up\">Milestone 3 wrap up<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-3-wrap-up\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本节包括以下内容：</p><p translation-origin=\"off\">This section has covered the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 把应用组织成特性区</p><p translation-origin=\"off\">Organizing the app into feature areas.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 命令式的从一个组件导航到另一个</p><p translation-origin=\"off\">Navigating imperatively from one component to another.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 通过路由参数传递信息，并在组件中订阅它们</p><p translation-origin=\"off\">Passing information along in route parameters and subscribe to them in the component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 把这个特性分区模块导入根模块 <code>AppModule</code></p><p translation-origin=\"off\">Importing the feature area NgModule into the <code>AppModule</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 把动画应用到路由组件上</p><p translation-origin=\"off\">Applying routable animations based on the page.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">做完这些修改之后，目录结构如下：</p><p translation-origin=\"off\">After these changes, the folder structure is as follows:</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    angular-router-sample</p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n    <div class=\"file\">\n<p>      app</p>\n    </div>\n      <div class=\"children\">\n      <div class=\"file\">\n<p>        crisis-list</p>\n      </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              crisis-list.component.css\n            </div>\n            <div class=\"file\">\n              crisis-list.component.html\n            </div>\n            <div class=\"file\">\n              crisis-list.component.ts\n            </div>\n          </div>\n        <div class=\"file\">\n<p>          heroes</p>\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>hero-detail</p>\n          </div>\n            <div class=\"children\">\n              <div class=\"file\">\n                hero-detail.component.css\n              </div>\n              <div class=\"file\">\n                hero-detail.component.html\n              </div>\n              <div class=\"file\">\n                hero-detail.component.ts\n              </div>\n          </div>\n            </div>\n          <div class=\"file\">\n<p>hero-list</p>\n          </div>\n            <div class=\"children\">\n              <div class=\"file\">\n                hero-list.component.css\n              </div>\n              <div class=\"file\">\n                hero-list.component.html\n              </div>\n              <div class=\"file\">\n                hero-list.component.ts\n              </div>\n            </div>\n          <div class=\"file\">\n            hero.service.ts\n          </div>\n          <div class=\"file\">\n            hero.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n          <div class=\"file\">\n<p>            heroes.module.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            mock-heroes.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n          page-not-found\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            page-not-found.component.css</p>\n          </div>\n          <div class=\"file\">\n<p>            page-not-found.component.html</p>\n          </div>\n          <div class=\"file\">\n<p>            page-not-found.component.ts</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"file\">\n        animations.ts\n      </div>\n      <div class=\"file\">\n        app.component.css\n      </div>\n      <div class=\"file\">\n        app.component.html\n      </div>\n        <div class=\"file\">\n<p>          app.component.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          app.module.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          app-routing.module.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          main.ts</p>\n</div>\n      <div class=\"file\">\n<p>        message.service.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        index.html</p>\n      </div>\n      <div class=\"file\">\n<p>        styles.css</p>\n      </div>\n      <div class=\"file\">\n<p>        tsconfig.json</p>\n      </div>\n    </div>\n    <div class=\"file\">\n<p>      node_modules ...</p>\n    </div>\n    <div class=\"file\">\n<p>      package.json</p>\n    </div>\n  </div>\n\n<p translation-result=\"on\">这里是当前版本的范例程序相关文件。</p><p translation-origin=\"off\">Here are the relevant files for this version of the sample application.</p>\n\n<code-tabs>\n\n  <code-pane header=\"animations.ts\" path=\"router/src/app/animations.ts\">\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\n\n// Routable animations\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('heroes &#x3C;=> hero', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n\n</code-pane>\n\n  <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.2.html\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;div [@routeAnimation]=\"getAnimationData(routerOutlet)\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #routerOutlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n\n</code-pane>\n\n  <code-pane header=\"app.component.ts\" path=\"router/src/app/app.component.2.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a> } from '@angular/router';\nimport { slideInAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [ slideInAnimation ]\n})\nexport class AppComponent {\n  getAnimationData(outlet: <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>) {\n    return outlet &#x26;&#x26; outlet.activatedRouteData &#x26;&#x26; outlet.activatedRouteData['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.3.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent }     from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule }     from './heroes/heroes.module';\n\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n\n  <code-pane header=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.2.ts\" region=\"milestone3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { CrisisListComponent }   from './crisis-list/crisis-list.component';\n/* . . . */\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n/* . . . */\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n\n  <code-pane header=\"hero-list.component.css\" path=\"router/src/app/heroes/hero-list/hero-list.component.css\">\n/* HeroListComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes a {\n  color: #888;\n  text-decoration: none;\n  position: relative;\n  display: block;\n}\n\n.heroes a:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\nbutton {\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n  font-family: Arial;\n}\n\nbutton:hover {\n  background-color: #cfd8dc;\n}\n\nbutton.delete {\n  position: relative;\n  left: 194px;\n  top: -32px;\n  background-color: gray !important;\n  color: white;\n}\n\n.heroes li.selected {\n  background-color: #CFD8DC;\n  color: white;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC;\n}\n\n</code-pane>\n\n  <code-pane header=\"hero-list.component.html\" path=\"router/src/app/heroes/hero-list/hero-list.component.html\">\n&#x3C;h2>HEROES&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\"\n    [class.selected]=\"hero.id === selectedId\">\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\">\n      &#x3C;span class=\"badge\">{{ hero.id }}&#x3C;/span>{{ hero.name }}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\">Go to sidekicks&#x3C;/button>\n\n</code-pane>\n\n  <code-pane header=\"hero-list.component.ts\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\">\n// TODO: Feature Componetized like CrisisCenter\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { HeroService }  from '../hero.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  selectedId: number;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap.pipe(\n      switchMap(params => {\n        // (+) before `params.get()` turns the string into a number\n        this.selectedId = +params.get('id');\n        return this.service.getHeroes();\n      })\n    );\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"hero-detail.component.html\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.html\">\n&#x3C;h2>HEROES&#x3C;/h2>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> as hero\">\n  &#x3C;h3>\"{{ hero.name }}\"&#x3C;/h3>\n  &#x3C;div>\n    &#x3C;label>Id: &#x3C;/label>{{ hero.id }}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>Name: &#x3C;/label>\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n  &#x3C;/div>\n  &#x3C;p>\n    &#x3C;button (click)=\"gotoHeroes(hero)\">Back&#x3C;/button>\n  &#x3C;/p>\n&#x3C;/div>\n\n</code-pane>\n\n  <code-pane header=\"hero-detail.component.ts\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\">\nimport { switchMap } from 'rxjs/operators';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { HeroService }  from '../hero.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero$: Observable&#x3C;Hero>;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    private service: HeroService\n  ) {}\n\n  ngOnInit() {\n    this.hero$ = this.route.paramMap.pipe(\n      switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =>\n        this.service.getHero(params.get('id')))\n    );\n  }\n\n  gotoHeroes(hero: Hero) {\n    let heroId = hero ? hero.id : null;\n    // Pass along the hero id if available\n    // so that the HeroList component can select that hero.\n    // Include a junk 'foo' property for fun.\n    this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n  }\n}\n\n/*\n  this.router.navigate(['/superheroes', { id: heroId, foo: 'foo' }]);\n*/\n\n\n</code-pane>\n\n  <code-pane header=\"hero.service.ts\" path=\"router/src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&#x3C;Hero[]> {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number | string) {\n    return this.getHeroes().pipe(\n      // (+) before `id` turns the string into a number\n      map((heroes: Hero[]) => heroes.find(hero => hero.id === +id))\n    );\n  }\n}\n\n\n\n</code-pane>\n\n  <code-pane header=\"heroes.module.ts\" path=\"router/src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list/hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nimport { HeroesRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ]\n})\nexport class HeroesModule {}\n\n</code-pane>\n\n  <code-pane header=\"heroes-routing.module.ts\" path=\"router/src/app/heroes/heroes-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list/hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'hero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-pane>\n\n  <code-pane header=\"message.service.ts\" path=\"router/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"milestone-4\"></a>\n<h2 id=\"milestone-4-crisis-center-feature\" translation-result=\"on\">里程碑 4：危机中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-4-crisis-center-feature\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"milestone-4-crisis-center-feature\">Milestone 4: Crisis center feature<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-4-crisis-center-feature\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节将向你展示如何在应用中添加子路由并使用相对路由。</p><p translation-origin=\"off\">This section shows you how to add child routes and use relative routing in your app.</p>\n\n<p translation-result=\"on\">要为应用当前的危机中心添加更多特性，请执行类似于 heroes 特性的步骤：</p><p translation-origin=\"off\">To add more features to the app's current crisis center, take similar steps as for the heroes feature:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在 <code>src/app</code> 目录下创建一个 <code>crisis-center</code> 子目录。</p><p translation-origin=\"off\">Create a <code>crisis-center</code> subfolder in the <code>src/app</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 把 <code>app/heroes</code> 中的文件和目录复制到新的 <code>crisis-center</code> 文件夹中。</p><p translation-origin=\"off\">Copy the files and folders from <code>app/heroes</code> into the new <code>crisis-center</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在这些新建的文件中，把每个 \"hero\" 都改成 \"crisis\"，每个 \"heroes\" 都改成 \"crises\"。</p><p translation-origin=\"off\">In the new files, change every mention of \"hero\" to \"crisis\", and \"heroes\" to \"crises\".</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把这些 NgModule 文件改名为 <code>crisis-center.module.ts</code> 和 <code>crisis-center-routing.module.ts</code>。</p><p translation-origin=\"off\">Rename the NgModule files to <code>crisis-center.module.ts</code> and <code>crisis-center-routing.module.ts</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">使用 mock 的 crises 来代替 mock 的 heroes：</p><p translation-origin=\"off\">Use mock crises instead of mock heroes:</p>\n\n<code-example path=\"router/src/app/crisis-center/mock-crises.ts\" header=\"src/app/crisis-center/mock-crises.ts\">\nimport { Crisis } from './crisis';\n\nexport const CRISES: Crisis[] = [\n  { id: 1, name: 'Dragon Burning Cities' },\n  { id: 2, name: 'Sky Rains Great White Sharks' },\n  { id: 3, name: 'Giant Asteroid Heading For Earth' },\n  { id: 4, name: 'Procrastinators Meeting Delayed Again' },\n]\n\n\n</code-example>\n<p translation-result=\"on\">最终的危机中心可以作为引入子路由这个新概念的基础。\n你可以把英雄管理保持在当前状态，以便和<em>危机中心</em>进行对比。</p><p translation-origin=\"off\">The resulting crisis center is a foundation for introducing a new concept—child routing.\nYou can leave Heroes in its current state as a contrast with the Crisis Center.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">遵循<a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\" target=\"_blank\" title=\"Separation of Concerns\"><em>关注点分离（Separation of Concerns）</em>原则</a>，\n对<em>危机中心</em>的修改不会影响 <code>AppModule</code> 或其它特性模块中的组件。</p><p translation-origin=\"off\">In keeping with the <a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\" title=\"Separation of Concerns\">Separation of Concerns principle</a>, changes to the Crisis Center don't affect the <code>AppModule</code> or any other feature's component.</p>\n\n</div>\n<a id=\"crisis-child-routes\"></a>\n<h3 id=\"a-crisis-center-with-child-routes\" translation-result=\"on\">带有子路由的危机中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#a-crisis-center-with-child-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"a-crisis-center-with-child-routes\">A crisis center with child routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#a-crisis-center-with-child-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本节会展示如何组织危机中心，来满足 Angular 应用所推荐的模式：</p><p translation-origin=\"off\">This section shows you how to organize the crisis center to conform to the following recommended pattern for Angular applications:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 把每个特性放在自己的目录中。</p><p translation-origin=\"off\">Each feature area resides in its own folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 每个特性都有自己的 Angular 特性模块。</p><p translation-origin=\"off\">Each feature has its own Angular feature module.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 每个特性区都有自己的根组件。</p><p translation-origin=\"off\">Each area has its own area root component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 每个特性区的根组件中都有自己的路由出口及其子路由。</p><p translation-origin=\"off\">Each area root component has its own router outlet and child routes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 特性区的路由很少（或完全不）与其它特性区的路由交叉。</p><p translation-origin=\"off\">Feature area routes rarely (if ever) cross with routes of other features.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">如果你还有更多特性区，它们的组件树是这样的：</p><p translation-origin=\"off\">If your app had many feature areas, the app component trees might look like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/component-tree.png\" alt=\"Component Tree\" width=\"473\" height=\"258\">\n</div>\n<a id=\"child-routing-component\"></a>\n<h3 id=\"child-routing-component\" translation-result=\"on\">子路由组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#child-routing-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"child-routing-component\">Child routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#child-routing-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>crisis-center</code> 目录下生成一个 <code>CrisisCenter</code> 组件：</p><p translation-origin=\"off\">Generate a <code>CrisisCenter</code> component in the <code>crisis-center</code> folder:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component crisis-center/crisis-center\n</code-example>\n<p translation-result=\"on\">使用如下代码更新组件模板：</p><p translation-origin=\"off\">Update the component template with the following markup:</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-center/crisis-center.component.html\" header=\"src/app/crisis-center/crisis-center/crisis-center.component.html\">\n&#x3C;h2>CRISIS CENTER&#x3C;/h2>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<p translation-result=\"on\"><code>CrisisCenterComponent</code> 和 <code>AppComponent</code> 有下列共同点：</p><p translation-origin=\"off\">The <code>CrisisCenterComponent</code> has the following in common with the <code>AppComponent</code>:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 它是危机中心特性区的<em>根</em>，正如 <code>AppComponent</code> 是整个应用的根。</p><p translation-origin=\"off\">It is the root of the crisis center area, just as <code>AppComponent</code> is the root of the entire application.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 它是危机管理特性区的壳，正如 <code>AppComponent</code> 是管理高层工作流的壳。</p><p translation-origin=\"off\">It is a shell for the crisis management feature area, just as the <code>AppComponent</code> is a shell to manage the high-level workflow.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">就像大多数的壳一样，<code>CrisisCenterComponent</code> 类是最小化的，因为它没有业务逻辑，它的模板中没有链接，只有一个标题和用于放置危机中心的子组件的 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>。</p><p translation-origin=\"off\">Like most shells, the <code>CrisisCenterComponent</code> class is minimal because it has no business logic, and its template has no links, just a title and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> for the crisis center child component.</p>\n\n<a id=\"child-route-config\"></a>\n<h3 id=\"child-route-configuration\" translation-result=\"on\">子路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#child-route-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"child-route-configuration\">Child route configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#child-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>crisis-center</code> 目录下生成一个 <code>CrisisCenterHome</code> 组件，作为 \"危机中心\" 特性的宿主页面。</p><p translation-origin=\"off\">As a host page for the \"Crisis Center\" feature, generate a <code>CrisisCenterHome</code> component in the <code>crisis-center</code> folder.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component crisis-center/crisis-center-home\n</code-example>\n<p translation-result=\"on\">用一条欢迎信息修改 <code>Crisis Center</code> 中的模板。</p><p translation-origin=\"off\">Update the template with a welcome message to the <code>Crisis Center</code>.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\" header=\"src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\">\n&#x3C;p>Welcome to the Crisis Center&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">把 <code>heroes-routing.module.ts</code> 文件复制过来，改名为 <code>crisis-center-routing.module.ts</code>，并修改它。\n这次你要把子路由定义在父路由 <code>crisis-center</code> 中。</p><p translation-origin=\"off\">Update the <code>crisis-center-routing.module.ts</code> you renamed after copying it from <code>heroes-routing.module.ts</code> file.\nThis time, you define child routes within the parent <code>crisis-center</code> route.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\" header=\"src/app/crisis-center/crisis-center-routing.module.ts (Routes)\" region=\"routes\">\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">注意，父路由 <code>crisis-center</code> 有一个 <code>children</code> 属性，它有一个包含 <code>CrisisListComponent</code> 的路由。\n<code>CrisisListModule</code> 路由还有一个带两个路由的 <code>children</code> 数组。</p><p translation-origin=\"off\">Notice that the parent <code>crisis-center</code> route has a <code>children</code> property with a single route containing the <code>CrisisListComponent</code>.\nThe <code>CrisisListComponent</code> route also has a <code>children</code> array with two routes.</p>\n\n<p translation-result=\"on\">这两个路由分别导航到了<em>危机中心</em>的两个子组件：<code>CrisisCenterHomeComponent</code> 和 <code>CrisisDetailComponent</code>。</p><p translation-origin=\"off\">These two routes navigate to the crisis center child components,\n<code>CrisisCenterHomeComponent</code> and <code>CrisisDetailComponent</code>, respectively.</p>\n\n<p translation-result=\"on\">对这些子路由的处理中有一些重要的差异。</p><p translation-origin=\"off\">There are important differences in the way the router treats child routes.</p>\n\n<p translation-result=\"on\">路由器会把这些路由对应的组件放在 <code>CrisisCenterComponent</code> 的 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 中，而不是 <code>AppComponent</code> 壳组件中的。</p><p translation-origin=\"off\">The router displays the components of these routes in the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> of the <code>CrisisCenterComponent</code>, not in the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> of the <code>AppComponent</code> shell.</p>\n\n<p translation-result=\"on\"><code>CrisisListComponent</code> 包含危机列表和一个 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，用以显示 <code>Crisis Center Home</code> 和 <code>Crisis Detail</code> 这两个路由组件。</p><p translation-origin=\"off\">The <code>CrisisListComponent</code> contains the crisis list and a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> to display the <code>Crisis Center Home</code> and <code>Crisis Detail</code> route components.</p>\n\n<p translation-result=\"on\"><code>Crisis Detail</code> 路由是 <code>Crisis List</code> 的子路由。由于路由器默认会<a href=\"guide/router#reuse\">复用组件</a>，因此当你选择了另一个危机时，<code>CrisisDetailComponent</code> 会被复用。\n作为对比，回头看看 <code>Hero Detail</code> 路由，每当你从列表中选择了不同的英雄时，<a href=\"guide/router#snapshot-the-no-observable-alternative\">都会重新创建该组件</a>。</p><p translation-origin=\"off\">The <code>Crisis Detail</code> route is a child of the <code>Crisis List</code>.\nThe router <a href=\"guide/router#reuse\">reuses components</a> by default, so the <code>Crisis Detail</code> component will be re-used as you select different crises.\nIn contrast, back in the <code>Hero Detail</code> route, <a href=\"guide/router#snapshot-the-no-observable-alternative\">the component was recreated</a> each time you selected a different hero from the list of heroes.</p>\n\n<p translation-result=\"on\">在顶层，以 <code>/</code> 开头的路径指向的总是应用的根。\n但这里是子路由。\n它们是在父路由路径的基础上做出的扩展。\n在路由树中每深入一步，你就会在该路由的路径上添加一个斜线 <code>/</code>（除非该路由的路径是空的）。</p><p translation-origin=\"off\">At the top level, paths that begin with <code>/</code> refer to the root of the application.\nBut child routes extend the path of the parent route.\nWith each step down the route tree,\nyou add a slash followed by the route path, unless the path is empty.</p>\n\n<p translation-result=\"on\">如果把该逻辑应用到危机中心中的导航，那么父路径就是 <code>/crisis-center</code>。</p><p translation-origin=\"off\">Apply that logic to navigation within the crisis center for which the parent path is <code>/crisis-center</code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 要导航到 <code>CrisisCenterHomeComponent</code>，完整的 URL 是 <code>/crisis-center</code> (<code>/crisis-center</code> + <code>''</code> + <code>''</code>)。</p><p translation-origin=\"off\">To navigate to the <code>CrisisCenterHomeComponent</code>, the full URL is <code>/crisis-center</code> (<code>/crisis-center</code> + <code>''</code> + <code>''</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 要导航到 <code>CrisisDetailComponent</code> 以展示 <code>id=2</code> 的危机，完整的 URL 是 <code>/crisis-center/2</code> (<code>/crisis-center</code> + <code>''</code> + <code>'/2'</code>)。</p><p translation-origin=\"off\">To navigate to the <code>CrisisDetailComponent</code> for a crisis with <code>id=2</code>, the full URL is\n<code>/crisis-center/2</code> (<code>/crisis-center</code> + <code>''</code> +  <code>'/2'</code>).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">本例子中包含站点部分的绝对 URL，就是：</p><p translation-origin=\"off\">The absolute URL for the latter example, including the <code>localhost</code> origin, is as follows:</p>\n\n<code-example>\n  localhost:4200/crisis-center/2\n\n</code-example>\n<p translation-result=\"on\">这里是完整的 <code>crisis-center.routing.ts</code> 及其导入语句。</p><p translation-origin=\"off\">Here's the complete <code>crisis-center-routing.module.ts</code> file with its imports.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\" header=\"src/app/crisis-center/crisis-center-routing.module.ts (excerpt)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail/crisis-detail.component';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<a id=\"import-crisis-module\"></a>\n<h3 id=\"import-crisis-center-module-into-the-appmodule-routes\" translation-result=\"on\">把危机中心模块导入到 <code>AppModule</code> 的路由中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#import-crisis-center-module-into-the-appmodule-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"import-crisis-center-module-into-the-appmodule-routes\">Import crisis center module into the <code>AppModule</code> routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#import-crisis-center-module-into-the-appmodule-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">就像 <code>HeroesModule</code> 模块中一样，你必须把 <code>CrisisCenterModule</code> 添加到 <code>AppModule</code> 的 <code>imports</code> 数组中，就在 <code>AppRoutingModule</code> <em>前面</em>：</p><p translation-origin=\"off\">As with the <code>HeroesModule</code>, you must add the <code>CrisisCenterModule</code> to the <code>imports</code> array of the <code>AppModule</code>\n<em>before</em> the <code>AppRoutingModule</code>:</p>\n\n<code-tabs>\n\n  <code-pane path=\"router/src/app/crisis-center/crisis-center.module.ts\" header=\"src/app/crisis-center/crisis-center.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail/crisis-detail.component';\n\nimport { CrisisCenterRoutingModule } from './crisis-center-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    CrisisCenterRoutingModule\n  ],\n  declarations: [\n    CrisisCenterComponent,\n    CrisisListComponent,\n    CrisisCenterHomeComponent,\n    CrisisDetailComponent\n  ]\n})\nexport class CrisisCenterModule {}\n\n\n</code-pane>\n\n  <code-pane path=\"router/src/app/app.module.4.ts\" header=\"src/app/app.module.ts (import CrisisCenterModule)\" region=\"crisis-center-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }            from './app.component';\nimport { PageNotFoundComponent }   from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule }        from './app-routing.module';\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { CrisisCenterModule }      from './crisis-center/crisis-center.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">从 <code>app.routing.ts</code> 中移除危机中心的初始路由。\n因为现在是 <code>HeroesModule</code> 和 <code>CrisisCenter</code> 模块提供了这些特性路由。</p><p translation-origin=\"off\">Remove the initial crisis center route from the <code>app-routing.module.ts</code> because now the <code>HeroesModule</code> and the <code>CrisisCenter</code> modules provide teh feature routes.</p>\n\n<p translation-result=\"on\"><code>app-routing.module.ts</code> 文件中只有应用的顶层路由，比如默认路由和通配符路由。</p><p translation-origin=\"off\">The <code>app-routing.module.ts</code> file retains the top-level application routes such as the default and wildcard routes.</p>\n\n<code-example path=\"router/src/app/app-routing.module.3.ts\" header=\"src/app/app-routing.module.ts (v3)\" region=\"v3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }                from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }    from '@angular/router';\n\nimport { PageNotFoundComponent }  from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<a id=\"relative-navigation\"></a>\n<h3 id=\"relative-navigation\" translation-result=\"on\">相对导航<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#relative-navigation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"relative-navigation\">Relative navigation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#relative-navigation\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">虽然构建出了危机中心特性区，你却仍在使用以斜杠开头的<strong>绝对路径</strong>来导航到危机详情的路由。</p><p translation-origin=\"off\">While building out the crisis center feature, you navigated to the\ncrisis detail route using an absolute path that begins with a slash.</p>\n\n<p translation-result=\"on\">路由器会从路由配置的顶层来匹配像这样的绝对路径。</p><p translation-origin=\"off\">The router matches such absolute paths to routes starting from the top of the route configuration.</p>\n\n<p translation-result=\"on\">你固然可以继续像危机中心特性区一样使用绝对路径，但是那样会把链接钉死在特定的父路由结构上。\n如果你修改了父路径 <code>/crisis-center</code>，那就不得不修改每一个链接参数数组。</p><p translation-origin=\"off\">You could continue to use absolute paths like this to navigate inside the Crisis Center feature, but that pins the links to the parent routing structure.\nIf you changed the parent <code>/crisis-center</code> path, you would have to change the link parameters array.</p>\n\n<p translation-result=\"on\">通过改成定义<em>相对于</em>当前 URL 的路径，你可以把链接从这种依赖中解放出来。\n当你修改了该特性区的父路由路径时，该特性区内部的导航仍然完好无损。</p><p translation-origin=\"off\">You can free the links from this dependency by defining paths that are relative to the current URL segment.\nNavigation within the feature area remains intact even if you change the parent route path to the feature.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">路由器支持在<em>链接参数数组</em>中使用“目录式”语法来为查询路由名提供帮助：</p><p translation-origin=\"off\">The router supports directory-like syntax in a <em>link parameters list</em> to help guide route name lookup:</p>\n\n<p translation-result=\"on\"><code>./</code> 或 <code>无前导斜线</code> 形式是相对于当前级别的。</p><p translation-origin=\"off\"><code>./</code> or <code>no leading slash</code> is relative to the current level.</p>\n\n<p translation-result=\"on\"><code>../</code> 会回到当前路由路径的上一级。</p><p translation-origin=\"off\"><code>../</code> to go up one level in the route path.</p>\n\n<p translation-result=\"on\">你可以把相对导航语法和一个祖先路径组合起来用。\n如果不得不导航到一个兄弟路由，你可以用 <code>../&#x3C;sibling></code> 来回到上一级，然后进入兄弟路由路径中。</p><p translation-origin=\"off\">You can combine relative navigation syntax with an ancestor path.\nIf you must navigate to a sibling route, you could use the <code>../&#x3C;sibling></code> convention to go up\none level, then over and down the sibling route path.</p>\n\n</div>\n<p translation-result=\"on\">用 <code>Router.navigate</code> 方法导航到相对路径时，你必须提供当前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，来让路由器知道你现在位于路由树中的什么位置。</p><p translation-origin=\"off\">To navigate a relative path with the <code>Router.navigate</code> method, you must supply the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>\nto give the router knowledge of where you are in the current route tree.</p>\n\n<p translation-result=\"on\">在<em>链接参数数组</em>后面，添加一个带有 <code>relativeTo</code> 属性的对象，并把它设置为当前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。\n这样路由器就会基于当前激活路由的位置来计算出目标 URL。</p><p translation-origin=\"off\">After the <em>link parameters array</em>, add an object with a <code>relativeTo</code> property set to the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.\nThe router then calculates the target URL based on the active route's location.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">当调用路由器的 <code>navigateByUrl()</code> 时，<strong>总是</strong>要指定完整的绝对路径。</p><p translation-origin=\"off\">Always specify the complete absolute path when calling router's <code>navigateByUrl()</code> method.</p>\n\n</div>\n<a id=\"nav-to-crisis\"></a>\n<h3 id=\"navigate-to-crisis-list-with-a-relative-url\" translation-result=\"on\">使用相对 URL 导航到危机列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#navigate-to-crisis-list-with-a-relative-url\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"navigate-to-crisis-list-with-a-relative-url\">Navigate to crisis list with a relative URL<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#navigate-to-crisis-list-with-a-relative-url\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你已经注入了组成相对导航路径所需的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p><p translation-origin=\"off\">You've already injected the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> that you need to compose the relative navigation path.</p>\n\n<p translation-result=\"on\">如果用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 来代替 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务进行导航，就要使用相同的链接参数数组，不过不再需要提供 <code>relativeTo</code> 属性。\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 已经隐含在了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中。</p><p translation-origin=\"off\">When using a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> to navigate instead of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service, you'd use the same link parameters array, but you wouldn't provide the object with the <code>relativeTo</code> property.\nThe <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> is implicit in a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive.</p>\n\n<p translation-result=\"on\">修改 <code>CrisisDetailComponent</code> 的 <code>gotoCrises()</code> 方法，来使用相对路径返回<em>危机中心</em>列表。</p><p translation-origin=\"off\">Update the <code>gotoCrises()</code> method of the <code>CrisisDetailComponent</code> to navigate back to the Crisis Center list using relative path navigation.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (relative navigation)\" region=\"gotoCrises-navigate\">\n// Relative navigation back to the crises\nthis.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n\n</code-example>\n<p translation-result=\"on\">注意这个路径使用了 <code>../</code> 语法返回上一级。\n如果当前危机的 <code>id</code> 是 <code>3</code>，那么最终返回到的路径就是 <code>/crisis-center/;id=3;foo=foo</code>。</p><p translation-origin=\"off\">Notice that the path goes up a level using the <code>../</code> syntax.\nIf the current crisis <code>id</code> is <code>3</code>, the resulting path back to the crisis list is  <code>/crisis-center/;id=3;foo=foo</code>.</p>\n\n<a id=\"named-outlets\"></a>\n<h3 id=\"displaying-multiple-routes-in-named-outlets\" translation-result=\"on\">用命名出口（outlet）显示多重路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#displaying-multiple-routes-in-named-outlets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"displaying-multiple-routes-in-named-outlets\">Displaying multiple routes in named outlets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#displaying-multiple-routes-in-named-outlets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你决定给用户提供一种方式来联系危机中心。\n当用户点击“Contact”按钮时，你要在一个弹出框中显示一条消息。</p><p translation-origin=\"off\">You decide to give users a way to contact the crisis center.\nWhen a user clicks a \"Contact\" button, you want to display a message in a popup view.</p>\n\n<p translation-result=\"on\">即使在应用中的不同页面之间切换，这个弹出框也应该始终保持打开状态，直到用户发送了消息或者手动取消。\n显然，你不能把这个弹出框跟其它放到页面放到同一个路由出口中。</p><p translation-origin=\"off\">The popup should stay open, even when switching between pages in the application, until the user closes it\nby sending the message or canceling.\nClearly you can't put the popup in the same outlet as the other pages.</p>\n\n<p translation-result=\"on\">迄今为止，你只定义过单路由出口，并且在其中嵌套了子路由以便对路由分组。\n在每个模板中，路由器只能支持一个无名主路由出口。</p><p translation-origin=\"off\">Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together.\nThe router only supports one primary unnamed outlet per template.</p>\n\n<p translation-result=\"on\">模板还可以有多个命名的路由出口。\n每个命名出口都自己有一组带组件的路由。\n多重出口可以在同一时间根据不同的路由来显示不同的内容。</p><p translation-origin=\"off\">A template can also have any number of named outlets.\nEach named outlet has its own set of routes with their own components.\nMultiple outlets can display different content, determined by different routes, all at the same time.</p>\n\n<p translation-result=\"on\">在 <code>AppComponent</code> 中添加一个名叫“popup”的出口，就在无名出口的下方。</p><p translation-origin=\"off\">Add an outlet named \"popup\" in the <code>AppComponent</code>, directly below the unnamed outlet.</p>\n\n<code-example path=\"router/src/app/app.component.4.html\" header=\"src/app/app.component.html (outlets)\" region=\"outlets\">\n&#x3C;div [@routeAnimation]=\"getAnimationData(routerOutlet)\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #routerOutlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<p translation-result=\"on\">一旦你学会了如何把一个弹出框组件路由到该出口，那里就是将会出现弹出框的地方。</p><p translation-origin=\"off\">That's where a popup will go, once you learn how to route a popup component to it.</p>\n\n<a id=\"secondary-routes\"></a>\n<h4 id=\"secondary-routes\" translation-result=\"on\">第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#secondary-routes\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"secondary-routes\">Secondary routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#secondary-routes\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">命名出口是<em>第二路由</em>的目标。</p><p translation-origin=\"off\">Named outlets are the targets of  <em>secondary routes</em>.</p>\n\n<p translation-result=\"on\">第二路由很像主路由，配置方式也一样。它们只有一些关键的不同点：</p><p translation-origin=\"off\">Secondary routes look like primary routes and you configure them the same way.\nThey differ in a few key respects.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 它们彼此互不依赖。</p><p translation-origin=\"off\">They are independent of each other.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 它们与其它路由组合使用。</p><p translation-origin=\"off\">They work in combination with other routes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 它们显示在命名出口中。</p><p translation-origin=\"off\">They are displayed in named outlets.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">生成一个新的组件来组合这个消息。</p><p translation-origin=\"off\">Generate a new component to compose the message.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component compose-message\n</code-example>\n<p translation-result=\"on\">它显示一个简单的表单，包括一个头、一个消息输入框和两个按钮：“Send”和“Cancel”。</p><p translation-origin=\"off\">It displays a short form with a header, an input box for the message,\nand two buttons, \"Send\" and \"Cancel\".</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/router/contact-popup.png\" alt=\"Contact popup\" width=\"250\" height=\"262\">\n</div>\n<p translation-result=\"on\">下面是该组件及其模板和样式：</p><p translation-origin=\"off\">Here's the component, its template and styles:</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/compose-message/compose-message.component.css\" path=\"router/src/app/compose-message/compose-message.component.css\">\n:host {\n  position: relative; bottom: 10%;\n}\n\n</code-pane>\n\n  <code-pane header=\"src/app/compose-message/compose-message.component.html\" path=\"router/src/app/compose-message/compose-message.component.html\">\n&#x3C;h3>Contact Crisis Center&#x3C;/h3>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"details\">\n  {{ details }}\n&#x3C;/div>\n&#x3C;div>\n  &#x3C;div>\n    &#x3C;label>Message: &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div>\n    &#x3C;<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a> [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"message\" rows=\"10\" cols=\"35\" [disabled]=\"sending\">&#x3C;/<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a>>\n  &#x3C;/div>\n&#x3C;/div>\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!sending\">\n  &#x3C;button (click)=\"send()\">Send&#x3C;/button>\n  &#x3C;button (click)=\"cancel()\">Cancel&#x3C;/button>\n&#x3C;/p>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/compose-message/compose-message.component.ts\" path=\"router/src/app/compose-message/compose-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> }                 from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-compose-message',\n  templateUrl: './compose-message.component.html',\n  styleUrls: ['./compose-message.component.css']\n})\nexport class ComposeMessageComponent {\n  details: string;\n  message: string;\n  sending = false;\n\n  constructor(private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  send() {\n    this.sending = true;\n    this.details = 'Sending Message...';\n\n    setTimeout(() => {\n      this.sending = false;\n      this.closePopup();\n    }, 1000);\n  }\n\n  cancel() {\n    this.closePopup();\n  }\n\n  closePopup() {\n    // Providing a `null` value to the named outlet\n    // clears the contents of the named outlet\n    this.router.navigate([{ outlets: { popup: null }}]);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">它看起来几乎和你以前见过其它组件一样，但有两个值得注意的区别。</p><p translation-origin=\"off\">It looks similar to any other component in this guide, but there are two key differences.</p>\n\n<p translation-result=\"on\">注意，<code>send()</code> 方法在发送消息和关闭弹出框之前通过等待模拟了一秒钟的延迟。</p><p translation-origin=\"off\">Note that the <code>send()</code> method simulates latency by waiting a second before \"sending\" the message and closing the popup.</p>\n\n<p translation-result=\"on\"><code>closePopup()</code> 方法用把 <code>popup</code> 出口导航到 <code>null</code> 的方式关闭了弹出框，它在<a href=\"guide/router#clear-secondary-routes\">稍后的部分</a>有讲解。</p><p translation-origin=\"off\">The <code>closePopup()</code> method closes the popup view by navigating to the popup outlet with a <code>null</code> which the section on <a href=\"guide/router#clear-secondary-routes\">clearing secondary routes</a> covers.</p>\n\n<a id=\"add-secondary-route\"></a>\n<h4 id=\"add-a-secondary-route\" translation-result=\"on\">添加第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-a-secondary-route\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"add-a-secondary-route\">Add a secondary route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-a-secondary-route\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">打开 <code>AppRoutingModule</code>，并把一个新的 <code>compose</code> 路由添加到 <code>appRoutes</code> 中。</p><p translation-origin=\"off\">Open the <code>AppRoutingModule</code> and add a new <code>compose</code> route to the <code>appRoutes</code>.</p>\n\n<code-example path=\"router/src/app/app-routing.module.3.ts\" header=\"src/app/app-routing.module.ts (compose route)\" region=\"compose\">\n{\n  path: 'compose',\n  component: ComposeMessageComponent,\n  outlet: 'popup'\n},\n\n</code-example>\n<p translation-result=\"on\">除了 <code>path</code> 和 <code>component</code> 属性之外还有一个新的属性 <code>outlet</code>，它被设置成了 <code>'popup'</code>。\n这个路由现在指向了 <code>popup</code> 出口，而 <code>ComposeMessageComponent</code> 也将显示在那里。</p><p translation-origin=\"off\">In addition to the <code>path</code> and <code>component</code> properties, there's a new property called <code>outlet</code>, which is set to <code>'popup'</code>.\nThis route now targets the popup outlet and the <code>ComposeMessageComponent</code> will display there.</p>\n\n<p translation-result=\"on\">为了给用户某种途径来打开这个弹出框，还要往 <code>AppComponent</code> 模板中添加一个“Contact”链接。</p><p translation-origin=\"off\">To give users a way to open the popup, add a \"Contact\" link to the <code>AppComponent</code> template.</p>\n\n<code-example path=\"router/src/app/app.component.4.html\" header=\"src/app/app.component.html (contact-link)\" region=\"contact-link\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\">Contact&#x3C;/a>\n\n</code-example>\n<p translation-result=\"on\">虽然 <code>compose</code> 路由被配置到了 <code>popup</code> 出口上，但这仍然不足以把该路由和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令联系起来。\n你还要在<em>链接参数数组</em>中指定这个命名出口，并通过属性绑定的形式把它绑定到 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 上。</p><p translation-origin=\"off\">Although the <code>compose</code> route is configured to the \"popup\" outlet, that's not sufficient for connecting the route to a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive.\nYou have to specify the named outlet in a <em>link parameters array</em> and bind it to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> with a property binding.</p>\n\n<p translation-result=\"on\"><em>链接参数数组</em>包含一个只有一个 <code>outlets</code> 属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。\n在这里，它只有一个出口名“popup”，它的值则是另一个<em>链接参数数组</em>，用于指定 <code>compose</code> 路由。</p><p translation-origin=\"off\">The <em>link parameters array</em> contains an object with a single <code>outlets</code> property whose value is another object keyed by one (or more) outlet names.\nIn this case there is only the \"popup\" outlet property and its value is another <em>link parameters array</em> that specifies the <code>compose</code> route.</p>\n\n<p translation-result=\"on\">换句话说，当用户点击此链接时，路由器会在路由出口 <code>popup</code> 中显示与 <code>compose</code> 路由相关联的组件。</p><p translation-origin=\"off\">In other words, when the user clicks this link, the router displays the component associated with the <code>compose</code> route in the <code>popup</code> outlet.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">当只需要考虑一个路由和一个无名出口时，外部对象中的这个 <code>outlets</code> 对象是完全不必要的。</p><p translation-origin=\"off\">This <code>outlets</code> object within an outer object was unnecessary when there was only one route and one unnamed outlet.</p>\n\n<p translation-result=\"on\">路由器假设这个路由指向了无名的主出口，并为你创建这些对象。</p><p translation-origin=\"off\">The router assumed that your route specification targeted the unnamed primary outlet and created these objects for you.</p>\n\n<p translation-result=\"on\">路由到一个命名出口会揭示一个路由特性：\n你可以在同一个 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中为多个路由出口指定多个路由。</p><p translation-origin=\"off\">Routing to a named outlet has revealed a router feature:\nyou can target multiple outlets with multiple routes in the same <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive.</p>\n\n</div>\n<a id=\"secondary-route-navigation\"></a>\n<h4 id=\"secondary-route-navigation-merging-routes-during-navigation\" translation-result=\"on\">第二路由导航：在导航期间合并路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#secondary-route-navigation-merging-routes-during-navigation\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"secondary-route-navigation-merging-routes-during-navigation\">Secondary route navigation: merging routes during navigation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#secondary-route-navigation-merging-routes-during-navigation\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">导航到<em>危机中心</em>并点击“Contact”，你将会在浏览器的地址栏看到如下 URL：</p><p translation-origin=\"off\">Navigate to the <em>Crisis Center</em> and click \"Contact\".\nyou should see something like the following URL in the browser address bar.</p>\n\n<code-example>\n  http://.../crisis-center(popup:compose)\n\n</code-example>\n<p translation-result=\"on\">这个 URL 中有意义的部分是 <code>...</code> 后面的这些：</p><p translation-origin=\"off\">The relevant part of the URL follows the <code>...</code>:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>crisis-center</code> 是主导航。</p><p translation-origin=\"off\">The <code>crisis-center</code> is the primary navigation.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 圆括号包裹的部分是第二路由。</p><p translation-origin=\"off\">Parentheses surround the secondary route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 第二路由包括一个出口名称（<code>popup</code>）、一个冒号分隔符和第二路由的路径（<code>compose</code>）。</p><p translation-origin=\"off\">The secondary route consists of an outlet name (<code>popup</code>), a <code>colon</code> separator, and the secondary route path (<code>compose</code>).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">点击 <em>Heroes</em> 链接，并再次查看 URL：</p><p translation-origin=\"off\">Click the <em>Heroes</em> link and look at the URL again.</p>\n\n<code-example>\n  http://.../heroes(popup:compose)\n</code-example>\n<p translation-result=\"on\">主导航的部分变化了，而第二路由没有变。</p><p translation-origin=\"off\">The primary navigation part has changed; the secondary route is the same.</p>\n\n<p translation-result=\"on\">路由器在导航树中对两个独立的分支保持追踪，并在 URL 中对这棵树进行表达。</p><p translation-origin=\"off\">The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</p>\n\n<p translation-result=\"on\">你还可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树。\n路由器将会生成相应的 URL。</p><p translation-origin=\"off\">You can add many more outlets and routes, at the top level and in nested levels, creating a navigation tree with many branches and the router will generate the URLs to go with it.</p>\n\n<p translation-result=\"on\">通过像前面那样填充 <code>outlets</code> 对象，你可以告诉路由器立即导航到一棵完整的树。\n然后把这个对象通过一个<em>链接参数数组</em>传给 <code>router.navigate</code> 方法。</p><p translation-origin=\"off\">You can tell the router to navigate an entire tree at once by filling out the <code>outlets</code> object and then pass that object inside a <em>link parameters array</em>  to the <code>router.navigate</code> method.</p>\n\n<a id=\"clear-secondary-routes\"></a>\n<h4 id=\"clearing-secondary-routes\" translation-result=\"on\">清除第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#clearing-secondary-routes\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"clearing-secondary-routes\">Clearing secondary routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#clearing-secondary-routes\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">像常规出口一样，二级出口会一直存在，直到你导航到新组件。</p><p translation-origin=\"off\">Like regular outlets, secondary outlets persists until you navigate away to a new component.</p>\n\n<p translation-result=\"on\">每个第二出口都有自己独立的导航，跟主出口的导航彼此独立。\n修改主出口中的当前路由并不会影响到 <code>popup</code> 出口中的。\n这就是为什么在危机中心和英雄管理之间导航时，弹出框始终都是可见的。</p><p translation-origin=\"off\">Each secondary outlet has its own navigation, independent of the navigation driving the primary outlet.\nChanging a current route that displays in the primary outlet has no effect on the popup outlet.\nThat's why the popup stays visible as you navigate among the crises and heroes.</p>\n\n<p translation-result=\"on\">再看 <code>closePopup()</code> 方法：</p><p translation-origin=\"off\">The <code>closePopup()</code> method again:</p>\n\n<code-example path=\"router/src/app/compose-message/compose-message.component.ts\" header=\"src/app/compose-message/compose-message.component.ts (closePopup)\" region=\"closePopup\">\nclosePopup() {\n  // Providing a `null` value to the named outlet\n  // clears the contents of the named outlet\n  this.router.navigate([{ outlets: { popup: null }}]);\n}\n\n</code-example>\n<p translation-result=\"on\">单击 “send” 或 “cancel” 按钮可以清除弹出视图。<code>closePopup()</code> 函数会使用 <code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code> 方法强制导航，并传入一个<a href=\"guide/router#link-parameters-array\">链接参数数组</a>。</p><p translation-origin=\"off\">Clicking the \"send\" or \"cancel\" buttons clears the popup view.\nThe <code>closePopup()</code> function navigates imperatively with the <code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code> method, passing in a <a href=\"guide/router#link-parameters-array\">link parameters array</a>.</p>\n\n<p translation-result=\"on\">就像在 <code>AppComponent</code> 中绑定到的 <em>Contact</em> <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 一样，它也包含了一个带 <code>outlets</code> 属性的对象。\n<code>outlets</code> 属性的值是另一个对象，该对象用一些出口名称作为属性名。\n唯一的命名出口是 <code>'popup'</code>。</p><p translation-origin=\"off\">Like the array bound to the <em>Contact</em> <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> in the <code>AppComponent</code>, this one includes an object with an <code>outlets</code> property.\nThe <code>outlets</code> property value is another object with outlet names for keys.\nThe only named outlet is <code>'popup'</code>.</p>\n\n<p translation-result=\"on\">但这次，<code>'popup'</code> 的值是 <code>null</code>。<code>null</code> 不是一个路由，但却是一个合法的值。\n把 <code>popup</code> 这个 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 设置为 <code>null</code> 会清除该出口，并且从当前 URL 中移除第二路由 <code>popup</code>。</p><p translation-origin=\"off\">This time, the value of <code>'popup'</code> is <code>null</code>.\nThat's not a route, but it is a legitimate value.\nSetting the popup <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> to <code>null</code> clears the outlet and removes the secondary popup route from the current URL.</p>\n\n<a id=\"guards\"></a>\n<a id=\"milestone-5-route-guards\"></a>\n<h2 id=\"milestone-5-route-guards\" translation-result=\"on\">里程碑 5：路由守卫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-5-route-guards\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"milestone-5-route-guards\">Milestone 5: Route guards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-5-route-guards\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">现在，<em>任何用户</em>都能在<em>任何时候</em>导航到<em>任何地方</em>。但有时候出于种种原因需要控制对该应用的不同部分的访问。可能包括如下场景：</p><p translation-origin=\"off\">At the moment, any user can navigate anywhere in the application anytime, but sometimes you need to control access to different parts of your app for various reasons. Some of which may include the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 该用户可能无权导航到目标组件。</p><p translation-origin=\"off\">Perhaps the user is not authorized to navigate to the target component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 可能用户得先登录（认证）。</p><p translation-origin=\"off\">Maybe the user must login (authenticate) first.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 在显示目标组件前，你可能得先获取某些数据。</p><p translation-origin=\"off\">Maybe you should fetch some data before you display the target component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 在离开组件前，你可能要先保存修改。</p><p translation-origin=\"off\">You might want to save pending changes before leaving a component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你可能要询问用户：你是否要放弃本次更改，而不用保存它们？</p><p translation-origin=\"off\">You might ask the user if it's OK to discard pending changes rather than save them.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你可以往路由配置中添加守卫，来处理这些场景。</p><p translation-origin=\"off\">You add guards to the route configuration to handle these scenarios.</p>\n\n<p translation-result=\"on\">守卫返回一个值，以控制路由器的行为：</p><p translation-origin=\"off\">A guard's return value controls the router's behavior:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 如果它返回 <code>true</code>，导航过程会继续</p><p translation-origin=\"off\">If it returns <code>true</code>, the navigation process continues.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 如果它返回 <code>false</code>，导航过程就会终止，且用户留在原地。</p><p translation-origin=\"off\">If it returns <code>false</code>, the navigation process stops and the user stays put.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果它返回 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>，则取消当前的导航，并且开始导航到返回的这个 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</p><p translation-origin=\"off\">If it returns a <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>, the current navigation cancels and a new navigation is initiated to the <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> returned.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：守卫还可以告诉路由器导航到别处，这样也会取消当前的导航。要想在守卫中这么做，就要返回 <code>false</code>；</p><p translation-origin=\"off\"><strong>Note:</strong> The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation.\nWhen doing so inside a guard, the guard should return <code>false</code>;</p>\n\n</div>\n<p translation-result=\"on\">守卫可以用同步的方式返回一个布尔值。但在很多情况下，守卫无法用同步的方式给出答案。\n守卫可能会向用户问一个问题、把更改保存到服务器，或者获取新数据，而这些都是异步操作。</p><p translation-origin=\"off\">The guard might return its boolean answer synchronously.\nBut in many cases, the guard can't produce an answer synchronously.\nThe guard could ask the user a question, save changes to the server, or fetch fresh data.\nThese are all asynchronous operations.</p>\n\n<p translation-result=\"on\">因此，路由的守卫可以返回一个 <code>Observable&#x3C;boolean></code> 或 <code>Promise&#x3C;boolean></code>，并且路由器会等待这个可观察对象被解析为 <code>true</code> 或 <code>false</code>。</p><p translation-origin=\"off\">Accordingly, a routing guard can return an <code>Observable&#x3C;boolean></code> or a <code>Promise&#x3C;boolean></code> and the\nrouter will wait for the observable to resolve to <code>true</code> or <code>false</code>.</p>\n\n<div class=\"alert is-critical\">\n<p translation-result=\"on\"><strong>注意：</strong> 提供给 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的可观察对象还<em>必须</em>能结束（complete）。否则，导航就不会继续。</p><p translation-origin=\"off\"><strong>Note:</strong> The observable provided to the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> must also complete. If the observable does not complete, the navigation does not continue.</p>\n\n</div>\n<p translation-result=\"on\">路由器可以支持多种守卫接口：</p><p translation-origin=\"off\">The router supports multiple guard interfaces:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 用<a href=\"api/router/CanActivate\"><code>CanActivate</code></a>来处理导航<em>到</em>某路由的情况。</p><p translation-origin=\"off\"><a href=\"api/router/CanActivate\"><code>CanActivate</code></a> to mediate navigation <em>to</em> a route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用<a href=\"api/router/CanActivateChild\"><code>CanActivateChild</code></a>来处理导航<em>到</em>某子路由的情况。</p><p translation-origin=\"off\"><a href=\"api/router/CanActivateChild\"><code>CanActivateChild</code></a> to mediate navigation <em>to</em> a child route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用<a href=\"api/router/CanDeactivate\"><code>CanDeactivate</code></a>来处理从当前路由<em>离开</em>的情况.</p><p translation-origin=\"off\"><a href=\"api/router/CanDeactivate\"><code>CanDeactivate</code></a> to mediate navigation <em>away</em> from the current route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用<a href=\"api/router/Resolve\"><code>Resolve</code></a>在路由激活<em>之前</em>获取路由数据。</p><p translation-origin=\"off\"><a href=\"api/router/Resolve\"><code>Resolve</code></a> to perform route data retrieval <em>before</em> route activation.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用<a href=\"api/router/CanLoad\"><code>CanLoad</code></a>来处理<em>异步</em>导航到某特性模块的情况。</p><p translation-origin=\"off\"><a href=\"api/router/CanLoad\"><code>CanLoad</code></a> to mediate navigation <em>to</em> a feature module loaded <em>asynchronously</em>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在分层路由的每个级别上，你都可以设置多个守卫。\n路由器会先按照从最深的子路由由下往上检查的顺序来检查 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code> 和 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> 守卫。\n然后它会按照从上到下的顺序检查 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 守卫。\n如果特性模块是异步加载的，在加载它之前还会检查 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code> 守卫。\n如果<em>任何</em>一个守卫返回 <code>false</code>，其它尚未完成的守卫会被取消，这样整个导航就被取消了。</p><p translation-origin=\"off\">You can have multiple guards at every level of a routing hierarchy.\nThe router checks the <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> and <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> guards first, from the deepest child route to the top.\nThen it checks the <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> guards from the top down to the deepest child route.\nIf the feature module is loaded asynchronously, the <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guard is checked before the module is loaded.\nIf <em>any</em> guard returns false, pending guards that have not completed will be canceled, and the entire navigation is canceled.</p>\n\n<p translation-result=\"on\">接下来的小节中有一些例子。</p><p translation-origin=\"off\">There are several examples over the next few sections.</p>\n\n<a id=\"can-activate-guard\"></a>\n<h3 id=\"canactivate-requiring-authentication\" translation-result=\"on\"><code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> ：需要身份验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canactivate-requiring-authentication\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"canactivate-requiring-authentication\"><code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code>: requiring authentication<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canactivate-requiring-authentication\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">应用程序通常会根据访问者来决定是否授予某个特性区的访问权。\n你可以只对已认证过的用户或具有特定角色的用户授予访问权，还可以阻止或限制用户访问权，直到用户账户激活为止。</p><p translation-origin=\"off\">Applications often restrict access to a feature area based on who the user is.\nYou could permit access only to authenticated users or to users with a specific role.\nYou might block or limit access until the user's account is activated.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫是一个管理这些导航类业务规则的工具。</p><p translation-origin=\"off\">The <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> guard is the tool to manage these navigation business rules.</p>\n\n<h4 id=\"add-an-admin-feature-module\" translation-result=\"on\">添加一个“管理”特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-an-admin-feature-module\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"add-an-admin-feature-module\">Add an admin feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-an-admin-feature-module\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">本节将指导你使用一些新的管理功能来扩展危机中心。首先添加一个名为 <code>AdminModule</code> 的新特性模块。</p><p translation-origin=\"off\">This section guides you through extending the crisis center with some new administrative features.\nStart by adding a new feature module named <code>AdminModule</code>.</p>\n\n<p translation-result=\"on\">生成一个带有特性模块文件和路由配置文件的 <code>admin</code> 目录。</p><p translation-origin=\"off\">Generate an <code>admin</code> folder with a feature module file and a routing configuration file.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate module admin --routing\n</code-example>\n<p translation-result=\"on\">接下来，生成一些支持性组件。</p><p translation-origin=\"off\">Next, generate the supporting components.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component admin/admin-dashboard\n</code-example>\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component admin/admin\n</code-example>\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component admin/manage-crises\n</code-example>\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component admin/manage-heroes\n</code-example>\n<p translation-result=\"on\">管理特性区的文件是这样的：</p><p translation-origin=\"off\">The admin feature file structure looks like this:</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    src/app/admin</p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      admin\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          admin.component.css\n        </div>\n        <div class=\"file\">\n          admin.component.html\n        </div>\n        <div class=\"file\">\n          admin.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      admin-dashboard\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          admin-dashboard.component.css\n        </div>\n        <div class=\"file\">\n          admin-dashboard.component.html\n        </div>\n        <div class=\"file\">\n          admin-dashboard.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      manage-crises\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          manage-crises.component.css\n        </div>\n        <div class=\"file\">\n          manage-crises.component.html\n        </div>\n        <div class=\"file\">\n          manage-crises.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      manage-heroes\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          manage-heroes.component.css\n        </div>\n        <div class=\"file\">\n          manage-heroes.component.html\n        </div>\n        <div class=\"file\">\n          manage-heroes.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      admin.module.ts\n    </div>\n    <div class=\"file\">\n      admin-routing.module.ts\n    </div>\n  </div>\n</div>\n<p translation-result=\"on\">管理特性模块包含 <code>AdminComponent</code>，它用于在特性模块内的仪表盘路由以及两个尚未完成的用于管理危机和英雄的组件之间进行路由。</p><p translation-origin=\"off\">The admin feature module contains the <code>AdminComponent</code> used for routing within the\nfeature module, a dashboard route and two unfinished components to manage crises and heroes.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/admin/admin/admin.component.html\" path=\"router/src/app/admin/admin/admin.component.html\">\n&#x3C;h3>ADMIN&#x3C;/h3>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"\n    [routerLinkActiveOptions]=\"{ exact: true }\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./crises\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Manage Crises&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Manage Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-pane>\n\n  <code-pane header=\"src/app/admin/admin-dashboard/admin-dashboard.component.html\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.1.html\">\n&#x3C;p>Dashboard&#x3C;/p>\n\n</code-pane>\n\n  <code-pane header=\"src/app/admin/admin.module.ts\" path=\"router/src/app/admin/admin.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\n\nimport { AdminComponent }           from './admin/admin.component';\nimport { AdminDashboardComponent }  from './admin-dashboard/admin-dashboard.component';\nimport { ManageCrisesComponent }    from './manage-crises/manage-crises.component';\nimport { ManageHeroesComponent }    from './manage-heroes/manage-heroes.component';\n\nimport { AdminRoutingModule }       from './admin-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    AdminRoutingModule\n  ],\n  declarations: [\n    AdminComponent,\n    AdminDashboardComponent,\n    ManageCrisesComponent,\n    ManageHeroesComponent\n  ]\n})\nexport class AdminModule {}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/admin/manage-crises/manage-crises.component.html\" path=\"router/src/app/admin/manage-crises/manage-crises.component.html\">\n&#x3C;p>Manage your crises here&#x3C;/p>\n\n</code-pane>\n\n  <code-pane header=\"src/app/admin/manage-heroes/manage-heroes.component.html\" path=\"router/src/app/admin/manage-heroes/manage-heroes.component.html\">\n&#x3C;p>Manage your heroes here&#x3C;/p>\n\n</code-pane>\n\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">虽然管理仪表盘中的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 只包含一个没有其它 URL 段的斜杠 <code>/</code>，但它能匹配管理特性区下的任何路由。\n但你只希望在访问 <code>Dashboard</code> 路由时才激活该链接。\n往 <code>Dashboard</code> 这个 routerLink 上添加另一个绑定 <code>[routerLinkActiveOptions]=\"{ exact: true }\"</code>，\n这样就只有当用户导航到 <code>/admin</code> 这个 URL 时才会激活它，而不会在导航到它的某个子路由时。</p><p translation-origin=\"off\">Although the admin dashboard <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> only contains a relative slash without an additional URL segment, it is a match to any route within the admin feature area.\nYou only want the <code>Dashboard</code> link to be active when the user visits that route.\nAdding an additional binding to the <code>Dashboard</code> routerLink,<code>[routerLinkActiveOptions]=\"{ exact: true }\"</code>, marks the <code>./</code> link as active when the user navigates to the <code>/admin</code> URL and not when navigating to any of the child routes.</p>\n\n</div>\n<a id=\"component-less-route\"></a>\n<h5 id=\"component-less-route-grouping-routes-without-a-component\" translation-result=\"on\">无组件路由：分组路由，而不需要组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#component-less-route-grouping-routes-without-a-component\"><i class=\"material-icons\">link</i></a></h5><h5 translation-origin=\"off\" id=\"component-less-route-grouping-routes-without-a-component\">Component-less route: grouping routes without a component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#component-less-route-grouping-routes-without-a-component\"><i class=\"material-icons\">link</i></a></h5>\n\n<p translation-result=\"on\">最初的管理路由配置如下：</p><p translation-origin=\"off\">The initial admin routing configuration:</p>\n\n<code-example path=\"router/src/app/admin/admin-routing.module.1.ts\" header=\"src/app/admin/admin-routing.module.ts (admin routing)\" region=\"admin-routes\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    children: [\n      {\n        path: '',\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p translation-result=\"on\"><code>AdminComponent</code> 下的子路由有一个 <code>path</code> 和一个 <code>children</code> 属性，但是它没有使用 <code>component</code>。这就定义了一个无<em>组件</em>路由。</p><p translation-origin=\"off\">The child route under the <code>AdminComponent</code> has a <code>path</code> and a <code>children</code> property but it's not using a <code>component</code>.\nThis defines a <em>component-less</em> route.</p>\n\n<p translation-result=\"on\">要把 <code>Crisis Center</code> 管理下的路由分组到 <code>admin</code> 路径下，组件是不必要的。此外，无<em>组件</em>路由可以更容易地<a href=\"guide/router#can-activate-child-guard\">保护子路由</a>。</p><p translation-origin=\"off\">To group the <code>Crisis Center</code> management routes under the <code>admin</code> path a component is unnecessary.\nAdditionally, a <em>component-less</em> route makes it easier to <a href=\"guide/router#can-activate-child-guard\">guard child routes</a>.</p>\n\n<p translation-result=\"on\">接下来，把 <code>AdminModule</code> 导入到 <code>app.module.ts</code> 中，并把它加入 <code>imports</code> 数组中来注册这些管理类路由。</p><p translation-origin=\"off\">Next, import the <code>AdminModule</code> into <code>app.module.ts</code> and add it to the <code>imports</code> array\nto register the admin routes.</p>\n\n<code-example path=\"router/src/app/app.module.4.ts\" header=\"src/app/app.module.ts (admin module)\" region=\"admin-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }            from './app.component';\nimport { PageNotFoundComponent }   from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule }        from './app-routing.module';\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { CrisisCenterModule }      from './crisis-center/crisis-center.module';\n\nimport { AdminModule }             from './admin/admin.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AdminModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p translation-result=\"on\">然后往壳组件 <code>AppComponent</code> 中添加一个链接，让用户能点击它，以访问该特性。</p><p translation-origin=\"off\">Add an \"Admin\" link to the <code>AppComponent</code> shell so that users can get to this feature.</p>\n\n<code-example path=\"router/src/app/app.component.5.html\" header=\"src/app/app.component.html (template)\">\n&#x3C;h1 class=\"title\">Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Admin&#x3C;/a>\n  &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\">Contact&#x3C;/a>\n&#x3C;/nav>\n&#x3C;div [@routeAnimation]=\"getAnimationData(routerOutlet)\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #routerOutlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<a id=\"guard-admin-feature\"></a>\n<h4 id=\"guard-the-admin-feature\" translation-result=\"on\">守护“管理特性”区<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#guard-the-admin-feature\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"guard-the-admin-feature\">Guard the admin feature<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#guard-the-admin-feature\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">现在危机中心的每个路由都是对所有人开放的。这些新的管理特性应该只能被已登录用户访问。</p><p translation-origin=\"off\">Currently, every route within the Crisis Center is open to everyone.\nThe new admin feature should be accessible only to authenticated users.</p>\n\n<p translation-result=\"on\">编写一个 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 守卫，将正在尝试访问管理组件匿名用户重定向到登录页。</p><p translation-origin=\"off\">Write a <code>canActivate()</code> guard method to redirect anonymous users to the\nlogin page when they try to enter the admin area.</p>\n\n<p translation-result=\"on\">在 <code>auth</code> 文件夹中生成一个 <code>AuthGuard</code>。</p><p translation-origin=\"off\">Generate an <code>AuthGuard</code> in the <code>auth</code> folder.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate guard auth/auth\n</code-example>\n<p translation-result=\"on\">为了演示这些基础知识，这个例子只把日志写到控制台中，立即 <code>return</code> true，并允许继续导航：</p><p translation-origin=\"off\">To demonstrate the fundamentals, this example only logs to the console, <code>returns</code> true immediately, and allows navigation to proceed:</p>\n\n<code-example path=\"router/src/app/auth/auth.guard.1.ts\" header=\"src/app/auth/auth.guard.ts (excerpt)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> } from '@angular/router';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> {\n  canActivate(\n    next: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    console.log('AuthGuard#canActivate called');\n    return true;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">接下来，打开 <code>admin-routing.module.ts</code>，导入 <code>AuthGuard</code> 类，修改管理路由并通过 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 守卫来引用 <code>AuthGuard</code>：</p><p translation-origin=\"off\">Next, open <code>admin-routing.module.ts</code>, import the <code>AuthGuard</code> class, and\nupdate the admin route with a <code>canActivate</code> guard property that references it:</p>\n\n<code-example path=\"router/src/app/admin/admin-routing.module.2.ts\" header=\"src/app/admin/admin-routing.module.ts (guarded admin route)\" region=\"admin-route\">\nimport { AuthGuard }                from '../auth/auth.guard';\n\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ],\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p translation-result=\"on\">管理特性区现在受此守卫保护了，不过该守卫还需要做进一步定制。</p><p translation-origin=\"off\">The admin feature is now protected by the guard, but the guard requires more customization to work fully.</p>\n\n<a id=\"teach-auth\"></a>\n<h4 id=\"authenticate-with-authguard\" translation-result=\"on\">通过 <code>AuthGuard</code> 验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#authenticate-with-authguard\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"authenticate-with-authguard\">Authenticate with <code>AuthGuard</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#authenticate-with-authguard\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">让 <code>AuthGuard</code> 模拟身份验证。</p><p translation-origin=\"off\">Make the <code>AuthGuard</code> mimic authentication.</p>\n\n<p translation-result=\"on\"><code>AuthGuard</code> 可以调用应用中的一项服务，该服务能让用户登录，并且保存当前用户的信息。在 <code>admin</code> 目录下生成一个新的 <code>AuthService</code>：</p><p translation-origin=\"off\">The <code>AuthGuard</code> should call an application service that can login a user and retain information about the current user. Generate a new <code>AuthService</code> in the <code>auth</code> folder:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate service auth/auth\n</code-example>\n<p translation-result=\"on\">修改 <code>AuthService</code> 以登入此用户：</p><p translation-origin=\"off\">Update the <code>AuthService</code> to log in the user:</p>\n\n<code-example path=\"router/src/app/auth/auth.service.ts\" header=\"src/app/auth/auth.service.ts (excerpt)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthService {\n  isLoggedIn = false;\n\n  // store the URL so we can redirect after logging in\n  redirectUrl: string;\n\n  login(): Observable&#x3C;boolean> {\n    return of(true).pipe(\n      delay(1000),\n      tap(val => this.isLoggedIn = true)\n    );\n  }\n\n  logout(): void {\n    this.isLoggedIn = false;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">虽然不会真的进行登录，但它有一个 <code>isLoggedIn</code> 标志，用来标识是否用户已经登录过了。\n它的 <code>login()</code> 方法会仿真一个对外部服务的 API 调用，返回一个可观察对象（observable）。在短暂的停顿之后，这个可观察对象就会解析成功。\n<code>redirectUrl</code> 属性将会保存在用户要访问的 URL 中，以便认证完之后导航到它。</p><p translation-origin=\"off\">Although it doesn't actually log in, it has an <code>isLoggedIn</code> flag to tell you whether the user is authenticated.\nIts <code>login()</code> method simulates an API call to an external service by returning an observable that resolves successfully after a short pause.\nThe <code>redirectUrl</code> property stores the URL that the user wanted to access so you can navigate to it after authentication.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">为了保持最小化，这个例子会将未经身份验证的用户重定向到 <code>/admin</code>。</p><p translation-origin=\"off\">To keep things minimal, this example redirects unauthenticated users to <code>/admin</code>.</p>\n\n</div>\n<p translation-result=\"on\">修改 <code>AuthGuard</code> 以调用 <code>AuthService</code>。</p><p translation-origin=\"off\">Revise the <code>AuthGuard</code> to call the <code>AuthService</code>.</p>\n\n<code-example path=\"router/src/app/auth/auth.guard.2.ts\" header=\"src/app/auth/auth.guard.ts (v2)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> } from '@angular/router';\n\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(\n    next: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  checkLogin(url: string): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Redirect to the login page\n    return this.router.parseUrl('/login');\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">注意，你把 <code>AuthService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务注入到了构造函数中。\n你还没有提供 <code>AuthService</code>，这里要说明的是：可以往路由守卫中注入有用的服务。</p><p translation-origin=\"off\">Notice that you inject the <code>AuthService</code> and the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> in the constructor.\nYou haven't provided the <code>AuthService</code> yet but it's good to know that you can inject helpful services into routing guards.</p>\n\n<p translation-result=\"on\">该守卫返回一个同步的布尔值。如果用户已经登录，它就返回 <code>true</code>，导航会继续。</p><p translation-origin=\"off\">This guard returns a synchronous boolean result.\nIf the user is logged in, it returns true and the navigation continues.</p>\n\n<p translation-result=\"on\">这个 <code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code> 包含了<em>即将</em>被激活的路由，而 <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> 包含了该应用<em>即将</em>到达的状态。\n你应该通过守卫进行检查。</p><p translation-origin=\"off\">The <code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code> contains the <em>future</em> route that will be activated and the <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> contains the <em>future</em> <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> of the application, should you pass through the guard check.</p>\n\n<p translation-result=\"on\">如果用户还没有登录，你就会用 <code><a href=\"api/router/RouterStateSnapshot#url\" class=\"code-anchor\">RouterStateSnapshot.url</a></code> 保存用户来自的 URL 并让路由器跳转到登录页（你尚未创建该页）。\n这间接导致路由器自动中止了这次导航，<code>checkLogin()</code> 返回 <code>false</code> 并不是必须的，但这样可以更清楚的表达意图。</p><p translation-origin=\"off\">If the user is not logged in, you store the attempted URL the user came from using the <code><a href=\"api/router/RouterStateSnapshot#url\" class=\"code-anchor\">RouterStateSnapshot.url</a></code> and tell the router to redirect to a login page—a page you haven't created yet.\nReturning a <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to cancel the current navigation and schedule a new one to redirect the user.</p>\n\n<a id=\"add-login-component\"></a>\n<h4 id=\"add-the-logincomponent\" translation-result=\"on\">添加 <code>LoginComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-the-logincomponent\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"add-the-logincomponent\">Add the <code>LoginComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#add-the-logincomponent\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你需要一个 <code>LoginComponent</code> 来让用户登录进这个应用。在登录之后，你就会跳转到前面保存的 URL，如果没有，就跳转到默认 URL。\n该组件没有什么新内容，你在路由配置中使用它的方式也没什么新意。</p><p translation-origin=\"off\">You need a <code>LoginComponent</code> for the user to log in to the app. After logging in, you'll redirect to the stored URL if available, or use the default URL.\nThere is nothing new about this component or the way you use it in the router configuration.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate component auth/login\n</code-example>\n<p translation-result=\"on\">在 <code>auth/auth-routing.module.ts</code> 文件中注册一个 <code>/login</code> 路由。在 <code>app.module.ts</code> 中，导入 <code>AuthModule</code> 并且添加到 <code>AppModule</code> 的 <code>imports</code> 中。</p><p translation-origin=\"off\">Register a <code>/login</code> route in the <code>auth/auth-routing.module.ts</code>.\nIn <code>app.module.ts</code>, import and add the <code>AuthModule</code> to the <code>AppModule</code> imports.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.ts\" region=\"auth\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent }            from './app.component';\nimport { PageNotFoundComponent }   from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule }        from './app-routing.module';\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { AuthModule }              from './auth/auth.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AuthModule,\n    AppRoutingModule,\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n\n  <code-pane header=\"src/app/auth/login/login.component.html\" path=\"router/src/app/auth/login/login.component.html\">\n&#x3C;h2>LOGIN&#x3C;/h2>\n&#x3C;p>{{message}}&#x3C;/p>\n&#x3C;p>\n  &#x3C;button (click)=\"login()\"  *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!authService.isLoggedIn\">Login&#x3C;/button>\n  &#x3C;button (click)=\"logout()\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"authService.isLoggedIn\">Logout&#x3C;/button>\n&#x3C;/p>\n\n</code-pane>\n\n  <code-pane header=\"src/app/auth/login/login.component.ts\" path=\"router/src/app/auth/login/login.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  message: string;\n\n  constructor(public authService: AuthService, public router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    this.setMessage();\n  }\n\n  setMessage() {\n    this.message = 'Logged ' + (this.authService.isLoggedIn ? 'in' : 'out');\n  }\n\n  login() {\n    this.message = 'Trying to log in ...';\n\n    this.authService.login().subscribe(() => {\n      this.setMessage();\n      if (this.authService.isLoggedIn) {\n        // Usually you would use the redirect URL from the auth service.\n        // However to keep the example simple, we will always redirect to `/admin`.\n        const redirectUrl = '/admin';\n\n        // Redirect the user\n        this.router.navigate([redirectUrl]);\n      }\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n    this.setMessage();\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/auth/auth.module.ts\" path=\"router/src/app/auth/auth.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { LoginComponent }    from './login/login.component';\nimport { AuthRoutingModule } from './auth-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AuthRoutingModule\n  ],\n  declarations: [\n    LoginComponent\n  ]\n})\nexport class AuthModule {}\n\n</code-pane>\n\n</code-tabs>\n<a id=\"can-activate-child-guard\"></a>\n<h3 id=\"canactivatechild-guarding-child-routes\" translation-result=\"on\"><code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code>：保护子路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canactivatechild-guarding-child-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"canactivatechild-guarding-child-routes\"><code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code>: guarding child routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canactivatechild-guarding-child-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你还可以使用 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫来保护子路由。\n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫和 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫很像。\n它们的区别在于，<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 会在<em>任何子路由</em>被激活之前运行。</p><p translation-origin=\"off\">You can also protect child routes with the <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> guard.\nThe <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> guard is similar to the <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> guard.\nThe key difference is that it runs before any child route is activated.</p>\n\n<p translation-result=\"on\">你要保护管理特性模块，防止它被非授权访问，还要保护这个特性模块<em>内部</em>的那些子路由。</p><p translation-origin=\"off\">You protected the admin feature module from unauthorized access.\nYou should also protect child routes <em>within</em> the feature module.</p>\n\n<p translation-result=\"on\">扩展 <code>AuthGuard</code> 以便在 <code>admin</code> 路由之间导航时提供保护。\n打开 <code>auth.guard.ts</code> 并从路由库中导入 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 接口。</p><p translation-origin=\"off\">Extend the <code>AuthGuard</code> to protect when navigating between the <code>admin</code> routes.\nOpen <code>auth.guard.ts</code> and add the <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> interface to the imported tokens from the router package.</p>\n\n<p translation-result=\"on\">接下来，实现 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 方法，它所接收的参数与 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 方法一样：一个 <code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code> 和一个 <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code>。\n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 方法可以返回 <code>Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>></code> 或 <code>Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>></code> 来支持异步检查，或 <code>boolean</code> 或 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 来支持同步检查。\n这里返回的或者是 <code>true</code> 以便允许用户访问管理特性模块，或者是 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 以便把用户重定向到登录页：</p><p translation-origin=\"off\">Next, implement the <code>canActivateChild()</code> method which takes the same arguments as the <code>canActivate()</code> method: an <code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code> and <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code>.\nThe <code>canActivateChild()</code> method can return an <code>Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>></code> or <code>Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>></code> for async checks and a <code>boolean</code> or <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> for sync checks.\nThis one returns either <code>true</code> to allow the user to access the admin feature module or <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> to redirect the user to the login page instead:</p>\n\n<code-example path=\"router/src/app/auth/auth.guard.3.ts\" header=\"src/app/auth/auth.guard.ts (excerpt)\" region=\"can-activate-child\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>,\n  <a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    return this.canActivate(route, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>);\n  }\n\n/* . . . */\n}\n\n</code-example>\n<p translation-result=\"on\">同样把这个 <code>AuthGuard</code> 添加到“无组件的”管理路由，来同时保护它的所有子路由，而不是为每个路由单独添加这个 <code>AuthGuard</code>。</p><p translation-origin=\"off\">Add the same <code>AuthGuard</code> to the <code>component-less</code> admin route to protect all other child routes at one time\ninstead of adding the <code>AuthGuard</code> to each route individually.</p>\n\n<code-example path=\"router/src/app/admin/admin-routing.module.3.ts\" header=\"src/app/admin/admin-routing.module.ts (excerpt)\" region=\"can-activate-child\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        canActivateChild: [AuthGuard],\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<a id=\"can-deactivate-guard\"></a>\n<h3 id=\"candeactivate-handling-unsaved-changes\" translation-result=\"on\"><code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code>：处理未保存的更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#candeactivate-handling-unsaved-changes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"candeactivate-handling-unsaved-changes\"><code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code>: handling unsaved changes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#candeactivate-handling-unsaved-changes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">回到 “Heroes” 工作流，该应用会立即接受对英雄的每次更改，而不进行验证。</p><p translation-origin=\"off\">Back in the \"Heroes\" workflow, the app accepts every change to a hero immediately without validation.</p>\n\n<p translation-result=\"on\">在现实世界，你可能不得不积累来自用户的更改，跨字段验证，在服务器上验证，或者把变更保持在待定状态，直到用户确认这一组字段或取消并还原所有变更为止。</p><p translation-origin=\"off\">In the real world, you might have to accumulate the users changes, validate across fields, validate on the server, or hold changes in a pending state until the user confirms them as a group or cancels and reverts all changes.</p>\n\n<p translation-result=\"on\">当用户要导航离开时，你可以让用户自己决定该怎么处理这些未保存的更改。\n如果用户选择了取消，你就留下来，并允许更多改动。\n如果用户选择了确认，那就进行保存。</p><p translation-origin=\"off\">When the user navigates away, you can let the user decide what to do with unsaved changes.\nIf the user cancels, you'll stay put and allow more changes.\nIf the user approves, the app can save.</p>\n\n<p translation-result=\"on\">在保存成功之前，你还可以继续推迟导航。如果你让用户立即移到下一个界面，而保存却失败了（可能因为数据不符合有效性规则），你就会丢失该错误的上下文环境。</p><p translation-origin=\"off\">You still might delay navigation until the save succeeds.\nIf you let the user move to the next screen immediately and saving were to fail (perhaps the data is ruled invalid), you would lose the context of the error.</p>\n\n<p translation-result=\"on\">你需要用异步的方式等待，在服务器返回答复之前先停止导航。</p><p translation-origin=\"off\">You need to stop the navigation while you wait, asynchronously, for the server to return with its answer.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫能帮助你决定如何处理未保存的更改，以及如何处理。</p><p translation-origin=\"off\">The <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> guard helps you decide what to do with unsaved changes and how to proceed.</p>\n\n<a id=\"cancel-save\"></a>\n<h4 id=\"cancel-and-save\" translation-result=\"on\">取消与保存<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#cancel-and-save\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"cancel-and-save\">Cancel and save<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#cancel-and-save\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">用户在 <code>CrisisDetailComponent</code> 中更新危机信息。\n与 <code>HeroDetailComponent</code> 不同，用户的改动不会立即更新危机的实体对象。当用户按下了 Save 按钮时，应用就更新这个实体对象；如果按了 Cancel 按钮，那就放弃这些更改。</p><p translation-origin=\"off\">Users update crisis information in the <code>CrisisDetailComponent</code>.\nUnlike the <code>HeroDetailComponent</code>, the user changes do not update the crisis entity immediately.\nInstead, the app updates the entity when the user presses the Save button and discards the changes when the user presses the Cancel button.</p>\n\n<p translation-result=\"on\">这两个按钮都会在保存或取消之后导航回危机列表。</p><p translation-origin=\"off\">Both buttons navigate back to the crisis list after save or cancel.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (cancel and save methods)\" region=\"cancel-save\">\ncancel() {\n  this.gotoCrises();\n}\n\nsave() {\n  this.crisis.name = this.editName;\n  this.gotoCrises();\n}\n\n</code-example>\n<p translation-result=\"on\">在这种情况下，用户可以点击 heroes 链接，取消，按下浏览器后退按钮，或者不保存就离开。</p><p translation-origin=\"off\">In this scenario, the user could click the heroes link, cancel, push the browser back button, or navigate away without saving.</p>\n\n<p translation-result=\"on\">这个示例应用会弹出一个确认对话框，它会异步等待用户的响应，等用户给出一个明确的答复。</p><p translation-origin=\"off\">This example app asks the user to be explicit with a confirmation dialog box that waits asynchronously for the user's\nresponse.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你也可以用同步的方式等用户的答复，阻塞代码。但如果能用异步的方式等待用户的答复，应用就会响应性更好，还能同时做别的事。</p><p translation-origin=\"off\">You could wait for the user's answer with synchronous, blocking code, however, the app is more responsive—and can do other work—by waiting for the user's answer asynchronously.</p>\n\n</div>\n<p translation-result=\"on\">生成一个 <code>Dialog</code> 服务，以处理用户的确认操作。</p><p translation-origin=\"off\">Generate a <code>Dialog</code> service to handle user confirmation.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate service dialog\n</code-example>\n<p translation-result=\"on\">为 <code>DialogService</code> 添加一个 <code>confirm()</code> 方法，以提醒用户确认。<code>window.confirm</code> 是一个阻塞型操作，它会显示一个模态对话框，并等待用户的交互。</p><p translation-origin=\"off\">Add a <code>confirm()</code> method to the <code>DialogService</code> to prompt the user to confirm their intent.\nThe <code>window.confirm</code> is a blocking action that displays a modal dialog and waits for user interaction.</p>\n\n<code-example path=\"router/src/app/dialog.service.ts\" header=\"src/app/dialog.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn't use window.confirm\n */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&#x3C;boolean> {\n    const confirmation = window.confirm(message || 'Is it OK?');\n\n    return of(confirmation);\n  };\n}\n\n\n</code-example>\n<p translation-result=\"on\">它返回<em>observable</em>，当用户最终决定了如何去做时，它就会被<em>解析</em> —— 或者决定放弃更改直接导航离开（<code>true</code>），或者保留未完成的修改，留在危机编辑器中（<code>false</code>）。</p><p translation-origin=\"off\">It returns an <code>Observable</code> that resolves when the user eventually decides what to do: either to discard changes and navigate away (<code>true</code>) or to preserve the pending changes and stay in the crisis editor (<code>false</code>).</p>\n\n<a id=\"CanDeactivate\"></a>\n<p translation-result=\"on\">生成一个守卫（guard），以检查组件（任意组件均可）中是否存在 <code>canDeactivate()</code> 方法。</p><p translation-origin=\"off\">Generate a guard that checks for the presence of a <code>canDeactivate()</code> method in a component—any component.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate guard can-deactivate\n</code-example>\n<p translation-result=\"on\">把下面的代码粘贴到守卫中。</p><p translation-origin=\"off\">Paste the following code into your guard.</p>\n\n<code-example path=\"router/src/app/can-deactivate.guard.ts\" header=\"src/app/can-deactivate.guard.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }    from '@angular/core';\nimport { <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a> } from '@angular/router';\nimport { Observable }    from 'rxjs';\n\nexport interface CanComponentDeactivate {\n canDeactivate: () => Observable&#x3C;boolean> | Promise&#x3C;boolean> | boolean;\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&#x3C;CanComponentDeactivate> {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">守卫不需要知道哪个组件有 <code>deactivate</code> 方法，它可以检测 <code>CrisisDetailComponent</code> 组件有没有 <code>canDeactivate()</code> 方法并调用它。守卫在不知道任何组件 <code>deactivate</code> 方法细节的情况下，就能让这个守卫重复使用。</p><p translation-origin=\"off\">While the guard doesn't have to know which component has a deactivate method, it can detect that the <code>CrisisDetailComponent</code> component has the <code>canDeactivate()</code> method and call it.\nThe guard not knowing the details of any component's deactivation method makes the guard reusable.</p>\n\n<p translation-result=\"on\">另外，你也可以为 <code>CrisisDetailComponent</code> 创建一个特定的 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫。\n在需要访问外部信息时，<code>canDeactivate()</code> 方法为你提供了组件、<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> 的当前实例。\n如果只想为这个组件使用该守卫，并且需要获取该组件属性或确认路由器是否允许从该组件导航出去时，这会非常有用。</p><p translation-origin=\"off\">Alternatively, you could make a component-specific <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> guard for the <code>CrisisDetailComponent</code>.\nThe <code>canDeactivate()</code> method provides you with the current instance of the <code>component</code>, the current <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, and <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> in case you needed to access some external information.\nThis would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</p>\n\n<code-example path=\"router/src/app/can-deactivate.guard.1.ts\" header=\"src/app/can-deactivate.guard.ts (component-specific)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }           from '@angular/core';\nimport { Observable }           from 'rxjs';\nimport { <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>,\n         <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n         <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> }  from '@angular/router';\n\nimport { CrisisDetailComponent } from './crisis-center/crisis-detail/crisis-detail.component';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&#x3C;CrisisDetailComponent> {\n\n  canDeactivate(\n    component: CrisisDetailComponent,\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>\n  ): Observable&#x3C;boolean> | boolean {\n    // Get the Crisis Center ID\n    console.log(route.paramMap.get('id'));\n\n    // Get the current URL\n    console.log(state.url);\n\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!component.crisis || component.crisis.name === component.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return component.dialogService.confirm('Discard changes?');\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">看看 <code>CrisisDetailComponent</code> 组件，它已经实现了对未保存的更改进行确认的工作流。</p><p translation-origin=\"off\">Looking back at the <code>CrisisDetailComponent</code>, it implements the confirmation workflow for unsaved changes.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (excerpt)\" region=\"canDeactivate\">\ncanDeactivate(): Observable&#x3C;boolean> | boolean {\n  // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n  if (!this.crisis || this.crisis.name === this.editName) {\n    return true;\n  }\n  // Otherwise ask the user with the dialog service and return its\n  // observable which resolves to true or false when the user decides\n  return this.dialogService.confirm('Discard changes?');\n}\n\n</code-example>\n<p translation-result=\"on\">注意，<code>canDeactivate()</code> 方法可以同步返回;如果没有危机，或者没有待处理的更改，它会立即返回 <code>true</code>。但它也能返回一个 <code>Promise</code> 或一个 <code>Observable</code>，路由器也会等待它解析为真值（导航）或伪造（停留在当前路由上）。</p><p translation-origin=\"off\">Notice that the <code>canDeactivate()</code> method can return synchronously; it returns <code>true</code> immediately if there is no crisis or there are no pending changes.\nBut it can also return a <code>Promise</code> or an <code>Observable</code> and the router will wait for that to resolve to truthy (navigate) or falsy (stay on the current route).</p>\n\n<p translation-result=\"on\">往 <code>crisis-center.routing.module.ts</code> 的危机详情路由中用 <code>canDeactivate</code> 数组添加一个 <code>Guard</code>（守卫）。</p><p translation-origin=\"off\">Add the <code>Guard</code> to the crisis detail route in <code>crisis-center-routing.module.ts</code> using the <code>canDeactivate</code> array property.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.3.ts\" header=\"src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail/crisis-detail.component';\n\nimport { CanDeactivateGuard }    from '../can-deactivate.guard';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard]\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n\n</code-example>\n<p translation-result=\"on\">现在，你已经给了用户一个能保护未保存更改的安全守卫。</p><p translation-origin=\"off\">Now you have given the user a safeguard against unsaved changes.</p>\n\n<a id=\"Resolve\"></a>\n<a id=\"resolve-guard\"></a>\n<h3 id=\"resolve-pre-fetching-component-data\" translation-result=\"on\"><em>Resolve</em>: 预先获取组件数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#resolve-pre-fetching-component-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"resolve-pre-fetching-component-data\"><em>Resolve</em>: pre-fetching component data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#resolve-pre-fetching-component-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>Hero Detail</code> 和 <code>Crisis Detail</code> 中，它们等待路由读取完对应的英雄和危机。</p><p translation-origin=\"off\">In the <code>Hero Detail</code> and <code>Crisis Detail</code>, the app waited until the route was activated to fetch the respective hero or crisis.</p>\n\n<p translation-result=\"on\">如果你在使用真实 api，很有可能数据返回有延迟，导致无法即时显示。\n在这种情况下，直到数据到达前，显示一个空的组件不是最好的用户体验。</p><p translation-origin=\"off\">If you were using a real world API, there might be some delay before the data to display is returned from the server.\nYou don't want to display a blank component while waiting for the data.</p>\n\n<p translation-result=\"on\">最好使用解析器预先从服务器上获取完数据，这样在路由激活的那一刻数据就准备好了。\n还要在路由到此组件之前处理好错误。\n但当某个 <code>id</code> 无法对应到一个危机详情时，就没办法处理它。\n这时最好把用户带回到“危机列表”中，那里显示了所有有效的“危机”。</p><p translation-origin=\"off\">To improve this behavior, you can pre-fetch data from the server using a resolver so it's ready the\nmoment the route is activated.\nThis also allows you to handle errors before routing to the component.\nThere's no point in navigating to a crisis detail for an <code>id</code> that doesn't have a record.\nIt'd be better to send the user back to the <code>Crisis List</code> that shows only valid crisis centers.</p>\n\n<p translation-result=\"on\">总之，你希望的是只有当所有必要数据都已经拿到之后，才渲染这个路由组件。</p><p translation-origin=\"off\">In summary, you want to delay rendering the routed component until all necessary data has been fetched.</p>\n\n<a id=\"fetch-before-navigating\"></a>\n<h4 id=\"fetch-data-before-navigating\" translation-result=\"on\">导航前预先加载路由信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#fetch-data-before-navigating\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"fetch-data-before-navigating\">Fetch data before navigating<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#fetch-data-before-navigating\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">目前，<code>CrisisDetailComponent</code> 会接收选中的危机。\n如果该危机没有找到，路由器就会导航回危机列表视图。</p><p translation-origin=\"off\">At the moment, the <code>CrisisDetailComponent</code> retrieves the selected crisis.\nIf the crisis is not found, the router navigates back to the crisis list view.</p>\n\n<p translation-result=\"on\">如果能在该路由将要激活时提前处理了这个问题，那么用户体验会更好。\n<code>CrisisDetailResolver</code> 服务可以接收一个 <code>Crisis</code>，而如果这个 <code>Crisis</code> 不存在，就会在激活该路由并创建 <code>CrisisDetailComponent</code> 之前先行离开。</p><p translation-origin=\"off\">The experience might be better if all of this were handled first, before the route is activated.\nA <code>CrisisDetailResolver</code> service could retrieve a <code>Crisis</code> or navigate away, if the <code>Crisis</code> did not exist, <em>before</em> activating the route and creating the <code>CrisisDetailComponent</code>.</p>\n\n<p translation-result=\"on\">在 <code>Crisis Center</code> 特性区生成一个 <code>CrisisDetailResolver</code> 服务文件。</p><p translation-origin=\"off\">Generate a <code>CrisisDetailResolver</code> service file within the <code>Crisis Center</code> feature area.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate service crisis-center/crisis-detail-resolver\n</code-example>\n<code-example path=\"router/src/app/crisis-center/crisis-detail-resolver.service.1.ts\" header=\"src/app/crisis-center/crisis-detail-resolver.service.ts (generated)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CrisisDetailResolverService {\n\n  constructor() { }\n\n}\n\n\n</code-example>\n<p translation-result=\"on\">把 <code>CrisisDetailComponent.ngOnInit()</code> 中与危机检索有关的逻辑移到 <code>CrisisDetailResolverService</code> 中。\n导入 <code>Crisis</code> 模型、<code>CrisisService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 以便让你可以在找不到指定的危机时导航到别处。</p><p translation-origin=\"off\">Move the relevant parts of the crisis retrieval logic in <code>CrisisDetailComponent.ngOnInit()</code> into the <code>CrisisDetailResolverService</code>.\nImport the <code>Crisis</code> model, <code>CrisisService</code>, and the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> so you can navigate elsewhere if you can't fetch the crisis.</p>\n\n<p translation-result=\"on\">为了更明确一点，可以实现一个带有 <code>Crisis</code> 类型的 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 接口。</p><p translation-origin=\"off\">Be explicit and implement the <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> interface with a type of <code>Crisis</code>.</p>\n\n<p translation-result=\"on\">注入 <code>CrisisService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，并实现 <code>resolve()</code> 方法。\n该方法可以返回一个 <code>Promise</code>、一个 <code>Observable</code> 来支持异步方式，或者直接返回一个值来支持同步方式。</p><p translation-origin=\"off\">Inject the <code>CrisisService</code> and <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> and implement the <code>resolve()</code> method.\nThat method could return a <code>Promise</code>, an <code>Observable</code>, or a synchronous return value.</p>\n\n<p translation-result=\"on\"><code>CrisisService.getCrisis()</code> 方法返回一个可观察对象，以防止在数据获取完之前加载本路由。\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 守卫要求这个可观察对象必须可结束（<code>complete</code>），也就是说它已经发出了所有值。\n你可以为 <code>take</code> 操作符传入一个参数 <code>1</code>，以确保这个可观察对象会在从 <code>getCrisis</code> 方法所返回的可观察对象中取到第一个值之后就会结束。</p><p translation-origin=\"off\">The <code>CrisisService.getCrisis()</code> method returns an observable in order to prevent the route from loading until the data is fetched.\nThe <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> guards require an observable to <code>complete</code>, which means it has emitted all\nof its values.\nYou use the <code>take</code> operator with an argument of <code>1</code> to ensure that the <code>Observable</code> completes after retrieving the first value from the Observable returned by the <code>getCrisis()</code> method.</p>\n\n<p translation-result=\"on\">如果它没有返回有效的 <code>Crisis</code>，就会返回一个 <code>Observable</code>，以取消以前到 <code>CrisisDetailComponent</code> 的在途导航，并把用户导航回 <code>CrisisListComponent</code>。修改后的 <code>resolver</code> 服务是这样的：</p><p translation-origin=\"off\">If it doesn't return a valid <code>Crisis</code>, then return an empty <code>Observable</code>, cancel the previous in-progress navigation to the <code>CrisisDetailComponent</code>, and navigate the user back to the <code>CrisisListComponent</code>.\nThe updated resolver service looks like this:</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-detail-resolver.service.ts\" header=\"src/app/crisis-center/crisis-detail-resolver.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }             from '@angular/core';\nimport {\n  <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>\n}                                 from '@angular/router';\nimport { Observable, of, EMPTY }  from 'rxjs';\nimport { mergeMap, take }         from 'rxjs/operators';\n\nimport { CrisisService }  from './crisis.service';\nimport { Crisis } from './crisis';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CrisisDetailResolverService implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&#x3C;Crisis> {\n  constructor(private cs: CrisisService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&#x3C;Crisis> | Observable&#x3C;never> {\n    let id = route.paramMap.get('id');\n\n    return this.cs.getCrisis(id).pipe(\n      take(1),\n      mergeMap(crisis => {\n        if (crisis) {\n          return of(crisis);\n        } else { // id not found\n          this.router.navigate(['/crisis-center']);\n          return EMPTY;\n        }\n      })\n    );\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">把这个解析器（resolver）导入到 <code>crisis-center-routing.module.ts</code> 中，并往 <code>CrisisDetailComponent</code> 的路由配置中添加一个 <code>resolve</code> 对象。</p><p translation-origin=\"off\">Import this resolver in the <code>crisis-center-routing.module.ts</code> and add a <code>resolve</code> object to the <code>CrisisDetailComponent</code> route configuration.</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\" header=\"src/app/crisis-center/crisis-center-routing.module.ts (resolver)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail/crisis-detail.component';\n\nimport { CanDeactivateGuard }             from '../can-deactivate.guard';\nimport { CrisisDetailResolverService }    from './crisis-detail-resolver.service';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard],\n            resolve: {\n              crisis: CrisisDetailResolverService\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<p translation-result=\"on\"><code>CrisisDetailComponent</code> 不应该再去获取这个危机的详情。\n你只要重新配置路由，就可以修改从哪里获取危机的详情。\n把 <code>CrisisDetailComponent</code> 改成从 <code>ActivatedRoute.data.crisis</code> 属性中获取危机详情，这正是你重新配置路由的恰当时机。</p><p translation-origin=\"off\">The <code>CrisisDetailComponent</code> should no longer fetch the crisis.\nWhen you re-configured the route, you changed where the crisis is.\nUpdate the <code>CrisisDetailComponent</code> to get the crisis from the  <code>ActivatedRoute.data.crisis</code> property instead;</p>\n\n<code-example path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (ngOnInit v2)\" region=\"ngOnInit\">\nngOnInit() {\n  this.route.data\n    .subscribe((data: { crisis: Crisis }) => {\n      this.editName = data.crisis.name;\n      this.crisis = data.crisis;\n    });\n}\n\n</code-example>\n<p translation-result=\"on\">注意以下三个要点：</p><p translation-origin=\"off\">Note the following three important points:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">路由器的这个 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 接口是可选的。<code>CrisisDetailResolverService</code> 没有继承自某个基类。路由器只要找到了这个方法，就会调用它。</p><p translation-origin=\"off\">The router's <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> interface is optional.\nThe <code>CrisisDetailResolverService</code> doesn't inherit from a base class.\nThe router looks for that method and calls it if found.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">路由器会在用户可以导航的任何情况下调用该解析器，这样你就不用针对每个用例都编写代码了。</p><p translation-origin=\"off\">The router calls the resolver in any case where the the user could navigate away so you don't have to code for each use case.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在任何一个解析器中返回空的 <code>Observable</code> 就会取消导航。</p><p translation-origin=\"off\">Returning an empty <code>Observable</code> in at least one resolver will cancel navigation.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">与里程碑相关的危机中心代码如下。</p><p translation-origin=\"off\">The relevant Crisis Center code for this milestone follows.</p>\n\n<code-tabs>\n\n  <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.html\">\n&#x3C;h1 class=\"title\">Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Admin&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Login&#x3C;/a>\n  &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\">Contact&#x3C;/a>\n&#x3C;/nav>\n&#x3C;div [@routeAnimation]=\"getAnimationData(routerOutlet)\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #routerOutlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-pane>\n\n  <code-pane header=\"crisis-center-home.component.html\" path=\"router/src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\">\n&#x3C;p>Welcome to the Crisis Center&#x3C;/p>\n\n</code-pane>\n\n  <code-pane header=\"crisis-center.component.html\" path=\"router/src/app/crisis-center/crisis-center/crisis-center.component.html\">\n&#x3C;h2>CRISIS CENTER&#x3C;/h2>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-pane>\n\n  <code-pane header=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail/crisis-detail.component';\n\nimport { CanDeactivateGuard }             from '../can-deactivate.guard';\nimport { CrisisDetailResolverService }    from './crisis-detail-resolver.service';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard],\n            resolve: {\n              crisis: CrisisDetailResolverService\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n\n  <code-pane header=\"crisis-list.component.html\" path=\"router/src/app/crisis-center/crisis-list/crisis-list.component.html\">\n&#x3C;ul class=\"crises\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let crisis of crises$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\"\n    [class.selected]=\"crisis.id === selectedId\">\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[crisis.id]\">\n      &#x3C;span class=\"badge\">{{ crisis.id }}&#x3C;/span>{{ crisis.name }}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-pane>\n\n  <code-pane header=\"crisis-list.component.ts\" path=\"router/src/app/crisis-center/crisis-list/crisis-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }  from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> }     from '@angular/router';\n\nimport { CrisisService }  from '../crisis.service';\nimport { Crisis }         from '../crisis';\nimport { Observable }     from 'rxjs';\nimport { switchMap }      from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-crisis-list',\n  templateUrl: './crisis-list.component.html',\n  styleUrls: ['./crisis-list.component.css']\n})\nexport class CrisisListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crises$: Observable&#x3C;Crisis[]>;\n  selectedId: number;\n\n  constructor(\n    private service: CrisisService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.crises$ = this.route.paramMap.pipe(\n      switchMap(params => {\n        this.selectedId = +params.get('id');\n        return this.service.getCrises();\n      })\n    );\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"crisis-detail.component.html\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"crisis\">\n  &#x3C;h3>\"{{ editName }}\"&#x3C;/h3>\n  &#x3C;div>\n    &#x3C;label>Id: &#x3C;/label>{{ crisis.id }}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>Name: &#x3C;/label>\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"editName\" placeholder=\"name\"/>\n  &#x3C;/div>\n  &#x3C;p>\n    &#x3C;button (click)=\"save()\">Save&#x3C;/button>\n    &#x3C;button (click)=\"cancel()\">Cancel&#x3C;/button>\n  &#x3C;/p>\n&#x3C;/div>\n\n</code-pane>\n\n  <code-pane header=\"crisis-detail.component.ts\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Crisis }         from '../crisis';\nimport { DialogService }  from '../../dialog.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-crisis-detail',\n  templateUrl: './crisis-detail.component.html',\n  styleUrls: ['./crisis-detail.component.css']\n})\nexport class CrisisDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crisis: Crisis;\n  editName: string;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    public dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe((data: { crisis: Crisis }) => {\n        this.editName = data.crisis.name;\n        this.crisis = data.crisis;\n      });\n  }\n\n  cancel() {\n    this.gotoCrises();\n  }\n\n  save() {\n    this.crisis.name = this.editName;\n    this.gotoCrises();\n  }\n\n  canDeactivate(): Observable&#x3C;boolean> | boolean {\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!this.crisis || this.crisis.name === this.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return this.dialogService.confirm('Discard changes?');\n  }\n\n  gotoCrises() {\n    let crisisId = this.crisis ? this.crisis.id : null;\n    // Pass along the crisis id if available\n    // so that the CrisisListComponent can select that crisis.\n    // Add a totally useless `foo` parameter for kicks.\n    // Relative navigation back to the crises\n    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"crisis-detail-resolver.service.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }             from '@angular/core';\nimport {\n  <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>\n}                                 from '@angular/router';\nimport { Observable, of, EMPTY }  from 'rxjs';\nimport { mergeMap, take }         from 'rxjs/operators';\n\nimport { CrisisService }  from './crisis.service';\nimport { Crisis } from './crisis';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CrisisDetailResolverService implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&#x3C;Crisis> {\n  constructor(private cs: CrisisService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&#x3C;Crisis> | Observable&#x3C;never> {\n    let id = route.paramMap.get('id');\n\n    return this.cs.getCrisis(id).pipe(\n      take(1),\n      mergeMap(crisis => {\n        if (crisis) {\n          return of(crisis);\n        } else { // id not found\n          this.router.navigate(['/crisis-center']);\n          return EMPTY;\n        }\n      })\n    );\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"crisis.service.ts\" path=\"router/src/app/crisis-center/crisis.service.ts\">\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Crisis } from './crisis';\nimport { CRISES } from './mock-crises';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CrisisService {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> nextCrisisId = 100;\n  private crises$: BehaviorSubject&#x3C;Crisis[]> = new BehaviorSubject&#x3C;Crisis[]>(CRISES);\n\n  constructor(private messageService: MessageService) { }\n\n  getCrises() { return this.crises$; }\n\n  getCrisis(id: number | string) {\n    return this.getCrises().pipe(\n      map(crises => crises.find(crisis => crisis.id === +id))\n    );\n  }\n\n}\n\n\n</code-pane>\n\n  <code-pane header=\"dialog.service.ts\" path=\"router/src/app/dialog.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn't use window.confirm\n */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&#x3C;boolean> {\n    const confirmation = window.confirm(message || 'Is it OK?');\n\n    return of(confirmation);\n  };\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">路由守卫</p><p translation-origin=\"off\">Guards</p>\n\n<code-tabs>\n\n  <code-pane header=\"auth.guard.ts\" path=\"router/src/app/auth/auth.guard.3.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>,\n  <a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    return this.canActivate(route, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>);\n  }\n\n  checkLogin(url: string): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Redirect to the login page\n    return this.router.parseUrl('/login');\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"can-deactivate.guard.ts\" path=\"router/src/app/can-deactivate.guard.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }    from '@angular/core';\nimport { <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a> } from '@angular/router';\nimport { Observable }    from 'rxjs';\n\nexport interface CanComponentDeactivate {\n canDeactivate: () => Observable&#x3C;boolean> | Promise&#x3C;boolean> | boolean;\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&#x3C;CanComponentDeactivate> {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"query-parameters\"></a>\n<a id=\"fragment\"></a>\n<h3 id=\"query-parameters-and-fragments\" translation-result=\"on\">查询参数及片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"query-parameters-and-fragments\">Query parameters and fragments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在<a href=\"guide/router#optional-route-parameters\">路由参数</a>部分，你只需要处理该路由的专属参数。但是，你也可以用查询参数来获取对所有路由都可用的可选参数。</p><p translation-origin=\"off\">In the <a href=\"guide/router#optional-route-parameters\">route parameters</a> section, you only dealt with parameters specific to the route.\nHowever, you can use query parameters to get optional parameters available to all routes.</p>\n\n<p translation-result=\"on\"><a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\">片段</a>可以引用页面中带有特定 <code>id</code> 属性的元素.</p><p translation-origin=\"off\"><a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\">Fragments</a> refer to certain elements on the page\nidentified with an <code>id</code> attribute.</p>\n\n<p translation-result=\"on\">修改 <code>AuthGuard</code> 以提供 <code>session_id</code> 查询参数，在导航到其它路由后，它还会存在。</p><p translation-origin=\"off\">Update the <code>AuthGuard</code> to provide a <code>session_id</code> query that will remain after navigating to another route.</p>\n\n<p translation-result=\"on\">再添加一个锚点（<code>A</code>）元素，来让你能跳转到页面中的正确位置。</p><p translation-origin=\"off\">Add an <code>anchor</code> element so you can jump to a certain point on the page.</p>\n\n<p translation-result=\"on\">为 <code>router.navigate()</code> 方法添加一个 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> 对象，用来导航到 <code>/login</code> 路由。</p><p translation-origin=\"off\">Add the <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> object to the <code>router.navigate()</code> method that navigates you to the <code>/login</code> route.</p>\n\n<code-example path=\"router/src/app/auth/auth.guard.4.ts\" header=\"src/app/auth/auth.guard.ts (v3)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>,\n  <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a>,\n  <a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    return this.canActivate(route, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>);\n  }\n\n  checkLogin(url: string): true|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Create a dummy session id\n    let sessionId = 123456789;\n\n    // Set our navigation extras object\n    // that contains our <a href=\"api/core/global\" class=\"code-anchor\">global</a> <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\n    let navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n      queryParams: { 'session_id': sessionId },\n      fragment: 'anchor'\n    };\n\n    // Redirect to the login page with extras\n    return this.router.createUrlTree(['/login'], navigationExtras);\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">还可以在导航之间<strong>保留</strong>查询参数和片段，而无需再次在导航中提供。在 <code>LoginComponent</code> 中的 <code>router.navigateUrl()</code> 方法中，添加一个对象作为第二个参数，该<strong>对象</strong>提供了 <code>queryParamsHandling</code> 和 <code>preserveFragment</code>，用于传递当前的查询参数和片段到下一个路由。</p><p translation-origin=\"off\">You can also preserve query parameters and fragments across navigations without having to provide them again when navigating.\nIn the <code>LoginComponent</code>, you'll add an <em>object</em> as the second argument in the <code>router.navigateUrl()</code> function and provide the <code>queryParamsHandling</code> and <code>preserveFragment</code> to pass along the current query parameters and fragment to the next route.</p>\n\n<code-example path=\"router/src/app/auth/login/login.component.ts\" header=\"src/app/auth/login/login.component.ts (preserve)\" region=\"preserve\">\n// Set our navigation extras object\n// that passes on our <a href=\"api/core/global\" class=\"code-anchor\">global</a> <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\nlet navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n  queryParamsHandling: 'preserve',\n  preserveFragment: true\n};\n\n// Redirect the user\nthis.router.navigate([redirectUrl], navigationExtras);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>queryParamsHandling</code> 特性还提供了 <code>merge</code> 选项，它将会在导航时保留当前的查询参数，并与其它查询参数合并。</p><p translation-origin=\"off\">The <code>queryParamsHandling</code> feature also provides a <code>merge</code> option, which preserves and combines the current query parameters with any provided query parameters when navigating.</p>\n\n</div>\n<p translation-result=\"on\">要在登录后导航到 Admin Dashboard 路由，请更新 <code>admin-dashboard.component.ts</code> 以处理这些查询参数和片段。</p><p translation-origin=\"off\">To navigate to the Admin Dashboard route after logging in, update <code>admin-dashboard.component.ts</code> to handle the\nquery parameters and fragment.</p>\n\n<code-example path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.1.ts\" header=\"src/app/admin/admin-dashboard/admin-dashboard.component.ts (v2)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }  from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> }     from '@angular/router';\nimport { Observable }         from 'rxjs';\nimport { map }                from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId: Observable&#x3C;string>;\n  token: Observable&#x3C;string>;\n\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .pipe(map(params => params.get('session_id') || 'None'));\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .pipe(map(fragment => fragment || 'None'));\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">查询参数和片段可通过 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务的 <code>routerState</code> 属性使用。和路由参数类似，全局查询参数和片段也是 <code>Observable</code> 对象。\n在修改过的英雄管理组件中，你将借助 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 直接把 <code>Observable</code> 传给模板。</p><p translation-origin=\"off\">Query parameters and fragments are also available through the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> service.\nJust like route parameters, the query parameters and fragments are provided as an <code>Observable</code>.\nThe updated Crisis Admin component feeds the <code>Observable</code> directly into the template using the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>.</p>\n\n<p translation-result=\"on\">按照下列步骤试验下：点击 Admin 按钮，它会带着你提供的 <code>queryParamMap</code> 和 <code>fragment</code> 跳转到登录页。\n点击 Login 按钮，你就会被重定向到 <code>Admin Dashboard</code> 页。\n注意，它仍然带着上一步提供的 <code>queryParamMap</code> 和 <code>fragment</code>。</p><p translation-origin=\"off\">Now, you can click on the Admin button, which takes you to the Login page with the provided <code>queryParamMap</code> and <code>fragment</code>.\nAfter you click the login button, notice that you have been redirected to the <code>Admin Dashboard</code> page with the query parameters and fragment still intact in the address bar.</p>\n\n<p translation-result=\"on\">你可以用这些持久化信息来携带需要为每个页面都提供的信息，如认证令牌或会话的 ID 等。</p><p translation-origin=\"off\">You can use these persistent bits of information for things that need to be provided across pages like authentication tokens or session ids.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">“查询参数”和“片段”也可以分别用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 中的 <strong>queryParamsHandling</strong> 和 <strong>preserveFragment</strong> 保存。</p><p translation-origin=\"off\">The <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a> params</code> and <code>fragment</code> can also be preserved using a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> with\nthe <code>queryParamsHandling</code> and <code>preserveFragment</code> bindings respectively.</p>\n\n</div>\n<a id=\"asynchronous-routing\"></a>\n<h2 id=\"milestone-6-asynchronous-routing\" translation-result=\"on\">里程碑 6：异步路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-6-asynchronous-routing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"milestone-6-asynchronous-routing\">Milestone 6: Asynchronous routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#milestone-6-asynchronous-routing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">完成上面的里程碑后，应用程序很自然地长大了。在某一个时间点，你将达到一个顶点，应用将会需要过多的时间来加载。</p><p translation-origin=\"off\">As you've worked through the milestones, the application has naturally gotten larger.\nAt some point you'll reach a point where the application takes a long time to load.</p>\n\n<p translation-result=\"on\">为了解决这个问题，请使用异步路由，它会根据请求来惰性加载某些特性模块。惰性加载有很多好处。</p><p translation-origin=\"off\">To remedy this issue, use asynchronous routing, which loads feature modules lazily, on request.\nLazy loading has multiple benefits.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 你可以只在用户请求时才加载某些特性区。</p><p translation-origin=\"off\">You can load feature areas only when requested by the user.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 对于那些只访问应用程序某些区域的用户，这样能加快加载速度。</p><p translation-origin=\"off\">You can speed up load time for users that only visit certain areas of the application.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你可以持续扩充惰性加载特性区的功能，而不用增加初始加载的包体积。</p><p translation-origin=\"off\">You can continue expanding lazy loaded feature areas without increasing the size of the initial load bundle.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你已经完成了一部分。通过把应用组织成一些模块：<code>AppModule</code>、<code>HeroesModule</code>、<code>AdminModule</code> 和 <code>CrisisCenterModule</code>，\n你已经有了可用于实现惰性加载的候选者。</p><p translation-origin=\"off\">You're already part of the way there.\nBy organizing the application into modules—<code>AppModule</code>,\n<code>HeroesModule</code>, <code>AdminModule</code> and <code>CrisisCenterModule</code>—you\nhave natural candidates for lazy loading.</p>\n\n<p translation-result=\"on\">有些模块（比如 <code>AppModule</code>）必须在启动时加载，但其它的都可以而且应该惰性加载。\n比如 <code>AdminModule</code> 就只有少数已认证的用户才需要它，所以你应该只有在正确的人请求它时才加载。</p><p translation-origin=\"off\">Some modules, like <code>AppModule</code>, must be loaded from the start.\nBut others can and should be lazy loaded.\nThe <code>AdminModule</code>, for example, is needed by a few authorized users, so\nyou should only load it when requested by the right people.</p>\n\n<a id=\"lazy-loading-route-config\"></a>\n<h3 id=\"lazy-loading-route-configuration\" translation-result=\"on\">惰性加载路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-loading-route-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"lazy-loading-route-configuration\">Lazy Loading route configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-loading-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">把 <code>admin-routing.module.ts</code> 中的 <code>admin</code> 路径从 <code>'admin'</code> 改为空路径 <code>''</code>。</p><p translation-origin=\"off\">Change the <code>admin</code> path in the <code>admin-routing.module.ts</code> from <code>'admin'</code> to an empty string, <code>''</code>, the empty path.</p>\n\n<p translation-result=\"on\">可以用<em>空路径</em>路由来对路由进行分组，而不用往 URL 中添加额外的路径片段。\n用户仍旧访问 <code>/admin</code>，并且 <code>AdminComponent</code> 仍然作为用来包含子路由的路由组件。</p><p translation-origin=\"off\">Use empty path routes to group routes together without adding any additional path segments to the URL.\nUsers will still visit <code>/admin</code> and the <code>AdminComponent</code> still serves as the Routing Component containing child routes.</p>\n\n<p translation-result=\"on\">打开 <code>AppRoutingModule</code>，并把一个新的 <code>admin</code> 路由添加到它的 <code>appRoutes</code> 数组中。</p><p translation-origin=\"off\">Open the <code>AppRoutingModule</code> and add a new <code>admin</code> route to its <code>appRoutes</code> array.</p>\n\n<p translation-result=\"on\">给它一个 <code>loadChildren</code> 属性（替换掉 <code>children</code> 属性）。\n<code>loadChildren</code> 属性接收一个函数，该函数使用浏览器内置的动态导入语法 <code>import('...')</code> 来惰性加载代码，并返回一个承诺（Promise）。\n其路径是 <code>AdminModule</code> 的位置（相对于应用的根目录）。\n当代码请求并加载完毕后，这个 <code>Promise</code> 就会解析成一个包含 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的对象，也就是 <code>AdminModule</code>。</p><p translation-origin=\"off\">Give it a <code>loadChildren</code> property instead of a <code>children</code> property.\nThe <code>loadChildren</code> property takes a function that returns a promise using the browser's built-in syntax for lazy loading code using dynamic imports <code>import('...')</code>.\nThe path is the location of the <code>AdminModule</code> (relative to the app root).\nAfter the code is requested and loaded, the <code>Promise</code> resolves an object that contains the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>, in this case the <code>AdminModule</code>.</p>\n\n<code-example path=\"router/src/app/app-routing.module.5.ts\" region=\"admin-1\" header=\"app-routing.module.ts (load children)\">\n{\n  path: 'admin',\n  loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule),\n},\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>注意</strong>： 当使用绝对路径时，<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的文件位置必须以 <code>src/app</code> 开头，以便正确解析。对于自定义的 <a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\">使用绝对路径的路径映射表</a>，你必须在项目的 <code>tsconfig.json</code> 中必须配置好 <code>baseUrl</code> 和 <code>paths</code> 属性。</p><p translation-origin=\"off\"><em>Note</em>: When using absolute paths, the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> file location must begin with <code>src/app</code> in order to resolve correctly. For custom <a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\">path mapping with absolute paths</a>, you must configure the <code>baseUrl</code> and <code>paths</code> properties in the project <code>tsconfig.json</code>.</p>\n\n</div>\n<p translation-result=\"on\">当路由器导航到这个路由时，它会用 <code>loadChildren</code> 字符串来动态加载 <code>AdminModule</code>，然后把 <code>AdminModule</code> 添加到当前的路由配置中，\n最后，它把所请求的路由加载到目标 <code>admin</code> 组件中。</p><p translation-origin=\"off\">When the router navigates to this route, it uses the <code>loadChildren</code> string to dynamically load the <code>AdminModule</code>.\nThen it adds the <code>AdminModule</code> routes to its current route configuration.\nFinally, it loads the requested route to the destination admin component.</p>\n\n<p translation-result=\"on\">惰性加载和重新配置工作只会发生一次，也就是在该路由首次被请求时。在后续的请求中，该模块和路由都是立即可用的。</p><p translation-origin=\"off\">The lazy loading and re-configuration happen just once, when the route is first requested; the module and routes are available immediately for subsequent requests.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">Angular 提供一个内置模块加载器，支持<strong><code>SystemJS</code></strong>来异步加载模块。如果你使用其它捆绑工具比如 <strong>Webpack</strong>，则使用 Webpack 的机制来异步加载模块。</p><p translation-origin=\"off\">Angular provides a built-in module loader that supports SystemJS to load modules asynchronously. If you were\nusing another bundling tool, such as Webpack, you would use the Webpack mechanism for asynchronously loading modules.</p>\n\n</div>\n<p translation-result=\"on\">最后一步是把管理特性区从主应用中完全分离开。\n根模块 <code>AppModule</code> 既不能加载也不能引用 <code>AdminModule</code> 及其文件。</p><p translation-origin=\"off\">Take the final step and detach the admin feature set from the main application.\nThe root <code>AppModule</code> must neither load nor reference the <code>AdminModule</code> or its files.</p>\n\n<p translation-result=\"on\">在 <code>app.module.ts</code> 中，从顶部移除 <code>AdminModule</code> 的导入语句，并且从 NgModule 的 <code>imports</code> 数组中移除 <code>AdminModule</code>。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, remove the <code>AdminModule</code> import statement from the top of the file\nand remove the <code>AdminModule</code> from the NgModule's <code>imports</code> array.</p>\n\n<a id=\"can-load-guard\"></a>\n<h3 id=\"canload-guarding-unauthorized-loading-of-feature-modules\" translation-result=\"on\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code>：保护对特性模块的未授权加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canload-guarding-unauthorized-loading-of-feature-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"canload-guarding-unauthorized-loading-of-feature-modules\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code>: guarding unauthorized loading of feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canload-guarding-unauthorized-loading-of-feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你已经使用 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 保护 <code>AdminModule</code> 了，它会阻止未授权用户访问管理特性区。如果用户未登录，它就会跳转到登录页。</p><p translation-origin=\"off\">You're already protecting the <code>AdminModule</code> with a <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> guard that prevents unauthorized users from accessing the admin feature area.\nIt redirects to the login page if the user is not authorized.</p>\n\n<p translation-result=\"on\">但是路由器仍然会加载 <code>AdminModule</code> —— 即使用户无法访问它的任何一个组件。\n理想的方式是，只有在用户已登录的情况下你才加载 <code>AdminModule</code>。</p><p translation-origin=\"off\">But the router is still loading the <code>AdminModule</code> even if the user can't visit any of its components.\nIdeally, you'd only load the <code>AdminModule</code> if the user is logged in.</p>\n\n<p translation-result=\"on\">添加一个 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫，它只在用户已登录<em>并且</em>尝试访问管理特性区的时候，才加载 <code>AdminModule</code> 一次。</p><p translation-origin=\"off\">Add a <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guard that only loads the <code>AdminModule</code> once the user is logged in <em>and</em> attempts to access the admin feature area.</p>\n\n<p translation-result=\"on\">现有的 <code>AuthGuard</code> 的 <code>checkLogin()</code> 方法中已经有了支持 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫的基础逻辑。</p><p translation-origin=\"off\">The existing <code>AuthGuard</code> already has the essential logic in its <code>checkLogin()</code> method to support the <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guard.</p>\n\n<p translation-result=\"on\">打开 <code>auth.guard.ts</code>，从 <code>@angular/router</code> 中导入 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 接口。\n把它添加到 <code>AuthGuard</code> 类的 <code>implements</code> 列表中。\n然后实现 <code>canLoad</code>，代码如下：</p><p translation-origin=\"off\">Open <code>auth.guard.ts</code>.\nImport the <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> interface from <code>@angular/router</code>.\nAdd it to the <code>AuthGuard</code> class's <code>implements</code> list.\nThen implement <code>canLoad()</code> as follows:</p>\n\n<code-example path=\"router/src/app/auth/auth.guard.ts\" header=\"src/app/auth/auth.guard.ts (CanLoad guard)\" region=\"canLoad\">\ncanLoad(route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>): boolean {\n  let url = `/${route.path}`;\n\n  return this.checkLogin(url);\n}\n\n</code-example>\n<p translation-result=\"on\">路由器会把 <code>canLoad()</code> 方法的 <code>route</code> 参数设置为准备访问的目标 URL。\n如果用户已经登录了，<code>checkLogin()</code> 方法就会重定向到那个 URL。</p><p translation-origin=\"off\">The router sets the <code>canLoad()</code> method's <code>route</code> parameter to the intended destination URL.\nThe <code>checkLogin()</code> method redirects to that URL once the user has logged in.</p>\n\n<p translation-result=\"on\">现在，把 <code>AuthGuard</code> 导入到 <code>AppRoutingModule</code> 中，并把 <code>AuthGuard</code> 添加到 <code>admin</code> 路由的 <code>canLoad</code> 数组中。\n完整的 <code>admin</code> 路由是这样的：</p><p translation-origin=\"off\">Now import the <code>AuthGuard</code> into the <code>AppRoutingModule</code> and add the <code>AuthGuard</code> to the <code>canLoad</code>\narray property for the <code>admin</code> route.\nThe completed admin route looks like this:</p>\n\n<code-example path=\"router/src/app/app-routing.module.5.ts\" region=\"admin\" header=\"app-routing.module.ts (lazy admin route)\">\n{\n  path: 'admin',\n  loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule),\n  canLoad: [AuthGuard]\n},\n\n</code-example>\n<a id=\"preloading\"></a>\n<h3 id=\"preloading-background-loading-of-feature-areas\" translation-result=\"on\">预加载：特性区的后台加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#preloading-background-loading-of-feature-areas\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"preloading-background-loading-of-feature-areas\">Preloading: background loading of feature areas<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#preloading-background-loading-of-feature-areas\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">除了按需加载模块外，还可以通过预加载方式异步加载模块。</p><p translation-origin=\"off\">In addition to loading modules on-demand, you can load modules asynchronously with preloading.</p>\n\n<p translation-result=\"on\">当应用启动时，<code>AppModule</code> 被急性加载，这意味着它会立即加载。而 <code>AdminModule</code> 只在用户点击链接时加载，这叫做惰性加载。</p><p translation-origin=\"off\">The <code>AppModule</code> is eagerly loaded when the application starts, meaning that it loads right away.\nNow the <code>AdminModule</code> loads only when the user clicks on a link, which is called lazy loading.</p>\n\n<p translation-result=\"on\">预加载允许你在后台加载模块，以便当用户激活某个特定的路由时，就可以渲染这些数据了。\n考虑一下危机中心。\n它不是用户看到的第一个视图。\n默认情况下，英雄列表才是第一个视图。为了获得最小的初始有效负载和最快的启动时间，你应该急性加载 <code>AppModule</code> 和 <code>HeroesModule</code>。</p><p translation-origin=\"off\">Preloading allows you to load modules in the background so that the data is ready to render when the user activates a particular route.\nConsider the Crisis Center.\nIt isn't the first view that a user sees.\nBy default, the Heroes are the first view.\nFor the smallest initial payload and fastest launch time, you should eagerly load the <code>AppModule</code> and the <code>HeroesModule</code>.</p>\n\n<p translation-result=\"on\">你可以惰性加载危机中心。\n但是，你几乎可以肯定用户会在启动应用之后的几分钟内访问危机中心。\n理想情况下，应用启动时应该只加载 <code>AppModule</code> 和 <code>HeroesModule</code>，然后几乎立即开始后台加载 <code>CrisisCenterModule</code>。\n在用户浏览到危机中心之前，该模块应该已经加载完毕，可供访问了。</p><p translation-origin=\"off\">You could lazy load the Crisis Center.\nBut you're almost certain that the user will visit the Crisis Center within minutes of launching the app.\nIdeally, the app would launch with just the <code>AppModule</code> and the <code>HeroesModule</code> loaded and then, almost immediately, load the <code>CrisisCenterModule</code> in the background.\nBy the time the user navigates to the Crisis Center, its module will have been loaded and ready.</p>\n\n<a id=\"how-preloading\"></a>\n<h4 id=\"how-preloading-works\" translation-result=\"on\">预加载的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#how-preloading-works\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"how-preloading-works\">How preloading works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#how-preloading-works\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">在每次成功的导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。\n是否加载某个模块，以及要加载哪些模块，取决于<em>预加载策略</em>。</p><p translation-origin=\"off\">After each successful navigation, the router looks in its configuration for an unloaded module that it can preload.\nWhether it preloads a module, and which modules it preloads, depends upon the preload strategy.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 提供了两种预加载策略：</p><p translation-origin=\"off\">The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> offers two preloading strategies:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 完全不预加载，这是默认值。惰性加载的特性区仍然会按需加载。</p><p translation-origin=\"off\">No preloading, which is the default. Lazy loaded feature areas are still loaded on-demand.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 预加载所有惰性加载的特性区。</p><p translation-origin=\"off\">Preloading of all lazy loaded feature areas.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">路由器或者完全不预加载或者预加载每个惰性加载模块。\n路由器还支持<a href=\"guide/router#custom-preloading\">自定义预加载策略</a>，以便完全控制要预加载哪些模块以及何时加载。</p><p translation-origin=\"off\">The router either never preloads, or preloads every lazy loaded module.\nThe <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> also supports <a href=\"guide/router#custom-preloading\">custom preloading strategies</a> for fine control over which modules to preload and when.</p>\n\n<p translation-result=\"on\">本节将指导你把 <code>CrisisCenterModule</code> 改成惰性加载的，并使用 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略来预加载所有惰性加载模块。</p><p translation-origin=\"off\">This section guides you through updating the <code>CrisisCenterModule</code> to load lazily by default and use the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> strategy to load all lazy loaded modules.</p>\n\n<a id=\"lazy-load-crisis-center\"></a>\n<h4 id=\"lazy-load-the-crisis-center\" translation-result=\"on\">惰性加载危机中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-load-the-crisis-center\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"lazy-load-the-crisis-center\">Lazy load the crisis center<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-load-the-crisis-center\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">修改路由配置，来惰性加载 <code>CrisisCenterModule</code>。修改的步骤和配置惰性加载 <code>AdminModule</code> 时一样。</p><p translation-origin=\"off\">Update the route configuration to lazy load the <code>CrisisCenterModule</code>.\nTake the same steps you used to configure <code>AdminModule</code> for lazy loading.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">把 <code>CrisisCenterRoutingModule</code> 中的路径从 <code>crisis-center</code> 改为空字符串。</p><p translation-origin=\"off\">Change the <code>crisis-center</code> path in the <code>CrisisCenterRoutingModule</code> to an empty string.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">往 <code>AppRoutingModule</code> 中添加一个 <code>crisis-center</code> 路由。</p><p translation-origin=\"off\">Add a <code>crisis-center</code> route to the <code>AppRoutingModule</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">设置 <code>loadChildren</code> 字符串来加载 <code>CrisisCenterModule</code>。</p><p translation-origin=\"off\">Set the <code>loadChildren</code> string to load the <code>CrisisCenterModule</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">从 <code>app.module.ts</code> 中移除所有对 <code>CrisisCenterModule</code> 的引用。</p><p translation-origin=\"off\">Remove all mention of the <code>CrisisCenterModule</code> from <code>app.module.ts</code>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">下面是打开预加载之前的模块修改版：</p><p translation-origin=\"off\">Here are the updated modules <em>before enabling preload</em>:</p>\n\n<code-tabs>\n\n  <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.ts\" region=\"preload\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport { AppComponent }            from './app.component';\nimport { PageNotFoundComponent }   from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule }        from './app-routing.module';\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { AuthModule }              from './auth/auth.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AuthModule,\n    AppRoutingModule,\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n\n  <code-pane header=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.6.ts\" region=\"preload-v1\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }     from '@angular/core';\nimport {\n  <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>,\n} from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\nimport { PageNotFoundComponent }   from './page-not-found/page-not-found.component';\n\nimport { AuthGuard }               from './auth/auth.guard';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule),\n    canLoad: [AuthGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: () => import('./crisis-center/crisis-center.module').then(m => m.CrisisCenterModule)\n  },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-pane>\n\n  <code-pane header=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail/crisis-detail.component';\n\nimport { CanDeactivateGuard }             from '../can-deactivate.guard';\nimport { CrisisDetailResolverService }    from './crisis-detail-resolver.service';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard],\n            resolve: {\n              crisis: CrisisDetailResolverService\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">你可以现在尝试它，并确认在点击了“Crisis Center”按钮之后加载了 <code>CrisisCenterModule</code>。</p><p translation-origin=\"off\">You could try this now and confirm that the  <code>CrisisCenterModule</code> loads after you click the \"Crisis Center\" button.</p>\n\n<p translation-result=\"on\">要为所有惰性加载模块启用预加载功能，请从 Angular 的路由模块中导入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code>。</p><p translation-origin=\"off\">To enable preloading of all lazy loaded modules, import the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> token from the Angular router package.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法的第二个参数接受一个附加配置选项对象。\n<code>preloadingStrategy</code> 就是其中之一。\n把 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 添加到 <code>forRoot()</code> 调用中：</p><p translation-origin=\"off\">The second argument in the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method takes an object for additional configuration options.\nThe <code>preloadingStrategy</code> is one of those options.\nAdd the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> token to the <code>forRoot()</code> call:</p>\n\n<code-example path=\"router/src/app/app-routing.module.6.ts\" header=\"src/app/app-routing.module.ts (preload all)\" region=\"forRoot\">\nRouterModule.forRoot(\n  appRoutes,\n  {\n    enableTracing: true, // &#x3C;-- debugging purposes only\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<p translation-result=\"on\">这项配置会让 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 预加载器立即加载<em>所有</em>惰性加载路由（带 <code>loadChildren</code> 属性的路由）。</p><p translation-origin=\"off\">This configures the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> preloader to immediately load all lazy loaded routes (routes with a <code>loadChildren</code> property).</p>\n\n<p translation-result=\"on\">当访问 <code>http://localhost:4200</code> 时，<code>/heroes</code> 路由立即随之启动，并且路由器在加载了 <code>HeroesModule</code> 之后立即开始加载 <code>CrisisCenterModule</code>。</p><p translation-origin=\"off\">When you visit <code>http://localhost:4200</code>, the <code>/heroes</code> route loads immediately upon launch and the router starts loading the <code>CrisisCenterModule</code> right after the <code>HeroesModule</code> loads.</p>\n\n<p translation-result=\"on\">目前，<code>AdminModule</code> 并没有预加载，因为 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 阻塞了它。</p><p translation-origin=\"off\">Currently, the <code>AdminModule</code> does not preload because <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> is blocking it.</p>\n\n<a id=\"preload-canload\"></a>\n<h4 id=\"canload-blocks-preload\" translation-result=\"on\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 会阻塞预加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canload-blocks-preload\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"canload-blocks-preload\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> blocks preload<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#canload-blocks-preload\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略不会加载被<a href=\"guide/router#can-load-guard\">CanLoad</a>守卫所保护的特性区。</p><p translation-origin=\"off\">The <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> strategy does not load feature areas protected by a <a href=\"guide/router#can-load-guard\">CanLoad</a> guard.</p>\n\n<p translation-result=\"on\">几步之前，你刚刚给 <code>AdminModule</code> 中的路由添加了 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫，以阻塞加载那个模块，直到用户认证结束。\n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫的优先级高于预加载策略。</p><p translation-origin=\"off\">You added a <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guard to the route in the <code>AdminModule</code> a few steps back to block loading of that module until the user is authorized.\nThat <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guard takes precedence over the preload strategy.</p>\n\n<p translation-result=\"on\">如果你要加载一个模块并且保护它防止未授权访问，请移除 <code>canLoad</code> 守卫，只单独依赖<a href=\"guide/router#can-activate-guard\">CanActivate</a>守卫。</p><p translation-origin=\"off\">If you want to preload a module as well as guard against unauthorized access, remove the <code>canLoad()</code> guard method and rely on the <a href=\"guide/router#can-activate-guard\">canActivate()</a> guard alone.</p>\n\n<a id=\"custom-preloading\"></a>\n<h3 id=\"custom-preloading-strategy\" translation-result=\"on\">自定义预加载策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#custom-preloading-strategy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"custom-preloading-strategy\">Custom Preloading Strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#custom-preloading-strategy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在很多场景下，预加载的每个惰性加载模块都能正常工作。但是，考虑到低带宽和用户指标等因素，可以为特定的特性模块使用自定义预加载策略。</p><p translation-origin=\"off\">Preloading every lazy loaded module works well in many situations.\nHowever, in consideration of things such as low bandwidth and user metrics, you can use a custom preloading strategy for specific feature modules.</p>\n\n<p translation-result=\"on\">本节将指导你添加一个自定义策略，它只预加载 <code>data.preload</code> 标志为 <code>true</code> 路由。回想一下，你可以在路由的 <code>data</code> 属性中添加任何东西。</p><p translation-origin=\"off\">This section guides you through adding a custom strategy that only preloads routes whose <code>data.preload</code> flag is set to <code>true</code>.\nRecall that you can add anything to the <code>data</code> property of a route.</p>\n\n<p translation-result=\"on\">在 <code>AppRoutingModule</code> 的 <code>crisis-center</code> 路由中设置 <code>data.preload</code> 标志。</p><p translation-origin=\"off\">Set the <code>data.preload</code> flag in the <code>crisis-center</code> route in the <code>AppRoutingModule</code>.</p>\n\n<code-example path=\"router/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts (route data preload)\" region=\"preload-v2\">\n{\n  path: 'crisis-center',\n  loadChildren: () => import('./crisis-center/crisis-center.module').then(m => m.CrisisCenterModule),\n  data: { preload: true }\n},\n\n</code-example>\n<p translation-result=\"on\">生成一个新的 <code>SelectivePreloadingStrategy</code> 服务。</p><p translation-origin=\"off\">Generate a new <code>SelectivePreloadingStrategy</code> service.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng generate service selective-preloading-strategy\n</code-example>\n<p translation-result=\"on\">使用下列内容替换 <code>selective-preloading-strategy.service.ts</code>：</p><p translation-origin=\"off\">Replace the contents of <code>selective-preloading-strategy.service.ts</code> with the following:</p>\n\n<code-example path=\"router/src/app/selective-preloading-strategy.service.ts\" header=\"src/app/selective-preloading-strategy.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a>, <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class SelectivePreloadingStrategyService implements <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a> {\n  preloadedModules: string[] = [];\n\n  preload(route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>, load: () => Observable&#x3C;any>): Observable&#x3C;any> {\n    if (route.data &#x26;&#x26; route.data['preload']) {\n      // add the route path to the preloaded module array\n      this.preloadedModules.push(route.path);\n\n      // log the route path to the console\n      console.log('Preloaded: ' + route.path);\n\n      return load();\n    } else {\n      return of(null);\n    }\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>SelectivePreloadingStrategyService</code> 实现了 <code><a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a></code>，它有一个方法 <code>preload()</code>。</p><p translation-origin=\"off\"><code>SelectivePreloadingStrategyService</code> implements the <code><a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a></code>, which has one method, <code>preload()</code>.</p>\n\n<p translation-result=\"on\">路由器会用两个参数来调用 <code>preload()</code> 方法：</p><p translation-origin=\"off\">The router calls the <code>preload()</code> method with two arguments:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">要加载的路由。</p><p translation-origin=\"off\">The route to consider.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一个加载器（loader）函数，它能异步加载带路由的模块。</p><p translation-origin=\"off\">A loader function that can load the routed module asynchronously.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\"><code>preload</code> 的实现要返回一个 <code>Observable</code>。\n如果该路由应该预加载，它就会返回调用加载器函数所返回的 <code>Observable</code>。\n如果该路由<em>不</em>应该预加载，它就返回一个 <code>null</code> 值的 <code>Observable</code> 对象。</p><p translation-origin=\"off\">An implementation of <code>preload</code> must return an <code>Observable</code>.\nIf the route does preload, it returns the observable returned by calling the loader function.\nIf the route does not preload, it returns an <code>Observable</code> of <code>null</code>.</p>\n\n<p translation-result=\"on\">在这个例子中，如果路由的 <code>data.preload</code> 标志是真值，则 <code>preload()</code> 方法会加载该路由。</p><p translation-origin=\"off\">In this sample, the  <code>preload()</code> method loads the route if the route's <code>data.preload</code> flag is truthy.</p>\n\n<p translation-result=\"on\">它的副作用是 <code>SelectivePreloadingStrategyService</code> 会把所选路由的 <code>path</code> 记录在它的公共数组 <code>preloadedModules</code> 中。</p><p translation-origin=\"off\">As a side-effect, <code>SelectivePreloadingStrategyService</code> logs the <code>path</code> of a selected route in its public <code>preloadedModules</code> array.</p>\n\n<p translation-result=\"on\">很快，你就会扩展 <code>AdminDashboardComponent</code> 来注入该服务，并且显示它的 <code>preloadedModules</code> 数组。</p><p translation-origin=\"off\">Shortly, you'll extend the <code>AdminDashboardComponent</code> to inject this service and display its <code>preloadedModules</code> array.</p>\n\n<p translation-result=\"on\">但是首先，要对 <code>AppRoutingModule</code> 做少量修改。</p><p translation-origin=\"off\">But first, make a few changes to the <code>AppRoutingModule</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">把 <code>SelectivePreloadingStrategyService</code> 导入到 <code>AppRoutingModule</code> 中。</p><p translation-origin=\"off\">Import <code>SelectivePreloadingStrategyService</code> into <code>AppRoutingModule</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略替换成对 <code>forRoot()</code> 的调用，并且传入这个 <code>SelectivePreloadingStrategyService</code>。</p><p translation-origin=\"off\">Replace the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> strategy in the call to <code>forRoot()</code> with this <code>SelectivePreloadingStrategyService</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把 <code>SelectivePreloadingStrategyService</code> 策略添加到 <code>AppRoutingModule</code> 的 <code>providers</code> 数组中，以便它可以注入到应用中的任何地方。</p><p translation-origin=\"off\">Add the <code>SelectivePreloadingStrategyService</code> strategy to the <code>AppRoutingModule</code> providers array so you can inject it elsewhere in the app.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">现在，编辑 <code>AdminDashboardComponent</code> 以显示这些预加载路由的日志。</p><p translation-origin=\"off\">Now edit the <code>AdminDashboardComponent</code> to display the log of preloaded routes.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">导入 <code>SelectivePreloadingStrategyService</code>（它是一个服务）。</p><p translation-origin=\"off\">Import the <code>SelectivePreloadingStrategyService</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把它注入到仪表盘的构造函数中。</p><p translation-origin=\"off\">Inject it into the dashboard's constructor.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改模板来显示这个策略服务的 <code>preloadedModules</code> 数组。</p><p translation-origin=\"off\">Update the template to display the strategy service's <code>preloadedModules</code> array.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">现在文件如下：</p><p translation-origin=\"off\">Now the file is as follows:</p>\n\n<code-example path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.ts\" header=\"src/app/admin/admin-dashboard/admin-dashboard.component.ts (preloaded modules)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }    from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> }       from '@angular/router';\nimport { Observable }           from 'rxjs';\nimport { map }                  from 'rxjs/operators';\n\nimport { SelectivePreloadingStrategyService } from '../../selective-preloading-strategy.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId: Observable&#x3C;string>;\n  token: Observable&#x3C;string>;\n  modules: string[];\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    preloadStrategy: SelectivePreloadingStrategyService\n  ) {\n    this.modules = preloadStrategy.preloadedModules;\n  }\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .pipe(map(params => params.get('session_id') || 'None'));\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .pipe(map(fragment => fragment || 'None'));\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">一旦应用加载完了初始路由，<code>CrisisCenterModule</code> 也被预加载了。\n通过 <code>Admin</code> 特性区中的记录就可以验证它，“Preloaded Modules”中列出了 <code>crisis-center</code>。\n它也被记录到了浏览器的控制台。</p><p translation-origin=\"off\">Once the application loads the initial route, the <code>CrisisCenterModule</code> is preloaded.\nVerify this by logging in to the <code>Admin</code> feature area and noting that the <code>crisis-center</code> is listed in the <code>Preloaded Modules</code>.\nIt also logs to the browser's console.</p>\n\n<a id=\"redirect-advanced\"></a>\n<h3 id=\"migrating-urls-with-redirects\" translation-result=\"on\">使用重定向迁移 URL<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#migrating-urls-with-redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"migrating-urls-with-redirects\">Migrating URLs with redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#migrating-urls-with-redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你已经设置好了路由，并且用命令式和声明式的方式导航到了很多不同的路由。但是，任何应用的需求都会随着时间而改变。\n你把链接 <code>/heroes</code> 和 <code>hero/:id</code> 指向了 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 组件。\n如果有这样一个需求，要把链接 <code>heroes</code> 变成 <code>superheroes</code>，你可能仍然希望以前的 URL 能正常导航。\n但你也不想在应用中找到并修改每一个链接，这时候，重定向就可以省去这些琐碎的重构工作。</p><p translation-origin=\"off\">You've setup the routes for navigating around your application and used navigation imperatively and declaratively.\nBut like any application, requirements change over time.\nYou've setup links and navigation to <code>/heroes</code> and <code>/hero/:id</code> from the <code>HeroListComponent</code> and <code>HeroDetailComponent</code> components.\nIf there were a requirement that links to <code>heroes</code> become <code>superheroes</code>, you would still want the previous URLs to navigate correctly.\nYou also don't want to update every link in your application, so redirects makes refactoring routes trivial.</p>\n\n<a id=\"url-refactor\"></a>\n<h4 id=\"changing-heroes-to-superheroes\" translation-result=\"on\">把 <code>/heroes</code> 改为 <code>/superheroes</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#changing-heroes-to-superheroes\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"changing-heroes-to-superheroes\">Changing <code>/heroes</code> to <code>/superheroes</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#changing-heroes-to-superheroes\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">本节将指导你将 <code>Hero</code> 路由迁移到新的 URL。在导航之前，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 会检查路由配置中的重定向语句，以便将来按需触发重定向。要支持这种修改，你就要在 <code>heroes-routing.module</code> 文件中把老的路由重定向到新的路由。</p><p translation-origin=\"off\">This section guides you through migrating the <code>Hero</code> routes to new URLs.\nThe <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> checks for redirects in your configuration before navigating, so each redirect is triggered when needed. To support this change, add redirects from the old routes to the new routes in the <code>heroes-routing.module</code>.</p>\n\n<code-example path=\"router/src/app/heroes/heroes-routing.module.ts\" header=\"src/app/heroes/heroes-routing.module.ts (heroes redirects)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list/hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', redirectTo: '/superheroes' },\n  { path: 'hero/:id', redirectTo: '/superhero/:id' },\n  { path: 'superheroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'superhero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<p translation-result=\"on\">注意，这里有两种类型的重定向。第一种是不带参数的从 <code>/heroes</code> 重定向到 <code>/superheroes</code>。这是一种非常直观的重定向。第二种是从 <code>/hero/:id</code> 重定向到 <code>/superhero/:id</code>，它还要包含一个 <code>:id</code> 路由参数。\n路由器重定向时使用强大的模式匹配功能，这样，路由器就会检查 URL，并且把 <code>path</code> 中带的路由参数替换成相应的目标形式。以前，你导航到形如 <code>/hero/15</code> 的 URL 时，带了一个路由参数 <code>id</code>，它的值是 <code>15</code>。</p><p translation-origin=\"off\">Notice two different types of redirects.\nThe first change is from  <code>/heroes</code> to <code>/superheroes</code> without any parameters.\nThe second change is from <code>/hero/:id</code> to <code>/superhero/:id</code>, which includes the <code>:id</code> route parameter.\nRouter redirects also use powerful pattern-matching, so the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> inspects the URL and replaces route parameters in the <code>path</code> with their appropriate destination.\nPreviously, you navigated to a URL such as <code>/hero/15</code> with a route parameter <code>id</code> of <code>15</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在重定向的时候，路由器还支持<a href=\"guide/router#query-parameters\">查询参数</a>和<a href=\"guide/router#fragment\">片段(fragment)</a>。</p><p translation-origin=\"off\">The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> also supports <a href=\"guide/router#query-parameters\">query parameters</a> and the <a href=\"guide/router#fragment\">fragment</a> when using redirects.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 当使用绝对地址重定向时，路由器将会使用路由配置的 <code>redirectTo</code> 属性中规定的查询参数和片段。</p><p translation-origin=\"off\">When using absolute redirects, the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> will use the query parameters and the fragment from the <code>redirectTo</code> in the route config.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当使用相对地址重定向时，路由器将会使用源地址（跳转前的地址）中的查询参数和片段。</p><p translation-origin=\"off\">When using relative redirects, the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> use the query params and the fragment from the source URL.</p>\n\n</li>\n</ul>\n</div>\n<p translation-result=\"on\">目前，空路径被重定向到了 <code>/heroes</code>，它又被重定向到了 <code>/superheroes</code>。这样不行，因为 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在每一层的路由配置中只会处理一次重定向。这样可以防止出现无限循环的重定向。</p><p translation-origin=\"off\">Currently, the empty path route redirects to <code>/heroes</code>, which redirects to <code>/superheroes</code>.\nThis won't work because the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> handles redirects once at each level of routing configuration.\nThis prevents chaining of redirects, which can lead to endless redirect loops.</p>\n\n<p translation-result=\"on\">所以，你要在 <code>app-routing.module.ts</code> 中修改空路径路由，让它重定向到 <code>/superheroes</code>。</p><p translation-origin=\"off\">Instead, update the empty path route in <code>app-routing.module.ts</code> to redirect to <code>/superheroes</code>.</p>\n\n<code-example path=\"router/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts (superheroes redirect)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { ComposeMessageComponent }  from './compose-message/compose-message.component';\nimport { PageNotFoundComponent }    from './page-not-found/page-not-found.component';\n\nimport { AuthGuard }                          from './auth/auth.guard';\nimport { SelectivePreloadingStrategyService } from './selective-preloading-strategy.service';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule),\n    canLoad: [AuthGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: () => import('./crisis-center/crisis-center.module').then(m => m.CrisisCenterModule),\n    data: { preload: true }\n  },\n  { path: '',   redirectTo: '/superheroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      {\n        enableTracing: false, // &#x3C;-- debugging purposes only\n        preloadingStrategy: SelectivePreloadingStrategyService,\n      }\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p translation-result=\"on\">由于 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 与路由配置无关，所以你要修改相关的路由链接，以便在新的路由激活时，它们也能保持激活状态。还要修改 <code>app.component.ts</code> 模板中的 <code>/heroes</code> 这个 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。</p><p translation-origin=\"off\">A <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> isn't tied to route configuration, so update the associated router links to remain active when the new route is active.\nUpdate the <code>app.component.ts</code> template for the <code>/heroes</code> <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>.</p>\n\n<code-example path=\"router/src/app/app.component.html\" header=\"src/app/app.component.html (superheroes active routerLink)\">\n&#x3C;h1 class=\"title\">Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Admin&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Login&#x3C;/a>\n  &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\">Contact&#x3C;/a>\n&#x3C;/nav>\n&#x3C;div [@routeAnimation]=\"getAnimationData(routerOutlet)\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #routerOutlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<p translation-result=\"on\">修改 <code>hero-detail.component.ts</code> 中的 <code>goToHeroes()</code> 方法，使用可选的路由参数导航回 <code>/superheroes</code>。</p><p translation-origin=\"off\">Update the <code>goToHeroes()</code> method in the <code>hero-detail.component.ts</code> to navigate back to <code>/superheroes</code> with the optional route parameters.</p>\n\n<code-example path=\"router/src/app/heroes/hero-detail/hero-detail.component.ts\" region=\"redirect\" header=\"src/app/heroes/hero-detail/hero-detail.component.ts (goToHeroes)\">\ngotoHeroes(hero: Hero) {\n  let heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include a junk 'foo' property for fun.\n  this.router.navigate(['/superheroes', { id: heroId, foo: 'foo' }]);\n}\n\n</code-example>\n<p translation-result=\"on\">当这些重定向设置好之后，所有以前的路由都指向了它们的新目标，并且每个 URL 也仍然能正常工作。</p><p translation-origin=\"off\">With the redirects setup, all previous routes now point to their new destinations and both URLs still function as intended.</p>\n\n<a id=\"inspect-config\"></a>\n<h3 id=\"inspect-the-routers-configuration\" translation-result=\"on\">审查路由器配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#inspect-the-routers-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"inspect-the-routers-configuration\">Inspect the router's configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#inspect-the-routers-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要确定你的路由是否真的<a href=\"guide/router#routing-module-order\">按照正确的顺序</a>执行的，你可以审查路由器的配置。</p><p translation-origin=\"off\">To determine if your routes are actually evaluated <a href=\"guide/router#routing-module-order\">in the proper order</a>, you can inspect the router's configuration.</p>\n\n<p translation-result=\"on\">可以通过注入路由器并在控制台中记录其 <code>config</code> 属性来实现。\n例如，把 <code>AppModule</code> 修改为这样，并在浏览器的控制台窗口中查看最终的路由配置。</p><p translation-origin=\"off\">Do this by injecting the router and logging to the console its <code>config</code> property.\nFor example, update the <code>AppModule</code> as follows and look in the browser console window\nto see the finished route configuration.</p>\n\n<code-example path=\"router/src/app/app.module.7.ts\" header=\"src/app/app.module.ts (inspect the router config)\" region=\"inspect-config\">\nexport class AppModule {\n  // Diagnostic only: inspect router configuration\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    // Use a custom replacer to display function names in the route configs\n    const replacer = (key, value) => (typeof value === 'function') ? value.name : value;\n\n    console.log('<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>: ', JSON.stringify(router.config, replacer, 2));\n  }\n}\n\n</code-example>\n<a id=\"final-app\"></a>\n<h2 id=\"final-app\" translation-result=\"on\">最终的应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#final-app\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-app\">Final app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#final-app\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">对这个已完成的路由器应用，参见 <live-example></live-example>的最终代码。</p><p translation-origin=\"off\">For the completed router app, see the <live-example></live-example> for the final source code.</p>\n\n<a id=\"link-parameters-array\"></a>\n<h2 id=\"link-parameters-array\" translation-result=\"on\">链接参数数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#link-parameters-array\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"link-parameters-array\">Link parameters array<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#link-parameters-array\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">链接参数数组保存路由导航时所需的成分：</p><p translation-origin=\"off\">A link parameters array holds the following ingredients for router navigation:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 指向目标组件的那个路由的路径（path）</p><p translation-origin=\"off\">The path of the route to the destination component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 必备路由参数和可选路由参数，它们将进入该路由的 URL</p><p translation-origin=\"off\">Required and optional route parameters that go into the route URL.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你可以把 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令绑定到一个数组，就像这样：</p><p translation-origin=\"off\">You can bind the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive to such an array like this:</p>\n\n<code-example path=\"router/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (h-anchor)\" region=\"h-anchor\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/heroes']\">Heroes&#x3C;/a>\n\n</code-example>\n<p translation-result=\"on\">在指定路由参数时，使用如下的两元素数组：</p><p translation-origin=\"off\">The following is a two-element array when specifying a route parameter:</p>\n\n<code-example path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" header=\"src/app/heroes/hero-list/hero-list.component.html (nav-to-detail)\" region=\"nav-to-detail\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\">\n  &#x3C;span class=\"badge\">{{ hero.id }}&#x3C;/span>{{ hero.name }}\n&#x3C;/a>\n\n</code-example>\n<p translation-result=\"on\">你可以在对象中提供可选的路由参数，比如 <code>{ foo: 'foo' }</code> ：</p><p translation-origin=\"off\">You can provide optional route parameters in an object, as in <code>{ foo: 'foo' }</code>:</p>\n\n<code-example path=\"router/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (cc-query-params)\" region=\"cc-query-params\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center', { foo: 'foo' }]\">Crisis Center&#x3C;/a>\n\n</code-example>\n<p translation-result=\"on\">这三个例子涵盖了你在单级路由的应用中所需的一切。不过，在你添加一个像<em>危机中心</em>一样的子路由时，你可以创建新链接数组。</p><p translation-origin=\"off\">These three examples cover the needs of an app with one level of routing.\nHowever, with a child router, such as in the crisis center, you create new link array possibilities.</p>\n\n<p translation-result=\"on\">下面这个最小化 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 例子是基于危机中心指定的<a href=\"guide/router#a-crisis-center-with-child-routes\">默认子路由</a>构建的。</p><p translation-origin=\"off\">The following minimal <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> example builds upon a specified <a href=\"guide/router#a-crisis-center-with-child-routes\">default child route</a> for the crisis center.</p>\n\n<code-example path=\"router/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (cc-anchor-w-default)\" region=\"cc-anchor-w-default\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center']\">Crisis Center&#x3C;/a>\n\n</code-example>\n<p translation-result=\"on\">请注意以下事项：</p><p translation-origin=\"off\">Note the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 数组中的第一个条目标记出了父路由(<code>/crisis-center</code>)。</p><p translation-origin=\"off\">The first item in the array identifies the parent route (<code>/crisis-center</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 这个父路由没有参数。</p><p translation-origin=\"off\">There are no parameters for this parent route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 没有默认的子路由，因此你得选取一个。</p><p translation-origin=\"off\">There is no default for the child route so you need to pick one.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你决定跳转到 <code>CrisisListComponent</code>，它的路由路径是'/'，但你不用显式的添加它。</p><p translation-origin=\"off\">You're navigating to the <code>CrisisListComponent</code>, whose route path is <code>/</code>, but you don't need to explicitly add the slash.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">考虑以下路由器链接，它将从应用的根目录导航到巨龙危机（Dragon Crisis）：</p><p translation-origin=\"off\">Consider the following router link that navigates from the root of the application down to the Dragon Crisis:</p>\n\n<code-example path=\"router/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (Dragon-anchor)\" region=\"Dragon-anchor\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center', 1]\">Dragon Crisis&#x3C;/a>\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"> 数组中的第一个条目标记出了父路由(<code>/crisis-center</code>)。</p><p translation-origin=\"off\">The first item in the array identifies the parent route (<code>/crisis-center</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">这个父路由没有参数。</p><p translation-origin=\"off\">There are no parameters for this parent route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 数组中的第二个条目（'/:id'）用来标记出到指定危机的详情页的子路由。</p><p translation-origin=\"off\">The second item identifies the child route details about a particular crisis (<code>/:id</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 详细的子路由需要一个 <code>id</code> 路由参数。</p><p translation-origin=\"off\">The details child route requires an <code>id</code> route parameter.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你把<em>巨龙危机</em>的 <code>id</code> 添加为该数组中的第二个条目（<code>1</code>）。</p><p translation-origin=\"off\">You added the <code>id</code> of the Dragon Crisis as the second item in the array (<code>1</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 最终生成的路径是 <code>/crisis-center/1</code>。</p><p translation-origin=\"off\">The resulting path is <code>/crisis-center/1</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你也可以把危机中心的路由单独重新定义为 <code>AppComponent</code> 的模板：</p><p translation-origin=\"off\">You could also redefine the <code>AppComponent</code> template with Crisis Center routes exclusively:</p>\n\n<code-example path=\"router/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1 class=\"title\">Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n  &#x3C;nav>\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center']\">Crisis Center&#x3C;/a>\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center/1', { foo: 'foo' }]\">Dragon Crisis&#x3C;/a>\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center/2']\">Shark Crisis&#x3C;/a>\n  &#x3C;/nav>\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n`\n\n</code-example>\n<p translation-result=\"on\">总之，你可以用一级、两级或多级路由来写应用程序。\n链接参数数组提供了用来表示任意深度路由的链接参数数组以及任意合法的路由参数序列、必须的路由器参数以及可选的路由参数对象。</p><p translation-origin=\"off\">In summary, you can write applications with one, two or more levels of routing.\nThe link parameters array affords the flexibility to represent any routing depth and any legal sequence of route paths, (required) router parameters, and (optional) route parameter objects.</p>\n\n<a id=\"browser-url-styles\"></a>\n<a id=\"location-strategy\"></a>\n<h2 id=\"locationstrategy-and-browser-url-styles\" translation-result=\"on\"><code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 和浏览器的网址样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#locationstrategy-and-browser-url-styles\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"locationstrategy-and-browser-url-styles\"><code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> and browser URL styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#locationstrategy-and-browser-url-styles\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当路由器导航到一个新的组件视图时，它会用该视图的 URL 来更新浏览器的当前地址以及历史。\n严格来说，这个 URL 其实是本地的，浏览器不会把该 URL 发给服务器，并且不会重新加载此页面。</p><p translation-origin=\"off\">When the router navigates to a new component view, it updates the browser's location and history with a URL for that view.\nAs this is a strictly local URL the browser won't send this URL to the server and will not reload the page.</p>\n\n<p translation-result=\"on\">现代 HTML 5 浏览器支持<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\">history.pushState</a> API，\n这是一项可以改变浏览器的当前地址和历史，却又不会触发服务端页面请求的技术。\n路由器可以合成出一个“自然的”URL，它看起来和那些需要进行页面加载的 URL 没什么区别。</p><p translation-origin=\"off\">Modern HTML5 browsers support <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a>, a technique that changes a browser's location and history without triggering a server page request.\nThe router can compose a \"natural\" URL that is indistinguishable from one that would otherwise require a page load.</p>\n\n<p translation-result=\"on\">下面是危机中心的 URL 在“HTML 5 pushState”风格下的样子：</p><p translation-origin=\"off\">Here's the Crisis Center URL in this \"HTML5 pushState\" style:</p>\n\n<code-example format=\"nocode\">\n  localhost:3002/crisis-center/\n\n</code-example>\n<p translation-result=\"on\">老旧的浏览器在当前地址的 URL 变化时总会往服务器发送页面请求……唯一的例外规则是：当这些变化位于“#”（被称为“hash”）后面时不会发送。通过把应用内的路由 URL 拼接在 <code>#</code> 之后，路由器可以获得这条“例外规则”带来的优点。下面是到<em>危机中心</em>路由的“hash URL”：</p><p translation-origin=\"off\">Older browsers send page requests to the server when the location URL changes unless the change occurs after a \"#\" (called the \"hash\").\nRouters can take advantage of this exception by composing in-application route URLs with hashes.\nHere's a \"hash URL\" that routes to the Crisis Center.</p>\n\n<code-example format=\"nocode\">\n  localhost:3002/src/#/crisis-center/\n\n</code-example>\n<p translation-result=\"on\">路由器通过两种 <code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 提供者来支持所有这些风格：</p><p translation-origin=\"off\">The router supports both styles with two <code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> providers:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code> - 默认的策略，支持“HTML 5 pushState”风格。</p><p translation-origin=\"off\"><code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code>—the default \"HTML5 pushState\" style.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code> - 支持“hash URL”风格。</p><p translation-origin=\"off\"><code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code>—the \"hash URL\" style.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 函数把 <code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 设置成了 <code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code>，使其成为了默认策略。\n你还可以在启动过程中改写（override）它，来切换到 <code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code> 风格。</p><p translation-origin=\"off\">The <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> function sets the <code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> to the <code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code>, which makes it the default strategy.\nYou also have the option of switching to the <code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code> with an override during the bootstrapping process.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有关提供程序和引导过程的更多信息，请参阅<a href=\"guide/dependency-injection#bootstrap\">依赖注入</a>。</p><p translation-origin=\"off\">For more information on providers and the bootstrap process, see <a href=\"guide/dependency-injection#bootstrap\">Dependency Injection</a>.</p>\n\n</div>\n<h2 id=\"choosing-a-routing-strategy\" translation-result=\"on\">选择路由策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#choosing-a-routing-strategy\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"choosing-a-routing-strategy\">Choosing a routing strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#choosing-a-routing-strategy\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你必须在开发项目的早期就选择一种路由策略，因为一旦该应用进入了生产阶段，你网站的访问者就会使用并依赖应用的这些 URL 引用。</p><p translation-origin=\"off\">You must choose a routing strategy early in the development of you project because once the application is in production, visitors to your site use and depend on application URL references.</p>\n\n<p translation-result=\"on\">几乎所有的 Angular 项目都会使用默认的 HTML 5 风格。它生成的 URL 更易于被用户理解，它也为将来做<strong>服务端渲染</strong>预留了空间。</p><p translation-origin=\"off\">Almost all Angular projects should use the default HTML5 style.\nIt produces URLs that are easier for users to understand and it preserves the option to do server-side rendering.</p>\n\n<p translation-result=\"on\">在服务器端渲染指定的页面，是一项可以在该应用首次加载时大幅提升响应速度的技术。那些原本需要十秒甚至更长时间加载的应用，可以预先在服务端渲染好，并在少于一秒的时间内完整渲染在用户的设备上。</p><p translation-origin=\"off\">Rendering critical pages on the server is a technique that can greatly improve perceived responsiveness when the app first loads.\nAn app that would otherwise take ten or more seconds to start could be rendered on the server and delivered to the user's device in less than a second.</p>\n\n<p translation-result=\"on\">只有当应用的 URL 看起来像是标准的 Web URL，中间没有 hash（#）时，这个选项才能生效。</p><p translation-origin=\"off\">This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</p>\n\n<h2 id=\"base-href-1\"><code>&#x3C;base href></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#base-href-1\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">路由器使用浏览器的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a> API 进行导航。借助 <code>pushState</code> 你自定义应用中的 URL 路径 <code>localhost:4200/crisis-center</code>，应用内的 URL 和服务器的 URL 没有区别。</p><p translation-origin=\"off\">The router uses the browser's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a> for navigation.\n<code>pushState</code> allows you to customize in-app URL paths; for example, <code>localhost:4200/crisis-center</code>.\nThe in-app URLs can be indistinguishable from server URLs.</p>\n\n<p translation-result=\"on\">现代的 HTML5 浏览器都支持 <code>pushState</code>，这也就是为什么很多人把这种 URL 形式称为 \"HTML 5\" 风格的 URL。</p><p translation-origin=\"off\">Modern HTML5 browsers were the first to support <code>pushState</code> which is why many people refer to these URLs as \"HTML5 style\" URLs.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">路由器默认使用 HTML5 风格的导航。\n在 <a href=\"guide/router#browser-url-styles\">LocationStrategy 与浏览器 URL 风格</a>部分，你可以了解为何推荐使用 HTML5 风格的 URL，如何调整其行为，以及必要时如何切换到老式的 hash（#）风格。</p><p translation-origin=\"off\">HTML5 style navigation is the router default.\nIn the <a href=\"guide/router#browser-url-styles\">LocationStrategy and browser URL styles</a> section, learn why HTML5 style is preferable, how to adjust its behavior, and how to switch to the older hash (#) style, if necessary.</p>\n\n</div>\n<p translation-result=\"on\">你必须在应用的 <code>index.html</code> 中<strong>添加一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" title=\"base href\">&#x3C;base href> 元素</a></strong>才能让 <code>pushState</code> 路由正常工作。\n浏览器要用 <code>&#x3C;base href></code> 的值为引用 CSS、脚本和图片文件时使用的<em>相对</em> URL 添加前缀。</p><p translation-origin=\"off\">You must add a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" title=\"base href\">&#x3C;base href> element</a> to the app's <code>index.html</code> for <code>pushState</code> routing to work.\nThe browser uses the <code>&#x3C;base href></code> value to prefix relative URLs when referencing CSS files, scripts, and images.</p>\n\n<p translation-result=\"on\">请把 <code>&#x3C;base></code> 元素添加在 <code>&#x3C;head></code> 标签的紧后面。如果应用的根目录是 <code>app</code> 目录，那么就可以像这个应用程序一样，设置 <strong><code>index.html</code></strong> 中的 <code>href</code> 值。代码如下。</p><p translation-origin=\"off\">Add the <code>&#x3C;base></code> element just after the  <code>&#x3C;head></code> tag.\nIf the <code>app</code> folder is the application root, as it is for this application,\nset the <code>href</code> value in <code>index.html</code> as shown here.</p>\n\n<code-example path=\"router/src/index.html\" header=\"src/index.html (base-href)\" region=\"base-href\">\n&#x3C;base href=\"/\">\n\n</code-example>\n<h3 id=\"html5-urls-and-the--base-href\" translation-result=\"on\">HTML5 网址和 <code>&#x3C;base href></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#html5-urls-and-the--base-href\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"html5-urls-and-the--base-href\">HTML5 URLs and the  <code>&#x3C;base href></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#html5-urls-and-the--base-href\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">由于路由器默认使用 “<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" target=\"_blank\" title=\"Browser history push-state\">HTML 5 pushState</a>” 风格，所以你<em>必须</em>用一个 <code>&#x3C;base href></code> 来配置该策略（Strategy）。</p><p translation-origin=\"off\">While the router uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"Browser history push-state\">HTML5 pushState</a> style by default, you must configure that strategy with a <code>&#x3C;base href></code>.</p>\n\n<p translation-result=\"on\">配置该策略的首选方式是往 <code>index.html</code> 的 <code>&#x3C;head></code> 中添加一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">&#x3C;base href> element</a>标签。</p><p translation-origin=\"off\">The preferred way to configure the strategy is to add a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" title=\"base href\">&#x3C;base href> element</a> tag in the <code>&#x3C;head></code> of the <code>index.html</code>.</p>\n\n<code-example path=\"router/src/index.html\" header=\"src/index.html (base-href)\" region=\"base-href\">\n&#x3C;base href=\"/\">\n\n</code-example>\n<p translation-result=\"on\">如果没有该标记，浏览器就可能无法在“深度链接”进入应用时加载资源（图片，CSS，脚本）。</p><p translation-origin=\"off\">Without that tag, the browser may not be able to load resources\n(images, CSS, scripts) when \"deep linking\" into the app.</p>\n\n<p translation-result=\"on\">有些开发人员可能无法添加 <code>&#x3C;base></code> 元素，这可能是因为它们没有访问 <code>&#x3C;head></code> 或 <code>index.html</code> 的权限。</p><p translation-origin=\"off\">Some developers may not be able to add the <code>&#x3C;base></code> element, perhaps because they don't have access to <code>&#x3C;head></code> or the <code>index.html</code>.</p>\n\n<p translation-result=\"on\">它们仍然可以使用 HTML 5 格式的 URL，但要采取如下步骤进行补救：</p><p translation-origin=\"off\">Those developers may still use HTML5 URLs by taking the following two steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">用适当的[APP_BASE_HREF][]值提供（provide）路由器。</p><p translation-origin=\"off\">Provide the router with an appropriate [APP_BASE_HREF][] value.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">对所有 Web 资源使用绝对地址：CSS、图片、脚本、模板 HTML。</p><p translation-origin=\"off\">Use root URLs for all web resources: CSS, images, scripts, and template HTML files.</p>\n\n</li>\n</ol>\n<a id=\"hashlocationstrategy\"></a>\n<h3 id=\"hashlocationstrategy\"><code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#hashlocationstrategy\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">你可以在根模块的 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 的第二个参数中传入一个带有 <code>useHash: true</code> 的对象，以回到基于 <code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code> 的传统方式。</p><p translation-origin=\"off\">You can use <code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code> by providing the <code>useHash: true</code> in an object as the second argument of the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> in the <code>AppModule</code>.</p>\n\n<code-example path=\"router/src/app/app.module.6.ts\" header=\"src/app/app.module.ts (hash URL strategy)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }        from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent }          from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(routes, { useHash: true })  // .../#/crisis-center/\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  providers: [\n\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<h2 id=\"router-reference\" translation-result=\"on\">路由器参考手册<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-reference\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"router-reference\">Router Reference<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-reference\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面的部分重点介绍了一些路由器的核心概念。</p><p translation-origin=\"off\">The folllowing sections highlight some core router concepts.</p>\n\n<a id=\"basics-router-imports\"></a>\n<h3 id=\"router-imports\" translation-result=\"on\">路由器导入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-imports\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-imports\">Router imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-imports\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 的 Router 是一个可选服务，它为指定的 URL 提供特定的组件视图。它不是 Angular 核心的一部分，因此它位于自己的包 <code>@angular/router</code> 中。</p><p translation-origin=\"off\">The Angular Router is an optional service that presents a particular component view for a given URL.\nIt is not part of the Angular core and thus is in its own library package, <code>@angular/router</code>.</p>\n\n<p translation-result=\"on\">从任何其它的 Angular 包中导入你需要的东西。</p><p translation-origin=\"off\">Import what you need from it as you would from any other Angular package.</p>\n\n<code-example path=\"router/src/app/app.module.1.ts\" header=\"src/app/app.module.ts (import)\" region=\"import-router\">\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有关浏览器 URL 风格的更多信息，请参阅 <a href=\"guide/router#browser-url-styles\"><code>LocationStrategy</code> 和浏览器 URL 风格</a>。</p><p translation-origin=\"off\">For more on browser URL styles, see <a href=\"guide/router#browser-url-styles\"><code>LocationStrategy</code> and browser URL styles</a>.</p>\n\n</div>\n<a id=\"basics-config\"></a>\n<h3 id=\"configuration\" translation-result=\"on\">配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configuration\">Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">带路由的 Angular 应用中有一个 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务的单例实例。当浏览器的 URL 发生变化时，该路由器会查找相应的 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>，以便根据它确定要显示的组件。</p><p translation-origin=\"off\">A routed Angular application has one singleton instance of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service.\nWhen the browser's URL changes, that router looks for a corresponding <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> from which it can determine the component to display.</p>\n\n<p translation-result=\"on\">在配置之前，路由器没有任何路由。下面的例子创建了五个路由定义，通过 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法配置路由器，并把结果添加到 <code>AppModule</code> 的 <code>imports</code> 数组中。</p><p translation-origin=\"off\">A router has no routes until you configure it.\nThe following example creates five route definitions, configures the router via the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method, and adds the result to the <code>AppModule</code>'s <code>imports</code> array.</p>\n\n<code-example path=\"router/src/app/app.module.0.ts\" header=\"src/app/app.module.ts (excerpt)\">\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'hero/:id',      component: HeroDetailComponent },\n  {\n    path: 'heroes',\n    component: HeroListComponent,\n    data: { title: 'Heroes List' }\n  },\n  { path: '',\n    redirectTo: '/heroes',\n    pathMatch: 'full'\n  },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &#x3C;-- debugging purposes only\n    )\n    // other imports here\n  ],\n  ...\n})\nexport class AppModule { }\n\n</code-example>\n<a id=\"example-config\"></a>\n<p translation-result=\"on\"><code>appRoutes</code> 路由数组描述了如何导航。把它传给模块的 <code>imports</code> 数组中的 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法来配置路由器。</p><p translation-origin=\"off\">The <code>appRoutes</code> array of routes describes how to navigate.\nPass it to the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method in the module <code>imports</code> to configure the router.</p>\n\n<p translation-result=\"on\">每个 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 都会把一个 URL <code>path</code> 映射到一个组件。路径中没有前导斜杠。路由器会为你解析并构建最终的 URL，这样你就可以在应用视图中导航时使用相对路径和绝对路径了。</p><p translation-origin=\"off\">Each <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> maps a URL <code>path</code> to a component.\nThere are no leading slashes in the path.\nThe router parses and builds the final URL for you, which allows you to use both relative and absolute paths when navigating between application views.</p>\n\n<p translation-result=\"on\">第二个路由中的 <code>:id</code> 是路由参数的令牌。在像 <code>/hero/42</code> 这样的 URL 中，“42”是 <code>id</code> 参数的值。相应的 <code>HeroDetailComponent</code> 用这个值来查找并显示 <code>id</code> 为 42 的英雄。</p><p translation-origin=\"off\">The <code>:id</code> in the second route is a token for a route parameter.\nIn a URL such as <code>/hero/42</code>, \"42\" is the value of the <code>id</code> parameter.\nThe corresponding <code>HeroDetailComponent</code> uses that value to find and present the hero whose <code>id</code> is 42.</p>\n\n<p translation-result=\"on\">第三个路由中的 <code>data</code> 属性是存放与该特定路由关联的任意数据的地方。每个激活的路由都可以访问 <code>data</code> 属性。可以用它来存储页面标题，面包屑文本和其它只读静态数据等项目。你可以尝试使用<a href=\"guide/router#resolve-guard\">解析器守卫</a>来检索动态数据。</p><p translation-origin=\"off\">The <code>data</code> property in the third route is a place to store arbitrary data associated with\nthis specific route.\nThe data property is accessible within each activated route. Use it to store items such as page titles, breadcrumb text, and other read-only, static data.\nYou can use the <a href=\"guide/router#resolve-guard\">resolve guard</a> to retrieve dynamic data.</p>\n\n<p translation-result=\"on\">第四个路由中的空路径表示该应用的默认路径 - 当 URL 中的路径为空时通常要去的地方，就像它在刚进来时一样。这个默认路由重定向到了 <code>/heroes</code> 这个 URL 的路由，因此会显示 <code>HeroesListComponent</code>。</p><p translation-origin=\"off\">The empty path in the fourth route represents the default path for the application—the place to go when the path in the URL is empty, as it typically is at the start.\nThis default route redirects to the route for the <code>/heroes</code> URL and, therefore, displays the <code>HeroesListComponent</code>.</p>\n\n<p translation-result=\"on\">如果你需要查看导航生命周期中发生了什么事件，可以把 <code>enableTracing</code> 选项作为路由器默认配置的一部分。这会把每个导航生命周期中发生的每个路由器事件都输出到浏览器控制台中。<code>enableTracing</code> 只会用于调试目的。你可以把 <code>enableTracing: true</code> 选项作为第二个参数传给 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法。</p><p translation-origin=\"off\">If you need to see what events are happening during the navigation lifecycle, there is the <code>enableTracing</code> option as part of the router's default configuration.\nThis outputs each router event that took place during each navigation lifecycle to the browser console.\nUse <code>enableTracing</code> only for debugging purposes.\nYou set the <code>enableTracing: true</code> option in the object passed as the second argument to the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method.</p>\n\n<a id=\"basics-router-outlet\"></a>\n<h3 id=\"router-outlet\" translation-result=\"on\">路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-outlet\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-outlet\">Router outlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-outlet\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 是一个来自路由器库的指令，虽然它的用法像组件一样。它充当占位符，用于在模板中标记出路由器应该显示把该组件显示在那个出口的位置。</p><p translation-origin=\"off\">The <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> is a directive from the router library that is used like a component.\nIt acts as a placeholder that marks the spot in the template where the router should\ndisplay the components for that outlet.</p>\n\n<code-example language=\"html\">\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n  &#x3C;!-- Routed components go here -->\n\n</code-example>\n<p translation-result=\"on\">对于上面的配置，当这个应用的浏览器 URL 变为 <code>/heroes</code> 时，路由器就会把这个 URL 与路由路径 <code>/heroes</code> 匹配，并把 <code>HeroListComponent</code> 作为兄弟元素显示在宿主组件模板中的 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 下方。</p><p translation-origin=\"off\">Given the configuration above, when the browser URL for this application becomes <code>/heroes</code>, the router matches that URL to the route path <code>/heroes</code> and displays the <code>HeroListComponent</code> as a sibling element to the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> that you've placed in the host component's template.</p>\n\n<a id=\"basics-router-links\"></a>\n<a id=\"router-link\"></a>\n<h3 id=\"router-links\" translation-result=\"on\">路由链接<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-links\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-links\">Router links<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-links\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要想通过某些用户操作（比如单击一下 a 标签）进行导航，请使用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>。</p><p translation-origin=\"off\">To navigate as a result of some user action such as the click of an anchor tag, use <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>.</p>\n\n<p translation-result=\"on\">考虑下面的模板：</p><p translation-origin=\"off\">Consider the following template:</p>\n\n<code-example path=\"router/src/app/app.component.1.html\" header=\"src/app/app.component.html\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Crisis Center&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n<p translation-result=\"on\">a 标签上的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令让路由器可以控制这些元素。导航路径是固定的，所以你可以给 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 赋值一个字符串（“一次性”绑定）。</p><p translation-origin=\"off\">The <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives on the anchor tags give the router control over those elements.\nThe navigation paths are fixed, so you can assign a string to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> (a \"one-time\" binding).</p>\n\n<p translation-result=\"on\">如果导航路径更加动态，你可以给它绑定到一个模板表达式，该表达式要返回一个<a href=\"guide/router#link-parameters-array\">链接参数数组</a>。路由器会把该数组解析成一个完整的 URL。</p><p translation-origin=\"off\">Had the navigation path been more dynamic, you could have bound to a template expression that returned an array of route link parameters; that is, the <a href=\"guide/router#link-parameters-array\">link parameters array</a>.\nThe router resolves that array into a complete URL.</p>\n\n<a id=\"router-link-active\"></a>\n<h3 id=\"active-router-links\" translation-result=\"on\">活动路由链路<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#active-router-links\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"active-router-links\">Active router links<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#active-router-links\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 指令会根据当前的 <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> 切换活动 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 上所绑定的 CSS 类。</p><p translation-origin=\"off\">The <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> directive toggles CSS classes for active <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> bindings based on the current <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code>.</p>\n\n<p translation-result=\"on\">在每个 a 标签上，你会看到一个到 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 指令的<a href=\"guide/template-syntax#property-binding\">属性绑定</a>，就像 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"...\"</code>。</p><p translation-origin=\"off\">On each anchor tag, you see a <a href=\"guide/template-syntax#property-binding\">property binding</a> to the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> directive that looks like <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"...\"</code>.</p>\n\n<p translation-result=\"on\">等号 <code>=</code> 右侧的模板表达式，包含一个以空格分隔的 CSS 类字符串，当这个链接处于活动状态时，路由器就会加上这些字符串（并在非活动状态时删除）。你可以把 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 指令设置成一串类的字符串，比如 <code>[<a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>]=\"'active fluffy'\"</code>，也可以把它绑定到一个返回这样一个字符串的组件属性上。</p><p translation-origin=\"off\">The template expression to the right of the equal sign, <code>=</code>, contains a space-delimited string of CSS classes that the Router adds when this link is active (and removes when the link is inactive).\nYou set the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> directive to a string of classes such as <code>[<a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>]=\"'active fluffy'\"</code> or bind it to a component property that returns such a string.</p>\n\n<p translation-result=\"on\">活动路由链接会级联到路由树的每个级别，这样父路由和子路由链接就可以同时处于活动状态。要覆盖这种行为，你可以用 <code>{ exact: true }</code> 表达式绑定到 <code>[routerLinkActiveOptions]</code> 输入绑定。使用 <code>{ exact: true }</code> 之后，给定的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 只有在 URL 与当前 URL 完全匹配时才会激活。</p><p translation-origin=\"off\">Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time.\nTo override this behavior, you can bind to the <code>[routerLinkActiveOptions]</code> input binding with the <code>{ exact: true }</code> expression. By using <code>{ exact: true }</code>, a given <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> will only be active if its URL is an exact match to the current URL.</p>\n\n<a id=\"basics-router-state\"></a>\n<h3 id=\"router-state\" translation-result=\"on\">路由器状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-state\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-state\">Router state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-state\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">每个成功的导航生命周期结束后，路由器都会构建一个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 对象树，它构成了路由器的当前状态。你可以从任何地方使用应用的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务和 <code>routerState</code> 属性来访问当前的 <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code>。</p><p translation-origin=\"off\">After the end of each successful navigation lifecycle, the router builds a tree of <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> objects that make up the current state of the router. You can access the current <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> from anywhere in the application using the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service and the <code>routerState</code> property.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> 中的每个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 都提供了向上或向下遍历路由树的方法，用于从父路由、子路由和兄弟路由中获取信息。</p><p translation-origin=\"off\">Each <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> in the <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> provides methods to traverse up and down the route tree to get information from parent, child and sibling routes.</p>\n\n<a id=\"activated-route\"></a>\n<h3 id=\"activated-route\" translation-result=\"on\">激活路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#activated-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"activated-route\">Activated route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#activated-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">路由的路径和参数可以通过注入名为 <a href=\"api/router/ActivatedRoute\">ActivatedRoute</a> 的路由服务获得。它提供了大量有用的信息，包括：</p><p translation-origin=\"off\">The route path and parameters are available through an injected router service called the <a href=\"api/router/ActivatedRoute\">ActivatedRoute</a>.\nIt has a great deal of useful information including:</p>\n\n<table>\n  <tbody><tr>\n    <th>\n<p translation-result=\"on\">      属性</p><p translation-origin=\"off\">      Property</p>\n\n    </th>\n<th>\n<p translation-result=\"on\">  说明</p><p translation-origin=\"off\">  Description</p>\n\n</th>\n  </tr>\n  <tr>\n    <td>\n      <code>url</code>\n    </td>\n    <td>\n<p translation-result=\"on\">一个路由路径的 <code>Observable</code>，是一个由路由路径的各个部分组成的字符串数组。</p><p translation-origin=\"off\">An <code>Observable</code> of the route path(s), represented as an array of strings for each part of the route path.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>data</code>\n    </td>\n    <td>\n<p translation-result=\"on\">包含提供给当前路由的 <code>data</code> 对象的 <code>Observable</code>。\n也包含任何由<a href=\"guide/router#resolve-guard\">解析守卫</a>解析出的值。</p><p translation-origin=\"off\">An <code>Observable</code> that contains the <code>data</code> object provided for the route.\nAlso contains any resolved values from the <a href=\"guide/router#resolve-guard\">resolve guard</a>.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>paramMap</code>\n    </td>\n    <td>\n<p translation-result=\"on\">一个包含该路由的必要参数和<a href=\"guide/router#optional-route-parameters\">可选参数</a> <a href=\"api/router/ParamMap\">map</a> 的 <code>Observable</code>。\n这个 map 支持从同一个参数中获得单个或多个值。</p><p translation-origin=\"off\">An <code>Observable</code> that contains a <a href=\"api/router/ParamMap\">map</a> of the required and <a href=\"guide/router#optional-route-parameters\">optional parameters</a> specific to the route.\nThe map supports retrieving single and multiple values from the same parameter.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>queryParamMap</code>\n    </td>\n    <td>\n<p translation-result=\"on\">一个包含适用于所有路由的<a href=\"guide/router#query-parameters\">查询参数</a> <a href=\"api/router/ParamMap\">map</a> 的 <code>Observable</code>。\n这个 map 支持从同一个查询参数中获得单个或多个值。</p><p translation-origin=\"off\">An <code>Observable</code> that contains a <a href=\"api/router/ParamMap\">map</a> of the <a href=\"guide/router#query-parameters\">query parameters</a> available to all routes.\nThe map supports retrieving single and multiple values from the query parameter.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>fragment</code>\n    </td>\n    <td>\n<p translation-result=\"on\">一个适用于所有路由的 URL <a href=\"guide/router#fragment\">片段</a>的 <code>Observable</code>。</p><p translation-origin=\"off\">An <code>Observable</code> of the URL <a href=\"guide/router#fragment\">fragment</a> available to all routes.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>outlet</code>\n    </td>\n    <td>\n<p translation-result=\"on\">用来渲染该路由的 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 的名字。\n对于无名出口，这个出口的名字是 <code>primary</code>。</p><p translation-origin=\"off\">The name of the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> used to render the route.\nFor an unnamed outlet, the outlet name is primary.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>routeConfig</code>\n    </td>\n    <td>\n<p translation-result=\"on\">包含原始路径的那个路由的配置信息。</p><p translation-origin=\"off\">The route configuration used for the route that contains the origin path.</p>\n\n</td>\n  </tr>\n<tr>\n<td>\n  <code>parent</code>\n</td>\n<td>\n<p translation-result=\"on\">当该路由是<a href=\"guide/router#child-routing-component\">子路由</a>时，表示该路由的父级 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p><p translation-origin=\"off\">The route's parent <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> when this route is a <a href=\"guide/router#child-routing-component\">child route</a>.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>firstChild</code>\n    </td>\n    <td>\n<p translation-result=\"on\">包含该路由的子路由列表中的第一个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p><p translation-origin=\"off\">Contains the first <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> in the list of this route's child routes.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code>children</code>\n    </td>\n    <td>\n<p translation-result=\"on\">包含当前路由下所有激活的<a href=\"guide/router#child-routing-component\">子路由</a>。</p><p translation-origin=\"off\">Contains all the <a href=\"guide/router#child-routing-component\">child routes</a> activated under the current route.</p>\n\n</td>\n  </tr>\n</tbody></table>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">还有两个较旧的属性，但更推荐使用它们的替代品，因为它们可能会在以后的 Angular 版本中弃用。</p><p translation-origin=\"off\">Two older properties are still available, however, their replacements are preferable as they may be deprecated in a future Angular version.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>params</code> ：一个 <code>Observable</code>，它包含专属于该路由的必要参数和<a href=\"guide/router#optional-route-parameters\">可选参数</a>。请改用 <code>paramMap</code>。</p><p translation-origin=\"off\"><code>params</code>: An <code>Observable</code> that contains the required and <a href=\"guide/router#optional-route-parameters\">optional parameters</a> specific to the route. Use <code>paramMap</code> instead.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>queryParams</code>：一个包含可用于所有路由的<a href=\"guide/router#query-parameters\">查询参数</a>的 <code>Observable</code>。请改用 <code>queryParamMap</code>。</p><p translation-origin=\"off\"><code>queryParams</code>: An <code>Observable</code> that contains the <a href=\"guide/router#query-parameters\">query parameters</a> available to all routes.\nUse <code>queryParamMap</code> instead.</p>\n\n</li>\n</ul>\n</div>\n<h3 id=\"router-events\" translation-result=\"on\">路由器事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-events\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-events\">Router events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-events\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在每次导航过程中都会通过 <code><a href=\"api/router/Router#events\" class=\"code-anchor\">Router.events</a></code> 属性发出导航事件。这些事件的范围贯穿从导航开始和结束之间的多个时间点。导航事件的完整列表如下表所示。</p><p translation-origin=\"off\">During each navigation, the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> emits navigation events through the <code><a href=\"api/router/Router#events\" class=\"code-anchor\">Router.events</a></code> property.\nThese events range from when the navigation starts and ends to many points in between. The full list of navigation events is displayed in the table below.</p>\n\n<table>\n  <tbody><tr>\n    <th>\n<p translation-result=\"on\">      路由事件</p><p translation-origin=\"off\">      Router Event</p>\n\n    </th>\n<th>\n<p translation-result=\"on\">  说明</p><p translation-origin=\"off\">  Description</p>\n\n</th>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  导航开始时触发的<a href=\"api/router/NavigationStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/NavigationStart\">event</a> triggered when navigation starts.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouteConfigLoadStart\" class=\"code-anchor\">RouteConfigLoadStart</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  在 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> <a href=\"guide/router#asynchronous-routing\">惰性加载</a>路由配置之前触发的<a href=\"api/router/RouteConfigLoadStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/RouteConfigLoadStart\">event</a> triggered before the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>\n<a href=\"guide/router#asynchronous-routing\">lazy loads</a> a route configuration.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouteConfigLoadEnd\" class=\"code-anchor\">RouteConfigLoadEnd</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  在某个路由已经惰性加载完毕时触发的<a href=\"api/router/RouteConfigLoadEnd\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/RouteConfigLoadEnd\">event</a> triggered after a route has been lazy loaded.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RoutesRecognized\" class=\"code-anchor\">RoutesRecognized</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器解析了 URL，而且路由已经识别完毕时触发的<a href=\"api/router/RoutesRecognized\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/RoutesRecognized\">event</a> triggered when the Router parses the URL and the routes are recognized.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/GuardsCheckStart\" class=\"code-anchor\">GuardsCheckStart</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器开始进入路由守卫阶段时触发的<a href=\"api/router/GuardsCheckStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/GuardsCheckStart\">event</a> triggered when the Router begins the Guards phase of routing.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ChildActivationStart\" class=\"code-anchor\">ChildActivationStart</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器开始激活某路由的子路由时触发的<a href=\"api/router/ChildActivationStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/ChildActivationStart\">event</a> triggered when the Router begins activating a route's children.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ActivationStart\" class=\"code-anchor\">ActivationStart</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器开始激活某个路由时触发的<a href=\"api/router/ActivationStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/ActivationStart\">event</a> triggered when the Router begins activating a route.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/GuardsCheckEnd\" class=\"code-anchor\">GuardsCheckEnd</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器成功结束了路由守卫阶段时触发的<a href=\"api/router/GuardsCheckEnd\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/GuardsCheckEnd\">event</a> triggered when the Router finishes the Guards phase of routing successfully.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ResolveStart\" class=\"code-anchor\">ResolveStart</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器开始路由解析阶段时触发的<a href=\"api/router/ResolveStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/ResolveStart\">event</a> triggered when the Router begins the Resolve phase of routing.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ResolveEnd\" class=\"code-anchor\">ResolveEnd</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器的路由解析阶段成功完成时触发的<a href=\"api/router/ResolveEnd\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/ResolveEnd\">event</a> triggered when the Router finishes the Resolve phase of routing successfuly.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ChildActivationEnd\" class=\"code-anchor\">ChildActivationEnd</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器成功激活某路由的子路由时触发的<a href=\"api/router/ChildActivationEnd\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/ChildActivationEnd\">event</a> triggered when the Router finishes activating a route's children.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ActivationEnd\" class=\"code-anchor\">ActivationEnd</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当路由器成功激活了某个路由时触发的<a href=\"api/router/ActivationStart\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/ActivationStart\">event</a> triggered when the Router finishes activating a route.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationEnd\" class=\"code-anchor\">NavigationEnd</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当导航成功结束时触发的<a href=\"api/router/NavigationEnd\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/NavigationEnd\">event</a> triggered when navigation ends successfully.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationCancel\" class=\"code-anchor\">NavigationCancel</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当导航被取消时触发的<a href=\"api/router/NavigationCancel\">事件</a>。\n这可能在导航期间某个<a href=\"guide/router#guards\">路由守卫</a>返回了 false 或返回了 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 以进行重定向时发生。</p><p translation-origin=\"off\">  An <a href=\"api/router/NavigationCancel\">event</a> triggered when navigation is canceled.\nThis can happen when a <a href=\"guide/router#guards\">Route Guard</a> returns false during navigation,\nor redirects by returning a <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationError\" class=\"code-anchor\">NavigationError</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  当导航由于非预期的错误而失败时触发的<a href=\"api/router/NavigationError\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/NavigationError\">event</a> triggered when navigation fails due to an unexpected error.</p>\n\n</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/Scroll\" class=\"code-anchor\">Scroll</a></code>\n    </td>\n    <td>\n<p translation-result=\"on\">  用来表示滚动的<a href=\"api/router/Scroll\">事件</a>。</p><p translation-origin=\"off\">  An <a href=\"api/router/Scroll\">event</a> that represents a scrolling event.</p>\n\n</td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\">当启用了 <code>enableTracing</code> 选项时，Angular 会把这些事件都记录到控制台。有关筛选路由器导航事件的示例，请参阅 <a href=\"guide/observables-in-angular\">Angular 中的 Observables</a> 一章的<a href=\"guide/observables-in-angular#router\">路由器部分</a>。</p><p translation-origin=\"off\">When you enable the <code>enableTracing</code> option, Angular logs these events to the console.\nFor an example of filtering router navigation events, see the <a href=\"guide/observables-in-angular#router\">router section</a> of the <a href=\"guide/observables-in-angular\">Observables in Angular</a> guide.</p>\n\n<h3 id=\"router-terminology\" translation-result=\"on\">路由器术语<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-terminology\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"router-terminology\">Router terminology<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#router-terminology\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">这里是一些关键的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 术语及其含义：</p><p translation-origin=\"off\">Here are the key <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> terms and their meanings:</p>\n\n<table>\n  <tbody><tr>\n<th>\n<p translation-result=\"on\">  路由器部件</p><p translation-origin=\"off\">  Router Part</p>\n\n</th>\n<th>\n<p translation-result=\"on\">  含义</p><p translation-origin=\"off\">  Meaning</p>\n\n</th>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  为活动 URL 显示应用中的组件。\n管理从一个组件到另一个的导航。</p><p translation-origin=\"off\">  Displays the application component for the active URL.\nManages navigation from one component to the next.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  一个单独的 NgModule，它提供了一些必要的服务提供者和一些用于在应用视图间导航的指令。</p><p translation-origin=\"off\">  A separate NgModule that provides the necessary service providers\nand directives for navigating through application views.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  定义一个路由数组，每一个条目都会把一个 URL 路径映射到组件。</p><p translation-origin=\"off\">  Defines an array of Routes, each mapping a URL path to a component.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  定义路由器如何基于一个 URL 模式导航到某个组件。\n大部分路由都由一个路径和一个组件类组成。</p><p translation-origin=\"off\">  Defines how the router should navigate to a component based on a URL pattern.\nMost routes consist of a path and a component type.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  该指令 (<code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>) 用于指出路由器应该把视图显示在哪里。</p><p translation-origin=\"off\">  The directive (<code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>) that marks where the router displays a view.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  用于将可点击的 HTML 元素绑定到某个路由的指令。单击带有 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令且绑定到<i>字符串</i>或<i>链接参数数组</i>的元素，将触发导航。</p><p translation-origin=\"off\">  The directive for binding a clickable HTML element to a route. Clicking an element with a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive that is bound to a <i>string</i> or a <i>link parameters array</i> triggers a navigation.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  该指令会在元素上或元素内包含的相关 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 处于活动/非活动状态时，从 HTML 元素上添加/移除类。</p><p translation-origin=\"off\">  The directive for adding/removing classes from an HTML element when an associated <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> contained on or inside the element becomes active/inactive.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  一个提供给每个路由组件的服务，其中包含当前路由专属的信息，例如路由参数、静态数据、解析数据、全局查询参数和全局片段。</p><p translation-origin=\"off\">  A service that is provided to each route component that contains route specific information such as route parameters, static data, resolve data, global query params, and the global fragment.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n  <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code>\n</td>\n<td>\n<p translation-result=\"on\">  路由器的当前状态，包括一棵当前激活路由的树以及遍历这棵路由树的便捷方法。</p><p translation-origin=\"off\">  The current state of the router including a tree of the currently activated routes together with convenience methods for traversing the route tree.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n<p translation-result=\"on\">  <b><i>链接参数数组</i></b></p><p translation-origin=\"off\">  <b><i>Link parameters array</i></b></p>\n\n</td>\n<td>\n<p translation-result=\"on\">  一个由路由器将其解释为路由指南的数组。你可以将该数组绑定到 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 或将该数组作为参数传递给 <code> Router.navigate</code> 方法。</p><p translation-origin=\"off\">  An array that the router interprets as a routing instruction.\nYou can bind that array to a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> or pass the array as an argument to the <code>Router.navigate</code> method.</p>\n\n</td>\n  </tr>\n  <tr>\n<td>\n<p translation-result=\"on\">  <b><i>路由组件</i></b></p><p translation-origin=\"off\">  <b><i>Routing component</i></b></p>\n\n</td>\n<td>\n<p translation-result=\"on\">  一个带有 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 的 Angular 组件，可基于路由器的导航来显示视图。</p><p translation-origin=\"off\">  An Angular component with a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> that displays views based on router navigations.</p>\n\n</td>\n  </tr>\n</tbody></table>\n\n</div>\n\n<!-- links to this doc:\n - api/router\n - api/router/NavigationCancel\n - api/router/Route\n - api/router/Router\n - guide/ajs-quick-reference\n - guide/architecture\n - guide/architecture-next-steps\n - guide/browser-support\n - guide/deployment\n - guide/deprecations\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/lazy-loading-ngmodules\n - guide/npm-packages\n - guide/template-syntax\n - guide/testing\n - guide/universal\n - guide/upgrade\n - start/start-routing\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/query\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/HashLocationStrategy\n - api/common/LocationStrategy\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/PathLocationStrategy\n - api/core/Component\n - api/core/HostBinding\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/core/global\n - api/core/testing/async\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/router\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/ActivatedRouteSnapshot\n - api/router/ActivationEnd\n - api/router/ActivationStart\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/ChildActivationEnd\n - api/router/ChildActivationStart\n - api/router/GuardsCheckEnd\n - api/router/GuardsCheckStart\n - api/router/NavigationCancel\n - api/router/NavigationEnd\n - api/router/NavigationError\n - api/router/NavigationExtras\n - api/router/NavigationStart\n - api/router/ParamMap\n - api/router/Params\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/Resolve\n - api/router/ResolveEnd\n - api/router/ResolveStart\n - api/router/Route\n - api/router/RouteConfigLoadEnd\n - api/router/RouteConfigLoadStart\n - api/router/Router\n - api/router/Router#events\n - api/router/Router#navigate\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterModule#forChild\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/RouterState\n - api/router/RouterStateSnapshot\n - api/router/RouterStateSnapshot#url\n - api/router/Routes\n - api/router/RoutesRecognized\n - api/router/Scroll\n - api/router/UrlTree\n - api/upgrade/static\n - cli\n - cli/generate\n - cli/new\n - guide/animations\n - guide/architecture\n - guide/architecture-components\n - guide/dependency-injection#bootstrap\n - guide/glossary#template\n - guide/glossary#view\n - guide/lazy-loading-ngmodules\n - guide/observables-in-angular\n - guide/observables-in-angular#router\n - guide/router#404-page-how-to\n - guide/router#a-crisis-center-with-child-routes\n - guide/router#accessing-query-parameters-and-fragments\n - guide/router#activated-route\n - guide/router#activated-route-in-action\n - guide/router#active-router-links\n - guide/router#add-a-secondary-route\n - guide/router#add-an-admin-feature-module\n - guide/router#add-heroes-functionality\n - guide/router#add-the-logincomponent\n - guide/router#add-the-router-outlet\n - guide/router#adding-components-for-routing\n - guide/router#adding-routable-animations\n - guide/router#asynchronous-routing\n - guide/router#authenticate-with-authguard\n - guide/router#base-href\n - guide/router#base-href-1\n - guide/router#benfits-of-a-routing-module\n - guide/router#browser-url-styles\n - guide/router#can-activate-child-guard\n - guide/router#can-activate-guard\n - guide/router#can-load-guard\n - guide/router#canactivate-requiring-authentication\n - guide/router#canactivatechild-guarding-child-routes\n - guide/router#cancel-and-save\n - guide/router#candeactivate-handling-unsaved-changes\n - guide/router#canload-blocks-preload\n - guide/router#canload-guarding-unauthorized-loading-of-feature-modules\n - guide/router#changing-heroes-to-superheroes\n - guide/router#child-route-configuration\n - guide/router#child-routing-component\n - guide/router#choosing-a-routing-strategy\n - guide/router#clear-secondary-routes\n - guide/router#clearing-secondary-routes\n - guide/router#component-less-route-grouping-routes-without-a-component\n - guide/router#configuration\n - guide/router#custom-preloading\n - guide/router#custom-preloading-strategy\n - guide/router#define-a-wildcard-route\n - guide/router#define-routes\n - guide/router#defining-a-basic-route\n - guide/router#displaying-a-404-page\n - guide/router#displaying-multiple-routes-in-named-outlets\n - guide/router#example-config\n - guide/router#fetch-data-before-navigating\n - guide/router#final-app\n - guide/router#fragment\n - guide/router#generate-an-app-with-routing-enabled\n - guide/router#getting-route-information\n - guide/router#getting-started\n - guide/router#guard-the-admin-feature\n - guide/router#guards\n - guide/router#hashlocationstrategy\n - guide/router#hero-feature-routing-requirements\n - guide/router#heroes-functionality\n - guide/router#heroes-list-optionally-selecting-a-hero\n - guide/router#how-preloading-works\n - guide/router#html5-urls-and-the--base-href\n - guide/router#import-crisis-center-module-into-the-appmodule-routes\n - guide/router#importing-your-new-components\n - guide/router#in-app-navigation-routing-to-views\n - guide/router#inspect-config\n - guide/router#inspect-the-routers-configuration\n - guide/router#integrate-routing-with-your-app\n - guide/router#lazy-load-the-crisis-center\n - guide/router#lazy-loading\n - guide/router#lazy-loading-route-configuration\n - guide/router#link-parameters-array\n - guide/router#locationstrategy-and-browser-url-styles\n - guide/router#migrating-urls-with-redirects\n - guide/router#milestone-1-getting-started\n - guide/router#milestone-1-wrap-up\n - guide/router#milestone-2-routing-module\n - guide/router#milestone-3-heroes-feature\n - guide/router#milestone-3-wrap-up\n - guide/router#milestone-4-crisis-center-feature\n - guide/router#milestone-5-route-guards\n - guide/router#milestone-6-asynchronous-routing\n - guide/router#module-import-order\n - guide/router#navigate-to-crisis-list-with-a-relative-url\n - guide/router#navigating-back-to-the-list-component\n - guide/router#nesting-routes\n - guide/router#observable-parammap-and-component-reuse\n - guide/router#optional-route-parameters\n - guide/router#parammap-api\n - guide/router#pathmatch\n - guide/router#preloading-background-loading-of-feature-areas\n - guide/router#prerequisites\n - guide/router#preventing-unauthorized-access\n - guide/router#query-parameters\n - guide/router#query-parameters-and-fragments\n - guide/router#redirect\n - guide/router#refactor-the-routing-configuration-into-a-routing-module\n - guide/router#register-router-and-routes\n - guide/router#relative-navigation\n - guide/router#remove-duplicate-hero-routes\n - guide/router#remove-heroes-declarations\n - guide/router#resolve-guard\n - guide/router#resolve-pre-fetching-component-data\n - guide/router#reuse\n - guide/router#route-definition-with-a-parameter\n - guide/router#route-order\n - guide/router#route-parameters\n - guide/router#route-parameters-in-the-activatedroute-service\n - guide/router#route-parameters-required-or-optional\n - guide/router#router-events\n - guide/router#router-imports\n - guide/router#router-links\n - guide/router#router-outlet\n - guide/router#router-reference\n - guide/router#router-state\n - guide/router#router-terminology\n - guide/router#router-tutorial-overview\n - guide/router#router-tutorial-tour-of-heroes\n - guide/router#routing-module\n - guide/router#routing-module-order\n - guide/router#secondary-route-navigation-merging-routes-during-navigation\n - guide/router#secondary-routes\n - guide/router#set-up-redirects\n - guide/router#setting-the-route-parameters-in-the-list-view\n - guide/router#setting-up-redirects\n - guide/router#setting-up-wildcard-routes\n - guide/router#snapshot-the-no-observable-alternative\n - guide/router#specifying-a-relative-route\n - guide/router#the-sample-application-in-action\n - guide/router#using-relative-paths\n - guide/router#wildcard\n - guide/router#wildcard-route-how-to\n - guide/singleton-services#forRoot-router\n - guide/template-syntax#class-binding\n - guide/template-syntax#property-binding\n - start\n - tutorial\n - tutorial/toh-pt4\n - http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\n - http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes\n - http://www.w3.org/DesignIssues/MatrixURIs.html\n - https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\n - https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\n - https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\n - https://en.wikipedia.org/wiki/Fragment_identifier\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/router.md?message=docs%3A%20请简述你的修改...\n - https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\n-->"
}