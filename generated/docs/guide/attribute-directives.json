{
  "id": "guide/attribute-directives",
  "title": "Attribute directives",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/attribute-directives.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"attribute-directives\" translation-result=\"on\">属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"attribute-directives\">Attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><strong>属性</strong>型指令用于改变一个 DOM 元素的外观或行为。</p><p translation-origin=\"off\">An <strong>Attribute</strong> directive changes the appearance or behavior of a DOM element.</p>\n\n<p translation-result=\"on\">你可以到这里试试：<live-example title=\"属性型指令范例\"></live-example>。</p><p translation-origin=\"off\">Try the <live-example title=\"Attribute Directive example\"></live-example>.</p>\n\n<a id=\"directive-overview\"></a>\n<h2 id=\"directives-overview\" translation-result=\"on\">指令概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#directives-overview\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"directives-overview\">Directives overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#directives-overview\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中有三种类型的指令：</p><p translation-origin=\"off\">There are three kinds of directives in Angular:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">组件 — 拥有模板的指令</p><p translation-origin=\"off\">Components—directives with a template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">结构型指令 — 通过添加和移除 DOM 元素改变 DOM 布局的指令</p><p translation-origin=\"off\">Structural directives—change the DOM layout by adding and removing DOM elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">属性型指令 — 改变元素、组件或其它指令的外观和行为的指令。</p><p translation-origin=\"off\">Attribute directives—change the appearance or behavior of an element, component, or another directive.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\"><em>组件</em>是这三种指令中最常用的。\n你在<a href=\"start\" title=\"Getting Started with Angular\">快速上手</a>例子中第一次见到组件。</p><p translation-origin=\"off\"><em>Components</em> are the most common of the three directives.\nYou saw a component for the first time in the <a href=\"start\" title=\"Getting Started with Angular\">Getting Started</a> tutorial.</p>\n\n<p translation-result=\"on\"><em>结构型</em>指令修改视图的结构。例如，<a href=\"guide/template-syntax#ngFor\">NgFor</a> 和 <a href=\"guide/template-syntax#ngIf\">NgIf</a>。\n要了解更多，参见<a href=\"guide/structural-directives\">结构型指令</a> 指南。</p><p translation-origin=\"off\"><em>Structural Directives</em> change the structure of the view.\nTwo examples are <a href=\"guide/template-syntax#ngFor\">NgFor</a> and <a href=\"guide/template-syntax#ngIf\">NgIf</a>.\nLearn about them in the <a href=\"guide/structural-directives\">Structural Directives</a> guide.</p>\n\n<p translation-result=\"on\"><em>属性型</em>指令改变一个元素的外观或行为。例如，内置的 <a href=\"guide/template-syntax#ngStyle\">NgStyle</a> 指令可以同时修改元素的多个样式。</p><p translation-origin=\"off\"><em>Attribute directives</em> are used as attributes of elements.\nThe built-in <a href=\"guide/template-syntax#ngStyle\">NgStyle</a> directive in the\n<a href=\"guide/template-syntax\">Template Syntax</a> guide, for example,\ncan change several element styles at the same time.</p>\n\n<h2 id=\"build-a-simple-attribute-directive\" translation-result=\"on\">创建一个简单的属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#build-a-simple-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"build-a-simple-attribute-directive\">Build a simple attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#build-a-simple-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">属性型指令至少需要一个带有 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器的控制器类。该装饰器指定了一个用于标识属性的选择器。\n控制器类实现了指令需要的指令行为。</p><p translation-origin=\"off\">An attribute directive minimally requires building a controller class annotated with\n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, which specifies the selector that identifies\nthe attribute.\nThe controller class implements the desired directive behavior.</p>\n\n<p translation-result=\"on\">本章展示了如何创建一个简单的属性型指令 <em>appHighlight</em>，当用户把鼠标悬停在一个元素上时，改变它的背景色。你可以这样用它：</p><p translation-origin=\"off\">This page demonstrates building a simple <em>appHighlight</em> attribute\ndirective to set an element's background color\nwhen the user hovers over that element. You can apply it like this:</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" header=\"src/app/app.component.html (applied)\" region=\"applied\">\n&#x3C;p appHighlight>Highlight me!&#x3C;/p>\n\n</code-example>\n<a id=\"write-directive\"></a>\n<p translation-result=\"on\">注意，指令<strong>不支持</strong>命名空间。</p><p translation-origin=\"off\">Please note that directives <em>do not</em> support namespaces.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.avoid.html\" header=\"src/app/app.component.avoid.html (unsupported)\" region=\"unsupported\">\n&#x3C;p app:Highlight>This is invalid&#x3C;/p>\n\n</code-example>\n<h3 id=\"write-the-directive-code\" translation-result=\"on\">编写指令代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-the-directive-code\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"write-the-directive-code\">Write the directive code<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-the-directive-code\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在命令行窗口下用 CLI 命令 <a href=\"cli/generate\"><code>ng generate directive</code></a> 创建指令类文件。</p><p translation-origin=\"off\">Create the directive class file in a terminal window with the CLI command <a href=\"cli/generate\"><code>ng generate directive</code></a>.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\nng generate directive highlight\n</code-example>\n<p translation-result=\"on\">CLI 会创建 <code>src/app/highlight.directive.ts</code> 及相应的测试文件（<code>src/app/highlight.directive.spec.ts</code>），并且在根模块 <code>AppModule</code> 中声明这个指令类。</p><p translation-origin=\"off\">The CLI creates <code>src/app/highlight.directive.ts</code>, a corresponding test file <code>src/app/highlight.directive.spec.ts</code>, and <em>declares</em> the directive class in the root <code>AppModule</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">和<strong>组件</strong>一样，这些<strong>指令</strong>也必须在<a href=\"guide/ngmodules\">Angular 模块</a>中进行声明。</p><p translation-origin=\"off\"><em>Directives</em> must be declared in <a href=\"guide/ngmodules\">Angular Modules</a> in the same manner as <em>components</em>.</p>\n\n</div>\n<p translation-result=\"on\">生成的 <code>src/app/highlight.directive.ts</code> 文件如下：</p><p translation-origin=\"off\">The generated <code>src/app/highlight.directive.ts</code> is as follows:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.0.ts\" header=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor() { }\n}\n\n\n</code-example>\n<p translation-result=\"on\">这里导入的 <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 符号提供了 Angular 的 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器。</p><p translation-origin=\"off\">The imported <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> symbol provides Angular the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器的配置属性中指定了该指令的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">CSS 属性型选择器</a> <code>[appHighlight]</code></p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator's lone configuration property specifies the directive's\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">CSS attribute selector</a>, <code>[appHighlight]</code>.</p>\n\n<p translation-result=\"on\">这里的方括号(<code>[]</code>)表示它的属性型选择器。\nAngular 会在模板中定位每个拥有名叫 <code>appHighlight</code> 属性的元素，并且为这些元素加上本指令的逻辑。</p><p translation-origin=\"off\">It's the brackets (<code>[]</code>) that make it an attribute selector.\nAngular locates each element in the template that has an attribute named <code>appHighlight</code> and applies the logic of this directive to that element.</p>\n\n<p translation-result=\"on\">正因如此，这类指令被称为 <strong>属性选择器</strong>。</p><p translation-origin=\"off\">The <em>attribute selector</em> pattern explains the name of this kind of directive.</p>\n\n<div class=\"alert is-helpful\">\n<h4 id=\"why-not-highlight\" translation-result=\"on\">为什么不直接叫做 \"highlight\"？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#why-not-highlight\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"why-not-highlight\">Why not \"highlight\"?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#why-not-highlight\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">尽管 <em>highlight</em> 是一个比 <em>appHighlight</em> 更简洁的名字，而且它确实也能工作。\n但是最佳实践是在选择器名字前面添加前缀，以确保它们不会与标准 HTML 属性冲突。\n它同时减少了与第三方指令名字发生冲突的危险。</p><p translation-origin=\"off\">Though <em>highlight</em> would be a more concise selector than <em>appHighlight</em> and it would work,\nthe best practice is to prefix selector names to ensure\nthey don't conflict with standard HTML attributes.\nThis also reduces the risk of colliding with third-party directive names.\nThe CLI added the <code>app</code> prefix for you.</p>\n\n<p translation-result=\"on\">确认你<strong>没有</strong>给 <code>highlight</code> 指令添加<strong><code>ng</code></strong>前缀。\n那个前缀属于 Angular，使用它可能导致难以诊断的 bug。例如，这个简短的前缀 <code>app</code> 可以帮助你区分自定义指令。</p><p translation-origin=\"off\">Make sure you do <strong>not</strong> prefix the <code>highlight</code> directive name with <strong><code>ng</code></strong> because\nthat prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose.</p>\n\n</div>\n<p translation-result=\"on\">紧跟在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 元数据之后的就是该指令的控制器类，名叫 <code>HighlightDirective</code>，它包含了该指令的逻辑（目前为空逻辑）。然后导出 <code>HighlightDirective</code>，以便它能在别处访问到。</p><p translation-origin=\"off\">After the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> metadata comes the directive's controller class,\ncalled <code>HighlightDirective</code>, which contains the (currently empty) logic for the directive.\nExporting <code>HighlightDirective</code> makes the directive accessible.</p>\n\n<p translation-result=\"on\">现在，把刚才生成的 <code>src/app/highlight.directive.ts</code> 编辑成这样：</p><p translation-origin=\"off\">Now edit the generated <code>src/app/highlight.directive.ts</code> to look as follows:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.1.ts\" header=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n    constructor(el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>import</code> 语句还从 Angular 的 <code>core</code> 库中导入了一个 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 符号。</p><p translation-origin=\"off\">The <code>import</code> statement specifies an additional <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> symbol from the Angular <code>core</code> library:</p>\n\n<p translation-result=\"on\">你可以在指令的构造函数中使用 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 来<a href=\"guide/dependency-injection\">注入</a>宿主 DOM 元素的引用，也就是你放置 <code>appHighlight</code> 的那个元素。</p><p translation-origin=\"off\">You use the <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> in the directive's constructor\nto <a href=\"guide/dependency-injection\">inject</a> a reference to the host DOM element,\nthe element to which you applied <code>appHighlight</code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 通过其 <code>nativeElement</code> 属性给你了直接访问宿主 DOM 元素的能力。</p><p translation-origin=\"off\"><code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> grants direct access to the host DOM element\nthrough its <code>nativeElement</code> property.</p>\n\n<p translation-result=\"on\">这里的第一个实现把宿主元素的背景色设置为了黄色。</p><p translation-origin=\"off\">This first implementation sets the background color of the host element to yellow.</p>\n\n<a id=\"apply-directive\"></a>\n<h2 id=\"apply-the-attribute-directive\" translation-result=\"on\">使用属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#apply-the-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"apply-the-attribute-directive\">Apply the attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#apply-the-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想使用这个新的 <code>HighlightDirective</code>，就往根组件 <code>AppComponent</code> 的模板中添加一个 <code>&#x3C;p></code> 元素，并把该指令作为一个属性使用。</p><p translation-origin=\"off\">To use the new <code>HighlightDirective</code>, add a paragraph (<code>&#x3C;p></code>) element to the template of the root <code>AppComponent</code> and apply the directive as an attribute.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" header=\"src/app/app.component.html\" region=\"applied\">\n&#x3C;p appHighlight>Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">运行这个应用以查看 <code>HighlightDirective</code> 的实际效果。</p><p translation-origin=\"off\">Now run the application to see the <code>HighlightDirective</code> in action.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\nng serve\n</code-example>\n<p translation-result=\"on\">总结：Angular 在<strong>宿主</strong>元素 <code>&#x3C;p></code> 上发现了一个 <code>appHighlight</code> 属性。\n然后它创建了一个 <code>HighlightDirective</code> 类的实例，并把所在元素的引用注入到了指令的构造函数中。\n在构造函数中，该指令把 <code>&#x3C;p></code> 元素的背景设置为了黄色。</p><p translation-origin=\"off\">To summarize, Angular found the <code>appHighlight</code> attribute on the <strong>host</strong> <code>&#x3C;p></code> element.\nIt created an instance of the <code>HighlightDirective</code> class and\ninjected a reference to the <code>&#x3C;p></code> element into the directive's constructor\nwhich sets the <code>&#x3C;p></code> element's background style to yellow.</p>\n\n<a id=\"respond-to-user\"></a>\n<h2 id=\"respond-to-user-initiated-events\" translation-result=\"on\">响应用户引发的事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#respond-to-user-initiated-events\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"respond-to-user-initiated-events\">Respond to user-initiated events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#respond-to-user-initiated-events\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当前，<code>appHighlight</code> 只是简单的设置元素的颜色。\n这个指令应该在用户鼠标悬浮一个元素时，设置它的颜色。</p><p translation-origin=\"off\">Currently, <code>appHighlight</code> simply sets an element color.\nThe directive could be more dynamic.\nIt could detect when the user mouses into or out of the element\nand respond by setting or clearing the highlight color.</p>\n\n<p translation-result=\"on\">先把 <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 加进导入列表中。</p><p translation-origin=\"off\">Begin by adding <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> to the list of imported symbols.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n</code-example>\n<p translation-result=\"on\">然后使用 <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 装饰器添加两个事件处理器，它们会在鼠标进入或离开时进行响应。</p><p translation-origin=\"off\">Then add two event handlers that respond when the mouse enters or leaves,\neach adorned by the <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> decorator.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (mouse-methods)\" region=\"mouse-methods\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n  this.highlight(null);\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 装饰器让你订阅某个属性型指令所在的宿主 DOM 元素的事件，在这个例子中就是 <code>&#x3C;p></code>。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> decorator lets you subscribe to events of the DOM\nelement that hosts an attribute directive, the <code>&#x3C;p></code> in this case.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">当然，你可以通过标准的 JavaScript 方式手动给宿主 DOM 元素附加一个事件监听器。\n但这种方法至少有三个问题：</p><p translation-origin=\"off\">Of course you could reach into the DOM with standard JavaScript and attach event listeners manually.\nThere are at least three problems with <em>that</em> approach:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">必须正确的书写事件监听器。</p><p translation-origin=\"off\">You have to write the listeners correctly.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">当指令被销毁的时候，必须<em>拆卸</em>事件监听器，否则会导致内存泄露。</p><p translation-origin=\"off\">The code must <em>detach</em> the listener when the directive is destroyed to avoid memory leaks.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">必须直接和 DOM API 打交道，应该避免这样做。</p><p translation-origin=\"off\">Talking to DOM API directly isn't a best practice.</p>\n\n</li>\n</ol>\n</div>\n<p translation-result=\"on\">这些处理器委托了一个辅助方法来为 DOM 元素（<code>el</code>）设置颜色。</p><p translation-origin=\"off\">The handlers delegate to a helper method that sets the color on the host DOM element, <code>el</code>.</p>\n\n<p translation-result=\"on\">这个辅助方法（<code>highlight</code>）被从构造函数中提取了出来。\n修改后的构造函数只负责声明要注入的元素 <code>el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>。</p><p translation-origin=\"off\">The helper method, <code>highlight</code>, was extracted from the constructor.\nThe revised constructor simply declares the injected <code>el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (constructor)\" region=\"ctor\">\nconstructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n</code-example>\n<p translation-result=\"on\">下面是修改后的指令代码：</p><p translation-origin=\"off\">Here's the updated directive in full:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">运行本应用并确认：当把鼠标移到 <code>p</code> 上的时候，背景色就出现了，而移开时就消失了。</p><p translation-origin=\"off\">Run the app and confirm that the background color appears when\nthe pointer hovers over the paragraph element and disappears as the pointer moves out.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-anim.gif\" alt=\"Second Highlight\" width=\"204\" height=\"72\">\n</div>\n<a id=\"bindings\"></a>\n<h2 id=\"pass-values-into-the-directive-with-an-input-data-binding\" translation-result=\"on\">使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 数据绑定向指令传递值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"pass-values-into-the-directive-with-an-input-data-binding\">Pass values into the directive with an <em>@Input</em> data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">高亮的颜色目前是硬编码在指令中的，这不够灵活。\n在这一节中，你应该让指令的使用者可以指定要用哪种颜色进行高亮。</p><p translation-origin=\"off\">Currently the highlight color is hard-coded <em>within</em> the directive. That's inflexible.\nIn this section, you give the developer the power to set the highlight color while applying the directive.</p>\n\n<p translation-result=\"on\">先从 <code>@angular/core</code> 中导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">Begin by adding <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> to the list of symbols imported from <code>@angular/core</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" header=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<p translation-result=\"on\">然后把 <code>highlightColor</code> 属性添加到指令类中，就像这样：</p><p translation-origin=\"off\">Add a <code>highlightColor</code> property to the directive class like this:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (highlightColor)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<a id=\"input\"></a>\n<h3 id=\"binding-to-an-input-property\" translation-result=\"on\">绑定到 <em>@Input</em> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-an-input-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"binding-to-an-input-property\">Binding to an <em>@Input</em> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-an-input-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">注意看 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。它往类上添加了一些元数据，从而让该指令的 <code>highlightColor</code> 能用于绑定。</p><p translation-origin=\"off\">Notice the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator. It adds metadata to the class that makes the directive's <code>highlightColor</code> property available for binding.</p>\n\n<p translation-result=\"on\">它之所以称为<em>输入</em>属性，是因为数据流是从绑定表达式流向指令内部的。\n如果没有这个元数据，Angular 就会拒绝绑定，参见<a href=\"guide/attribute-directives#why-input\" title=\"为什么要添加@Input?\">稍后</a>了解更多。</p><p translation-origin=\"off\">It's called an <em>input</em> property because data flows from the binding expression <em>into</em> the directive.\nWithout that input metadata, Angular rejects the binding; see <a href=\"guide/attribute-directives#why-input\" title=\"Why add @Input?\">below</a> for more about that.</p>\n\n<p translation-result=\"on\">试试把下列指令绑定变量添加到 <code>AppComponent</code> 的模板中：</p><p translation-origin=\"off\">Try it by adding the following directive binding variations to the <code>AppComponent</code> template:</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" header=\"src/app/app.component.html (excerpt)\" region=\"color-1\">\n&#x3C;p appHighlight highlightColor=\"yellow\">Highlighted in yellow&#x3C;/p>\n&#x3C;p appHighlight [highlightColor]=\"'orange'\">Highlighted in orange&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">把 <code>color</code> 属性添加到 <code>AppComponent</code> 中：</p><p translation-origin=\"off\">Add a <code>color</code> property to the <code>AppComponent</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.ts\" header=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color = 'yellow';\n}\n\n\n</code-example>\n<p translation-result=\"on\">让它通过属性绑定来控制高亮颜色。</p><p translation-origin=\"off\">Let it control the highlight color with a property binding.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" header=\"src/app/app.component.html (excerpt)\" region=\"color-2\">\n&#x3C;p appHighlight [highlightColor]=\"color\">Highlighted with parent component's color&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">很不错，但如果可以在应用该指令时在<em>同一个属性</em>中设置颜色就更好了，就像这样：</p><p translation-origin=\"off\">That's good, but it would be nice to <em>simultaneously</em> apply the directive and set the color <em>in the same attribute</em> like this.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\"><code>[appHighlight]</code> 属性同时做了两件事：把这个高亮指令应用到了 <code>&#x3C;p></code> 元素上，并且通过属性绑定设置了该指令的高亮颜色。\n你复用了该指令的属性选择器 <code>[appHighlight]</code> 来同时完成它们。\n这是清爽、简约的语法。</p><p translation-origin=\"off\">The <code>[appHighlight]</code> attribute binding both applies the highlighting directive to the <code>&#x3C;p></code> element\nand sets the directive's highlight color with a property binding.\nYou're re-using the directive's attribute selector (<code>[appHighlight]</code>) to do both jobs.\nThat's a crisp, compact syntax.</p>\n\n<p translation-result=\"on\">你还要把该指令的 <code>highlightColor</code> 改名为 <code>appHighlight</code>，因为它是颜色属性目前的绑定名。</p><p translation-origin=\"off\">You'll have to rename the directive's <code>highlightColor</code> property to <code>appHighlight</code> because that's now the color property binding name.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (renamed to match directive selector)\" region=\"color-2\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() appHighlight: string;\n\n</code-example>\n<p translation-result=\"on\">这可不好。因为 <code>appHighlight</code> 是一个糟糕的属性名，而且不能反映该属性的意图。</p><p translation-origin=\"off\">This is disagreeable. The word, <code>appHighlight</code>, is a terrible property name and it doesn't convey the property's intent.</p>\n\n<a id=\"input-alias\"></a>\n<h3 id=\"bind-to-an-input-alias\" translation-result=\"on\">绑定到 <em>@Input</em> 别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-an-input-alias\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bind-to-an-input-alias\">Bind to an <em>@Input</em> alias<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-an-input-alias\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">幸运的是，你可以随意命名该指令的属性，并且<strong>给它指定一个用于绑定的别名</strong>。</p><p translation-origin=\"off\">Fortunately you can name the directive property whatever you want <em>and</em> <strong><em>alias it</em></strong> for binding purposes.</p>\n\n<p translation-result=\"on\">恢复原始属性名，并在 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 的参数中把该选择器指定为别名。</p><p translation-origin=\"off\">Restore the original property name and specify the selector as the alias in the argument to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" header=\"src/app/highlight.directive.ts (color property with alias)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p translation-result=\"on\">在指令内部，该属性叫 <code>highlightColor</code>，在外部，你绑定到它地方，它叫 <code>appHighlight</code>。</p><p translation-origin=\"off\"><em>Inside</em> the directive the property is known as <code>highlightColor</code>.\n<em>Outside</em> the directive, where you bind to it, it's known as <code>appHighlight</code>.</p>\n\n<p translation-result=\"on\">这是最好的结果：理想的内部属性名，理想的绑定语法：</p><p translation-origin=\"off\">You get the best of both worlds: the property name you want and the binding syntax you want:</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">现在，你通过别名绑定到了 <code>highlightColor</code> 属性，并修改 <code>onMouseEnter()</code> 方法来使用它。\n如果有人忘了绑定到 <code>appHighlight</code>，那就用红色进行高亮。</p><p translation-origin=\"off\">Now that you're binding via the alias to the <code>highlightColor</code>, modify the <code>onMouseEnter()</code> method to use that property.\nIf someone neglects to bind to <code>appHighlight</code>, highlight the host element in red:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" header=\"src/app/highlight.directive.ts (mouse enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || 'red');\n}\n\n</code-example>\n<p translation-result=\"on\">这是最终版本的指令类。</p><p translation-origin=\"off\">Here's the latest version of the directive class.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" header=\"src/app/highlight.directive.ts (excerpt)\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-example>\n<h2 id=\"write-a-harness-to-try-it\" translation-result=\"on\">写个测试程序试验下<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-a-harness-to-try-it\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"write-a-harness-to-try-it\">Write a harness to try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-a-harness-to-try-it\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">凭空想象该指令如何工作可不容易。\n在本节，你将把 <code>AppComponent</code> 改成一个测试程序，它让你可以通过单选按钮来选取高亮颜色，并且把你选取的颜色绑定到指令中。</p><p translation-origin=\"off\">It may be difficult to imagine how this directive actually works.\nIn this section, you'll turn <code>AppComponent</code> into a harness that\nlets you pick the highlight color with a radio button and bind your color choice to the directive.</p>\n\n<p translation-result=\"on\">把 <code>app.component.html</code> 修改成这样：</p><p translation-origin=\"off\">Update <code>app.component.html</code> as follows:</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (v2)\" region=\"v2\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h4>Pick a highlight color&#x3C;/h4>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">修改 <code>AppComponent.color</code>，让它不再有初始值。</p><p translation-origin=\"off\">Revise the <code>AppComponent.color</code> so that it has no initial value.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.ts\" header=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-example>\n<p translation-result=\"on\">下面是测试程序和指令的动图。</p><p translation-origin=\"off\">Here are the harness and directive in action.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-v2-anim.gif\" alt=\"Highlight v.2\" width=\"432\" height=\"172\">\n</div>\n<a id=\"second-property\"></a>\n<h2 id=\"bind-to-a-second-property\" translation-result=\"on\">绑定到第二个属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-a-second-property\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"bind-to-a-second-property\">Bind to a second property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-a-second-property\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本例的指令只有一个可定制属性，真实的应用通常需要更多。</p><p translation-origin=\"off\">This highlight directive has a single customizable property. In a real app, it may need more.</p>\n\n<p translation-result=\"on\">目前，默认颜色（它在用户选取了高亮颜色之前一直有效）被硬编码为红色。应该允许模板的开发者设置默认颜色。</p><p translation-origin=\"off\">At the moment, the default color—the color that prevails until\nthe user picks a highlight color—is hard-coded as \"red\".\nLet the template developer set the default color.</p>\n\n<p translation-result=\"on\">把第二个名叫 <code>defaultColor</code> 的<strong>输入</strong>属性添加到 <code>HighlightDirective</code> 中：</p><p translation-origin=\"off\">Add a second <strong>input</strong> property to <code>HighlightDirective</code> called <code>defaultColor</code>:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" header=\"src/app/highlight.directive.ts (defaultColor)\" region=\"defaultColor\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n</code-example>\n<p translation-result=\"on\">修改该指令的 <code>onMouseEnter</code>，让它首先尝试使用 <code>highlightColor</code> 进行高亮，然后用 <code>defaultColor</code>，如果它们都没有指定，那就用红色作为后备。</p><p translation-origin=\"off\">Revise the directive's <code>onMouseEnter</code> so that it first tries to highlight with the <code>highlightColor</code>,\nthen with the <code>defaultColor</code>, and falls back to \"red\" if both properties are undefined.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" header=\"src/app/highlight.directive.ts (mouse-enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || this.defaultColor || 'red');\n}\n\n</code-example>\n<p translation-result=\"on\">当已经绑定过 <code>appHighlight</code> 属性时，要如何绑定到第二个属性呢？</p><p translation-origin=\"off\">How do you bind to a second property when you're already binding to the <code>appHighlight</code> attribute name?</p>\n\n<p translation-result=\"on\">像组件一样，你也可以绑定到指令的很多属性，只要把它们依次写在模板中就行了。\n开发者可以绑定到 <code>AppComponent.color</code>，并且用紫罗兰色作为默认颜色，代码如下：</p><p translation-origin=\"off\">As with components, you can add as many directive property bindings as you need by stringing them along in the template.\nThe developer should be able to write the following template HTML to both bind to the <code>AppComponent.color</code>\nand fall back to \"violet\" as the default color.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (defaultColor)\" region=\"defaultColor\">\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">Angular 之所以知道 <code>defaultColor</code> 绑定属于 <code>HighlightDirective</code>，是因为你已经通过 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器把它设置成了<em>公共</em>属性。</p><p translation-origin=\"off\">Angular knows that the <code>defaultColor</code> binding belongs to the <code>HighlightDirective</code>\nbecause you made it <em>public</em> with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n\n<p translation-result=\"on\">当这些代码完成时，测试程序工作时的动图如下：</p><p translation-origin=\"off\">Here's how the harness should work when you're done coding.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-final-anim.gif\" alt=\"Final Highlight\" width=\"440\" height=\"212\">\n</div>\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本章介绍了如何：</p><p translation-origin=\"off\">This page covered how to:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/attribute-directives#write-directive\">构建一个<strong>属性型指令</strong></a>，它用于修改一个元素的行为。</p><p translation-origin=\"off\"><a href=\"guide/attribute-directives#write-directive\">Build an <strong>attribute directive</strong></a> that modifies the behavior of an element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/attribute-directives#apply-directive\">把一个指令应用到</a>模板中的某个元素上。</p><p translation-origin=\"off\"><a href=\"guide/attribute-directives#apply-directive\">Apply the directive</a> to an element in a template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/attribute-directives#respond-to-user\">响应<strong>事件</strong></a>以改变指令的行为。</p><p translation-origin=\"off\"><a href=\"guide/attribute-directives#respond-to-user\">Respond to <strong>events</strong></a> that change the directive's behavior.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/attribute-directives#bindings\">把值<strong>绑定</strong>到指令中</a>。</p><p translation-origin=\"off\"><a href=\"guide/attribute-directives#bindings\"><strong>Bind</strong> values to the directive</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">最终的源码如下：</p><p translation-origin=\"off\">The final source code follows:</p>\n\n<code-tabs>\n  <code-pane header=\"app/app.component.ts\" path=\"attribute-directives/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-pane>\n  <code-pane header=\"app/app.component.html\" path=\"attribute-directives/src/app/app.component.html\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h4>Pick a highlight color&#x3C;/h4>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-pane>\n  <code-pane header=\"app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.ts\">\n/* tslint:disable:member-ordering */\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this.defaultColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"app/app.module.ts\" path=\"attribute-directives/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane header=\"main.ts\" path=\"attribute-directives/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane header=\"index.html\" path=\"attribute-directives/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;title><a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> Directives&#x3C;/title>\n    &#x3C;base href=\"/\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;app-root>&#x3C;/app-root>\n  &#x3C;/body>\n&#x3C;/html>\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">你还可以体验和下载<live-example title=\"属性型指令范例\"></live-example>.</p><p translation-origin=\"off\">You can also experience and download the <live-example title=\"Attribute Directive example\"></live-example>.</p>\n\n<a id=\"why-input\"></a>\n<h3 id=\"appendix-why-add-input\" translation-result=\"on\">附录：为什么要加<em>@Input</em>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#appendix-why-add-input\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"appendix-why-add-input\">Appendix: Why add <em>@Input</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#appendix-why-add-input\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在这个例子中 <code>hightlightColor</code> 是 <code>HighlightDirective</code> 的一个<strong><em>输入型</em></strong>属性。你见过它没有用别名时的代码：</p><p translation-origin=\"off\">In this demo, the <code>highlightColor</code> property is an <strong><em>input</em></strong> property of\nthe <code>HighlightDirective</code>. You've seen it applied without an alias:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<p translation-result=\"on\">也见过用别名时的代码：</p><p translation-origin=\"off\">You've seen it with an alias:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" header=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p translation-result=\"on\">无论哪种方式，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器都告诉 Angular，该属性是<em>公共的</em>，并且能被父组件绑定。\n如果没有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，Angular 就会拒绝绑定到该属性。</p><p translation-origin=\"off\">Either way, the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator tells Angular that this property is\n<em>public</em> and available for binding by a parent component.\nWithout  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>, Angular refuses to bind to the property.</p>\n\n<p translation-result=\"on\">但你以前也曾经把模板 HTML 绑定到组件的属性，而且从来没有用过 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。\n差异何在？</p><p translation-origin=\"off\">You've bound template HTML to component properties before and never used <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>.\nWhat's different?</p>\n\n<p translation-result=\"on\">差异在于信任度不同。\nAngular 把组件的模板看做<em>从属于</em>该组件的。\n组件和它的模板默认会相互信任。\n这也就是意味着，组件自己的模板可以绑定到组件的<em>任意</em>属性，无论是否使用了 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p><p translation-origin=\"off\">The difference is a matter of trust.\nAngular treats a component's template as <em>belonging</em> to the component.\nThe component and its template trust each other implicitly.\nTherefore, the component's own template may bind to <em>any</em> property of that component,\nwith or without the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n\n<p translation-result=\"on\">但组件或指令不应该盲目的信任其它组件或指令。\n因此组件或指令的属性默认是不能被绑定的。\n从 Angular 绑定机制的角度来看，它们是<em>私有</em>的，而当添加了 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 时，Angular 绑定机制才会把它们当成<em>公共</em>的。\n只有这样，它们才能被其它组件或属性绑定。</p><p translation-origin=\"off\">But a component or directive shouldn't blindly trust <em>other</em> components and directives.\nThe properties of a component or directive are hidden from binding by default.\nThey are <em>private</em> from an Angular binding perspective.\nWhen adorned with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator, the property becomes <em>public</em> from an Angular binding perspective.\nOnly then can it be bound by some other component or directive.</p>\n\n<p translation-result=\"on\">你可以根据属性名在绑定中出现的位置来判定是否要加 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">You can tell if <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> is needed by the position of the property name in a binding.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 当它出现在等号<strong><em>右侧</em></strong>的模板表达式中时，它属于模板所在的组件，不需要 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p><p translation-origin=\"off\">When it appears in the template expression to the <strong><em>right</em></strong> of the equals (=),\nit belongs to the template's component and does not require the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当它出现在等号<strong>左边</strong>的<strong>方括号（[ ]）</strong>中时，该属性属于<em>其它</em>组件或指令，它必须带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p><p translation-origin=\"off\">When it appears in <strong>square brackets</strong> ([ ]) to the <strong>left</strong> of the equals (=),\nthe property belongs to some <em>other</em> component or directive;\nthat property must be adorned with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">试用此原理分析下列范例：</p><p translation-origin=\"off\">Now apply that reasoning to the following example:</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"> <code>color</code> 属性位于右侧的绑定表达式中，它属于模板所在的组件。\n该模板和组件相互信任。因此 <code>color</code> 不需要 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p><p translation-origin=\"off\">The <code>color</code> property in the expression on the right belongs to the template's component.\nThe template and its component trust each other.\nThe <code>color</code> property doesn't require the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>appHighlight</code> 属性位于左侧，它引用了 <code>HighlightDirective</code> 中一个<em>带别名的</em>属性，它不是模板所属组件的一部分，因此存在信任问题。\n所以，该属性必须带 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p><p translation-origin=\"off\">The <code>appHighlight</code> property on the left refers to an <em>aliased</em> property of the <code>HighlightDirective</code>,\nnot a property of the template's component. There are trust issues.\nTherefore, the directive property must carry the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/bootstrapping\n - guide/dependency-injection-in-action\n - guide/glossary\n - guide/structural-directives\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Attribute\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/HostListener\n - api/core/Input\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli/generate\n - guide/attribute-directives#appendix-why-add-input\n - guide/attribute-directives#apply-directive\n - guide/attribute-directives#apply-the-attribute-directive\n - guide/attribute-directives#attribute-directives\n - guide/attribute-directives#bind-to-a-second-property\n - guide/attribute-directives#bind-to-an-input-alias\n - guide/attribute-directives#binding-to-an-input-property\n - guide/attribute-directives#bindings\n - guide/attribute-directives#build-a-simple-attribute-directive\n - guide/attribute-directives#directives-overview\n - guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\n - guide/attribute-directives#respond-to-user\n - guide/attribute-directives#respond-to-user-initiated-events\n - guide/attribute-directives#summary\n - guide/attribute-directives#why-input\n - guide/attribute-directives#why-not-highlight\n - guide/attribute-directives#write-a-harness-to-try-it\n - guide/attribute-directives#write-directive\n - guide/attribute-directives#write-the-directive-code\n - guide/dependency-injection\n - guide/ngmodules\n - guide/structural-directives\n - guide/template-syntax\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngStyle\n - start\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/attribute-directives.md?message=docs%3A%20请简述你的修改...\n-->"
}