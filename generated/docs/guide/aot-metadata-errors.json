{
  "id": "guide/aot-metadata-errors",
  "title": "AOT 元数据错误",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/aot-metadata-errors.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"aot-metadata-errors\">AOT metadata errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#aot-metadata-errors\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"aot-元数据错误\">AOT 元数据错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#aot-元数据错误\"><i class=\"material-icons\">link</i></a></h1>\n<p>The following are metadata errors you may encounter, with explanations and suggested corrections.</p>\n<p>以下是你可能会遇到的元数据错误，带有解释和建议的更正。</p>\n<p><a href=\"guide/aot-metadata-errors#expression-form-not-supported\">Expression form not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-local-symbol\">Reference to a local (non-exported) symbol</a> <br>\n<a href=\"guide/aot-metadata-errors#only-initialized-variables\">Only initialized variables and constants</a> <br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\">Reference to a non-exported class</a> <br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\">Reference to a non-exported function</a> <br>\n<a href=\"guide/aot-metadata-errors#function-calls-not-supported\">Function calls are not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#destructured-variable-not-supported\">Destructured variable or constant not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#could-not-resolve-type\">Could not resolve type</a> <br>\n<a href=\"guide/aot-metadata-errors#name-expected\">Name expected</a> <br>\n<a href=\"guide/aot-metadata-errors#unsupported-enum-member-name\">Unsupported enum member name</a> <br>\n<a href=\"guide/aot-metadata-errors#tagged-template-expressions-not-supported\">Tagged template expressions are not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#symbol-reference-expected\">Symbol reference expected</a> <br> </p>\n<p><a href=\"guide/aot-metadata-errors#expression-form-not-supported\">不支持此表达式格式（Expression form not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-local-symbol\">引用了局部（未导出的）符号（Reference to a local (non-exported) symbol）</a><br>\n<a href=\"guide/aot-metadata-errors#only-initialized-variables\">只允许初始化过的变量和常量（Only initialized variables and constants）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\">引用了未导出的类（Reference to a non-exported class）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\">引用了未导出的函数（Reference to a non-exported function）</a><br>\n<a href=\"guide/aot-metadata-errors#function-calls-not-supported\">不支持函数调用（Function calls are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#destructured-variable-not-supported\">不支持解构变量或常量（Destructured variable or constant not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#could-not-resolve-type\">不能解析此类型（Could not resolve type）</a><br>\n<a href=\"guide/aot-metadata-errors#name-expected\">期待是名字（Name expected）</a><br>\n<a href=\"guide/aot-metadata-errors#unsupported-enum-member-name\">不支持的枚举成员名（Unsupported enum member name）</a><br>\n<a href=\"guide/aot-metadata-errors#tagged-template-expressions-not-supported\">不支持带标签函数的模板表达式（Tagged template expressions are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#symbol-reference-expected\">期待是符号引用（Symbol reference expected）</a><br></p>\n<p><a id=\"expression-form-not-supported\"></a></p>\n<h2 id=\"expression-form-not-supported\">Expression form not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#expression-form-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"不支持表达形式-expression-form-not-supported\">不支持表达形式 (Expression form not supported)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#不支持表达形式-expression-form-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>The compiler encountered an expression it didn't understand while evaluating Angular metadata.</em></p>\n<p>编译器在对 Angular 元数据求值时遇到了一个它不能理解的表达式。</p>\n</div>\n<p>Language features outside of the compiler's <a href=\"guide/aot-compiler#expression-syntax\">restricted expression syntax</a>\ncan produce this error, as seen in the following example:</p>\n<p>如以下范例所示，使用了编译器的<a href=\"guide/aot-compiler#expression-syntax\">受限表达式语法</a>之外的语言特性可能会产生此错误：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport class Fooish { … }\n…\nconst prop = typeof Fooish; // typeof is not valid in metadata\n  …\n  // bracket notation is not valid in metadata\n  { provide: 'token', useValue: { [prop]: 'value' } };\n  …\n\n</code-example>\n<p>You can use <code>typeof</code> and bracket notation in normal application code.\nYou just can't use those features within expressions that define Angular metadata.</p>\n<p>你可以在普通的应用代码中使用 <code>typeof</code> 和方括号标记法来指定属性名，但是这些特性不能在定义 Angular 元数据的表达式中使用。</p>\n<p>Avoid this error by sticking to the compiler's <a href=\"guide/aot-compiler#expression-syntax\">restricted expression syntax</a>\nwhen writing Angular metadata\nand be wary of new or unusual TypeScript features.</p>\n<p>通过在编写 Angular 元数据时坚持使用编译器的<a href=\"guide/aot-compiler#expression-syntax\">受限表达式语法</a>来避免此错误，并小心新的或不常用的 TypeScript 功能。</p>\n<p><a id=\"reference-to-a-local-symbol\"></a></p>\n<h2 id=\"reference-to-a-local-non-exported-symbol\">Reference to a local (non-exported) symbol<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"引用本地未导出的符号-reference-to-a-local-non-exported-symbol\">引用本地（未导出的）符号 (Reference to a local (non-exported) symbol)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#引用本地未导出的符号-reference-to-a-local-non-exported-symbol\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Reference to a local (non-exported) symbol 'symbol name'. Consider exporting the symbol.</em></p>\n<p><em>如果要引用局部（未导出的）符号 'symbol name'，请考虑导出它。</em></p>\n</div>\n<p>The compiler encountered a referenced to a locally defined symbol that either wasn't exported or wasn't initialized.</p>\n<p>编译器遇到了局部定义的未导出或未初始化的符号。</p>\n<p>Here's a <code>provider</code> example of the problem.</p>\n<p>下面就是存在该问题的 <code>provider</code> 范例。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nlet foo: number; // neither exported nor initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p>The compiler generates the component factory, which includes the <code>useValue</code> provider code, in a separate module. <em>That</em> factory module can't reach back to <em>this</em> source module to access the local (non-exported) <code>foo</code> variable.</p>\n<p>编译器会生成这个组件工厂，其中包含 <code>useValue</code> 提供者的代码。<em>那个</em>工厂模块不能访问<em>这个</em>源码模块，无法访问这个（未导出的）<code>foo</code> 变量。</p>\n<p>You could fix the problem by initializing <code>foo</code>.</p>\n<p>你可以通过初始化 <code>foo</code> 来修正这个错误。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nlet foo = 42; // initialized\n\n</code-example>\n<p>The compiler will <a href=\"guide/aot-compiler#code-folding\">fold</a> the expression into the provider as if you had written this.</p>\n<p>编译器会将表达式<a href=\"guide/aot-compiler#code-folding\">折叠</a>到提供者中，就像你自己写的一样。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nproviders: [\n  { provide: Foo, useValue: 42 }\n]\n\n</code-example>\n<p>Alternatively, you can fix it by exporting <code>foo</code> with the expectation that <code>foo</code> will be assigned at runtime when you actually know its value.</p>\n<p>另外，你也可以通过导出 <code>foo</code> 来解决它，这样 <code>foo</code> 将会在运行期间你真正知道它的值的时候被赋值。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let foo: number; // exported\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p>Adding <code>export</code> often works for variables referenced in metadata such as <code>providers</code> and <code>animations</code> because the compiler can generate <em>references</em> to the exported variables in these expressions. It doesn't need the <em>values</em> of those variables.</p>\n<p>添加 <code>export</code> 的方式通常用于需要在元数据中引用变量时，如 <code>providers</code> 和 <code>animations</code>，这样编译器就可以在这些表达式中生成对已导出变量的引用了。它不需要知道这些变量的<em>值</em>。</p>\n<p>Adding <code>export</code> doesn't work when the compiler needs the <em>actual value</em>\nin order to generate code.\nFor example, it doesn't work for the <code>template</code> property.</p>\n<p>当编译器需要知道<em>真正的值</em>以生成代码时，添加 <code>export</code> 的方式就是无效的。比如这里的 <code>template</code> 属性。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string; // exported but not initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p>The compiler needs the value of the <code>template</code> property <em>right now</em> to generate the component factory.\nThe variable reference alone is insufficient.\nPrefixing the declaration with <code>export</code> merely produces a new error, \"<a href=\"guide/aot-metadata-errors#only-initialized-variables\"><code>Only initialized variables and constants can be referenced</code></a>\".</p>\n<p>编译器<em>现在就</em>需要 <code>template</code> 属性的值来生成组件工厂。\n仅仅有对该变量的引用是不够的。\n给这个声明加上 <code>export</code> 前缀只会生成一个新的错误 \"<a href=\"guide/aot-metadata-errors#only-initialized-variables\"><code>Only initialized variables and constants can be referenced</code>【只能引用初始化过的变量和常量】</a>\"。</p>\n<p><a id=\"only-initialized-variables\"></a></p>\n<h2 id=\"only-initialized-variables-and-constants\">Only initialized variables and constants<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#only-initialized-variables-and-constants\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"只支持初始化过的变量和常量-only-initialized-variables-and-constants\">只支持初始化过的变量和常量 (Only initialized variables and constants)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#只支持初始化过的变量和常量-only-initialized-variables-and-constants\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler.</em></p>\n<p><em>只能引用已初始化过的变量和常量，因为模板编译器需要该变量的值。</em></p>\n</div>\n<p>The compiler found a reference to an exported variable or static field that wasn't initialized.\nIt needs the value of that variable to generate code.</p>\n<p>编译器发现某个到已导出的变量或静态字段的引用是没有初始化过的。而它需要根据那个变量的值来生成代码。</p>\n<p>The following example tries to set the component's <code>template</code> property to the value of the exported <code>someTemplate</code> variable which is declared but <em>unassigned</em>.</p>\n<p>下面的例子试图把组件的 <code>template</code> 属性设置为已导出的 <code>someTemplate</code> 变量的值，而这个值虽然声明过，却没有初始化过。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string;\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p>You'd also get this error if you imported <code>someTemplate</code> from some other module and neglected to initialize it there.</p>\n<p>如果你从其它模块中导入了 <code>someTemplate</code>，但那个模块中忘了初始化它，就会看到这个错误。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR - not initialized there either\nimport { someTemplate } from './config';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p>The compiler cannot wait until runtime to get the template information.\nIt must statically derive the value of the <code>someTemplate</code> variable from the source code so that it can generate the component factory, which includes instructions for building the element based on the template.</p>\n<p>编译器不能等到运行时才得到该模板的信息。它必须从源码中静态获得这个 <code>someTemplate</code> 变量的值，以便生成组件工厂，组件工厂中需要包含根据这个模板来生成元素的代码。</p>\n<p>To correct this error, provide the initial value of the variable in an initializer clause <em>on the same line</em>.</p>\n<p>要纠正这个错误，请在<em>同一行</em>的初始化子句中初始化这个变量的值。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let someTemplate = '&#x3C;h1>Greetings from Angular&#x3C;/h1>';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-class\"></a></p>\n<h2 id=\"reference-to-a-non-exported-class\">Reference to a non-exported class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"引用未导出过的类-reference-to-a-non-exported-class\">引用未导出过的类 (Reference to a non-exported class)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#引用未导出过的类-reference-to-a-non-exported-class\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Reference to a non-exported class <code>&#x3C;class name></code>.</em>\n<em>Consider exporting the class.</em></p>\n<p><em>对非导出类 <code>&#x3C;class name></code> 的引用。</em>\n<em>考虑导出此类。</em></p>\n</div>\n<p>Metadata referenced a class that wasn't exported.</p>\n<p>元数据引用了一个未导出的类。</p>\n<p>For example, you may have defined a class and used it as an injection token in a providers array but neglected to export that class.</p>\n<p>比如，你可能定义了一个类并在某个 <code>providers</code> 数组中把它用作了依赖注入令牌，但是忘了导出这个类。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nabstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p>Angular generates a class factory in a separate module and that factory <a href=\"guide/aot-compiler#exported-symbols\">can only access exported classes</a>.\nTo correct this error, export the referenced class.</p>\n<p>Angular 在单独的模块中生成类工厂，并且该工厂<a href=\"guide/aot-compiler#exported-symbols\">只能访问导出的类</a>。要更正此错误，请导出所引用的类。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport abstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-function\"></a></p>\n<h2 id=\"reference-to-a-non-exported-function\">Reference to a non-exported function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"引用未导出过的函数-reference-to-a-non-exported-function\">引用未导出过的函数 (Reference to a non-exported function)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#引用未导出过的函数-reference-to-a-non-exported-function\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Metadata referenced a function that wasn't exported.</em></p>\n<p>元数据中引用了未导出的函数。</p>\n</div>\n<p>For example, you may have set a providers <code>useFactory</code> property to a locally defined function that you neglected to export.</p>\n<p>比如，你可能已经把某个服务提供者的 <code>useFactory</code> 属性设置成了一个局部定义但忘了导出的函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nfunction myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p>Angular generates a class factory in a separate module and that factory <a href=\"guide/aot-compiler#exported-symbols\">can only access exported functions</a>.\nTo correct this error, export the function.</p>\n<p>Angular 在单独的模块中生成类工厂，该工厂<a href=\"guide/aot-compiler#exported-symbols\">只能访问导出的函数</a>。要更正此错误，请导出此函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport function myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p><a id=\"function-calls-not-supported\"></a></p>\n<h2 id=\"function-calls-are-not-supported\">Function calls are not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#function-calls-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"不支持函数调用-function-calls-are-not-supported\">不支持函数调用 (Function calls are not supported)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#不支持函数调用-function-calls-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Function calls are not supported. Consider replacing the function or lambda with a reference to an exported function.</em></p>\n<p><em>不支持函数调用。考虑把这个函数或 lambda 表达式替换成一个对已导出函数的引用。</em></p>\n</div>\n<p>The compiler does not currently support <a href=\"guide/aot-compiler#function-expression\">function expressions or lambda functions</a>.\nFor example, you cannot set a provider's <code>useFactory</code> to an anonymous function or arrow function like this.</p>\n<p>编译器当前不支持<a href=\"guide/aot-compiler#function-expression\">函数表达式或 lambda 函数</a>。比如，你不能将提供者的 <code>useFactory</code> 设置为这样的匿名函数或箭头函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: function() { … } },\n    { provide: OtherStrategy, useFactory: () => { … } }\n  ]\n  …\n\n</code-example>\n<p>You also get this error if you call a function or method in a provider's <code>useValue</code>.</p>\n<p>如果你在某个提供者的 <code>useValue</code> 中调用函数或方法，也会导致这个错误。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { calculateValue } from './utilities';\n\n  …\n  providers: [\n    { provide: SomeValue, useValue: calculateValue() }\n  ]\n  …\n\n</code-example>\n<p>To correct this error, export a function from the module and refer to the function in a <code>useFactory</code> provider instead.</p>\n<p>要改正这个问题，就要从模块中导出这个函数，并改成在服务提供者的 <code>useFactory</code> 中引用该函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { calculateValue } from './utilities';\n\nexport function myStrategy() { … }\nexport function otherStrategy() { … }\nexport function someValueFactory() {\n  return calculateValue();\n}\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy },\n    { provide: OtherStrategy, useFactory: otherStrategy },\n    { provide: SomeValue, useFactory: someValueFactory }\n  ]\n  …\n\n</code-example>\n<p><a id=\"destructured-variable-not-supported\"></a></p>\n<h2 id=\"destructured-variable-or-constant-not-supported\">Destructured variable or constant not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"不支持解构变量或常量-destructured-variable-or-constant-not-supported\">不支持解构变量或常量 (Destructured variable or constant not supported)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#不支持解构变量或常量-destructured-variable-or-constant-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring.</em></p>\n<p><em>模板编译器不支持引用导出的解构语法的变量或常量。考虑简化这一点，以避免解构语法。</em></p>\n</div>\n<p>The compiler does not support references to variables assigned by <a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\">destructuring</a>.</p>\n<p>编译器不支持引用通过<a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\">解构</a>赋值的方式得到的变量。</p>\n<p>For example, you cannot write something like this:</p>\n<p>比如，你不能这么写：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { configuration } from './configuration';\n\n// destructured assignment to foo and bar\nconst {foo, bar} = configuration;\n  …\n  providers: [\n    {provide: Foo, useValue: foo},\n    {provide: Bar, useValue: bar},\n  ]\n  …\n\n</code-example>\n<p>To correct this error, refer to non-destructured values.</p>\n<p>要纠正这个错误，就要引用非解构方式的变量。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { configuration } from './configuration';\n  …\n  providers: [\n    {provide: Foo, useValue: configuration.foo},\n    {provide: Bar, useValue: configuration.bar},\n  ]\n  …\n\n</code-example>\n<p><a id=\"could-not-resolve-type\"></a></p>\n<h2 id=\"could-not-resolve-type\">Could not resolve type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#could-not-resolve-type\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"无法解析类型-could-not-resolve-type\">无法解析类型 (Could not resolve type)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#无法解析类型-could-not-resolve-type\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>The compiler encountered a type and can't determine which module exports that type.</em></p>\n<p>编译器遇到了某个类型，但是不知道它是由哪个模块导出的。</p>\n</div>\n<p>This can happen if you refer to an ambient type.\nFor example, the <code>Window</code> type is an ambient type declared in the global <code>.d.ts</code> file.</p>\n<p>这通常会发生在你引用环境类型时。比如，<code>Window</code> 类型就是在全局 <code>.d.ts</code> 文件中声明的环境类型。</p>\n<p>You'll get an error if you reference it in the component constructor, which the compiler must statically analyze.</p>\n<p>如果你在组件的构造函数中引用它就会导致一个错误，因为编译器必须对构造函数进行静态分析。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ })\nexport class MyComponent {\n  constructor (private win: Window) { … }\n}\n\n</code-example>\n<p>TypeScript understands ambient types so you don't import them.\nThe Angular compiler does not understand a type that you neglect to export or import.</p>\n<p>TypeScript 能理解这些环境类型，所以你不用导入它们。但 Angular 编译器不理解你没有导入或导出过的类型。</p>\n<p>In this case, the compiler doesn't understand how to inject something with the <code>Window</code> token.</p>\n<p>这种情况下，编译器就无法理解如何使用这个 <code>Window</code> 令牌来进行注入。</p>\n<p>Do not refer to ambient types in metadata expressions.</p>\n<p>不要在元数据表达式中引用环境类型。</p>\n<p>If you must inject an instance of an ambient type,\nyou can finesse the problem in four steps:</p>\n<p>如果你必须注入某个环境类型的实例，可以用以下四步来巧妙解决这个问题：</p>\n<ol>\n<li>\n<p>Create an injection token for an instance of the ambient type.</p>\n<p>为环境类型的实例创建一个注入令牌。</p>\n</li>\n<li>\n<p>Create a factory function that returns that instance.</p>\n<p>创建一个返回该实例的工厂函数。</p>\n</li>\n<li>\n<p>Add a <code>useFactory</code> provider with that factory function.</p>\n<p>使用该工厂函数添加一个 <code>useFactory</code> 提供者。</p>\n</li>\n<li>\n<p>Use <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> to inject the instance.</p>\n<p>使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 来注入这个实例。</p>\n</li>\n</ol>\n<p>Here's an illustrative example.</p>\n<p>下面的例子说明了这一点。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> } from '@angular/core';\n\nexport const WINDOW = new <a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a>('Window');\nexport function _window() { return window; }\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  …\n  providers: [\n    { provide: WINDOW, useFactory: _window }\n  ]\n})\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW) private win: Window) { … }\n}\n\n</code-example>\n<p>The <code>Window</code> type in the constructor is no longer a problem for the compiler because it\nuses the <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW)</code> to generate the injection code.</p>\n<p>对于编译器来说，构造函数中出现 <code>Window</code> 类型已不再是个问题，因为它现在使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW)</code> 来生成注入代码。</p>\n<p>Angular does something similar with the <code><a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a></code> token so you can inject the browser's <code>document</code> object (or an abstraction of it, depending upon the platform in which the application runs).</p>\n<p>Angular 也用 <code><a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a></code> 令牌做了类似的事情，所以你也可以注入浏览器的 <code>document</code> 对象（或它的一个抽象层，取决于该应用运行在哪个平台）。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> }   from '@angular/core';\nimport { <a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a>) private doc: Document) { … }\n}\n\n</code-example>\n<p><a id=\"name-expected\"></a></p>\n<h2 id=\"name-expected\">Name expected<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#name-expected\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"期望的名字-name-expected\">期望的名字 (Name expected)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#期望的名字-name-expected\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>The compiler expected a name in an expression it was evaluating.</em></p>\n<p><em>编译器在正在计算的表达式中期望有一个名字。</em></p>\n</div>\n<p>This can happen if you use a number as a property name as in the following example.</p>\n<p>如果将数字用作属性名称，则可能发生这种情况，如以下范例所示。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nprovider: [{ provide: Foo, useValue: { 0: 'test' } }]\n\n</code-example>\n<p>Change the name of the property to something non-numeric.</p>\n<p>把该属性的名字改为非数字类型。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nprovider: [{ provide: Foo, useValue: { '0': 'test' } }]\n\n</code-example>\n<p><a id=\"unsupported-enum-member-name\"></a></p>\n<h2 id=\"unsupported-enum-member-name\">Unsupported enum member name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#unsupported-enum-member-name\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"不支持的枚举成员名称-unsupported-enum-member-name\">不支持的枚举成员名称 (Unsupported enum member name)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#不支持的枚举成员名称-unsupported-enum-member-name\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Angular couldn't determine the value of the <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">enum member</a> that you referenced in metadata.</em></p>\n<p>Angular 不能确定你在元数据中引用的<a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">枚举成员</a>的值。</p>\n</div>\n<p>The compiler can understand simple enum values but not complex values such as those derived from computed properties.</p>\n<p>编译器可以理解简单的枚举值，但不能理解复杂的，比如从那些计算属性中派生出来的。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nenum Colors {\n  Red = 1,\n  White,\n  Blue = \"Blue\".length // computed\n}\n\n  …\n  providers: [\n    { provide: BaseColor,   useValue: Colors.White } // ok\n    { provide: DangerColor, useValue: Colors.Red }   // ok\n    { provide: StrongColor, useValue: Colors.Blue }  // bad\n  ]\n  …\n\n</code-example>\n<p>Avoid referring to enums with complicated initializers or computed properties.</p>\n<p>避免引用那些使用了复杂初始化对象或计算属性的枚举。</p>\n<p><a id=\"tagged-template-expressions-not-supported\"></a></p>\n<h2 id=\"tagged-template-expressions-are-not-supported\">Tagged template expressions are not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"不支持带标签的模板表达式-tagged-template-expressions-are-not-supported\">不支持带标签的模板表达式 (Tagged template expressions are not supported)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#不支持带标签的模板表达式-tagged-template-expressions-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>Tagged template expressions are not supported in metadata.</em></p>\n<p><em>元数据中不支持带标签函数的模板表达式。</em></p>\n</div>\n<p>The compiler encountered a JavaScript ES2015 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">tagged template expression</a> such as the following.</p>\n<p>编译器遇到了 JavaScript ES2015 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">带标签的模板表达式</a>，如下所示。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nconst expression = 'funky';\nconst raw = String.raw`A tagged template ${expression} string`;\n …\n template: '&#x3C;div>' + raw + '&#x3C;/div>'\n …\n\n</code-example>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a> is a <em>tag function</em> native to JavaScript ES2015.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a>是 JavaScript ES2015 的原生<em>标签函数</em>。</p>\n<p>The AOT compiler does not support tagged template expressions; avoid them in metadata expressions.</p>\n<p>AOT 编译器不支持带标签函数的模板表达式，避免在元数据表达式中使用它们。</p>\n<p><a id=\"symbol-reference-expected\"></a></p>\n<h2 id=\"symbol-reference-expected\">Symbol reference expected<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#symbol-reference-expected\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"期待符号的引用-symbol-reference-expected\">期待符号的引用 (Symbol reference expected)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#期待符号的引用-symbol-reference-expected\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p><em>The compiler expected a reference to a symbol at the location specified in the error message.</em></p>\n<p>编译器期待在错误信息指出的位置是一个符号引用。</p>\n</div>\n<p>This error can occur if you use an expression in the <code>extends</code> clause of a class.</p>\n<p>当你在类的 <code>extends</code> 子句中使用表达式时就会出现这个错误。</p>\n<!--todo: Chuck: After reviewing your PR comment I'm still at a loss. See [comment there](https://github.com/angular/angular/pull/17712#discussion_r132025495). -->\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n-->\n<!-- links from this doc:\n - api/common/DOCUMENT\n - api/core/Component\n - api/core/Inject\n - api/core/InjectionToken\n - guide/aot-compiler#code-folding\n - guide/aot-compiler#exported-symbols\n - guide/aot-compiler#expression-syntax\n - guide/aot-compiler#function-expression\n - guide/aot-metadata-errors#aot-metadata-errors\n - guide/aot-metadata-errors#aot-元数据错误\n - guide/aot-metadata-errors#could-not-resolve-type\n - guide/aot-metadata-errors#destructured-variable-not-supported\n - guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\n - guide/aot-metadata-errors#expression-form-not-supported\n - guide/aot-metadata-errors#function-calls-are-not-supported\n - guide/aot-metadata-errors#function-calls-not-supported\n - guide/aot-metadata-errors#name-expected\n - guide/aot-metadata-errors#only-initialized-variables\n - guide/aot-metadata-errors#only-initialized-variables-and-constants\n - guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\n - guide/aot-metadata-errors#reference-to-a-local-symbol\n - guide/aot-metadata-errors#reference-to-a-non-exported-class\n - guide/aot-metadata-errors#reference-to-a-non-exported-function\n - guide/aot-metadata-errors#symbol-reference-expected\n - guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\n - guide/aot-metadata-errors#tagged-template-expressions-not-supported\n - guide/aot-metadata-errors#unsupported-enum-member-name\n - guide/aot-metadata-errors#不支持函数调用-function-calls-are-not-supported\n - guide/aot-metadata-errors#不支持带标签的模板表达式-tagged-template-expressions-are-not-supported\n - guide/aot-metadata-errors#不支持的枚举成员名称-unsupported-enum-member-name\n - guide/aot-metadata-errors#不支持表达形式-expression-form-not-supported\n - guide/aot-metadata-errors#不支持解构变量或常量-destructured-variable-or-constant-not-supported\n - guide/aot-metadata-errors#只支持初始化过的变量和常量-only-initialized-variables-and-constants\n - guide/aot-metadata-errors#引用未导出过的函数-reference-to-a-non-exported-function\n - guide/aot-metadata-errors#引用未导出过的类-reference-to-a-non-exported-class\n - guide/aot-metadata-errors#引用本地未导出的符号-reference-to-a-local-non-exported-symbol\n - guide/aot-metadata-errors#无法解析类型-could-not-resolve-type\n - guide/aot-metadata-errors#期待符号的引用-symbol-reference-expected\n - guide/aot-metadata-errors#期望的名字-name-expected\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/aot-metadata-errors.md?message=docs%3A%20请简述你的修改...\n - https://www.typescriptlang.org/docs/handbook/enums.html\n - https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\n-->"
}