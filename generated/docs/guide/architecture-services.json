{
  "id": "guide/architecture-services",
  "title": "Introduction to services and dependency injection",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/architecture-services.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"introduction-to-services-and-dependency-injection\" translation-result=\"on\">服务与依赖注入简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"introduction-to-services-and-dependency-injection\">Introduction to services and dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><em>服务</em>是一个广义的概念，它包括应用所需的任何值、函数或特性。狭义的服务是一个明确定义了用途的类。它应该做一些具体的事，并做好。</p><p translation-origin=\"off\"><em>Service</em> is a broad category encompassing any value, function, or feature that an app needs.\nA service is typically a class with a narrow, well-defined purpose.\nIt should do something specific and do it well.</p>\n\n<p translation-result=\"on\">Angular 把组件和服务区分开，以提高模块性和复用性。\n通过把组件中和视图有关的功能与其它类型的处理分离开，你可以让组件类更加精简、高效。</p><p translation-origin=\"off\">Angular distinguishes components from services to increase modularity and reusability.\nBy separating a component's view-related functionality from other kinds of processing,\nyou can make your component classes lean and efficient.</p>\n\n<p translation-result=\"on\">理想情况下，组件的工作只管用户体验，而不用顾及其它。\n它应该提供用于数据绑定的属性和方法，以便作为视图（由模板渲染）和应用逻辑（通常包含一些<em>模型</em>的概念）的中介者。</p><p translation-origin=\"off\">Ideally, a component's job is to enable the user experience and nothing more.\nA component should present properties and methods for data binding,\nin order to mediate between the view (rendered by the template)\nand the application logic (which often includes some notion of a <em>model</em>).</p>\n\n<p translation-result=\"on\">组件应该把诸如从服务器获取数据、验证用户输入或直接往控制台中写日志等工作委托给各种服务。通过把各种处理任务定义到可注入的服务类中，你可以让它被任何组件使用。\n通过在不同的环境中注入同一种服务的不同提供者，你还可以让你的应用更具适应性。</p><p translation-origin=\"off\">A component can delegate certain tasks to services, such as fetching data from the server,\nvalidating user input, or logging directly to the console.\nBy defining such processing tasks in an <em>injectable service class</em>, you make those tasks\navailable to any component.\nYou can also make your app more adaptable by injecting different providers of the same kind of service,\nas appropriate in different circumstances.</p>\n\n<p translation-result=\"on\">Angular 不会<em>强迫</em>你遵循这些原则。Angular 只会通过<em>依赖注入</em>来帮你更容易地将应用逻辑分解为服务，并让这些服务可用于各个组件中。</p><p translation-origin=\"off\">Angular doesn't <em>enforce</em> these principles. Angular does help you <em>follow</em> these principles\nby making it easy to factor your application logic into services and make those services\navailable to components through <em>dependency injection</em>.</p>\n\n<h2 id=\"service-examples\" translation-result=\"on\">服务范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"service-examples\">Service examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是一个服务类的范例，用于把日志记录到浏览器的控制台：</p><p translation-origin=\"off\">Here's an example of a service class that logs to the browser console.</p>\n\n<code-example path=\"architecture/src/app/logger.service.ts\" header=\"src/app/logger.service.ts (class)\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p translation-result=\"on\">服务也可以依赖其它服务。比如，这里的 <code>HeroService</code> 就依赖于 <code>Logger</code> 服务，它还用 <code>BackendService</code> 来获取英雄数据。<code>BackendService</code> 还可能再转而依赖 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务来从服务器异步获取英雄列表。</p><p translation-origin=\"off\">Services can depend on other services. For example, here's a <code>HeroService</code> that depends on the <code>Logger</code> service, and also uses <code>BackendService</code> to get heroes. That service in turn might depend on the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service to fetch heroes asynchronously from a server.</p>\n\n<code-example path=\"architecture/src/app/hero.service.ts\" header=\"src/app/hero.service.ts (class)\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) => {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"dependency-injection-di\" translation-result=\"on\">依赖注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"dependency-injection-di\">Dependency injection (DI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n\n<img src=\"generated/images/guide/architecture/dependency-injection.png\" alt=\"Service\" class=\"left\" width=\"200\" height=\"90\">\n<p translation-result=\"on\">DI 被融入 Angular 框架中，用于在任何地方给新建的组件提供服务或所需的其它东西。\n组件是服务的消费者，也就是说，你可以把一个服务<em>注入</em>到组件中，让组件类得以访问该服务类。</p><p translation-origin=\"off\">DI is wired into the Angular framework and used everywhere to provide new components with the services or other things they need.\nComponents consume services; that is, you can <em>inject</em> a service into a component, giving the component access to that service class.</p>\n\n<p translation-result=\"on\">在 Angular 中，要把一个类定义为服务，就要用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器来提供元数据，以便让 Angular 可以把它作为<em>依赖</em>注入到组件中。\n同样，也要使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器来表明一个组件或其它类（比如另一个服务、管道或 NgModule）<em>拥有</em>一个依赖。</p><p translation-origin=\"off\">To define a class as a service in Angular, use the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator to provide the metadata that allows Angular to inject it into a component as a <em>dependency</em>.\nSimilarly, use the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) <em>has</em> a dependency.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><em>注入器</em>是主要的机制。Angular 会在启动过程中为你创建全应用级注入器以及所需的其它注入器。你不用自己创建注入器。</p><p translation-origin=\"off\">The <em>injector</em> is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don't have to create injectors.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">该注入器会创建依赖、维护一个<em>容器</em>来管理这些依赖，并尽可能复用它们。</p><p translation-origin=\"off\">An injector creates dependencies, and maintains a <em>container</em> of dependency instances that it reuses if possible.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>提供者</em>是一个对象，用来告诉注入器应该如何获取或创建依赖。</p><p translation-origin=\"off\">A <em>provider</em> is an object that tells an injector how to obtain or create a dependency.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你的应用中所需的任何依赖，都必须使用该应用的注入器来注册一个提供者，以便注入器可以使用这个提供者来创建新实例。\n对于服务，该提供者通常就是服务类本身。</p><p translation-origin=\"off\">For any dependency that you need in your app, you must register a provider with the app's injector,\nso that the injector can use the provider to create new instances.\nFor a service, the provider is typically the service class itself.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">依赖不一定是服务 —— 它还可能是函数或值。</p><p translation-origin=\"off\">A dependency doesn't have to be a service—it could be a function, for example, or a value.</p>\n\n</div>\n<p translation-result=\"on\">当 Angular 创建组件类的新实例时，它会通过查看该组件类的构造函数，来决定该组件依赖哪些服务或其它依赖项。\n比如 <code>HeroListComponent</code> 的构造函数中需要 <code>HeroService</code>：</p><p translation-origin=\"off\">When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types. For example, the constructor of <code>HeroListComponent</code> needs <code>HeroService</code>.</p>\n\n<code-example path=\"architecture/src/app/hero-list.component.ts\" header=\"src/app/hero-list.component.ts (constructor)\" region=\"ctor\">\nconstructor(private service: HeroService) { }\n\n</code-example>\n<p translation-result=\"on\">当 Angular 发现某个组件依赖某个服务时，它会首先检查是否该注入器中已经有了那个服务的任何现有实例。如果所请求的服务尚不存在，注入器就会使用以前注册的服务提供者来制作一个，并把它加入注入器中，然后把该服务返回给 Angular。</p><p translation-origin=\"off\">When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn't yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular.</p>\n\n<p translation-result=\"on\">当所有请求的服务已解析并返回时，Angular 可以用这些服务实例为参数，调用该组件的构造函数。</p><p translation-origin=\"off\">When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.</p>\n\n<p translation-result=\"on\"><code>HeroService</code> 的注入过程如下所示：</p><p translation-origin=\"off\">The process of <code>HeroService</code> injection looks something like this.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/architecture/injector-injects.png\" alt=\"Service\" class=\"left\" width=\"479\" height=\"218\">\n</div>\n<h3 id=\"providing-services\" translation-result=\"on\">提供服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"providing-services\">Providing services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">对于要用到的任何服务，你必须至少注册一个<em>提供者</em>。服务可以在自己的元数据中把自己注册为提供者，这样可以让自己随处可用。或者，你也可以为特定的模块或组件注册提供者。要注册提供者，就要在服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器中提供它的元数据，或者在 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 或 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 的元数据中。</p><p translation-origin=\"off\">You must register at least one <em>provider</em> of any service you are going to use.\nThe provider can be part of the service's own metadata, making that service available everywhere,\nor you can register providers with specific modules or components.\nYou register providers in the metadata of the service (in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator),\nor in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> or <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">默认情况下，Angular CLI 的 <a href=\"cli/generate\"><code>ng generate service</code></a> 命令会在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器中提供元数据来把它注册到根注入器中。本教程就用这种方法注册了 HeroService 的提供者：</p><p translation-origin=\"off\">By default, the Angular CLI command <a href=\"cli/generate\"><code>ng generate service</code></a> registers a provider with the root injector for your service by including provider metadata in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator. The tutorial uses this method to register the provider of HeroService class definition.</p>\n\n</li>\n</ul>\n<code-example>\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\n</code-example>\n<p translation-result=\"on\">  当你在根一级提供服务时，Angular 会为 HeroService 创建一个单一的共享实例，并且把它注入到任何想要它的类中。这种在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据中注册提供者的方式还让 Angular 能够通过移除那些从未被用过的服务来优化大小。</p><p translation-origin=\"off\">  When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code>\nand injects it into any class that asks for it.\nRegistering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata also allows Angular to optimize an app\nby removing the service from the compiled app if it isn't used.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 当你使用<a href=\"guide/architecture-modules\">特定的 NgModule</a> 注册提供者时，该服务的同一个实例将会对该 NgModule 中的所有组件可用。要想在这一层注册，请用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 装饰器中的 <code>providers</code> 属性：</p><p translation-origin=\"off\">When you register a provider with a <a href=\"guide/architecture-modules\">specific NgModule</a>, the same instance of a service is available to all components in that NgModule. To register at this level, use the <code>providers</code> property of the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> decorator,</p>\n\n</li>\n</ul>\n<code-example>\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  providers: [\n   BackendService,\n   Logger\n ],\n ...\n})\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\">   当你在组件级注册提供者时，你会为该组件的每一个新实例提供该服务的一个新实例。\n要在组件级注册，就要在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元数据的 <code>providers</code> 属性中注册服务提供者。</p><p translation-origin=\"off\">When you register a provider at the component level, you get a new instance of the\nservice with each new instance of that component.\nAt the component level, register a service provider in the <code>providers</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata.</p>\n\n</li>\n</ul>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" header=\"src/app/hero-list.component.ts (component providers)\" region=\"providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  providers:  [ HeroService ]\n})\n\n</code-example>\n<p translation-result=\"on\">要了解更多细节，请参见<a href=\"guide/dependency-injection\">依赖注入</a>一节。</p><p translation-origin=\"off\">For more detailed information, see the <a href=\"guide/dependency-injection\">Dependency Injection</a> section.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - api/core/Injectable\n - guide/architecture\n - guide/architecture-modules\n - guide/glossary\n - start/start-data\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - cli/generate\n - guide/architecture-modules\n - guide/architecture-services#dependency-injection-di\n - guide/architecture-services#introduction-to-services-and-dependency-injection\n - guide/architecture-services#providing-services\n - guide/architecture-services#service-examples\n - guide/dependency-injection\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/architecture-services.md?message=docs%3A%20请简述你的修改...\n-->"
}