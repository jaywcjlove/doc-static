{
  "id": "guide/change-detection-zone-pollution",
  "title": "解决区域（Zone）污染",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/change-detection-zone-pollution.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"resolving-zone-pollution\">Resolving zone pollution<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#resolving-zone-pollution\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"解决区域zone污染\">解决区域（Zone）污染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#解决区域zone污染\"><i class=\"material-icons\">link</i></a></h1>\n<p><strong>Zone.js</strong> is a signaling mechanism that Angular uses to detect when an application state might have changed. It captures asynchronous operations like <code>setTimeout</code>, network requests, and event listeners. Angular schedules change detection based on signals from Zone.js</p>\n<p><strong>Zone.js</strong>是一种信号机制，Angular 用它来检测应用程序状态何时可能已更改。它捕获异步操作，比如 <code>setTimeout</code>、网络请求和事件侦听器。Angular 会根据来自 Zone.js 的信号安排变更检测</p>\n<p>In some cases scheduled <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\">tasks</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\">microtasks</a> don’t make any changes in the data model, which makes running change detection unnecessary. Common examples are:</p>\n<p>在某些情况下，已安排的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\">任务</a>或<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\">微任务</a>不会对数据模型进行任何更改，这使得运行变更检测变得不必要。常见的例子是：</p>\n<ul>\n<li>\n<p><code>requestAnimationFrame</code>, <code>setTimeout</code> or <code>setInterval</code></p>\n<p><code>requestAnimationFrame</code> 、 <code>setTimeout</code> 或 <code>setInterval</code></p>\n</li>\n<li>\n<p>Task or microtask scheduling by third-party libraries</p>\n<p>第三方库的任务或微任务调度</p>\n</li>\n</ul>\n<p>This section covers how to identify such conditions, and how to run code outside the Angular zone to avoid unnecessary change detection calls.</p>\n<p>本节介绍如何识别此类条件，以及如何在 Angular 区域外运行代码以避免不必要的变更检测调用。</p>\n<h2 id=\"identifying-unnecessary-change-detection-calls\">Identifying unnecessary change detection calls<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"识别不必要的变更检测调用\">识别不必要的变更检测调用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#识别不必要的变更检测调用\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can detect unnecessary change detection calls using Angular DevTools. Often they appear as consecutive bars in the profiler’s timeline with source <code>setTimeout</code>, <code>setInterval</code>, <code>requestAnimationFrame</code>, or an event handler. When you have limited calls within your application of these APIs, the change detection invocation is usually caused by a third-party library.</p>\n<p>你可以用 Angular DevTools 检测不必要的变更检测调用。它们通常在分析器的时间线中显示为连续的条形，其源为 <code>setTimeout</code>、<code>setInterval</code>、<code>requestAnimationFrame</code> 或事件处理程序。当你在应用程序中对这些 API 的调用有限时，变更检测调用通常是由第三方库引起的。</p>\n<div class=\"lightbox\">\n  <img alt=\"Angular DevTools profiler preview showing Zone pollution\" src=\"generated/images/guide/change-detection/zone-pollution.png\" width=\"1600\" height=\"480\">\n</div>\n<p>In the image above, there is a series of change detection calls triggered by event handlers associated with an element. That’s a common challenge when using third-party, non-native Angular components, which do not alter the default behavior of <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code>.</p>\n<p>在上图中，有一系列由与元素关联的事件处理程序触发的变更检测调用。这是使用第三方非原生 Angular 组件时的常见挑战，这些组件不会更改 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的默认行为。</p>\n<h2 id=\"run-tasks-outside-ngzone\">Run tasks outside <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#run-tasks-outside-ngzone\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"在-ngzone-之外运行任务\">在 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 之外运行任务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#在-ngzone-之外运行任务\"><i class=\"material-icons\">link</i></a></h2>\n<p>In such cases, you can instruct Angular to avoid calling change detection for tasks scheduled by a given piece of code using <a href=\"https://angular.io/guide/zone\">NgZone</a>.</p>\n<p>在这种情况下，你可以指示 Angular 避免使用<a href=\"https://angular.io/guide/zone\">NgZone</a>为给定代码段调度的任务调用变更检测。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(...)\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => setInterval(pollForUpdates), 500);\n  }\n}\n</code-example>\n<p>The preceding snippet instructs Angular to call <code>setInterval</code> outside the Angular Zone and skip running change detection after <code>pollForUpdates</code> runs.</p>\n<p>上面的代码段告诉 Angular 要在 Angular Zone 之外执行 <code>setInterval</code> 调用，并在 <code>pollForUpdates</code> 运行之后跳过运行变更检测。</p>\n<p>Third-party libraries commonly trigger unnecessary change detection cycles because they weren't authored with Zone.js in mind. Avoid these extra cycles by calling library APIs outside the Angular zone:</p>\n<p>第三方库通常会触发不必要的变更检测周期，因为它们在创作时并没有考虑到 Zone.js。通过调用 Angular 区域外的库 API 来避免这些额外的周期：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport * as Plotly from 'plotly.js-dist-min';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(...)\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      Plotly.newPlot('chart', data);\n    });\n  }\n}\n</code-example>\n<p>Running <code>Plotly.newPlot('chart', data);</code> within <code>runOutsideAngular</code> instructs the framework that it shouldn’t run change detection after the execution of tasks scheduled by the initialization logic.</p>\n<p>在 <code>runOutsideAngular</code> 中运行 <code>Plotly.newPlot('chart', data);</code> 会告诉框架它不应该在执行此初始化逻辑安排的这些任务之后执行变更检测。</p>\n<p>For example, if <code>Plotly.newPlot('chart', data)</code> adds event listeners to a DOM element, Angular does not run change detection after the execution of their handlers.</p>\n<p>比如，如果 <code>Plotly.newPlot('chart', data)</code> 将事件侦听器添加到 DOM 元素，则 Angular 将不会在执行其处理程序之后执行变更检测。</p>\n\n  <div class=\"reviewed\">最后复查时间： 5/4/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgZone\n - api/core/OnInit\n - guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\n - guide/change-detection-zone-pollution#resolving-zone-pollution\n - guide/change-detection-zone-pollution#run-tasks-outside-ngzone\n - guide/change-detection-zone-pollution#在-ngzone-之外运行任务\n - guide/change-detection-zone-pollution#解决区域zone污染\n - guide/change-detection-zone-pollution#识别不必要的变更检测调用\n - https://angular.io/guide/zone\n - https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\n - https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/change-detection-zone-pollution.md?message=docs%3A%20请简述你的修改...\n-->"
}