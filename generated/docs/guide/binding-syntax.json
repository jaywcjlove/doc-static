{
  "id": "guide/binding-syntax",
  "title": "绑定语法：概述",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/binding-syntax.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"binding-syntax\">Binding syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#binding-syntax\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"绑定语法概述\">绑定语法：概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#绑定语法概述\"><i class=\"material-icons\">link</i></a></h1>\n<p>Data binding automatically keeps your page up-to-date based on your application's state.\nYou use data binding to specify things such as the source of an image, the state of a button, or data for a particular user.</p>\n<p>数据绑定会根据应用程序的状态自动使你的页面保持最新状态。你可以使用数据绑定来指定诸如图像源、按钮状态或特定用户的数据之类的内容。</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n<p>包含本指南中代码片段的可工作范例，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"data-binding-and-html\">Data binding and HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#data-binding-and-html\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"数据绑定和-html\">数据绑定和 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#数据绑定和-html\"><i class=\"material-icons\">link</i></a></h2>\n<p>Developers can customize HTML by specifying attributes with string values.\nIn the following example, <code>class</code>, <code>src</code>, and <code>disabled</code> modify the <code>&#x3C;div></code>, <code>&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a>></code>, and <code>&#x3C;button></code> elements respectively.</p>\n<p>开发人员可以使用字符串值指定属性来定制 HTML。在以下示例中，<code>class</code>、<code>src</code> 和 <code>disabled</code> 修饰了 <code>&#x3C;div></code>、<code>&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a>></code> 和 <code>&#x3C;button></code> 元素。</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;div class=\"special\">Plain old HTML&#x3C;/div>\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> src=\"images/item.png\">\n&#x3C;button disabled>Save&#x3C;/button>\n\n</code-example>\n<p>Use data binding to control things like the state of a button:</p>\n<p>可以使用数据绑定来控制按钮状态等：</p>\n<code-example header=\"src/app/app.component.html\" path=\"binding-syntax/src/app/app.component.html\" region=\"disabled-button\">\n&#x3C;!-- Bind button disabled state to `isUnchanged` property -->\n&#x3C;button type=\"button\" [disabled]=\"isUnchanged\">Save&#x3C;/button>\n\n</code-example>\n<p>Notice that the binding is to the <code>disabled</code> property of the button's DOM element, not the attribute.\nData binding works with properties of DOM elements, components, and directives, not HTML attributes.</p>\n<p>请注意，绑定是绑定到 <code>disabled</code> 这个 Property（属性），而不是 Attribute（属性）。数据绑定使用的是 DOM 元素、组件和指令的 Property，而不是 HTML Attribute。</p>\n<p><a id=\"html-attribute-vs-dom-property\"></a></p>\n<h3 id=\"html-attributes-and-dom-properties\">HTML attributes and DOM properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#html-attributes-and-dom-properties\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"html-attribute-和-dom-property\">HTML Attribute 和 DOM Property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#html-attribute-和-dom-property\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular binding distinguishes between HTML attributes and DOM properties.</p>\n<p>对于 Angular 绑定来说，HTML Attribute 和 DOM Property 是有显著区别的。</p>\n<p>Attributes initialize DOM properties and you can configure them to modify an element's behavior.\nProperties are features of DOM nodes.</p>\n<p>Attribute 会初始化 DOM Property，你可以配置它们以修改元素的行为。Property 则是 DOM 节点的特性。</p>\n<ul>\n<li>\n<p>A few HTML attributes have 1:1 mapping to properties; for example,</p>\n<p>少数 HTML Attribute 可以 1:1 映射到同名的 Property。比如,</p>\n<code-example format=\"html\" hidecopy=\"\" language=\"html\">\n\nid\n\n</code-example>\n</li>\n<li>\n<p>Some HTML attributes don't have corresponding properties; for example,</p>\n<p>某些 HTML Attribute 没有对应的 Property；比如，</p>\n<code-example format=\"html\" hidecopy=\"\" language=\"html\">\n\naria-*\n\n</code-example>\n</li>\n<li>\n<p>Some DOM properties don't have corresponding attributes; for example,</p>\n<p>某些 DOM Property 没有对应的 Attribute；比如，</p>\n<code-example format=\"html\" hidecopy=\"\" language=\"html\">\n\ntextContent\n\n</code-example>\n</li>\n</ul>\n<div class=\"alert is-important\">\n<p>Remember that HTML attributes and DOM properties are different things, even when they have the same name.</p>\n<p>请记住，即使 HTML Attribute 和 DOM Property 具有相同的名称，它们也仍然是不同的。</p>\n</div>\n<p>In Angular, the only role of HTML attributes is to initialize element and directive state.</p>\n<p>在 Angular 中，HTML Attribute 的唯一作用是初始化元素和指令的状态。</p>\n<p>When you write a data binding, you're dealing exclusively with the DOM properties and events of the target object.</p>\n<p>编写数据绑定时，你只是在处理 DOM Property 和目标对象的事件。</p>\n<h4 id=\"example-1-an-input\">Example 1: an <code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#example-1-an-input\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"范例-1input\">范例 1：<code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#范例-1input\"><i class=\"material-icons\">link</i></a></h4>\n<p>When the browser renders <code>&#x3C;input type=\"text\" value=\"Sarah\"></code>, it creates a corresponding DOM node with a <code>value</code> property and initializes that <code>value</code> to \"Sarah\".</p>\n<p>当浏览器渲染 <code>&#x3C;input type=\"text\" value=\"Sarah\"></code> 时，它将创建一个具有 <code>value</code> 这个 Property 的相应 DOM 节点，并将其 <code>value</code> 初始化为 “Sarah”。</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;input type=\"text\" value=\"Sarah\">\n\n</code-example>\n<p>When the user enters <code>Sally</code> into the <code>&#x3C;input></code>, the DOM element <code>value</code> property becomes <code>Sally</code>.\nHowever, if you look at the HTML attribute <code>value</code> using <code>input.getAttribute('value')</code>, you can see that the attribute remains unchanged —it returns \"Sarah\".</p>\n<p>当用户将 <code>Sally</code> 输入到 <code>&#x3C;input></code> 时，DOM 元素的 <code>value</code> Property 会变为 <code>Sally</code>。但是，如果使用 <code>input.getAttribute('value')</code> 读取 <code>value</code>，你会看到该 Attribute 保持不变 - 它仍然会返回 “Sarah”。</p>\n<p>The HTML attribute <code>value</code> specifies the initial value; the DOM <code>value</code> property is the current value.</p>\n<p>作为 HTML Attribute 的 <code>value</code> 会指定初始值； 而 DOM 的 Property <code>value</code> 则是当前值。</p>\n<p>To see attributes versus DOM properties in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax.</p>\n<p>要在运行的应用程序中查看 Attribute 与 DOM Property，参阅<live-example name=\"binding-syntax\"></live-example>，请特别关注绑定语法的信息。</p>\n<h4 id=\"example-2-a-disabled-button\">Example 2: a disabled button<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#example-2-a-disabled-button\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"范例-2禁用按钮\">范例 2：禁用按钮<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#范例-2禁用按钮\"><i class=\"material-icons\">link</i></a></h4>\n<p>A button's <code>disabled</code> property is <code>false</code> by default so the button is enabled.</p>\n<p>默认情况下，按钮的 <code>disabled</code> Property 为 <code>false</code>，因此启用了此按钮。</p>\n<p>When you add the <code>disabled</code> attribute, you are initializing the button's <code>disabled</code> property to <code>true</code> which disables the button.</p>\n<p>当添加 <code>disabled</code> Attribute 时，你正在将按钮的 <code>disabled</code> Property 初始化为 <code>true</code>，这将禁用该按钮。</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;button disabled>Test Button&#x3C;/button>\n\n</code-example>\n<p>Adding and removing the <code>disabled</code> attribute disables and enables the button.\nHowever, the value of the attribute is irrelevant, which is why you cannot enable a button by writing <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code>.</p>\n<p>添加或删除 <code>disabled</code> 这个 Attribute 将禁用或启用该按钮。但是，该 Attribute 的值无关紧要，这就是为什么你无法通过编写 <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code> 来启用按钮的原因。</p>\n<p>To control the state of the button, set the <code>disabled</code> property instead.</p>\n<p>要控制按钮的状态，请设置 <code>disabled</code> 这个 Property。</p>\n<h4 id=\"property-and-attribute-comparison\">Property and attribute comparison<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#property-and-attribute-comparison\"><i class=\"material-icons\">link</i></a></h4>\n<h4 id=\"property-和-attribute-的比较\">Property 和 Attribute 的比较<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#property-和-attribute-的比较\"><i class=\"material-icons\">link</i></a></h4>\n<p>Though you could technically set the <code>[attr.disabled]</code> attribute binding, the values are different in that the property binding must be a boolean value, while its corresponding attribute binding relies on whether the value is <code>null</code> or not.\nConsider the following:</p>\n<p>尽管从技术角度上说，可以设置 <code>[attr.disabled]</code> Attribute 这个绑定，但是它的值是不同的，差异在于其 Property 绑定必须是布尔值，而其相应的 Attribute 绑定则取决于该值是否为 <code>null</code>。考虑以下情况：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;input [disabled]=\"condition ? true : false\">\n&#x3C;input [attr.disabled]=\"condition ? 'disabled' : null\">\n\n</code-example>\n<p>The first line, which uses the <code>disabled</code> property, uses a boolean value.\nThe second line, which uses the disabled attribute checks for <code>null</code>.</p>\n<p>第一行使用 <code>disabled</code> 这个 Property，要使用布尔值。第二行使用 <code>disabled</code> 这个 Attribute，要判定是否为 <code>null</code>。</p>\n<p>Generally, use property binding over attribute binding as a boolean value is easy to read, the syntax is shorter, and a property is more performant.</p>\n<p>通常，要使用 Property 绑定而不是 Attribute 绑定。因为布尔值很容易阅读，语法较短，并且 Property 绑定的性能更高。</p>\n<p>To see the <code>disabled</code> button example in a functioning application, see the <live-example></live-example>.\nThis example shows you how to toggle the disabled property from the component.</p>\n<p>要在运行的应用程序中查看 <code>disabled</code> 按钮，请参见<live-example></live-example>。本示例说明如何从组件中切换 disabled 这个 Property。</p>\n<h2 id=\"types-of-data-binding\">Types of data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#types-of-data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"数据绑定的类型\">数据绑定的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#数据绑定的类型\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular provides three categories of data binding according to the direction of data flow:</p>\n<p>Angular 根据数据流的方向提供三种类型的数据绑定：</p>\n<ul>\n<li>\n<p>From source to view</p>\n<p>从源到视图</p>\n</li>\n<li>\n<p>From view to source</p>\n<p>从视图到源</p>\n</li>\n<li>\n<p>In a two-way sequence of view to source to view</p>\n<p>双向，从视图到源再到视图</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Syntax</th>\n<th align=\"left\">Category</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">类型</td>\n<td align=\"left\">语法</td>\n<td align=\"left\">分类</td>\n</tr>\n<tr>\n<td align=\"left\">Interpolation <br> Property <br> Attribute <br> Class <br> Style</td>\n<td align=\"left\"><code-example> {{expression}} \n[target]=\"expression\" </code-example></td>\n<td align=\"left\">One-way from data source to view target</td>\n</tr>\n<tr>\n<td align=\"left\">插值 <br> Property <br> Attribute <br> 类 <br> 样式</td>\n<td align=\"left\"><code-example> {{expression}} \n[target]=\"expression\" </code-example></td>\n<td align=\"left\">单向从数据源到视图</td>\n</tr>\n<tr>\n<td align=\"left\">Event</td>\n<td align=\"left\"><code-example> (target)=\"statement\" </code-example></td>\n<td align=\"left\">One-way from view target to data source</td>\n</tr>\n<tr>\n<td align=\"left\">事件</td>\n<td align=\"left\"><code-example> (target)=\"statement\" </code-example></td>\n<td align=\"left\">单向从视图到数据源</td>\n</tr>\n<tr>\n<td align=\"left\">Two-way</td>\n<td align=\"left\"><code-example> [(target)]=\"expression\" </code-example></td>\n<td align=\"left\">Two-way</td>\n</tr>\n<tr>\n<td align=\"left\">双向</td>\n<td align=\"left\"><code-example> [(target)]=\"expression\" </code-example></td>\n<td align=\"left\">双向</td>\n</tr>\n</tbody>\n</table>\n<p>Binding types other than interpolation have a target name to the left of the equal sign.\nThe target of a binding is a property or event, which you surround with square bracket (<code>[ ]</code>) characters, parenthesis (<code>( )</code>) characters, or both (<code>[( )]</code>) characters.</p>\n<p>插值以外的绑定类型在等号左侧有一个目标名称。绑定的目标是 property 或事件，你可以用方括号 ( <code>[ ]</code> ) 字符、括号 ( <code>( )</code> ) 字符或两者 ( <code>[( )]</code> ) 字符括起来。</p>\n<p>The binding punctuation of <code>[]</code>, <code>()</code>, <code>[()]</code>, and the prefix specify the direction of data flow.</p>\n<p><code>[]</code>、<code>()</code>、<code>[()]</code> 这些绑定标点以及前缀，用来指定数据流的方向。</p>\n<ul>\n<li>\n<p>Use <code>[]</code> to bind from source to view</p>\n<p>使用 <code>[]</code> 从源绑定到视图</p>\n</li>\n<li>\n<p>Use <code>()</code> to bind from view to source</p>\n<p>使用 <code>()</code> 从视图绑定到源</p>\n</li>\n<li>\n<p>Use <code>[()]</code> to bind in a two-way sequence of view to source to view</p>\n<p>使用 <code>[()]</code> 进行双向绑定，将视图绑定到源再绑定到视图</p>\n</li>\n</ul>\n<p>Place the expression or statement to the right of the equal sign within double quote (<code>\"\"</code>) characters.\nFor more information see <a href=\"guide/interpolation\">Interpolation</a> and <a href=\"guide/template-statements\">Template statements</a>.</p>\n<p>将表达式或语句放在双引号 <code>\"\"</code> 中等号的右侧。有关更多信息，请参见<a href=\"guide/interpolation\">插值</a>和<a href=\"guide/template-statements\">模板语句</a>。</p>\n<h2 id=\"binding-types-and-targets\">Binding types and targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#binding-types-and-targets\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"绑定类型和目标\">绑定类型和目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#绑定类型和目标\"><i class=\"material-icons\">link</i></a></h2>\n<p>The target of a data binding can be a property, an event, or an attribute name.\nEvery public member of a source directive is automatically available for binding in a template expression or statement.\nThe following table summarizes the targets for the different binding types.</p>\n<p>数据绑定的目标可以是 Property、事件或 Attribute 的名称。源指令的每个 public 成员都可以自动用于绑定模板表达式或模板语句中。下表总结了不同绑定类型的目标。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Target</th>\n<th align=\"left\">Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">类型</td>\n<td align=\"left\">目标</td>\n<td align=\"left\">例子</td>\n</tr>\n<tr>\n<td align=\"left\">Property</td>\n<td align=\"left\">Element property <br> Component property <br> Directive property</td>\n<td align=\"left\"><code>alt</code>, <code>src</code>, <code>hero</code>, and <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> in the following: <code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\">\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [alt]=\"hero.name\" [src]=\"heroImageUrl\">\n&#x3C;app-hero-detail [hero]=\"currentHero\">&#x3C;/app-hero-detail>\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example> <!-- For more information, see [Property Binding](guide/property-binding). --></td>\n</tr>\n<tr>\n<td align=\"left\">属性</td>\n<td align=\"left\">元素属性 <br> 组件属性 <br> 指令属性</td>\n<td align=\"left\">下面例子中的 <code>alt</code>、<code>src</code>、<code>hero</code> 和 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>：<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\">\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [alt]=\"hero.name\" [src]=\"heroImageUrl\">\n&#x3C;app-hero-detail [hero]=\"currentHero\">&#x3C;/app-hero-detail>\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example> <!-- For more information, see [Property Binding](guide/property-binding). --></td>\n</tr>\n<tr>\n<td align=\"left\">Event</td>\n<td align=\"left\">Element event <br> Component event <br> Directive event</td>\n<td align=\"left\"><code>click</code>, <code>deleteRequest</code>, and <code>myClick</code> in the following: <code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\">\n&#x3C;button type=\"button\" (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;app-hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/app-hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">事件</td>\n<td align=\"left\">元素事件 <br> 组件事件 <br> 指令事件</td>\n<td align=\"left\">下面例子中的 <code>click</code>、<code>deleteRequest</code> 和 <code>myClick</code>：<code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\">\n&#x3C;button type=\"button\" (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;app-hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/app-hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Two-way</td>\n<td align=\"left\">Event and property</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">双向</td>\n<td align=\"left\">事件与属性</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Attribute</td>\n<td align=\"left\">Attribute (the exception)</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\">\n&#x3C;button type=\"button\" [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Attribute</td>\n<td align=\"left\">Attribute (少数特例情况)</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\">\n&#x3C;button type=\"button\" [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Class</td>\n<td align=\"left\"><code>class</code> property</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">类</td>\n<td align=\"left\"><code>class</code> 属性</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Style</td>\n<td align=\"left\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> property</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\">\n&#x3C;button type=\"button\" [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\">样式</td>\n<td align=\"left\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 属性</td>\n<td align=\"left\"><code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\">\n&#x3C;button type=\"button\" [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example></td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG8002\n - guide/accessibility\n - guide/event-binding\n - guide/example-apps-list\n - guide/interpolation\n - guide/property-binding\n - guide/styleguide\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgClass\n - api/common/NgOptimizedImage\n - api/forms/NgModel\n - guide/binding-syntax#binding-syntax\n - guide/binding-syntax#binding-types-and-targets\n - guide/binding-syntax#data-binding-and-html\n - guide/binding-syntax#example-1-an-input\n - guide/binding-syntax#example-2-a-disabled-button\n - guide/binding-syntax#html-attribute-和-dom-property\n - guide/binding-syntax#html-attributes-and-dom-properties\n - guide/binding-syntax#property-and-attribute-comparison\n - guide/binding-syntax#property-和-attribute-的比较\n - guide/binding-syntax#types-of-data-binding\n - guide/binding-syntax#数据绑定和-html\n - guide/binding-syntax#数据绑定的类型\n - guide/binding-syntax#绑定类型和目标\n - guide/binding-syntax#绑定语法概述\n - guide/binding-syntax#范例-1input\n - guide/binding-syntax#范例-2禁用按钮\n - guide/interpolation\n - guide/template-statements\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/binding-syntax.md?message=docs%3A%20请简述你的修改...\n-->"
}