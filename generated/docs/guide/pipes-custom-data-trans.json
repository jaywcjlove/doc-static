{
  "id": "guide/pipes-custom-data-trans",
  "title": "为自定义数据转换创建管道",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/pipes-custom-data-trans.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"creating-pipes-for-custom-data-transformations\">Creating pipes for custom data transformations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"为自定义数据转换创建管道\">为自定义数据转换创建管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#为自定义数据转换创建管道\"><i class=\"material-icons\">link</i></a></h1>\n<p>Create custom pipes to encapsulate transformations that are not provided with the built-in pipes.\nThen, use your custom pipe in template expressions, the same way you use built-in pipes—to transform input values to output values for display.</p>\n<p>创建自定义管道来封装那些内置管道没有提供的转换。然后就可以在模板表达式中使用自定义管道了，像内置管道一样，把输入值转换成显示输出。</p>\n<h2 id=\"marking-a-class-as-a-pipe\">Marking a class as a pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"把一个类标记为一个管道\">把一个类标记为一个管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#把一个类标记为一个管道\"><i class=\"material-icons\">link</i></a></h2>\n<p>To mark a class as a pipe and supply configuration metadata, apply the <a href=\"api/core/Pipe\" title=\"API reference for Pipe\"><code>@Pipe</code></a> <a href=\"guide/glossary#decorator--decoration\" title=\"Definition for decorator\">decorator</a> to the class.</p>\n<p>要将类标记为管道并提供配置元数据，请将<a href=\"api/core/Pipe\" title=\"管道的 API 参考\"><code>@Pipe</code></a><a href=\"guide/glossary#decorator--decoration\" title=\"装饰器的定义\">装饰器</a>添加到此类上。</p>\n<p>Use <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">UpperCamelCase</a> (the general convention for class names) for the pipe class name, and <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">camelCase</a> for the corresponding <code>name</code> string.\nDo not use hyphens in the <code>name</code>.</p>\n<p>使用<a href=\"guide/glossary#case-types\" title=\"案例类型的定义\">UpperCamelCase</a>（类名的一般约定）作为管道类名，并使用<a href=\"guide/glossary#case-types\" title=\"案例类型的定义\">camelCase</a>作为对应的 <code>name</code> 字符串。不要在 <code>name</code> 中使用连字符。</p>\n<p>For details and more examples, see <a href=\"guide/styleguide#pipe-names\" title=\"Pipe names in the Angular coding style guide\">Pipe names</a>.</p>\n<p>有关详细信息和更多示例，请参阅<a href=\"guide/styleguide#pipe-names\" title=\"Angular 编码风格指南中的管道名称\">管道名称</a>。</p>\n<p>Use <code>name</code> in template expressions as you would for a built-in pipe.</p>\n<p>在模板表达式中使用 <code>name</code> 就像在内置管道中一样。</p>\n<div class=\"alert is-important\">\n<ul>\n<li>\n<p>Include your pipe in the <code>declarations</code> field of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata in order for it to be available to a template. See the <code>app.module.ts</code> file in the example application (<live-example></live-example>). For details, see <a href=\"guide/ngmodules\" title=\"NgModules introduction\">NgModules</a>.</p>\n<p>将你的管道包含在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据的 <code>declarations</code> 字段中，以使其可用于模板。请参阅示例应用程序中的 <code>app.module.ts</code> 文件（<live-example></live-example>）。有关详细信息，请参阅<a href=\"guide/ngmodules\" title=\"NgModules 介绍\">NgModules</a>。</p>\n</li>\n<li>\n<p>Register your custom pipes. The <a href=\"cli\" title=\"CLI Overview and Command Reference\">Angular CLI</a> <a href=\"cli/generate#pipe\" title=\"ng generate pipe in the CLI Command Reference\"><code>ng generate pipe</code></a> command registers the pipe automatically.</p>\n<p>注册自定义管道。<a href=\"cli\" title=\"CLI 概述和命令参考\">Angular CLI</a> 的 <a href=\"cli/generate#pipe\" title=\"ng 在 CLI Command Reference 中生成管道\"><code>ng generate pipe</code></a> 命令会自动注册该管道。</p>\n</li>\n</ul>\n</div>\n<h2 id=\"using-the-pipetransform-interface\">Using the PipeTransform interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"使用-pipetransform-接口\">使用 PipeTransform 接口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#使用-pipetransform-接口\"><i class=\"material-icons\">link</i></a></h2>\n<p>Implement the <a href=\"api/core/PipeTransform\" title=\"API reference for PipeTransform\"><code>PipeTransform</code></a> interface in your custom pipe class to perform the transformation.</p>\n<p>在自定义管道类中实现 <a href=\"api/core/PipeTransform\" title=\"PipeTransform 的 API 参考\"><code>PipeTransform</code></a> 接口来执行转换。</p>\n<p>Angular invokes the <code>transform</code> method with the value of a binding as the first argument, and any parameters as the second argument in list form, and returns the transformed value.</p>\n<p>Angular 调用 <code>transform</code> 方法，该方法使用绑定的值作为第一个参数，把其它任何参数都以列表的形式作为第二个参数，并返回转换后的值。</p>\n<h2 id=\"example-transforming-a-value-exponentially\">Example: Transforming a value exponentially<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"范例指数级转换\">范例：指数级转换<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#范例指数级转换\"><i class=\"material-icons\">link</i></a></h2>\n<p>In a game, you might want to implement a transformation that raises a value exponentially to increase a hero's power.\nFor example, if the hero's score is 2, boosting the hero's power exponentially by 10 produces a score of 1024.\nUse a custom pipe for this transformation.</p>\n<p>在游戏中，可能希望实现一种指数级转换，以指数级增加英雄的力量。比如，如果英雄的得分是 2，那么英雄的能量会指数级增长 10 次，最终得分为 1024。你可以使用自定义管道进行这种转换。</p>\n<p>The following code example shows two component definitions:</p>\n<p>下列代码范例显示了两个组件定义：</p>\n<ul>\n<li>\n<p>The <code>exponential-strength.pipe.ts</code> component defines a custom pipe named <code>exponentialStrength</code> with the <code>transform</code> method that performs the transformation.\nIt defines an argument to the <code>transform</code> method (<code>exponent</code>) for a parameter passed to the pipe.</p>\n<p><code>exponential-strength.pipe.ts</code> 通过一个执行转换的 <code>transform</code> 方法定义了一个名为 <code>exponentialStrength</code> 的自定义管道。它为传给管道的参数定义了 <code>transform</code> 方法的一个参数（<code>exponent</code>）。</p>\n</li>\n<li>\n<p>The <code>power-booster.component.ts</code> component demonstrates how to use the pipe, specifying a value (<code>2</code>) and the exponent parameter (<code>10</code>).</p>\n<p><code>power-booster.component.ts</code> 组件演示了如何使用该管道，指定了一个值（<code>2</code>）和一个 exponent 参数（<code>10</code>）。</p>\n</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 | exponentialStrength:10 }}\n *   formats to: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'exponentialStrength'})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent = 1): number {\n    return Math.pow(value, exponent);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-power-booster',\n  template: `\n    &#x3C;h2>Power Booster&#x3C;/h2>\n    &#x3C;p>Super power boost: {{2 | exponentialStrength: 10}}&#x3C;/p>\n  `\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p>The browser displays the following:</p>\n<p>浏览器显示如下：</p>\n<code-example language=\"none\">\n\nPower Booster\n\nSuperpower boost: 1024\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>To examine the behavior of the <code>exponentialStrength</code> pipe in the <live-example></live-example>, change the value and optional exponent in the template.</p>\n<p>可以到<live-example></live-example>中体验 <code>exponentialStrength</code> 管道的行为，可以更改模板中的值和可选的指数值。</p>\n</div>\n\n  <div class=\"reviewed\">最后复查时间： 4/1/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/glossary#decorator--decoration\n - guide/ngmodules\n - guide/pipes-custom-data-trans#creating-pipes-for-custom-data-transformations\n - guide/pipes-custom-data-trans#example-transforming-a-value-exponentially\n - guide/pipes-custom-data-trans#marking-a-class-as-a-pipe\n - guide/pipes-custom-data-trans#using-the-pipetransform-interface\n - guide/pipes-custom-data-trans#为自定义数据转换创建管道\n - guide/pipes-custom-data-trans#使用-pipetransform-接口\n - guide/pipes-custom-data-trans#把一个类标记为一个管道\n - guide/pipes-custom-data-trans#范例指数级转换\n - guide/styleguide#pipe-names\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/pipes-custom-data-trans.md?message=docs%3A%20请简述你的修改...\n-->"
}