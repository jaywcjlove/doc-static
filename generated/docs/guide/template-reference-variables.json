{
  "id": "guide/template-reference-variables",
  "title": "理解模板变量",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/template-reference-variables.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"understanding-template-variables\">Understanding template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#understanding-template-variables\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"理解模板变量\">理解模板变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#理解模板变量\"><i class=\"material-icons\">link</i></a></h1>\n<p>Template variables help you use data from one part of a template in another part of the template.\nUse template variables to perform tasks such as respond to user input or finely tune your application's forms.</p>\n<p>模板变量可以帮助你在模板的另一部分使用这个部分的数据。使用模板变量，你可以执行某些任务，比如响应用户输入或微调应用的表单。</p>\n<p>A template variable can refer to the following:</p>\n<p>模板变量可以引用这些东西：</p>\n<ul>\n<li>\n<p>a DOM element within a template</p>\n<p>模板中的 DOM 元素</p>\n</li>\n<li>\n<p>a directive or component</p>\n<p>指令或组件</p>\n</li>\n<li>\n<p>a <a href=\"api/core/TemplateRef\">TemplateRef</a> from an <a href=\"api/core/ng-template\">ng-template</a></p>\n<p>来自 <a href=\"api/core/ng-template\">ng-template</a> 的 <a href=\"api/core/TemplateRef\">TemplateRef</a></p>\n</li>\n<li>\n<p>a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN：Web Components\">Web 组件</a></p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n<p>本章包含代码片段的工作实例参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"前提条件\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#前提条件\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><a href=\"guide/template-overview\">Understanding templates</a></p>\n<p><a href=\"guide/template-overview\">了解模板</a></p>\n</li>\n</ul>\n<h2 id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"语法\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#语法\"><i class=\"material-icons\">link</i></a></h2>\n<p>In the template, you use the hash symbol, <code>#</code>, to declare a template variable.\nThe following template variable, <code>#phone</code>, declares a <code>phone</code> variable with the <code>&#x3C;input></code> element as its value.</p>\n<p>在模板中，要使用井号 <code>#</code> 来声明一个模板变量。下列模板变量 <code>#phone</code> 声明了一个名为 <code>phone</code> 的变量，其值为此 <code>&#x3C;input></code> 元素。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>Refer to a template variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n<p>可以在组件模板中的任何地方引用某个模板变量。这里的 <code>&#x3C;button></code> 就引用了 <code>phone</code> 变量。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button type=\"button\" (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<h2 id=\"how-angular-assigns-values-to-template-variables\">How Angular assigns values to template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"angular-是如何为模板变量赋值的\">Angular 是如何为模板变量赋值的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#angular-是如何为模板变量赋值的\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular assigns a template variable a value based on where you declare the variable:</p>\n<p>Angular 根据你所声明的变量的位置给模板变量赋值：</p>\n<ul>\n<li>\n<p>If you declare the variable on a component, the variable refers to the component instance.</p>\n<p>如果在组件上声明变量，该变量就会引用该组件实例。</p>\n</li>\n<li>\n<p>If you declare the variable on a standard HTML tag, the variable refers to the element.</p>\n<p>如果在标准的 HTML 标记上声明变量，该变量就会引用该元素。</p>\n</li>\n<li>\n<p>If you declare the variable on an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, the variable refers to a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance which represents the template.\nFor more information on <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code>, see <a href=\"guide/structural-directives#asterisk\">How Angular uses the asterisk, <code>*</code>, syntax</a> in <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n<p>如果你在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素上声明变量，该变量就会引用一个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 实例来代表此模板。关于 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 的更多信息，请参阅<a href=\"guide/structural-directives#asterisk\">结构型指令</a> 中的 <a href=\"guide/structural-directives#asterisk\">Angular 如何使用 <code>*</code> 语法</a>部分。</p>\n</li>\n</ul>\n<h2 id=\"variable-specifying-a-name\">Variable specifying a name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#variable-specifying-a-name\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"指定名称的变量\">指定名称的变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#指定名称的变量\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p>If the variable specifies a name on the right-hand side, such as <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>, the variable refers to the directive or component on the element with a matching <code>exportAs</code> name.</p>\n<p>如果该变量在右侧指定了一个名字，比如 <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>，那么该变量就会引用所在元素上具有这个 <code>exportAs</code> 名字的指令或组件。</p>\n<!-- What does the second half of this mean?^^ Can we explain this more fully? Could I see a working example? -kw -->\n</li>\n</ul>\n<h3 id=\"using-ngform-with-template-variables\">Using <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> with template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#using-ngform-with-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"将-ngform-与模板变量一起使用\">将 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 与模板变量一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#将-ngform-与模板变量一起使用\"><i class=\"material-icons\">link</i></a></h3>\n<p>In most cases, Angular sets the template variable's value to the element on which it occurs.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n<p>在大多数情况下，Angular 会把模板变量的值设置为它所在的元素。在前面的例子中，<code>phone</code> 引用的是电话号码 <code>&#x3C;input></code>。该按钮的 click 处理程序会把这个 <code>&#x3C;input></code> 的值传给该组件的 <code>callPhone()</code> 方法。</p>\n<p>The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive demonstrates getting a reference to a different value by referencing a directive's <code>exportAs</code> name.\nIn the following example, the template variable, <code>itemForm</code>, appears three times separated by HTML.</p>\n<p>这里的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令演示了如何通过引用指令的的 <code>exportAs</code> 名字来引用不同的值。在下面的例子中，模板变量 <code>itemForm</code> 在 HTML 中分别出现了三次。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\">Name&#x3C;/label>\n  &#x3C;input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p>Without the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> attribute value, the reference value of <code>itemForm</code> would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>, <code>&#x3C;form></code>.\nIf an element is an Angular Component, a reference with no attribute value will automatically reference the component instance. Otherwise, a reference with no value will reference the DOM element, even if the element has one or more directives applied to it.</p>\n<p>如果没有 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 这个属性值，<code>itemForm</code> 引用的值将是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a> 也就是 <code>&#x3C;form></code> 元素。如果某元素是一个 Angular 组件，则不带属性值的引用会自动引用此组件的实例。否则，不带属性值的引用会引用此 DOM 元素，而不管此元素上有一个或多个指令。</p>\n<!-- What is the train of thought from talking about a form element to the difference between a component and a directive? Why is the component directive conversation relevant here?  -kw I agree -alex -->\n<h2 id=\"template-variable-scope\">Template variable scope<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"模板变量的作用域\">模板变量的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#模板变量的作用域\"><i class=\"material-icons\">link</i></a></h2>\n<p>Just like variables in JavaScript or TypeScript code, template variables are scoped to the template that declares them.</p>\n<p>就像 JavaScript 或 TypeScript 代码中的变量一样，模板变量的范围为声明它们的模板。</p>\n<p>Similarly, <a href=\"guide/built-in-directives\">Structural directives</a> such as <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, or <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> declarations create a new nested template scope, much like JavaScript's control flow statements like <code>if</code> and <code>for</code> create new lexical scopes. You cannot access template variables within one of these structural directives from outside of its boundaries.</p>\n<p>同样，诸如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 类的<a href=\"guide/built-in-directives\">结构指令</a>或 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 声明会创建一个新的嵌套模板范围，就像 JavaScript 的控制流语句（例如 <code>if</code> 和 <code>for</code> 创建新的词法范围。你不能从边界外访问这些结构指令之一中的模板变量。</p>\n<div class=\"alert is-helpful\">\n<p>Define a variable only once in the template so the runtime value remains predictable.</p>\n<p>同名变量在模板中只能定义一次，这样运行时它的值就是可预测的。</p>\n</div>\n<h3 id=\"accessing-in-a-nested-template\">Accessing in a nested template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"在嵌套模板中访问\">在嵌套模板中访问<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#在嵌套模板中访问\"><i class=\"material-icons\">link</i></a></h3>\n<p>An inner template can access template variables that the outer template defines.</p>\n<p>内部模板可以访问外模板定义的模板变量。</p>\n<p>In the following example, changing the text in the <code>&#x3C;input></code> changes the value in the <code>&#x3C;span></code> because Angular immediately updates changes through the template variable, <code>ref1</code>.</p>\n<p>在下面的例子中，修改 <code>&#x3C;input></code> 中的文本值也会改变 <code>&#x3C;span></code> 中的值，因为 Angular 会立即通过模板变量 <code>ref1</code> 来更新这种变化。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"template-ref-vars-scope1\" header=\"src/app/app.component.html\">\n&#x3C;input #ref1 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstExample\" />\n&#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\">Value: {{ ref1.value }}&#x3C;/span>\n\n</code-example>\n<p>In this case, the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on <code>&#x3C;span></code> creates a new template scope, which includes the <code>ref1</code> variable from its parent scope.</p>\n<p>在这种情况下，<code>&#x3C;span></code> 上的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会创建一个新的模板范围，其中包括其父范围中的 <code>ref1</code> 变量。</p>\n<p>However, accessing a template variable from a child scope in the parent template doesn't work:</p>\n<p>但是，从外部的父模板访问子范围中的变量是行不通的。</p>\n<code-example language=\"html\">\n  &#x3C;input *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\" #ref2 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"secondExample\" />\n  &#x3C;span>Value: {{ ref2?.value }}&#x3C;/span> &#x3C;!-- doesn't work -->\n</code-example>\n<p>Here, <code>ref2</code> is declared in the child scope created by <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>, and is not accessible from the parent template.</p>\n<p>在这里，<code>ref2</code> 是在 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 创建的子范围中声明的，并且无法从父模板访问。</p>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h2 id=\"template-input-variable\">Template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"模板输入变量\">模板输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#模板输入变量\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <em>template input variable</em> is a variable with a value that is set when an instance of that template is created. See: <a href=\"https://angular.io/guide/structural-directives\">Writing structural directives</a></p>\n<p><em>模板输入变量</em>是一个具有在创建该模板实例时设置的值的变量。请参阅：<a href=\"https://angular.io/guide/structural-directives\">编写结构指令</a></p>\n<p>Template input variables can be seen in action in the long-form usage of <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>:</p>\n<p>可以在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 的长格式用法中看到模板输入变量的作用：</p>\n<code-example language=\"html\">\n&#x3C;ul>\n  &#x3C;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\">\n    &#x3C;li>{{hero.name}}\n  &#x3C;/ng-template>\n&#x3C;/ul>\n</code-example>\n<p>The <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive will instantiate this <ng-template> once for each hero in the <code>heroes</code> array, and will set the <code>hero</code> variable for each instance accordingly.</ng-template></p>\n<p><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令将实例化此<ng-template>为 hero 数组中的每个 <code>heroes</code> 一次，并将为每个实例相应地设置 <code>hero</code> 变量。</ng-template></p>\n<p>When an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> is instantiated, multiple named values can be passed which can be bound to different template input variables. The right-hand side of the <code>let-</code> declaration of an input variable can specify which value should be used for that variable.</p>\n<p>实例化 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 时，可以传递多个命名值，这些值可以绑定到不同的模板输入变量。输入变量的 <code>let-</code> 声明的右侧可以指定应该用于该变量的值。</p>\n<p><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> for example also provides access to the <code>index</code> of each hero in the array:</p>\n<p>例如，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 还提供了对数组中每个英雄的 <code>index</code> 的访问：</p>\n<code-example language=\"html\">\n&#x3C;ul>\n  &#x3C;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero let-i=\"index\" [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\">\n    &#x3C;li>Hero number {{i}}: {{hero.name}}\n  &#x3C;/ng-template>\n&#x3C;/ul>\n</code-example>\n<h2 id=\"whats-next\">What’s next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"下一步呢\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#下一步呢\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"https://angular.io/guide/structural-directives\">Writing structural directives</a></p>\n<p><a href=\"https://angular.io/guide/structural-directives\">编写结构指令</a></p>\n\n  <div class=\"reviewed\">最后复查时间： 5/12/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/ng-template\n - guide/binding-overview\n - guide/example-apps-list\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/template-overview\n - guide/template-statements\n - guide/template-syntax\n - guide/understanding-template-expr-overview\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/TemplateRef\n - api/core/ng-template\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives\n - guide/structural-directives\n - guide/structural-directives#asterisk\n - guide/template-overview\n - guide/template-reference-variables#accessing-in-a-nested-template\n - guide/template-reference-variables#angular-是如何为模板变量赋值的\n - guide/template-reference-variables#how-angular-assigns-values-to-template-variables\n - guide/template-reference-variables#prerequisites\n - guide/template-reference-variables#syntax\n - guide/template-reference-variables#template-input-variable\n - guide/template-reference-variables#template-variable-scope\n - guide/template-reference-variables#understanding-template-variables\n - guide/template-reference-variables#using-ngform-with-template-variables\n - guide/template-reference-variables#variable-specifying-a-name\n - guide/template-reference-variables#whats-next\n - guide/template-reference-variables#下一步呢\n - guide/template-reference-variables#前提条件\n - guide/template-reference-variables#在嵌套模板中访问\n - guide/template-reference-variables#将-ngform-与模板变量一起使用\n - guide/template-reference-variables#指定名称的变量\n - guide/template-reference-variables#模板变量的作用域\n - guide/template-reference-variables#模板输入变量\n - guide/template-reference-variables#理解模板变量\n - guide/template-reference-variables#语法\n - https://angular.io/guide/structural-directives\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/template-reference-variables.md?message=docs%3A%20请简述你的修改...\n-->"
}