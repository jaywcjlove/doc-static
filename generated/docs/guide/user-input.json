{
  "id": "guide/user-input",
  "title": "User input",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/user-input.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"user-input\" translation-result=\"on\">用户输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#user-input\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"user-input\">User input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#user-input\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">当用户点击链接、按下按钮或者输入文字时，这些用户动作都会产生 DOM 事件。\n本章解释如何使用 Angular 事件绑定语法把这些事件绑定到事件处理器。</p><p translation-origin=\"off\">User actions such as clicking a link, pushing a button, and entering\ntext raise DOM events.\nThis page explains how to bind those events to component event handlers using the Angular\nevent binding syntax.</p>\n\n<p translation-result=\"on\">运行<live-example></live-example></p><p translation-origin=\"off\">Run the <live-example></live-example>.</p>\n\n<h2 id=\"binding-to-user-input-events\" translation-result=\"on\">绑定到用户输入事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#binding-to-user-input-events\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"binding-to-user-input-events\">Binding to user input events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#binding-to-user-input-events\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以使用 <a href=\"guide/template-syntax#event-binding\">Angular 事件绑定</a>机制来响应任何 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM 事件</a>。\n许多 DOM 事件是由用户输入触发的。绑定这些事件可以获取用户输入。</p><p translation-origin=\"off\">You can use <a href=\"guide/template-syntax#event-binding\">Angular event bindings</a>\nto respond to any <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM event</a>.\nMany DOM events are triggered by user input. Binding to these events provides a way to\nget input from the user.</p>\n\n<p translation-result=\"on\">要绑定 DOM 事件，只要把 DOM 事件的名字包裹在圆括号中，然后用放在引号中的<a href=\"guide/template-syntax#template-statements\">模板语句</a>对它赋值就可以了。</p><p translation-origin=\"off\">To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted\n<a href=\"guide/template-syntax#template-statements\">template statement</a> to it.</p>\n\n<p translation-result=\"on\">下例展示了一个事件绑定，它实现了一个点击事件处理器：</p><p translation-origin=\"off\">The following example shows an event binding that implements a click handler:</p>\n\n<code-example path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-button\" header=\"src/app/click-me.component.ts\">\n&#x3C;button (click)=\"onClickMe()\">Click me!&#x3C;/button>\n\n</code-example>\n<a id=\"click\"></a>\n<p translation-result=\"on\">等号左边的 <code>(click)</code> 表示把按钮的点击事件作为<strong>绑定目标</strong>。\n等号右边引号中的文本是<strong>模板语句</strong>，通过调用组件的 <code>onClickMe</code> 方法来响应这个点击事件。</p><p translation-origin=\"off\">The <code>(click)</code> to the left of the equals sign identifies the button's click event as the <strong>target of the binding</strong>.\nThe text in quotes to the right of the equals sign\nis the <strong>template statement</strong>, which responds\nto the click event by calling the component's <code>onClickMe</code> method.</p>\n\n<p translation-result=\"on\">写绑定时，需要知道模板语句的<strong>执行上下文</strong>。\n出现在模板语句中的每个标识符都属于特定的上下文对象。\n这个对象通常都是控制此模板的 Angular 组件。\n上例中只显示了一行 HTML，那段 HTML 片段属于下面这个组件：</p><p translation-origin=\"off\">When writing a binding, be aware of a template statement's <strong>execution context</strong>.\nThe identifiers in a template statement belong to a specific context object,\nusually the Angular component controlling the template.\nThe example above shows a single line of HTML, but that HTML belongs to a larger component:</p>\n\n<code-example path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\" header=\"src/app/click-me.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-click-me',\n  template: `\n    &#x3C;button (click)=\"onClickMe()\">Click me!&#x3C;/button>\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">当用户点击按钮时，Angular 调用 <code>ClickMeComponent</code> 的 <code>onClickMe</code> 方法。</p><p translation-origin=\"off\">When the user clicks the button, Angular calls the <code>onClickMe</code> method from <code>ClickMeComponent</code>.</p>\n\n<h2 id=\"get-user-input-from-the-event-object\" translation-result=\"on\">通过 $event 对象取得用户输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-the-event-object\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"get-user-input-from-the-event-object\">Get user input from the $event object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-the-event-object\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">DOM 事件可以携带可能对组件有用的信息。\n本节将展示如何绑定输入框的 <code>keyup</code> 事件，在每个敲击键盘时获取用户输入。</p><p translation-origin=\"off\">DOM events carry a payload of information that may be useful to the component.\nThis section shows how to bind to the <code>keyup</code> event of an input box to get the user's input after each keystroke.</p>\n\n<p translation-result=\"on\">下面的代码监听 <code>keyup</code> 事件，并将整个事件载荷 (<code>$event</code>) 传给组件的事件处理器。</p><p translation-origin=\"off\">The following code listens to the <code>keyup</code> event and passes the entire event payload (<code>$event</code>) to the component event handler.</p>\n\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-template\" header=\"src/app/keyup.components.ts (template v.1)\">\ntemplate: `\n  &#x3C;input (keyup)=\"onKey($event)\">\n  &#x3C;p>{{values}}&#x3C;/p>\n`\n\n</code-example>\n<p translation-result=\"on\">当用户按下并释放一个按键时，触发 <code>keyup</code> 事件，Angular 在 <code>$event</code> 变量提供一个相应的 DOM\n事件对象，上面的代码将它作为参数传给 <code>onKey()</code> 方法。</p><p translation-origin=\"off\">When a user presses and releases a key, the <code>keyup</code> event occurs, and Angular provides a corresponding\nDOM event object in the <code>$event</code> variable which this code passes as a parameter to the component's <code>onKey()</code> method.</p>\n\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class-no-type\" header=\"src/app/keyup.components.ts (class v.1)\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>$event</code> 对象的属性取决于 DOM 事件的类型。例如，鼠标事件与输入框编辑事件包含了不同的信息。</p><p translation-origin=\"off\">The properties of an <code>$event</code> object vary depending on the type of DOM event. For example,\na mouse event includes different information than an input box editing event.</p>\n\n<p translation-result=\"on\">所有<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">标准 DOM 事件对象</a>都有一个 <code>target</code> 属性，\n引用触发该事件的元素。\n在本例中，<code>target</code> 是<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\"><code>&#x3C;input></code> 元素</a>，\n<code>event.target.value</code> 返回该元素的当前内容。</p><p translation-origin=\"off\">All <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">standard DOM event objects</a>\nhave a <code>target</code> property, a reference to the element that raised the event.\nIn this case, <code>target</code> refers to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\"><code>&#x3C;input></code> element</a> and\n<code>event.target.value</code> returns the current contents of that element.</p>\n\n<p translation-result=\"on\">在组件的 <code>onKey()</code> 方法中，把输入框的值和分隔符 (|) 追加组件的 <code>values</code> 属性。\n使用<a href=\"guide/template-syntax#interpolation\">插值</a>来把存放累加结果的 <code>values</code> 属性回显到屏幕上。</p><p translation-origin=\"off\">After each call, the <code>onKey()</code> method appends the contents of the input box value to the list\nin the component's <code>values</code> property, followed by a separator character (|).\nThe <a href=\"guide/template-syntax#interpolation\">interpolation</a>\ndisplays the accumulating input box changes from the <code>values</code> property.</p>\n\n<p translation-result=\"on\">假设用户输入字母“abc”，然后用退格键一个一个删除它们。\n用户界面将显示：</p><p translation-origin=\"off\">Suppose the user enters the letters \"abc\", and then backspaces to remove them one by one.\nHere's what the UI displays:</p>\n\n<code-example>\n  a | ab | abc | ab | a | |\n</code-example>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/keyup1-anim.gif\" alt=\"key up 1\" width=\"176\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">或者，你可以用 <code>event.key</code> 替代 <code>event.target.value</code>，积累各个按键本身，这样同样的用户输入可以产生：</p><p translation-origin=\"off\">Alternatively, you could accumulate the individual keys themselves by substituting <code>event.key</code>\nfor <code>event.target.value</code> in which case the same user input would produce:</p>\n\n<code-example>\n  a | b | c | backspace | backspace | backspace |\n\n</code-example>\n</div>\n<a id=\"keyup1\"></a>\n<h3 id=\"type-the-event\" translation-result=\"on\"><em>$event</em>的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#type-the-event\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"type-the-event\">Type the <em>$event</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#type-the-event\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">上例将 <code>$event</code> 转换为 <code>any</code> 类型。\n这样简化了代码，但是有成本。\n没有任何类型信息能够揭示事件对象的属性，防止简单的错误。</p><p translation-origin=\"off\">The example above casts the <code>$event</code> as an <code>any</code> type.\nThat simplifies the code at a cost.\nThere is no type information\nthat could reveal properties of the event object and prevent silly mistakes.</p>\n\n<p translation-result=\"on\">下面的例子，使用了带类型方法：</p><p translation-origin=\"off\">The following example rewrites the method with types:</p>\n\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class\" header=\"src/app/keyup.components.ts (class v.1 - typed )\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n\n  onKey(event: KeyboardEvent) { // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>$event</code> 的类型现在是 <code>KeyboardEvent</code>。\n不是所有的元素都有 <code>value</code> 属性，所以它将 <code>target</code> 转换为输入元素。\n<code>OnKey</code> 方法更加清晰地表达了它期望从模板得到什么，以及它是如何解析事件的。</p><p translation-origin=\"off\">The <code>$event</code> is now a specific <code>KeyboardEvent</code>.\nNot all elements have a <code>value</code> property so it casts <code>target</code> to an input element.\nThe <code>OnKey</code> method more clearly expresses what it expects from the template and how it interprets the event.</p>\n\n<h3 id=\"passing-event-is-a-dubious-practice\" translation-result=\"on\">传入 <em>$event</em> 是靠不住的做法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#passing-event-is-a-dubious-practice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"passing-event-is-a-dubious-practice\">Passing <em>$event</em> is a dubious practice<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#passing-event-is-a-dubious-practice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">类型化事件对象揭露了重要的一点，即反对把整个 DOM 事件传到方法中，因为这样组件会知道太多模板的信息。\n只有当它知道更多它本不应了解的 HTML 实现细节时，它才能提取信息。\n这就违反了模板（<em>用户看到的</em>）和组件（<em>应用如何处理用户数据</em>）之间的分离关注原则。</p><p translation-origin=\"off\">Typing the event object reveals a significant objection to passing the entire DOM event into the method:\nthe component has too much awareness of the template details.\nIt can't extract information without knowing more than it should about the HTML implementation.\nThat breaks the separation of concerns between the template (<em>what the user sees</em>)\nand the component (<em>how the application processes user data</em>).</p>\n\n<p translation-result=\"on\">下面将介绍如何用模板引用变量来解决这个问题。</p><p translation-origin=\"off\">The next section shows how to use template reference variables to address this problem.</p>\n\n<h2 id=\"get-user-input-from-a-template-reference-variable\" translation-result=\"on\">从一个模板引用变量中获得用户输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-a-template-reference-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"get-user-input-from-a-template-reference-variable\">Get user input from a template reference variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-a-template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">还有另一种获取用户数据的方式：使用 Angular 的<a href=\"guide/template-syntax#ref-vars\"><strong>模板引用变量</strong></a>。\n这些变量提供了从模块中直接访问元素的能力。\n在标识符前加上井号 (#) 就能声明一个模板引用变量。</p><p translation-origin=\"off\">There's another way to get the user data: use Angular\n<a href=\"guide/template-syntax#ref-vars\"><strong>template reference variables</strong></a>.\nThese variables provide direct access to an element from within the template.\nTo declare a template reference variable, precede an identifier with a hash (or pound) character (#).</p>\n\n<p translation-result=\"on\">下面的例子使用了局部模板变量，在一个超简单的模板中实现按键反馈功能。</p><p translation-origin=\"off\">The following example uses a template reference variable\nto implement a keystroke loopback in a simple template.</p>\n\n<code-example path=\"user-input/src/app/loop-back.component.ts\" region=\"loop-back-component\" header=\"src/app/loop-back.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-loop-back',\n  template: `\n    &#x3C;input #box (keyup)=\"0\">\n    &#x3C;p>{{box.value}}&#x3C;/p>\n  `\n})\nexport class LoopbackComponent { }\n\n</code-example>\n<p translation-result=\"on\">这个模板引用变量名叫 <code>box</code>，在 <code>&#x3C;input></code> 元素声明，它引用 <code>&#x3C;input></code> 元素本身。\n代码使用 <code>box</code> 获得输入元素的 <code>value</code> 值，并通过插值把它显示在 <code>&#x3C;p></code> 标签中。</p><p translation-origin=\"off\">The template reference variable named <code>box</code>, declared on the <code>&#x3C;input></code> element,\nrefers to the <code>&#x3C;input></code> element itself.\nThe code uses the <code>box</code> variable to get the input element's <code>value</code> and display it\nwith interpolation between <code>&#x3C;p></code> tags.</p>\n\n<p translation-result=\"on\">这个模板完全是完全自包含的。它没有绑定到组件，组件也没做任何事情。</p><p translation-origin=\"off\">The template is completely self contained. It doesn't bind to the component,\nand the component does nothing.</p>\n\n<p translation-result=\"on\">在输入框中输入，就会看到每次按键时，显示也随之更新了。</p><p translation-origin=\"off\">Type something in the input box, and watch the display update with each keystroke.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/keyup-loop-back-anim.gif\" alt=\"loop back\" width=\"204\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>除非你绑定一个事件，否则这将完全无法工作。</strong></p><p translation-origin=\"off\"><strong>This won't work at all unless you bind to an event</strong>.</p>\n\n<p translation-result=\"on\">只有在应用做了些异步事件（如击键），Angular 才更新绑定（并最终影响到屏幕）。\n本例代码将 <code>keyup</code> 事件绑定到了数字 0，这可能是最短的模板语句了。\n虽然这个语句不做什么，但它满足 Angular 的要求，所以 Angular 将更新屏幕。</p><p translation-origin=\"off\">Angular updates the bindings (and therefore the screen)\nonly if the app does something in response to asynchronous events, such as keystrokes.\nThis example code binds the <code>keyup</code> event\nto the number 0, the shortest template statement possible.\nWhile the statement does nothing useful,\nit satisfies Angular's requirement so that Angular will update the screen.</p>\n\n</div>\n<p translation-result=\"on\">从模板变量获得输入框比通过 <code>$event</code> 对象更加简单。\n下面的代码重写了之前 <code>keyup</code> 示例，它使用变量来获得用户输入。</p><p translation-origin=\"off\">It's easier to get to the input box with the template reference\nvariable than to go through the <code>$event</code> object. Here's a rewrite of the previous\n<code>keyup</code> example that uses a template reference variable to get the user's input.</p>\n\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-2\" header=\"src/app/keyup.components.ts (v2)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up2',\n  template: `\n    &#x3C;input #box (keyup)=\"onKey(box.value)\">\n    &#x3C;p>{{values}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">这个方法最漂亮的一点是：组件代码从视图中获得了干净的数据值。再也不用了解 <code>$event</code> 变量及其结构了。</p><p translation-origin=\"off\">A nice aspect of this approach is that the component gets clean data values from the view.\nIt no longer requires knowledge of the <code>$event</code> and its structure.</p>\n\n<a id=\"key-event\"></a>\n<h2 id=\"key-event-filtering-with-keyenter\" translation-result=\"on\">按键事件过滤（通过 <code>key.enter</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#key-event-filtering-with-keyenter\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"key-event-filtering-with-keyenter\">Key event filtering (with <code>key.enter</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#key-event-filtering-with-keyenter\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>(keyup)</code> 事件处理器监听<em>每一次按键</em>。\n有时只在意<em>回车</em>键，因为它标志着用户结束输入。\n解决这个问题的一种方法是检查每个 <code>$event.keyCode</code>，只有键值是<em>回车</em>键时才采取行动。</p><p translation-origin=\"off\">The <code>(keyup)</code> event handler hears <em>every keystroke</em>.\nSometimes only the <em>Enter</em> key matters, because it signals that the user has finished typing.\nOne way to reduce the noise would be to examine every <code>$event.keyCode</code> and take action only when the key is <em>Enter</em>.</p>\n\n<p translation-result=\"on\">更简单的方法是：绑定到 Angular 的 <code>keyup.enter</code> 模拟事件。\n然后，只有当用户敲<em>回车</em>键时，Angular 才会调用事件处理器。</p><p translation-origin=\"off\">There's an easier way: bind to Angular's <code>keyup.enter</code> pseudo-event.\nThen Angular calls the event handler only when the user presses <em>Enter</em>.</p>\n\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-3\" header=\"src/app/keyup.components.ts (v3)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up3',\n  template: `\n    &#x3C;input #box (keyup.enter)=\"onEnter(box.value)\">\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}\n\n</code-example>\n<p translation-result=\"on\">下面展示了它的工作原理。</p><p translation-origin=\"off\">Here's how it works.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/keyup3-anim.gif\" alt=\"key up 3\" width=\"280\" height=\"100\">\n</div>\n<h2 id=\"on-blur\" translation-result=\"on\">失去焦点事件 (blur)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#on-blur\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"on-blur\">On blur<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#on-blur\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">前上例中，如果用户没有先按回车键，而是移开了鼠标，点击了页面中其它地方，输入框的当前值就会丢失。\n只有当用户按下了回车键候，组件的 <code>values</code> 属性才能更新。</p><p translation-origin=\"off\">In the previous example, the current state of the input box\nis lost if the user mouses away and clicks elsewhere on the page\nwithout first pressing <em>Enter</em>.\nThe component's <code>value</code> property is updated only when the user presses <em>Enter</em>.</p>\n\n<p translation-result=\"on\">下面通过同时监听输入框的回车键和失去焦点事件来修正这个问题。</p><p translation-origin=\"off\">To fix this issue, listen to both the <em>Enter</em> key and the <em>blur</em> event.</p>\n\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-4\" header=\"src/app/keyup.components.ts (v4)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up4',\n  template: `\n    &#x3C;input #box\n      (keyup.enter)=\"update(box.value)\"\n      (blur)=\"update(box.value)\">\n\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) { this.value = value; }\n}\n\n</code-example>\n<h2 id=\"put-it-all-together\" translation-result=\"on\">把它们放在一起<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#put-it-all-together\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"put-it-all-together\">Put it all together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#put-it-all-together\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">上一章介绍了如何<a href=\"guide/displaying-data\">显示数据</a>。\n本章展示了事件绑定技术。</p><p translation-origin=\"off\">The previous page showed how to <a href=\"guide/displaying-data\">display data</a>.\nThis page demonstrated event binding techniques.</p>\n\n<p translation-result=\"on\">现在，在一个微型应用中一起使用它们，应用能显示一个英雄列表，并把新的英雄加到列表中。\n用户可以通过输入英雄名和点击“添加”按钮来添加英雄。</p><p translation-origin=\"off\">Now, put it all together in a micro-app\nthat can display a list of heroes and add new heroes to the list.\nThe user can add a hero by typing the hero's name in the input box and\nclicking <strong>Add</strong>.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/little-tour-anim.gif\" alt=\"Little Tour of Heroes\" width=\"472\" height=\"268\">\n</div>\n<p translation-result=\"on\">下面就是“简版英雄指南”组件。</p><p translation-origin=\"off\">Below is the \"Little Tour of Heroes\"  component.</p>\n\n<code-example path=\"user-input/src/app/little-tour.component.ts\" region=\"little-tour\" header=\"src/app/little-tour.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-little-tour',\n  template: `\n    &#x3C;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \">\n\n    &#x3C;button (click)=\"addHero(newHero.value)\">Add&#x3C;/button>\n\n    &#x3C;ul>&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero}}&#x3C;/li>&#x3C;/ul>\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n</code-example>\n<h3 id=\"observations\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#observations\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"observations\">Observations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#observations\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li>\n<p translation-result=\"on\">   <strong>使用模板变量来引用元素</strong> — <code>newHero</code> 模板变量引用了 <code>&#x3C;input></code> 元素。\n你可以在 <code>&#x3C;input></code> 的任何兄弟或子级元素中引用 <code>newHero</code>。</p><p translation-origin=\"off\"><strong>Use template variables to refer to elements</strong> —\nThe <code>newHero</code> template variable refers to the <code>&#x3C;input></code> element.\nYou can reference <code>newHero</code> from any sibling or child of the <code>&#x3C;input></code> element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <strong>传递数值，而非元素</strong> —\n获取输入框的值并将<em>它</em>传给组件的 <code>addHero</code>，而不要传递 <code>newHero</code>。</p><p translation-origin=\"off\"><strong>Pass values, not elements</strong> —\nInstead of passing the <code>newHero</code> into the component's <code>addHero</code> method,\nget the input box value and pass <em>that</em> to <code>addHero</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <strong>保持模板语句简单</strong> —\n<code>(blur)</code> 事件被绑定到两个 JavaScript 语句。\n第一句调用 <code>addHero</code>。第二句 <code>newHero.value=''</code> 在添加新英雄到列表中后清除输入框。</p><p translation-origin=\"off\"><strong>Keep template statements simple</strong> —\nThe <code>(blur)</code> event is bound to two JavaScript statements.\nThe first statement calls <code>addHero</code>. The second statement, <code>newHero.value=''</code>,\nclears the input box after a new hero is added to the list.</p>\n\n</li>\n</ul>\n<h2 id=\"source-code\" translation-result=\"on\">源代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#source-code\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"source-code\">Source code<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#source-code\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是本章讨论过的所有源码。</p><p translation-origin=\"off\">Following is all the code discussed in this page.</p>\n\n<code-tabs>\n\n  <code-pane header=\"click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-click-me',\n  template: `\n    &#x3C;button (click)=\"onClickMe()\">Click me!&#x3C;/button>\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"keyup.components.ts\" path=\"user-input/src/app/keyup.components.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up1',\n  template: `\n    &#x3C;input (keyup)=\"onKey($event)\">\n    &#x3C;p>{{values}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  /*\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n  */\n\n  onKey(event: KeyboardEvent) { // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up2',\n  template: `\n    &#x3C;input #box (keyup)=\"onKey(box.value)\">\n    &#x3C;p>{{values}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up3',\n  template: `\n    &#x3C;input #box (keyup.enter)=\"onEnter(box.value)\">\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up4',\n  template: `\n    &#x3C;input #box\n      (keyup.enter)=\"update(box.value)\"\n      (blur)=\"update(box.value)\">\n\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) { this.value = value; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-loop-back',\n  template: `\n    &#x3C;input #box (keyup)=\"0\">\n    &#x3C;p>{{box.value}}&#x3C;/p>\n  `\n})\nexport class LoopbackComponent { }\n\n\n</code-pane>\n\n  <code-pane header=\"little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-little-tour',\n  template: `\n    &#x3C;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \">\n\n    &#x3C;button (click)=\"addHero(newHero.value)\">Add&#x3C;/button>\n\n    &#x3C;ul>&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero}}&#x3C;/li>&#x3C;/ul>\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">Angular 还支持被动事件侦听器。例如，你可以使用以下步骤使滚动事件变为被动监听。</p><p translation-origin=\"off\">Angular also supports passive event listeners. For example, you can use the following steps to make the scroll event passive.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>src</code> 目录下创建一个 <code>zone-flags.ts</code> 文件。</p><p translation-origin=\"off\">Create a file <code>zone-flags.ts</code> under <code>src</code> directory.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">往这个文件中添加如下语句。</p><p translation-origin=\"off\">Add the following line into this file.</p>\n\n</li>\n</ol>\n<code-example>\n(window as any)['__zone_symbol__PASSIVE_EVENTS'] = ['scroll'];\n</code-example>\n<ol start=\"3\">\n<li>\n<p translation-result=\"on\">在 <code>src/polyfills.ts</code> 文件中，导入 <code>zone.js</code> 之前，先导入新创建的 <code>zone-flags</code> 文件。</p><p translation-origin=\"off\">In the <code>src/polyfills.ts</code> file, before importing zone.js, import the newly created <code>zone-flags</code>.</p>\n\n</li>\n</ol>\n<code-example>\nimport './zone-flags';\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n</code-example>\n<p translation-result=\"on\">经过这些步骤，你添加 <code>scroll</code> 事件的监听器时，它就是被动（<code>passive</code>）的。</p><p translation-origin=\"off\">After those steps, if you add event listeners for the <code>scroll</code> event, the listeners will be <code>passive</code>.</p>\n\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你已经掌握了响应用户输入和操作的基础技术。</p><p translation-origin=\"off\">You have mastered the basic primitives for responding to user input and gestures.</p>\n\n<p translation-result=\"on\">这些技术对小规模演示很实用，但是在处理大量用户输入时，很容易变得累赘和笨拙。\n要在数据录入字段和模型属性之间传递数据，双向数据绑定是更加优雅和简洁的方式。\n下一章 <code>表单</code> 解释了如何用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 来进行双向绑定。</p><p translation-origin=\"off\">These techniques are useful for small-scale demonstrations, but they\nquickly become verbose and clumsy when handling large amounts of user input.\nTwo-way data binding is a more elegant and compact way to move\nvalues between data entry fields and model properties.\nThe next page, <code>Forms</code>, explains how to write\ntwo-way bindings with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/forms\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/Component\n - api/forms/NgModel\n - guide/displaying-data\n - guide/template-syntax#event-binding\n - guide/template-syntax#interpolation\n - guide/template-syntax#ref-vars\n - guide/template-syntax#template-statements\n - guide/user-input#binding-to-user-input-events\n - guide/user-input#get-user-input-from-a-template-reference-variable\n - guide/user-input#get-user-input-from-the-event-object\n - guide/user-input#key-event-filtering-with-keyenter\n - guide/user-input#observations\n - guide/user-input#on-blur\n - guide/user-input#passing-event-is-a-dubious-practice\n - guide/user-input#put-it-all-together\n - guide/user-input#source-code\n - guide/user-input#summary\n - guide/user-input#type-the-event\n - guide/user-input#user-input\n - https://developer.mozilla.org/en-US/docs/Web/API/Event\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/user-input.md?message=docs%3A%20请简述你的修改...\n-->"
}