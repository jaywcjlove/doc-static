{
  "id": "guide/service-worker-devops",
  "title": "Service worker in production",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/service-worker-devops.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"service-worker-in-production\" translation-result=\"on\">生产环境下的 Service Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-in-production\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"service-worker-in-production\">Service worker in production<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-in-production\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本页讲的是如何使用 Angular Service Worker 发布和支持生产环境下的应用。\n它解释了 Angular Service Worker 如何满足大规模生产环境的需求、Service Worker 在多种条件下有哪些行为以及有哪些可用的资源和故障保护机制。</p><p translation-origin=\"off\">This page is a reference for deploying and supporting production apps that use the Angular service worker. It explains how the Angular service worker fits into the larger production environment, the service worker's behavior under various conditions, and available resources and fail-safes.</p>\n\n<h4 id=\"prerequisites\" translation-result=\"on\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#prerequisites\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#prerequisites\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">对下列知识有基本的了解：</p><p translation-origin=\"off\">A basic understanding of the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/service-worker-communications\">与 Service Worker 通讯</a>.</p><p translation-origin=\"off\"><a href=\"guide/service-worker-communications\">Service Worker Communication</a>.</p>\n\n</li>\n</ul>\n<hr>\n<h2 id=\"service-worker-and-caching-of-app-resources\" translation-result=\"on\">Service Worker 与应用资源的缓存<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-and-caching-of-app-resources\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"service-worker-and-caching-of-app-resources\">Service worker and caching of app resources<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-and-caching-of-app-resources\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">从概念上说，你可以把 Angular Service Worker 想象成一个转发式缓存或装在最终用户浏览器中的 CDN 边缘。\nService Worker 的工作是从本地缓存中满足 Angular 应用对资源或数据的请求，而不用等待网络。\n和所有缓存一样，它有一些规则来决定内容该如何过期或更新。</p><p translation-origin=\"off\">Conceptually, you can imagine the Angular service worker as a forward cache or a CDN edge that is installed in the end user's web browser. The service worker's job is to satisfy requests made by the Angular app for resources or data from a local cache, without needing to wait for the network. Like any cache, it has rules for how content is expired and updated.</p>\n\n<a id=\"versions\"></a>\n<h3 id=\"app-versions\" translation-result=\"on\">应用的版本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#app-versions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"app-versions\">App versions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#app-versions\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 Angular Service Worker 的语境下，“版本”是指用来表示 Angular 应用的某一次构建成果的一组资源。\n当应用的一个新的构建发布时，Service Worker 就把它看做此应用的一个新版本。\n就算只修改了一个文件，也同样如此。\n在任何一个给定的时间，Service Worker 可能会在它的缓存中拥有此应用的多个版本，这几个版本也都能用于提供服务。\n要了解更多，参见稍后的 <a href=\"guide/service-worker-devops#tabs\">App 选项卡</a>。</p><p translation-origin=\"off\">In the context of an Angular service worker, a \"version\" is a collection of resources that represent a specific build of the Angular app. Whenever a new build of the app is deployed, the service worker treats that build as a new version of the app. This is true even if only a single file is updated. At any given time, the service worker may have multiple versions of the app in its cache and it may be serving them simultaneously. For more information, see the <a href=\"guide/service-worker-devops#tabs\">App tabs</a> section below.</p>\n\n<p translation-result=\"on\">要保持应用的整体性，Angular Service Worker 会用所有的文件共同组成一个版本。\n组成版本的这些文件通常包括 HTML、JS 和 CSS 文件。把这些文件分成一组是至关重要的，因为它们会互相引用，并且依赖于一些特定内容。\n比如，<code>index.html</code> 文件可能有个引用 <code>bundle.js</code> 的 <code>&#x3C;script></code> 标签，它可能会试图从这个脚本中调用一个 <code>startApp()</code> 函数。\n任何时候，只要这个版本的 <code>index.html</code> 被提供了，与它对应的 <code>bundle.js</code> 也必须同时提供。\n这种情况下，使用调用了 <code>startApp()</code> 的老的 <code>index.html</code> 并同时使用定义了 <code>runApp()</code> 的新 bundle 就是无效的。</p><p translation-origin=\"off\">To preserve app integrity, the Angular service worker groups all files into a version together. The files grouped into a version usually include HTML, JS, and CSS files. Grouping of these files is essential for integrity because HTML, JS, and CSS files frequently refer to each other and depend on specific content. For example, an <code>index.html</code> file might have a <code>&#x3C;script></code> tag that references <code>bundle.js</code> and it might attempt to call a function <code>startApp()</code> from within that script. Any time this version of <code>index.html</code> is served, the corresponding <code>bundle.js</code> must be served with it. For example, assume that the <code>startApp()</code> function is renamed to <code>runApp()</code> in both files. In this scenario, it is not valid to serve the old <code>index.html</code>, which calls <code>startApp()</code>, along with the new bundle, which defines <code>runApp()</code>.</p>\n\n<p translation-result=\"on\">当使用惰性加载模块时，文件的整体性就显得格外重要。\n某个 JS 包可能引用很多惰性块，而这些惰性块的文件名在应用的每次特定的构建中都是唯一的。\n如果运行应用的 <code>X</code> 版本视图加载一个惰性块，但该块的服务器已经升级到了 <code>X + 1</code> 版本，这次惰性加载操作就会失败。</p><p translation-origin=\"off\">This file integrity is especially important when lazy loading modules.\nA JS bundle may reference many lazy chunks, and the filenames of the\nlazy chunks are unique to the particular build of the app. If a running\napp at version <code>X</code> attempts to load a lazy chunk, but the server has\nupdated to version <code>X + 1</code> already, the lazy loading operation will fail.</p>\n\n<p translation-result=\"on\">本应用的版本标识符由其所有资源的内容决定，如果它们中的任何一个发生了变化，则版本标识符也随之改变。\n实际上，版本是由 <code>ngsw.json</code> 文件的内容决定的，包含了所有已知内容的哈希值。\n如果任何一个被缓存的文件发生了变化，则该文件的哈希也将在 <code>ngsw.json</code> 中随之变化，从而导致 Angular Service Worker 将这个活动文件的集合视为一个新版本。</p><p translation-origin=\"off\">The version identifier of the app is determined by the contents of all\nresources, and it changes if any of them change. In practice, the version\nis determined by the contents of the <code>ngsw.json</code> file, which includes\nhashes for all known content. If any of the cached files change, the file's\nhash will change in <code>ngsw.json</code>, causing the Angular service worker to\ntreat the active set of files as a new version.</p>\n\n<p translation-result=\"on\">借助 Angular Service Worker 的这种版本控制行为，应用服务器就可以确保这个 Angular 应用中的这组文件始终保持一致。</p><p translation-origin=\"off\">With the versioning behavior of the Angular service worker, an application\nserver can ensure that the Angular app always has a consistent set of files.</p>\n\n<h4 id=\"update-checks\" translation-result=\"on\">更新检测<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#update-checks\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"update-checks\">Update checks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#update-checks\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">每当用户打开或刷新应用程序时，Angular Service Worker 都会通过查看清单（manifest）文件 “ngsw.json” 的更新来检查该应用程序的更新。\n如果它找到了更新，就会自动下载并缓存这个版本，并在下次加载应用程序时提供。</p><p translation-origin=\"off\">Every time the user opens or refreshes the application, the Angular service worker\nchecks for updates to the app by looking for updates to the <code>ngsw.json</code> manifest. If\nan update is found, it is downloaded and cached automatically, and will be served\nthe next time the application is loaded.</p>\n\n<h3 id=\"resource-integrity\" translation-result=\"on\">资源整体性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#resource-integrity\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"resource-integrity\">Resource integrity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#resource-integrity\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">长周期缓存的潜在副作用之一就是可能无意中缓存了无效的资源。\n在普通的 HTTP 缓存中，硬刷新或缓存过期限制了缓存这种无效文件导致的负面影响。\n而 Service Worker 会忽略这样的约束，事实上会对整个应用程序进行长期缓存。\n因此，让 Service Worker 获得正确的内容就显得至关重要。</p><p translation-origin=\"off\">One of the potential side effects of long caching is inadvertently\ncaching an invalid resource. In a normal HTTP cache, a hard refresh\nor cache expiration limits the negative effects of caching an invalid\nfile. A service worker ignores such constraints and effectively long\ncaches the entire app. Consequently, it is essential that the service worker\ngets the correct content.</p>\n\n<p translation-result=\"on\">为了确保资源的整体性，Angular Service Worker 会验证所有带哈希的资源的哈希值。\n通常，对于 <a href=\"cli\">Angular CLI</a> 应用程序，用户的 <code>src/ngsw-config.json</code> 配置文件中会涵盖 <code>dist</code> 目录下的所有内容。</p><p translation-origin=\"off\">To ensure resource integrity, the Angular service worker validates\nthe hashes of all resources for which it has a hash. Typically for\nan app created with the <a href=\"cli\">Angular CLI</a>, this is everything in the <code>dist</code> directory covered by\nthe user's <code>src/ngsw-config.json</code> configuration.</p>\n\n<p translation-result=\"on\">如果某个特定的文件未能通过验证，Angular Service Worker 就会尝试用 “cache-busting” URL 为参数重新获取内容，以消除浏览器或中间缓存的影响。\n如果该内容也未能通过验证，则 Service Worker 会认为该应用的整个版本都无效，并停止用它提供服务。\n如有必要，Service Worker 会进入安全模式，这些请求将退化为直接访问网络。\n如果服务无效、损坏或内容过期的风险很高，则会选择不使用缓存。</p><p translation-origin=\"off\">If a particular file fails validation, the Angular service worker\nattempts to re-fetch the content using a \"cache-busting\" URL\nparameter to eliminate the effects of browser or intermediate\ncaching. If that content also fails validation, the service worker\nconsiders the entire version of the app to be invalid and it stops\nserving the app. If necessary, the service worker enters a safe mode\nwhere requests fall back on the network, opting not to use its cache\nif the risk of serving invalid, broken, or outdated content is high.</p>\n\n<p translation-result=\"on\">导致哈希值不匹配的原因有很多：</p><p translation-origin=\"off\">Hash mismatches can occur for a variety of reasons:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 在源服务器和最终用户之间缓存图层可能会提供陈旧的内容。</p><p translation-origin=\"off\">Caching layers in between the origin server and the end user could serve stale content.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 非原子化的部署可能会导致 Angular Service Worker 看到部分更新后的内容。</p><p translation-origin=\"off\">A non-atomic deployment could result in the Angular service worker having visibility of partially updated content.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 构建过程中的错误可能会导致更新了资源，却没有更新 <code>ngsw.json</code>。\n反之，也可能发生没有更新资源，却更新了 <code>ngsw.json</code> 的情况。</p><p translation-origin=\"off\">Errors during the build process could result in updated resources without <code>ngsw.json</code> being updated. The reverse could also happen resulting in an updated <code>ngsw.json</code> without updated resources.</p>\n\n</li>\n</ul>\n<h4 id=\"unhashed-content\" translation-result=\"on\">不带哈希的内容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#unhashed-content\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"unhashed-content\">Unhashed content<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#unhashed-content\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>ngsw.json</code> 清单中唯一带哈希值的资源就是构建清单时 <code>dist</code> 目录中的资源。\n而其它资源，特别是从 CDN 加载的资源，其内容在构建时是未知的，或者会比应用程序部署得更频繁。</p><p translation-origin=\"off\">The only resources that have hashes in the <code>ngsw.json</code>\nmanifest are resources that were present in the <code>dist</code>\ndirectory at the time the manifest was built. Other\nresources, especially those loaded from CDNs, have\ncontent that is unknown at build time or are updated\nmore frequently than the app is deployed.</p>\n\n<p translation-result=\"on\">如果 Angular Service Worker 没有哈希可以验证给定的资源，它仍然会缓存它的内容，但会使用 “重新验证时失效” 的策略来承认 HTTP 缓存头。\n也就是说，当被缓存资源的 HTTP 缓存头指出该资源已过期时，Angular Service Worker 将继续提供内容，并尝试在后台刷新资源。\n这样，那些被破坏的非哈希资源留在缓存中的时间就不会超出为它配置的生命周期。</p><p translation-origin=\"off\">If the Angular service worker does not have a hash to validate\na given resource, it still caches its contents but it honors\nthe HTTP caching headers by using a policy of \"stale while\nrevalidate.\" That is, when HTTP caching headers for a cached\nresource indicate that the resource has expired, the Angular\nservice worker continues to serve the content and it attempts\nto refresh the resource in the background. This way, broken\nunhashed resources do not remain in the cache beyond their\nconfigured lifetimes.</p>\n\n<a id=\"tabs\"></a>\n<h3 id=\"app-tabs\" translation-result=\"on\">App 选项卡<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#app-tabs\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"app-tabs\">App tabs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#app-tabs\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果应用程序的资源版本突然发生了变化或没有给出警告，就可能会有问题。有关这些问题的描述，请参阅前面的 <a href=\"guide/service-worker-devops#versions\">版本</a> 部分。</p><p translation-origin=\"off\">It can be problematic for an app if the version of resources\nit's receiving changes suddenly or without warning. See the\n<a href=\"guide/service-worker-devops#versions\">Versions</a> section above\nfor a description of such issues.</p>\n\n<p translation-result=\"on\">Angular Service Worker 会保证：正在运行的应用程序会继续运行和当前应用相同的版本。\n而如果在新的 Web 浏览器选项卡中打开了该应用的另一个实例，则会提供该应用的最新版本。\n因此，这个新标签可以和原始标签同时运行不同版本的应用。</p><p translation-origin=\"off\">The Angular service worker provides a guarantee: a running app\nwill continue to run the same version of the app. If another\ninstance of the app is opened in a new web browser tab, then\nthe most current version of the app is served. As a result,\nthat new tab can be running a different version of the app\nthan the original tab.</p>\n\n<p translation-result=\"on\">值得注意的是，这种担保比普通的 Web 部署模型提供的担保还要<strong>更强一点</strong>。\n如果没有 Service Worker，则不能保证稍后在这个正在运行的应用中惰性加载的代码\n和其初始代码的版本是一样的。</p><p translation-origin=\"off\">It's important to note that this guarantee is <strong>stronger</strong>\nthan that provided by the normal web deployment model. Without\na service worker, there is no guarantee that code lazily loaded\nlater in a running app is from the same version as the initial\ncode for the app.</p>\n\n<p translation-result=\"on\">Angular Service Worker 为什么可能会更改运行中的应用的版本有几个有限的原因。\n其中一些是因为出错了：</p><p translation-origin=\"off\">There are a few limited reasons why the Angular service worker\nmight change the version of a running app. Some of them are\nerror conditions:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 由于哈希验证失败，当前版本变成了无效的。</p><p translation-origin=\"off\">The current version becomes invalid due to a failed hash.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 某个无关的错误导致 Service Worker 进入了安全模式，或者说，它被暂时禁用了。</p><p translation-origin=\"off\">An unrelated error causes the service worker to enter safe mode; that is, temporary deactivation.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">Angular Service Worker 能知道在任何指定的时刻正在使用哪些版本，\n并清除那些没有被任何选项卡使用的版本。</p><p translation-origin=\"off\">The Angular service worker is aware of which versions are in\nuse at any given moment and it cleans up versions when\nno tab is using them.</p>\n\n<p translation-result=\"on\">另一些可能导致 Angular Service Worker 在运行期间改变版本的因素是一些正常事件：</p><p translation-origin=\"off\">Other reasons the Angular service worker might change the version\nof a running app are normal events:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 页面被重新加载/刷新。</p><p translation-origin=\"off\">The page is reloaded/refreshed.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 该页面通过 <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code> 服务请求立即激活这个更新。</p><p translation-origin=\"off\">The page requests an update be immediately activated via the <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code> service.</p>\n\n</li>\n</ul>\n<h3 id=\"service-worker-updates\" translation-result=\"on\">Service Worker 更新<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-updates\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"service-worker-updates\">Service worker updates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-updates\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular Service Worker 是一个运行在 Web 浏览器中的小脚本。\n有时，这个 Service Worker 也可能会需要更新，以修复错误和增强特性。</p><p translation-origin=\"off\">The Angular service worker is a small script that runs in web browsers.\nFrom time to time, the service worker will be updated with bug\nfixes and feature improvements.</p>\n\n<p translation-result=\"on\">首次打开应用时或在一段非活动时间之后再访问应用程序时，就会下载 Angular Service Worker。如果 Service Worker 发生了变化，Service Worker 就会在后台进行更新。</p><p translation-origin=\"off\">The Angular service worker is downloaded when the app is first opened\nand when the app is accessed after a period of inactivity. If the\nservice worker has changed, the service worker will be updated in the background.</p>\n\n<p translation-result=\"on\">Angular Service Worker 的大部分更新对应用程序来说都是透明的 - 旧缓存仍然有效，其内容仍然能正常使用。\n但是，在 Angular Service Worker 中可能偶尔会有错误修复或新功能，需要让旧的缓存失效。\n这时，应用程序就从会网络上透明地进行刷新。</p><p translation-origin=\"off\">Most updates to the Angular service worker are transparent to the\napp—the old caches are still valid and content is still served\nnormally. However, occasionally a bugfix or feature in the Angular\nservice worker requires the invalidation of old caches. In this case,\nthe app will be refreshed transparently from the network.</p>\n\n<h3 id=\"bypassing-the-service-worker\" translation-result=\"on\">绕过 Service Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#bypassing-the-service-worker\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bypassing-the-service-worker\">Bypassing the service worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#bypassing-the-service-worker\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">某些情况下，你可能想要完全绕过 Service Worker，转而让浏览器处理请求。比如当你要用到某些 Service Worker 尚不支持的特性时（例如<a href=\"https://github.com/w3c/ServiceWorker/issues/1141\">报告文件上传的进度</a>）。</p><p translation-origin=\"off\">In some cases, you may want to bypass the service worker entirely and let the browser handle the\nrequest instead. An example is when you rely on a feature that is currently not supported in service\nworkers (e.g.\n<a href=\"https://github.com/w3c/ServiceWorker/issues/1141\">reporting progress on uploaded files</a>).</p>\n\n<p translation-result=\"on\">要想绕过 Service Worker，你可以设置一个名叫 <code>ngsw-bypass</code> 的请求头或查询参数。（这个请求头或查询参数的值会被忽略，可以把它设为空字符串或略去。）</p><p translation-origin=\"off\">To bypass the service worker you can set <code>ngsw-bypass</code> as a request header, or as a query parameter.\n(The value of the header or query parameter is ignored and can be empty or omitted.)</p>\n\n<h2 id=\"debugging-the-angular-service-worker\" translation-result=\"on\">调试 Angular Service Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#debugging-the-angular-service-worker\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"debugging-the-angular-service-worker\">Debugging the Angular service worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#debugging-the-angular-service-worker\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">偶尔，可能会需要检查运行中的 Angular Service Worker，以调查问题或确保它在按设计运行。\n浏览器提供了用于调试 Service Worker 的内置工具，而且 Angular Service Worker 本身也包含了一些有用的调试功能。</p><p translation-origin=\"off\">Occasionally, it may be necessary to examine the Angular service\nworker in a running state to investigate issues or to ensure that\nit is operating as designed. Browsers provide built-in tools for\ndebugging service workers and the Angular service worker itself\nincludes useful debugging features.</p>\n\n<h3 id=\"locating-and-analyzing-debugging-information\" translation-result=\"on\">定位并分析调试信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#locating-and-analyzing-debugging-information\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"locating-and-analyzing-debugging-information\">Locating and analyzing debugging information<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#locating-and-analyzing-debugging-information\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular Service Worker 会在虚拟目录 <code>ngsw/</code> 下暴露出调试信息。\n目前，它暴露的唯一的 URL 是 <code>ngsw/<a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>。\n下面是这个调试页面中的一段范例内容：</p><p translation-origin=\"off\">The Angular service worker exposes debugging information under\nthe <code>ngsw/</code> virtual directory. Currently, the single exposed URL\nis <code>ngsw/<a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>. Here is an example of this debug page's contents:</p>\n\n<code-example>\nNGSW Debug Info:\n\nDriver <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: NORMAL ((nominal))\nLatest manifest hash: eea7f5f464f90789b621170af5a569d6be077e5c\nLast update check: never\n\n=== <a href=\"api/core/Version\" class=\"code-anchor\">Version</a> eea7f5f464f90789b621170af5a569d6be077e5c ===\n\nClients: 7b79a015-69af-4d3d-9ae6-95ba90c79486, 5bc08295-aaf2-42f3-a4cc-9e4ef9100f65\n\n=== Idle Task Queue ===\nLast update <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>: 1s496u\nLast update run: never\nTask queue:\n\n * init post-load (update, cleanup)\n\nDebug log:\n</code-example>\n<h4 id=\"driver-state\" translation-result=\"on\">驱动程序的状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#driver-state\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"driver-state\">Driver state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#driver-state\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">第一行表示驱动程序的状态：</p><p translation-origin=\"off\">The first line indicates the driver state:</p>\n\n<code-example>\nDriver <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: NORMAL ((nominal))\n</code-example>\n<p translation-result=\"on\"><code>NORMAL</code> 表示这个 Service Worker 正在正常运行，并且没有处于降级运行的状态。</p><p translation-origin=\"off\"><code>NORMAL</code> indicates that the service worker is operating normally and is not in a degraded state.</p>\n\n<p translation-result=\"on\">有两种可能的降级状态：</p><p translation-origin=\"off\">There are two possible degraded states:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   <code>EXISTING_CLIENTS_ONLY</code>：这个 Service Worker 没有该应用的最新已知版本的干净副本。\n较旧的缓存版本可以被安全的使用，所以现有的选项卡将继续使用较旧的版本运行本应用，\n但新的应用将从网络上加载。</p><p translation-origin=\"off\"><code>EXISTING_CLIENTS_ONLY</code>: the service worker does not have a\nclean copy of the latest known version of the app. Older cached\nversions are safe to use, so existing tabs continue to run from\ncache, but new loads of the app will be served from the network.\nThe service worker will try to recover from this state when a new\nversion of the application is detected and installed (that is,\nwhen a new <code>ngsw.json</code> is available).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>SAFE_MODE</code>：Service Worker 不能保证使用缓存数据的安全性。\n发生了意外错误或所有缓存版本都无效。\n这时所有的流量都将从网络提供，尽量少运行 Service Worker 中的代码。</p><p translation-origin=\"off\"><code>SAFE_MODE</code>: the service worker cannot guarantee the safety of\nusing cached data. Either an unexpected error occurred or all\ncached versions are invalid. All traffic will be served from the\nnetwork, running as little service worker code as possible.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在这两种情况下，后面的括号注解中都会提供导致 Service Worker 进入降级状态的错误信息。</p><p translation-origin=\"off\">In both cases, the parenthetical annotation provides the\nerror that caused the service worker to enter the degraded state.</p>\n\n<p translation-result=\"on\">这两种状态都是暂时的；它们仅在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\">ServiceWorker 实例</a> 的生命周期内保存。\n浏览器有时会终止空闲的 Service Worker，以节省内存和处理能力，并创建一个新的 Service Worker 实例来响应网络事件。\n无论先前实例的状态如何，新实例均以 <code>NORMAL</code> 模式启动。</p><p translation-origin=\"off\">Both states are temporary; they are saved only for the lifetime of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope\">ServiceWorker\ninstance</a>.\nThe browser sometimes terminates an idle service worker to conserve memory and\nprocessor power, and creates a new service worker instance in response to\nnetwork events. The new instance starts in the <code>NORMAL</code> mode, regardless of the\nstate of the previous instance.</p>\n\n<h4 id=\"latest-manifest-hash\" translation-result=\"on\">最新清单的哈希<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#latest-manifest-hash\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"latest-manifest-hash\">Latest manifest hash<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#latest-manifest-hash\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-example>\nLatest manifest hash: eea7f5f464f90789b621170af5a569d6be077e5c\n</code-example>\n<p translation-result=\"on\">这是 Service Worker 所知道的应用最新版本的 SHA1 哈希值。</p><p translation-origin=\"off\">This is the SHA1 hash of the most up-to-date version of the app that the service worker knows about.</p>\n\n<h4 id=\"last-update-check\" translation-result=\"on\">最后一次更新检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#last-update-check\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"last-update-check\">Last update check<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#last-update-check\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-example>\nLast update check: never\n</code-example>\n<p translation-result=\"on\">这表示 Service Worker 最后一次检查应用程序的新版本或更新的时间。“never” 表示 Service Worker 从未检查过更新。</p><p translation-origin=\"off\">This indicates the last time the service worker checked for a new version, or update, of the app. <code>never</code> indicates that the service worker has never checked for an update.</p>\n\n<p translation-result=\"on\">在这个调试文件范例中，这次更新检查目前是已排期的，如下一节所述。</p><p translation-origin=\"off\">In this example debug file, the update check is currently scheduled, as explained the next section.</p>\n\n<h4 id=\"version\" translation-result=\"on\">版本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#version\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"version\">Version<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#version\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-example>\n=== <a href=\"api/core/Version\" class=\"code-anchor\">Version</a> eea7f5f464f90789b621170af5a569d6be077e5c ===\n\nClients: 7b79a015-69af-4d3d-9ae6-95ba90c79486, 5bc08295-aaf2-42f3-a4cc-9e4ef9100f65\n</code-example>\n<p translation-result=\"on\">在这个例子中，Service Worker 拥有一个版本的应用程序缓存并用它服务于两个不同的选项卡。\n请注意，这个版本哈希值是上面列出的“最新清单的哈希”。\n它的两个客户运行的都是最新版本。每个客户都用浏览器中 <code>Clients</code> API 的 ID 列了出来。</p><p translation-origin=\"off\">In this example, the service worker has one version of the app cached and\nbeing used to serve two different tabs. Note that this version hash\nis the \"latest manifest hash\" listed above. Both clients are on the\nlatest version. Each client is listed by its ID from the <code>Clients</code>\nAPI in the browser.</p>\n\n<h4 id=\"idle-task-queue\" translation-result=\"on\">空闲任务队列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#idle-task-queue\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"idle-task-queue\">Idle task queue<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#idle-task-queue\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-example>\n=== Idle Task Queue ===\nLast update <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>: 1s496u\nLast update run: never\nTask queue:\n\n * init post-load (update, cleanup)\n</code-example>\n<p translation-result=\"on\">空闲任务队列是 Service Worker 中所有在后台发生的未决任务的队列。\n如果这个队列中存在任何任务，则列出它们的描述。\n在这个例子中，Service Worker 安排的任务是一个用于更新检查和清除过期缓存的后期初始化操作。</p><p translation-origin=\"off\">The Idle Task Queue is the queue of all pending tasks that happen\nin the background in the service worker. If there are any tasks\nin the queue, they are listed with a description. In this example,\nthe service worker has one such task scheduled, a post-initialization\noperation involving an update check and cleanup of stale caches.</p>\n\n<p translation-result=\"on\">最后的 tick/run 计数器给出了与特定事件发生有关的空闲队列中的时间。\n“Last update run” 计数器显示的是上次执行空闲任务的时间。\n“Last update tick” 显示的是自上次事件以来可能要处理的队列的时间。</p><p translation-origin=\"off\">The last update tick/run counters give the time since specific\nevents happened related to the idle queue. The \"Last update run\"\ncounter shows the last time idle tasks were actually executed.\n\"Last update tick\" shows the time since the last event after\nwhich the queue might be processed.</p>\n\n<h4 id=\"debug-log\" translation-result=\"on\">调试日志<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#debug-log\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"debug-log\">Debug log<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#debug-log\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-example>\nDebug log:\n</code-example>\n<p translation-result=\"on\">在 Service Worker 中出现的任何错误都会记录在这里。</p><p translation-origin=\"off\">Errors that occur within the service worker will be logged here.</p>\n\n<h3 id=\"developer-tools\" translation-result=\"on\">开发者工具<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#developer-tools\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"developer-tools\">Developer Tools<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#developer-tools\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Chrome 等浏览器提供了能与 Service Worker 交互的开发者工具。\n这些工具在使用得当时非常强大，但也要牢记一些事情。</p><p translation-origin=\"off\">Browsers such as Chrome provide developer tools for interacting\nwith service workers. Such tools can be powerful when used properly,\nbut there are a few things to keep in mind.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   使用开发人员工具时，Service Worker 将继续在后台运行，并且不会重新启动。\n这可能会导致开着 Dev Tools 时的行为与用户实际遇到的行为不一样。</p><p translation-origin=\"off\">When using developer tools, the service worker is kept running\nin the background and never restarts. This can cause behavior with Dev\nTools open to differ from behavior a user might experience.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   如果你查看缓存存储器的查看器，缓存就会经常过期。右键单击缓存存储器的标题并刷新缓存。</p><p translation-origin=\"off\">If you look in the Cache Storage viewer, the cache is frequently\nout of date. Right click the Cache Storage title and refresh the caches.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在 Service Worker 页停止并重新启动这个 Service Worker 将会触发一次更新检查。</p><p translation-origin=\"off\">Stopping and starting the service worker in the Service Worker\npane triggers a check for updates.</p>\n\n<h2 id=\"service-worker-safety\" translation-result=\"on\">Service Worker 的安全性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-safety\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"service-worker-safety\">Service Worker Safety<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#service-worker-safety\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">像任何复杂的系统一样，错误或损坏的配置可能会导致 Angular Service Worker 以不可预知的方式工作。\n虽然它在设计时就尝试将此类问题的影响降至最低，但是，如果管理员需要快速停用 Service Worker，\nAngular Service Worker 也包含多种故障保护机制。</p><p translation-origin=\"off\">Like any complex system, bugs or broken configurations can cause\nthe Angular service worker to act in unforeseen ways. While its\ndesign attempts to minimize the impact of such problems, the\nAngular service worker contains several failsafe mechanisms in case\nan administrator ever needs to deactivate the service worker quickly.</p>\n\n<h3 id=\"fail-safe\" translation-result=\"on\">故障保护机制<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#fail-safe\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"fail-safe\">Fail-safe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#fail-safe\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要停用 Service Worker，请删除或重命名 <code>ngsw.json</code> 文件。\n当 Service Worker 对 <code>ngsw.json</code> 的请求返回 <code>404</code> 时，Service Worker 就会删除它的所有缓存并注销自己，本质上就是自毁。</p><p translation-origin=\"off\">To deactivate the service worker, remove or rename the\n<code>ngsw.json</code> file. When the service worker's request\nfor <code>ngsw.json</code> returns a <code>404</code>, then the service worker\nremoves all of its caches and de-registers itself,\nessentially self-destructing.</p>\n\n<h3 id=\"safety-worker\">Safety Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#safety-worker\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>@angular/service-worker</code> NPM 包中还包含一个小脚本 <code>safety-worker.js</code>，当它被加载时就会把它自己从浏览器中注销。\n这个脚本可以作为终极武器来摆脱那些已经安装在客户端页面上的不想要的 Service Worker。</p><p translation-origin=\"off\">Also included in the <code>@angular/service-worker</code> NPM package is a small\nscript <code>safety-worker.js</code>, which when loaded will unregister itself\nfrom the browser. This script can be used as a last resort to get rid\nof unwanted service workers already installed on client pages.</p>\n\n<p translation-result=\"on\">要特别注意的是，你不能直接注册这个 Safety Worker，因为具有已缓存状态的旧客户端可能无法看到一个新的、用来安装 另一个 worker 脚本的 <code>index.html</code>。\n相反，你必须在想要注销的 Service Worker 脚本的 URL 中提供 <code>safety-worker.js</code> 的内容，\n而且必须持续这样做，直到确定所有用户都已成功注销了原有的 Worker。\n对大多数网站而言，这意味着你应该永远为旧的 Service Worker URL 提供 这个 Safety Worker。</p><p translation-origin=\"off\">It's important to note that you cannot register this worker directly,\nas old clients with cached state may not see a new <code>index.html</code> which\ninstalls the different worker script. Instead, you must serve the\ncontents of <code>safety-worker.js</code> at the URL of the Service Worker script\nyou are trying to unregister, and must continue to do so until you are\ncertain all users have successfully unregistered the old worker. For\nmost sites, this means that you should serve the safety worker at the\nold Service Worker URL forever.</p>\n\n<p translation-result=\"on\">这个脚本可以用来停用 <code>@angular/service-worker</code> 以及任何其它曾在你的站点上提供过的 Service Worker。</p><p translation-origin=\"off\">This script can be used both to deactivate <code>@angular/service-worker</code>\nas well as any other Service Workers which might have been served in\nthe past on your site.</p>\n\n<h3 id=\"changing-your-apps-location\" translation-result=\"on\">更改应用的位置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#changing-your-apps-location\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"changing-your-apps-location\">Changing your app's location<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#changing-your-apps-location\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">重要的是，要记住 Service Worker 无法在重定向后工作。你可能已经遇到过这种错误：<code>The script resource is behind a redirect, which is disallowed</code>。</p><p translation-origin=\"off\">It is important to note that service workers don't work behind redirect. You\nmay have already encountered the error <code>The script resource is behind a redirect, which is disallowed</code>.</p>\n\n<p translation-result=\"on\">如果你不得不更改应用的位置，就可能会出现问题。如果你设置了从旧位置（例如 <code>example.com</code> ）到新位置（例如 <code>www.example.com</code>）的重定向，则 Service Worker 将停止工作。\n同样，对于完全从 Service Worker 加载该网站的用户，甚至都不会触发重定向。老的 Worker（注册在 <code>example.com</code>）会尝试更新并将请求发送到原来的位置 <code>example.com</code>，该位置重定向到新位置 <code>www.example.com</code> 就会导致错误 <code>The script resource is behind a redirect, which is disallowed</code>。</p><p translation-origin=\"off\">This can be a problem if you have to change your app's location. If you setup\na redirect from the old location (for example <code>example.com</code>) to the new\nlocation (for example <code>www.example.com</code>) the worker will stop working.\nAlso, the redirect won't even trigger for users who are loading the site\nentirely from Service Worker. The old worker (registered at <code>example.com</code>)\ntries to update and sends requests to the old location <code>example.com</code> which\nget redirected to the new location <code>www.example.com</code> and create the error\n<code>The script resource is behind a redirect, which is disallowed</code>.</p>\n\n<p translation-result=\"on\">为了解决这个问题，你可能需要用上述技巧（<a href=\"guide/service-worker-devops#fail-safe\">故障安全</a>或<a href=\"guide/service-worker-devops#safety-worker\">Safety Worker</a>）之一杀死老的 Worker。</p><p translation-origin=\"off\">To remedy this, you may need to kill the old worker using one of the above\ntechniques (<a href=\"guide/service-worker-devops#fail-safe\">Fail-safe</a> or <a href=\"guide/service-worker-devops#safety-worker\">Safety Worker</a>).</p>\n\n<h2 id=\"more-on-angular-service-workers\" translation-result=\"on\">关于 Angular Service Worker 的更多信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#more-on-angular-service-workers\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"more-on-angular-service-workers\">More on Angular service workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-devops#more-on-angular-service-workers\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能还对下列内容感兴趣：</p><p translation-origin=\"off\">You may also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/service-worker-config\">Service Worker 配置</a>。</p><p translation-origin=\"off\"><a href=\"guide/service-worker-config\">Service Worker Configuration</a>.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/service-worker-communications\n - guide/service-worker-config\n - guide/service-worker-intro\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/core/Version\n - api/core/testing/tick\n - api/service-worker/SwUpdate\n - cli\n - guide/service-worker-communications\n - guide/service-worker-config\n - guide/service-worker-devops#app-tabs\n - guide/service-worker-devops#app-versions\n - guide/service-worker-devops#bypassing-the-service-worker\n - guide/service-worker-devops#changing-your-apps-location\n - guide/service-worker-devops#debug-log\n - guide/service-worker-devops#debugging-the-angular-service-worker\n - guide/service-worker-devops#developer-tools\n - guide/service-worker-devops#driver-state\n - guide/service-worker-devops#fail-safe\n - guide/service-worker-devops#idle-task-queue\n - guide/service-worker-devops#last-update-check\n - guide/service-worker-devops#latest-manifest-hash\n - guide/service-worker-devops#locating-and-analyzing-debugging-information\n - guide/service-worker-devops#more-on-angular-service-workers\n - guide/service-worker-devops#prerequisites\n - guide/service-worker-devops#resource-integrity\n - guide/service-worker-devops#safety-worker\n - guide/service-worker-devops#service-worker-and-caching-of-app-resources\n - guide/service-worker-devops#service-worker-in-production\n - guide/service-worker-devops#service-worker-safety\n - guide/service-worker-devops#service-worker-updates\n - guide/service-worker-devops#tabs\n - guide/service-worker-devops#unhashed-content\n - guide/service-worker-devops#update-checks\n - guide/service-worker-devops#version\n - guide/service-worker-devops#versions\n - https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope\n - https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/service-worker-devops.md?message=docs%3A%20请简述你的修改...\n - https://github.com/w3c/ServiceWorker/issues/1141\n-->"
}