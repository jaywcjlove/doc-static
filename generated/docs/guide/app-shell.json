{
  "id": "guide/app-shell",
  "title": "App shell",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/app-shell.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"app-shell\" translation-result=\"on\">应用外壳<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#app-shell\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"app-shell\">App shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#app-shell\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">应用外壳是一种在构建期间借助路由渲染部分应用的方法。它可以通过快速启动一个静态渲染页面（所有页面的公共骨架）来改善用户体验。与此同时，浏览器会下载完整的客户端版本，并在代码加载后自动切换到完整版。</p><p translation-origin=\"off\">App shell is a way to render a portion of your application via a route at build time.\nIt can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.</p>\n\n<p translation-result=\"on\">这能让用户快速看到应用中第一个有意义的画面，因为浏览器可以很简单地渲染出 HTML 和 CSS，而无需初始化任何 JavaScript。</p><p translation-origin=\"off\">This gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.</p>\n\n<p translation-result=\"on\">欲知详情，参见<a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\">应用外壳模型</a>。</p><p translation-origin=\"off\">Learn more in <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\">The App Shell Model</a>.</p>\n\n<h2 id=\"step-1-prepare-the-application\" translation-result=\"on\">第 1 步：准备本应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#step-1-prepare-the-application\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"step-1-prepare-the-application\">Step 1: Prepare the application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#step-1-prepare-the-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以用下列 CLI 命令来执行本操作：</p><p translation-origin=\"off\">You can do this with the following CLI command:</p>\n\n<code-example language=\"bash\">\nng new my-app --routing\n</code-example>\n<p translation-result=\"on\">对于既有应用，你必须手动添加 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 并在应用中定义 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>。</p><p translation-origin=\"off\">For an existing application, you have to manually add the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> and defining a <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> within your application.</p>\n\n<h2 id=\"step-2-create-the-app-shell\" translation-result=\"on\">第 2 步：创建应用外壳<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#step-2-create-the-app-shell\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"step-2-create-the-app-shell\">Step 2: Create the app shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#step-2-create-the-app-shell\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 CLI 自动创建一个应用外壳。</p><p translation-origin=\"off\">Use the CLI to automatically create the app shell.</p>\n\n<code-example language=\"bash\">\nng generate app-shell\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"><code>client-project</code> 是你这个客户端应用的名字。</p><p translation-origin=\"off\"><code>client-project</code> takes the name of your client application.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">执行完这个命令，你会发现 <code>angular.json</code> 配置文件中已经增加了两个新目标，并做了一些其它更改。</p><p translation-origin=\"off\">After running this command you will notice that the <code>angular.json</code> configuration file has been updated to add two new targets, with a few other changes.</p>\n\n<code-example language=\"json\">\n\"server\": {\n  \"builder\": \"@angular-devkit/build-angular:server\",\n  \"options\": {\n    \"outputPath\": \"dist/my-app-server\",\n    \"main\": \"src/main.server.ts\",\n    \"tsConfig\": \"tsconfig.server.json\"\n  }\n},\n\"app-shell\": {\n  \"builder\": \"@angular-devkit/build-angular:app-shell\",\n  \"options\": {\n    \"browserTarget\": \"my-app:build\",\n    \"serverTarget\": \"my-app:server\",\n    \"route\": \"shell\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"browserTarget\": \"my-app:build:production\",\n      \"serverTarget\": \"my-app:server:production\"\n    }\n  }\n}\n</code-example>\n<h2 id=\"step-3-verify-the-app-is-built-with-the-shell-content\" translation-result=\"on\">第 3 步：验证该应用是使用应用外壳的内容构建的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#step-3-verify-the-app-is-built-with-the-shell-content\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"step-3-verify-the-app-is-built-with-the-shell-content\">Step 3: Verify the app is built with the shell content<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#step-3-verify-the-app-is-built-with-the-shell-content\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 CLI 构建目标 <code>app-shell</code>。</p><p translation-origin=\"off\">Use the CLI to build the <code>app-shell</code> target.</p>\n\n<code-example language=\"bash\">\nng run my-app:app-shell\n</code-example>\n<p translation-result=\"on\">或使用产品环境配置。</p><p translation-origin=\"off\">Or to use the production configuration.</p>\n\n<code-example language=\"bash\">\nng run my-app:app-shell:production\n</code-example>\n<p translation-result=\"on\">要验证构建的输出，请打开 <code>dist/my-app/index.html</code>。寻找默认的文本 <code>app-shell works!</code> 就可以验证这个应用外壳路由确实是作为输出的一部分渲染出来的。</p><p translation-origin=\"off\">To verify the build output, open <code>dist/my-app/index.html</code>. Look for default text <code>app-shell works!</code> to show that the app shell route was rendered as part of the output.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/ivy\n - guide/service-worker-intro\n-->\n<!-- links from this doc:\n - api/router/RouterModule\n - api/router/RouterOutlet\n - guide/app-shell#app-shell\n - guide/app-shell#step-1-prepare-the-application\n - guide/app-shell#step-2-create-the-app-shell\n - guide/app-shell#step-3-verify-the-app-is-built-with-the-shell-content\n - https://developers.google.com/web/fundamentals/architecture/app-shell\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/app-shell.md?message=docs%3A%20请简述你的修改...\n-->"
}