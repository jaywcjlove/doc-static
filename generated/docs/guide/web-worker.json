{
  "id": "guide/web-worker",
  "title": "用 Web Worker 处理后台进程",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/web-worker.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"background-processing-using-web-workers\">Background processing using web workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#background-processing-using-web-workers\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"用-web-worker-处理后台进程\">用 Web Worker 处理后台进程<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#用-web-worker-处理后台进程\"><i class=\"material-icons\">link</i></a></h1>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API\">Web workers</a> lets you run CPU-intensive computations in a background thread, freeing the main thread to update the user interface.\nApplication's performing a lot of computations, like generating Computer-Aided Design (CAD) drawings or doing heavy geometric calculations, can use web workers to increase performance.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API\">Web Worker</a>允许你在后台线程中运行 CPU 密集型计算，解放主线程以更新用户界面。如果你发现你的应用会进行很多计算，比如生成 CAD 图纸或进行繁重的几何计算，那么使用 Web Worker 可以帮助你提高应用的性能。</p>\n<div class=\"alert is-helpful\">\n<p>The Angular CLI does not support running itself in a web worker.</p>\n<p>CLI 不支持在 Web Worker 中运行 Angular。</p>\n</div>\n<h2 id=\"adding-a-web-worker\">Adding a web worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#adding-a-web-worker\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"添加一个-web-worker\">添加一个 Web Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#添加一个-web-worker\"><i class=\"material-icons\">link</i></a></h2>\n<p>To add a web worker to an existing project, use the Angular CLI <code>ng generate</code> command.</p>\n<p>要把 Web Worker 添加到现有项目中，请使用 Angular CLI <code>ng generate</code> 命令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate web-worker &#x3C;location>\n\n</code-example>\n<p>You can add a web worker anywhere in your application.\nFor example, to add a web worker to the root component, <code>src/app/app.component.ts</code>, run the following command.</p>\n<p>你可以在应用的任何位置添加 Web Worker。比如，要把一个 Web Worker 添加到根组件 <code>src/app/app.component.ts</code>，请运行如下命令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate web-worker app\n\n</code-example>\n<p>The command performs the following actions.</p>\n<p>该命令会执行以下操作。</p>\n<ol>\n<li>\n<p>Configures your project to use web workers, if it isn't already.</p>\n<p>把你的项目配置为使用 Web Worker，如果还没有的话。</p>\n</li>\n<li>\n<p>Adds the following scaffold code to <code>src/app/app.worker.ts</code> to  receive messages.</p>\n<p>把如下脚手架代码添加到 <code>src/app/app.worker.ts</code> 以接收消息。</p>\n<code-example language=\"typescript\" header=\"src/app/app.worker.ts\">\n\naddEventListener('message', ({ data }) => {\n  const response = `worker response to ${data}`;\n  postMessage(response);\n});\n\n</code-example>\n</li>\n<li>\n<p>Adds the following scaffold code to <code>src/app/app.component.ts</code> to use the worker.</p>\n<p>把如下脚手架代码添加到 <code>src/app/app.component.ts</code> 以使用这个 Worker。</p>\n<code-example language=\"typescript\" header=\"src/app/app.component.ts\">\n\nif (typeof Worker !== 'undefined') {\n  // Create a new\n  const worker = new Worker(new URL('./app.worker', import.meta.url));\n  worker.onmessage = ({ data }) => {\n    console.log(`page got message: ${data}`);\n  };\n  worker.postMessage('hello');\n} else {\n  // Web workers are not supported in this environment.\n  // You should add a fallback so that your program still executes correctly.\n}\n\n</code-example>\n</li>\n</ol>\n<p>After you create this initial scaffold, you must refactor your code to use the web worker by sending messages to and from the worker.</p>\n<p>生成这个初始脚手架之后，你必须把代码重构成向这个 Worker 发送消息和从 Worker 接收消息，以便使用 Web Worker。</p>\n<div class=\"alert is-important\">\n<p>Some environments or platforms, such as <code>@angular/platform-server</code> used in <a href=\"guide/universal\">Server-side Rendering</a>, don't support web workers.\nTo ensure that your application works in these environments, you must provide a fallback mechanism to perform the computations that the worker would otherwise perform.</p>\n<p>某些环境或平台（比如<a href=\"guide/universal\">服务端渲染</a>中使用的 <code>@angular/platform-server</code> 不支持 Web Worker。为了确保你的应用能够在这些环境中工作，你必须提供一个回退机制来执行本来要由这个 Worker 执行的计算。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/developer-guide-overview\n-->\n<!-- links from this doc:\n - guide/universal\n - guide/web-worker#adding-a-web-worker\n - guide/web-worker#background-processing-using-web-workers\n - guide/web-worker#添加一个-web-worker\n - guide/web-worker#用-web-worker-处理后台进程\n - https://developer.mozilla.org/docs/Web/API/Web_Workers_API\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/web-worker.md?message=docs%3A%20请简述你的修改...\n-->"
}