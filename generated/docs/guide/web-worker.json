{
  "id": "guide/web-worker",
  "title": "Background processing using web workers",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/web-worker.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"background-processing-using-web-workers\" translation-result=\"on\">用 Web Worker 处理后台进程<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#background-processing-using-web-workers\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"background-processing-using-web-workers\">Background processing using web workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#background-processing-using-web-workers\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Worker</a>允许你在后台线程中运行 CPU 密集型计算，解放主线程以更新用户界面。如果你发现你的应用会进行很多计算，比如生成 CAD 图纸或进行繁重的几何计算，那么使用 Web Worker 可以帮助你提高应用的性能。</p><p translation-origin=\"off\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web workers</a> allow you to run CPU-intensive computations in a background thread,\nfreeing the main thread to update the user interface.\nIf you find your application performs a lot of computations, such as generating CAD drawings or doing heavy geometrical calculations, using web workers can help increase your application's performance.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">CLI 不支持在 Web Worker 中运行 Angular。</p><p translation-origin=\"off\">The CLI does not support running Angular itself in a web worker.</p>\n\n</div>\n<h2 id=\"adding-a-web-worker\" translation-result=\"on\">添加一个 Web Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#adding-a-web-worker\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"adding-a-web-worker\">Adding a web worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#adding-a-web-worker\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要把 Web Worker 添加到现有项目中，请使用 Angular CLI <code>ng generate</code> 命令。</p><p translation-origin=\"off\">To add a web worker to an existing project, use the Angular CLI <code>ng generate</code> command.</p>\n\n<p translation-result=\"on\"><code>ng generate web-worker</code> <em>生成到的位置</em></p><p translation-origin=\"off\"><code>ng generate web-worker</code> <em>location</em></p>\n\n<p translation-result=\"on\">你可以在应用的任何位置添加 Web Worker。例如，要把一个 Web Worker 添加到根组件 <code>src/app/app.component.ts</code>，请运行如下命令。</p><p translation-origin=\"off\">You can add a web worker anywhere in your application.\nFor example, to add a web worker to the root component, <code>src/app/app.component.ts</code>, run the following command.</p>\n\n<p><code>ng generate web-worker app</code></p>\n<p translation-result=\"on\">该命令会执行以下操作。</p><p translation-origin=\"off\">The command performs the following actions.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">把你的项目配置为使用 Web Worker，如果还没有的话。</p><p translation-origin=\"off\">Configures your project to use web workers, if it isn't already.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 把如下脚手架代码添加到 <code>src/app/app.worker.ts</code> 以接收消息。</p><p translation-origin=\"off\">Adds the following scaffold code to <code>src/app/app.worker.ts</code> to  receive messages.</p>\n\n <code-example language=\"typescript\" header=\"src/app/app.worker.ts\">\n addEventListener('message', ({ data }) => {\n   const response = `worker response to ${data}`;\n   postMessage(response);\n });\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把如下脚手架代码添加到 <code>src/app/app.component.ts</code> 以使用这个 Worker。</p><p translation-origin=\"off\">Adds the following scaffold code to <code>src/app/app.component.ts</code> to use the worker.</p>\n\n<code-example language=\"typescript\" header=\"src/app/app.component.ts\">\nif (typeof Worker !== 'undefined') {\n  // Create a new\n  const worker = new Worker('./app.worker', { type: 'module' });\n  worker.onmessage = ({ data }) => {\n    console.log(`page got message: ${data}`);\n  };\n  worker.postMessage('hello');\n} else {\n  // Web workers are not supported in this environment.\n  // You should add a fallback so that your program still executes correctly.\n}\n</code-example>\n</li>\n</ul>\n<p translation-result=\"on\">生成这个初始脚手架之后，你必须把代码重构成向这个 Worker 发送消息和从 Worker 接收消息，以便使用 Web Worker。</p><p translation-origin=\"off\">After you generate this initial scaffold, you must refactor your code to use the web worker by sending messages to and from the worker.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">某些环境或平台（比如<a href=\"guide/universal\">服务端渲染</a>中使用的 <code>@angular/platform-server</code> 不支持 Web Worker。为了确保你的应用能够在这些环境中工作，你必须提供一个回退机制来执行本来要由这个 Worker 执行的计算。</p><p translation-origin=\"off\">Some environments or platforms, such as <code>@angular/platform-server</code> used in <a href=\"guide/universal\">Server-side Rendering</a>, don't support web workers. To ensure that your application will work in these environments, you must provide a fallback mechanism to perform the computations that the worker would otherwise perform.</p>\n\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/deprecations\n-->\n<!-- links from this doc:\n - guide/universal\n - guide/web-worker#adding-a-web-worker\n - guide/web-worker#background-processing-using-web-workers\n - https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/web-worker.md?message=docs%3A%20请简述你的修改...\n-->"
}