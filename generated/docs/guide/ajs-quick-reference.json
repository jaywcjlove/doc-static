{
  "id": "guide/ajs-quick-reference",
  "title": "关于 AngularJS 与 Angular 概念的快速参考",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/ajs-quick-reference.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"angularjs-to-angular-concepts-quick-reference\">AngularJS to Angular concepts: Quick reference<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"关于-angularjs-与-angular-概念的快速参考\">关于 AngularJS 与 Angular 概念的快速参考<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#关于-angularjs-与-angular-概念的快速参考\"><i class=\"material-icons\">link</i></a></h1>\n<p><em>Angular</em> is the name for the Angular of today and tomorrow.</p>\n<p><em>Angular</em>是现在和未来的 Angular 名称。</p>\n<p><em>AngularJS</em> is the name for all v1.x versions of Angular.</p>\n<p><em>AngularJS</em>是 Angular 的所有 v1.x 版本的名称。</p>\n<p>This guide helps you transition from AngularJS to Angular\nby mapping AngularJS syntax to the corresponding Angular syntax.</p>\n<p>本章提供了一个快速的参考指南，指出一些常用的 AngularJS 语法及其在 Angular 中的等价物。</p>\n<p><strong>See the Angular syntax in this <live-example name=\"ajs-quick-reference\"></live-example></strong>.</p>\n<p><strong>参阅 <live-example name=\"ajs-quick-reference\"></live-example> 以学习 Angular 语法</strong></p>\n<h2 id=\"template-basics\">Template basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-basics\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"模板基础\">模板基础<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#模板基础\"><i class=\"material-icons\">link</i></a></h2>\n<p>Templates are the user-facing part of an Angular application and are written in HTML.\nThe following table lists some of the key AngularJS template features with their corresponding Angular template syntax.</p>\n<p>模板是 Angular 应用中的门面部分，它是用 HTML 写的。下表中是一些 AngularJS 中的关键模板特性及其在 Angular 中的等价语法。</p>\n<h3 id=\"bindings--interpolation--bindings--interpolation\">Bindings / interpolation → bindings / interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"绑定插值--绑定插值\">绑定/插值 → 绑定/插值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#绑定插值--绑定插值\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Bindings/interpolation</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> Your favorite hero is: {{vm.favoriteHero}} </code-example> In AngularJS, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template. <br> When using the <code>controller as</code> syntax, the binding is prefixed with the controller alias (<code>vm</code> or <code>$ctrl</code>) because you have to be specific about the source.</td>\n<td align=\"left\"><header>Bindings/interpolation</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example> In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable. <br> For more information, see the <a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a> guide.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>绑定/插值</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> Your favorite hero is: {{vm.favoriteHero}} </code-example>在 AngularJS 中，花括号中的表达式表示单向绑定。这会将元素的值绑定到与此模板关联的控制器中的属性。<br>使用 <code>controller as</code> 语法时，绑定要以控制器别名（<code>vm</code> 或 <code>$ctrl</code>）为前缀，因为你必须特定于此来源。</td>\n<td align=\"left\"><header>绑定/插值</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example>在 Angular 中，花括号中的模板表达式仍然表示单向绑定。这会将元素的值绑定到组件的属性。绑定的上下文是隐式的，并且始终是与其关联的组件，因此它不需要引用变量。<br>有关更多信息，请参阅<a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">插值</a>指南。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"filters--pipes\">Filters → pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"过滤器管道\">过滤器/管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#过滤器管道\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Filters</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} \n &#x3C;/td> </code-example> To filter output in AngularJS templates, use the pipe (<code>|</code>) character and one or more filters. <br> This example filters the <code>title</code> property to uppercase.</td>\n<td align=\"left\"><header>Pipes</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/td>\n\n</code-example> In Angular you use similar syntax with the pipe (<code>|</code>) character to filter output, but now you call them <strong>pipes</strong>. Many (but not all) of the built-in filters from AngularJS are built-in pipes in Angular. <br> For more information, see <a href=\"guide/ajs-quick-reference#filters--pipes\" title=\"Filters/pipes - AngularJS to Angular concepts: Quick reference | Angular\">Filters/pipes</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>过滤器</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} \n &#x3C;/td> </code-example>要过滤 AngularJS 模板中的输出，请使用管道 (<code>|</code>) 字符和一个或多个过滤器。<br>此示例将 <code>title</code> 属性过滤为大写。</td>\n<td align=\"left\"><header>管道</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/td>\n\n</code-example>在 Angular 中，你可以用管道 (<code>|</code>) 字符来过滤输出，但现在它们改名为<strong>管道</strong>。AngularJS 的许多（但不是全部）内置过滤器都是 Angular 中的内置管道。<br>有关更多信息，请参阅<a href=\"guide/ajs-quick-reference#filters--pipes\" title=\"Filters/pipes - AngularJS to Angular concepts: Quick reference | Angular\">过滤器/管道</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"local-variables--input-variables\">Local variables → input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#local-variables--input-variables\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"局部变量--输入变量\">局部变量 → 输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#局部变量--输入变量\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Local variables</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in vm.movies\"> \n  &#x3C;td> \n    {{movie.title}} \n  &#x3C;/td> \n&#x3C;/tr> </code-example> Here, <code>movie</code> is a user-defined local variable.</td>\n<td align=\"left\"><header>Input variables</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n  &#x3C;td>{{movie.title}}&#x3C;/td>\n&#x3C;/tr>\n\n</code-example> Angular has true template input variables that are explicitly defined using the <code>let</code> keyword. <br> For more information, see the <a href=\"guide/structural-directives#structural-directive-shorthand\" title=\"Structural directive shorthand - Writing structural directives | Angular\">Structural directive shorthand</a> section of <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>局部变量</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in vm.movies\"> \n  &#x3C;td> \n    {{movie.title}} \n  &#x3C;/td> \n&#x3C;/tr> </code-example>在这里，<code>movie</code> 是用户定义的局部变量。</td>\n<td align=\"left\"><header>输入变量</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n  &#x3C;td>{{movie.title}}&#x3C;/td>\n&#x3C;/tr>\n\n</code-example>Angular 具有使用 <code>let</code> 关键字显式定义的真正的模板输入变量。<br>有关更多信息，请参阅<a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">结构型指令</a>的<a href=\"guide/structural-directives#structural-directive-shorthand\" title=\"Structural directive shorthand - Writing structural directives | Angular\">结构型指令简写法</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"template-directives\">Template directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-directives\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"模板指令\">模板指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#模板指令\"><i class=\"material-icons\">link</i></a></h2>\n<p>AngularJS provides more than seventy built-in directives for templates.\nMany of them are not needed in Angular because of its more capable and expressive binding system.\nThe following are some of the key AngularJS built-in directives and their equivalents in Angular.</p>\n<p>AngularJS 为模板提供了七十多个内置指令。\n在 Angular 中，它们很多都已经不需要了，因为 Angular 有了一个更加强大、快捷的绑定系统。\n下面是一些 AngularJS 中的关键指令及其在 Angular 中的等价物。</p>\n<h3 id=\"ng-app--bootstrapping\"><code>ng-app</code> → bootstrapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-app--bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-app--引导\"><code>ng-app</code> → 引导<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-app--引导\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-app</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;body ng-app=\"movieHunter\"> </code-example> The application startup process is called <strong>bootstrapping</strong>. <br> Although you can bootstrap an AngularJS application in code, many applications bootstrap declaratively with the <code>ng-app</code> directive, giving it the name of the module (<code>movieHunter</code>) of the application.</td>\n<td align=\"left\"><header>Bootstrapping</header> <code-example header=\"main.ts\" format=\"typescript\" hidecopy=\"\" language=\"typescript\" path=\"ajs-quick-reference/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n\n</code-example> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" header=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example> Angular does not have a bootstrap directive. To launch the application in code, explicitly bootstrap the root module (<code>AppModule</code>) of the application in <code>main.ts</code> and the root component (<code>AppComponent</code>) of the application in <code>app.module.ts</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-app</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;body ng-app=\"movieHunter\"> </code-example>应用程序启动过程称为<strong>引导</strong>。<br>虽然你也可以在代码中引导 AngularJS 应用程序，但许多应用程序会使用 <code>ng-app</code> 指令以声明式进行引导，并为其提供应用程序模块的名称 ( <code>movieHunter</code> )。</td>\n<td align=\"left\"><header>引导</header><code-example header=\"main.ts\" format=\"typescript\" hidecopy=\"\" language=\"typescript\" path=\"ajs-quick-reference/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n\n</code-example><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" header=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>Angular 没有 bootstrap 指令。要在代码中启动应用程序，请在 <code>app.module.ts</code> 中显式引导应用程序的根模块 ( <code>AppModule</code> ) 并在 <code>main.ts</code> 中显式引导应用程序的根组件 ( <code>AppComponent</code> )。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-class--ngclass\"><code>ng-class</code> → <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-class--ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-class</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-class=\"{active: isActive}\"> \n &#x3C;div ng-class=\"{active: isActive, shazam: isImportant}\"> </code-example> In AngularJS, the <code>ng-class</code> directive includes/excludes CSS classes based on an expression. The expression is often a key-value object, with key defined as a CSS class name, and value as a template expression that evaluates to a Boolean. <br> In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true. <br> You can specify multiple classes, as shown in the second example.</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\">\n&#x3C;div [class.active]=\"isActive\">\n\n</code-example> In Angular, the <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> directive works similarly. It includes/excludes CSS classes based on an expression. <br> In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true. <br> You can specify multiple classes, as shown in the second example. <br> Angular also has <strong>class binding</strong>, which is a good way to add or remove a single class, as shown in the third example. <br> For more information see <a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">Attribute, class, and style bindings</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-class</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-class=\"{active: isActive}\"> \n &#x3C;div ng-class=\"{active: isActive, shazam: isImportant}\"> </code-example>在 AngularJS 中，<code>ng-class</code> 指令会根据表达式包含/排除 CSS 类。该表达式通常是一个键值对象，每个键都定义为一个 CSS 类名，其值是为可估算为布尔值的模板表达式。<br>在第一个示例中，如果 <code>isActive</code> 为 true，则将 <code>active</code> 类应用于此元素。<br>你可以指定多个类，如第二个示例所示。</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\">\n&#x3C;div [class.active]=\"isActive\">\n\n</code-example>在 Angular 中，<code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 指令的工作方式类似。它基于表达式包含/排除 CSS 类。<br>在第一个示例中，如果 <code>isActive</code> 为 true，则将 <code>active</code> 类应用于元素。<br>你可以指定多个类，如第二个示例所示。<br>Angular 还具有<strong>类绑定</strong>，这是添加或删除单个类的好方法，如第三个示例所示。<br>有关更多信息，请参阅<a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">属性、类和样式绑定</a>页面。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-click--bind-to-the-click-event\"><code>ng-click</code> → Bind to the <code>click</code> event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-click--bind-to-the-click-event\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-click--绑定到-click-事件\"><code>ng-click</code> → 绑定到 <code>click</code> 事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-click--绑定到-click-事件\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-click</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;button ng-click=\"vm.toggleImage()\"> \n &#x3C;button ng-click=\"vm.toggleImage($event)\"> </code-example> In AngularJS, the <code>ng-click</code> directive allows you to specify custom behavior when an element is clicked. <br> In the first example, when the user clicks the button, the <code>toggleImage()</code> method in the controller referenced by the <code>vm</code> <code>controller as</code> alias is executed. <br> The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the controller.</td>\n<td align=\"left\"><header>Bind to the <code>click</code> event</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\">\n&#x3C;button type=\"button\" (click)=\"toggleImage()\">\n&#x3C;button type=\"button\" (click)=\"toggleImage($event)\">\n\n</code-example> AngularJS event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using <strong>event binding</strong>. <br> For event binding, define the name of the target event within parenthesis and specify a template statement, in quotes, to the right of the equals. Angular then sets up an event handler for the target event. When the event is raised, the handler executes the template statement. <br> In the first example, when a user clicks the button, the <code>toggleImage()</code> method in the associated component is executed. <br> The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the component. <br> For a list of DOM events, see <a href=\"https://developer.mozilla.org/docs/Web/Events\" title=\"Event reference | MDN\">Event reference</a>. <br> For more information, see the <a href=\"guide/event-binding\" title=\"Event binding | Angular\">Event binding</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-click</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;button ng-click=\"vm.toggleImage()\"> \n &#x3C;button ng-click=\"vm.toggleImage($event)\"> </code-example>在 AngularJS 中，<code>ng-click</code> 指令允许你指定单击元素时的自定义行为。<br>在第一个示例中，当用户单击按钮时，会执行 <code>vm</code> <code>controller as</code> 别名引用的控制器中的 <code>toggleImage()</code> 方法。<br>第二个示例演示了传入 <code>$event</code> 对象，该对象会向控制器提供有关事件的详细信息。</td>\n<td align=\"left\"><header>绑定到<code>click</code>事件</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\">\n&#x3C;button type=\"button\" (click)=\"toggleImage()\">\n&#x3C;button type=\"button\" (click)=\"toggleImage($event)\">\n\n</code-example>Angular 中不存在 AngularJS 基于事件的指令。相反，它使用<strong>事件绑定</strong>来定义从模板视图到组件的单向绑定。<br>对于事件绑定，请在括号中定义目标事件的名称，并在等号的右侧指定一个模板语句，用引号引起来。然后，Angular 为目标事件设置一个事件处理程序。引发事件时，处理程序会执行模板语句。<br>在第一个示例中，当用户单击按钮时，会执行关联组件中的 <code>toggleImage()</code> 方法。<br>第二个示例演示了传入 <code>$event</code> 对象，该对象会向组件提供有关事件的详细信息。<br>有关 DOM 事件的列表，请参阅<a href=\"https://developer.mozilla.org/docs/Web/Events\" title=\"Event reference | MDN\">事件参考手册</a>。<br>有关更多信息，请参阅<a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件绑定</a>页面。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-controller--component-decorator\"><code>ng-controller</code> → component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-controller--component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-controller--组件装饰器\"><code>ng-controller</code> → 组件装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-controller--组件装饰器\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-controller</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-controller=\"MovieListCtrl as vm\"> </code-example> In AngularJS, the <code>ng-controller</code> directive attaches a controller to the view. Using the <code>ng-controller</code>, or defining the controller as part of the routing, ties the view to the controller code associated with that view.</td>\n<td align=\"left\"><header>Component decorator</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example> In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator. <br> For more information, see <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Architecture Overview</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-controller</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-controller=\"MovieListCtrl as vm\"> </code-example>在 AngularJS 中，<code>ng-controller</code> 指令会将控制器附加到视图。使用 <code>ng-controller</code>（或将控制器定义为路由的一部分）将视图绑定到与该视图关联的控制器代码。</td>\n<td align=\"left\"><header>组件装饰器</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example>在 Angular 中，模板不需要再指定其关联的控制器。相反，组件将其关联的模板指定为组件类装饰器的一部分。<br>有关更多信息，请参阅<a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">架构概览</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-hide--bind-to-the-hidden-property\"><code>ng-hide</code> → Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-hide--绑定到-hidden-属性\"><code>ng-hide</code> → 绑定到 <code>hidden</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-hide--绑定到-hidden-属性\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-hide</code></header> In AngularJS, the <code>ng-hide</code> directive shows or hides the associated HTML element based on an expression. For more information, see <a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>.</td>\n<td align=\"left\"><header>Bind to the <code>hidden</code> property</header> In Angular, you use property binding. Angular does not have a built-in <em>hide</em> directive. For more information, see <a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-hide</code></header>在 AngularJS 中，<code>ng-hide</code> 指令会根据表达式显示或隐藏关联的 HTML 元素。有关更多信息，请参阅<a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>。</td>\n<td align=\"left\"><header>绑定到<code>hidden</code>属性</header>在 Angular 中，你使用属性绑定；Angular 没有内置的<em>hide</em>指令。有关更多信息，请参阅<a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-href--bind-to-the-href-property\"><code>ng-href</code> → Bind to the <code>href</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-href--bind-to-the-href-property\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-href--绑定到-href-属性\"><code>ng-href</code> → 绑定到 <code>href</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-href--绑定到-href-属性\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-href</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;a ng-href=\"{{ angularDocsUrl }}\"> \n   Angular Docs \n &#x3C;/a> </code-example> The <code>ng-href</code> directive allows AngularJS to preprocess the <code>href</code> property. <code>ng-href</code> can replace the binding expression with the appropriate URL before the browser fetches from that URL. <br> In AngularJS, the <code>ng-href</code> is often used to activate a route as part of navigation. <br> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;a ng-href=\"#{{ moviesHash }}\"> \n  Movies \n&#x3C;/a> </code-example> Routing is handled differently in Angular.</td>\n<td align=\"left\"><header>Bind to the <code>href</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\">\n&#x3C;a [href]=\"angularDocsUrl\">Angular Docs&#x3C;/a>\n\n</code-example> Angular uses property binding. Angular does not have a built-in <em>href</em> directive. Place the <code>href</code> property of the element in square brackets and set it to a quoted template expression. For more information see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page. In Angular, <code>href</code> is no longer used for routing. Routing uses <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>, as shown in the following example. <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\">Movies&#x3C;/a>\n\n</code-example> For more information on routing, see <a href=\"guide/router#defining-a-basic-route\" title=\"Defining a basic route - Common Routing Tasks | Angular\">Defining a basic route</a> in the <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing &#x26; Navigation</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-href</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;a ng-href=\"{{ angularDocsUrl }}\"> \n   Angular Docs \n &#x3C;/a> </code-example><code>ng-href</code> 指令允许 AngularJS 预处理 <code>href</code> 属性。在浏览器从 URL 获取之前，<code>ng-href</code> 可以用适当的 URL 替换绑定表达式。<br>在 AngularJS 中，<code>ng-href</code> 通常用于作为导航的一部分激活路由。<br><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;a ng-href=\"#{{ moviesHash }}\"> \n  Movies \n&#x3C;/a> </code-example>Angular 中路由的处理方式不同。</td>\n<td align=\"left\"><header>绑定到<code>href</code>属性</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\">\n&#x3C;a [href]=\"angularDocsUrl\">Angular Docs&#x3C;/a>\n\n</code-example>Angular 使用属性绑定；Angular 没有内置的<em>href</em>指令。将元素的 <code>href</code> 属性放在方括号中，并将其设置为带引号的模板表达式。有关更多信息，请参阅<a href=\"guide/property-binding\" title=\"Property binding | Angular\">属性绑定</a>页面。在 Angular 中，<code>href</code> 不再用于路由。路由使用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>，如下例所示。<code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\">Movies&#x3C;/a>\n\n</code-example>有关路由的更多信息，请参阅<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由和导航</a>页面中的<a href=\"guide/router#defining-a-basic-route\" title=\"Defining a basic route - Common Routing Tasks | Angular\">定义基本路由</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-if--ngif\"><code>ng-if</code> → <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-if--ngif\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-if</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;table ng-if=\"movies.length\"> </code-example> In AngularJS, the <code>ng-if</code> directive removes or recreates a section of the DOM, based on an expression. If the expression is false, the element is removed from the DOM. <br> In this example, the <code>&#x3C;table></code> element is removed from the DOM unless the <code>movies</code> array has a length greater than zero.</td>\n<td align=\"left\"><header><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\">\n&#x3C;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\">\n\n</code-example> The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive in Angular works the same as the <code>ng-if</code> directive in AngularJS. It removes or recreates a section of the DOM based on an expression. <br> In this example, the <code>&#x3C;table></code> element is removed from the DOM unless the <code>movies</code> array has a length. <br> The (<code>*</code>) before <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is required in this example. For more information, see <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-if</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;table ng-if=\"movies.length\"> </code-example>在 AngularJS 中，<code>ng-if</code> 指令会根据表达式删除或重新创建 DOM 的一部分。如果表达式为 false，则从 DOM 中删除该元素。<br>在此示例中，除非 <code>movies</code> 数组的长度大于零，否则 <code>&#x3C;table></code> 元素会从 DOM 中删除。</td>\n<td align=\"left\"><header><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\">\n&#x3C;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\">\n\n</code-example>Angular 中的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令与 AngularJS 中的 <code>ng-if</code> 指令相同。它根据表达式删除或重新创建 DOM 的一部分。<br>在此示例中，除非 <code>movies</code> 数组具有长度，否则 <code>&#x3C;table></code> 元素会从 DOM 中删除。<br>在此示例中，需要 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 之前的 ( <code>*</code> )。有关更多信息，请参阅<a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">结构指令</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-model--ngmodel\"><code>ng-model</code> → <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-model--ngmodel\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-model</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;input ng-model=\"vm.favoriteHero\" /> </code-example> In AngularJS, the <code>ng-model</code> directive binds a form control to a property in the controller associated with the template. This provides <strong>two-way binding</strong> whereby changes result in the value in the view and the model being synchronized.</td>\n<td align=\"left\"><header><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" />\n\n</code-example> In Angular, <strong>two-way binding</strong> is indicatedr5t by <code>[()]</code>, descriptively referred to as a \"banana in a box.\" This syntax is a shortcut for defining both:<ul><li>property binding, from the component to the view</li><li>event binding, from the view to the component</li></ul> thereby providing two-way binding. <br> For more information on two-way binding with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, see the <a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">Displaying and updating properties with <code>ngModel</code></a> section of <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-model</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;input ng-model=\"vm.favoriteHero\" /> </code-example>在 AngularJS 中，<code>ng-model</code> 指令将表单控件绑定到控制器中与模板关联的属性。这提供了<strong>双向绑定</strong>，任何更改都会让视图与模型保持同步。</td>\n<td align=\"left\"><header><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" />\n\n</code-example>在 Angular 中，<strong>双向绑定</strong>由 <code>[()]</code> 表示，形象的称之为“盒子里的香蕉”。此语法是一种快捷方式：<ul><li>从组件到视图的属性绑定</li><li>从视图到组件的事件绑定</li></ul>，从而提供了双向绑定。<br>有关使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的双向绑定的更多信息，请参阅<a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">内置指令</a>的<a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">使用 <code>ngModel</code> 显示和更新属性</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-repeat--ngfor\"><code>ng-repeat</code> → <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-repeat--ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-repeat</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in vm.movies\"> </code-example> In AngularJS, the <code>ng-repeat</code> directive repeats the associated DOM element for each item in the specified collection. <br> In this example, the table row (<code>&#x3C;tr></code>) element repeats for each movie object in the collection of movies.</td>\n<td align=\"left\"><header><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n\n</code-example> The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> directive in Angular is like the <code>ng-repeat</code> directive in AngularJS. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (<code>&#x3C;tr></code> in this example) and its contents into a template and uses that template to instantiate a view for each item in the list. <br> Notice the other syntax differences: <ul><li>The (<code>*</code>) before <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is required</li><li>The <code>let</code> keyword identifies <code>movie</code> as an input variable</li><li>The list preposition is <code>of</code>, not <code>in</code></li></ul>For more information, see <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-repeat</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in vm.movies\"> </code-example>在 AngularJS 中，<code>ng-repeat</code> 指令为指定集合中的每个条目复写关联的 DOM 元素。<br>在此示例中，表行 ( <code>&#x3C;tr></code> ) 元素会为电影集合中的每个电影对象复写。</td>\n<td align=\"left\"><header><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n\n</code-example>Angular 中的 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令类似于 AngularJS 中的 <code>ng-repeat</code> 指令。它为指定集合中的每个条目重复关联的 DOM 元素。更准确地说，它将定义的元素（在此示例中为 <code>&#x3C;tr></code>）及其内容转换为模板，并使用该模板为列表中的每个条目实例化一个视图。<br>请注意其他语法区别：<ul><li><code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 之前的 ( <code>*</code> ) 是必需的</li><li><code>let</code> 关键字将 <code>movie</code> 标识为输入变量</li><li>列表介词是 <code>of</code>，而不是 <code>in</code>。</li></ul>有关更多信息，请参阅<a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">结构指令</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-show--bind-to-the-hidden-property\"><code>ng-show</code> → Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-show--绑定到-hidden-属性\"><code>ng-show</code> → 绑定到 <code>hidden</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-show--绑定到-hidden-属性\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-show</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;h3 ng-show=\"vm.favoriteHero\"> \n   Your favorite hero is: {{vm.favoriteHero}} \n &#x3C;/h3> </code-example> In AngularJS, the <code>ng-show</code> directive shows or hides the associated DOM element, based on an expression. <br> In this example, the <code>&#x3C;div></code> element is shown if the <code>favoriteHero</code> variable is truthy.</td>\n<td align=\"left\"><header>Bind to the <code>hidden</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\">\n&#x3C;h3 [hidden]=\"!favoriteHero\">\n  Your favorite hero is: {{favoriteHero}}\n&#x3C;/h3>\n\n</code-example> Angular uses property binding. Angular has no built-in <em>show</em> directive. For hiding and showing elements, bind to the HTML <code>hidden</code> property. <br> To conditionally display an element the <code>hidden</code> property of the element can be used. Place the <code>hidden</code> property in square brackets and set it to a quoted template expression that evaluates to the <em>opposite</em> of <em>show</em>. <br> In this example, the <code>&#x3C;div></code> element is hidden if the <code>favoriteHero</code> variable is not truthy. <br> For more information on property binding, see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-show</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;h3 ng-show=\"vm.favoriteHero\"> \n   Your favorite hero is: {{vm.favoriteHero}} \n &#x3C;/h3> </code-example>在 AngularJS 中，<code>ng-show</code> 指令会根据表达式显示或隐藏关联的 DOM 元素。<br>在此示例中，如果 <code>favoriteHero</code> 变量为真值，则会显示 <code>&#x3C;div></code> 元素。</td>\n<td align=\"left\"><header>绑定到<code>hidden</code>属性</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\">\n&#x3C;h3 [hidden]=\"!favoriteHero\">\n  Your favorite hero is: {{favoriteHero}}\n&#x3C;/h3>\n\n</code-example>Angular 使用属性绑定；Angular 没有内置的<em>show</em>指令。要隐藏和显示元素，请绑定到 HTML 的 <code>hidden</code> 属性。<br>要有条件地显示一个元素，可以使用元素的 <code>hidden</code> 属性。也就是将元素的 <code>hidden</code> 属性放在方括号中，并将其设置为带引号的模板表达式，该表达式的值为<em>show</em>的<em>相反</em>。<br>在此示例中，如果 <code>favoriteHero</code> 变量不是真值，则 <code>&#x3C;div></code> 元素会被隐藏。<br>有关属性绑定的更多信息，请参阅<a href=\"guide/property-binding\" title=\"Property binding | Angular\">属性绑定</a>页面。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-src--bind-to-the-src-property\"><code>ng-src</code> → Bind to the <code>src</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-src--bind-to-the-src-property\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"ng-src--绑定到-src-属性\"><code>ng-src</code> → 绑定到 <code>src</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-src--绑定到-src-属性\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-src</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ng-src=\"{{movie.imageurl}}\"> </code-example> The <code>ng-src</code> directive allows AngularJS to preprocess the <code>src</code> property. This replaces the binding expression with the appropriate URL before the browser fetches from that URL.</td>\n<td align=\"left\"><header>Bind to the <code>src</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\">\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"movie.imageurl\" [alt]=\"movie.title\">\n\n</code-example> Angular uses property binding. Angular has no built-in <em>src</em> directive. Place the <code>src</code> property in square brackets and set it to a quoted template expression. <br> For more information on property binding, see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-src</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ng-src=\"{{movie.imageurl}}\"> </code-example><code>ng-src</code> 指令允许 AngularJS 预处理 <code>src</code> 属性。在浏览器从 URL 获取之前，它可以用适当的 URL 替换绑定表达式。</td>\n<td align=\"left\"><header>绑定到<code>src</code>属性</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\">\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"movie.imageurl\" [alt]=\"movie.title\">\n\n</code-example>Angular 使用属性绑定；Angular 没有内置的<em>src</em>指令。将 <code>src</code> 属性放在方括号中，并将其设置为带引号的模板表达式。<br>有关属性绑定的更多信息，请参阅<a href=\"guide/property-binding\" title=\"Property binding | Angular\">属性绑定</a>页面。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-style--ngstyle\"><code>ng-style</code> → <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-style--ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-style</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-style=\"{color: colorPreference}\"> </code-example> In AngularJS, the <code>ng-style</code> directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with: <ul><li> each key of the object defined as a CSS property</li><li>each value defined as an expression that evaluates to a value appropriate for the style</li></ul> In the example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\">\n&#x3C;div [style.color]=\"colorPreference\">\n\n</code-example> In Angular, the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive works similarly. It sets a CSS style on an HTML element based on an expression. <br> In the first example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable. <br> Angular also has <strong>style binding</strong>, which is good way to set a single style. This is shown in the second example. <br> For more information on style binding, see the <a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">Style binding</a> section of the <a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">Attribute binding</a> page. <br> For more information on the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive, see the <a href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\" title=\"Setting inline styles with NgStyle - Built-in directives | Angular\">NgStyle</a> section of the <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-style</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-style=\"{color: colorPreference}\"> </code-example>在 AngularJS 中，<code>ng-style</code> 指令会根据表达式在 HTML 元素上设置 CSS 样式。该表达式通常是一个键值控制对象： <ul><li>对象的每个键都定义为 CSS 属性</li><li>每个值都定义为一个表达式，可以估算为控制何时应用该风格的值。</li></ul>在此示例中，<code>color</code> 样式设置成了 <code>colorPreference</code> 变量的当前值。</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\">\n&#x3C;div [style.color]=\"colorPreference\">\n\n</code-example>在 Angular 中，<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的工作方式类似。它根据表达式在 HTML 元素上设置 CSS 样式。<br>在第一个示例中，<code>color</code> 风格设置为 <code>colorPreference</code> 变量的当前值。<br>Angular 还具有<strong>样式绑定</strong>，这是设置单个样式的好方法。这在第二个示例中显示。<br>有关样式绑定的更多信息，请参阅<a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">属性绑定</a>页面的<a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">样式绑定</a>部分。<br>有关 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的更多信息，请参阅<a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">内置指令</a>页面的<a href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\" title=\"Setting inline styles with NgStyle - Built-in directives | Angular\">NgStyle</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-switch--ngswitch\"><code>ng-switch</code> → <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-switch--ngswitch\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-switch</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-switch=\"vm.favoriteHero &#x26;&#x26; vm.checkMovieHero(vm.favoriteHero)\"> \n   &#x3C;div ng-switch-when=\"true\"> \n     Excellent choice. \n   &#x3C;/div> \n   &#x3C;div ng-switch-when=\"false\"> \n     No movie, sorry. \n   &#x3C;/div> \n   &#x3C;div ng-switch-default> \n     Please enter your favorite hero. \n   &#x3C;/div> \n &#x3C;/div> </code-example> In AngularJS, the <code>ng-switch</code> directive swaps the contents of an element by selecting one of the templates based on the current value of an expression. <br> In this example, if <code>favoriteHero</code> is not set, the template displays \"Please enter …\". If <code>favoriteHero</code> is set, it checks the movie hero by calling a controller method. If that method returns <code>true</code>, the template displays \"Excellent choice!\". If that methods returns <code>false</code>, the template displays \"No movie, sorry!\".</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\">\n&#x3C;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &#x26;&#x26;\n               checkMovieHero(favoriteHero)\">\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\">\n    Excellent choice!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\">\n    No movie, sorry!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>>\n    Please enter your favorite hero.\n  &#x3C;/p>\n&#x3C;/span>\n\n</code-example> In Angular, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> directive works similarly. It displays an element whose <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> matches the current <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> expression value. <br> In this example, if <code>favoriteHero</code> is not set, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> value is <code>null</code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> displays, \"Please enter your favorite hero.\" If <code>favoriteHero</code> is set, the application checks the movie hero by calling a component method. If that method returns <code>true</code>, the application selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> and displays: \"Excellent choice!\" If that methods returns <code>false</code>, the application selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> and displays: \"No movie, sorry!\" <br> The (<code>*</code>) before <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> is required in this example. <br> For more information, see <a href=\"guide/built-in-directives#switching-cases-with-ngswitch\" title=\"Switching cases with NgSwitch - Built-in directives | Angular\">The NgSwitch directives</a> section of the <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>ng-switch</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-switch=\"vm.favoriteHero &#x26;&#x26; vm.checkMovieHero(vm.favoriteHero)\"> \n   &#x3C;div ng-switch-when=\"true\"> \n     Excellent choice. \n   &#x3C;/div> \n   &#x3C;div ng-switch-when=\"false\"> \n     No movie, sorry. \n   &#x3C;/div> \n   &#x3C;div ng-switch-default> \n     Please enter your favorite hero. \n   &#x3C;/div> \n &#x3C;/div> </code-example>在 AngularJS 中，<code>ng-switch</code> 指令通过根据表达式的当前值选择模板之一来切换元素的内容。<br>在此示例中，如果未设置 <code>favoriteHero</code>，则模板会显示“Please enter your favorite hero.”。如果设置了 <code>favoriteHero</code>，它会通过调用控制器方法来检查电影英雄。如果该方法返回 <code>true</code>，则模板会显示“Excellent choice!”。如果该方法返回 <code>false</code>，则模板会显示“No movie, sorry!”。</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\">\n&#x3C;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &#x26;&#x26;\n               checkMovieHero(favoriteHero)\">\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\">\n    Excellent choice!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\">\n    No movie, sorry!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>>\n    Please enter your favorite hero.\n  &#x3C;/p>\n&#x3C;/span>\n\n</code-example>在 Angular 中，<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 指令的工作方式类似。它显示一个元素，其 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 与当前的 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 表达式值匹配。<br>在此示例中，如果未设置 <code>favoriteHero</code>，则 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 的值为 <code>null</code>，并且 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 显示“Please enter …”。如果设置了 <code>favoriteHero</code>，应用程序会通过调用组件方法来检查电影英雄。如果该方法返回 <code>true</code>，则应用程序会选择 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> 并显示：“Excellent choice!”如果该方法返回 <code>false</code>，则应用程序会选择 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> 并显示：“No movie, sorry!”<br>在此示例中，需要 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 之前的 ( <code>*</code> )。<br>有关更多信息，请参阅<a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">内置指令</a>页面<a href=\"guide/built-in-directives#switching-cases-with-ngswitch\" title=\"Switching cases with NgSwitch - Built-in directives | Angular\">的 NgSwitch 指令</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"filters--pipes-1\">Filters / pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes-1\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"过滤器管道-1\">过滤器/管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#过滤器管道-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular <strong>pipes</strong> provide formatting and transformation for data in the template, like AngularJS <strong>filters</strong>.\nMany of the built-in filters in AngularJS have corresponding pipes in Angular.\nFor more information on pipes, see <a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>.</p>\n<p>Angular 中的<strong>管道</strong>为模板提供了格式化和数据转换功能，类似于 AngularJS 中的<strong>过滤器</strong>。\nAngularJS 中的很多内置过滤器在 Angular 中都有对应的管道。\n要了解管道的更多信息，参阅<a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>。</p>\n<h3 id=\"currency--currency\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> → <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#currency--currency\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>}} \n &#x3C;/td> </code-example> Formats a number as currency.</td>\n<td align=\"left\"><header><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\">\n&#x3C;td>{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'USD':true}}&#x3C;/td>\n\n</code-example> The Angular <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> pipe is similar although some of the parameters have changed.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>}} \n &#x3C;/td> </code-example>将数字格式化为货币。</td>\n<td align=\"left\"><header><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\">\n&#x3C;td>{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'USD':true}}&#x3C;/td>\n\n</code-example>尽管某些参数发生了更改，但 Angular <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> 管道是相似的。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"date--date\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> → <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#date--date\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}} \n &#x3C;/td> </code-example> Formats a date to a string based on the requested format.</td>\n<td align=\"left\"><header><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\">\n&#x3C;td>{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&#x3C;/td>\n\n</code-example> The Angular <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe is similar.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}} \n &#x3C;/td> </code-example>根据请求的格式将日期格式化为字符串。</td>\n<td align=\"left\"><header><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\">\n&#x3C;td>{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&#x3C;/td>\n\n</code-example>Angular <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道是类似的。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"filter--none\"><code>filter</code> → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filter--none\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"filter--无\"><code>filter</code> → 无<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filter--无\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>filter</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"> </code-example> Selects a subset of items from the defined collection, based on the filter criteria.</td>\n<td align=\"left\"><header>none</header> For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>filter</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"> </code-example>根据过滤条件从定义的集合中选择项目的子集。</td>\n<td align=\"left\"><header>无</header>出于性能原因，Angular 中不存在可类比的管道。请在组件中进行所有过滤。如果你在多个模板中需要相同的过滤代码，请考虑构建自定义管道。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"json--json\"><code>json</code> → <code>json</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#json--json\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>json</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;pre> \n   {{movie | json}} \n &#x3C;/pre> </code-example> Converts a JavaScript object into a JSON string. This is useful for debugging.</td>\n<td align=\"left\"><header><code>json</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\">\n&#x3C;pre>{{movie | json}}&#x3C;/pre>\n\n</code-example> The Angular <a href=\"api/common/JsonPipe\" title=\"JsonPipe | @angular/common - API | Angular\"><code>json</code></a> pipe does the same thing.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>json</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;pre> \n   {{movie | json}} \n &#x3C;/pre> </code-example>将 JavaScript 对象转换为 JSON 字符串。这对于调试很有用。</td>\n<td align=\"left\"><header><code>json</code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\">\n&#x3C;pre>{{movie | json}}&#x3C;/pre>\n\n</code-example>Angular <a href=\"api/common/JsonPipe\" title=\"JsonPipe | @angular/common - API | Angular\"><code>json</code></a>管道做同样的事情。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"limitto--slice\"><code>limitTo</code> → <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#limitto--slice\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>limitTo</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | limitTo:2:0\"> </code-example> Selects up to the first parameter <code>2</code> number of items from the collection starting optionally at the beginning index <code>0</code>.</td>\n<td align=\"left\"><header><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\">\n\n</code-example> The <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> does the same thing but the <em>order of the parameters is reversed</em>, in keeping with the JavaScript <code>Slice</code> method. The first parameter is the starting index and the second is the limit. As in AngularJS, coding this operation within the component instead could improve performance.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>limitTo</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | limitTo:2:0\"> </code-example>从开始索引 <code>0</code> 处开始（可选）的集合中选择最多第一个参数 <code>2</code> 的条目。</td>\n<td align=\"left\"><header><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\">\n\n</code-example><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> 做同样的事情，但<em>参数的顺序是相反</em>的，与 JavaScript <code>Slice</code> 方法保持一致。第一个参数是起始索引，第二个是限长。与在 AngularJS 中一样，在组件中对此操作进行编码可以提高性能。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"lowercase--lowercase\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> → <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#lowercase--lowercase\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}} \n &#x3C;/td> </code-example> Converts the string to lowercase.</td>\n<td align=\"left\"><header><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/td>\n\n</code-example> The Angular <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> pipe does the same thing.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}} \n &#x3C;/td> </code-example>将字符串转换为小写。</td>\n<td align=\"left\"><header><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/td>\n\n</code-example>Angular <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> 管道做同样的事情。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"number--number\"><code>number</code> → <code>number</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#number--number\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>number</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.starRating | number}} \n &#x3C;/td> </code-example> Formats a number as text.</td>\n<td align=\"left\"><header><code>number</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\">\n&#x3C;td>{{movie.starRating | number}}&#x3C;/td>\n&#x3C;td>{{movie.starRating | number:'1.1-2'}}&#x3C;/td>\n&#x3C;td>{{movie.approvalRating | <a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a>: '1.0-2'}}&#x3C;/td>\n\n</code-example> The Angular <a href=\"api/common/DecimalPipe\" title=\"DecimalPipe | @angular/common - API | Angular\"><code>number</code></a> pipe is similar. It provides more capabilities when defining the decimal places, as shown in the preceding second example. <br> Angular also has a <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> pipe, which formats a number as a local percentage as shown in the third example.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>number</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.starRating | number}} \n &#x3C;/td> </code-example>将数字格式化为文本。</td>\n<td align=\"left\"><header><code>number</code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\">\n&#x3C;td>{{movie.starRating | number}}&#x3C;/td>\n&#x3C;td>{{movie.starRating | number:'1.1-2'}}&#x3C;/td>\n&#x3C;td>{{movie.approvalRating | <a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a>: '1.0-2'}}&#x3C;/td>\n\n</code-example>Angular <a href=\"api/common/DecimalPipe\" title=\"DecimalPipe | @angular/common - API | Angular\"><code>number</code></a>管道是类似的。它在定义小数位时提供了更多特性，如上面的第二个示例所示。<br>Angular 还有一个 <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> 管道，它将数字格式化为本地百分比，如第三个示例所示。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"orderby--none\"><code>orderBy</code> → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#orderby--none\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"orderby--无\"><code>orderBy</code> → 无<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#orderby--无\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>orderBy</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"> </code-example> Displays the collection in the order specified by the expression. In this example, the movie title orders the <code>movieList</code>.</td>\n<td align=\"left\"><header>none</header> For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>orderBy</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"> </code-example>按表达式指定的顺序显示集合。在此示例中，电影标题会按 <code>movieList</code> 的顺序。</td>\n<td align=\"left\"><header>无</header>出于性能原因，Angular 中不存在可类比的管道。相反，请使用组件代码对结果进行排序或排序。如果你需要在多个模板中使用相同的排序或排序代码，请考虑构建自定义管道。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"modules--controllers--components\">Modules / controllers / components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#modules--controllers--components\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"模块控制器组件\">模块/控制器/组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#模块控制器组件\"><i class=\"material-icons\">link</i></a></h2>\n<p>In both AngularJS and Angular, modules help you organize your application into cohesive blocks of features.</p>\n<p>无论在 AngularJS 还是 Angular 中，“模块”都会帮你把应用拆分成一些内聚的功能块。</p>\n<p>In AngularJS, you write the code that provides the model and the methods for the view in a <strong>controller</strong>.\nIn Angular, you build a <strong>component</strong>.</p>\n<p>在 AngularJS 中，你要在<strong>控制器</strong>中写代码，来为视图提供模型和方法。在 Angular 中，你要创建<strong>组件</strong>。</p>\n<p>Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column.\nThe Angular code is shown using TypeScript.</p>\n<p>因为很多 AngularJS 的代码是用 JavaScript 写的，所以在 AngularJS 列显示的是 JavaScript 代码，而 Angular 列显示的是 TypeScript 代码。</p>\n<h3 id=\"immediately-invoked-function-expression-iife--none\">Immediately invoked function expression (IIFE) → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"即刻调用函数表达式iife--无\">即刻调用函数表达式（IIFE） → 无<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#即刻调用函数表达式iife--无\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>IIFE</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> ( \n  function () { \n    … \n  }() \n); </code-example> In AngularJS, an IIFE around controller code keeps it out of the global namespace.</td>\n<td align=\"left\"><header>none</header> This is a nonissue in Angular because ES 2015 modules handle the namespace for you. <br> For more information on modules, see the <a href=\"guide/architecture#modules\" title=\"Modules - Introduction to Angular concepts | Angular\">Modules</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>IIFE</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> ( \n  function () { \n    … \n  }() \n); </code-example>在 AngularJS 中，IIFE 会围绕控制器代码，以将其排除在全局命名空间之外。</td>\n<td align=\"left\"><header>无</header>这在 Angular 中不是问题，因为 ES 2015 模块会为你处理命名空间。<br>有关模块的更多信息，请参阅<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架构概览</a>的<a href=\"guide/architecture#modules\" title=\"Modules - Introduction to Angular concepts | Angular\">模块</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"angular-modules--ngmodules\">Angular modules → <code>NgModules</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angular-modules--ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"angular-模块--ngmodules\">Angular 模块 → <code>NgModules</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angular-模块--ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Angular modules</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n  \"movieHunter\", \n  [ \n    \"ngRoute\" \n  ] \n); </code-example> In AngularJS, an Angular module keeps track of controllers, services, and other code. The second argument defines the list of other modules that this module depends upon.</td>\n<td align=\"left\"><header><code>NgModules</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example> NgModules, defined with the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator, serve the same purpose: <ul> <li><code>imports</code>: specifies the list of other modules that this module depends upon</li> <li><code>declaration</code>: keeps track of your components, pipes, and directives.</li> </ul> For more information on modules, see <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>Angular 模块</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n  \"movieHunter\", \n  [ \n    \"ngRoute\" \n  ] \n); </code-example>在 AngularJS 中，Angular 模块会跟踪控制器、服务和其他代码。第二个参数定义此模块依赖的其他模块的列表。</td>\n<td align=\"left\"><header><code>NgModules</code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>使用 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器定义的 NgModules 具有相同的目的：<ul><li><code>imports</code> ：指定此模块依赖的其他模块的列表</li><li><code>declaration</code> : 跟踪你的组件、管道和指令。</li></ul>有关模块的更多信息，请参阅<a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"controller-registration--component-decorator\">Controller registration → component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-registration--component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"控制器注册--组件装饰器\">控制器注册 → 组件装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#控制器注册--组件装饰器\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Controller registration</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n  \"movieHunter\" \n) .controller( \n  \"MovieListCtrl\", \n  [ \n    \"movieService\", \n    MovieListCtrl \n  ] \n); </code-example> AngularJS has code in each controller that looks up an appropriate Angular module and registers the controller with that module. <br> The first argument is the controller name. The second argument defines the string names of all dependencies injected into this controller, and a reference to the controller function.</td>\n<td align=\"left\"><header>Component decorator</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example> Angular adds a decorator to the component class to provide any required metadata. The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator declares that the class is a component and provides metadata about that component such as its selector, or tag, and its template. <br> This is how you associate a template with logic, which is defined in the component class. <br> For more information, see the <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Components</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>控制器注册</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n  \"movieHunter\" \n) .controller( \n  \"MovieListCtrl\", \n  [ \n    \"movieService\", \n    MovieListCtrl \n  ] \n); </code-example>AngularJS 在每个控制器中都有代码，可以查找适当的 Angular 模块并将控制器注册到该模块。<br>第一个参数是控制器名称。第二个参数定义注入此控制器的所有依赖项的字符串名称，以及对控制器函数的引用。</td>\n<td align=\"left\"><header>组件装饰器</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example>Angular 向组件类添加了一个装饰器，以提供任何所需的元数据。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器声明类是组件，并提供有关该组件的元数据，例如其选择器（或标签）和模板。<br>这就是你将模板与组件类中定义的逻辑关联起来的方式。<br>有关更多信息，请参阅<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架构概览</a>页面的<a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">组件</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"controller-function--component-class\">Controller function → component class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-function--component-class\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"控制器函数--组件类\">控制器函数 → 组件类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#控制器函数--组件类\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Controller function</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> function MovieListCtrl(movieService) { \n } </code-example> In AngularJS, you write the code for the model and methods in a controller function.</td>\n<td align=\"left\"><header>Component class</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\">\nexport class MovieListComponent {\n}\n\n</code-example> In Angular, you create a component class to contain the data model and control methods. Use the TypeScript <code>export</code> keyword to export the class so that the component can be imported into NgModules. <br> For more information, see the <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Components</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a> page.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>Controller 函数</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> function MovieListCtrl(movieService) { \n } </code-example>在 AngularJS 中，你在控制器函数中为模型和方法编写代码。</td>\n<td align=\"left\"><header>组件类</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\">\nexport class MovieListComponent {\n}\n\n</code-example>在 Angular 中，你创建一个组件类来包含数据模型和控制方法。使用 TypeScript <code>export</code> 关键字来导出类，以便可以将此组件导入 NgModules。<br>有关更多信息，请参阅<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架构概览</a>页面的<a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">组件</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"dependency-injection--dependency-injection\">Dependency injection → dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection--dependency-injection\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"依赖注入--依赖注入\">依赖注入 → 依赖注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#依赖注入--依赖注入\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Dependency injection</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> MovieListCtrl.$inject = [ \n  'MovieService' \n]; \nfunction MovieListCtrl(movieService) { \n} </code-example> In AngularJS, you pass in any dependencies as controller function arguments. This example injects a <code>MovieService</code>. <br> To guard against minification problems, tell Angular explicitly that it should inject an instance of the <code>MovieService</code> in the first parameter.</td>\n<td align=\"left\"><header>Dependency injection</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example> In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a <code>MovieService</code>. The TypeScript type of the first parameter tells Angular what to inject, even after minification. <br> For more information, see the <a href=\"guide/architecture#services-and-dependency-injection\" title=\"Services and dependency injection - Introduction to Angular concepts | Angular\">Dependency injection</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><header>依赖注入</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> MovieListCtrl.$inject = [ \n  'MovieService' \n]; \nfunction MovieListCtrl(movieService) { \n} </code-example>在 AngularJS 中，你将任何依赖项作为控制器函数参数传入。此示例注入 <code>MovieService</code>。<br>为了防止最小化时出现问题，请显式告诉 Angular 它应该在第一个参数中注入一个 <code>MovieService</code> 实例。</td>\n<td align=\"left\"><header>依赖注入</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example>在 Angular 中，你将依赖项作为参数传递给组件类构造函数。此示例注入 <code>MovieService</code>。第一个参数的 TypeScript 类型告诉 Angular 要注入什么，即使是在缩小之后。<br>有关更多信息，请参阅<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架构概览</a>的<a href=\"guide/architecture#services-and-dependency-injection\" title=\"Services and dependency injection - Introduction to Angular concepts | Angular\">依赖注入</a>部分。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"style-sheets\">Style sheets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#style-sheets\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"样式表\">样式表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#样式表\"><i class=\"material-icons\">link</i></a></h2>\n<p>Style sheets give your application a nice look.\nIn AngularJS, you specify the style sheets for your entire application.\nAs the application grows over time, the styles for the many parts of the application merge, which can cause unexpected results.\nIn Angular, you can still define style sheets for your entire application.\nNow you can also encapsulate a style sheet within a specific component.</p>\n<p>样式表让你的应用程序看起来更漂亮。\n在 AngularJS 中，你要为整个应用程序指定样式表。\n随着应用程序的不断成长，为各个部分指定的样式会被合并，导致无法预计的后果。\n在 Angular 中，你仍然要为整个应用程序定义样式，不过现在也可以把样式表封装在特定的组件中。</p>\n<h3 id=\"link-tag--styles-configuration-or-styleurls\"><code>Link</code> tag → <code>styles</code> configuration or <code>styleUrls</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"link-标签--styles-配置或-styleurls\"><code>Link</code> 标签 → <code>styles</code> 配置或 <code>styleUrls</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-标签--styles-配置或-styleurls\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>Link</code> tag</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;link href=\"styles.css\" \n      rel=\"stylesheet\" /> </code-example> AngularJS, uses a <code>link</code> tag in the head section of the <code>index.html</code> file to define the styles for the application.</td>\n<td align=\"left\"><header><code>styles</code> configuration</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example> With the Angular CLI, you can configure your global styles in the <code>angular.json</code> file. You can rename the extension to <code>.scss</code> to use sass. <br><br> <header><code>styleUrls</code></header> In Angular, you can use the <code>styles</code> or <code>styleUrls</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata to define a style sheet for a particular component. <br> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example> This allows you to set appropriate styles for individual components that do not leak into other parts of the application.</td>\n</tr>\n<tr>\n<td align=\"left\"><header><code>Link</code>标签</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;link href=\"styles.css\" \n      rel=\"stylesheet\" /> </code-example>AngularJS 使用 <code>index.html</code> 文件 head 中的 <code>link</code> 标签来定义应用程序的样式。</td>\n<td align=\"left\"><header><code>styles</code>配置</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example>使用 Angular CLI，你可以在 <code>angular.json</code> 文件中配置你的全局样式。你可以将扩展名重命名为 <code>.scss</code> 以使用 sass。<br><br><header><code>styleUrls</code></header>在 Angular 中，你可以用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据的 style 或 <code>styleUrls</code> 属性来为特定组件定义 <code>styles</code> 表。<br><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example>这允许你为不会泄漏到应用程序其他部分的单个组件设置适当的样式。</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgOptimizedImage\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLink\n - guide/ajs-quick-reference#angular-modules--ngmodules\n - guide/ajs-quick-reference#angular-模块--ngmodules\n - guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\n - guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\n - guide/ajs-quick-reference#controller-function--component-class\n - guide/ajs-quick-reference#controller-registration--component-decorator\n - guide/ajs-quick-reference#currency--currency\n - guide/ajs-quick-reference#date--date\n - guide/ajs-quick-reference#dependency-injection--dependency-injection\n - guide/ajs-quick-reference#filter--none\n - guide/ajs-quick-reference#filter--无\n - guide/ajs-quick-reference#filters--pipes\n - guide/ajs-quick-reference#filters--pipes-1\n - guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\n - guide/ajs-quick-reference#json--json\n - guide/ajs-quick-reference#limitto--slice\n - guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\n - guide/ajs-quick-reference#link-标签--styles-配置或-styleurls\n - guide/ajs-quick-reference#local-variables--input-variables\n - guide/ajs-quick-reference#lowercase--lowercase\n - guide/ajs-quick-reference#modules--controllers--components\n - guide/ajs-quick-reference#ng-app--bootstrapping\n - guide/ajs-quick-reference#ng-app--引导\n - guide/ajs-quick-reference#ng-class--ngclass\n - guide/ajs-quick-reference#ng-click--bind-to-the-click-event\n - guide/ajs-quick-reference#ng-click--绑定到-click-事件\n - guide/ajs-quick-reference#ng-controller--component-decorator\n - guide/ajs-quick-reference#ng-controller--组件装饰器\n - guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\n - guide/ajs-quick-reference#ng-hide--绑定到-hidden-属性\n - guide/ajs-quick-reference#ng-href--bind-to-the-href-property\n - guide/ajs-quick-reference#ng-href--绑定到-href-属性\n - guide/ajs-quick-reference#ng-if--ngif\n - guide/ajs-quick-reference#ng-model--ngmodel\n - guide/ajs-quick-reference#ng-repeat--ngfor\n - guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\n - guide/ajs-quick-reference#ng-show--绑定到-hidden-属性\n - guide/ajs-quick-reference#ng-src--bind-to-the-src-property\n - guide/ajs-quick-reference#ng-src--绑定到-src-属性\n - guide/ajs-quick-reference#ng-style--ngstyle\n - guide/ajs-quick-reference#ng-switch--ngswitch\n - guide/ajs-quick-reference#number--number\n - guide/ajs-quick-reference#orderby--none\n - guide/ajs-quick-reference#orderby--无\n - guide/ajs-quick-reference#style-sheets\n - guide/ajs-quick-reference#template-basics\n - guide/ajs-quick-reference#template-directives\n - guide/ajs-quick-reference#依赖注入--依赖注入\n - guide/ajs-quick-reference#关于-angularjs-与-angular-概念的快速参考\n - guide/ajs-quick-reference#即刻调用函数表达式iife--无\n - guide/ajs-quick-reference#局部变量--输入变量\n - guide/ajs-quick-reference#控制器函数--组件类\n - guide/ajs-quick-reference#控制器注册--组件装饰器\n - guide/ajs-quick-reference#样式表\n - guide/ajs-quick-reference#模块控制器组件\n - guide/ajs-quick-reference#模板基础\n - guide/ajs-quick-reference#模板指令\n - guide/ajs-quick-reference#绑定插值--绑定插值\n - guide/ajs-quick-reference#过滤器管道\n - guide/ajs-quick-reference#过滤器管道-1\n - guide/architecture\n - guide/architecture#components\n - guide/architecture#modules\n - guide/architecture#services-and-dependency-injection\n - guide/attribute-binding\n - guide/built-in-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/class-binding\n - guide/event-binding\n - guide/interpolation\n - guide/ngmodules\n - guide/pipes\n - guide/property-binding\n - guide/router\n - guide/router#defining-a-basic-route\n - guide/structural-directives\n - guide/structural-directives#structural-directive-shorthand\n - https://developer.mozilla.org/docs/Web/Events\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/ajs-quick-reference.md?message=docs%3A%20请简述你的修改...\n-->"
}