{
  "id": "guide/ajs-quick-reference",
  "title": "AngularJS to Angular concepts: Quick reference",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/ajs-quick-reference.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"angularjs-to-angular-concepts-quick-reference\" translation-result=\"on\">关于 AngularJS 与 Angular 概念的快速参考<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"angularjs-to-angular-concepts-quick-reference\">AngularJS to Angular concepts: Quick reference<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\"><i class=\"material-icons\">link</i></a></h1>\n\n<a id=\"top\"></a>\n<p translation-result=\"on\"><em>Angular</em> 这个名字专指现在和未来的 Angular 版本，而 <em>AngularJS</em> 专指 Angular 的所有 v1.x 版本。</p><p translation-origin=\"off\"><em>Angular</em> is the name for the Angular of today and tomorrow.\n<em>AngularJS</em> is the name for all v1.x versions of Angular.</p>\n\n<p translation-result=\"on\">本章提供了一个快速的参考指南，指出一些常用的 AngularJS 语法及其在 Angular 中的等价物。</p><p translation-origin=\"off\">This guide helps you transition from AngularJS to Angular\nby mapping AngularJS syntax to the equivalent Angular syntax.</p>\n\n<p translation-result=\"on\"><strong>参见 <live-example name=\"ajs-quick-reference\"></live-example> 以学习 Angular 语法</strong></p><p translation-origin=\"off\"><strong>See the Angular syntax in this <live-example name=\"ajs-quick-reference\"></live-example></strong>.</p>\n\n<h2 id=\"template-basics\" translation-result=\"on\">模板基础<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-basics\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-basics\">Template basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-basics\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">模板是 Angular 应用中的门面部分，它是用 HTML 写的。下表中是一些 AngularJS 中的关键模板特性及其在 Angular 中的等价语法。</p><p translation-origin=\"off\">Templates are the user-facing part of an Angular application and are written in HTML.\nThe following table lists some of the key AngularJS template features with their equivalent Angular template syntax.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p>      AngularJS</p>\n    </th>\n    <th>\n<p>      Angular</p>\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"bindingsinterpolation\" translation-result=\"on\">绑定/插值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindingsinterpolation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bindingsinterpolation\">Bindings/interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindingsinterpolation\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        Your favorite hero is: {{vm.favoriteHero}}\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，花括号中的表达式代表单向绑定。\n它把元素的值绑定到了与模板相关控制器的属性上。</p><p translation-origin=\"off\">      In AngularJS, an expression in curly braces denotes one-way binding.\nThis binds the value of the element to a property in the controller\nassociated with this template.</p>\n\n<p translation-result=\"on\">      当使用 <code>controller as</code> 语法时，该绑定需要用控制器的别名(<code>vm</code>)为前缀，这是因为你不得不通过它来指定绑定源。</p><p translation-origin=\"off\">      When using the <code>controller as</code> syntax,\nthe binding is prefixed with the controller alias (<code>vm</code> or <code>$ctrl</code>) because you\nhave to be specific about the source of the binding.</p>\n\n    </td>\n    <td>\n<h3 id=\"bindingsinterpolation-1\" translation-result=\"on\">绑定/插值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindingsinterpolation-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bindingsinterpolation-1\">Bindings/interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindingsinterpolation-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，花括号中的模板表达式同样代表单向绑定。\n它把元素的值绑定到了组件的属性上。\n它绑定的上下文变量是隐式的，并且总是关联到组件。\n所以，它不需要一个引用变量。</p><p translation-origin=\"off\">      In Angular, a template expression in curly braces still denotes one-way binding.\nThis binds the value of the element to a property of the component.\nThe context of the binding is implied and is always the\nassociated component, so it needs no reference variable.</p>\n\n<p translation-result=\"on\">      要了解更多，请参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#interpolation\">插值</a>部分。</p><p translation-origin=\"off\">      For more information, see the <a href=\"guide/template-syntax#interpolation\">Interpolation</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"filters\" translation-result=\"on\">过滤器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"filters\">Filters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        &#x3C;td>{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/td>\n      </code-example>\n<p translation-result=\"on\">      要在 AngularJS 中过滤输出，使用管道字符(|)以及一个或多个过滤器。</p><p translation-origin=\"off\">      To filter output in AngularJS templates, use the pipe character (|) and one or more filters.</p>\n\n<p translation-result=\"on\">      这个例子中把 <code>title</code> 属性过滤成了大写形式。</p><p translation-origin=\"off\">      This example filters the <code>title</code> property to uppercase.</p>\n\n    </td>\n    <td>\n<h3 id=\"pipes\" translation-result=\"on\">管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#pipes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"pipes\">Pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#pipes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/td>\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，你使用类似的语法 —— 用管道字符(|)来过滤输出，但是现在直接把它叫做<strong>管道</strong>了。\n很多(但不是所有)AngularJS 中的内置过滤器也成了 Angular 中的内置管道。</p><p translation-origin=\"off\">      In Angular you use similar syntax with the pipe (|) character to filter output, but now you call them <strong>pipes</strong>.\nMany (but not all) of the built-in filters from AngularJS are\nbuilt-in pipes in Angular.</p>\n\n<p translation-result=\"on\">      请参见下面<a href=\"guide/ajs-quick-reference#filters-pipes\">过滤器/管道</a>了解更多信息。</p><p translation-origin=\"off\">      For more information, see <a href=\"guide/ajs-quick-reference#filters-pipes\">Filters/pipes</a> below.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"local-variables\" translation-result=\"on\">局部变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#local-variables\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"local-variables\">Local variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#local-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;tr ng-repeat=\"movie in vm.movies\">\n          &#x3C;td>{{movie.title}}&#x3C;/td>\n        &#x3C;/tr>\n      </code-example>\n<p translation-result=\"on\">      这里的 <code>movie</code> 是一个用户定义的局部变量</p><p translation-origin=\"off\">      Here, <code>movie</code> is a user-defined local variable.</p>\n\n    </td>\n    <td>\n<h3 id=\"input-variables\" translation-result=\"on\">输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#input-variables\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"input-variables\">Input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#input-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\">\n&#x3C;tr *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n  &#x3C;td>{{movie.title}}&#x3C;/td>\n&#x3C;/tr>\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 有了真正的模板输入变量，它需要使用 <code>let</code> 关键字进行明确定义。</p><p translation-origin=\"off\">      Angular has true template input variables that are explicitly defined using the <code>let</code> keyword.</p>\n\n<p translation-result=\"on\">      要了解更多信息，请参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#microsyntax\">ngFor 微语法</a>部分。</p><p translation-origin=\"off\">      For more information, see the <a href=\"guide/template-syntax#microsyntax\">ngFor micro-syntax</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<h2 id=\"template-directives\" translation-result=\"on\">模板指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-directives\">Template directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">AngularJS 为模板提供了七十多个内置指令。\n在 Angular 中，它们很多都已经不需要了，因为 Angular 有了一个更加强大、快捷的绑定系统。\n下面是一些 AngularJS 中的关键指令及其在 Angular 中的等价物。</p><p translation-origin=\"off\">AngularJS provides more than seventy built-in directives for templates.\nMany of them aren't needed in Angular because of its more capable and expressive binding system.\nThe following are some of the key AngularJS built-in directives and their equivalents in Angular.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p>      AngularJS</p>\n    </th>\n    <th>\n<p>      Angular</p>\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-app\">ng-app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-app\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;body ng-app=\"movieHunter\">\n      </code-example>\n<p translation-result=\"on\">      应用的启动过程被称为<strong>引导</strong>。</p><p translation-origin=\"off\">      The application startup process is called <strong>bootstrapping</strong>.</p>\n\n<p translation-result=\"on\">      虽然可以从代码中引导 Angular 应用，\n但很多应用都是通过 <code>ng-app</code> 指令进行声明式引导的，只要给它一个应用模块的名字(<code>movieHunter</code>)就可以了。</p><p translation-origin=\"off\">      Although you can bootstrap an AngularJS app in code,\nmany applications bootstrap declaratively with the <code>ng-app</code> directive,\ngiving it the name of the application's module (<code>movieHunter</code>).</p>\n\n    </td>\n    <td>\n<h3 id=\"bootstrapping\" translation-result=\"on\">引导<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bootstrapping\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bootstrapping\">Bootstrapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/main.ts\" header=\"main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-example>\n<br></p>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" header=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 没有引导指令。\n总是要通过显式调用一个 <code>bootstrap</code> 函数，并传入应用模块的名字(<code>AppComponent</code>)来启动应用。</p><p translation-origin=\"off\">      Angular doesn't have a bootstrap directive.\nTo launch the app in code, explicitly bootstrap the application's root module (<code>AppModule</code>)\nin <code>main.ts</code>\nand the application's root component (<code>AppComponent</code>) in <code>app.module.ts</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-class\">ng-class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-class\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;div ng-class=\"{active: isActive}\">\n        &#x3C;div ng-class=\"{active: isActive,\n                           shazam: isImportant}\">\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-class</code> 指令会基于一个表达式来包含/排除某些 CSS 类。该表达式通常是一个“键-值”型的控制对象，\n对象中的每一个键代表一个 CSS 类名，每一个值定义为一个返回布尔值的模板表达式。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-class</code> directive includes/excludes CSS classes\nbased on an expression. That expression is often a key-value control object with each\nkey of the object defined as a CSS class name, and each value defined as a template expression\nthat evaluates to a Boolean value.</p>\n\n<p translation-result=\"on\">      在第一个例子中，如果 <code>isActive</code> 为真，则 <code>active</code> 类被应用到那个元素上。</p><p translation-origin=\"off\">      In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true.</p>\n\n<p translation-result=\"on\">      就像第二个例子中所展示的那样，可以同时指定多个类。</p><p translation-origin=\"off\">      You can specify multiple classes, as shown in the second example.</p>\n\n    </td>\n    <td>\n<h3 id=\"ngclass\">ngClass<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\">\n&#x3C;div [class.active]=\"isActive\">\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，<code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 指令用类似的方式工作。\n它根据一个表达式包含/排除某些 CSS 类。</p><p translation-origin=\"off\">      In Angular, the <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> directive works similarly.\nIt includes/excludes CSS classes based on an expression.</p>\n\n<p translation-result=\"on\">      在第一个例子中，如果 <code>isActive</code> 为真，则 <code>active</code> 类被应用到那个元素上。</p><p translation-origin=\"off\">      In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true.</p>\n\n<p translation-result=\"on\">      就像第二个例子中所展示的那样，可以同时指定多个类。</p><p translation-origin=\"off\">      You can specify multiple classes, as shown in the second example.</p>\n\n<p translation-result=\"on\">      Angular 还有<strong>类绑定</strong>，它是单独添加或移除一个类的好办法 —— 就像第三个例子中展示的。</p><p translation-origin=\"off\">      Angular also has <strong>class binding</strong>, which is a good way to add or remove a single class,\nas shown in the third example.</p>\n\n<p translation-result=\"on\">      要了解更多信息，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#other-bindings\">属性、CSS 类和样式绑定</a>部分。</p><p translation-origin=\"off\">      For more information see the <a href=\"guide/template-syntax#other-bindings\">Attribute, class, and style bindings</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-click\">ng-click<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-click\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;button ng-click=\"vm.toggleImage()\">\n        &#x3C;button ng-click=\"vm.toggleImage($event)\">\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-click</code> 指令指定当元素被点击时的自定义行为。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-click</code> directive allows you to specify custom behavior when an element is clicked.</p>\n\n<p translation-result=\"on\">      在第一个例子中，如果用户点击了这个按钮，那么控制器的 <code>toggleImage()</code> 方法就会被执行，这个控制器是被 <code>controller as</code> 中指定的 <code>vm</code> 别名所引用的。</p><p translation-origin=\"off\">      In the first example, when the user clicks the button, the <code>toggleImage()</code> method in the controller referenced by the <code>vm</code> <code>controller as</code> alias is executed.</p>\n\n<p translation-result=\"on\">      第二个例子演示了传入 <code>$event</code> 对象，它提供了事件的详情，并被传到控制器。</p><p translation-origin=\"off\">      The second example demonstrates passing in the <code>$event</code> object, which provides details about the event\nto the controller.</p>\n\n    </td>\n    <td>\n<h3 id=\"bind-to-the-click-event\" translation-result=\"on\">绑定到 <code>click</code> 事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-click-event\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bind-to-the-click-event\">Bind to the <code>click</code> event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-click-event\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\">\n&#x3C;button (click)=\"toggleImage()\">\n&#x3C;button (click)=\"toggleImage($event)\">\n\n</code-example></p>\n<p translation-result=\"on\">      AngularJS 基于事件的指令在 Angular 中已经不存在了。\n不过，可以使用<strong>事件绑定</strong>来定义从模板视图到组件的单向数据绑定。</p><p translation-origin=\"off\">      AngularJS event-based directives do not exist in Angular.\nRather, define one-way binding from the template view to the component using <strong>event binding</strong>.</p>\n\n<p translation-result=\"on\">      要使用事件绑定，把目标事件的名字放在圆括号中，并且使用等号右侧引号中的模板语句对它赋值。\n然后 Angular 为这个目标时间设置事件处理器。当事件被触发时，这个处理器就会执行模板语句。</p><p translation-origin=\"off\">      For event binding, define the name of the target event within parenthesis and\nspecify a template statement, in quotes, to the right of the equals. Angular then\nsets up an event handler for the target event. When the event is raised, the handler\nexecutes the template statement.</p>\n\n<p translation-result=\"on\">      在第一个例子中，当用户点击此按钮时，相关组件中的 <code>toggleImage()</code> 方法就被执行了。</p><p translation-origin=\"off\">      In the first example, when a user clicks the button, the <code>toggleImage()</code> method in the associated component is executed.</p>\n\n<p translation-result=\"on\">      第二个例子演示了如何传入 <code>$event</code> 对象，它为组件提供了此事件的详情。</p><p translation-origin=\"off\">      The second example demonstrates passing in the <code>$event</code> object, which provides details about the event\nto the component.</p>\n\n<p translation-result=\"on\">      要查看 DOM 事件的列表，请参见<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">网络事件</a>。</p><p translation-origin=\"off\">      For a list of DOM events, see: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">https://developer.mozilla.org/en-US/docs/Web/Events</a>.</p>\n\n<p translation-result=\"on\">      要了解更多，请参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#event-binding\">事件绑定</a>部分。</p><p translation-origin=\"off\">      For more information, see the <a href=\"guide/template-syntax#event-binding\">Event binding</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-controller\">ng-controller<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-controller\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;div ng-controller=\"MovieListCtrl as vm\">\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-controller</code> 指令把控制器附加到视图上。\n使用 <code>ng-controller</code>(或把控制器定义为路由的一部分)把视图及其控制器的代码联系在一起。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-controller</code> directive attaches a controller to the view.\nUsing the <code>ng-controller</code> (or defining the controller as part of the routing) ties the\nview to the controller code associated with that view.</p>\n\n    </td>\n    <td>\n<h3 id=\"component-decorator\" translation-result=\"on\">组件装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#component-decorator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"component-decorator\">Component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，模板不用再指定它相关的控制器。\n反过来，组件会在组件类的装饰器中指定与它相关的模板。</p><p translation-origin=\"off\">      In Angular, the template no longer specifies its associated controller.\nRather, the component specifies its associated template as part of the component class decorator.</p>\n\n<p translation-result=\"on\">      要了解更多，请参见<a href=\"guide/architecture#components\">架构概览</a>。</p><p translation-origin=\"off\">      For more information, see <a href=\"guide/architecture#components\">Architecture Overview</a>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-hide\">ng-hide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-hide\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-hide</code> 指令会基于一个表达式显示或隐藏相关的 HTML 元素。\n参见<a href=\"guide/ajs-quick-reference#ng-show\">ng-show</a>了解更多。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-hide</code> directive shows or hides the associated HTML element based on\nan expression. For more information, see <a href=\"guide/ajs-quick-reference#ng-show\">ng-show</a>.</p>\n\n    </td>\n    <td>\n<h3 id=\"bind-to-the-hidden-property\" translation-result=\"on\">绑定到 <code>hidden</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bind-to-the-hidden-property\">Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">      在 Angular 中，并没有一个内置的 <em>hide</em> 指令，可以改用属性绑定。\n参见<a href=\"guide/ajs-quick-reference#ng-show\">ng-show</a>了解更多。</p><p translation-origin=\"off\">      In Angular, you use property binding; there is no built-in <em>hide</em> directive.\nFor more information, see <a href=\"guide/ajs-quick-reference#ng-show\">ng-show</a>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-href\">ng-href<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-href\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;a ng-href=\"{{ angularDocsUrl }}\">Angular Docs&#x3C;/a>\n      </code-example>\n<p translation-result=\"on\">      <code>ng-href</code> 指令允许 AngularJS 对 <code>href</code> 属性进行预处理，以便它能在浏览器获取那个 URL 之前，使用一个返回适当 URL 的绑定表达式替换它。</p><p translation-origin=\"off\">      The <code>ng-href</code> directive allows AngularJS to preprocess the <code>href</code> property so that it\ncan replace the binding expression with the appropriate URL before the browser\nfetches from that URL.</p>\n\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-href</code> 通常用来作为导航的一部分，激活一个路由。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-href</code> is often used to activate a route as part of navigation.</p>\n\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;a ng-href=\"#{{ moviesHash }}\">Movies&#x3C;/a>\n      </code-example>\n<p translation-result=\"on\">      路由在 Angular 中的处理方式不同。</p><p translation-origin=\"off\">      Routing is handled differently in Angular.</p>\n\n    </td>\n    <td>\n<h3 id=\"bind-to-the-href-property\" translation-result=\"on\">绑定到 <code>href</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-href-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bind-to-the-href-property\">Bind to the <code>href</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-href-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\">\n&#x3C;a [href]=\"angularDocsUrl\">Angular Docs&#x3C;/a>\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，并没有内置的 <em>href</em> 指令，改用属性绑定。\n把元素的 <code>href</code> 属性放在方括号中，并把它设成一个引号中的模板表达式。</p><p translation-origin=\"off\">      Angular uses property binding; there is no built-in <em>href</em> directive.\nPlace the element's <code>href</code> property in square brackets and set it to a quoted template expression.</p>\n\n<p translation-result=\"on\">      要了解<a href=\"guide/template-syntax#property-binding\">属性绑定</a>的更多知识，参见<a href=\"guide/template-syntax\">模板语法</a>。</p><p translation-origin=\"off\">      For more information see the <a href=\"guide/template-syntax#property-binding\">Property binding</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n<p translation-result=\"on\">      在 Angular 中，<code>href</code> 不再用作路由，而是改用第三个例子中所展示的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</p><p translation-origin=\"off\">      In Angular, <code>href</code> is no longer used for routing. Routing uses <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>, as shown in the following example.</p>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\">Movies&#x3C;/a>\n\n</code-example></p>\n<p translation-result=\"on\">      要了解关于路由的更多信息，请参见<a href=\"guide/router\">路由与导航</a>的<a href=\"guide/router#basic-route\">定义基础路由</a>部分。</p><p translation-origin=\"off\">      For more information on routing, see <a href=\"guide/router#basic-route\">Defining a basic route</a>\nin the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-if\">ng-if<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-if\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;table ng-if=\"movies.length\">\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-if</code> 指令会根据一个表达式来移除或重建 DOM 中的一部分。如果表达式为假，元素就会被从 DOM 中移除。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-if</code> directive removes or recreates a portion of the DOM,\nbased on an expression. If the expression is false, the element is removed from the DOM.</p>\n\n<p translation-result=\"on\">      在这个例子中，除非 <code>movies</code> 数组的长度大于 0，否则 <code>&#x3C;table></code> 元素就会被从 DOM 中移除。</p><p translation-origin=\"off\">      In this example, the <code>&#x3C;table></code> element is removed from the DOM unless the <code>movies</code> array has a length greater than zero.</p>\n\n    </td>\n    <td>\n<h3 id=\"ngif\">*ngIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngif\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\">\n&#x3C;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\">\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 中的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令与 AngularJS 中的 <code>ng-if</code> 指令一样，\n它根据表达式的值移除或重建 DOM 中的一部分。</p><p translation-origin=\"off\">      The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive in Angular works the same as the <code>ng-if</code> directive in AngularJS. It removes\nor recreates a portion of the DOM based on an expression.</p>\n\n<p translation-result=\"on\">      在这个例子中，除非 <code>movies</code> 数组的长度大于 0，否则 <code>&#x3C;table></code> 元素就会被从 DOM 中移除。</p><p translation-origin=\"off\">      In this example, the <code>&#x3C;table></code> element is removed from the DOM unless the <code>movies</code> array has a length.</p>\n\n<p translation-result=\"on\">      在这个例子中 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前的星号(*)是必须的。\n要了解更多信息，参见<a href=\"guide/structural-directives\">结构型指令</a>。</p><p translation-origin=\"off\">      The (*) before <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is required in this example.\nFor more information, see <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-model\">ng-model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-model\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;input ng-model=\"vm.favoriteHero\"/>\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-model</code> 指令把一个表单控件绑定到了模板相关控制器的一个属性上。\n这提供了<strong>双向绑定</strong>功能，因此，任何对视图中值的改动，都会同步到模型中，对模型的改动，也会同步到视图中。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-model</code> directive binds a form control to a property in the controller associated with the template.\nThis provides <strong>two-way binding</strong>, whereby any change made to the value in the view is synchronized with the model, and any change to the model is synchronized with the value in the view.</p>\n\n    </td>\n    <td>\n<h3 id=\"ngmodel\">ngModel<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngmodel\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" />\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，<strong>双向绑定</strong>使用[()]标记出来，它被形象的比作“盒子中的香蕉”。\n这种语法是一个简写形式，用来同时定义一个属性绑定(从组件到视图)和一个事件绑定(从视图到组件)，就成了双向绑定。</p><p translation-origin=\"off\">      In Angular, <strong>two-way binding</strong> is denoted by <code>[()]</code>, descriptively referred to as a \"banana in a box\". This syntax is a shortcut for defining both property binding (from the component to the view)\nand event binding (from the view to the component), thereby providing two-way binding.</p>\n\n<p translation-result=\"on\">      要了解使用 ngModel 进行双向绑定的更多知识，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"../guide/template-syntax.html#ngModel\">NgModel—使用 <code>[(ngModel)]</code> 进行双向绑定</a>部分。</p><p translation-origin=\"off\">      For more information on two-way binding with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, see the <a href=\"../guide/template-syntax.html#ngModel\">NgModel—Two-way binding to\nform elements with <code>[(ngModel)]</code></a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-repeat\">ng-repeat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-repeat\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;tr ng-repeat=\"movie in vm.movies\">\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-repeat</code> 指令会为指定集合中的每一个条目重复渲染相关的 DOM 元素。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-repeat</code> directive repeats the associated DOM element\nfor each item in the specified collection.</p>\n\n<p translation-result=\"on\">      在这个例子中，对 <code>movies</code> 集合中的每一个 <code>movie</code> 对象重复渲染了这个表格行元素(<code>&#x3C;tr></code>)。</p><p translation-origin=\"off\">      In this example, the table row (<code>&#x3C;tr></code>) element repeats for each movie object in the collection of movies.</p>\n\n    </td>\n    <td>\n<h3 id=\"ngfor\">*ngFor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\">\n&#x3C;tr *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 中的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令类似于 AngularJS 中的 <code>ng-repeat</code> 指令。\n它为指定集合中的每一个条目重复渲染了相关的 DOM 元素。\n更准确的说，它把被界定出来的元素(这个例子中是 <code>&#x3C;tr></code>)及其内容转成了一个模板，并使用那个模板来为列表中的每一个条目实例化一个视图。</p><p translation-origin=\"off\">      The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive in Angular is similar to the <code>ng-repeat</code> directive in AngularJS. It repeats\nthe associated DOM element for each item in the specified collection.\nMore accurately, it turns the defined element (<code>&#x3C;tr></code> in this example) and its contents into a template and\nuses that template to instantiate a view for each item in the list.</p>\n\n<p translation-result=\"on\">      请注意其它语法上的差异：\n在 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的星号(*)是必须的；<code>let</code> 关键字把 <code>movie</code> 标记成一个输入变量；列表中使用的介词是 <code>of</code>，而不再是 <code>in</code>。</p><p translation-origin=\"off\">      Notice the other syntax differences:\nThe (*) before <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is required;\nthe <code>let</code> keyword identifies <code>movie</code> as an input variable;\nthe list preposition is <code>of</code>, not <code>in</code>.</p>\n\n<p translation-result=\"on\">      要了解更多信息，参见<a href=\"guide/structural-directives\">结构性指令</a>。</p><p translation-origin=\"off\">      For more information, see <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-show\">ng-show<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-show\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;h3 ng-show=\"vm.favoriteHero\">\n          Your favorite hero is: {{vm.favoriteHero}}\n        &#x3C;/h3>\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-show</code> 指令根据一个表达式来显示或隐藏相关的 DOM 元素。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-show</code> directive shows or hides the associated DOM element, based on\nan expression.</p>\n\n<p translation-result=\"on\">      在这个例子中，如果 <code>favoriteHero</code> 变量为真，<code>&#x3C;div></code> 元素就会显示出来。</p><p translation-origin=\"off\">      In this example, the <code>&#x3C;div></code> element is shown if the <code>favoriteHero</code> variable is truthy.</p>\n\n    </td>\n    <td>\n<h3 id=\"bind-to-the-hidden-property-1\" translation-result=\"on\">绑定到 <code>hidden</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-hidden-property-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bind-to-the-hidden-property-1\">Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-hidden-property-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\">\n&#x3C;h3 [hidden]=\"!favoriteHero\">\n  Your favorite hero is: {{favoriteHero}}\n&#x3C;/h3>\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，并没有内置的 <em>show</em> 指令，可以改用属性绑定。\n要隐藏或显示一个元素，绑定到它的 <code>hidden</code> 属性就可以了。</p><p translation-origin=\"off\">      Angular uses property binding; there is no built-in <em>show</em> directive.\nFor hiding and showing elements, bind to the HTML <code>hidden</code> property.</p>\n\n<p translation-result=\"on\">      要想有条件的显示一个元素，就把该元素的 <code>hidden</code> 属性放到一个方括号里，并且把它设置为引号中的模板表达式，它的结果应该是与<em>显示</em>时<em>相反</em>的值。</p><p translation-origin=\"off\">      To conditionally display an element, place the element's <code>hidden</code> property in square brackets and\nset it to a quoted template expression that evaluates to the <em>opposite</em> of <em>show</em>.</p>\n\n<p translation-result=\"on\">      在这个例子中，如果 <code>favoriteHero</code> 变量不是真值，<code>&#x3C;div></code> 元素就会被隐藏。</p><p translation-origin=\"off\">      In this example, the <code>&#x3C;div></code> element is hidden if the <code>favoriteHero</code> variable is not truthy.</p>\n\n<p translation-result=\"on\">      要了解属性绑定的更多知识，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#property-binding\">属性绑定</a>部分。</p><p translation-origin=\"off\">      For more information on property binding, see the <a href=\"guide/template-syntax#property-binding\">Property binding</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-src\">ng-src<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-src\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;img ng-src=\"{{movie.imageurl}}\">\n      </code-example>\n<p translation-result=\"on\">      <code>ng-src</code> 指令允许 AngularJS 对 <code>src</code> 属性进行预处理，以便它能够在浏览器获取此 URL 之前，用一个返回适当 URL 的绑定表达式替换它。</p><p translation-origin=\"off\">      The <code>ng-src</code> directive allows AngularJS to preprocess the <code>src</code> property so that it\ncan replace the binding expression with the appropriate URL before the browser\nfetches from that URL.</p>\n\n    </td>\n    <td>\n<h3 id=\"bind-to-the-src-property\" translation-result=\"on\">绑定到 <code>src</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-src-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bind-to-the-src-property\">Bind to the <code>src</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bind-to-the-src-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\">\n&#x3C;img [src]=\"movie.imageurl\">\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，并没有一个内置的 <em>src</em> 指令，可以使用属性绑定。\n把 <code>src</code> 属性放到方括号中，并且把它设为一个引号中的绑定表达式。</p><p translation-origin=\"off\">      Angular uses property binding; there is no built-in <em>src</em> directive.\nPlace the <code>src</code> property in square brackets and set it to a quoted template expression.</p>\n\n<p translation-result=\"on\">      要了解关于属性绑定的更多知识，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#property-binding\">属性绑定</a>部分。</p><p translation-origin=\"off\">      For more information on property binding, see the <a href=\"guide/template-syntax#property-binding\">Property binding</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-style\">ng-style<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-style\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;div ng-style=\"{color: colorPreference}\">\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-style</code> 指令根据一个绑定表达式设置一个 HTML 元素的 CSS 样式。\n该表达式通常是一个“键-值”形式的控制对象，对象的每个键都是一个 CSS 属性，每个值都是一个能计算为此样式的合适值的表达式。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-style</code> directive sets a CSS style on an HTML element\nbased on an expression. That expression is often a key-value control object with each\nkey of the object defined as a CSS property, and each value defined as an expression\nthat evaluates to a value appropriate for the style.</p>\n\n<p translation-result=\"on\">      在这个例子中，<code>color</code> 样式被设置为 <code>colorPreference</code> 变量的当前值。</p><p translation-origin=\"off\">      In the example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</p>\n\n    </td>\n    <td>\n<h3 id=\"ngstyle\">ngStyle<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\">\n&#x3C;div [style.color]=\"colorPreference\">\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的工作方式与此类似。它根据一个表达式设置 HTML 元素上的 CSS 样式。</p><p translation-origin=\"off\">      In Angular, the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive works similarly. It sets a CSS style on an HTML element based on an expression.</p>\n\n<p translation-result=\"on\">      在第一个例子中，<code>color</code> 样式被设置成了 <code>colorPreference</code> 变量的当前值。</p><p translation-origin=\"off\">      In the first example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</p>\n\n<p translation-result=\"on\">      Angular 还有<strong>样式绑定</strong>语法，它是单独设置一个样式的好方法。它展示在第二个例子中。</p><p translation-origin=\"off\">      Angular also has <strong>style binding</strong>, which is good way to set a single style. This is shown in the second example.</p>\n\n<p translation-result=\"on\">      要了解关于样式绑定的更多知识，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#style-binding\">样式绑定</a>部分。</p><p translation-origin=\"off\">      For more information on style binding, see the <a href=\"guide/template-syntax#style-binding\">Style binding</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n<p translation-result=\"on\">      要了解关于 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的更多知识，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#ngStyle\">NgStyle</a>部分。</p><p translation-origin=\"off\">      For more information on the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive, see <a href=\"guide/template-syntax#ngStyle\">NgStyle</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-switch\">ng-switch<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-switch\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &#x3C;div ng-switch=\"vm.favoriteHero &#x26;&#x26;\n                        vm.checkMovieHero(vm.favoriteHero)\">\n            &#x3C;div ng-switch-when=\"true\">\n              Excellent choice!\n            &#x3C;/div>\n            &#x3C;div ng-switch-when=\"false\">\n              No movie, sorry!\n            &#x3C;/div>\n            &#x3C;div ng-switch-default>\n              Please enter your favorite hero.\n            &#x3C;/div>\n        &#x3C;/div>\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，<code>ng-switch</code> 指令根据一个表达式的当前值把元素的内容替换成几个模板之一。</p><p translation-origin=\"off\">      In AngularJS, the <code>ng-switch</code> directive swaps the contents of\nan element by selecting one of the templates based on the current value of an expression.</p>\n\n<p translation-result=\"on\">      在这个例子中，如果 <code>favoriteHero</code> 没有设置，则模板显示“Please enter ...”。\n如果 <code>favoriteHero</code> 设置过，它就会通过调用一个控制其方法来检查它是否电影里的英雄。\n如果该方法返回 <code>true</code>，模板就会显示“Excellent choice!”。\n如果该方法返回 <code>false</code>，该模板就会显示“No movie, sorry!”。</p><p translation-origin=\"off\">      In this example, if <code>favoriteHero</code> is not set, the template displays \"Please enter ...\".\nIf <code>favoriteHero</code> is set, it checks the movie hero by calling a controller method.\nIf that method returns <code>true</code>, the template displays \"Excellent choice!\".\nIf that methods returns <code>false</code>, the template displays \"No movie, sorry!\".</p>\n\n    </td>\n    <td>\n<h3 id=\"ngswitch\">ngSwitch<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngswitch\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\">\n&#x3C;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &#x26;&#x26;\n               checkMovieHero(favoriteHero)\">\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\">\n    Excellent choice!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\">\n    No movie, sorry!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>>\n    Please enter your favorite hero.\n  &#x3C;/p>\n&#x3C;/span>\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 指令的工作方式与此类似。\n它会显示那个与 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 表达式的当前值匹配的那个 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 所在的元素。</p><p translation-origin=\"off\">      In Angular, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> directive works similarly.\nIt displays an element whose <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> matches the current <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> expression value.</p>\n\n<p translation-result=\"on\">      在这个例子中，如果 <code>favoriteHero</code> 没有设置，则 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 的值是 <code>null</code>，\n<code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 中会显示 “Please enter ...”。\n如果设置了 <code>favoriteHero</code>，应用就会通过调用一个组件方法来检查电影英雄。\n如果该方法返回 <code>true</code>，就会显示 “Excellent choice!”。\n如果该方法返回 <code>false</code>，就会显示 “No movie, sorry!”。</p><p translation-origin=\"off\">      In this example, if <code>favoriteHero</code> is not set, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> value is <code>null</code>\nand <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> displays, \"Please enter ...\".\nIf <code>favoriteHero</code> is set, the app checks the movie hero by calling a component method.\nIf that method returns <code>true</code>, the app selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> and displays: \"Excellent choice!\"\nIf that methods returns <code>false</code>, the app selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> and displays: \"No movie, sorry!\"</p>\n\n<p translation-result=\"on\">      在这个例子中，<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 前面的星号(*)是必须的。</p><p translation-origin=\"off\">      The (*) before <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> is required in this example.</p>\n\n<p translation-result=\"on\">      要了解更多信息，参见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#ngSwitch\">NgSwitch 指令</a>部分。</p><p translation-origin=\"off\">      For more information, see <a href=\"guide/template-syntax#ngSwitch\">The NgSwitch directives</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"filters-pipes\"></a>\n<h2 id=\"filterspipes\" translation-result=\"on\">过滤器/管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filterspipes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"filterspipes\">Filters/pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filterspipes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 中的<strong>管道</strong>为模板提供了格式化和数据转换功能，类似于 AngularJS 中的<strong>过滤器</strong>。\nAngularJS 中的很多内置过滤器在 Angular 中都有对应的管道。\n要了解管道的更多信息，参见<a href=\"guide/pipes\">Pipes</a>。</p><p translation-origin=\"off\">Angular <strong>pipes</strong> provide formatting and transformation for data in the template, similar to AngularJS <strong>filters</strong>.\nMany of the built-in filters in AngularJS have corresponding pipes in Angular.\nFor more information on pipes, see <a href=\"guide/pipes\">Pipes</a>.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p>      AngularJS</p>\n    </th>\n    <th>\n<p>      Angular</p>\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"currency\">currency<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#currency\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;td>{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>}}&#x3C;/td>\n      </code-example>\n<p translation-result=\"on\">      把一个数字格式化成货币。</p><p translation-origin=\"off\">      Formats a number as currency.</p>\n\n    </td>\n    <td>\n<h3 id=\"currency-1\">currency<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#currency-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\">\n&#x3C;td>{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'USD':true}}&#x3C;/td>\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 的 <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> 管道和 1 中很相似，只是有些参数变化了。</p><p translation-origin=\"off\">      The Angular <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> pipe is similar although some of the parameters have changed.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"date\">date<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#date\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;td>{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&#x3C;/td>\n      </code-example>\n<p translation-result=\"on\">      基于要求的格式把日期格式化成字符串。</p><p translation-origin=\"off\">      Formats a date to a string based on the requested format.</p>\n\n    </td>\n    <td>\n<h3 id=\"date-1\">date<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#date-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\">\n&#x3C;td>{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&#x3C;/td>\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 的 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道和它很相似。</p><p translation-origin=\"off\">      The Angular <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe is similar.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"filter\">filter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filter\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\">\n      </code-example>\n<p translation-result=\"on\">      根据过滤条件从指定的集合中选取出一个子集。</p><p translation-origin=\"off\">      Selects a subset of items from the defined collection, based on the filter criteria.</p>\n\n    </td>\n    <td>\n<h3 id=\"none\" translation-result=\"on\">没了<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#none\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"none\">none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#none\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">      在 Angular 中，出于性能的考虑，并没有一个类似的管道。\n过滤逻辑应该在组件中用代码实现。\n如果它将被复用在几个模板中，可以考虑构建一个自定义管道。</p><p translation-origin=\"off\">      For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"json\">json<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#json\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;pre>{{movie | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/pre>\n      </code-example>\n<p translation-result=\"on\">      把一个 JavaScript 对象转换成一个 JSON 字符串。这对调试很有用。</p><p translation-origin=\"off\">      Converts a JavaScript object into a JSON string. This is useful for debugging.</p>\n\n    </td>\n    <td>\n<h3 id=\"json-1\">json<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#json-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\">\n&#x3C;pre>{{movie | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/pre>\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 的 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> 管道做完全相同的事。</p><p translation-origin=\"off\">      The Angular <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> pipe does the same thing.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"limitto\">limitTo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#limitto\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;tr ng-repeat=\"movie in movieList | limitTo:2:0\">\n      </code-example>\n<p translation-result=\"on\">      从集合中选择从(第二参数指定的)起始索引号(0)开始的最多(第一参数指定的)条目数(2)个条目。</p><p translation-origin=\"off\">      Selects up to the first parameter (2) number of items from the collection\nstarting (optionally) at the beginning index (0).</p>\n\n    </td>\n    <td>\n<h3 id=\"slice\">slice<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#slice\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\">\n&#x3C;tr *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\">\n\n</code-example></p>\n<p translation-result=\"on\">      <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> 做同样的事，但是<em>两个参数的顺序是相反的</em>，以便于 JavaScript 中的 <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code> 方法保持一致。\n第一个参数是起始索引号，第二个参数是限制的数量。\n和 AngularJS 中一样，如果们改用组件中的代码实现此操作，性能将会提升。</p><p translation-origin=\"off\">      The <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> does the same thing but the <em>order of the parameters is reversed</em>, in keeping\nwith the JavaScript <code>Slice</code> method.\nThe first parameter is the starting index; the second is the limit.\nAs in AngularJS, coding this operation within the component instead could improve performance.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"lowercase\">lowercase<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#lowercase\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;td>{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/td>\n      </code-example>\n<p translation-result=\"on\">      把该字符串转成小写形式。</p><p translation-origin=\"off\">      Converts the string to lowercase.</p>\n\n    </td>\n    <td>\n<h3 id=\"lowercase-1\">lowercase<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#lowercase-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/td>\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 的 <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> 管道和 1 中的功能完全相同。</p><p translation-origin=\"off\">      The Angular <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> pipe does the same thing.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"number\">number<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#number\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;td>{{movie.starRating | <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a>}}&#x3C;/td>\n      </code-example>\n<p translation-result=\"on\">      把数字格式化为文本。</p><p translation-origin=\"off\">      Formats a number as text.</p>\n\n    </td>\n    <td>\n<h3 id=\"number-1\">number<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#number-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\">\n&#x3C;td>{{movie.starRating | <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a>}}&#x3C;/td>\n&#x3C;td>{{movie.starRating | <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a>:'1.1-2'}}&#x3C;/td>\n&#x3C;td>{{movie.approvalRating | <a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a>: '1.0-2'}}&#x3C;/td>\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 的 <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code> 管道很相似。\n但在指定小数点位置时，它提供了更多的功能，如第二个范例所示。</p><p translation-origin=\"off\">      The Angular <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code> pipe is similar.\nIt provides more functionality when defining\nthe decimal places, as shown in the second example above.</p>\n\n<p translation-result=\"on\">      Angular 还有一个 <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> 管道，它把一个数组格式化为本地化的(local)百分比格式，如第三个范例所示。</p><p translation-origin=\"off\">      Angular also has a <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> pipe, which formats a number as a local percentage\nas shown in the third example.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"orderby\">orderBy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#orderby\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        &#x3C;tr ng-repeat=\"movie in movieList | orderBy : 'title'\">\n      </code-example>\n<p translation-result=\"on\">      使用表达式中所指定的方式对集合进行排序。\n在这个例子中，<code>movieList</code> 被根据 movie 的 title 排序了。</p><p translation-origin=\"off\">      Displays the collection in the order specified by the expression.\nIn this example, the movie title orders the <code>movieList</code>.</p>\n\n    </td>\n    <td>\n<h3 id=\"none-1\" translation-result=\"on\">没了<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#none-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"none-1\">none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#none-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">      在 Angular 中，出于性能的考虑，并没有一个类似的管道。\n排序逻辑应该在组件中用代码实现。\n如果它将被复用在几个模板中，可以考虑构建一个自定义管道。</p><p translation-origin=\"off\">      For performance reasons, no comparable pipe exists in Angular.\nInstead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"controllers-components\"></a>\n<h2 id=\"modulescontrollerscomponents\" translation-result=\"on\">模块/控制器/组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#modulescontrollerscomponents\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"modulescontrollerscomponents\">Modules/controllers/components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#modulescontrollerscomponents\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">无论在 AngularJS 还是 Angular 中，“模块”都会帮你把应用拆分成一些内聚的功能块。</p><p translation-origin=\"off\">In both AngularJS and Angular, modules help you organize your application into cohesive blocks of functionality.</p>\n\n<p translation-result=\"on\">在 AngularJS 中，你要在<strong>控制器</strong>中写代码，来为视图提供模型和方法。\n在 Angular 中，你要创建<strong>组件</strong>。</p><p translation-origin=\"off\">In AngularJS, you write the code that provides the model and the methods for the view in a <strong>controller</strong>.\nIn Angular, you build a <strong>component</strong>.</p>\n\n<p translation-result=\"on\">因为很多 AngularJS 的代码是用 JavaScript 写的，所以在 AngularJS 列显示的是 JavaScript 代码，而 Angular 列显示的是 TypeScript 代码。</p><p translation-origin=\"off\">Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column.\nThe Angular code is shown using TypeScript.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p>      AngularJS</p>\n    </th>\n    <th>\n<p>      Angular</p>\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"iife\">IIFE<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#iife\"><i class=\"material-icons\">link</i></a></h3>\n      <code-example hidecopy=\"\">\n        (function () {\n          ...\n        }());\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，用立即调用的函数表达式(IIFE)来包裹控制器代码可以让控制器代码不会污染全局命名空间。</p><p translation-origin=\"off\">      In AngularJS, an immediately invoked function expression (or IIFE) around controller code\nkeeps it out of the global namespace.</p>\n\n    </td>\n    <td>\n<h3 id=\"none-2\" translation-result=\"on\">没了<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#none-2\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"none-2\">none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#none-2\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">      在 Angular 中不用担心这个问题，因为使用 ES 2015 的模块，模块会替你处理命名空间问题。</p><p translation-origin=\"off\">      This is a nonissue in Angular because ES 2015 modules\nhandle the namespacing for you.</p>\n\n<p translation-result=\"on\">      要了解关于模块的更多信息，参见<a href=\"guide/architecture\">架构概览</a>中的<a href=\"guide/architecture#modules\">模块</a>部分。</p><p translation-origin=\"off\">      For more information on modules, see the <a href=\"guide/architecture#modules\">Modules</a> section of the\n<a href=\"guide/architecture\">Architecture Overview</a>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"angular-modules\" translation-result=\"on\">Angular 模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angular-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"angular-modules\">Angular modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angular-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        angular.module(\"movieHunter\", [\"ngRoute\"]);\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，Angular 模块用来对控制器、服务和其它代码进行跟踪。第二个参数定义该模块依赖的其它模块列表。</p><p translation-origin=\"off\">      In AngularJS, an Angular module keeps track of controllers, services, and other code.\nThe second argument defines the list of other modules that this module depends upon.</p>\n\n    </td>\n    <td>\n<h3 id=\"ngmodules\">NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 的模块用 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器进行定义，有如下用途：</p><p translation-origin=\"off\">      NgModules, defined with the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator, serve the same purpose:</p>\n\n<p translation-result=\"on\">         <code>imports</code>: 指定当前模块依赖的其它模块列表</p><p translation-origin=\"off\">      * <code>imports</code>: specifies the list of other modules that this module depends upon</p>\n\n<p translation-result=\"on\">         <code>declaration</code>: 用于记录组件、管道和指令。</p><p translation-origin=\"off\">      * <code>declaration</code>: keeps track of your components, pipes, and directives.</p>\n\n<p translation-result=\"on\">      要了解关于模块的更多知识，参见<a href=\"guide/ngmodules\">NgModules</a>。</p><p translation-origin=\"off\">      For more information on modules, see <a href=\"guide/ngmodules\">NgModules</a>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"controller-registration\" translation-result=\"on\">控制器注册<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-registration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"controller-registration\">Controller registration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-registration\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        angular\n          .module(\"movieHunter\")\n          .controller(\"MovieListCtrl\",\n                      [\"movieService\",\n                       MovieListCtrl]);\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，在每个控制器中都有一些代码，用于找到合适的 Angular 模块并把该控制器注册进去。</p><p translation-origin=\"off\">      AngularJS has code in each controller that looks up an appropriate Angular module\nand registers the controller with that module.</p>\n\n<p translation-result=\"on\">      第一个参数是控制器的名称，第二个参数定义了所有将注入到该控制器的依赖的字符串名称，以及一个到控制器函数的引用。</p><p translation-origin=\"off\">      The first argument is the controller name. The second argument defines the string names of\nall dependencies injected into this controller, and a reference to the controller function.</p>\n\n    </td>\n    <td>\n<h3 id=\"component-decorator-1\" translation-result=\"on\">组件装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#component-decorator-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"component-decorator-1\">Component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#component-decorator-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example></p>\n<p translation-result=\"on\">      Angular 会往组件类上添加了一个装饰器，以提供所需的任何元数据。\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器把该类声明为组件，并提供了关于该组件的元数据，比如它的选择器(或标签)和模板。</p><p translation-origin=\"off\">      Angular adds a decorator to the component class to provide any required metadata.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator declares that the class is a component and provides metadata about\nthat component such as its selector (or tag) and its template.</p>\n\n<p translation-result=\"on\">      这就是把模板关联到代码的方式，它定义在组件类中。</p><p translation-origin=\"off\">      This is how you associate a template with logic, which is defined in the component class.</p>\n\n<p translation-result=\"on\">      要了解关于组件的更多信息，参见<a href=\"guide/architecture\">架构概览</a>中的<a href=\"guide/architecture#components\">组件</a>部分。</p><p translation-origin=\"off\">      For more information, see the <a href=\"guide/architecture#components\">Components</a>\nsection of the <a href=\"guide/architecture\">Architecture Overview</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"controller-function\" translation-result=\"on\">控制器函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-function\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"controller-function\">Controller function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-function\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        function MovieListCtrl(movieService) {\n        }\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，你在控制器函数中编写模型和方法的代码。</p><p translation-origin=\"off\">      In AngularJS, you write the code for the model and methods in a controller function.</p>\n\n    </td>\n    <td>\n<h3 id=\"component-class\" translation-result=\"on\">组件类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#component-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"component-class\">Component class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#component-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\">\nexport class MovieListComponent {\n}\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，你将创建一个组件类来容纳数据模型和控制方法。使用 TypeScript 的 <code> export</code> 关键字导出该类，以便可以将此功能导入 NgModules 中。</p><p translation-origin=\"off\">      In Angular, you create a component class to contain the data model and control methods. Use the TypeScript <code>export</code> keyword to export the class so that the functionality can be imported into NgModules.</p>\n\n<p translation-result=\"on\">      要了解关于组件的更多信息，参见<a href=\"guide/architecture\">架构概览</a>中的<a href=\"guide/architecture#components\">组件</a>部分。</p><p translation-origin=\"off\">      For more information, see the <a href=\"guide/architecture#components\">Components</a>\nsection of the <a href=\"guide/architecture\">Architecture Overview</a> page.</p>\n\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"dependency-injection\" translation-result=\"on\">依赖注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"dependency-injection\">Dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        MovieListCtrl.$inject = ['MovieService'];\n        function MovieListCtrl(movieService) {\n        }\n      </code-example>\n<p translation-result=\"on\">      在 AngularJS 中，你把所有依赖都作为控制器函数的参数。\n这个例子注入了一个 <code>MovieService</code>。</p><p translation-origin=\"off\">      In AngularJS, you pass in any dependencies as controller function arguments.\nThis example injects a <code>MovieService</code>.</p>\n\n<p translation-result=\"on\">      为了防止在最小化时出现问题，第一个参数明确告诉 Angular 它应该注入一个 <code>MovieService</code> 的实例。</p><p translation-origin=\"off\">      To guard against minification problems, tell Angular explicitly\nthat it should inject an instance of the <code>MovieService</code> in the first parameter.</p>\n\n    </td>\n    <td>\n<h3 id=\"dependency-injection-1\" translation-result=\"on\">依赖注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"dependency-injection-1\">Dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example></p>\n<p translation-result=\"on\">      在 Angular 中，你要把依赖作为组件构造函数的参数传入。\n这个例子注入了一个 <code>MovieService</code>。\n即使在最小化之后，第一个参数的 TypeScript 类型也会告诉 Angular 它该注入什么。</p><p translation-origin=\"off\">      In Angular, you pass in dependencies as arguments to the component class constructor.\nThis example injects a <code>MovieService</code>.\nThe first parameter's TypeScript type tells Angular what to inject, even after minification.</p>\n\n<p translation-result=\"on\">      要了解关于依赖注入的更多信息，参见<a href=\"guide/architecture\">架构概览</a>中的<a href=\"guide/architecture#dependency-injection\">依赖注入</a>部分。</p><p translation-origin=\"off\">      For more information, see the <a href=\"guide/architecture#dependency-injection\">Dependency injection</a>\nsection of the <a href=\"guide/architecture\">Architecture Overview</a>.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"style-sheets\"></a>\n<h2 id=\"style-sheets\" translation-result=\"on\">样式表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#style-sheets\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"style-sheets\">Style sheets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#style-sheets\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">样式表让你的应用程序看起来更漂亮。\n在 AngularJS 中，你要为整个应用程序指定样式表。\n随着应用程序的不断成长，为各个部分指定的样式会被合并，导致无法预计的后果。\n在 Angular 中，你仍然要为整个应用程序定义样式，不过现在也可以把样式表封装在特定的组件中。</p><p translation-origin=\"off\">Style sheets give your application a nice look.\nIn AngularJS, you specify the style sheets for your entire application.\nAs the application grows over time, the styles for the many parts of the application\nmerge, which can cause unexpected results.\nIn Angular, you can still define style sheets for your entire application. But now you can\nalso encapsulate a style sheet within a specific component.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p>      AngularJS</p>\n    </th>\n    <th>\n<p>      Angular</p>\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"link-tag\" translation-result=\"on\">Link 标签<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-tag\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"link-tag\">Link tag<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-tag\"><i class=\"material-icons\">link</i></a></h3>\n\n      <code-example hidecopy=\"\">\n        &#x3C;link href=\"styles.css\" rel=\"stylesheet\" />\n      </code-example>\n<p translation-result=\"on\">      AngularJS 在 <code>index.html</code> 的 <code>head</code> 区使用 <code>link</code> 标签来为应用程序定义样式。</p><p translation-origin=\"off\">      AngularJS, uses a <code>link</code> tag in the head section of the <code>index.html</code> file\nto define the styles for the application.</p>\n\n    </td>\n    <td>\n<h3 id=\"styles-configuration\" translation-result=\"on\">样式配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#styles-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"styles-configuration\">Styles configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#styles-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example></p>\n<p translation-result=\"on\">      使用 Angular CLI，你可以在 <code>angular.json</code> 文件中配置全局样式。\n也可以把扩展名改为 <code>.scss</code> 来使用 sass。</p><p translation-origin=\"off\">      With the Angular CLI, you can configure your global styles in the <code>angular.json</code> file.\nYou can rename the extension to <code>.scss</code> to use sass.</p>\n\n<h3 id=\"styleurls\">StyleUrls<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#styleurls\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">      在 Angular 中，你可以在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的元数据中使用 <code>styles</code> 或 <code>styleUrls</code> 属性来为一个特定的组件定义样式表。</p><p translation-origin=\"off\">      In Angular, you can use the <code>styles</code> or <code>styleUrls</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata to define\na style sheet for a particular component.</p>\n\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example></p>\n<p translation-result=\"on\">      这让你可以为各个组件设置合适的样式，而不用担心它泄漏到程序中的其它部分。</p><p translation-origin=\"off\">      This allows you to set appropriate styles for individual components that won’t leak into\nother parts of the application.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - ../guide/template-syntax.html#ngModel\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLink\n - guide/ajs-quick-reference#angular-modules\n - guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\n - guide/ajs-quick-reference#bind-to-the-click-event\n - guide/ajs-quick-reference#bind-to-the-hidden-property\n - guide/ajs-quick-reference#bind-to-the-hidden-property-1\n - guide/ajs-quick-reference#bind-to-the-href-property\n - guide/ajs-quick-reference#bind-to-the-src-property\n - guide/ajs-quick-reference#bindingsinterpolation\n - guide/ajs-quick-reference#bindingsinterpolation-1\n - guide/ajs-quick-reference#bootstrapping\n - guide/ajs-quick-reference#component-class\n - guide/ajs-quick-reference#component-decorator\n - guide/ajs-quick-reference#component-decorator-1\n - guide/ajs-quick-reference#controller-function\n - guide/ajs-quick-reference#controller-registration\n - guide/ajs-quick-reference#currency\n - guide/ajs-quick-reference#currency-1\n - guide/ajs-quick-reference#date\n - guide/ajs-quick-reference#date-1\n - guide/ajs-quick-reference#dependency-injection\n - guide/ajs-quick-reference#dependency-injection-1\n - guide/ajs-quick-reference#filter\n - guide/ajs-quick-reference#filters\n - guide/ajs-quick-reference#filters-pipes\n - guide/ajs-quick-reference#filterspipes\n - guide/ajs-quick-reference#iife\n - guide/ajs-quick-reference#input-variables\n - guide/ajs-quick-reference#json\n - guide/ajs-quick-reference#json-1\n - guide/ajs-quick-reference#limitto\n - guide/ajs-quick-reference#link-tag\n - guide/ajs-quick-reference#local-variables\n - guide/ajs-quick-reference#lowercase\n - guide/ajs-quick-reference#lowercase-1\n - guide/ajs-quick-reference#modulescontrollerscomponents\n - guide/ajs-quick-reference#ng-app\n - guide/ajs-quick-reference#ng-class\n - guide/ajs-quick-reference#ng-click\n - guide/ajs-quick-reference#ng-controller\n - guide/ajs-quick-reference#ng-hide\n - guide/ajs-quick-reference#ng-href\n - guide/ajs-quick-reference#ng-if\n - guide/ajs-quick-reference#ng-model\n - guide/ajs-quick-reference#ng-repeat\n - guide/ajs-quick-reference#ng-show\n - guide/ajs-quick-reference#ng-src\n - guide/ajs-quick-reference#ng-style\n - guide/ajs-quick-reference#ng-switch\n - guide/ajs-quick-reference#ngclass\n - guide/ajs-quick-reference#ngfor\n - guide/ajs-quick-reference#ngif\n - guide/ajs-quick-reference#ngmodel\n - guide/ajs-quick-reference#ngmodules\n - guide/ajs-quick-reference#ngstyle\n - guide/ajs-quick-reference#ngswitch\n - guide/ajs-quick-reference#none\n - guide/ajs-quick-reference#none-1\n - guide/ajs-quick-reference#none-2\n - guide/ajs-quick-reference#number\n - guide/ajs-quick-reference#number-1\n - guide/ajs-quick-reference#orderby\n - guide/ajs-quick-reference#pipes\n - guide/ajs-quick-reference#slice\n - guide/ajs-quick-reference#style-sheets\n - guide/ajs-quick-reference#styles-configuration\n - guide/ajs-quick-reference#styleurls\n - guide/ajs-quick-reference#template-basics\n - guide/ajs-quick-reference#template-directives\n - guide/architecture\n - guide/architecture#components\n - guide/architecture#dependency-injection\n - guide/architecture#modules\n - guide/ngmodules\n - guide/pipes\n - guide/router\n - guide/router#basic-route\n - guide/structural-directives\n - guide/template-syntax\n - guide/template-syntax#event-binding\n - guide/template-syntax#interpolation\n - guide/template-syntax#microsyntax\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#other-bindings\n - guide/template-syntax#property-binding\n - guide/template-syntax#style-binding\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/ajs-quick-reference.md?message=docs%3A%20请简述你的修改...\n-->"
}