{
  "id": "guide/lifecycle-hooks",
  "title": "Lifecycle hooks",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/lifecycle-hooks.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lifecycle-hooks\" translation-result=\"on\">生命周期钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"lifecycle-hooks\">Lifecycle hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">每个组件都有一个被 Angular 管理的生命周期。</p><p translation-origin=\"off\">A component has a lifecycle managed by Angular.</p>\n\n<p translation-result=\"on\">Angular 创建和渲染组件及其子组件，当它们绑定的属性发生变化时检查它们，并在从 DOM 中移除它之前销毁它们。</p><p translation-origin=\"off\">Angular creates and renders components along with their children, checks when their data-bound properties change, and destroys them before removing them from the DOM.</p>\n\n<p translation-result=\"on\">Angular 提供了<strong>生命周期钩子</strong>，把它们生命中的这些关键时刻暴露出来，赋予你在它们发生时采取行动的能力。</p><p translation-origin=\"off\">Angular offers <strong>lifecycle hooks</strong>\nthat provide visibility into these key life moments and the ability to act when they occur.</p>\n\n<p translation-result=\"on\">除了那些组件内容和视图相关的钩子外,指令有相同生命周期钩子。</p><p translation-origin=\"off\">A directive has the same set of lifecycle hooks.</p>\n\n<a id=\"hooks-overview\"></a>\n<h2 id=\"component-lifecycle-hooks-overview\" translation-result=\"on\">组件生命周期钩子概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#component-lifecycle-hooks-overview\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-lifecycle-hooks-overview\">Component lifecycle hooks overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#component-lifecycle-hooks-overview\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">指令和组件的实例有一个生命周期：当 Angular 新建、更新和销毁它们时触发。\n通过实现一个或多个 Angular <code>core</code> 库里定义的<em>生命周期钩子</em>接口，开发者可以介入该生命周期中的这些关键时刻。</p><p translation-origin=\"off\">Directive and component instances have a lifecycle\nas Angular creates, updates, and destroys them.\nDevelopers can tap into key moments in that lifecycle by implementing\none or more of the <em>lifecycle hook</em> interfaces in the Angular <code>core</code> library.</p>\n\n<p translation-result=\"on\">每个接口都有唯一的一个钩子方法，它们的名字是由接口名再加上 <code>ng</code> 前缀构成的。比如，<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 接口的钩子方法叫做 <code>ngOnInit</code>，\nAngular 在创建组件后立刻调用它，：</p><p translation-origin=\"off\">Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>.\nFor example, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface has a hook method named <code>ngOnInit()</code>\nthat Angular calls shortly after creating the component:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/peek-a-boo.component.ts\" region=\"ngOnInit\" header=\"peek-a-boo.component.ts (excerpt)\">\nexport class PeekABoo implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private logger: LoggerService) { }\n\n  // implement <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>'s `ngOnInit` method\n  ngOnInit() { this.logIt(`<a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>`); }\n\n  logIt(msg: string) {\n    this.logger.log(`#${nextId++} ${msg}`);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">没有指令或者组件会实现所有这些接口，并且有些钩子只对组件有意义。只有在指令/组件中<em>定义过的</em>那些钩子方法才会被 Angular 调用。</p><p translation-origin=\"off\">No directive or component will implement all of the lifecycle hooks.\nAngular only calls a directive/component hook method <em>if it is defined</em>.</p>\n\n<a id=\"hooks-purpose-timing\"></a>\n<h2 id=\"lifecycle-sequence\" translation-result=\"on\">生命周期的顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#lifecycle-sequence\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"lifecycle-sequence\">Lifecycle sequence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#lifecycle-sequence\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当 Angular 使用构造函数新建一个组件或指令后，就会按下面的顺序在特定时刻调用这些生命周期钩子方法：</p><p translation-origin=\"off\"><em>After</em> creating a component/directive by calling its constructor, Angular\ncalls the lifecycle hook methods in the following sequence at specific moments:</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"20%\">\n  <col width=\"80%\">\n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">        钩子</p><p translation-origin=\"off\">        Hook</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">        用途及时机</p><p translation-origin=\"off\">        Purpose and Timing</p>\n\n    </th>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code>ngOnChanges()</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      当 Angular（重新）设置数据绑定输入属性时响应。\n该方法接受当前和上一属性值的 <code><a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a></code> 对象</p><p translation-origin=\"off\">      Respond when Angular (re)sets data-bound input properties.\nThe method receives a <code><a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a></code> object of current and previous property values.</p>\n\n<p translation-result=\"on\">      在 <code>ngOnInit()</code> 之前以及所绑定的一个或多个输入属性的值发生变化时都会调用。</p><p translation-origin=\"off\">      Called before <code>ngOnInit()</code> and whenever one or more data-bound input properties change.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code>ngOnInit()</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。</p><p translation-origin=\"off\">      Initialize the directive/component after Angular first displays the data-bound properties\nand sets the directive/component's input properties.</p>\n\n<p translation-result=\"on\">      在第一轮 <code>ngOnChanges()</code> 完成之后调用，只调用<strong>一次</strong>。</p><p translation-origin=\"off\">      Called <em>once</em>, after the <em>first</em> <code>ngOnChanges()</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code>ngDoCheck()</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。</p><p translation-origin=\"off\">      Detect and act upon changes that Angular can't or won't detect on its own.</p>\n\n<p translation-result=\"on\">      在每个变更检测周期中，紧跟在 <code>ngOnChanges()</code> 和 <code>ngOnInit()</code> 后面调用。</p><p translation-origin=\"off\">      Called during every change detection run, immediately after <code>ngOnChanges()</code> and <code>ngOnInit()</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code><a href=\"api/router/RouterLinkActive#ngAfterContentInit\" class=\"code-anchor\">ngAfterContentInit()</a></code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      当 Angular 把外部内容投影进组件/指令的视图之后调用。</p><p translation-origin=\"off\">      Respond after Angular projects external content into the component's view / the view that a directive is in.</p>\n\n<p translation-result=\"on\">      第一次 <code>ngDoCheck()</code> 之后调用，只调用一次。</p><p translation-origin=\"off\">      Called <em>once</em> after the first <code>ngDoCheck()</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code>ngAfterContentChecked()</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      每当 Angular 完成被投影组件内容的变更检测之后调用。</p><p translation-origin=\"off\">      Respond after Angular checks the content projected into the directive/component.</p>\n\n<p translation-result=\"on\">      <code><a href=\"api/router/RouterLinkActive#ngAfterContentInit\" class=\"code-anchor\">ngAfterContentInit()</a></code> 和每次 <code>ngDoCheck()</code> 之后调用</p><p translation-origin=\"off\">      Called after the <code><a href=\"api/router/RouterLinkActive#ngAfterContentInit\" class=\"code-anchor\">ngAfterContentInit()</a></code> and every subsequent <code>ngDoCheck()</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code><a href=\"api/forms/NgForm#ngAfterViewInit\" class=\"code-anchor\">ngAfterViewInit()</a></code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      当 Angular 初始化完组件视图及其子视图之后调用。</p><p translation-origin=\"off\">      Respond after Angular initializes the component's views and child views / the view that a directive is in.</p>\n\n<p translation-result=\"on\">      第一次 <code>ngAfterContentChecked()</code> 之后调用，只调用一次。</p><p translation-origin=\"off\">      Called <em>once</em> after the first <code>ngAfterContentChecked()</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code>ngAfterViewChecked()</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      每当 Angular 做完组件视图和子视图的变更检测之后调用。</p><p translation-origin=\"off\">      Respond after Angular checks the component's views and child views / the view that a directive is in.</p>\n\n<p translation-result=\"on\">      <code><a href=\"api/forms/NgForm#ngAfterViewInit\" class=\"code-anchor\">ngAfterViewInit()</a></code> 和每次 <code>ngAfterContentChecked()</code> 之后调用。</p><p translation-origin=\"off\">      Called after the <code><a href=\"api/forms/NgForm#ngAfterViewInit\" class=\"code-anchor\">ngAfterViewInit()</a></code> and every subsequent <code>ngAfterContentChecked()</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <code>ngOnDestroy()</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      每当 Angular 每次销毁指令/组件之前调用并清扫。\n在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。</p><p translation-origin=\"off\">      Cleanup just before Angular destroys the directive/component.\nUnsubscribe Observables and detach event handlers to avoid memory leaks.</p>\n\n<p translation-result=\"on\">      在 Angular 销毁指令/组件之前调用。</p><p translation-origin=\"off\">      Called <em>just before</em> Angular destroys the directive/component.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"interface-optional\"></a>\n<h2 id=\"interfaces-are-optional-technically\" translation-result=\"on\">接口是可选的（严格来说）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#interfaces-are-optional-technically\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"interfaces-are-optional-technically\">Interfaces are optional (technically)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#interfaces-are-optional-technically\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">从纯技术的角度讲，接口对 JavaScript 和 TypeScript 的开发者都是可选的。JavaScript 语言本身没有接口。\nAngular 在运行时看不到 TypeScript 接口，因为它们在编译为 JavaScript 的时候已经消失了。</p><p translation-origin=\"off\">The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective.\nThe JavaScript language doesn't have interfaces.\nAngular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</p>\n\n<p translation-result=\"on\">幸运的是，它们并不是必须的。\n你并不需要在指令和组件上添加生命周期钩子接口就能获得钩子带来的好处。</p><p translation-origin=\"off\">Fortunately, they aren't necessary.\nYou don't have to add the lifecycle hook interfaces to directives and components to benefit from the hooks themselves.</p>\n\n<p translation-result=\"on\">Angular 会去检测这些指令和组件的类，一旦发现钩子方法被定义了，就调用它们。\nAngular 会找到并调用像 <code>ngOnInit()</code> 这样的钩子方法，有没有接口无所谓。</p><p translation-origin=\"off\">Angular instead inspects directive and component classes and calls the hook methods <em>if they are defined</em>.\nAngular finds and calls methods like <code>ngOnInit()</code>, with or without the interfaces.</p>\n\n<p translation-result=\"on\">虽然如此，在 TypeScript 指令类中添加接口是一项最佳实践，它可以获得强类型和 IDE 等编辑器带来的好处。</p><p translation-origin=\"off\">Nonetheless, it's good practice to add interfaces to TypeScript directive classes\nin order to benefit from strong typing and editor tooling.</p>\n\n<a id=\"other-lifecycle-hooks\"></a>\n<h2 id=\"other-angular-lifecycle-hooks\" translation-result=\"on\">其它 Angular 生命周期钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#other-angular-lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"other-angular-lifecycle-hooks\">Other Angular lifecycle hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#other-angular-lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 的其它子系统除了有这些组件钩子外，还可能有它们自己的生命周期钩子。</p><p translation-origin=\"off\">Other Angular sub-systems may have their own lifecycle hooks apart from these component hooks.</p>\n\n<p translation-result=\"on\">第三方库也可能会实现它们自己的钩子，以便让这些开发者在使用时能做更多的控制。</p><p translation-origin=\"off\">3rd party libraries might implement their hooks as well in order to give developers more\ncontrol over how these libraries are used.</p>\n\n<a id=\"the-sample\"></a>\n<h2 id=\"lifecycle-examples\" translation-result=\"on\">生命周期范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#lifecycle-examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"lifecycle-examples\">Lifecycle examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#lifecycle-examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><live-example></live-example>通过在受控于根组件 <code>AppComponent</code> 的一些组件上进行的一系列练习，演示了生命周期钩子的运作方式。</p><p translation-origin=\"off\">The <live-example></live-example>\ndemonstrates the lifecycle hooks in action through a series of exercises\npresented as components under the control of the root <code>AppComponent</code>.</p>\n\n<p translation-result=\"on\">它们遵循了一个常用的模式：用<em>子组件</em>演示一个或多个生命周期钩子方法，而<em>父组件</em>被当作该<em>子组件</em>的测试台。</p><p translation-origin=\"off\">They follow a common pattern: a <em>parent</em> component serves as a test rig for\na <em>child</em> component that illustrates one or more of the lifecycle hook methods.</p>\n\n<p translation-result=\"on\">下面是每个练习简短的描述：</p><p translation-origin=\"off\">Here's a brief description of each exercise:</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"20%\">\n  <col width=\"80%\">\n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">        组件</p><p translation-origin=\"off\">        Component</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">        说明</p><p translation-origin=\"off\">        Description</p>\n\n    </th>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <a href=\"guide/lifecycle-hooks#peek-a-boo\">Peek-a-boo</a></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      展示每个生命周期钩子，每个钩子方法都会在屏幕上显示一条日志。</p><p translation-origin=\"off\">      Demonstrates every lifecycle hook.\nEach hook method writes to the on-screen log.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <a href=\"guide/lifecycle-hooks#spy\">Spy</a></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      指令也同样有生命周期钩子。<code>SpyDirective</code> 可以利用 <code>ngOnInit</code> 和 <code>ngOnDestroy</code> 钩子在它所监视的每个元素被创建或销毁时输出日志。</p><p translation-origin=\"off\">      Directives have lifecycle hooks too.\nA <code>SpyDirective</code> can log when the element it spies upon is\ncreated or destroyed using the <code>ngOnInit</code> and <code>ngOnDestroy</code> hooks.</p>\n\n<p translation-result=\"on\">      本例把 <code>SpyDirective</code> 应用到父组件里的 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code><em>英雄</em>重复器(repeater)的 <code>&#x3C;div></code> 里面。</p><p translation-origin=\"off\">      This example applies the <code>SpyDirective</code> to a <code>&#x3C;div></code> in an <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> <em>hero</em> repeater\nmanaged by the parent <code>SpyComponent</code>.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <a href=\"guide/lifecycle-hooks#onchanges\">OnChanges</a></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      这里将会看到：每当组件的输入属性发生变化时，Angular 会如何以 <code><a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a></code> 对象作为参数去调用 <code>ngOnChanges()</code> 钩子。\n展示了该如何理解和使用 <code><a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a></code> 对象。</p><p translation-origin=\"off\">      See how Angular calls the <code>ngOnChanges()</code> hook with a <code><a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a></code> object\nevery time one of the component input properties changes.\nShows how to interpret the <code><a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a></code> object.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <a href=\"guide/lifecycle-hooks#docheck\">DoCheck</a></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      实现了一个 <code>ngDoCheck()</code> 方法，通过它可以自定义变更检测逻辑。\n这里将会看到：Angular 会用什么频度调用这个钩子，监视它的变化，并把这些变化输出成一条日志。</p><p translation-origin=\"off\">      Implements an <code>ngDoCheck()</code> method with custom change detection.\nSee how often Angular calls this hook and watch it post changes to a log.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <a href=\"guide/lifecycle-hooks#afterview\">AfterView</a></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      显示 Angular 中的<em>视图</em>所指的是什么。\n演示了 <code>ngAfterViewInit</code> 和 <code>ngAfterViewChecked</code> 钩子。</p><p translation-origin=\"off\">      Shows what Angular means by a <em>view</em>.\nDemonstrates the <code>ngAfterViewInit</code> and <code>ngAfterViewChecked</code> hooks.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p>      <a href=\"guide/lifecycle-hooks#aftercontent\">AfterContent</a></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      展示如何把外部内容投影进组件中，以及如何区分“投影进来的内容”和“组件的子视图”。\n演示了 <code>ngAfterContentInit</code> 和 <code>ngAfterContentChecked</code> 钩子。</p><p translation-origin=\"off\">      Shows how to project external content into a component and\nhow to distinguish projected content from a component's view children.\nDemonstrates the <code>ngAfterContentInit</code> and <code>ngAfterContentChecked</code> hooks.</p>\n\n    </td>\n  </tr>\n  <tr style=\"vertical-align:top\">\n    <td>\n<p translation-result=\"on\">      计数器</p><p translation-origin=\"off\">      Counter</p>\n\n    </td>\n    <td>\n<p translation-result=\"on\">      演示了组件和指令的组合，它们各自有自己的钩子。</p><p translation-origin=\"off\">      Demonstrates a combination of a component and a directive\neach with its own hooks.</p>\n\n<p translation-result=\"on\">      在这个例子中，每当父组件递增它的输入属性 <code>counter</code> 时，<code>CounterComponent</code> 就会通过 <code>ngOnChanges</code> 记录一条变更。\n同时，前一个例子中的 <code>SpyDirective</code> 被用于在 <code>CounterComponent</code> 上提供日志，它可以同时观察到日志的创建和销毁过程。</p><p translation-origin=\"off\">      In this example, a <code>CounterComponent</code> logs a change (via <code>ngOnChanges</code>)\nevery time the parent component increments its input counter property.\nMeanwhile, the <code>SpyDirective</code> from the previous example is applied\nto the <code>CounterComponent</code> log where it watches log entries being created and destroyed.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\">本文剩下的部分将详细讨论这些练习。</p><p translation-origin=\"off\">The remainder of this page discusses selected exercises in further detail.</p>\n\n<a id=\"peek-a-boo\"></a>\n<h2 id=\"peek-a-boo-all-hooks\" translation-result=\"on\">Peek-a-boo：全部钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#peek-a-boo-all-hooks\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"peek-a-boo-all-hooks\">Peek-a-boo: all hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#peek-a-boo-all-hooks\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>PeekABooComponent</code> 组件演示了组件中所有可能存在的钩子。</p><p translation-origin=\"off\">The <code>PeekABooComponent</code> demonstrates all of the hooks in one component.</p>\n\n<p translation-result=\"on\">你可能很少、或者永远不会像这里一样实现所有这些接口。\n之所以在 peek-a-boo 中这么做，是为了演示 Angular 是如何按照期望的顺序调用这些钩子的。</p><p translation-origin=\"off\">You would rarely, if ever, implement all of the interfaces like this.\nThe peek-a-boo exists to show how Angular calls the hooks in the expected order.</p>\n\n<p translation-result=\"on\">用户点击<strong>Create...</strong>按钮，然后点击<strong>Destroy...</strong>按钮后，日志的状态如下图所示：</p><p translation-origin=\"off\">This snapshot reflects the state of the log after the user clicked the <em>Create...</em> button and then the <em>Destroy...</em> button.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/lifecycle-hooks/peek-a-boo.png\" alt=\"Peek-a-boo\" width=\"309\" height=\"366\">\n</div>\n<p translation-result=\"on\">日志信息的日志和所规定的钩子调用顺序是一致的：\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>、<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>、<code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code> (3x)、<code><a href=\"api/core/AfterContentInit\" class=\"code-anchor\">AfterContentInit</a></code>、<code><a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a></code> (3x)、\n<code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a></code>、<code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a></code> (3x)和 <code><a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a></code></p><p translation-origin=\"off\">The sequence of log messages follows the prescribed hook calling order:\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>, <code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code> (3x), <code><a href=\"api/core/AfterContentInit\" class=\"code-anchor\">AfterContentInit</a></code>, <code><a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a></code> (3x),\n<code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a></code>, <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a></code> (3x), and <code><a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a></code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  构造函数本质上不应该算作 Angular 的钩子。\n记录确认了在创建期间那些输入属性(这里是 <code>name</code> 属性)没有被赋值。</p><p translation-origin=\"off\">  The constructor isn't an Angular hook <em>per se</em>.\nThe log confirms that input properties (the <code>name</code> property in this case) have no assigned values at construction.</p>\n\n</div>\n<p translation-result=\"on\">如果用户点击<em>Update Hero</em>按钮，就会看到另一个 <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 和至少两组 <code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code>、<code><a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a></code> 和 <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a></code> 钩子。\n显然，这三种钩子被触发了<em>很多次</em>，必须让这三种钩子里的逻辑尽可能的精简！</p><p translation-origin=\"off\">Had the user clicked the <em>Update Hero</em> button, the log would show another <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> and two more triplets of\n<code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code>, <code><a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a></code> and <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a></code>.\nClearly these three hooks fire <em>often</em>. Keep the logic in these hooks as lean as possible!</p>\n\n<p translation-result=\"on\">下一个例子就聚焦于这些钩子的细节上。</p><p translation-origin=\"off\">The next examples focus on hook details.</p>\n\n<a id=\"spy\"></a>\n<h2 id=\"spying-oninit-and-ondestroy\" translation-result=\"on\">窥探 <em>OnInit</em> 和 <em>OnDestroy</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#spying-oninit-and-ondestroy\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"spying-oninit-and-ondestroy\">Spying <em>OnInit</em> and <em>OnDestroy</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#spying-oninit-and-ondestroy\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">潜入这两个 spy 钩子来发现一个元素是什么时候被初始化或者销毁的。</p><p translation-origin=\"off\">Go undercover with these two spy hooks to discover when an element is initialized or destroyed.</p>\n\n<p translation-result=\"on\">指令是一种完美的渗透方式，这些英雄们永远不会知道该指令的存在。</p><p translation-origin=\"off\">This is the perfect infiltration job for a directive.\nThe heroes will never know they're being watched.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  不开玩笑了，注意下面两个关键点：</p><p translation-origin=\"off\">  Kidding aside, pay attention to two key points:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">就像对组件一样，Angular 也会对<em>指令</em>调用这些钩子方法。<br><br></p><p translation-origin=\"off\">Angular calls hook methods for <em>directives</em> as well as components.<br><br></p>\n\n</li>\n<li>\n<p translation-result=\"on\">     一个侦探(spy)指令可以让你在无法直接修改 DOM 对象实现代码的情况下，透视其内部细节。\n显然，你不能修改一个原生 <code>&#x3C;div></code> 元素的实现代码。\n你同样不能修改第三方组件。\n但你用一个指令就能监视它们了。</p><p translation-origin=\"off\">A spy directive can provide insight into a DOM object that you cannot change directly.\nObviously you can't touch the implementation of a native <code>&#x3C;div></code>.\nYou can't modify a third party component either.\nBut you can watch both with a directive.</p>\n\n</li>\n</ol>\n</div>\n<p translation-result=\"on\">这个鬼鬼祟祟的侦探指令很简单，几乎完全由 <code>ngOnInit()</code> 和 <code>ngOnDestroy()</code> 钩子组成，它通过一个注入进来的 <code>LoggerService</code> 把消息记录到父组件中去。</p><p translation-origin=\"off\">The sneaky spy directive is simple, consisting almost entirely of <code>ngOnInit()</code> and <code>ngOnDestroy()</code> hooks\nthat log messages to the parent via an injected <code>LoggerService</code>.</p>\n\n<code-example path=\"lifecycle-hooks/src/app/spy.directive.ts\" region=\"spy-directive\" header=\"src/app/spy.directive.ts\">\n// Spy on any element to which it is applied.\n// Usage: &#x3C;div mySpy>...&#x3C;/div>\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: '[mySpy]'})\nexport class SpyDirective implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n\n  constructor(private logger: LoggerService) { }\n\n  ngOnInit()    { this.logIt(`<a href=\"\" class=\"code-anchor\">onInit</a>`); }\n\n  ngOnDestroy() { this.logIt(`onDestroy`); }\n\n  private logIt(msg: string) {\n    this.logger.log(`Spy #${nextId++} ${msg}`);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">你可以把这个侦探指令写到任何原生元素或组件元素上，它将与所在的组件同时初始化和销毁。\n下面是把它附加到用来重复显示英雄数据的这个 <code>&#x3C;div></code> 上。</p><p translation-origin=\"off\">You can apply the spy to any native or component element and it'll be initialized and destroyed\nat the same time as that element.\nHere it is attached to the repeated hero <code>&#x3C;div></code>:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/spy.component.html\" region=\"template\" header=\"src/app/spy.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" mySpy class=\"heroes\">\n  {{hero}}\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">每个“侦探”的出生和死亡也同时标记出了存放英雄的那个 <code>&#x3C;div></code> 的出生和死亡。<em>钩子记录</em>中的结构是这样的：</p><p translation-origin=\"off\">Each spy's birth and death marks the birth and death of the attached hero <code>&#x3C;div></code>\nwith an entry in the <em>Hook Log</em> as seen here:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/lifecycle-hooks/spy-directive.gif\" alt=\"Spy Directive\" width=\"656\" height=\"378\">\n</div>\n<p translation-result=\"on\">添加一个英雄就会产生一个新的英雄 <code>&#x3C;div></code>。侦探的 <code>ngOnInit()</code> 记录下了这个事件。</p><p translation-origin=\"off\">Adding a hero results in a new hero <code>&#x3C;div></code>. The spy's <code>ngOnInit()</code> logs that event.</p>\n\n<p translation-result=\"on\"><em>Reset</em> 按钮清除了这个 <code>heroes</code> 列表。\nAngular 从 DOM 中移除了所有英雄的 div，并且同时销毁了附加在这些 div 上的侦探指令。\n侦探的 <code>ngOnDestroy()</code> 方法汇报了它自己的临终时刻。</p><p translation-origin=\"off\">The <em>Reset</em> button clears the <code>heroes</code> list.\nAngular removes all hero <code>&#x3C;div></code> elements from the DOM and destroys their spy directives at the same time.\nThe spy's <code>ngOnDestroy()</code> method reports its last moments.</p>\n\n<p translation-result=\"on\">在真实的应用程序中，<code>ngOnInit()</code> 和 <code>ngOnDestroy()</code> 方法扮演着更重要的角色。</p><p translation-origin=\"off\">The <code>ngOnInit()</code> and <code>ngOnDestroy()</code> methods have more vital roles to play in real applications.</p>\n\n<a id=\"oninit\"></a>\n<h3 id=\"oninit\"><em>OnInit()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#oninit\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">使用 <code>ngOnInit()</code> 有两个原因：</p><p translation-origin=\"off\">Use <code>ngOnInit()</code> for two main reasons:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在构造函数之后马上执行复杂的初始化逻辑</p><p translation-origin=\"off\">To perform complex initializations shortly after construction.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 Angular 设置完输入属性之后，对该组件进行准备。</p><p translation-origin=\"off\">To set up the component after Angular sets the input properties.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">有经验的开发者会认同组件应该能很便宜和安全的构造出来。</p><p translation-origin=\"off\">Experienced developers agree that components should be cheap and safe to construct.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  Misko Hevery，Angular 项目的组长，在<a href=\"http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/\">这里解释</a>了你为什么应该避免复杂的构造函数逻辑。</p><p translation-origin=\"off\">  Misko Hevery, Angular team lead,\n<a href=\"http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/\">explains why</a>\nyou should avoid complex constructor logic.</p>\n\n</div>\n<p translation-result=\"on\">不要在组件的构造函数中获取数据？\n在测试环境下新建组件时或在你决定要显示它之前，不应该担心它会尝试联系远程服务器。\n构造函数中除了使用简单的值对局部变量进行初始化之外，什么都不应该做。</p><p translation-origin=\"off\">Don't fetch data in a component constructor.\nYou shouldn't worry that a new component will try to contact a remote server when\ncreated under test or before you decide to display it.\nConstructors should do no more than set the initial local variables to simple values.</p>\n\n<p translation-result=\"on\"><code>ngOnInit()</code> 是组件获取初始数据的好地方。<a href=\"tutorial/toh-pt4#oninit\">指南</a>中讲解了如何这样做。</p><p translation-origin=\"off\">An <code>ngOnInit()</code> is a good place for a component to fetch its initial data. The\n<a href=\"tutorial/toh-pt4#oninit\">Tour of Heroes Tutorial</a> guide shows how.</p>\n\n<p translation-result=\"on\">另外还要记住，在指令的<em>构造函数完成之前</em>，那些被绑定的输入属性还都没有值。\n如果你需要基于这些属性的值来初始化这个指令，这种情况就会出问题。\n而当 <code>ngOnInit()</code> 执行的时候，这些属性都已经被正确的赋值过了。</p><p translation-origin=\"off\">Remember also that a directive's data-bound input properties are not set until <em>after construction</em>.\nThat's a problem if you need to initialize the directive based on those properties.\nThey'll have been set when <code>ngOnInit()</code> runs.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  <code>ngOnChanges()</code> 方法是你访问这些属性的第一次机会。Angular 会在 <code>ngOnInit()</code> 之前调用 <code>ngOnChanges()</code>，之后还会调用很多次。但只会调用一次 <code>ngOnInit()</code>。</p><p translation-origin=\"off\">  The <code>ngOnChanges()</code> method is your first opportunity to access those properties.\nAngular calls <code>ngOnChanges()</code> before <code>ngOnInit()</code> and many times after that.\nIt only calls <code>ngOnInit()</code> once.</p>\n\n</div>\n<p translation-result=\"on\">你可以信任 Angular 会在创建组件后立刻调用 <code>ngOnInit()</code> 方法。\n这里是放置复杂初始化逻辑的好地方。</p><p translation-origin=\"off\">You can count on Angular to call the <code>ngOnInit()</code> method <em>soon</em> after creating the component.\nThat's where the heavy initialization logic belongs.</p>\n\n<a id=\"ondestroy\"></a>\n<h3 id=\"ondestroy\"><em>OnDestroy()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#ondestroy\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">一些清理逻辑<em>必须</em>在 Angular 销毁指令之前运行，把它们放在 <code>ngOnDestroy()</code> 中。</p><p translation-origin=\"off\">Put cleanup logic in <code>ngOnDestroy()</code>, the logic that <em>must</em> run before Angular destroys the directive.</p>\n\n<p translation-result=\"on\">这是在该组件消失之前，可用来通知应用程序中其它部分的最后一个时间点。</p><p translation-origin=\"off\">This is the time to notify another part of the application that the component is going away.</p>\n\n<p translation-result=\"on\">这里是用来释放那些不会被垃圾收集器自动回收的各类资源的地方。\n取消那些对可观察对象和 DOM 事件的订阅。停止定时器。注销该指令曾注册到全局服务或应用级服务中的各种回调函数。\n如果不这么做，就会有导致内存泄露的风险。</p><p translation-origin=\"off\">This is the place to free resources that won't be garbage collected automatically.\nUnsubscribe from Observables and DOM events. Stop interval timers.\nUnregister all callbacks that this directive registered with global or application services.\nYou risk memory leaks if you neglect to do so.</p>\n\n<a id=\"onchanges\"></a>\n<h2 id=\"onchanges\"><em>OnChanges()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#onchanges\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">一旦检测到该组件(或指令)的<strong><em>输入属性</em></strong>发生了变化，Angular 就会调用它的 <code>ngOnChanges()</code> 方法。\n本例监控 <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 钩子。</p><p translation-origin=\"off\">Angular calls its <code>ngOnChanges()</code> method whenever it detects changes to <strong><em>input properties</em></strong> of the component (or directive).\nThis example monitors the <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> hook.</p>\n\n<code-example path=\"lifecycle-hooks/src/app/on-changes.component.ts\" region=\"ng-on-changes\" header=\"on-changes.component.ts (excerpt)\">\nngOnChanges(<a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>) {\n  for (let propName in <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>) {\n    let chng = <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>[propName];\n    let cur  = JSON.stringify(chng.currentValue);\n    let prev = JSON.stringify(chng.previousValue);\n    this.changeLog.push(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>ngOnChanges()</code> 方法获取了一个对象，它把每个发生变化的属性名都映射到了一个<a href=\"api/core/SimpleChange\">SimpleChange</a>对象，\n该对象中有属性的当前值和前一个值。这个钩子会在这些发生了变化的属性上进行迭代，并记录它们。</p><p translation-origin=\"off\">The <code>ngOnChanges()</code> method takes an object that maps each changed property name to a\n<a href=\"api/core/SimpleChange\">SimpleChange</a> object holding the current and previous property values.\nThis hook iterates over the changed properties and logs them.</p>\n\n<p translation-result=\"on\">这个例子中的 <code>OnChangesComponent</code> 组件有两个输入属性：<code>hero</code> 和 <code>power</code>。</p><p translation-origin=\"off\">The example component, <code>OnChangesComponent</code>, has two input properties: <code>hero</code> and <code>power</code>.</p>\n\n<code-example path=\"lifecycle-hooks/src/app/on-changes.component.ts\" region=\"inputs\" header=\"src/app/on-changes.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() power: string;\n\n</code-example>\n<p translation-result=\"on\">宿主 <code>OnChangesParentComponent</code> 绑定了它们，就像这样：</p><p translation-origin=\"off\">The host <code>OnChangesParentComponent</code> binds to them like this:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/on-changes-parent.component.html\" region=\"on-changes\" header=\"src/app/on-changes-parent.component.html\">\n&#x3C;on-changes [hero]=\"hero\" [power]=\"power\">&#x3C;/on-changes>\n\n</code-example>\n<p translation-result=\"on\">下面是此例子中的当用户做出更改时的操作演示：</p><p translation-origin=\"off\">Here's the sample in action as the user makes changes.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/lifecycle-hooks/on-changes-anim.gif\" alt=\"OnChanges\" width=\"632\" height=\"512\">\n</div>\n<p translation-result=\"on\">当 <em>power</em> 属性的字符串值变化时，相应的日志就出现了。\n但是 <code>ngOnChanges</code> 并没有捕捉到 <code>hero.name</code> 的变化。\n这是第一个意外。</p><p translation-origin=\"off\">The log entries appear as the string value of the <em>power</em> property changes.\nBut the <code>ngOnChanges</code> does not catch changes to <code>hero.name</code>\nThat's surprising at first.</p>\n\n<p translation-result=\"on\">Angular 只会在输入属性的值变化时调用这个钩子。\n而 <code>hero</code> 属性的值是一个<em>到英雄对象的引用</em>。\nAngular 不会关注这个英雄对象的 <code>name</code> 属性的变化。\n这个英雄对象的<em>引用</em>没有发生变化，于是从 Angular 的视角看来，也就没有什么需要报告的变化了。</p><p translation-origin=\"off\">Angular only calls the hook when the value of the input property changes.\nThe value of the <code>hero</code> property is the <em>reference to the hero object</em>.\nAngular doesn't care that the hero's own <code>name</code> property changed.\nThe hero object <em>reference</em> didn't change so, from Angular's perspective, there is no change to report!</p>\n\n<a id=\"docheck\"></a>\n<h2 id=\"docheck\"><em>DoCheck()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#docheck\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">使用 <code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code> 钩子来检测那些 Angular 自身无法捕获的变更并采取行动。</p><p translation-origin=\"off\">Use the <code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code> hook to detect and act upon changes that Angular doesn't catch on its own.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  用这个方法来检测那些被 Angular 忽略的更改。</p><p translation-origin=\"off\">  Use this method to detect a change that Angular overlooked.</p>\n\n</div>\n<p translation-result=\"on\"><em>DoCheck</em> 范例通过下面的 <code>ngDoCheck()</code> 钩子扩展了 <em>OnChanges</em> 范例：</p><p translation-origin=\"off\">The <em>DoCheck</em> sample extends the <em>OnChanges</em> sample with the following <code>ngDoCheck()</code> hook:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/do-check.component.ts\" region=\"ng-do-check\" header=\"DoCheckComponent (ngDoCheck)\">\nngDoCheck() {\n\n  if (this.hero.name !== this.oldHeroName) {\n    this.changeDetected = true;\n    this.changeLog.push(`<a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a>: Hero name changed to \"${this.hero.name}\" from \"${this.oldHeroName}\"`);\n    this.oldHeroName = this.hero.name;\n  }\n\n  if (this.power !== this.oldPower) {\n    this.changeDetected = true;\n    this.changeLog.push(`<a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a>: Power changed to \"${this.power}\" from \"${this.oldPower}\"`);\n    this.oldPower = this.power;\n  }\n\n  if (this.changeDetected) {\n      this.noChangeCount = 0;\n  } else {\n      // <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> that hook was called when there was no relevant change.\n      let <a href=\"api/common/NgForOfContext#count\" class=\"code-anchor\">count</a> = this.noChangeCount += 1;\n      let noChangeMsg = `<a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a> called ${<a href=\"api/common/NgForOfContext#count\" class=\"code-anchor\">count</a>}x when no change to hero or power`;\n      if (<a href=\"api/common/NgForOfContext#count\" class=\"code-anchor\">count</a> === 1) {\n        // add new \"no change\" <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>\n        this.changeLog.push(noChangeMsg);\n      } else {\n        // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> last \"no change\" <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>\n        this.changeLog[this.changeLog.length - 1] = noChangeMsg;\n      }\n  }\n\n  this.changeDetected = false;\n}\n\n</code-example>\n<p translation-result=\"on\">该代码检测一些<strong>相关的值</strong>，捕获当前值并与以前的值进行比较。\n当英雄或它的超能力发生了非实质性改变时，就会往日志中写一条特殊的消息。\n这样你可以看到 <code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code> 被调用的频率。结果非常显眼：</p><p translation-origin=\"off\">This code inspects certain <em>values of interest</em>, capturing and comparing their current state against previous values.\nIt writes a special message to the log when there are no substantive changes to the <code>hero</code> or the <code>power</code>\nso you can see how often <code><a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a></code> is called. The results are illuminating:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/lifecycle-hooks/do-check-anim.gif\" alt=\"DoCheck\" width=\"632\" height=\"588\">\n</div>\n<p translation-result=\"on\">虽然 <code>ngDoCheck()</code> 钩子可以可以监测到英雄的 <code>name</code> 什么时候发生了变化。但其开销很恐怖。\n这个 <code>ngDoCheck</code> 钩子被非常频繁的调用 —— 在<em>每次</em>变更检测周期之后，发生了变化的每个地方都会调它。\n在这个例子中，用户还没有做任何操作之前，它就被调用了超过二十次。</p><p translation-origin=\"off\">While the <code>ngDoCheck()</code> hook can detect when the hero's <code>name</code> has changed, it has a frightful cost.\nThis hook is called with enormous frequency—after <em>every</em>\nchange detection cycle no matter where the change occurred.\nIt's called over twenty times in this example before the user can do anything.</p>\n\n<p translation-result=\"on\">大部分检查的第一次调用都是在 Angular 首次渲染该页面中<em>其它不相关数据</em>时触发的。\n仅仅把鼠标移到其它 <code>&#x3C;input></code> 中就会触发一次调用。\n只有相对较少的调用才是由于对相关数据的修改而触发的。\n显然，我们的实现必须非常轻量级，否则将损害用户体验。</p><p translation-origin=\"off\">Most of these initial checks are triggered by Angular's first rendering of <em>unrelated data elsewhere on the page</em>.\nMere mousing into another <code>&#x3C;input></code> triggers a call.\nRelatively few calls reveal actual changes to pertinent data.\nClearly our implementation must be very lightweight or the user experience suffers.</p>\n\n<a id=\"afterview\"></a>\n<h2 id=\"afterview\">AfterView<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#afterview\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\"><em>AfterView</em> 例子展示了 <code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>()</code> 和 <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a>()</code> 钩子，Angular 会在每次创建了组件的子视图后调用它们。</p><p translation-origin=\"off\">The <em>AfterView</em> sample explores the <code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>()</code> and <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a>()</code> hooks that Angular calls\n<em>after</em> it creates a component's child views.</p>\n\n<p translation-result=\"on\">下面是一个子视图，它用来把英雄的名字显示在一个 <code>&#x3C;input></code> 中：</p><p translation-origin=\"off\">Here's a child view that displays a hero's name in an <code>&#x3C;input></code>:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-view.component.ts\" region=\"child-view\" header=\"ChildComponent\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-child-view',\n  template: '&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\">'\n})\nexport class ChildViewComponent {\n  hero = 'Magneta';\n}\n\n</code-example>\n<p translation-result=\"on\"><code>AfterViewComponent</code> 把这个子视图显示<em>在它的模板中</em>：</p><p translation-origin=\"off\">The <code>AfterViewComponent</code> displays this child view <em>within its template</em>:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-view.component.ts\" region=\"template\" header=\"AfterViewComponent (template)\">\ntemplate: `\n  &#x3C;div>-- child view begins --&#x3C;/div>\n    &#x3C;app-child-view>&#x3C;/app-child-view>\n  &#x3C;div>-- child view ends --&#x3C;/div>`\n\n</code-example>\n<p translation-result=\"on\">下列钩子基于<em>子视图中</em>的每一次数据变更采取行动，它只能通过带<a href=\"api/core/ViewChild\">@ViewChild</a>装饰器的属性来访问子视图。</p><p translation-origin=\"off\">The following hooks take action based on changing values <em>within the child view</em>,\nwhich can only be reached by querying for the child view via the property decorated with\n<a href=\"api/core/ViewChild\">@ViewChild</a>.</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-view.component.ts\" region=\"hooks\" header=\"AfterViewComponent (class excerpts)\">\nexport class AfterViewComponent implements  <a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a>, <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n  private prevHero = '';\n\n  // <a href=\"api/core/Query\" class=\"code-anchor\">Query</a> for a VIEW child of type `ChildViewComponent`\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(ChildViewComponent) viewChild: ChildViewComponent;\n\n  ngAfterViewInit() {\n    // viewChild is set after the view has been initialized\n    this.logIt('<a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>');\n    this.doSomething();\n  }\n\n  ngAfterViewChecked() {\n    // viewChild is updated after the view has been checked\n    if (this.prevHero === this.viewChild.hero) {\n      this.logIt('<a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a> (no change)');\n    } else {\n      this.prevHero = this.viewChild.hero;\n      this.logIt('<a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a>');\n      this.doSomething();\n    }\n  }\n  // ...\n}\n\n</code-example>\n<a id=\"wait-a-tick\"></a>\n<h3 id=\"abide-by-the-unidirectional-data-flow-rule\" translation-result=\"on\">遵循单向数据流规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#abide-by-the-unidirectional-data-flow-rule\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"abide-by-the-unidirectional-data-flow-rule\">Abide by the unidirectional data flow rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#abide-by-the-unidirectional-data-flow-rule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当英雄的名字超过 10 个字符时，<code>doSomething()</code> 方法就会更新屏幕。</p><p translation-origin=\"off\">The <code>doSomething()</code> method updates the screen when the hero name exceeds 10 characters.</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-view.component.ts\" region=\"do-something\" header=\"AfterViewComponent (doSomething)\">\n// This surrogate for real business logic sets the `comment`\nprivate doSomething() {\n  let c = this.viewChild.hero.length > 10 ? `That's a long name` : '';\n  if (c !== this.comment) {\n    // Wait a <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> because the component's view has already been checked\n    this.logger.tick_then(() => this.comment = c);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">为什么在更新 <code>comment</code> 属性之前，<code>doSomething()</code> 方法要等上一拍(tick)？</p><p translation-origin=\"off\">Why does the <code>doSomething()</code> method wait a tick before updating <code>comment</code>?</p>\n\n<p translation-result=\"on\">Angular 的“单向数据流”规则禁止在一个视图已经被组合好<em>之后</em>再更新视图。\n而这两个钩子都是在组件的视图已经被组合好之后触发的。</p><p translation-origin=\"off\">Angular's unidirectional data flow rule forbids updates to the view <em>after</em> it has been composed.\nBoth of these hooks fire <em>after</em> the component's view has been composed.</p>\n\n<p translation-result=\"on\">如果立即更新组件中被绑定的 <code>comment</code> 属性，Angular 就会抛出一个错误(试试!)。\n<code>LoggerService.tick_then()</code> 方法延迟更新日志一个回合（浏览器 JavaScript 周期回合），这样就够了。</p><p translation-origin=\"off\">Angular throws an error if the hook updates the component's data-bound <code>comment</code> property immediately (try it!).\nThe <code>LoggerService.tick_then()</code> postpones the log update\nfor one turn of the browser's JavaScript cycle and that's just long enough.</p>\n\n<p translation-result=\"on\">这里是 <em>AfterView</em> 的操作演示：</p><p translation-origin=\"off\">Here's <em>AfterView</em> in action:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/lifecycle-hooks/after-view-anim.gif\" alt=\"AfterView\" width=\"520\" height=\"532\">\n</div>\n<p translation-result=\"on\">注意，Angular 会频繁的调用 <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a>()</code>，甚至在并没有需要关注的更改时也会触发。\n所以务必把这个钩子方法写得尽可能精简，以免出现性能问题。</p><p translation-origin=\"off\">Notice that Angular frequently calls <code><a href=\"api/core/AfterViewChecked\" class=\"code-anchor\">AfterViewChecked</a>()</code>, often when there are no changes of interest.\nWrite lean hook methods to avoid performance problems.</p>\n\n<a id=\"aftercontent\"></a>\n<h2 id=\"aftercontent\">AfterContent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#aftercontent\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\"><em>AfterContent</em> 例子展示了 <code><a href=\"api/core/AfterContentInit\" class=\"code-anchor\">AfterContentInit</a>()</code> 和 <code><a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a>()</code> 钩子，Angular 会在外来内容被投影到组件中<em>之后</em>调用它们。</p><p translation-origin=\"off\">The <em>AfterContent</em> sample explores the <code><a href=\"api/core/AfterContentInit\" class=\"code-anchor\">AfterContentInit</a>()</code> and <code><a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a>()</code> hooks that Angular calls\n<em>after</em> Angular projects external content into the component.</p>\n\n<a id=\"content-projection\"></a>\n<h3 id=\"content-projection\" translation-result=\"on\">内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#content-projection\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"content-projection\">Content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#content-projection\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><em>内容投影</em>是从组件外部导入 HTML 内容，并把它插入在组件模板中指定位置上的一种途径。</p><p translation-origin=\"off\"><em>Content projection</em> is a way to import HTML content from outside the component and insert that content\ninto the component's template in a designated spot.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  AngularJS 的开发者大概知道一项叫做 <em>transclusion</em> 的技术，对，这就是它的马甲。</p><p translation-origin=\"off\">  AngularJS developers know this technique as <em>transclusion</em>.</p>\n\n</div>\n<p translation-result=\"on\">对比<a href=\"guide/lifecycle-hooks#afterview\">前面的 AfterView</a> 例子考虑这个变化。\n这次不再通过模板来把子视图包含进来，而是改为从 <code>AfterContentComponent</code> 的父组件中导入它。下面是父组件的模板：</p><p translation-origin=\"off\">Consider this variation on the <a href=\"guide/lifecycle-hooks#afterview\">previous <em>AfterView</em></a> example.\nThis time, instead of including the child view within the template, it imports the content from\nthe <code>AfterContentComponent</code>'s parent. Here's the parent's template:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-content.component.ts\" region=\"parent-template\" header=\"AfterContentParentComponent (template excerpt)\">\n`&#x3C;after-content>\n   &#x3C;app-child>&#x3C;/app-child>\n &#x3C;/after-content>`\n\n</code-example>\n<p translation-result=\"on\">注意，<code>&#x3C;app-child></code> 标签被包含在 <code>&#x3C;after-content></code> 标签中。\n永远不要在组件标签的内部放任何内容 —— <em>除非你想把这些内容投影进这个组件中</em>。</p><p translation-origin=\"off\">Notice that the <code>&#x3C;app-child></code> tag is tucked between the <code>&#x3C;after-content></code> tags.\nNever put content between a component's element tags <em>unless you intend to project that content\ninto the component</em>.</p>\n\n<p translation-result=\"on\">现在来看该组件的模板：</p><p translation-origin=\"off\">Now look at the component's template:</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-content.component.ts\" region=\"template\" header=\"AfterContentComponent (template)\">\ntemplate: `\n  &#x3C;div>-- projected content begins --&#x3C;/div>\n    &#x3C;ng-content>&#x3C;/ng-content>\n  &#x3C;div>-- projected content ends --&#x3C;/div>`\n\n</code-example>\n<p translation-result=\"on\"><code>&#x3C;ng-content></code> 标签是外来内容的<em>占位符</em>。\n它告诉 Angular 在哪里插入这些外来内容。\n在这里，被投影进去的内容就是来自父组件的 <code>&#x3C;app-child></code> 标签。</p><p translation-origin=\"off\">The <code>&#x3C;ng-content></code> tag is a <em>placeholder</em> for the external content.\nIt tells Angular where to insert that content.\nIn this case, the projected content is the <code>&#x3C;app-child></code> from the parent.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/lifecycle-hooks/projected-child-view.png\" alt=\"Projected Content\" width=\"230\" height=\"89\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  下列迹象表明存在着<em>内容投影</em>：</p><p translation-origin=\"off\">  The telltale signs of <em>content projection</em> are twofold:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 在组件的元素标签中有 HTML</p><p translation-origin=\"off\">HTML between component element tags.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 组件的模板中出现了 <code>&#x3C;ng-content></code> 标签</p><p translation-origin=\"off\">The presence of <code>&#x3C;ng-content></code> tags in the component's template.</p>\n\n</li>\n</ul>\n</div>\n<a id=\"aftercontent-hooks\"></a>\n<h3 id=\"aftercontent-hooks\" translation-result=\"on\">AfterContent 钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#aftercontent-hooks\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"aftercontent-hooks\">AfterContent hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#aftercontent-hooks\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><em>AfterContent</em> 钩子和 <em>AfterView</em> 相似。关键的不同点是子组件的类型不同。</p><p translation-origin=\"off\"><em>AfterContent</em> hooks are similar to the <em>AfterView</em> hooks.\nThe key difference is in the child component.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   <em>AfterView</em> 钩子所关心的是 <code><a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a></code>，这些子组件的元素标签会出现在该组件的模板<em>里面</em>。</p><p translation-origin=\"off\">The <em>AfterView</em> hooks concern <code><a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a></code>, the child components whose element tags\nappear <em>within</em> the component's template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <em>AfterContent</em> 钩子所关心的是 <code><a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code>，这些子组件被 Angular 投影进该组件中。</p><p translation-origin=\"off\">The <em>AfterContent</em> hooks concern <code><a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code>, the child components that Angular\nprojected into the component.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下列 <em>AfterContent</em> 钩子基于<em>子级内容</em>中值的变化而采取相应的行动，它只能通过带有<a href=\"api/core/ContentChild\">@ContentChild</a>装饰器的属性来查询到“子级内容”。</p><p translation-origin=\"off\">The following <em>AfterContent</em> hooks take action based on changing values in a <em>content child</em>,\nwhich can only be reached by querying for them via the property decorated with\n<a href=\"api/core/ContentChild\">@ContentChild</a>.</p>\n\n<code-example path=\"lifecycle-hooks/src/app/after-content.component.ts\" region=\"hooks\" header=\"AfterContentComponent (class excerpts)\">\nexport class AfterContentComponent implements <a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a>, <a href=\"api/core/AfterContentInit\" class=\"code-anchor\">AfterContentInit</a> {\n  private prevHero = '';\n  comment = '';\n\n  // <a href=\"api/core/Query\" class=\"code-anchor\">Query</a> for a CONTENT child of type `ChildComponent`\n  @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(ChildComponent) contentChild: ChildComponent;\n\n  ngAfterContentInit() {\n    // contentChild is set after the content has been initialized\n    this.logIt('<a href=\"api/core/AfterContentInit\" class=\"code-anchor\">AfterContentInit</a>');\n    this.doSomething();\n  }\n\n  ngAfterContentChecked() {\n    // contentChild is updated after the content has been checked\n    if (this.prevHero === this.contentChild.hero) {\n      this.logIt('<a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a> (no change)');\n    } else {\n      this.prevHero = this.contentChild.hero;\n      this.logIt('<a href=\"api/core/AfterContentChecked\" class=\"code-anchor\">AfterContentChecked</a>');\n      this.doSomething();\n    }\n  }\n  // ...\n}\n\n</code-example>\n<a id=\"no-unidirectional-flow-worries\"></a>\n<h3 id=\"no-unidirectional-flow-worries-with-aftercontent\" translation-result=\"on\">使用 <strong>AfterContent</strong> 时，无需担心单向数据流规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#no-unidirectional-flow-worries-with-aftercontent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"no-unidirectional-flow-worries-with-aftercontent\">No unidirectional flow worries with <em>AfterContent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lifecycle-hooks#no-unidirectional-flow-worries-with-aftercontent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">该组件的 <code>doSomething()</code> 方法立即更新了组件被绑定的 <code>comment</code> 属性。\n它<a href=\"guide/lifecycle-hooks#wait-a-tick\">不用等</a>下一回合。</p><p translation-origin=\"off\">This component's <code>doSomething()</code> method update's the component's data-bound <code>comment</code> property immediately.\nThere's no <a href=\"guide/lifecycle-hooks#wait-a-tick\">need to wait</a>.</p>\n\n<p translation-result=\"on\">回忆一下，Angular 在每次调用 <em>AfterView</em> 钩子之前也会同时调用 <em>AfterContent</em>。\nAngular 在完成当前组件的视图合成之前，就已经完成了被投影内容的合成。\n所以你仍然有机会去修改那个视图。</p><p translation-origin=\"off\">Recall that Angular calls both <em>AfterContent</em> hooks before calling either of the <em>AfterView</em> hooks.\nAngular completes composition of the projected content <em>before</em> finishing the composition of this component's view.\nThere is a small window between the <code>AfterContent...</code> and <code>AfterView...</code> hooks to modify the host view.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/Component\n - api/core/Directive\n - api/core/DoCheck\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/component-interaction\n - guide/glossary\n - guide/template-syntax\n - guide/testing\n - guide/upgrade\n - tutorial/toh-pt1\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/animations/browser/testing/MockAnimationDriver#log\n - api/common/NgForOf\n - api/common/NgForOfContext#count\n - api/common/http/HttpErrorResponse#message\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/DoCheck\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Query\n - api/core/QueryList#changes\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/testing/tick\n - api/forms/NgForm#ngAfterViewInit\n - api/forms/NgModel\n - api/forms/NgModel#update\n - api/router/RouterLinkActive#ngAfterContentInit\n - guide/lifecycle-hooks#abide-by-the-unidirectional-data-flow-rule\n - guide/lifecycle-hooks#aftercontent\n - guide/lifecycle-hooks#aftercontent-hooks\n - guide/lifecycle-hooks#afterview\n - guide/lifecycle-hooks#component-lifecycle-hooks-overview\n - guide/lifecycle-hooks#content-projection\n - guide/lifecycle-hooks#docheck\n - guide/lifecycle-hooks#interfaces-are-optional-technically\n - guide/lifecycle-hooks#lifecycle-examples\n - guide/lifecycle-hooks#lifecycle-hooks\n - guide/lifecycle-hooks#lifecycle-sequence\n - guide/lifecycle-hooks#no-unidirectional-flow-worries-with-aftercontent\n - guide/lifecycle-hooks#onchanges\n - guide/lifecycle-hooks#ondestroy\n - guide/lifecycle-hooks#oninit\n - guide/lifecycle-hooks#other-angular-lifecycle-hooks\n - guide/lifecycle-hooks#peek-a-boo\n - guide/lifecycle-hooks#peek-a-boo-all-hooks\n - guide/lifecycle-hooks#spy\n - guide/lifecycle-hooks#spying-oninit-and-ondestroy\n - guide/lifecycle-hooks#wait-a-tick\n - tutorial/toh-pt4#oninit\n - http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/lifecycle-hooks.md?message=docs%3A%20请简述你的修改...\n-->"
}