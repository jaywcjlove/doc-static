{
  "id": "guide/styleguide",
  "title": "Angular coding style guide",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/styleguide.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"angular-coding-style-guide\" translation-result=\"on\">风格指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-coding-style-guide\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"angular-coding-style-guide\">Angular coding style guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-coding-style-guide\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">如果你正在寻找关于 Angular 语法、约定和应用组织结构的官方指南，那你就来对了。\n本风格指南介绍了提倡的约定，更重要的是，解释了为什么。</p><p translation-origin=\"off\">Looking for an opinionated guide to Angular syntax, conventions, and application structure?\nStep right in!\nThis style guide presents preferred conventions and, as importantly, explains why.</p>\n\n<a id=\"toc\"></a>\n<h2 id=\"style-vocabulary\" translation-result=\"on\">风格指南的用词<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-vocabulary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"style-vocabulary\">Style vocabulary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-vocabulary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">每个指导原则都会描述好的或者坏的做法，所有指导原则都用同样的风格描述。</p><p translation-origin=\"off\">Each guideline describes either a good or bad practice, and all have a consistent presentation.</p>\n\n<p translation-result=\"on\">指导原则中使用的词汇用来表明推荐的程度。</p><p translation-origin=\"off\">The wording of each guideline indicates how strong the recommendation is.</p>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>意味着总是应该遵循的约定。\n说<em>\"总是\"</em>可能显得有点绝对，应该<em>\"总是\"</em>遵循的指导原则非常少，不过，只有遇到极不寻常的情况才能打破<em>坚持</em>的原则。</p><p translation-origin=\"off\"><strong>Do</strong> is one that should always be followed.\n<em>Always</em> might be a bit too strong of a word.\nGuidelines that literally should always be followed are extremely rare.\nOn the other hand, you need a really unusual case for breaking a <em>Do</em> guideline.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>表示通常应该遵循的指导原则。\n如果你能完全理解指导原则背后的含义，并且有很好的理由违反它，那就改吧。但是请保持一致。</p><p translation-origin=\"off\"><strong>Consider</strong> guidelines should generally be followed.\nIf you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>表示你绝对不应该做的事。需要<em>避免</em>的代码范例会有明显的红色标题。</p><p translation-origin=\"off\"><strong>Avoid</strong> indicates something you should almost never do. Code examples to <em>avoid</em> have an unmistakable red header.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>会给出随后的建议的理由。</p><p translation-origin=\"off\"><strong>Why?</strong> gives reasons for following the previous recommendations.</p>\n\n</div>\n<h2 id=\"file-structure-conventions\" translation-result=\"on\">文件结构约定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-structure-conventions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"file-structure-conventions\">File structure conventions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-structure-conventions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在一些代码例子中，有的文件有一个或多个相似名字的配套文件。（例如 hero.component.ts 和 hero.component.html）。</p><p translation-origin=\"off\">Some code examples display a file that has one or more similarly named companion files.\nFor example, <code>hero.component.ts</code> and <code>hero.component.html</code>.</p>\n\n<p translation-result=\"on\">本指南将会使用像 <code>hero.component.ts|html|css|spec</code> 的简写来表示上面描述的多个文件，目的是保持本指南的简洁性，增加描述文件结构时的可读性。</p><p translation-origin=\"off\">The guideline uses the shortcut <code>hero.component.ts|html|css|spec</code> to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.</p>\n\n<a id=\"single-responsibility\"></a>\n<h2 id=\"single-responsibility\" translation-result=\"on\">单一职责<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"single-responsibility\">Single responsibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">对所有的组件、服务等等应用<a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\"><i>单一职责原则</i> (SRP)</a>。这样可以让应用更干净、更易读、更易维护、更易测试。</p><p translation-origin=\"off\">Apply the\n<a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\"><i>single responsibility principle</i> (SRP)</a>\nto all components, services, and other symbols.\nThis helps make the app cleaner, easier to read and maintain, and more testable.</p>\n\n<a id=\"01-01\"></a>\n<h3 id=\"rule-of-one\" translation-result=\"on\">单一规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#rule-of-one\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"rule-of-one\">Rule of One<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#rule-of-one\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-01-01\" translation-result=\"on\">风格 01-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-01-01\">Style 01-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>每个文件只定义一样东西（例如服务或组件）。</p><p translation-origin=\"off\"><strong>Do</strong> define one thing, such as a service or component, per file.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>把文件大小限制在 400 行代码以内。</p><p translation-origin=\"off\"><strong>Consider</strong> limiting files to 400 lines of code.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>单组件文件非常容易阅读、维护，并能防止在版本控制系统里与团队冲突。</p><p translation-origin=\"off\"><strong>Why?</strong> One component per file makes it far easier to read, maintain, and avoid\ncollisions with teams in source control.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>单组件文件可以防止一些隐蔽的程序缺陷，当把多个组件合写在同一个文件中时，可能造成共享变量、创建意外的闭包，或者与依赖之间产生意外耦合等情况。</p><p translation-origin=\"off\"><strong>Why?</strong> One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>单独的组件通常是该文件默认的导出，可以用路由器实现按需加载。</p><p translation-origin=\"off\"><strong>Why?</strong> A single component can be the default export for its file which facilitates lazy loading with the router.</p>\n\n</div>\n<p translation-result=\"on\">最关键的是，可以让代码更加可复用、更容易阅读，减少出错的可能性。</p><p translation-origin=\"off\">The key is to make the code more reusable, easier to read, and less mistake prone.</p>\n\n<p translation-result=\"on\">下面的<em>负面</em>例子定义了 <code>AppComponent</code>，它来引导应用程序，定义了 <code>Hero</code> 模型对象，并从服务器加载了英雄 ... 所有都在同一个文件。<em>不要这么做</em>。</p><p translation-origin=\"off\">The following <em>negative</em> example defines the <code>AppComponent</code>, bootstraps the app,\ndefines the <code>Hero</code> model object, and loads heroes from the server all in the same file.\n<em>Don't do this</em>.</p>\n\n<code-example path=\"styleguide/src/01-01/app/heroes/hero.component.avoid.ts\" header=\"app/heroes/hero.component.ts\">\n/* avoid */\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\ninterface Hero {\n  id: number;\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n      &#x3C;h1>{{title}}&#x3C;/h1>\n      &#x3C;pre>{{heroes | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/pre>\n    `,\n  styleUrls: ['app/app.component.css']\n})\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  title = 'Tour of Heroes';\n\n  heroes: Hero[] = [];\n\n  ngOnInit() {\n    getHeroes().then(heroes => (this.heroes = heroes));\n  }\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  declarations: [AppComponent],\n  exports: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\nconst HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\nfunction getHeroes(): Promise&#x3C;Hero[]> {\n  return Promise.resolve(HEROES); // TODO: get hero data from the server;\n}\n\n\n</code-example>\n<p translation-result=\"on\">最好将组件及其支撑部件重新分配到独立的文件。</p><p translation-origin=\"off\">It is a better practice to redistribute the component and its\nsupporting classes into their own, dedicated files.</p>\n\n<code-tabs>\n\n  <code-pane header=\"main.ts\" path=\"styleguide/src/01-01/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane header=\"app/app.module.ts\" path=\"styleguide/src/01-01/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n\n  <code-pane header=\"app/app.component.ts\" path=\"styleguide/src/01-01/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HeroService } from './heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-app',\n  template: `\n      &#x3C;toh-heroes>&#x3C;/toh-heroes>\n    `,\n  styleUrls: ['./app.component.css'],\n  providers: [HeroService]\n})\nexport class AppComponent {}\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/01-01/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from './shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n      &#x3C;pre>{{heroes | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/pre>\n    `\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) {}\n\n  ngOnInit() {\n    this.heroService.getHeroes()\n      .then(heroes => this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/shared/hero.model.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.model.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/shared/mock-heroes.ts\" path=\"styleguide/src/01-01/app/heroes/shared/mock-heroes.ts\">\nimport { Hero } from './hero.model';\n\nexport const HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">随着应用程序的成长，本法则会变得越来越重要。</p><p translation-origin=\"off\">As the app grows, this rule becomes even more important.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"01-02\"></a>\n<h3 id=\"small-functions\" translation-result=\"on\">小函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#small-functions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"small-functions\">Small functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#small-functions\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-01-02\" translation-result=\"on\">风格 01-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-01-02\">Style 01-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>定义简单函数</p><p translation-origin=\"off\"><strong>Do</strong> define small functions</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>限制在 75 行之内。</p><p translation-origin=\"off\"><strong>Consider</strong> limiting to no more than 75 lines.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>简单函数更易于测试，特别是当它们只做一件事，只为一个目的服务时。</p><p translation-origin=\"off\"><strong>Why?</strong> Small functions are easier to test, especially when they do one thing and serve one purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>简单函数促进代码重用。</p><p translation-origin=\"off\"><strong>Why?</strong> Small functions promote reuse.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>简单函数更易于阅读。</p><p translation-origin=\"off\"><strong>Why?</strong> Small functions are easier to read.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>简单函数更易于维护。</p><p translation-origin=\"off\"><strong>Why?</strong> Small functions are easier to maintain.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>小函数可避免易在大函数中产生的隐蔽性错误，例如与外界共享变量、创建意外的闭包或与依赖之间产生意外耦合等。</p><p translation-origin=\"off\"><strong>Why?</strong> Small functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"naming\" translation-result=\"on\">命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#naming\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"naming\">Naming<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#naming\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">命名约定对可维护性和可读性非常重要。本指南为文件名和符号名推荐了一套命名约定。</p><p translation-origin=\"off\">Naming conventions are hugely important to maintainability and readability. This guide recommends naming conventions for the file name and the symbol name.</p>\n\n<a id=\"02-01\"></a>\n<h3 id=\"general-naming-guidelines\" translation-result=\"on\">总体命名原则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#general-naming-guidelines\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"general-naming-guidelines\">General Naming Guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#general-naming-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-01\" translation-result=\"on\">风格 02-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-01\">Style 02-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>所有符号使用一致的命名规则。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all symbols.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>遵循同一个模式来描述符号的特性和类型。推荐的模式为 <code>feature.type.ts</code>。</p><p translation-origin=\"off\"><strong>Do</strong> follow a pattern that describes the symbol's feature then its type. The recommended pattern is <code>feature.type.ts</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>命名约定提供了一致的方式来查找内容，让你一眼就能找到。\n项目的一致性是至关重要的。团队内的一致性也很重要。整个公司的一致性会提供惊人的效率。</p><p translation-origin=\"off\"><strong>Why?</strong> Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>命名约定帮助你更快得找到想找的代码，也更容易理解它。</p><p translation-origin=\"off\"><strong>Why?</strong> The naming conventions should simply help find desired code faster and make it easier to understand.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>目录名和文件名应该清楚的传递它们的意图。\n例如，<code>app/heroes/hero-list.component.ts</code> 包含了一个用来管理英雄列表的组件。</p><p translation-origin=\"off\"><strong>Why?</strong> Names of folders and files should clearly convey their intent. For example, <code>app/heroes/hero-list.component.ts</code> may contain a component that manages a list of heroes.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-02\"></a>\n<h3 id=\"separate-file-names-with-dots-and-dashes\" translation-result=\"on\">使用点和横杠来分隔文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#separate-file-names-with-dots-and-dashes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"separate-file-names-with-dots-and-dashes\">Separate file names with dots and dashes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#separate-file-names-with-dots-and-dashes\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-02\" translation-result=\"on\">风格 02-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-02\">Style 02-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong> 在描述性名字中，用横杠来分隔单词。</p><p translation-origin=\"off\"><strong>Do</strong> use dashes to separate words in the descriptive name.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用点来分隔描述性名字和类型。</p><p translation-origin=\"off\"><strong>Do</strong> use dots to separate the descriptive name from the type.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>遵循先描述组件特性，再描述它的类型的模式，对所有组件使用一致的类型命名规则。推荐的模式为 <code>feature.type.ts</code>。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent type names for all components following a pattern that describes the component's feature then its type. A recommended pattern is <code>feature.type.ts</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用惯用的后缀来描述类型，包括 <code>*.service</code>、<code>*.component</code>、<code>*.pipe</code>、<code>.module</code>、<code>.directive</code>。\n必要时可以创建更多类型名，但必须注意，不要创建太多。</p><p translation-origin=\"off\"><strong>Do</strong> use conventional type names including <code>.service</code>, <code>.component</code>, <code>.pipe</code>, <code>.module</code>, and <code>.directive</code>.\nInvent additional type names if you must but take care not to create too many.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>类型名字提供一致的方式来快速的识别文件中有什么。</p><p translation-origin=\"off\"><strong>Why?</strong> Type names provide a consistent way to quickly identify what is in the file.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> 类型名可以让你轻松利用编辑器或者 IDE 的模糊搜索功能找到特定文件类型。</p><p translation-origin=\"off\"><strong>Why?</strong> Type names make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> 像 <code>.service</code> 这样的没有简写过的类型名字，描述清楚，毫不含糊。\n像 <code>.srv</code>, <code>.svc</code>, 和 <code>.serv</code> 这样的简写可能令人困惑。</p><p translation-origin=\"off\"><strong>Why?</strong> Unabbreviated type names such as <code>.service</code> are descriptive and unambiguous.\nAbbreviations such as <code>.srv</code>, <code>.svc</code>, and <code>.serv</code> can be confusing.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>为自动化任务提供模式匹配。</p><p translation-origin=\"off\"><strong>Why?</strong> Type names provide pattern matching for any automated tasks.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-03\"></a>\n<h3 id=\"symbols-and-file-names\" translation-result=\"on\">符号名与文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#symbols-and-file-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"symbols-and-file-names\">Symbols and file names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#symbols-and-file-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-03\" translation-result=\"on\">风格 02-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-03\">Style 02-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为所有东西使用一致的命名约定，以它们所代表的东西命名。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all assets named after what they represent.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用大写驼峰命名法来命名类。符号名匹配它所在的文件名。</p><p translation-origin=\"off\"><strong>Do</strong> use upper camel case for class names.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在符号名后面追加约定的类型后缀（例如 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>、<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>、<code>Module</code>、<code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>、<code>Service</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> match the name of the symbol to the name of the file.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在符号名后面追加约定的类型后缀（例如 <code>.component.ts</code>、<code>.directive.ts</code>、<code>.module.ts</code>、<code>.pipe.ts</code>、<code>.service.ts</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> append the symbol name with the conventional suffix (such as <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>,\n<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, <code>Module</code>, <code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>, or <code>Service</code>) for a thing of that type.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在文件名后面追加约定的类型后缀（例如 <code>.component.ts</code>、<code>.directive.ts</code>、<code>.module.ts</code>、<code>.pipe.ts</code>、<code>.service.ts</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> give the filename the conventional suffix (such as <code>.component.ts</code>, <code>.directive.ts</code>,\n<code>.module.ts</code>, <code>.pipe.ts</code>, or <code>.service.ts</code>) for a file of that type.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>遵循一致的约定可以快速识别和引用不同类型的资产。</p><p translation-origin=\"off\"><strong>Why?</strong> Consistent conventions make it easy to quickly identify\nand reference assets of different types.</p>\n\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      符号名</p><p translation-origin=\"off\">      Symbol Name</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      文件名</p><p translation-origin=\"off\">      File Name</p>\n\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class AppComponent { }\n      </code-example>\n    </td>\n    <td>\n<p>      app.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class HeroesComponent { }\n      </code-example>\n    </td>\n    <td>\n<p>      heroes.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class HeroListComponent { }\n      </code-example>\n    </td>\n    <td>\n<p>      hero-list.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class HeroDetailComponent { }\n      </code-example>\n    </td>\n    <td>\n<p>      hero-detail.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ ... })\n        export class ValidationDirective { }\n      </code-example>\n    </td>\n    <td>\n<p>      validation.directive.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class AppModule\n      </code-example>\n    </td>\n    <td>\n<p>      app.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\n        export class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { }\n      </code-example>\n    </td>\n    <td>\n<p>      init-caps.pipe.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class UserProfileService { }\n      </code-example>\n    </td>\n    <td>\n<p>      user-profile.service.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-04\"></a>\n<h3 id=\"service-names\" translation-result=\"on\">服务名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#service-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"service-names\">Service names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#service-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-04\" translation-result=\"on\">风格 02-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-04\">Style 02-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用一致的规则命名服务，以它们的特性来命名。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all services named after their feature.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为服务的类名加上 <code>Service</code> 后缀。\n例如，获取数据或英雄列表的服务应该命名为 <code>DataService</code> 或 <code>HeroService</code>。</p><p translation-origin=\"off\"><strong>Do</strong> suffix a service class name with <code>Service</code>.\nFor example, something that gets data or heroes\nshould be called a <code>DataService</code> or a <code>HeroService</code>.</p>\n\n<p translation-result=\"on\">有些词汇显然就是服务，比如那些以“-er”后缀结尾的。比如把记日志的服务命名为 <code>Logger</code> 就比 <code>LoggerService</code> 更好些。需要在你的项目中决定这种特例是否可以接受。\n但无论如何，都要尽量保持一致。</p><p translation-origin=\"off\">A few terms are unambiguously services. They typically\nindicate agency by ending in \"-er\". You may prefer to name\na service that logs messages <code>Logger</code> rather than <code>LoggerService</code>.\nDecide if this exception is agreeable in your project.\nAs always, strive for consistency.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一致的方式来快速识别和引用服务。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides a consistent way to quickly identify and reference services.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>像 <code>Logger</code> 这样的清楚的服务名不需要后缀。</p><p translation-origin=\"off\"><strong>Why?</strong> Clear service names such as <code>Logger</code> do not require a suffix.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>像 <code>Credit</code> 这样的，服务名是名词，需要一个后缀。当不能明显分辨它是服务还是其它东西时，应该添加后缀。</p><p translation-origin=\"off\"><strong>Why?</strong> Service names such as <code>Credit</code> are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.</p>\n\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      符号名</p><p translation-origin=\"off\">      Symbol Name</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      文件名</p><p translation-origin=\"off\">      File Name</p>\n\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class HeroDataService { }\n      </code-example>\n    </td>\n    <td>\n<p>      hero-data.service.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class CreditService { }\n      </code-example>\n    </td>\n    <td>\n<p>      credit.service.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class Logger { }\n      </code-example>\n    </td>\n    <td>\n<p>      logger.service.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-05\"></a>\n<h3 id=\"bootstrapping\" translation-result=\"on\">引导<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#bootstrapping\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"bootstrapping\">Bootstrapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-05\" translation-result=\"on\">风格 02-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-05\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-05\">Style 02-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-05\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把应用的引导程序和平台相关的逻辑放到名为 <code>main.ts</code> 的文件里。</p><p translation-origin=\"off\"><strong>Do</strong> put bootstrapping and platform logic for the app in a file named <code>main.ts</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在引导逻辑中包含错误处理代码。</p><p translation-origin=\"off\"><strong>Do</strong> include error handling in the bootstrapping logic.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>把应用逻辑放在 <code>main.ts</code> 中，而应放在组件或服务里。</p><p translation-origin=\"off\"><strong>Avoid</strong> putting app logic in <code>main.ts</code>. Instead, consider placing it in a component or service.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>应用的启动逻辑遵循一致的约定。</p><p translation-origin=\"off\"><strong>Why?</strong> Follows a consistent convention for the startup logic of an app.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>这是从其它技术平台借鉴的常用约定。</p><p translation-origin=\"off\"><strong>Why?</strong> Follows a familiar convention from other technology platforms.</p>\n\n</div>\n<code-example path=\"styleguide/src/02-05/main.ts\" header=\"main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule }              from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .then(success => console.log(`Bootstrap success`))\n  .catch(err => console.error(err));\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-02\"></a>\n<h3 id=\"component-selectors\" translation-result=\"on\">组件选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-selectors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"component-selectors\">Component selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-selectors\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-02\" translation-result=\"on\">风格 05-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-02\">Style 05-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用<em>中线命名法（dashed-case）</em>或叫<em>烤串命名法（kebab-case）</em>来命名组件的元素选择器。</p><p translation-origin=\"off\"><strong>Do</strong> use <em>dashed-case</em> or <em>kebab-case</em> for naming the element selectors of components.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>让元素名和<a href=\"https://www.w3.org/TR/custom-elements/\">自定义元素</a>规范保持一致。</p><p translation-origin=\"off\"><strong>Why?</strong> Keeps the element names consistent with the specification for <a href=\"https://www.w3.org/TR/custom-elements/\">Custom Elements</a>.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" header=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'tohHeroButton',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-tabs>\n\n  <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n\n  <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-02/app/app.component.html\">\n&#x3C;toh-hero-button>&#x3C;/toh-hero-button>\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-07\"></a>\n<h3 id=\"component-custom-prefix\" translation-result=\"on\">为组件添加自定义前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-custom-prefix\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"component-custom-prefix\">Component custom prefix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-07\" translation-result=\"on\">风格 02-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-07\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-07\">Style 02-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-07\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用带连字符的小写元素选择器值（例如 <code>admin-users</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> use a hyphenated, lowercase element selector value; for example, <code>admin-users</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为组件选择器添加自定义前缀。\n例如，<code>toh</code> 前缀表示 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes（英雄指南），而前缀 `admin 表示管理特性区。</p><p translation-origin=\"off\"><strong>Do</strong> use a custom prefix for a component selector.\nFor example, the prefix <code>toh</code> represents <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes and the prefix <code>admin</code> represents an admin feature area.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用前缀来识别特性区或者应用程序本身。</p><p translation-origin=\"off\"><strong>Do</strong> use a prefix that identifies the feature area or the app itself.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>防止与其它应用中的组件和原生 HTML 元素发生命名冲突。</p><p translation-origin=\"off\"><strong>Why?</strong> Prevents element name collisions with components in other apps and with native HTML elements.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>更容易在其它应用中推广和共享组件。</p><p translation-origin=\"off\"><strong>Why?</strong> Makes it easier to promote and share the component in other apps.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>组件在 DOM 中更容易被区分出来。</p><p translation-origin=\"off\"><strong>Why?</strong> Components are easy to identify in the DOM.</p>\n\n</div>\n<code-example path=\"styleguide/src/02-07/app/heroes/hero.component.avoid.ts\" region=\"example\" header=\"app/heroes/hero.component.ts\">\n/* avoid */\n\n// HeroComponent is in the Tour of Heroes feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-07/app/users/users.component.avoid.ts\" region=\"example\" header=\"app/users/users.component.ts\">\n/* avoid */\n\n// UsersComponent is in an Admin feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-07/app/heroes/hero.component.ts\" region=\"example\" header=\"app/heroes/hero.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-07/app/users/users.component.ts\" region=\"example\" header=\"app/users/users.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'admin-users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-06\"></a>\n<h3 id=\"directive-selectors\" translation-result=\"on\">指令选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-selectors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"directive-selectors\">Directive selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-selectors\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-06\" translation-result=\"on\">风格 02-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-06\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-06\">Style 02-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-06\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用小驼峰形式命名指令的选择器。</p><p translation-origin=\"off\"><strong>Do</strong> Use lower camel case for naming the selectors of directives.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>可以让指令中的属性名与视图中绑定的属性名保持一致。</p><p translation-origin=\"off\"><strong>Why?</strong> Keeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong> Angular 的 HTML 解析器是大小写敏感的，可以识别小驼峰形式。</p><p translation-origin=\"off\"><strong>Why?</strong> The Angular HTML parser is case sensitive and recognizes lower camel case.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-08\"></a>\n<h3 id=\"directive-custom-prefix\" translation-result=\"on\">为指令添加自定义前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-custom-prefix\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"directive-custom-prefix\">Directive custom prefix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-08\" translation-result=\"on\">风格 02-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-08\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-08\">Style 02-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-08\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为指令的选择器添加自定义前缀（例如前缀 <code>toh</code> 来自 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes）。</p><p translation-origin=\"off\"><strong>Do</strong> use a custom prefix for the selector of directives (e.g, the prefix <code>toh</code> from <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes).</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>用小驼峰形式拼写非元素选择器，除非该选择器用于匹配原生 HTML 属性。</p><p translation-origin=\"off\"><strong>Do</strong> spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>防止名字冲突。</p><p translation-origin=\"off\"><strong>Why?</strong> Prevents name collisions.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>指令更加容易被识别。</p><p translation-origin=\"off\"><strong>Why?</strong> Directives are easily identified.</p>\n\n</div>\n<code-example path=\"styleguide/src/02-08/app/shared/validate.directive.avoid.ts\" region=\"example\" header=\"app/shared/validate.directive.ts\">\n/* avoid */\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[validate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-08/app/shared/validate.directive.ts\" region=\"example\" header=\"app/shared/validate.directive.ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-09\"></a>\n<h3 id=\"pipe-names\" translation-result=\"on\">管道名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#pipe-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"pipe-names\">Pipe names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#pipe-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-09\" translation-result=\"on\">风格 02-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-09\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-09\">Style 02-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-09\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为所有管道使用一致的命名约定，用它们的特性来命名。\n管道类名应该使用 <a href=\"guide/glossary#case-types\">UpperCamelCase</a>（类名的通用约定），而相应的 <code>name</code> 字符串应该使用 <em>lowerCamelCase</em>。\n<code>name</code> 字符串中不应该使用中线（“中线格式”或“烤串格式”）。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all pipes, named after their feature.\nThe pipe class name should use <a href=\"guide/glossary#case-types\">UpperCamelCase</a>\n(the general convention for class names),\nand the corresponding <code>name</code> string should use <em>lowerCamelCase</em>.\nThe <code>name</code> string cannot use hyphens (\"dash-case\" or \"kebab-case\").</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一致的方式快速识别和引用管道。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides a consistent way to quickly identify and reference pipes.</p>\n\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      符号名</p><p translation-origin=\"off\">      Symbol Name</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      文件名</p><p translation-origin=\"off\">      File Name</p>\n\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'ellipsis' })\n        export class EllipsisPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { }\n      </code-example>\n    </td>\n    <td>\n<p>      ellipsis.pipe.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\n        export class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { }\n      </code-example>\n    </td>\n    <td>\n<p>      init-caps.pipe.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-10\"></a>\n<h3 id=\"unit-test-file-names\" translation-result=\"on\">单元测试文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#unit-test-file-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"unit-test-file-names\">Unit test file names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#unit-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-10\" translation-result=\"on\">风格 02-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-10\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-10\">Style 02-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-10\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>测试规格文件名与被测试组件文件名相同。</p><p translation-origin=\"off\"><strong>Do</strong> name test specification files the same as the component they test.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>测试规格文件名添加 <code>.spec</code> 后缀。</p><p translation-origin=\"off\"><strong>Do</strong> name test specification files with a suffix of <code>.spec</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一致的方式来快速识别测试。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides a consistent way to quickly identify tests.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一个与 <a href=\"http://karma-runner.github.io/\">karma</a> 或者其它测试运行器相配的命名模式。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides pattern matching for <a href=\"http://karma-runner.github.io/\">karma</a> or other test runners.</p>\n\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      测试类型</p><p translation-origin=\"off\">      Test Type</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      文件名</p><p translation-origin=\"off\">      File Names</p>\n\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p translation-result=\"on\">      组件</p><p translation-origin=\"off\">      Components</p>\n\n    </td>\n    <td>\n<p>      heroes.component.spec.ts</p>\n<p>      hero-list.component.spec.ts</p>\n<p>      hero-detail.component.spec.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p translation-result=\"on\">      服务</p><p translation-origin=\"off\">      Services</p>\n\n    </td>\n    <td>\n<p>      logger.service.spec.ts</p>\n<p>      hero.service.spec.ts</p>\n<p>      filter-text.service.spec.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p translation-result=\"on\">      管道</p><p translation-origin=\"off\">      Pipes</p>\n\n    </td>\n    <td>\n<p>      ellipsis.pipe.spec.ts</p>\n<p>      init-caps.pipe.spec.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-11\"></a>\n<h3 id=\"end-to-end-e2e-test-file-names\" translation-result=\"on\"><em>端到端</em>（E2E）测试的文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#end-to-end-e2e-test-file-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"end-to-end-e2e-test-file-names\"><em>End-to-End</em> (E2E) test file names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#end-to-end-e2e-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-11\" translation-result=\"on\">风格 02-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-11\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-11\">Style 02-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-11\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>端到端测试规格文件和它们所测试的特性同名，添加 <code>.e2e-spec</code> 后缀。</p><p translation-origin=\"off\"><strong>Do</strong> name end-to-end test specification files after the feature they test with a suffix of <code>.e2e-spec</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一致的方式快速识别端到端测试文件。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides a consistent way to quickly identify end-to-end tests.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一个与测试运行器和构建自动化匹配的模式。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides pattern matching for test runners and build automation.</p>\n\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      测试类型</p><p translation-origin=\"off\">      Test Type</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      文件名</p><p translation-origin=\"off\">      File Names</p>\n\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p translation-result=\"on\">      端到端测试</p><p translation-origin=\"off\">      End-to-End Tests</p>\n\n    </td>\n    <td>\n<p>      app.e2e-spec.ts</p>\n<p>      heroes.e2e-spec.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"02-12\"></a>\n<h3 id=\"angular-ngmodule-names\" translation-result=\"on\">Angular <em>NgModule</em> 命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-ngmodule-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"angular-ngmodule-names\">Angular <em>NgModule</em> names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-ngmodule-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-12\" translation-result=\"on\">风格 02-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-12\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-02-12\">Style 02-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-12\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为符号名添加 <code>Module</code> 后缀</p><p translation-origin=\"off\"><strong>Do</strong> append the symbol name with the suffix <code>Module</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为文件名添加 <code>.module.ts</code> 扩展名。</p><p translation-origin=\"off\"><strong>Do</strong> give the file name the <code>.module.ts</code> extension.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>用特性名和所在目录命名模块。</p><p translation-origin=\"off\"><strong>Do</strong> name the module after the feature and folder it resides in.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>提供一致的方式来快速标识和引用模块。</p><p translation-origin=\"off\"><strong>Why?</strong> Provides a consistent way to quickly identify and reference modules.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>大驼峰命名法是一种命名约定，用来标识可用构造函数实例化的对象。</p><p translation-origin=\"off\"><strong>Why?</strong> Upper camel case is conventional for identifying objects that can be instantiated using a constructor.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>很容易就能看出这个模块是同名特性的根模块。</p><p translation-origin=\"off\"><strong>Why?</strong> Easily identifies the module as the root of the same named feature.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为 <em>RoutingModule</em> 类名添加 <code>RoutingModule</code> 后缀。</p><p translation-origin=\"off\"><strong>Do</strong> suffix a <em>RoutingModule</em> class name with <code>RoutingModule</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为 <em>RoutingModule</em> 的文件名添加 <code>-routing.module.ts</code> 后缀。</p><p translation-origin=\"off\"><strong>Do</strong> end the filename of a <em>RoutingModule</em> with <code>-routing.module.ts</code>.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong><code>RoutingModule</code> 是一种专门用来配置 Angular 路由器的模块。\n“类名和文件名保持一致”的约定使这些模块易于发现和验证。</p><p translation-origin=\"off\"><strong>Why?</strong> A <code>RoutingModule</code> is a module dedicated exclusively to configuring the Angular router.\nA consistent class and file name convention make these modules easy to spot and verify.</p>\n\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      符号名</p><p translation-origin=\"off\">      Symbol Name</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      文件名</p><p translation-origin=\"off\">      File Name</p>\n\n    </th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class AppModule { }\n      </code-example>\n    </td>\n    <td>\n<p>      app.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class HeroesModule { }\n      </code-example>\n    </td>\n    <td>\n<p>      heroes.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class VillainsModule { }\n      </code-example>\n    </td>\n    <td>\n<p>      villains.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class AppRoutingModule { }\n      </code-example>\n    </td>\n    <td>\n<p>      app-routing.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class HeroesRoutingModule { }\n      </code-example>\n    </td>\n    <td>\n<p>      heroes-routing.module.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"application-structure-and-ngmodules\" translation-result=\"on\">应用程序结构与 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#application-structure-and-ngmodules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"application-structure-and-ngmodules\">Application structure and NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#application-structure-and-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">准备一个近期实施方案和一个长期的愿景。从零开始，但要考虑应用程序接下来的路往哪儿走。</p><p translation-origin=\"off\">Have a near-term view of implementation and a long-term vision. Start small but keep in mind where the app is heading down the road.</p>\n\n<p translation-result=\"on\">所有应用程序的源代码都放到名叫 <code>src</code> 的目录里。\n所有特性区都在自己的文件夹中，带有它们自己的 NgModule。</p><p translation-origin=\"off\">All of the app's code goes in a folder named <code>src</code>.\nAll feature areas are in their own folder, with their own NgModule.</p>\n\n<p translation-result=\"on\">所有内容都遵循每个文件一个特性的原则。每个组件、服务和管道都在自己的文件里。\n所有第三方程序包保存到其它目录里，而不是 <code>src</code> 目录。\n你不会修改它们，所以不希望它们弄乱你的应用程序。\n使用本指南介绍的文件命名约定。</p><p translation-origin=\"off\">All content is one asset per file. Each component, service, and pipe is in its own file.\nAll third party vendor scripts are stored in another folder and not in the <code>src</code> folder.\nYou didn't write them and you don't want them cluttering <code>src</code>.\nUse the naming conventions for files in this guide.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-01\"></a>\n<h3 id=\"lift\"><em>LIFT</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lift\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-01\" translation-result=\"on\">风格 04-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-01\">Style 04-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>组织应用的结构，力求：快速定位 (<code>L</code>ocate) 代码、一眼识别 (<code>I</code>dentify) 代码、 尽量保持扁平结构 (<code>F</code>lattest) 和尝试 (<code>T</code>ry) 遵循 DRY (Do Not Repeat Yourself, 不重复自己) 原则。</p><p translation-origin=\"off\"><strong>Do</strong> structure the app such that you can <strong>L</strong>ocate code quickly,\n<strong>I</strong>dentify the code at a glance,\nkeep the <strong>F</strong>lattest structure you can, and\n<strong>T</strong>ry to be DRY.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>四项基本原则定义文件结构，上面的原则是按重要顺序排列的。</p><p translation-origin=\"off\"><strong>Do</strong> define the structure to follow these four basic guidelines, listed in order of importance.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>LIFT 提供了一致的结构，它具有扩展性强、模块化的特性。因为容易快速锁定代码，提高了开发者的效率。\n另外，检查应用结构是否合理的方法是问问自己：我能快速打开与此特性有关的所有文件并开始工作吗？</p><p translation-origin=\"off\"><strong>Why?</strong> LIFT provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly.\nTo confirm your intuition about a particular structure, ask:\n<em>can I quickly open and start work in all of the related files for this feature</em>?</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-02\"></a>\n<h3 id=\"locate\" translation-result=\"on\">定位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#locate\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"locate\">Locate<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#locate\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-02\" translation-result=\"on\">风格 04-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-02\">Style 04-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>直观、简单和快速地定位代码。</p><p translation-origin=\"off\"><strong>Do</strong> make locating code intuitive, simple, and fast.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>\n要想高效的工作，就必须能迅速找到文件，特别是当不知道（或不记得）文件<em>名</em>时。\n把相关的文件一起放在一个直观的位置可以节省时间。\n富有描述性的目录结构会让你和后面的维护者眼前一亮。</p><p translation-origin=\"off\"><strong>Why?</strong> To work efficiently you must be able to find files quickly,\nespecially when you do not know (or do not remember) the file <em>names</em>.\nKeeping related files near each other in an intuitive location saves time.\nA descriptive folder structure makes a world of difference to you and the people who come after you.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-03\"></a>\n<h3 id=\"identify\" translation-result=\"on\">识别<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#identify\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"identify\">Identify<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#identify\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-03\" translation-result=\"on\">风格 04-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-03\">Style 04-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>命名文件到这个程度：看到名字立刻知道它包含了什么，代表了什么。</p><p translation-origin=\"off\"><strong>Do</strong> name the file such that you instantly know what it contains and represents.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>文件名要具有说明性，确保文件中只包含一个组件。</p><p translation-origin=\"off\"><strong>Do</strong> be descriptive with file names and keep the contents of the file to exactly one component.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>创建包含多个组件、服务或者混合体的文件。</p><p translation-origin=\"off\"><strong>Avoid</strong> files with multiple components, multiple services, or a mixture.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>花费更少的时间来查找和琢磨代码，就会变得更有效率。\n较长的文件名远胜于<em>较短却容易混淆的</em>缩写名。</p><p translation-origin=\"off\"><strong>Why?</strong> Spend less time hunting and pecking for code, and become more efficient.\nLonger file names are far better than <em>short-but-obscure</em> abbreviated names.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">当你有一组小型、紧密相关的特性时，违反<em>一物一文件</em>的规则可能会更好，\n这种情况下单一文件可能会比多个文件更容易发现和理解。注意这个例外。</p><p translation-origin=\"off\">It may be advantageous to deviate from the <em>one-thing-per-file</em> rule when\nyou have a set of small, closely-related features that are better discovered and understood\nin a single file than as multiple files. Be wary of this loophole.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-04\"></a>\n<h3 id=\"flat\" translation-result=\"on\">扁平<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#flat\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"flat\">Flat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#flat\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-04\" translation-result=\"on\">风格 04-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-04\">Style 04-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>尽可能保持扁平的目录结构。</p><p translation-origin=\"off\"><strong>Do</strong> keep a flat folder structure as long as possible.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>当同一目录下达到 7 个或更多个文件时创建子目录。</p><p translation-origin=\"off\"><strong>Consider</strong> creating sub-folders when a folder reaches seven or more files.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>配置 IDE，以隐藏无关的文件，例如生成出来的 <code>.js</code> 文件和 <code>.js.map</code> 文件等。</p><p translation-origin=\"off\"><strong>Consider</strong> configuring the IDE to hide distracting, irrelevant files such as generated <code>.js</code> and <code>.js.map</code> files.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>没人想要在超过七层的目录中查找文件。扁平的结构有利于搜索。</p><p translation-origin=\"off\"><strong>Why?</strong> No one wants to search for a file through seven levels of folders.\nA flat structure is easy to scan.</p>\n\n<p translation-result=\"on\">另一方面，<a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\" target=\"_blank\">心理学家们相信</a>，\n当关注的事物超过 9 个时，人类就会开始感到吃力。\n所以，当一个文件夹中的文件有 10 个或更多个文件时，可能就是创建子目录的时候了。</p><p translation-origin=\"off\">On the other hand,\n<a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">psychologists believe</a>\nthat humans start to struggle when the number of adjacent interesting things exceeds nine.\nSo when a folder has ten or more files, it may be time to create subfolders.</p>\n\n<p translation-result=\"on\">还是根据你自己的舒适度而定吧。\n除非创建新文件夹能有显著的价值，否则尽量使用扁平结构。</p><p translation-origin=\"off\">Base your decision on your comfort level.\nUse a flatter structure until there is an obvious value to creating a new folder.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-05\"></a>\n<h3 id=\"t-dry-try-to-be-dry\" translation-result=\"on\"><em>T-DRY</em>（尽量不重复自己）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#t-dry-try-to-be-dry\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"t-dry-try-to-be-dry\"><em>T-DRY</em> (Try to be <em>DRY</em>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#t-dry-try-to-be-dry\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-05\" translation-result=\"on\">风格 04-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-05\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-05\">Style 04-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-05\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong> DRY（Don't Repeat Yourself，不重复自己）。</p><p translation-origin=\"off\"><strong>Do</strong> be DRY (Don't Repeat Yourself).</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>过度 DRY，以致牺牲了阅读性。</p><p translation-origin=\"off\"><strong>Avoid</strong> being so DRY that you sacrifice readability.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>虽然 DRY 很重要，但如果要以牺牲 LIFT 的其它原则为代价，那就不值得了。\n这也就是为什么它被称为 <em>T-DRY</em>。\n例如，把组件命名为 <code>hero-view.component.html</code> 是多余的，因为带有 <code>.html</code> 扩展名的文件显然就是一个视图 (view)。\n但如果它不那么显著，或不符合常规，就把它写出来。</p><p translation-origin=\"off\"><strong>Why?</strong> Being DRY is important, but not crucial if it sacrifices the other elements of LIFT.\nThat's why it's called <em>T-DRY</em>.\nFor example, it's redundant to name a template <code>hero-view.component.html</code> because\nwith the <code>.html</code> extension, it is obviously a view.\nBut if something is not obvious or departs from a convention, then spell it out.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-06\"></a>\n<h3 id=\"overall-structural-guidelines\" translation-result=\"on\">总体结构的指导原则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#overall-structural-guidelines\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"overall-structural-guidelines\">Overall structural guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#overall-structural-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-06\" translation-result=\"on\">风格 04-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-06\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-06\">Style 04-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-06\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>从零开始，但要考虑应用程序接下来的路往哪儿走。</p><p translation-origin=\"off\"><strong>Do</strong> start small but keep in mind where the app is heading down the road.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>有一个近期实施方案和一个长期的愿景。</p><p translation-origin=\"off\"><strong>Do</strong> have a near term view of implementation and a long term vision.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把所有源代码都放到名为 <code>src</code> 的目录里。</p><p translation-origin=\"off\"><strong>Do</strong> put all of the app's code in a folder named <code>src</code>.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>坚持</strong>如果组件具有多个伴生文件 (<code>.ts</code>、<code>.html</code>、<code>.css</code> 和 <code>.spec</code>)，就为它创建一个文件夹。</p><p translation-origin=\"off\"><strong>Consider</strong> creating a folder for a component when it has multiple accompanying files (<code>.ts</code>, <code>.html</code>, <code>.css</code> and <code>.spec</code>).</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> 在早期阶段能够帮助保持应用的结构小巧且易于维护，这样当应用增长时就容易进化了。</p><p translation-origin=\"off\"><strong>Why?</strong> Helps keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何?</strong> 组件通常有四个文件 (<code>*.html</code>、 <code>*.css</code>、 <code>*.ts</code> 和 <code>*.spec.ts</code>)，它们很容易把一个目录弄乱。</p><p translation-origin=\"off\"><strong>Why?</strong> Components often have four files (e.g. <code>*.html</code>, <code>*.css</code>, <code>*.ts</code>, and <code>*.spec.ts</code>) and can clutter a folder quickly.</p>\n\n</div>\n<a id=\"file-tree\"></a>\n<p translation-result=\"on\">下面是符合规范的目录和文件结构</p><p translation-origin=\"off\">Here is a compliant folder and file structure:</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    &#x3C;project root></p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n<p>      src</p>\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n<p>        app</p>\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n<p>          core</p>\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            exception.service.ts|spec.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            user-profile.service.ts|spec.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n<p>          heroes</p>\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            hero</p>\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n<p>              hero.component.ts|html|css|spec.ts</p>\n            </div>\n          </div>\n          <div class=\"file\">\n<p>            hero-list</p>\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n<p>              hero-list.component.ts|html|css|spec.ts</p>\n            </div>\n          </div>\n          <div class=\"file\">\n<p>            shared</p>\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n<p>              hero-button.component.ts|html|css|spec.ts</p>\n            </div>\n            <div class=\"file\">\n<p>              hero.model.ts</p>\n            </div>\n            <div class=\"file\">\n<p>              hero.service.ts|spec.ts</p>\n            </div>\n          </div>\n          <div class=\"file\">\n<p>            heroes.component.ts|html|css|spec.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            heroes.module.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            heroes-routing.module.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n<p>          shared</p>\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            shared.module.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            init-caps.pipe.ts|spec.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            filter-text.component.ts|spec.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            filter-text.service.ts|spec.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n<p>          villains</p>\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n<p>            villain</p>\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n<p>              ...</p>\n            </div>\n          </div>\n          <div class=\"file\">\n<p>            villain-list</p>\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n<p>              ...</p>\n            </div>\n          </div>\n          <div class=\"file\">\n<p>            shared</p>\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n<p>              ...</p>\n            </div>\n          </div>\n          <div class=\"file\">\n<p>            villains.component.ts|html|css|spec.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            villains.module.ts</p>\n          </div>\n          <div class=\"file\">\n<p>            villains-routing.module.ts</p>\n          </div>\n        </div>\n        <div class=\"file\">\n<p>          app.component.ts|html|css|spec.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          app.module.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          app-routing.module.ts</p>\n        </div>\n      </div>\n      <div class=\"file\">\n<p>        main.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        index.html</p>\n      </div>\n      <div class=\"file\">\n<p>        ...</p>\n      </div>\n    </div>\n    <div class=\"file\">\n<p>      node_modules/...</p>\n    </div>\n    <div class=\"file\">\n<p>      ...</p>\n    </div>\n  </div>\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">把组件放在专用目录中的方式广受欢迎，对于小型应用，还可以保持组件扁平化（而不是放在专用目录中）。\n这样会把四个文件放在现有目录中，也会减少目录的嵌套。无论你如何选择，请保持一致。</p><p translation-origin=\"off\">While components in dedicated folders are widely preferred,\nanother option for small apps is to keep components flat (not in a dedicated folder).\nThis adds up to four files to the existing folder, but also reduces the folder nesting.\nWhatever you choose, be consistent.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-07\"></a>\n<h3 id=\"folders-by-feature-structure\" translation-result=\"on\">按特性组织的目录结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#folders-by-feature-structure\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"folders-by-feature-structure\"><em>Folders-by-feature</em> structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#folders-by-feature-structure\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-07\" translation-result=\"on\">风格 04-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-07\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-07\">Style 04-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-07\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>根据特性区命名目录。</p><p translation-origin=\"off\"><strong>Do</strong> create folders named for the feature area they represent.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>开发人员可以快速定位代码，扫一眼就能知道每个文件代表什么，目录尽可能保持扁平，既没有重复也没有多余的名字。</p><p translation-origin=\"off\"><strong>Why?</strong> A developer can locate the code and identify what each file represents\nat a glance. The structure is as flat as it can be and there are no repetitive or redundant names.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> LIFT 原则中包含了所有这些。</p><p translation-origin=\"off\"><strong>Why?</strong> The LIFT guidelines are all covered.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>遵循 LIFT 原则精心组织内容，避免应用变得杂乱无章。</p><p translation-origin=\"off\"><strong>Why?</strong> Helps reduce the app from becoming cluttered through organizing the\ncontent and keeping them aligned with the LIFT guidelines.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>当有很多文件时（例如 10 个以上），在专用目录型结构中定位它们会比在扁平结构中更容易。</p><p translation-origin=\"off\"><strong>Why?</strong> When there are a lot of files, for example 10+,\nlocating them is easier with a consistent folder structure\nand more difficult in a flat structure.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为每个特性区创建一个 NgModule。</p><p translation-origin=\"off\"><strong>Do</strong> create an NgModule for each feature area.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> NgModule 使惰性加载可路由的特性变得更容易。</p><p translation-origin=\"off\"><strong>Why?</strong> NgModules make it easy to lazy load routable features.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong> NgModule 隔离、测试和复用特性更容易。</p><p translation-origin=\"off\"><strong>Why?</strong> NgModules make it easier to isolate, test, and reuse features.</p>\n\n</div>\n<div>\n<p translation-result=\"on\">  欲知详情，参见<a href=\"guide/styleguide#file-tree\">目录和文件结构的范例</a></p><p translation-origin=\"off\">  For more information, refer to <a href=\"guide/styleguide#file-tree\">this folder and file structure example.</a></p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-08\"></a>\n<h3 id=\"app-root-module\" translation-result=\"on\">应用的<em>根模块</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#app-root-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"app-root-module\">App <em>root module</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#app-root-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-08\" translation-result=\"on\">风格 04-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-08\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-08\">Style 04-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-08\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在应用的根目录创建一个 NgModule（例如 <code>/src/app</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> create an NgModule in the app's root folder,\nfor example, in <code>/src/app</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>每个应用都至少需要一个根 NgModule。</p><p translation-origin=\"off\"><strong>Why?</strong> Every app requires at least one root NgModule.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>把根模块命名为 <code>app.module.ts</code>。</p><p translation-origin=\"off\"><strong>Consider</strong> naming the root module <code>app.module.ts</code>.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>能让定位和识别根模块变得更容易。</p><p translation-origin=\"off\"><strong>Why?</strong> Makes it easier to locate and identify the root module.</p>\n\n</div>\n<code-example path=\"styleguide/src/04-08/app/app.module.ts\" region=\"example\" header=\"app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }    from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  entryComponents: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-09\"></a>\n<h3 id=\"feature-modules\" translation-result=\"on\">特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#feature-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"feature-modules\">Feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-09\" translation-result=\"on\">风格 04-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-09\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-09\">Style 04-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-09\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>为应用中每个明显的特性创建一个 NgModule。</p><p translation-origin=\"off\"><strong>Do</strong> create an NgModule for all distinct features in an application;\nfor example, a <code>Heroes</code> feature.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把特性模块放在与特性区同名的目录中（例如 <code>app/heroes</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> place the feature module in the same named folder as the feature area;\nfor example, in <code>app/heroes</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>特性模块的文件名应该能反映出特性区的名字和目录（例如 <code>app/heroes/heroes.module.ts</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> name the feature module file reflecting the name of the feature area\nand folder; for example, <code>app/heroes/heroes.module.ts</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>特性模块的符号名应该能反映出特性区、目录和文件名（例如在 <code>app/heroes/heroes.module.ts</code> 中定义 <code>HeroesModule</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> name the feature module symbol reflecting the name of the feature\narea, folder, and file; for example, <code>app/heroes/heroes.module.ts</code> defines <code>HeroesModule</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>特性模块可以对其它模块暴露或隐藏自己的实现。</p><p translation-origin=\"off\"><strong>Why?</strong> A feature module can expose or hide its implementation from other modules.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>特性模块标记出组成该特性分区的相关组件集合。</p><p translation-origin=\"off\"><strong>Why?</strong> A feature module identifies distinct sets of related components that comprise the feature area.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>方便路由到特性模块 —— 无论是用主动加载还是惰性加载的方式。</p><p translation-origin=\"off\"><strong>Why?</strong> A feature module can easily be routed to both eagerly and lazily.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>特性模块在特定的功能和其它应用特性之间定义了清晰的边界。</p><p translation-origin=\"off\"><strong>Why?</strong> A feature module defines clear boundaries between specific functionality and other application features.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>特性模块帮助澄清开发职责，以便于把这些职责指派给不同的项目组。</p><p translation-origin=\"off\"><strong>Why?</strong> A feature module helps clarify and make it easier to assign development responsibilities to different teams.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>特性模块易于隔离，以便测试。</p><p translation-origin=\"off\"><strong>Why?</strong> A feature module can easily be isolated for testing.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-10\"></a>\n<h3 id=\"shared-feature-module\" translation-result=\"on\">共享特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#shared-feature-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"shared-feature-module\">Shared feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#shared-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-10\" translation-result=\"on\">风格 04-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-10\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-10\">Style 04-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-10\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在 <code>shared</code> 目录中创建名叫 <code>SharedModule</code> 的特性模块（例如在 <code>app/shared/shared.module.ts</code> 中定义 <code>SharedModule</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> create a feature module named <code>SharedModule</code> in a <code>shared</code> folder;\nfor example, <code>app/shared/shared.module.ts</code> defines <code>SharedModule</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在共享模块中声明那些可能被特性模块引用的可复用组件、指令和管道。</p><p translation-origin=\"off\"><strong>Do</strong> declare components, directives, and pipes in a shared module when those\nitems will be re-used and referenced by the components declared in other feature modules.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>把可能在整个应用中到处引用的模块命名为 SharedModule</p><p translation-origin=\"off\"><strong>Consider</strong> using the name SharedModule when the contents of a shared\nmodule are referenced across the entire application.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>考虑</strong> <em>不要</em>在共享模块中提供服务。服务通常是单例的，应该在整个应用或一个特定的特性模块中只有一份。\n不过也有例外，比如，在下面的范例代码中，注意 <code>SharedModule</code> 提供了 <code>FilterTextService</code>。这里可以这么做，因为该服务是无状态的，也就是说，该服务的消费者不会受到这些新实例的影响。</p><p translation-origin=\"off\"><strong>Consider</strong> <em>not</em> providing services in shared modules. Services are usually\nsingletons that are provided once for the entire application or\nin a particular feature module. There are exceptions, however. For example, in the sample code that follows, notice that the <code>SharedModule</code> provides <code>FilterTextService</code>. This is acceptable here because the service is stateless;that is, the consumers of the service aren't impacted by new instances.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在 <code>SharedModule</code> 中导入所有模块都需要的资产（例如 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 和 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>）。</p><p translation-origin=\"off\"><strong>Do</strong> import all modules required by the assets in the <code>SharedModule</code>;\nfor example, <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> <code>SharedModule</code> 中包含的组件、指令和管道可能需要来自其它公共模块的特性（例如来自 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中的 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令）。</p><p translation-origin=\"off\"><strong>Why?</strong> <code>SharedModule</code> will contain components, directives and pipes\nthat may need features from another common module; for example,\n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> in <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在 <code>SharedModule</code> 中声明所有组件、指令和管道。</p><p translation-origin=\"off\"><strong>Do</strong> declare all components, directives, and pipes in the <code>SharedModule</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>从 <code>SharedModule</code> 中导出其它特性模块所需的全部符号。</p><p translation-origin=\"off\"><strong>Do</strong> export all symbols from the <code>SharedModule</code> that other feature modules need to use.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> <code>SharedModule</code> 的存在，能让常用的组件、指令和管道在很多其它模块的组件模板中都自动可用。</p><p translation-origin=\"off\"><strong>Why?</strong> <code>SharedModule</code> exists to make commonly used components, directives and pipes available for use in the templates of components in many other modules.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>在 <code>SharedModule</code> 中指定应用级的单例服务提供者。如果是刻意要得到多个服务单例也行，不过还是要小心。</p><p translation-origin=\"off\"><strong>Avoid</strong> specifying app-wide singleton providers in a <code>SharedModule</code>. Intentional singletons are OK. Take care.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>惰性加载的特性模块如果导入了这个共享模块，会创建一份自己的服务副本，这可能会导致意料之外的后果。</p><p translation-origin=\"off\"><strong>Why?</strong> A lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesirable results.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>对于单例服务，你不希望每个模块都有自己的实例。\n而如果 <code>SharedModule</code> 提供了一个服务，那就有可能发生这种情况。</p><p translation-origin=\"off\"><strong>Why?</strong> You don't want each module to have its own separate instance of singleton services.\nYet there is a real danger of that happening if the <code>SharedModule</code> provides a service.</p>\n\n</div>\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    src</p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n<p>      app</p>\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n<p>        shared</p>\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n<p>          shared.module.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          init-caps.pipe.ts|spec.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          filter-text.component.ts|spec.ts</p>\n        </div>\n        <div class=\"file\">\n<p>          filter-text.service.ts|spec.ts</p>\n        </div>\n      </div>\n      <div class=\"file\">\n<p>        app.component.ts|html|css|spec.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        app.module.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        app-routing.module.ts</p>\n      </div>\n    </div>\n    <div class=\"file\">\n<p>      main.ts</p>\n    </div>\n    <div class=\"file\">\n<p>      index.html</p>\n    </div>\n  </div>\n  <div class=\"file\">\n<p>    ...</p>\n  </div>\n</div>\n<code-tabs>\n\n  <code-pane header=\"app/shared/shared.module.ts\" path=\"styleguide/src/04-10/app/shared/shared.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }  from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { FilterTextComponent } from './filter-text/filter-text.component';\nimport { FilterTextService }   from './filter-text/filter-text.service';\nimport { InitCapsPipe }        from './init-caps.pipe';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  declarations: [\n    FilterTextComponent,\n    InitCapsPipe\n  ],\n  providers: [FilterTextService],\n  exports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    FilterTextComponent,\n    InitCapsPipe\n  ]\n})\nexport class SharedModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"app/shared/init-caps.pipe.ts\" path=\"styleguide/src/04-10/app/shared/init-caps.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform = (value: string) => value;\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/shared/filter-text/filter-text.component.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-filter-text',\n  template: '&#x3C;input type=\"text\" id=\"filterText\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"filter\" (keyup)=\"filterChanged($event)\" />'\n})\nexport class FilterTextComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() changed: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>;\n\n  filter: string;\n\n  constructor() {\n    this.changed = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n  }\n\n  clear() {\n    this.filter = '';\n  }\n\n  filterChanged(event: any) {\n    event.preventDefault();\n    console.log(`Filter Changed: ${this.filter}`);\n    this.changed.emit(this.filter);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/shared/filter-text/filter-text.service.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class FilterTextService {\n  constructor() {\n    console.log('Created an instance of FilterTextService');\n  }\n\n  filter(data: string, props: Array&#x3C;string>, originalList: Array&#x3C;any>) {\n    let filteredList: any[];\n    if (data &#x26;&#x26; props &#x26;&#x26; originalList) {\n      data = data.toLowerCase();\n      let filtered = originalList.filter(item => {\n        let match = false;\n        for (let prop of props) {\n          if (item[prop].toString().toLowerCase().indexOf(data) > -1) {\n            match = true;\n            break;\n          }\n        };\n        return match;\n      });\n      filteredList = filtered;\n    } else {\n      filteredList = originalList;\n    }\n    return filteredList;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/04-10/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { FilterTextService } from '../shared/filter-text/filter-text.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html'\n})\nexport class HeroesComponent {\n\n  heroes = [\n    { id: 1, name: 'Windstorm' },\n    { id: 2, name: 'Bombasto' },\n    { id: 3, name: 'Magneta' },\n    { id: 4, name: 'Tornado' }\n  ];\n\n  filteredHeroes = this.heroes;\n\n  constructor(private filterService: FilterTextService) { }\n\n  filterChanged(searchText: string) {\n    this.filteredHeroes = this.filterService.filter(searchText, ['id', 'name'], this.heroes);\n  }\n}\n\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/04-10/app/heroes/heroes.component.html\">\n&#x3C;div>This is heroes component&#x3C;/div>\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of filteredHeroes\">\n    {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n&#x3C;toh-filter-text (changed)=\"filterChanged($event)\">&#x3C;/toh-filter-text>\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-11\"></a>\n<h3 id=\"lazy-loaded-folders\" translation-result=\"on\">惰性加载文件夹<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"lazy-loaded-folders\">Lazy Loaded folders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-11\" translation-result=\"on\">风格 04-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-11\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-11\">Style 04-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-11\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">某些边界清晰的应用特性或工作流可以做成<em>惰性加载</em>或<em>按需加载</em>的，而不用总是随着应用启动。</p><p translation-origin=\"off\">A distinct application feature or workflow may be <em>lazy loaded</em> or <em>loaded on demand</em> rather than when the application starts.</p>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把惰性加载特性下的内容放进<em>惰性加载目录</em>中。\n典型的<em>惰性加载目录</em>包含<em>路由组件</em>及其子组件以及与它们有关的那些资产和模块。</p><p translation-origin=\"off\"><strong>Do</strong> put the contents of lazy loaded features in a <em>lazy loaded folder</em>.\nA typical <em>lazy loaded folder</em> contains a <em>routing component</em>, its child components, and their related assets and modules.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>这种目录让标识和隔离这些特性内容变得更轻松。</p><p translation-origin=\"off\"><strong>Why?</strong> The folder makes it easy to identify and isolate the feature content.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"04-12\"></a>\n<h3 id=\"never-directly-import-lazy-loaded-folders\" translation-result=\"on\">永远不要直接导入惰性加载的目录<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#never-directly-import-lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"never-directly-import-lazy-loaded-folders\">Never directly import lazy loaded folders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#never-directly-import-lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-12\" translation-result=\"on\">样式 04-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-12\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-04-12\">Style 04-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-12\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>让兄弟模块和父模块直接导入<em>惰性加载特性</em>中的模块。</p><p translation-origin=\"off\"><strong>Avoid</strong> allowing modules in sibling and parent folders to directly import a module in a <em>lazy loaded feature</em>.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>直接导入并使用此模块会立即加载它，而原本的设计意图是按需加载它。</p><p translation-origin=\"off\"><strong>Why?</strong> Directly importing and using a module will load it immediately when the intention is to load it on demand.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"components\" translation-result=\"on\">组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"components\">Components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components\"><i class=\"material-icons\">link</i></a></h2>\n\n<a id=\"05-03\"></a>\n<h3 id=\"components-as-elements\" translation-result=\"on\">把组件当做元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components-as-elements\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"components-as-elements\">Components as elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components-as-elements\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-03\" translation-result=\"on\">风格 05-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-03\">Style 05-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>考虑</strong>给组件一个<em>元素</em>选择器，而不是<em>属性</em>或<em>类</em>选择器。</p><p translation-origin=\"off\"><strong>Consider</strong> giving components an <em>element</em> selector, as opposed to <em>attribute</em> or <em>class</em> selectors.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>组件有很多包含 HTML 以及可选 Angular 模板语法的模板。\n它们显示内容。开发人员会把组件像原生 HTML 元素和 WebComponents 一样放进页面中。</p><p translation-origin=\"off\"><strong>Why?</strong> Components have templates containing HTML and optional Angular template syntax.\nThey display content.\nDevelopers place components on the page as they would native HTML elements and web components.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>查看组件模板的 HTML 时，更容易识别一个符号是组件还是指令。</p><p translation-origin=\"off\"><strong>Why?</strong> It is easier to recognize that a symbol is a component by looking at the template's html.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">少数情况下，你要为组件使用属性选择器，比如你要加强某个内置元素时。\n比如，<a href=\"https://material.angular.cn/components/button/overview\">Material Design 组件库</a>就会对 <code>&#x3C;button mat-button></code> 使用这项技术。不过，你不应该在自定义组件上使用这项技术。</p><p translation-origin=\"off\">There are a few cases where you give a component an attribute, such as when you want to augment a built-in element. For example, <a href=\"https://material.angular.io/components/button/overview\">Material Design</a> uses this technique with <code>&#x3C;button mat-button></code>. However, you wouldn't use this technique on a custom element.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" header=\"app/heroes/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: '[tohHeroButton]',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/05-03/app/app.component.avoid.html\" header=\"app/app.component.html\">\n&#x3C;!-- avoid -->\n\n&#x3C;div tohHeroButton>&#x3C;/div>\n\n\n</code-example>\n<code-tabs>\n\n  <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n\n  <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.html\">\n&#x3C;toh-hero-button>&#x3C;/toh-hero-button>\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-04\"></a>\n<h3 id=\"extract-templates-and-styles-to-their-own-files\" translation-result=\"on\">把模板和样式提取到它们自己的文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#extract-templates-and-styles-to-their-own-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"extract-templates-and-styles-to-their-own-files\">Extract templates and styles to their own files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#extract-templates-and-styles-to-their-own-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-04\" translation-result=\"on\">风格 05-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-04\">Style 05-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>当超过 3 行时，把模板和样式提取到一个单独的文件。</p><p translation-origin=\"off\"><strong>Do</strong> extract templates and styles into a separate file, when more than 3 lines.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把模板文件命名为 <code>[component-name].component.html</code>，其中，[component-name] 是组件名。</p><p translation-origin=\"off\"><strong>Do</strong> name the template file <code>[component-name].component.html</code>, where [component-name] is the component name.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把样式文件命名为 <code>[component-name].component.css</code>，其中，[component-name] 是组件名。</p><p translation-origin=\"off\"><strong>Do</strong> name the style file <code>[component-name].component.css</code>, where [component-name] is the component name.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>指定<em>相对于模块的</em> URL，给它加上 <code>./</code> 前缀。</p><p translation-origin=\"off\"><strong>Do</strong> specify <em>component-relative</em> URLs, prefixed with <code>./</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>巨大的、内联的模板和样式表会遮盖组件的意图和实现方式，削弱可读性和可维护性。</p><p translation-origin=\"off\"><strong>Why?</strong> Large, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>在多数编辑器中，编写内联的模板和样式表时都无法使用语法提示和代码片段功能。\nAngular 的 TypeScript 语言服务（即将到来）可以帮助那些编辑器在编写 HTML 模板时克服这一缺陷，但对 CSS 样式没有帮助。</p><p translation-origin=\"off\"><strong>Why?</strong> In most editors, syntax hints and code snippets aren't available when developing inline templates and styles.\nThe Angular TypeScript Language Service (forthcoming) promises to overcome this deficiency for HTML templates\nin those editors that support it; it won't help with CSS styles.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>当你移动组件文件时，相对于组件的 URL 不需要修改，因为这些文件始终会在一起。</p><p translation-origin=\"off\"><strong>Why?</strong> A <em>component relative</em> URL requires no change when you move the component files, as long as the files stay together.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong><code>./</code> 前缀是相对 URL 的标准语法，不必依赖 Angular 的特殊处理，如果没有前缀则不行。</p><p translation-origin=\"off\"><strong>Why?</strong> The <code>./</code> prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-04/app/heroes/heroes.component.avoid.ts\" region=\"example\" header=\"app/heroes/heroes.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n    &#x3C;div>\n      &#x3C;h2>My Heroes&#x3C;/h2>\n      &#x3C;ul class=\"heroes\">\n        &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"selectedHero=hero\">\n          &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n        &#x3C;/li>\n      &#x3C;/ul>\n      &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n        &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&#x3C;/h2>\n      &#x3C;/div>\n    &#x3C;/div>\n  `,\n  styles: [`\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&#x3C;Hero[]>;\n  selectedHero: Hero;\n\n constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-example>\n<code-tabs>\n\n  <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls:  ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&#x3C;Hero[]>;\n  selectedHero: Hero;\n\n constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/05-04/app/heroes/heroes.component.html\">\n&#x3C;div>\n  &#x3C;h2>My Heroes&#x3C;/h2>\n  &#x3C;ul class=\"heroes\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"selectedHero=hero\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n    &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&#x3C;/h2>\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/heroes.component.css\" path=\"styleguide/src/05-04/app/heroes/heroes.component.css\">\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-12\"></a>\n<h3 id=\"decorate-input-and-output-properties\" translation-result=\"on\">内联输入和输出属性装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#decorate-input-and-output-properties\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"decorate-input-and-output-properties\">Decorate <em>input</em> and <em>output</em> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#decorate-input-and-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-12\" translation-result=\"on\">风格 05-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-12\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-12\">Style 05-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-12\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong> 使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，而非 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>inputs</code> 和 <code>outputs</code> 属性:</p><p translation-origin=\"off\"><strong>Do</strong> use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> class decorators instead of the <code>inputs</code> and <code>outputs</code> properties of the\n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata:</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>坚持</strong>把 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或者 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 放到所装饰的属性的同一行。</p><p translation-origin=\"off\"><strong>Consider</strong> placing <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> or <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same line as the property it decorates.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>易于在类里面识别哪些属性是输入属性或输出属性。</p><p translation-origin=\"off\"><strong>Why?</strong> It is easier and more readable to identify which properties in a class are inputs or outputs.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> 如果需要重命名与 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或者 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 关联的属性或事件名，你可以在一个位置修改。</p><p translation-origin=\"off\"><strong>Why?</strong> If you ever need to rename the property or event name associated with\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> or <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, you can modify it in a single place.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>依附到指令的元数据声明会比较简短，更易于阅读。</p><p translation-origin=\"off\"><strong>Why?</strong> The metadata declaration attached to the directive is shorter and thus more readable.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>把装饰器放到同一行可以精简代码，同时更易于识别输入或输出属性。</p><p translation-origin=\"off\"><strong>Why?</strong> Placing the decorator on the same line <em>usually</em> makes for shorter code and still easily identifies the property as an input or output.\nPut it on the line above when doing so is clearly more readable.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" header=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&#x3C;button>&#x3C;/button>`,\n  inputs: [\n    'label'\n  ],\n  outputs: [\n    'heroChange'\n  ]\n})\nexport class HeroButtonComponent {\n  heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;any>();\n  label: string;\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\" header=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&#x3C;button>{{label}}&#x3C;/button>`\n})\nexport class HeroButtonComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;any>();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label: string;\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-13\"></a>\n<h3 id=\"avoid-aliasing-inputs-and-outputs\" translation-result=\"on\">避免为输入和输出属性指定别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#avoid-aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"avoid-aliasing-inputs-and-outputs\">Avoid aliasing <em>inputs</em> and <em>outputs</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#avoid-aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-13\" translation-result=\"on\">风格 05-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-13\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-13\">Style 05-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-13\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>除非有重要目的，否则不要为输入和输出指定别名。</p><p translation-origin=\"off\"><strong>Avoid</strong> <em>input</em> and <em>output</em> aliases except when it serves an important purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>同一个属性有两个名字（一个对内一个对外）很容易导致混淆。</p><p translation-origin=\"off\"><strong>Why?</strong> Two names for the same property (one private, one public) is inherently confusing.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>如果指令名也同时用作<em>输入</em>属性，而且指令名无法准确描述这个属性的用途时，应该使用别名。</p><p translation-origin=\"off\"><strong>Why?</strong> You should use an alias when the directive name is also an <em>input</em> property,\nand the directive name doesn't describe the property.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" header=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid pointless aliasing */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&#x3C;button>{{label}}&#x3C;/button>`\n})\nexport class HeroButtonComponent {\n  // Pointless aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('heroChangeEvent') heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;any>();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('labelAttribute') label: string;\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-13/app/app.component.avoid.html\" header=\"app/app.component.html\">\n&#x3C;!-- avoid -->\n\n&#x3C;toh-hero-button labelAttribute=\"OK\" (changeEvent)=\"doSomething()\">\n&#x3C;/toh-hero-button>\n\n\n</code-example>\n<code-tabs>\n\n  <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&#x3C;button>{{label}}&#x3C;/button>`\n})\nexport class HeroButtonComponent {\n  // No aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;any>();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label: string;\n}\n\n</code-pane>\n\n  <code-pane header=\"app/heroes/shared/hero-button/hero-highlight.directive.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[heroHighlight]' })\nexport class HeroHighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  // Aliased because `color` is a better property name than `heroHighlight`\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('heroHighlight') color: string;\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {}\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.color || 'yellow';\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.html\">\n&#x3C;toh-hero-button label=\"OK\" (change)=\"doSomething()\">\n&#x3C;/toh-hero-button>\n\n&#x3C;!-- `heroHighlight` is both the directive name and the data-bound aliased property name -->\n&#x3C;h3 heroHighlight=\"skyblue\">The Great Bombasto&#x3C;/h3>\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-14\"></a>\n<h3 id=\"member-sequence\" translation-result=\"on\">成员顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#member-sequence\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"member-sequence\">Member sequence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#member-sequence\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-14\" translation-result=\"on\">风格 05-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-14\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-14\">Style 05-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-14\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把属性成员放在前面，方法成员放在后面。</p><p translation-origin=\"off\"><strong>Do</strong> place properties up top followed by methods.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>先放公共成员，再放私有成员，并按照字母顺序排列。</p><p translation-origin=\"off\"><strong>Do</strong> place private members after public members, alphabetized.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>把类的成员按照统一的顺序排列，易于阅读，能立即识别出组件的哪个成员服务于何种目的。</p><p translation-origin=\"off\"><strong>Why?</strong> Placing members in a consistent sequence makes it easy to read and\nhelps instantly identify which members of the component serve which purpose.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-14/app/shared/toast/toast.component.avoid.ts\" region=\"example\" header=\"app/shared/toast/toast.component.ts\">\n/* avoid */\n\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  message: string;\n  title: string;\n  private toastElement: any;\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    window.setTimeout(() => this.toastElement.style.zIndex = 0, 400);\n  }\n\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n\n    window.setTimeout(() => this.hide(), 2500);\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-14/app/shared/toast/toast.component.ts\" region=\"example\" header=\"app/shared/toast/toast.component.ts\">\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // public properties\n  message: string;\n  title: string;\n\n  // private fields\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  private toastElement: any;\n\n  // public methods\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    window.setTimeout(() => this.toastElement.style.zIndex = 0, 400);\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n    window.setTimeout(() => this.hide(), 2500);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-15\"></a>\n<h3 id=\"delegate-complex-component-logic-to-services\" translation-result=\"on\">把逻辑放到服务里<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#delegate-complex-component-logic-to-services\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"delegate-complex-component-logic-to-services\">Delegate complex component logic to services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#delegate-complex-component-logic-to-services\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-15\" translation-result=\"on\">风格 05-15<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-15\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-15\">Style 05-15<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-15\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在组件中只包含与视图相关的逻辑。所有其它逻辑都应该放到服务中。</p><p translation-origin=\"off\"><strong>Do</strong> limit logic in a component to only that required for the view. All other logic should be delegated to services.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把可重用的逻辑放到服务中，保持组件简单，聚焦于它们预期目的。</p><p translation-origin=\"off\"><strong>Do</strong> move reusable logic to services and keep components simple and focused on their intended purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>当逻辑被放置到服务里，并以函数的形式暴露时，可以被多个组件重复使用。</p><p translation-origin=\"off\"><strong>Why?</strong> Logic may be reused by multiple components when placed within a service and exposed via a function.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>在单元测试时，服务里的逻辑更容易被隔离。当组件中调用逻辑时，也很容易被模拟。</p><p translation-origin=\"off\"><strong>Why?</strong> Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>从组件移除依赖并隐藏实现细节。</p><p translation-origin=\"off\"><strong>Why?</strong> Removes dependencies and hides implementation details from the component.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>保持组件苗条、精简和聚焦。</p><p translation-origin=\"off\"><strong>Why?</strong> Keeps the component slim, trim, and focused.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.avoid.ts\" header=\"app/heroes/hero-list/hero-list.component.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { Hero } from '../shared/hero.model';\n\nconst heroesUrl = 'http://angular.io';\n\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n  getHeroes() {\n    this.heroes = [];\n    this.http.get(heroesUrl).pipe(\n      catchError(this.catchBadResponse),\n      finalize(() => this.hideSpinner())\n    ).subscribe((heroes: Hero[]) => this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  private catchBadResponse(err: any, source: Observable&#x3C;any>) {\n    // log and handle the exception\n    return new Observable();\n  }\n\n  private hideSpinner() {\n    // hide the spinner\n  }\n}\n\n\n</code-example>\n<code-example path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.ts\" region=\"example\" header=\"app/heroes/hero-list/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from '../shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `...`\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private heroService: HeroService) {}\n  getHeroes() {\n    this.heroes = [];\n    this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-16\"></a>\n<h3 id=\"dont-prefix-output-properties\" translation-result=\"on\">不要给输出属性加前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#dont-prefix-output-properties\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"dont-prefix-output-properties\">Don't prefix <em>output</em> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#dont-prefix-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-16\" translation-result=\"on\">风格 05-16<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-16\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-16\">Style 05-16<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-16\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>命名事件时，不要带前缀 <code>on</code>。</p><p translation-origin=\"off\"><strong>Do</strong> name events without the prefix <code>on</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把事件处理器方法命名为 <code>on</code> 前缀之后紧跟着事件名。</p><p translation-origin=\"off\"><strong>Do</strong> name event handler methods with the prefix <code>on</code> followed by the event name.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>与内置事件命名一致，例如按钮点击。</p><p translation-origin=\"off\"><strong>Why?</strong> This is consistent with built-in events such as button clicks.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>Angular 允许<a href=\"guide/template-syntax#binding-syntax\">另一种备选语法</a> <code>on-*</code>。如果事件的名字本身带有前缀 <code>on</code>，那么绑定的表达式可能是 <code>on-onEvent</code>。</p><p translation-origin=\"off\"><strong>Why?</strong> Angular allows for an <a href=\"guide/template-syntax#binding-syntax\">alternative syntax</a> <code>on-*</code>. If the event itself was prefixed with <code>on</code> this would result in an <code>on-onEvent</code> binding expression.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-16/app/heroes/hero.component.avoid.ts\" region=\"example\" header=\"app/heroes/hero.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onSavedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;boolean>();\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-16/app/app.component.avoid.html\" header=\"app/app.component.html\">\n&#x3C;!-- avoid -->\n\n&#x3C;toh-hero (onSavedTheDay)=\"onSavedTheDay($event)\">&#x3C;/toh-hero>\n\n\n</code-example>\n<code-tabs>\n\n  <code-pane header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.ts\" region=\"example\">\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() savedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;boolean>();\n}\n\n</code-pane>\n\n  <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.html\">\n&#x3C;toh-hero (savedTheDay)=\"onSavedTheDay($event)\">&#x3C;/toh-hero>\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"05-17\"></a>\n<h3 id=\"put-presentation-logic-in-the-component-class\" translation-result=\"on\">把表现层逻辑放到组件类里<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#put-presentation-logic-in-the-component-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"put-presentation-logic-in-the-component-class\">Put presentation logic in the component class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#put-presentation-logic-in-the-component-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-17\" translation-result=\"on\">风格 05-17<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-17\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-05-17\">Style 05-17<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-17\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把表现层逻辑放进组件类中，而不要放在模板里。</p><p translation-origin=\"off\"><strong>Do</strong> put presentation logic in the component class, and not in the template.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>逻辑应该只出现在一个地方（组件类里）而不应分散在两个地方。</p><p translation-origin=\"off\"><strong>Why?</strong> Logic will be contained in one place (the component class) instead of being spread in two places.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>将组件的表现层逻辑放到组件类而非模板里，可以增强测试性、维护性和重复使用性。</p><p translation-origin=\"off\"><strong>Why?</strong> Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.</p>\n\n</div>\n<code-example path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.avoid.ts\" region=\"example\" header=\"app/heroes/hero-list/hero-list.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &#x3C;section>\n      Our list of heroes:\n      &#x3C;hero-profile *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\">\n      &#x3C;/hero-profile>\n      Total powers: {{totalPowers}}&#x3C;br>\n      Average power: {{totalPowers / heroes.length}}\n    &#x3C;/section>\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.ts\" region=\"example\" header=\"app/heroes/hero-list/hero-list.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &#x3C;section>\n      Our list of heroes:\n      &#x3C;toh-hero *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\">\n      &#x3C;/toh-hero>\n      Total powers: {{totalPowers}}&#x3C;br>\n      Average power: {{avgPower}}\n    &#x3C;/section>\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n\n  get avgPower() {\n    return this.totalPowers / this.heroes.length;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"directives\" translation-result=\"on\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"directives\">Directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<a id=\"06-01\"></a>\n<h3 id=\"use-directives-to-enhance-an-element\" translation-result=\"on\">使用指令来增强已有元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-directives-to-enhance-an-element\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"use-directives-to-enhance-an-element\">Use directives to enhance an element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-directives-to-enhance-an-element\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-06-01\" translation-result=\"on\">风格 06-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-06-01\">Style 06-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>当你需要有表现层逻辑，但没有模板时，使用属性型指令。</p><p translation-origin=\"off\"><strong>Do</strong> use attribute directives when you have presentation logic without a template.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>属性型指令没有模板。</p><p translation-origin=\"off\"><strong>Why?</strong> Attribute directives don't have an associated template.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>一个元素可以使用多个属性型指令。</p><p translation-origin=\"off\"><strong>Why?</strong> An element may have more than one attribute directive applied.</p>\n\n</div>\n<code-example path=\"styleguide/src/06-01/app/shared/highlight.directive.ts\" region=\"example\" header=\"app/shared/highlight.directive.ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohHighlight]'\n})\nexport class HighlightDirective {\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseover') onMouseEnter() {\n    // do highlight work\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/06-01/app/app.component.html\" header=\"app/app.component.html\">\n&#x3C;div tohHighlight>Bombasta&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"06-03\"></a>\n<h3 id=\"hostlistenerhostbinding-decorators-versus-host-metadata\" translation-result=\"on\"><em>HostListener</em> 和 <em>HostBinding</em> 装饰器 vs. 组件元数据 <em>host</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"hostlistenerhostbinding-decorators-versus-host-metadata\"><em>HostListener</em>/<em>HostBinding</em> decorators versus <em>host</em> metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-06-03\" translation-result=\"on\">风格 06-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-06-03\">Style 06-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>优先使用 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code>，而不是 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>host</code> 属性。</p><p translation-origin=\"off\"><strong>Consider</strong> preferring the <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> and <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> to the\n<code>host</code> property of the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorators.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>让你的选择保持一致。</p><p translation-origin=\"off\"><strong>Do</strong> be consistent in your choice.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>对于关联到 <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 的属性或关联到 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 的方法，要修改时，只需在指令类中的一个地方修改。\n如果使用元数据属性 <code>host</code>，你就得在组件类中修改属性声明的同时修改相关的元数据。</p><p translation-origin=\"off\"><strong>Why?</strong> The property associated with <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> or the method associated with <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>\ncan be modified only in a single place—in the directive's class.\nIf you use the <code>host</code> metadata property, you must modify both the property/method declaration in the\ndirective's class and the metadata in the decorator associated with the directive.</p>\n\n</div>\n<code-example path=\"styleguide/src/06-03/app/shared/validator.directive.ts\" header=\"app/shared/validator.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator]'\n})\nexport class ValidatorDirective {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('attr.role') role = 'button';\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">与不推荐的方式（<code>host</code> 元数据）比较一下。</p><p translation-origin=\"off\">Compare with the less preferred <code>host</code> metadata alternative.</p>\n\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong><code>host</code> 元数据只是一个便于记忆的名字而已，并不需要额外的 ES 导入。</p><p translation-origin=\"off\"><strong>Why?</strong> The <code>host</code> metadata is only one term to remember and doesn't require extra ES imports.</p>\n\n</div>\n<code-example path=\"styleguide/src/06-03/app/shared/validator2.directive.ts\" header=\"app/shared/validator2.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator2]',\n  host: {\n    '[attr.role]': 'role',\n    '(mouseenter)': 'onMouseEnter()'\n  }\n})\nexport class Validator2Directive {\n  role = 'button';\n  onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"services\" translation-result=\"on\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"services\">Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services\"><i class=\"material-icons\">link</i></a></h2>\n\n<a id=\"07-01\"></a>\n<h3 id=\"services-are-singletons\" translation-result=\"on\">服务总是单例的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services-are-singletons\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"services-are-singletons\">Services are singletons<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services-are-singletons\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-01\" translation-result=\"on\">风格 07-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-07-01\">Style 07-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在同一个注入器内，把服务当做单例使用。用它们来共享数据和功能。</p><p translation-origin=\"off\"><strong>Do</strong> use services as singletons within the same injector. Use them for sharing data and functionality.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>服务是在特性范围或应用内共享方法的理想载体。</p><p translation-origin=\"off\"><strong>Why?</strong> Services are ideal for sharing methods across a feature area or an app.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>服务是共享状态性内存数据的理想载体。</p><p translation-origin=\"off\"><strong>Why?</strong> Services are ideal for sharing stateful in-memory data.</p>\n\n</div>\n<code-example path=\"styleguide/src/07-01/app/heroes/shared/hero.service.ts\" region=\"example\" header=\"app/heroes/shared/hero.service.ts\">\nexport class HeroService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  getHeroes() {\n    return this.http.get&#x3C;Hero[]>('api/heroes');\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"07-02\"></a>\n<h3 id=\"single-responsibility-1\" translation-result=\"on\">单一职责<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"single-responsibility-1\">Single responsibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-02\" translation-result=\"on\">风格 07-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-07-02\">Style 07-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>创建封装在上下文中的单一职责的服务。</p><p translation-origin=\"off\"><strong>Do</strong> create services with a single responsibility that is encapsulated by its context.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>当服务成长到超出单一用途时，创建一个新服务。</p><p translation-origin=\"off\"><strong>Do</strong> create a new service once the service begins to exceed that singular purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>当服务有多个职责时，它很难被测试。</p><p translation-origin=\"off\"><strong>Why?</strong> When a service has multiple responsibilities, it becomes difficult to test.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>当某个服务有多个职责时，每个注入它的组件或服务都会承担这些职责的全部开销。</p><p translation-origin=\"off\"><strong>Why?</strong> When a service has multiple responsibilities, every component or service that injects it now carries the weight of them all.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"07-03\"></a>\n<h3 id=\"providing-a-service\" translation-result=\"on\">提供一个服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#providing-a-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"providing-a-service\">Providing a service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#providing-a-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-03\" translation-result=\"on\">风格 07-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-07-03\">Style 07-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>在服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器上指定通过应用的根注入器提供服务。</p><p translation-origin=\"off\"><strong>Do</strong> provide a service with the app root injector in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator of the service.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> Angular 注入器是层次化的。</p><p translation-origin=\"off\"><strong>Why?</strong> The Angular injector is hierarchical.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>当你在根注入器上提供该服务时，该服务实例在每个需要该服务的类中是共享的。当服务要共享方法或状态时，这是最理想的选择。</p><p translation-origin=\"off\"><strong>Why?</strong> When you provide the service to a root injector, that instance of the service is shared and available in every class that needs the service. This is ideal when a service is sharing methods or state.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>当你在服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 中注册服务时，<a href=\"cli\">Angular CLI</a> 生产环境构建时使用的优化工具可以进行摇树优化，从而移除那些你的应用中从未用过的服务。</p><p translation-origin=\"off\"><strong>Why?</strong> When you register a service in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator of the service, optimization tools such as those used by the <a href=\"cli\">Angular CLI's</a> production builds can perform tree shaking and remove services that aren't used by your app.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>当不同的两个组件需要一个服务的不同的实例时，上面的方法这就不理想了。在这种情况下，对于需要崭新和单独服务实例的组件，最好在组件级提供服务。</p><p translation-origin=\"off\"><strong>Why?</strong> This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.</p>\n\n</div>\n<code-example path=\"dependency-injection/src/app/tree-shaking/service.ts\" header=\"src/app/treeshaking/service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class Service {\n}\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"07-04\"></a>\n<h3 id=\"use-the-injectable-class-decorator\" translation-result=\"on\">使用 @Injectable() 类装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-the-injectable-class-decorator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"use-the-injectable-class-decorator\">Use the @Injectable() class decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-the-injectable-class-decorator\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-04\" translation-result=\"on\">风格 07-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-07-04\">Style 07-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>当使用类型作为令牌来注入服务的依赖时，使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 类装饰器，而非 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> 参数装饰器。</p><p translation-origin=\"off\"><strong>Do</strong> use the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> class decorator instead of the <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> parameter decorator when using types as tokens for the dependencies of a service.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong> Angular 的 DI 机制会根据服务的构造函数参数的声明类型来解析服务的所有依赖。</p><p translation-origin=\"off\"><strong>Why?</strong> The Angular Dependency Injection (DI) mechanism resolves a service's own\ndependencies based on the declared types of that service's constructor parameters.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>当服务只接受类型令牌相关的依赖时，比起在每个构造函数参数上使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code>，<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的语法简洁多了。</p><p translation-origin=\"off\"><strong>Why?</strong> When a service accepts only dependencies associated with type tokens, the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> syntax is much less verbose compared to using <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> on each individual constructor parameter.</p>\n\n</div>\n<code-example path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.avoid.ts\" region=\"example\" header=\"app/heroes/shared/hero-arena.service.ts\">\n/* avoid */\n\nexport class HeroArena {\n  constructor(\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(HeroService) private heroService: HeroService,\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<code-example path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.ts\" region=\"example\" header=\"app/heroes/shared/hero-arena.service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroArena {\n  constructor(\n    private heroService: HeroService,\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"data-services\" translation-result=\"on\">数据服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#data-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"data-services\">Data Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#data-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<a id=\"08-01\"></a>\n<h3 id=\"talk-to-the-server-through-a-service\" translation-result=\"on\">通过服务与 Web 服务器通讯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#talk-to-the-server-through-a-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"talk-to-the-server-through-a-service\">Talk to the server through a service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#talk-to-the-server-through-a-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-08-01\" translation-result=\"on\">风格 08-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-08-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-08-01\">Style 08-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-08-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>把数据操作和与数据交互的逻辑重构到服务里。</p><p translation-origin=\"off\"><strong>Do</strong> refactor logic for making data operations and interacting with data to a service.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>让数据服务来负责 XHR 调用、本地储存、内存储存或者其它数据操作。</p><p translation-origin=\"off\"><strong>Do</strong> make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>组件的职责是为视图展示或收集信息。它不应该关心如何获取数据，它只需要知道向谁请求数据。把如何获取数据的逻辑移动到数据服务里，简化了组件，让其聚焦于视图。</p><p translation-origin=\"off\"><strong>Why?</strong> The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>为何？</strong>在测试使用数据服务的组件时，可以让数据调用更容易被测试（模拟或者真实）。</p><p translation-origin=\"off\"><strong>Why?</strong> This makes it easier to test (mock or real) the data calls when testing a component that uses a data service.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>数据管理的详情，比如头信息、方法、缓存、错误处理和重试逻辑，不是组件和其它的数据消费者应该关心的事情。</p><p translation-origin=\"off\"><strong>Why?</strong> The details of data management, such as headers, HTTP methods,\ncaching, error handling, and retry logic, are irrelevant to components\nand other data consumers.</p>\n\n<p translation-result=\"on\">数据服务应该封装这些细节。这样，在服务内部修改细节，就不会影响到它的消费者。并且更容易通过实现一个模拟服务来对消费者进行测试。</p><p translation-origin=\"off\">A data service encapsulates these details. It's easier to evolve these\ndetails inside the service without affecting its consumers. And it's\neasier to test the consumers with mock service implementations.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"lifecycle-hooks\" translation-result=\"on\">生命周期钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"lifecycle-hooks\">Lifecycle hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用生命周期钩子来介入到 Angular 暴露的重要事件里。</p><p translation-origin=\"off\">Use Lifecycle hooks to tap into important events exposed by Angular.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"09-01\"></a>\n<h3 id=\"implement-lifecycle-hook-interfaces\" translation-result=\"on\">实现生命周期钩子接口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#implement-lifecycle-hook-interfaces\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"implement-lifecycle-hook-interfaces\">Implement lifecycle hook interfaces<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#implement-lifecycle-hook-interfaces\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-09-01\" translation-result=\"on\">风格 09-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-09-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-09-01\">Style 09-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-09-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>实现生命周期钩子接口。</p><p translation-origin=\"off\"><strong>Do</strong> implement the lifecycle hook interfaces.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>为何？</strong>如果使用强类型的方法签名，编译器和编辑器可以帮你揪出拼写错误。</p><p translation-origin=\"off\"><strong>Why?</strong> Lifecycle interfaces prescribe typed method\nsignatures. Use those signatures to flag spelling and syntax mistakes.</p>\n\n</div>\n<code-example path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" header=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&#x3C;button>OK&#x3C;button>`\n})\nexport class HeroButtonComponent {\n  onInit() { // misspelled\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\" header=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&#x3C;button>OK&#x3C;/button>`\n})\nexport class HeroButtonComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  ngOnInit() {\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"appendix\" translation-result=\"on\">附录<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#appendix\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix\">Appendix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#appendix\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有用的 Angular 工具和小提示</p><p translation-origin=\"off\">Useful tools and tips for Angular.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"A-01\"></a>\n<h3 id=\"codelyzer\">Codelyzer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#codelyzer\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-a-01\" translation-result=\"on\">风格 A-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-a-01\">Style A-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用 <a href=\"https://www.npmjs.com/package/codelyzer\">codelyzer</a> 来实施本指南。</p><p translation-origin=\"off\"><strong>Do</strong> use <a href=\"https://www.npmjs.com/package/codelyzer\">codelyzer</a> to follow this guide.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>调整 codelyzer 的规则来满足你的需求。</p><p translation-origin=\"off\"><strong>Consider</strong> adjusting the rules in codelyzer to suit your needs.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<a id=\"A-02\"></a>\n<h3 id=\"file-templates-and-snippets\" translation-result=\"on\">文档模板和代码片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-templates-and-snippets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"file-templates-and-snippets\">File templates and snippets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-templates-and-snippets\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-a-02\" translation-result=\"on\">风格 A-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"style-a-02\">Style A-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>坚持</strong>使用文件模板或代码片段来帮助实现一致的风格和模式。下面是为一些网络开发编辑器和 IDE 准备的模板和/或代码片段：</p><p translation-origin=\"off\"><strong>Do</strong> use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考虑</strong>使用 <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>的<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">代码片段</a> 来实施本风格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">snippets</a> for <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> that follow these styles and guidelines.</p>\n\n<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">\n  <img src=\"generated/images/guide/styleguide/use-extension.gif\" alt=\"Use Extension\" width=\"700\" height=\"429\">\n</a>\n<p translation-result=\"on\"><strong>考虑</strong>使用 <a href=\"https://atom.io/\">Atom</a> 的<a href=\"https://atom.io/packages/angular-2-typescript-snippets\">代码片断</a>来实施本风格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://atom.io/packages/angular-2-typescript-snippets\">snippets</a> for <a href=\"https://atom.io/\">Atom</a> that follow these styles and guidelines.</p>\n\n<p translation-result=\"on\"><strong>考虑</strong>使用 <a href=\"http://www.sublimetext.com/\">Sublime Text</a>的<a href=\"https://github.com/orizens/sublime-angular2-snippets\">代码片断</a> 来实施本风格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://github.com/orizens/sublime-angular2-snippets\">snippets</a> for <a href=\"http://www.sublimetext.com/\">Sublime Text</a> that follow these styles and guidelines.</p>\n\n<p translation-result=\"on\"><strong>考虑</strong>使用 <a href=\"http://www.vim.org/\">Vim</a> 的<a href=\"https://github.com/mhartington/vim-angular2-snippets\">代码片断</a>来实施本风格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://github.com/mhartington/vim-angular2-snippets\">snippets</a> for <a href=\"http://www.vim.org/\">Vim</a> that follow these styles and guidelines.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到顶部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n\n</div>\n\n<!-- links to this doc:\n - api/core/Pipe\n - guide/docs-style-guide\n - guide/glossary\n - guide/npm-packages\n - guide/pipes\n - guide/structural-directives\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/JsonPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterModule\n - cli\n - guide/glossary#case-types\n - guide/styleguide#angular-coding-style-guide\n - guide/styleguide#angular-ngmodule-names\n - guide/styleguide#app-root-module\n - guide/styleguide#appendix\n - guide/styleguide#application-structure-and-ngmodules\n - guide/styleguide#avoid-aliasing-inputs-and-outputs\n - guide/styleguide#bootstrapping\n - guide/styleguide#codelyzer\n - guide/styleguide#component-custom-prefix\n - guide/styleguide#component-selectors\n - guide/styleguide#components\n - guide/styleguide#components-as-elements\n - guide/styleguide#data-services\n - guide/styleguide#decorate-input-and-output-properties\n - guide/styleguide#delegate-complex-component-logic-to-services\n - guide/styleguide#directive-custom-prefix\n - guide/styleguide#directive-selectors\n - guide/styleguide#directives\n - guide/styleguide#dont-prefix-output-properties\n - guide/styleguide#end-to-end-e2e-test-file-names\n - guide/styleguide#extract-templates-and-styles-to-their-own-files\n - guide/styleguide#feature-modules\n - guide/styleguide#file-structure-conventions\n - guide/styleguide#file-templates-and-snippets\n - guide/styleguide#file-tree\n - guide/styleguide#flat\n - guide/styleguide#folders-by-feature-structure\n - guide/styleguide#general-naming-guidelines\n - guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\n - guide/styleguide#identify\n - guide/styleguide#implement-lifecycle-hook-interfaces\n - guide/styleguide#lazy-loaded-folders\n - guide/styleguide#lifecycle-hooks\n - guide/styleguide#lift\n - guide/styleguide#locate\n - guide/styleguide#member-sequence\n - guide/styleguide#naming\n - guide/styleguide#never-directly-import-lazy-loaded-folders\n - guide/styleguide#overall-structural-guidelines\n - guide/styleguide#pipe-names\n - guide/styleguide#providing-a-service\n - guide/styleguide#put-presentation-logic-in-the-component-class\n - guide/styleguide#rule-of-one\n - guide/styleguide#separate-file-names-with-dots-and-dashes\n - guide/styleguide#service-names\n - guide/styleguide#services\n - guide/styleguide#services-are-singletons\n - guide/styleguide#shared-feature-module\n - guide/styleguide#single-responsibility\n - guide/styleguide#single-responsibility-1\n - guide/styleguide#small-functions\n - guide/styleguide#style-01-01\n - guide/styleguide#style-01-02\n - guide/styleguide#style-02-01\n - guide/styleguide#style-02-02\n - guide/styleguide#style-02-03\n - guide/styleguide#style-02-04\n - guide/styleguide#style-02-05\n - guide/styleguide#style-02-06\n - guide/styleguide#style-02-07\n - guide/styleguide#style-02-08\n - guide/styleguide#style-02-09\n - guide/styleguide#style-02-10\n - guide/styleguide#style-02-11\n - guide/styleguide#style-02-12\n - guide/styleguide#style-04-01\n - guide/styleguide#style-04-02\n - guide/styleguide#style-04-03\n - guide/styleguide#style-04-04\n - guide/styleguide#style-04-05\n - guide/styleguide#style-04-06\n - guide/styleguide#style-04-07\n - guide/styleguide#style-04-08\n - guide/styleguide#style-04-09\n - guide/styleguide#style-04-10\n - guide/styleguide#style-04-11\n - guide/styleguide#style-04-12\n - guide/styleguide#style-05-02\n - guide/styleguide#style-05-03\n - guide/styleguide#style-05-04\n - guide/styleguide#style-05-12\n - guide/styleguide#style-05-13\n - guide/styleguide#style-05-14\n - guide/styleguide#style-05-15\n - guide/styleguide#style-05-16\n - guide/styleguide#style-05-17\n - guide/styleguide#style-06-01\n - guide/styleguide#style-06-03\n - guide/styleguide#style-07-01\n - guide/styleguide#style-07-02\n - guide/styleguide#style-07-03\n - guide/styleguide#style-07-04\n - guide/styleguide#style-08-01\n - guide/styleguide#style-09-01\n - guide/styleguide#style-a-01\n - guide/styleguide#style-a-02\n - guide/styleguide#style-vocabulary\n - guide/styleguide#symbols-and-file-names\n - guide/styleguide#t-dry-try-to-be-dry\n - guide/styleguide#talk-to-the-server-through-a-service\n - guide/styleguide#toc\n - guide/styleguide#unit-test-file-names\n - guide/styleguide#use-directives-to-enhance-an-element\n - guide/styleguide#use-the-injectable-class-decorator\n - guide/template-syntax#binding-syntax\n - http://karma-runner.github.io/\n - http://www.sublimetext.com/\n - http://www.vim.org/\n - https://atom.io/\n - https://atom.io/packages/angular-2-typescript-snippets\n - https://code.visualstudio.com/\n - https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/styleguide.md?message=docs%3A%20请简述你的修改...\n - https://github.com/mhartington/vim-angular2-snippets\n - https://github.com/orizens/sublime-angular2-snippets\n - https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\n - https://material.angular.cn/components/button/overview\n - https://material.angular.io/components/button/overview\n - https://wikipedia.org/wiki/Single_responsibility_principle\n - https://www.npmjs.com/package/codelyzer\n - https://www.w3.org/TR/custom-elements/\n-->"
}