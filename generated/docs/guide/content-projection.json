{
  "id": "guide/content-projection",
  "title": "内容投影",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/content-projection.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"content-projection\">Content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#content-projection\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"内容投影\">内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#内容投影\"><i class=\"material-icons\">link</i></a></h1>\n<p>This topic describes how to use content projection to create flexible, reusable components.</p>\n<p>本主题描述如何使用内容投影来创建灵活的可复用组件。</p>\n<div class=\"alert is-helpful\">\n<p>To view or download the example code used in this topic, see the <live-example></live-example>.</p>\n<p>要查看或下载本主题中用到的示例代码，请参见<live-example></live-example>。</p>\n</div>\n<p>Content projection is a pattern in which you insert, or <em>project</em>, the content you want to use inside another component.\nFor example, you could have a <code>Card</code> component that accepts content provided by another component.</p>\n<p>内容投影是一种模式，你可以在其中插入或<em>投影</em>要在另一个组件中使用的内容。比如，你可能有一个 <code>Card</code> 组件，它可以接受另一个组件提供的内容。</p>\n<p>The following sections describe common implementations of content projection in Angular, including:</p>\n<p>以下各节介绍了 Angular 中内容投影的常见实现，包括：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Content projection</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">内容投影</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#single-slot\">Single-slot content projection</a></td>\n<td align=\"left\">With this type of content projection, a component accepts content from a single source.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#single-slot\">单槽内容投影</a></td>\n<td align=\"left\">使用这种类型的内容投影，组件可以从单一来源接受内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#multi-slot\">Multi-slot content projection</a></td>\n<td align=\"left\">In this scenario, a component accepts content from multiple sources.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#multi-slot\">多槽内容投影</a></td>\n<td align=\"left\">在这种情况下，组件可以从多个来源接受内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#conditional\">Conditional content projection</a></td>\n<td align=\"left\">Components that use conditional content projection render content only when specific conditions are met.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#conditional\">条件内容投影</a></td>\n<td align=\"left\">使用条件内容投影的组件仅在满足特定条件时才渲染内容。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"single-slot\"></a></p>\n<h2 id=\"single-slot-content-projection\">Single-slot content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#single-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"单插槽内容投影\">单插槽内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#单插槽内容投影\"><i class=\"material-icons\">link</i></a></h2>\n<p>The most basic form of content projection is <em>single-slot content projection</em>.\nSingle-slot content projection refers to creating a component into which you can project one component.</p>\n<p>内容投影的最基本形式是<em>单插槽内容投影</em>。单插槽内容投影是指创建一个组件，你可以在其中投影一个组件。</p>\n<p>To create a component that uses single-slot content projection:</p>\n<p>要创建使用单插槽内容投影的组件，请执行以下操作：</p>\n<ol>\n<li>\n<p><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n<p><a href=\"guide/component-overview#creating-a-component\">创建一个组件</a>。</p>\n</li>\n<li>\n<p>In the template for your component, add an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element where you want the projected content to appear.</p>\n<p>在组件模板中，添加 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素，让你希望投影的内容出现在其中。</p>\n</li>\n</ol>\n<p>For example, the following component uses an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element to display a message.</p>\n<p>比如，以下组件使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素来显示消息。</p>\n<code-example header=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\" path=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-basic',\n  template: `\n    &#x3C;h2>Single-slot content projection&#x3C;/h2>\n    &#x3C;ng-content>&#x3C;/ng-content>\n  `\n})\nexport class ZippyBasicComponent {}\n\n\n</code-example>\n<p>With the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element in place, users of this component can now project their own message into the component.\nFor example:</p>\n<p>有了 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素，该组件的用户现在可以将自己的消息投影到该组件中。比如：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"single-slot\">\n&#x3C;app-zippy-basic>\n  &#x3C;p>Is content projection cool?&#x3C;/p>\n&#x3C;/app-zippy-basic>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element is a placeholder that does not create a real DOM element.\nCustom attributes applied to <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> are ignored.</p>\n<p><code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素是一个占位符，它不会创建真正的 DOM 元素。<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 的那些自定义属性将被忽略。</p>\n</div>\n<p><a id=\"multi-slot\"></a></p>\n<h2 id=\"multi-slot-content-projection\">Multi-slot content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#multi-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"多插槽内容投影\">多插槽内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#多插槽内容投影\"><i class=\"material-icons\">link</i></a></h2>\n<p>A component can have multiple slots.\nEach slot can specify a CSS selector that determines which content goes into that slot.\nThis pattern is referred to as <em>multi-slot content projection</em>.\nWith this pattern, you must specify where you want the projected content to appear.\nYou accomplish this task by using the <code>select</code> attribute of <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code>.</p>\n<p>一个组件可以具有多个插槽。每个插槽可以指定一个 CSS 选择器，该选择器会决定将哪些内容放入该插槽。该模式称为<em>多插槽内容投影</em>。使用此模式，你必须指定希望投影内容出现在的位置。你可以通过使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 的 <code>select</code> 属性来完成此任务。</p>\n<p>To create a component that uses multi-slot content projection:</p>\n<p>要创建使用多插槽内容投影的组件，请执行以下操作：</p>\n<ol>\n<li>\n<p><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n<p><a href=\"guide/component-overview\">创建</a>一个组件。</p>\n</li>\n<li>\n<p>In the template for your component, add an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element where you want the projected content to appear.</p>\n<p>在组件模板中，添加 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素，让你希望投影的内容出现在其中。</p>\n</li>\n<li>\n<p>Add a <code>select</code> attribute to the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> elements.\nAngular supports <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">selectors</a> for any combination of tag name, attribute, CSS class, and the <code>:not</code> pseudo-class.</p>\n<p>将 <code>select</code> 属性添加到 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素上。Angular 使用的<a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">选择器</a>支持标签名、属性、CSS 类和 <code>:not</code> 伪类的任意组合。</p>\n<p>For example, the following component uses two  <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> elements.</p>\n<p>比如，以下组件会使用两个 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素。</p>\n<code-example header=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\" path=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-multislot',\n  template: `\n    &#x3C;h2>Multi-slot content projection&#x3C;/h2>\n\n    Default:\n    &#x3C;ng-content>&#x3C;/ng-content>\n\n    Question:\n    &#x3C;ng-content select=\"[question]\">&#x3C;/ng-content>\n  `\n})\nexport class ZippyMultislotComponent {}\n\n\n</code-example>\n</li>\n</ol>\n<p>Content that uses the <code>question</code> attribute is projected into the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element with the <code>select=[question]</code> attribute.</p>\n<p>使用 <code>question</code> 属性的内容将投影到带有 <code>select=[question]</code> 属性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素。</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&#x3C;app-zippy-multislot>\n  &#x3C;p question>\n    Is content projection cool?\n  &#x3C;/p>\n  &#x3C;p>Let's learn about content projection!&#x3C;/p>\n&#x3C;/app-zippy-multislot>\n\n</code-example>\n<div class=\"callout is-helpful\">\n<header>ng-content without a select attribute</header>\n<header>不带 select 属性的 ng-content</header>\n<p>If your component includes an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element without a <code>select</code> attribute, that instance receives all projected components that do not match any of the other <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> elements.</p>\n<p>如果你的组件包含不带 <code>select</code> 属性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素，则该实例将接收所有与其他 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素都不匹配的投影组件。</p>\n<p>In the preceding example, only the second <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element defines a <code>select</code> attribute.\nAs a result, the first <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element receives any other content projected into the component.</p>\n<p>在前面的示例中，只有第二个 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素定义了 <code>select</code> 属性。结果，第一个 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 就会元素接收投影到组件中的任何其他内容。</p>\n</div>\n<p><a id=\"conditional\"></a></p>\n<h2 id=\"conditional-content-projection\">Conditional content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#conditional-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"有条件的内容投影\">有条件的内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#有条件的内容投影\"><i class=\"material-icons\">link</i></a></h2>\n<p>If your component needs to <em>conditionally</em> render content, or render content multiple times, you should configure that component to accept an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element that contains the content you want to conditionally render.</p>\n<p>如果你的组件需要<em>有条件地</em>渲染内容或多次渲染内容，则应配置该组件以接受一个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素，其中包含要有条件渲染的内容。</p>\n<p>Using an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element in these cases is not recommended, because when the consumer of a component supplies the content, that content is <em>always</em> initialized, even if the component does not define an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element or if that <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element is inside of an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> statement.</p>\n<p>在这种情况下，不建议使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素，因为只要组件的使用者提供了内容，即使该组件从未定义 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素或该 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> 元素位于 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 语句的内部，该内容也总会被初始化。</p>\n<p>With an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, you can have your component explicitly render content based on any condition you want, as many times as you want.\nAngular will not initialize the content of an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element until that element is explicitly rendered.</p>\n<p>使用 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素，你可以让组件根据你想要的任何条件显式渲染内容，并可以进行多次渲染。在显式渲染 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素之前，Angular 不会初始化该元素的内容。</p>\n<p>The following steps demonstrate a typical implementation of conditional content projection using <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code>.</p>\n<p><code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 进行条件内容投影的典型实现。</p>\n<ol>\n<li>\n<p><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n<p><a href=\"guide/component-overview#creating-a-component\">创建一个组件</a>。</p>\n</li>\n<li>\n<p>In the component that accepts an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, use an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element to render that template, such as:</p>\n<p>在接受 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素的组件中，使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 元素渲染该模板，比如：</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ng-container\">\n&#x3C;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\">&#x3C;/ng-container>\n\n</code-example>\n<p>This example uses the <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive to render a given <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, which you will define in a later step.\nYou can apply an <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive to any type of element.\nThis example assigns the directive to an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element because the component does not need to render a real DOM element.</p>\n<p>本示例使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令来渲染给定的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素，你将在后续步骤中对其进行定义。你可以将 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令应用于任何类型的元素。本示例就将该指令分配给了 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 元素，因为该组件不需要渲染真实的 DOM 元素。</p>\n</li>\n<li>\n<p>Wrap the <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element in another element, such as a <code>div</code> element, and apply your conditional logic.</p>\n<p>将 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 元素包装在另一个元素（比如 <code>div</code> 元素）中，然后应用条件逻辑。</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ngif\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"expanded\" [id]=\"contentId\">\n    &#x3C;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\">&#x3C;/ng-container>\n&#x3C;/div>\n\n</code-example>\n</li>\n<li>\n<p>In the template where you want to project content, wrap the projected content in an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, such as:</p>\n<p>在要投影内容的模板中，将投影的内容包装在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素中，比如：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" region=\"ng-template\" path=\"content-projection/src/app/app.component.html\">\n&#x3C;ng-template appExampleZippyContent>\n  It depends on what you do with it.\n&#x3C;/ng-template>\n\n</code-example>\n<p>The <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element defines a block of content that a component can render based on its own logic.\nA component can get a reference to this template content, or <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, by using either the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> or <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> decorators.\nThe preceding example creates a custom directive, <code>appExampleZippyContent</code>, as an API to mark the <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> for the component's content.\nWith the <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, the component can render the referenced content by using either the <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive, or with the <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> method <code>createEmbeddedView()</code>.</p>\n<p>这个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素定义了一个组件可以根据其自身逻辑渲染的内容块。组件可以使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 或 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 装饰器获得对此模板内容的引用（即 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）。前面的示例创建了一个自定义指令 <code>appExampleZippyContent</code> 作为 API，以将 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 标记为组件内容。借助这个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>，组件可以使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令或 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法来渲染所引用的内容。</p>\n</li>\n<li>\n<p><a href=\"guide/attribute-directives#building-an-attribute-directive\">Create an attribute directive</a> with a selector that matches the custom attribute for your template.\nIn this directive, inject a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance.</p>\n<p><a href=\"guide/attribute-directives#building-an-attribute-directive\">创建一个属性型指令</a>，它具有与这个模板的自定义属性相匹配的选择器。在此指令中，注入 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 实例。</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"zippycontentdirective\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appExampleZippyContent]'\n})\nexport class ZippyContentDirective {\n  constructor(public templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;unknown>) {}\n}\n\n</code-example>\n<p>In the previous step, you added an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element with a custom attribute, <code>appExampleZippyContent</code>.\nThis code provides the logic that Angular will use when it encounters that custom attribute.\nIn this case, that logic instructs Angular to instantiate a template reference.</p>\n<p>在上一步中，你已添加了具有自定义属性 <code>appExampleZippyContent</code> 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> 元素。这段代码提供了当 Angular 遇到该自定义属性时要使用的逻辑。在这里，该逻辑指示 Angular 实例化这个模板引用。</p>\n</li>\n<li>\n<p>In the component you want to project content into, use <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> to get the template of the projected content.</p>\n<p>在你要将内容投影到的组件中，使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 获取此投影内容的模板。</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"contentchild\">\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(ZippyContentDirective) content!: ZippyContentDirective;\n\n</code-example>\n<p>Prior to this step, your application has a component that instantiates a template when certain conditions are met.\nYou've also created a directive that provides a reference to that template.\nIn this last step, the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> decorator instructs Angular to instantiate the template in the designated component.</p>\n<p>在执行此步骤之前，你的应用具有一个组件，它会在满足某些条件时实例化此模板。你还创建了一个指令，该指令能提供对该模板的引用。在最后一步中，<code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 装饰器指示 Angular 实例化指定组件中的模板。</p>\n<div class=\"alert is-helpful\">\n<p>In the case of multi-slot content projection, use <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> to get a <code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code> of projected elements.</p>\n<p>如果是多插槽内容投影，则可以使用 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 获取投影元素的查询列表（<code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code>）。</p>\n</div>\n</li>\n</ol>\n<p><a id=\"ngprojectas \"></a></p>\n<h2 id=\"projecting-content-in-more-complex-environments\">Projecting content in more complex environments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#projecting-content-in-more-complex-environments\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"在更复杂的环境中投影内容\">在更复杂的环境中投影内容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#在更复杂的环境中投影内容\"><i class=\"material-icons\">link</i></a></h2>\n<p>As described in <a href=\"guide/content-projection#multi-slot\">Multi-slot Content Projection</a>, you typically use either an attribute, element, CSS Class, or some combination of all three to identify where to project your content.\nFor example, in the following HTML template, a paragraph tag uses a custom attribute, <code>question</code>, to project content into the <code>app-zippy-multislot</code> component.</p>\n<p>如<a href=\"guide/content-projection#multi-slot\">多插槽内容投影</a>中所述，你通常会使用属性、元素、CSS 类或这三者的某种组合来标识将内容投影到何处。比如，在以下 HTML 模板中，p 标签会使用自定义属性 <code>question</code> 将内容投影到 <code>app-zippy-multislot</code> 组件中。</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&#x3C;app-zippy-multislot>\n  &#x3C;p question>\n    Is content projection cool?\n  &#x3C;/p>\n  &#x3C;p>Let's learn about content projection!&#x3C;/p>\n&#x3C;/app-zippy-multislot>\n\n</code-example>\n<p>In some cases, you might want to project content as a different element.\nFor example, the content you want to project might be a child of another element.\nAccomplish this with the <code>ngProjectAs</code> attribute.</p>\n<p>在某些情况下，你可能希望将内容投影为其他元素。比如，你要投影的内容可能是另一个元素的子元素。可以用 <code>ngProjectAs</code> 属性来完成此操作。</p>\n<p>For instance, consider the following HTML snippet:</p>\n<p>比如，考虑以下 HTML 代码段：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"ngprojectas\">\n&#x3C;ng-container ngProjectAs=\"[question]\">\n  &#x3C;p>Is content projection cool?&#x3C;/p>\n&#x3C;/ng-container>\n\n</code-example>\n<p>This example uses an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> attribute to simulate projecting a component into a more complex structure.</p>\n<p>本示例使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 属性来模拟将组件投影到更复杂的结构中。</p>\n<div class=\"callout is-helpful\">\n<header>Reminder!</header>\n<header>注意！</header>\n<p>The <code>ng-container</code> element is a logical construct that is used to group other DOM elements; however, the <code>ng-container</code> itself is not rendered in the DOM tree.</p>\n<p><code>ng-container</code> 元素是一个逻辑结构，可用于对其他 DOM 元素进行分组；但是，<code>ng-container</code> 本身不会在 DOM 树中渲染。</p>\n</div>\n<p>In this example, the content we want to project resides inside another element.\nTo project this content as intended, the template uses the <code>ngProjectAs</code> attribute.\nWith <code>ngProjectAs</code>, the entire <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element is projected into a component using the <code>[question]</code> selector.</p>\n<p>在这个例子中，我们要投影的内容位于另一个元素内。为了按预期方式投影此内容，此模板使用了 <code>ngProjectAs</code> 属性。有了 <code>ngProjectAs</code>，就可以用 <code>[question]</code> 选择器将整个 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> 元素投影到组件中。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/QueryList\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - guide/attribute-directives#building-an-attribute-directive\n - guide/component-overview\n - guide/component-overview#creating-a-component\n - guide/content-projection#conditional\n - guide/content-projection#conditional-content-projection\n - guide/content-projection#content-projection\n - guide/content-projection#multi-slot\n - guide/content-projection#multi-slot-content-projection\n - guide/content-projection#projecting-content-in-more-complex-environments\n - guide/content-projection#single-slot\n - guide/content-projection#single-slot-content-projection\n - guide/content-projection#内容投影\n - guide/content-projection#单插槽内容投影\n - guide/content-projection#在更复杂的环境中投影内容\n - guide/content-projection#多插槽内容投影\n - guide/content-projection#有条件的内容投影\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/content-projection.md?message=docs%3A%20请简述你的修改...\n-->"
}