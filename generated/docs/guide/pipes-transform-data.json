{
  "id": "guide/pipes-transform-data",
  "title": "使用参数和管道链来格式化数据",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/pipes-transform-data.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"transforming-data-with-parameters-and-chained-pipes\">Transforming data with parameters and chained pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#transforming-data-with-parameters-and-chained-pipes\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"使用参数和管道链来格式化数据\">使用参数和管道链来格式化数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#使用参数和管道链来格式化数据\"><i class=\"material-icons\">link</i></a></h1>\n<p>Use optional parameters to fine-tune a pipe's output.\nFor example, use the <a href=\"api/common/CurrencyPipe\" title=\"API reference\"><code>CurrencyPipe</code></a> with a country code such as EUR as a parameter.\nThe template expression <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> transforms the <code>amount</code> to currency in euros.\nFollow the pipe name (<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>) with a colon (<code>:</code>) and the parameter value (<code>'EUR'</code>).</p>\n<p>可以用可选参数微调管道的输出。比如，你可以使用 <a href=\"api/common/CurrencyPipe\" title=\"API 参考\"><code>CurrencyPipe</code></a> 和国家代码（如 EUR）作为参数。模板表达式 <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> 会把 <code>amount</code> 转换成欧元。紧跟在管道名称（<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>）后面的是冒号（<code>:</code>）和参数值（<code>'EUR'</code>）。</p>\n<p>If the pipe accepts multiple parameters, separate the values with colons.\nFor example, <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'Euros '}}</code> adds the second parameter, the string literal <code>'Euros '</code>, to the output string. Use any valid template expression as a parameter, such as a string literal or a component property.</p>\n<p>如果管道能接受多个参数，就用冒号分隔这些值。比如，<code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'Euros '}}</code> 会把第二个参数（字符串 <code>'Euros '</code>）添加到输出字符串中。你可以使用任何有效的模板表达式作为参数，比如字符串字面量或组件的属性。</p>\n<p>Some pipes require at least one parameter and allow more optional parameters, such as <a href=\"api/common/SlicePipe\" title=\"API reference for SlicePipe\"><code>SlicePipe</code></a>. For example, <code>{{ slice:1:5 }}</code> creates a new array or string containing a subset of the elements starting with element <code>1</code> and ending with element <code>5</code>.</p>\n<p>有些管道需要至少一个参数，并且允许使用更多的可选参数，比如 <a href=\"api/common/SlicePipe\" title=\"SlicePipe 的 API 参考\"><code>SlicePipe</code></a>。比如，<code>{{ slice:1:5 }}</code> 会创建一个新数组或字符串，它以第 <code>1</code> 个元素开头，并以第 <code>5</code> 个元素结尾。</p>\n<h2 id=\"example-formatting-a-date\">Example: Formatting a date<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#example-formatting-a-date\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"范例格式化日期\">范例：格式化日期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#范例格式化日期\"><i class=\"material-icons\">link</i></a></h2>\n<p>The tabs in the following example demonstrates toggling between two different formats (<code>'shortDate'</code> and <code>'fullDate'</code>):</p>\n<p>下面的例子显示了两种不同格式（<code>'shortDate'</code> 和 <code>'fullDate'</code>）之间的切换：</p>\n<ul>\n<li>\n<p>The <code>app.component.html</code> template uses a format parameter for the <a href=\"api/common/DatePipe\"><code>DatePipe</code></a> (named <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>) to show the date as <strong>04/15/88</strong>.</p>\n<p>该 <code>app.component.html</code> 模板使用 <a href=\"api/common/DatePipe\"><code>DatePipe</code></a>（名为 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>）的格式参数把日期显示为 <strong>04/15/88</strong>。</p>\n</li>\n<li>\n<p>The <code>hero-birthday2.component.ts</code> component binds the pipe's format parameter to the component's <code>format</code> property in the <code>template</code> section, and adds a button for a click event bound to the component's <code>toggleFormat()</code> method.</p>\n<p><code>hero-birthday2.component.ts</code> 组件把该管道的 format 参数绑定到 <code>template</code> 中组件的 <code>format</code> 属性，并添加了一个按钮，其 click 事件绑定到了该组件的 <code>toggleFormat()</code> 方法。</p>\n</li>\n<li>\n<p>The <code>hero-birthday2.component.ts</code> component's <code>toggleFormat()</code> method toggles the component's <code>format</code> property between a short form\n(<code>'shortDate'</code>) and a longer form (<code>'fullDate'</code>).</p>\n<p><code>hero-birthday2.component.ts</code> 组件的 <code>toggleFormat()</code> 方法会在短格式（<code>'shortDate'</code>）和长格式（<code>'fullDate'</code>）之间切换该组件的 <code>format</code> 属性。</p>\n</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html\" region=\"format-birthday\" path=\"pipes/src/app/app.component.html\">\n&#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:\"MM/dd/yy\" }} &#x3C;/p>\n\n</code-pane>\n    <code-pane header=\"src/app/hero-birthday2.component.ts (template)\" region=\"template\" path=\"pipes/src/app/hero-birthday2.component.ts\">\ntemplate: `\n  &#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:format }}&#x3C;/p>\n  &#x3C;button type=\"button\" (click)=\"toggleFormat()\">Toggle Format&#x3C;/button>\n`\n\n</code-pane>\n    <code-pane header=\"src/app/hero-birthday2.component.ts (class)\" region=\"class\" path=\"pipes/src/app/hero-birthday2.component.ts\">\nexport class HeroBirthday2Component {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n  toggle = true; // start with true == shortDate\n\n  get format()   { return this.toggle ? 'shortDate' : 'fullDate'; }\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>Clicking the <strong>Toggle Format</strong> button alternates the date format between <strong>04/15/1988</strong> and <strong>Friday, April 15, 1988</strong>.</p>\n<p>点击 <strong>Toggle Format</strong> 按钮可以在 <strong>04/15/1988</strong> 和 <strong>Friday, April 15, 1988</strong> 之间切换日期格式。</p>\n<div class=\"alert is-helpful\">\n<p>For <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe format options, see <a href=\"api/common/DatePipe\" title=\"DatePipe API Reference page\">DatePipe</a>.</p>\n<p>关于 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道的格式选项，参阅 <a href=\"api/common/DatePipe\" title=\"DatePipe API 参考手册页面\">DatePipe</a>。</p>\n</div>\n<h2 id=\"example-applying-two-formats-by-chaining-pipes\">Example: Applying two formats by chaining pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#example-applying-two-formats-by-chaining-pipes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"范例通过串联管道应用两种格式\">范例：通过串联管道应用两种格式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#范例通过串联管道应用两种格式\"><i class=\"material-icons\">link</i></a></h2>\n<p>Chain pipes so that the output of one pipe becomes the input to the next.</p>\n<p>可以对管道进行串联，以便一个管道的输出成为下一个管道的输入。</p>\n<p>In the following example, chained pipes first apply a format to a date value, then convert the formatted date to uppercase characters.\nThe first tab for the <code>src/app/app.component.html</code> template chains <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> and <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code> to display the birthday as <strong>APR 15, 1988</strong>.\nThe second tab for the <code>src/app/app.component.html</code> template passes the <code>fullDate</code> parameter to <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> before chaining to <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code>, which produces <strong>FRIDAY, APRIL 15, 1988</strong>.</p>\n<p>在下面的范例中，串联管道首先将格式应用于一个日期值，然后将格式化之后的日期转换为大写字符。<code>src/app/app.component.html</code> 模板的第一个标签页把 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> 和 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code> 的串联起来，将其显示为 <strong>APR 15, 1988</strong>。<code>src/app/app.component.html</code> 模板的第二个标签页在串联 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 之前，还把 <code>fullDate</code> 参数传给了 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>，将其显示为 <strong>FRIDAY, APRIL 15, 1988</strong>。</p>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html (1)\" region=\"chained-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero's birthday is\n{{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html (2)\" region=\"chained-parameter-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero's birthday is\n{{  birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate' | uppercase}}\n\n</code-pane>\n</code-tabs>\n\n  <div class=\"reviewed\">最后复查时间： 4/1/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - guide/pipes-transform-data#example-applying-two-formats-by-chaining-pipes\n - guide/pipes-transform-data#example-formatting-a-date\n - guide/pipes-transform-data#transforming-data-with-parameters-and-chained-pipes\n - guide/pipes-transform-data#使用参数和管道链来格式化数据\n - guide/pipes-transform-data#范例格式化日期\n - guide/pipes-transform-data#范例通过串联管道应用两种格式\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/pipes-transform-data.md?message=docs%3A%20请简述你的修改...\n-->"
}