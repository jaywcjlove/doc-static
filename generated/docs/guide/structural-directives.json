{
  "id": "guide/structural-directives",
  "title": "Structural directives",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/structural-directives.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"structural-directives\" translation-result=\"on\">结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"structural-directives\">Structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n\n</style>\n<p translation-result=\"on\">本章将看看 Angular 如何用<em>结构型指令</em>操纵 DOM 树，以及你该如何写自己的结构型指令来完成同样的任务。</p><p translation-origin=\"off\">This guide looks at how Angular manipulates the DOM with <strong>structural directives</strong> and\nhow you can write your own structural directives to do the same thing.</p>\n\n<p translation-result=\"on\">试试<live-example></live-example>。</p><p translation-origin=\"off\">Try the <live-example></live-example>.</p>\n\n<a id=\"definition\"></a>\n<h2 id=\"what-are-structural-directives\" translation-result=\"on\">什么是结构型指令？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#what-are-structural-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-are-structural-directives\">What are structural directives?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#what-are-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">结构型指令的职责是 HTML 布局。\n它们塑造或重塑 DOM 的结构，比如添加、移除或维护这些元素。</p><p translation-origin=\"off\">Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's <em>structure</em>, typically by adding, removing, or manipulating\nelements.</p>\n\n<p translation-result=\"on\">像其它指令一样，你可以把结构型指令应用到一个<em>宿主元素</em>上。\n然后它就可以对宿主元素及其子元素做点什么。</p><p translation-origin=\"off\">As with other directives, you apply a structural directive to a <em>host element</em>.\nThe directive then does whatever it's supposed to do with that host element and its descendants.</p>\n\n<p translation-result=\"on\">结构型指令非常容易识别。\n在这个例子中，星号（*）被放在指令的属性名之前。</p><p translation-origin=\"off\">Structural directives are easy to recognize.\nAn asterisk (*) precedes the directive attribute name as in this example.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif)\" region=\"ngif\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\">{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">没有方括号，没有圆括号，只是把 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 设置为一个字符串。</p><p translation-origin=\"off\">No brackets. No parentheses. Just <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> set to a string.</p>\n\n<p translation-result=\"on\">在这个例子中，你将学到<a href=\"guide/structural-directives#asterisk\">星号(*)这个简写方法</a>，而这个字符串是一个<a href=\"guide/structural-directives#microsyntax\"><em>微语法</em></a>，而不是通常的<a href=\"guide/template-syntax#template-expressions\">模板表达式</a>。\nAngular 会解开这个语法糖，变成一个 <code>&#x3C;ng-template></code> 标记，包裹着宿主元素及其子元素。\n每个结构型指令都可以用这个模板做点不同的事情。</p><p translation-origin=\"off\">You'll learn in this guide that the <a href=\"guide/structural-directives#asterisk\">asterisk (*) is a convenience notation</a>\nand the string is a <a href=\"guide/structural-directives#microsyntax\"><em>microsyntax</em></a> rather than the usual\n<a href=\"guide/template-syntax#template-expressions\">template expression</a>.\nAngular desugars this notation into a marked-up <code>&#x3C;ng-template></code> that surrounds the\nhost element and its descendents.\nEach structural directive does something different with that template.</p>\n\n<p translation-result=\"on\">三个常用的内置结构型指令 —— <a href=\"guide/template-syntax#ngIf\">NgIf</a>、<a href=\"guide/template-syntax#ngFor\">NgFor</a>和<a href=\"guide/template-syntax#ngSwitch\">NgSwitch...</a>。\n你在<a href=\"guide/template-syntax\"><em>模板语法</em></a>一章中学过它，并且在 Angular 文档的例子中到处都在用它。下面是模板中的例子：</p><p translation-origin=\"off\">Three of the common, built-in structural directives—<a href=\"guide/template-syntax#ngIf\">NgIf</a>,\n<a href=\"guide/template-syntax#ngFor\">NgFor</a>, and <a href=\"guide/template-syntax#ngSwitch\">NgSwitch...</a>—are\ndescribed in the <a href=\"guide/template-syntax\"><em>Template Syntax</em></a> guide and seen in samples throughout the Angular documentation.\nHere's an example of them in a template:</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (built-in)\" region=\"built-in\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\">{{hero.name}}&#x3C;/div>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero.name}}&#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\">\n  &#x3C;app-happy-hero    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'happy'\"    [hero]=\"hero\">&#x3C;/app-happy-hero>\n  &#x3C;app-sad-hero      *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'sad'\"      [hero]=\"hero\">&#x3C;/app-sad-hero>\n  &#x3C;app-confused-hero *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'confused'\" [hero]=\"hero\">&#x3C;/app-confused-hero>\n  &#x3C;app-unknown-hero  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [hero]=\"hero\">&#x3C;/app-unknown-hero>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">本章不会重复讲如何<em>使用</em>它们，而是解释它们的<em>工作原理</em>以及如何<a href=\"guide/structural-directives#unless\">写自己的结构型指令</a>。</p><p translation-origin=\"off\">This guide won't repeat how to <em>use</em> them. But it does explain <em>how they work</em>\nand how to <a href=\"guide/structural-directives#unless\">write your own</a> structural directive.</p>\n\n<div class=\"callout is-helpful\">\n<header translation-result=\"on\">指令的拼写形式</header><header translation-origin=\"off\">\n  Directive spelling\n</header>\n\n<p translation-result=\"on\">在本章中，你将看到指令同时具有两种拼写形式<em>大驼峰 <code>UpperCamelCase</code> 和小驼峰 <code>lowerCamelCase</code>，比如你已经看过的 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。\n这里的原因在于，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 引用的是指令的</em>类名<em>，而 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 引用的是指令的</em>属性名*。</p><p translation-origin=\"off\">Throughout this guide, you'll see a directive spelled in both <em>UpperCamelCase</em> and <em>lowerCamelCase</em>.\nAlready you've seen <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>.\nThere's a reason. <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> refers to the directive <em>class</em>;\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> refers to the directive's <em>attribute name</em>.</p>\n\n<p translation-result=\"on\">指令的<em>类名</em>拼写成<em>大驼峰形式</em>（<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>），而它的<em>属性名</em>则拼写成<em>小驼峰形式</em>（<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>）。\n本章会在谈论指令的属性和工作原理时引用指令的<em>类名</em>，在描述如何在 HTML 模板中把该指令应用到元素时，引用指令的<em>属性名</em>。</p><p translation-origin=\"off\">A directive <em>class</em> is spelled in <em>UpperCamelCase</em> (<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>).\nA directive's <em>attribute name</em> is spelled in <em>lowerCamelCase</em> (<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>).\nThe guide refers to the directive <em>class</em> when talking about its properties and what the directive does.\nThe guide refers to the <em>attribute name</em> when describing how\nyou apply the directive to an element in the HTML template.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">还有另外两种 Angular 指令，在本开发指南的其它地方有讲解：(1) 组件 (2) 属性型指令。</p><p translation-origin=\"off\">There are two other kinds of Angular directives, described extensively elsewhere:\n(1) components and (2) attribute directives.</p>\n\n<p translation-result=\"on\"><em>组件</em>可以在原生 HTML 元素中管理一小片区域的 HTML。从技术角度说，它就是一个带模板的指令。</p><p translation-origin=\"off\">A <em>component</em> manages a region of HTML in the manner of a native HTML element.\nTechnically it's a directive with a template.</p>\n\n<p translation-result=\"on\"><a href=\"guide/attribute-directives\"><em>属性型</em>指令</a>会改变某个元素、组件或其它指令的外观或行为。\n比如，内置的<a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a>指令可以同时修改元素的多个样式。</p><p translation-origin=\"off\">An <a href=\"guide/attribute-directives\"><em>attribute</em> directive</a> changes the appearance or behavior\nof an element, component, or another directive.\nFor example, the built-in <a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a> directive\nchanges several element styles at the same time.</p>\n\n<p translation-result=\"on\">你可以在一个宿主元素上应用多个<em>属性型</em>指令，但<a href=\"guide/structural-directives#one-per-element\">只能应用一个</a><em>结构型</em>指令。</p><p translation-origin=\"off\">You can apply many <em>attribute</em> directives to one host element.\nYou can <a href=\"guide/structural-directives#one-per-element\">only apply one</a> <em>structural</em> directive to a host element.</p>\n\n</div>\n<a id=\"ngIf\"></a>\n<h2 id=\"ngif-case-study\" translation-result=\"on\">NgIf 案例分析<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#ngif-case-study\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"ngif-case-study\">NgIf case study<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#ngif-case-study\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 是一个很好的结构型指令案例：它接受一个布尔值，并据此让一整块 DOM 树出现或消失。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is the simplest structural directive and the easiest to understand.\nIt takes a boolean expression and makes an entire chunk of the DOM appear or disappear.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif-true)\" region=\"ngif-true\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\">\n  Expression is true and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is true.\n  This paragraph is in the DOM.\n&#x3C;/p>\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"false\">\n  Expression is false and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is false.\n  This paragraph is not in the DOM.\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令并不是使用 CSS 来隐藏元素的。它会把这些元素从 DOM 中物理删除。\n使用浏览器的开发者工具就可以确认这一点。</p><p translation-origin=\"off\">The <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive doesn't hide elements with CSS. It adds and removes them physically from the DOM.\nConfirm that fact using browser developer tools to inspect the DOM.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/element-not-in-dom.png\" alt=\"ngIf=false element not in DOM\" width=\"322\" height=\"114\">\n</div>\n<p translation-result=\"on\">可以看到第一段文字出现在了 DOM 中，而第二段则没有，在第二段的位置上是一个关于“绑定”的注释（<a href=\"guide/structural-directives#asterisk\">稍后</a>有更多讲解）。</p><p translation-origin=\"off\">The top paragraph is in the DOM. The bottom, disused paragraph is not;\nin its place is a comment about \"bindings\" (more about that <a href=\"guide/structural-directives#asterisk\">later</a>).</p>\n\n<p translation-result=\"on\">当条件为假时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会从 DOM 中移除它的宿主元素，取消它监听过的那些 DOM 事件，从 Angular 变更检测中移除该组件，并销毁它。\n这些组件和 DOM 节点可以被当做垃圾收集起来，并且释放它们占用的内存。</p><p translation-origin=\"off\">When the condition is false, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes its host element from the DOM,\ndetaches it from DOM events (the attachments that it made),\ndetaches the component from Angular change detection, and destroys it.\nThe component and DOM nodes can be garbage-collected and free up memory.</p>\n\n<h3 id=\"why-remove-rather-than-hide\" translation-result=\"on\">为什么<em>移除</em>而不是<em>隐藏</em>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#why-remove-rather-than-hide\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"why-remove-rather-than-hide\">Why <em>remove</em> rather than <em>hide</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#why-remove-rather-than-hide\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">指令也可以通过把它的 <code>display</code> 风格设置为 <code>none</code> 而隐藏不需要的段落。</p><p translation-origin=\"off\">A directive could hide the unwanted paragraph instead by setting its <code>display</code> style to <code>none</code>.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (display-none)\" region=\"display-none\">\n&#x3C;p [style.display]=\"'block'\">\n  Expression sets display to \"block\".\n  This paragraph is visible.\n&#x3C;/p>\n&#x3C;p [style.display]=\"'none'\">\n  Expression sets display to \"none\".\n  This paragraph is hidden but still in the DOM.\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">当不可见时，这个元素仍然留在 DOM 中。</p><p translation-origin=\"off\">While invisible, the element remains in the DOM.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/element-display-in-dom.png\" alt=\"hidden element still in DOM\" width=\"415\" height=\"185\">\n</div>\n<p translation-result=\"on\">对于简单的段落，隐藏和移除之间的差异影响不大，但对于资源占用较多的组件是不一样的。\n当隐藏掉一个元素时，组件的行为还在继续 —— 它仍然附加在它所属的 DOM 元素上，\n它也仍在监听事件。Angular 会继续检查哪些能影响数据绑定的变更。\n组件原本要做的那些事情仍在继续。</p><p translation-origin=\"off\">The difference between hiding and removing doesn't matter for a simple paragraph.\nIt does matter when the host element is attached to a resource intensive component.\nSuch a component's behavior continues even when hidden.\nThe component stays attached to its DOM element. It keeps listening to events.\nAngular keeps checking for changes that could affect data bindings.\nWhatever the component was doing, it keeps doing.</p>\n\n<p translation-result=\"on\">虽然不可见，组件及其各级子组件仍然占用着资源，而这些资源如果分配给别人可能会更有用。\n在性能和内存方面的负担相当可观，响应度会降低，而用户却可能无法从中受益。</p><p translation-origin=\"off\">Although invisible, the component—and all of its descendant components—tie up resources.\nThe performance and memory burden can be substantial, responsiveness can degrade, and the user sees nothing.</p>\n\n<p translation-result=\"on\">当然，从积极的一面看，重新显示这个元素会非常快。\n组件以前的状态被保留着，并随时可以显示。\n组件不用重新初始化 —— 该操作可能会比较昂贵。\n这时候隐藏和显示就成了正确的选择。</p><p translation-origin=\"off\">On the positive side, showing the element again is quick.\nThe component's previous state is preserved and ready to display.\nThe component doesn't re-initialize—an operation that could be expensive.\nSo hiding and showing is sometimes the right thing to do.</p>\n\n<p translation-result=\"on\">但是，除非有非常强烈的理由来保留它们，否则你会更倾向于移除用户看不见的那些 DOM 元素，并且使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 这样的结构型指令来收回用不到的资源。</p><p translation-origin=\"off\">But in the absence of a compelling reason to keep them around,\nyour preference should be to remove DOM elements that the user can't see\nand recover the unused resources with a structural directive like <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> .</p>\n\n<p translation-result=\"on\"><strong>同样的考量也适用于每一个结构型指令，无论是内置的还是自定义的。</strong>\n你应该提醒自己慎重考虑添加元素、移除元素以及创建和销毁组件的后果。</p><p translation-origin=\"off\"><strong>These same considerations apply to every structural directive, whether built-in or custom.</strong>\nBefore applying a structural directive, you might want to pause for a moment\nto consider the consequences of adding and removing elements and of creating and destroying components.</p>\n\n<a id=\"asterisk\"></a>\n<h2 id=\"the-asterisk--prefix\" translation-result=\"on\">星号（*）前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#the-asterisk--prefix\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-asterisk--prefix\">The asterisk (*) prefix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#the-asterisk--prefix\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能注意到了指令名的星号（*）前缀，并且困惑于为什么需要它以及它是做什么的。</p><p translation-origin=\"off\">Surely you noticed the asterisk (*) prefix to the directive name\nand wondered why it is necessary and what it does.</p>\n\n<p translation-result=\"on\">这里的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会在 <code>hero</code> 存在时显示英雄的名字。</p><p translation-origin=\"off\">Here is <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> displaying the hero's name if <code>hero</code> exists.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (asterisk)\" region=\"asterisk\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\">{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">星号是一个用来简化更复杂语法的“语法糖”。\n从内部实现来说，Angular 把 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> <em>属性</em> 翻译成一个 <code>&#x3C;ng-template></code> <em>元素</em> 并用它来包裹宿主元素，代码如下：</p><p translation-origin=\"off\">The asterisk is \"syntactic sugar\" for something a bit more complicated.\nInternally, Angular translates the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> <em>attribute</em> into a <code>&#x3C;ng-template></code> <em>element</em>, wrapped around the host element, like this.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif-template)\" region=\"ngif-template\">\n&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"hero\">\n  &#x3C;div class=\"name\">{{hero.name}}&#x3C;/div>\n&#x3C;/ng-template>\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"> <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令被移到了 <code>&#x3C;ng-template></code> 元素上。在那里它变成了一个属性绑定 <code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code>。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive moved to the <code>&#x3C;ng-template></code> element where it became a property binding,<code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>&#x3C;div></code> 上的其余部分，包括它的 <code>class</code> 属性在内，移到了内部的 <code>&#x3C;ng-template></code> 元素上。</p><p translation-origin=\"off\">The rest of the <code>&#x3C;div></code>, including its class attribute, moved inside the <code>&#x3C;ng-template></code> element.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">第一种形态永远不会真的渲染出来。\n只有最终产出的结果才会出现在 DOM 中。</p><p translation-origin=\"off\">The first form is not actually rendered, only the finished product ends up in the DOM.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/hero-div-in-dom.png\" alt=\"hero div in DOM\" width=\"330\" height=\"67\">\n</div>\n<p translation-result=\"on\">Angular 会在真正渲染的时候填充 <code>&#x3C;ng-template></code> 的内容，并且把 <code>&#x3C;ng-template></code> 替换为一个供诊断用的注释。</p><p translation-origin=\"off\">Angular consumed the <code>&#x3C;ng-template></code> content during its actual rendering and\nreplaced the <code>&#x3C;ng-template></code> with a diagnostic comment.</p>\n\n<p translation-result=\"on\"><a href=\"guide/structural-directives#ngFor\"><code>NgFor</code></a>和<a href=\"guide/structural-directives#ngSwitch\"><code>NgSwitch...</code></a>指令也都遵循同样的模式。</p><p translation-origin=\"off\">The <a href=\"guide/structural-directives#ngFor\"><code>NgFor</code></a> and <a href=\"guide/structural-directives#ngSwitch\"><code>NgSwitch...</code></a> directives follow the same pattern.</p>\n\n<a id=\"ngFor\"></a>\n<h2 id=\"inside-ngfor\" translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 内幕<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#inside-ngfor\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"inside-ngfor\">Inside <em>*ngFor</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#inside-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 会把 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 用同样的方式把星号（<code>*</code>）语法的 <code>template</code><em>属性</em>转换成 <code>&#x3C;ng-template></code><em>元素</em>。</p><p translation-origin=\"off\">Angular transforms the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> in similar fashion from asterisk (*) syntax to <code>&#x3C;ng-template></code> <em>element</em>.</p>\n\n<p translation-result=\"on\">这里有一个 <code>NgFor</code> 的全特性应用，同时用了这两种写法：</p><p translation-origin=\"off\">Here's a full-featured application of <code>NgFor</code>, written both ways:</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (inside-ngfor)\" region=\"inside-ngfor\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n  ({{i}}) {{hero.name}}\n&#x3C;/div>\n\n&#x3C;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\">\n  &#x3C;div [class.odd]=\"odd\">({{i}}) {{hero.name}}&#x3C;/div>\n&#x3C;/ng-template>\n\n</code-example>\n<p translation-result=\"on\">它明显比 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 复杂得多，确实如此。\n<code>NgFor</code> 指令比本章展示过的 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 具有更多的必选特性和可选特性。\n至少 <code>NgFor</code> 会需要一个循环变量（<code>let hero</code>）和一个列表（<code>heroes</code>）。</p><p translation-origin=\"off\">This is manifestly more complicated than <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and rightly so.\nThe <code>NgFor</code> directive has more features, both required and optional, than the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> shown in this guide.\nAt minimum <code>NgFor</code> needs a looping variable (<code>let hero</code>) and a list (<code>heroes</code>).</p>\n\n<p translation-result=\"on\">你可以通过把一个字符串赋值给 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 来启用这些特性，这个字符串使用 Angular 的<a href=\"guide/structural-directives#microsyntax\">微语法</a>。</p><p translation-origin=\"off\">You enable these features in the string assigned to <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, which you write in Angular's <a href=\"guide/structural-directives#microsyntax\">microsyntax</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 字符串<em>之外</em>的每一样东西都会留在宿主元素（<code>&#x3C;div></code>）上，也就是说它移到了 <code>&#x3C;ng-template></code> 内部。\n在这个例子中，<code>[class.odd]=\"odd\"</code> 留在了 <code>&#x3C;div></code> 上。</p><p translation-origin=\"off\">Everything <em>outside</em> the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> string stays with the host element\n(the <code>&#x3C;div></code>) as it moves inside the <code>&#x3C;ng-template></code>.\nIn this example, the <code>[class.odd]=\"odd\"</code> stays on the <code>&#x3C;div></code>.</p>\n\n</div>\n<a id=\"microsyntax\"></a>\n<h2 id=\"microsyntax\" translation-result=\"on\">微语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#microsyntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"microsyntax\">Microsyntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#microsyntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 微语法能让你通过简短的、友好的字符串来配置一个指令。\n微语法解析器把这个字符串翻译成 <code>&#x3C;ng-template></code> 上的属性：</p><p translation-origin=\"off\">The Angular microsyntax lets you configure a directive in a compact, friendly string.\nThe microsyntax parser translates that string into attributes on the <code>&#x3C;ng-template></code>:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   <code>let</code> 关键字声明一个<a href=\"guide/structural-directives#template-input-variable\">模板输入变量</a>，你会在模板中引用它。本例子中，这个输入变量就是 <code>hero</code>、<code>i</code> 和 <code>odd</code>。\n解析器会把 <code>let hero</code>、<code>let i</code> 和 <code>let odd</code> 翻译成命名变量 <code>let-hero</code>、<code>let-i</code> 和 <code>let-odd</code>。</p><p translation-origin=\"off\">The <code>let</code> keyword declares a <a href=\"guide/structural-directives#template-input-variable\"><em>template input variable</em></a>\nthat you reference within the template. The input variables in this example are <code>hero</code>, <code>i</code>, and <code>odd</code>.\nThe parser translates <code>let hero</code>, <code>let i</code>, and <code>let odd</code> into variables named\n<code>let-hero</code>, <code>let-i</code>, and <code>let-odd</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   微语法解析器接收 <code>of</code> 和 <code>trackby</code>，把它们首字母大写（<code>of</code> -> <code>Of</code>, <code>trackBy</code> -> <code>TrackBy</code>），\n并且给它们加上指令的属性名（<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>）前缀，最终生成的名字是 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a></code> 和 <code>ngForTrackBy</code>。\n这两个最终生成的名字是 <code>NgFor</code> 的<em>输入属性</em>，指令据此了解到列表是 <code>heroes</code>，而 track-by 函数是 <code>trackById</code>。</p><p translation-origin=\"off\">The microsyntax parser title-cases all directives and prefixes them with the directive's\nattribute name, such as <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. For example, the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> input properties,\n<code>of</code> and <code>trackBy</code>, become <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a></code> and <code>ngForTrackBy</code>, respectively.\nThat's how the directive learns that the list is <code>heroes</code> and the track-by function is <code>trackById</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>NgFor</code> 指令在列表上循环，每个循环中都会设置和重置它自己的<em>上下文</em>对象上的属性。\n这些属性包括但不限于 <code>index</code> 和 <code>odd</code> 以及一个特殊的属性名 <code>$implicit</code>（隐式变量）。</p><p translation-origin=\"off\">As the <code>NgFor</code> directive loops through the list, it sets and resets properties of its own <em>context</em> object.\nThese properties can include, but aren't limited to, <code>index</code>, <code>odd</code>, and a special property\nnamed <code>$implicit</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>let-i</code> 和 <code>let-odd</code> 变量是通过 <code>let i=index</code> 和 <code>let odd=odd</code> 来定义的。\nAngular 把它们设置为<em>上下文</em>对象中的 <code>index</code> 和 <code>odd</code> 属性的当前值。</p><p translation-origin=\"off\">The <code>let-i</code> and <code>let-odd</code> variables were defined as <code>let i=index</code> and <code>let odd=odd</code>.\nAngular sets them to the current value of the context's <code>index</code> and <code>odd</code> properties.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   这里并没有指定 <code>let-hero</code> 的上下文属性。它的来源是隐式的。\nAngular 将 <code>let-hero</code> 设置为此上下文中 <code>$implicit</code> 属性的值，\n它是由 <code>NgFor</code> 用当前迭代中的英雄初始化的。</p><p translation-origin=\"off\">The context property for <code>let-hero</code> wasn't specified.\nIts intended source is implicit.\nAngular sets <code>let-hero</code> to the value of the context's <code>$implicit</code> property,\nwhich <code>NgFor</code> has initialized with the hero for the current iteration.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <a href=\"api/common/NgForOf\" title=\"API: NgFor\">API 参考手册</a>中描述了 <code>NgFor</code> 指令的其它属性和上下文属性。</p><p translation-origin=\"off\">The <a href=\"api/common/NgForOf\" title=\"API: NgFor\"><code>NgFor</code> API guide</a>\ndescribes additional <code>NgFor</code> directive properties and context properties.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令实现了 <code>NgFor</code>。请到 <a href=\"api/common/NgForOf\">NgForOf API 参考手册</a>中了解 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令的更多属性及其上下文属性。</p><p translation-origin=\"off\">The <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive implements <code>NgFor</code>. Read more about additional <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive properties and context properties in the <a href=\"api/common/NgForOf\">NgForOf API reference</a>.</p>\n\n</li>\n</ul>\n<h3 id=\"writing-your-own-structural-directives\" translation-result=\"on\">编写你自己的结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#writing-your-own-structural-directives\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"writing-your-own-structural-directives\">Writing your own structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#writing-your-own-structural-directives\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当你编写自己的结构型指令时，也可以利用这些微语法机制。\n例如，Angular 中的微语法允许你写成 <code>&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item}}&#x3C;/div></code> 而不是 <code>&#x3C;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-item [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"items\">&#x3C;div>{{item}}&#x3C;/div>&#x3C;/ng-template></code>。\n以下各节提供了有关约束、语法和微语法翻译方式的详细信息。</p><p translation-origin=\"off\">These microsyntax mechanisms are also available to you when you write your own structural directives.\nFor example, microsyntax in Angular allows you to write <code>&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item}}&#x3C;/div></code>\ninstead of <code>&#x3C;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-item [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"items\">&#x3C;div>{{item}}&#x3C;/div>&#x3C;/ng-template></code>.\nThe following sections provide detailed information on constraints, grammar,\nand translation of microsyntax.</p>\n\n<h3 id=\"constraints\" translation-result=\"on\">约束<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#constraints\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"constraints\">Constraints<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#constraints\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">微语法必须满足以下要求：</p><p translation-origin=\"off\">Microsyntax must meet the following requirements:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">它必须可被预先了解，以便 IDE 可以解析它而无需知道指令的底层语义或已存在哪些指令。</p><p translation-origin=\"off\">It must be known ahead of time so that IDEs can parse it without knowing the underlying semantics of the directive or what directives are present.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">它必须转换为 DOM 中的“键-值”属性。</p><p translation-origin=\"off\">It must translate to key-value attributes in the DOM.</p>\n\n</li>\n</ul>\n<h3 id=\"grammar\" translation-result=\"on\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#grammar\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"grammar\">Grammar<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#grammar\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当你编写自己的结构型指令时，请使用以下语法：</p><p translation-origin=\"off\">When you write your own structural directives, use the following grammar:</p>\n\n<code-example>\n*:prefix=\"( :let | :expression ) (';' | ',')? ( :let | :as | :keyExp )*\"\n</code-example>\n<p translation-result=\"on\">下表描述了微语法的每个组成部分。</p><p translation-origin=\"off\">The following tables describe each portion of the microsyntax grammar.</p>\n\n<!-- What should I put in the table headers? -->\n<table>\n  <tbody><tr>\n    <th></th>\n    <th></th>\n  </tr>\n  <tr>\n    <td><code>prefix</code></td>\n    <td><p translation-result=\"on\">HTML 属性键（attribute key）</p><p translation-origin=\"off\">HTML attribute key</p></td>\n  </tr>\n  \n  <tr>\n    <td><code>key</code></td>\n    <td><p translation-result=\"on\">HTML 属性键（attribute key）</p><p translation-origin=\"off\">HTML attribute key</p></td>\n  </tr>\n  \n  <tr>\n    <td><code>local</code></td>\n    <td><p translation-result=\"on\">模板中使用的局部变量名</p><p translation-origin=\"off\">local variable name used in the template</p></td>\n  </tr>\n  \n  <tr>\n    <td><code>export</code></td>\n    <td><p translation-result=\"on\">指令使用指定名称导出的值</p><p translation-origin=\"off\">value exported by the directive under a given name</p></td>\n  </tr>\n  \n  <tr>\n    <td><code>expression</code></td>\n    <td><p translation-result=\"on\">标准 Angular 表达式</p><p translation-origin=\"off\">standard Angular expression</p></td>\n  </tr>\n  \n</tbody></table>\n<!-- The items in this table seem different. Is there another name for how we should describe them? -->\n<table>\n  <tbody><tr>\n    <th></th>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><code>keyExp = :key \":\"? :expression (\"as\" :local)? \";\"? </code></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><code>let = \"let\" :local \"=\" :export \";\"?</code></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><code>as = :export \"as\" :local \";\"?</code></td>\n  </tr>\n</tbody></table>\n<h3 id=\"translation\" translation-result=\"on\">翻译<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#translation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"translation\">Translation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#translation\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">将微语法转换为常规的绑定语法，如下所示：</p><p translation-origin=\"off\">A microsyntax is translated to the normal binding syntax as follows:</p>\n\n<!-- What to put in the table headers below? Are these correct?-->\n<table>\n  <tbody><tr>\n    <th><p translation-result=\"on\">微语法</p><p translation-origin=\"off\">Microsyntax</p></th>\n    <th><p translation-result=\"on\">翻译结果</p><p translation-origin=\"off\">Translation</p></th>\n  </tr>\n  \n  <tr>\n    <td><p translation-result=\"on\"><code>prefix</code> 和裸<code>表达式</code></p><p translation-origin=\"off\"><code>prefix</code> and naked <code>expression</code></p></td>\n    <td><code>[prefix]=\"expression\"</code></td>\n  </tr>\n  \n  <tr>\n    <td><code>keyExp</code></td>\n    <td><p translation-result=\"on\"><code>[prefixKey] \"表达式\"\n    (let-prefixKey=\"export\")</code>\n    <br>\n    注意 <code>prefix</code> 已经加成了 <code>key</code>\n    </p><p translation-origin=\"off\"><code>[prefixKey] \"expression\"\n    (let-prefixKey=\"export\")</code>\n    <br>\n    Notice that the <code>prefix</code>\n    is added to the <code>key</code>\n    </p></td>\n  </tr>\n  \n  <tr>\n    <td><code>let</code></td>\n    <td><code>let-local=\"export\"</code></td>\n  </tr>\n</tbody></table>\n<h3 id=\"microsyntax-examples\" translation-result=\"on\">微语法样例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#microsyntax-examples\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"microsyntax-examples\">Microsyntax examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#microsyntax-examples\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下表说明了 Angular 会如何解开微语法。</p><p translation-origin=\"off\">The following table demonstrates how Angular desugars microsyntax.</p>\n\n<table>\n  <tbody><tr>\n    <th><p translation-result=\"on\">微语法</p><p translation-origin=\"off\">Microsyntax</p></th>\n    <th><p translation-result=\"on\">解语法糖后</p><p translation-origin=\"off\">Desugared</p></th>\n  </tr>\n  \n  <tr>\n    <td><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of [1,2,3]\"</code></td>\n    <td><code>&#x3C;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-item [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"[1,2,3]\"></code></td>\n  </tr>\n  <tr>\n    <td><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of [1,2,3] as items; trackBy: myTrack; index as i\"</code></td>\n    <td><code>&#x3C;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-item [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"[1,2,3]\" let-items=\"<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>\" [ngForTrackBy]=\"myTrack\" let-i=\"index\"></code>\n    </td>\n  </tr>\n  <tr>\n    <td><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"exp\"</code></td>\n    <td><code>&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"exp\"></code></td>\n  </tr>\n  <tr>\n    <td><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"exp as value\"</code></td>\n    <td><code>&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"exp\" let-value=\"<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>\"></code></td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\">这些微语法机制在你写自己的结构型指令时也同样有效，参考 <a href=\"https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\" title=\"Source: NgIf\"><code>NgIf</code> 的源码</a>\n和 <a href=\"https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts\" title=\"Source: NgFor\"><code>NgFor</code> 的源码</a> 可以学到更多。\n<a id=\"template-input-variable\"></a></p><p translation-origin=\"off\">Studying the\n<a href=\"https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\" title=\"Source: NgIf\">source code for <code>NgIf</code></a>\nand <a href=\"https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts\" title=\"Source: NgForOf\"><code>NgForOf</code></a>\nis a great way to learn more.</p>\n\n<a id=\"template-input-variables\"></a>\n<h2 id=\"template-input-variable\" translation-result=\"on\">模板输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#template-input-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-input-variable\">Template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>模板输入变量</em>是这样一种变量，你可以<em>在单个实例的模板中</em>引用它的值。\n这个例子中有好几个模板输入变量：<code>hero</code>、<code>i</code> 和 <code>odd</code>。\n它们都是用 <code>let</code> 作为前导关键字。</p><p translation-origin=\"off\">A <em>template input variable</em> is a variable whose value you can reference <em>within</em> a single instance of the template.\nThere are several such variables in this example: <code>hero</code>, <code>i</code>, and <code>odd</code>.\nAll are preceded by the keyword <code>let</code>.</p>\n\n<p translation-result=\"on\"><em>模板输入变量</em>和<a href=\"guide/template-syntax#ref-vars\">模板引用变量</a>是<strong>不同的</strong>，无论是在<em>语义</em>上还是<em>语法</em>上。</p><p translation-origin=\"off\">A <em>template input variable</em> is <strong><em>not</em></strong> the same as a\n<a href=\"guide/template-syntax#ref-vars\">template <em>reference</em> variable</a>,\nneither <em>semantically</em> nor <em>syntactically</em>.</p>\n\n<p translation-result=\"on\">你使用 <code>let</code> 关键字（如 <code>let hero</code>）在模板中声明一个模板<em>输入</em>变量。\n这个变量的范围被限制在所重复模板的<em>单一实例</em>上。\n事实上，你可以在其它结构型指令中使用同样的变量名。</p><p translation-origin=\"off\">You declare a template <em>input</em> variable using the <code>let</code> keyword (<code>let hero</code>).\nThe variable's scope is limited to a <em>single instance</em> of the repeated template.\nYou can use the same variable name again in the definition of other structural directives.</p>\n\n<p translation-result=\"on\">而声明模板<em>引用</em>变量使用的是给变量名加 <code>#</code> 前缀的方式（<code>#var</code>）。\n一个<em>引用</em>变量引用的是它所附着到的元素、组件或指令。它可以在<em>整个模板</em>的<em>任意位置</em>访问。</p><p translation-origin=\"off\">You declare a template <em>reference</em> variable by prefixing the variable name with <code>#</code> (<code>#var</code>).\nA <em>reference</em> variable refers to its attached element, component or directive.\nIt can be accessed <em>anywhere</em> in the <em>entire template</em>.</p>\n\n<p translation-result=\"on\">模板<em>输入</em>变量和<em>引用</em>变量具有各自独立的命名空间。<code>let hero</code> 中的 <code>hero</code> 和 <code>#hero</code> 中的 <code>hero</code> 并不是同一个变量。</p><p translation-origin=\"off\">Template <em>input</em> and <em>reference</em> variable names have their own namespaces. The <code>hero</code> in <code>let hero</code> is never the same\nvariable as the <code>hero</code> declared as <code>#hero</code>.</p>\n\n<a id=\"one-per-element\"></a>\n<h2 id=\"one-structural-directive-per-host-element\" translation-result=\"on\">每个宿主元素上只能有一个结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#one-structural-directive-per-host-element\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"one-structural-directive-per-host-element\">One structural directive per host element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#one-structural-directive-per-host-element\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有时你会希望只有当特定的条件为真时才重复渲染一个 HTML 块。\n你可能试过把 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在同一个宿主元素上，但 Angular 不允许。这是因为你在一个元素上只能放一个<em>结构型</em>指令。</p><p translation-origin=\"off\">Someday you'll want to repeat a block of HTML but only when a particular condition is true.\nYou'll <em>try</em> to put both an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> and an <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on the same host element.\nAngular won't let you. You may apply only one <em>structural</em> directive to an element.</p>\n\n<p translation-result=\"on\">原因很简单。结构型指令可能会对宿主元素及其子元素做很复杂的事。当两个指令放在同一个元素上时，谁先谁后？<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 优先还是 <code>NgFor</code> 优先？<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 可以取消 <code>NgFor</code> 的效果吗？\n如果要这样做，Angular 应该如何把这种能力泛化，以取消其它结构型指令的效果呢？</p><p translation-origin=\"off\">The reason is simplicity. Structural directives can do complex things with the host element and its descendents.\nWhen two directives lay claim to the same host element, which one takes precedence?\nWhich should go first, the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> or the <code>NgFor</code>? Can the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> cancel the effect of the <code>NgFor</code>?\nIf so (and it seems like it should be so), how should Angular generalize the ability to cancel for other structural directives?</p>\n\n<p translation-result=\"on\">对这些问题，没有办法简单回答。而禁止多个结构型指令则可以简单地解决这个问题。\n这种情况下有一个简单的解决方案：把 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在一个\"容器\"元素上，再包装进 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 元素。\n这个元素可以使用<a href=\"guide/structural-directives#ngcontainer\"><code>ng-container</code></a>，以免引入一个新的 HTML 层级。</p><p translation-origin=\"off\">There are no easy answers to these questions. Prohibiting multiple structural directives makes them moot.\nThere's an easy solution for this use case: put the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on a container element that wraps the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> element.\nOne or both elements can be an <a href=\"guide/structural-directives#ngcontainer\"><code>ng-container</code></a> so you don't have to introduce extra levels of HTML.</p>\n\n<a id=\"ngSwitch\"></a>\n<h2 id=\"inside-ngswitch-directives\" translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 内幕<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#inside-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"inside-ngswitch-directives\">Inside <em>NgSwitch</em> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#inside-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 实际上是一组相互合作的指令：<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>、<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>。</p><p translation-origin=\"off\">The Angular <em>NgSwitch</em> is actually a set of cooperating directives: <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>.</p>\n\n<p translation-result=\"on\">例子如下：</p><p translation-origin=\"off\">Here's an example.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngswitch)\" region=\"ngswitch\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\">\n  &#x3C;app-happy-hero    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'happy'\"    [hero]=\"hero\">&#x3C;/app-happy-hero>\n  &#x3C;app-sad-hero      *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'sad'\"      [hero]=\"hero\">&#x3C;/app-sad-hero>\n  &#x3C;app-confused-hero *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'confused'\" [hero]=\"hero\">&#x3C;/app-confused-hero>\n  &#x3C;app-unknown-hero  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [hero]=\"hero\">&#x3C;/app-unknown-hero>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">一个值(<code>hero.emotion</code>)被被赋值给了 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>，以决定要显示哪一个分支。</p><p translation-origin=\"off\">The switch value assigned to <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> (<code>hero.emotion</code>) determines which\n(if any) of the switch cases are displayed.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 本身不是结构型指令，而是一个<em>属性型</em>指令，它控制其它两个 switch 指令的行为。\n这也就是为什么你要写成 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 而不是 <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 的原因。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> itself is not a structural directive.\nIt's an <em>attribute</em> directive that controls the behavior of the other two switch directives.\nThat's why you write <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code>, never <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> <em>都是</em>结构型指令。\n因此你要使用星号（<code>*</code>）前缀来把它们附着到元素上。\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 会在它的值匹配上选项值的时候显示它的宿主元素。\n<code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 则会当没有兄弟 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 匹配上时显示它的宿主元素。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> <em>are</em> structural directives.\nYou attach them to elements using the asterisk (*) prefix notation.\nAn <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> displays its host element when its value matches the switch value.\nThe <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> displays its host element when no sibling <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> matches the switch value.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">指令所在的元素就是它的<strong>宿主</strong>元素。\n<code>&#x3C;happy-hero></code> 是 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 的宿主元素。\n<code>&#x3C;unknown-hero></code> 是 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 的宿主元素。</p><p translation-origin=\"off\">The element to which you apply a directive is its <em>host</em> element.\nThe <code>&#x3C;happy-hero></code> is the host element for the happy <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code>.\nThe <code>&#x3C;unknown-hero></code> is the host element for the <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code>.</p>\n\n</div>\n<p translation-result=\"on\">像其它的结构型指令一样，<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 也可以解开语法糖，变成 <code>&#x3C;ng-template></code> 的形式。</p><p translation-origin=\"off\">As with other structural directives, the <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>\ncan be desugared into the <code>&#x3C;ng-template></code> element form.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngswitch-template)\" region=\"ngswitch-template\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\">\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'happy'\">\n    &#x3C;app-happy-hero [hero]=\"hero\">&#x3C;/app-happy-hero>\n  &#x3C;/ng-template>\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'sad'\">\n    &#x3C;app-sad-hero [hero]=\"hero\">&#x3C;/app-sad-hero>\n  &#x3C;/ng-template>\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'confused'\">\n    &#x3C;app-confused-hero [hero]=\"hero\">&#x3C;/app-confused-hero>\n  &#x3C;/ng-template >\n  &#x3C;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>>\n    &#x3C;app-unknown-hero [hero]=\"hero\">&#x3C;/app-unknown-hero>\n  &#x3C;/ng-template>\n&#x3C;/div>\n\n</code-example>\n<a id=\"prefer-asterisk\"></a>\n<h2 id=\"prefer-the-asterisk--syntax\" translation-result=\"on\">优先使用星号（<code>*</code>）语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#prefer-the-asterisk--syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"prefer-the-asterisk--syntax\">Prefer the asterisk (*) syntax.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#prefer-the-asterisk--syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">星号（<code>*</code>）语法比不带语法糖的形式更加清晰。\n如果找不到单一的元素来应用该指令，可以使用<a href=\"guide/structural-directives#ng-container\">&#x3C;ng-container></a>作为该指令的容器。</p><p translation-origin=\"off\">The asterisk (*) syntax is more clear than the desugared form.\nUse <a href=\"guide/structural-directives#ng-container\">&#x3C;ng-container></a> when there's no single element\nto host the directive.</p>\n\n<p translation-result=\"on\">虽然很少有理由在模板中使用结构型指令的<em>属性</em>形式和<em>元素</em>形式，但这些幕后知识仍然是很重要的，即：Angular 会创建 <code>&#x3C;ng-template></code>，还要了解它的工作原理。\n当需要<a href=\"guide/structural-directives#unless\">写自己的结构型指令</a>时，你就要使用 <code>&#x3C;ng-template></code>。</p><p translation-origin=\"off\">While there's rarely a good reason to apply a structural directive in template <em>attribute</em> or <em>element</em> form,\nit's still important to know that Angular creates a <code>&#x3C;ng-template></code> and to understand how it works.\nYou'll refer to the <code>&#x3C;ng-template></code> when you <a href=\"guide/structural-directives#unless\">write your own structural directive</a>.</p>\n\n<a id=\"template\"></a>\n<h2 id=\"the-ng-template\" translation-result=\"on\"><em>&#x3C;ng-template></em>元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#the-ng-template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-ng-template\">The <em>&#x3C;ng-template></em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#the-ng-template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">&#x3C;ng-template>是一个 Angular 元素，用来渲染 HTML。\n它永远不会直接显示出来。\n事实上，在渲染视图之前，Angular 会把 <code>&#x3C;ng-template></code> 及其内容<em>替换为</em>一个注释。</p><p translation-origin=\"off\">The &#x3C;ng-template> is an Angular element for rendering HTML.\nIt is never displayed directly.\nIn fact, before rendering the view, Angular <em>replaces</em> the <code>&#x3C;ng-template></code> and its contents with a comment.</p>\n\n<p translation-result=\"on\">如果没有使用结构型指令，而仅仅把一些别的元素包装进 <code>&#x3C;ng-template></code> 中，那些元素就是不可见的。\n在下面的这个短语\"Hip! Hip! Hooray!\"中，中间的这个 \"Hip!\"（欢呼声） 就是如此。</p><p translation-origin=\"off\">If there is no structural directive and you merely wrap some elements in a <code>&#x3C;ng-template></code>,\nthose elements disappear.\nThat's the fate of the middle \"Hip!\" in the phrase \"Hip! Hip! Hooray!\".</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (template-tag)\" region=\"template-tag\">\n&#x3C;p>Hip!&#x3C;/p>\n&#x3C;ng-template>\n  &#x3C;p>Hip!&#x3C;/p>\n&#x3C;/ng-template>\n&#x3C;p>Hooray!&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">Angular 抹掉了中间的那个 \"Hip!\"，让欢呼声显得不再那么热烈了。</p><p translation-origin=\"off\">Angular erases the middle \"Hip!\", leaving the cheer a bit less enthusiastic.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/template-rendering.png\" alt=\"template tag rendering\" width=\"520\" height=\"94\">\n</div>\n<p translation-result=\"on\">结构型指令会让 <code>&#x3C;ng-template></code> 正常工作，在你<a href=\"guide/structural-directives#unless\">写自己的结构型指令</a>时就会看到这一点。</p><p translation-origin=\"off\">A structural directive puts a <code>&#x3C;ng-template></code> to work\nas you'll see when you <a href=\"guide/structural-directives#unless\">write your own structural directive</a>.</p>\n\n<a id=\"ngcontainer\"></a>\n<a id=\"ng-container\"></a>\n<h2 id=\"group-sibling-elements-with-ng-container\" translation-result=\"on\">使用&#x3C;ng-container>把一些兄弟元素归为一组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#group-sibling-elements-with-ng-container\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"group-sibling-elements-with-ng-container\">Group sibling elements with &#x3C;ng-container><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#group-sibling-elements-with-ng-container\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">通常都需要一个<em>根</em>元素作为结构型指令的宿主。\n列表元素（<code>&#x3C;li></code>）就是一个典型的供 <code>NgFor</code> 使用的宿主元素。</p><p translation-origin=\"off\">There's often a <em>root</em> element that can and should host the structural directive.\nThe list element (<code>&#x3C;li></code>) is a typical host element of an <code>NgFor</code> repeater.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngfor-li)\" region=\"ngfor-li\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero.name}}&#x3C;/li>\n\n</code-example>\n<p translation-result=\"on\">当没有这样一个单一的宿主元素时，你就可以把这些内容包裹在一个原生的 HTML 容器元素中，比如 <code>&#x3C;div></code>，并且把结构型指令附加到这个\"包裹\"上。</p><p translation-origin=\"off\">When there isn't a host element, you can usually wrap the content in a native HTML container element,\nsuch as a <code>&#x3C;div></code>, and attach the directive to that wrapper.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif)\" region=\"ngif\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\">{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">但引入另一个容器元素（通常是 <code>&#x3C;span></code> 或 <code>&#x3C;div></code>）来把一些元素归到一个单一的<em>根元素</em>下，通常也会带来问题。注意，是\"通常\"而不是\"总会\"。</p><p translation-origin=\"off\">Introducing another container element—typically a <code>&#x3C;span></code> or <code>&#x3C;div></code>—to\ngroup the elements under a single <em>root</em> is usually harmless.\n<em>Usually</em> ... but not <em>always</em>.</p>\n\n<p translation-result=\"on\">这种用于分组的元素可能会破坏模板的外观表现，因为 CSS 的样式既不曾期待也不会接受这种新的元素布局。\n比如，假设你有下列分段布局。</p><p translation-origin=\"off\">The grouping element may break the template appearance because CSS styles\nneither expect nor accommodate the new layout.\nFor example, suppose you have the following paragraph layout.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif-span)\" region=\"ngif-span\">\n&#x3C;p>\n  I turned the corner\n  &#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n    and saw {{hero.name}}. I waved\n  &#x3C;/span>\n  and continued on my way.\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">而你的 CSS 样式规则是应用于 <code>&#x3C;p></code> 元素下的 <code>&#x3C;span></code> 的。</p><p translation-origin=\"off\">You also have a CSS style rule that happens to apply to a <code>&#x3C;span></code> within a <code>&#x3C;p></code>aragraph.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.css\" header=\"src/app/app.component.css (p-span)\" region=\"p-span\">\np span { color: red; font-size: 70%; }\n\n</code-example>\n<p translation-result=\"on\">这样渲染出来的段落就会非常奇怪。</p><p translation-origin=\"off\">The constructed paragraph renders strangely.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/bad-paragraph.png\" alt=\"spanned paragraph with bad style\" width=\"452\" height=\"15\">\n</div>\n<p translation-result=\"on\">本来为其它地方准备的 <code>p span</code> 样式，被意外的应用到了这里。</p><p translation-origin=\"off\">The <code>p span</code> style, intended for use elsewhere, was inadvertently applied here.</p>\n\n<p translation-result=\"on\">另一个问题是：有些 HTML 元素需要所有的直属下级都具有特定的类型。\n比如，<code>&#x3C;select></code> 元素要求直属下级必须为 <code>&#x3C;option></code>，那就没办法把这些选项包装进 <code>&#x3C;div></code> 或 <code>&#x3C;span></code> 中。</p><p translation-origin=\"off\">Another problem: some HTML elements require all immediate children to be of a specific type.\nFor example, the <code>&#x3C;select></code> element requires <code>&#x3C;option></code> children.\nYou can't wrap the <em>options</em> in a conditional <code>&#x3C;div></code> or a <code>&#x3C;span></code>.</p>\n\n<p translation-result=\"on\">如果这样做：</p><p translation-origin=\"off\">When you try this,</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (select-span)\" region=\"select-span\">\n&#x3C;div>\n  Pick your favorite hero\n  (&#x3C;label>&#x3C;input type=\"checkbox\" checked (change)=\"showSad = !showSad\">show sad&#x3C;/label>)\n&#x3C;/div>\n&#x3C;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\">\n  &#x3C;span *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\">\n    &#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\">\n      &#x3C;option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})&#x3C;/option>\n    &#x3C;/span>\n  &#x3C;/span>\n&#x3C;/select>\n\n</code-example>\n<p translation-result=\"on\">下拉列表就是空的。</p><p translation-origin=\"off\">the drop down is empty.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/bad-select.png\" alt=\"spanned options don&#x27;t work\" width=\"290\" height=\"36\">\n</div>\n<p translation-result=\"on\">浏览器不会显示 <code>&#x3C;span></code> 中的 <code>&#x3C;option></code>。</p><p translation-origin=\"off\">The browser won't display an <code>&#x3C;option></code> within a <code>&#x3C;span></code>.</p>\n\n<h3 id=\"ng-container-to-the-rescue\" translation-result=\"on\">&#x3C;ng-container> 的救赎<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#ng-container-to-the-rescue\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"ng-container-to-the-rescue\">&#x3C;ng-container> to the rescue<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#ng-container-to-the-rescue\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 的 <code>&#x3C;ng-container></code> 是一个分组元素，但它不会污染样式或元素布局，因为 Angular <em>压根不会把它放进 DOM</em> 中。</p><p translation-origin=\"off\">The Angular <code>&#x3C;ng-container></code> is a grouping element that doesn't interfere with styles or layout\nbecause Angular <em>doesn't put it in the DOM</em>.</p>\n\n<p translation-result=\"on\">下面是重新实现的条件化段落，这次使用 <code>&#x3C;ng-container></code>。</p><p translation-origin=\"off\">Here's the conditional paragraph again, this time using <code>&#x3C;ng-container></code>.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif-ngcontainer)\" region=\"ngif-ngcontainer\">\n&#x3C;p>\n  I turned the corner\n  &#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n    and saw {{hero.name}}. I waved\n  &#x3C;/ng-container>\n  and continued on my way.\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">这次就渲染对了。</p><p translation-origin=\"off\">It renders properly.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/good-paragraph.png\" alt=\"ngcontainer paragraph with proper style\" width=\"509\" height=\"15\">\n</div>\n<p translation-result=\"on\">现在用 <code>&#x3C;ng-container></code> 来根据条件排除选择框中的某个 <code>&#x3C;option></code>。</p><p translation-origin=\"off\">Now conditionally exclude a <em>select</em> <code>&#x3C;option></code> with <code>&#x3C;ng-container></code>.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (select-ngcontainer)\" region=\"select-ngcontainer\">\n&#x3C;div>\n  Pick your favorite hero\n  (&#x3C;label>&#x3C;input type=\"checkbox\" checked (change)=\"showSad = !showSad\">show sad&#x3C;/label>)\n&#x3C;/div>\n&#x3C;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\">\n  &#x3C;ng-container *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\">\n    &#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\">\n      &#x3C;option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})&#x3C;/option>\n    &#x3C;/ng-container>\n  &#x3C;/ng-container>\n&#x3C;/select>\n\n</code-example>\n<p translation-result=\"on\">下拉框也工作正常。</p><p translation-origin=\"off\">The drop down works properly.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/select-ngcontainer-anim.gif\" alt=\"ngcontainer options work properly\" width=\"312\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意：</strong> 记住，ngModel 指令是在 Angular 的 FormsModule 中定义的，你要在想使用它的模块的 <code>imports: [...]</code> 元数据中导入 FormsModule。</p><p translation-origin=\"off\"><strong>Note:</strong> Remember that ngModel directive is defined as a part of Angular FormsModule and you need to include FormsModule in the imports: [...] section of the Angular module metadata, in which you want to use it.</p>\n\n</div>\n<p translation-result=\"on\"><code>&#x3C;ng-container></code> 是一个由 Angular 解析器负责识别处理的语法元素。\n它不是一个指令、组件、类或接口，更像是 JavaScript 中 <code>if</code> 块中的花括号。</p><p translation-origin=\"off\">The <code>&#x3C;ng-container></code> is a syntax element recognized by the Angular parser.\nIt's not a directive, component, class, or interface.\nIt's more like the curly braces in a JavaScript <code>if</code>-block:</p>\n\n<code-example language=\"javascript\">\n  if (someCondition) {\n    statement1;\n    statement2;\n    statement3;\n  }\n\n</code-example>\n<p translation-result=\"on\">没有这些花括号，JavaScript 只会执行第一句，而你原本的意图是把其中的所有语句都视为一体来根据条件执行。\n而 <code>&#x3C;ng-container></code> 满足了 Angular 模板中类似的需求。</p><p translation-origin=\"off\">Without those braces, JavaScript would only execute the first statement\nwhen you intend to conditionally execute all of them as a single block.\nThe <code>&#x3C;ng-container></code> satisfies a similar need in Angular templates.</p>\n\n<a id=\"unless\"></a>\n<h2 id=\"write-a-structural-directive\" translation-result=\"on\">写一个结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#write-a-structural-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"write-a-structural-directive\">Write a structural directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#write-a-structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本节中，你会写一个名叫 <code>UnlessDirective</code> 的结构型指令，它是 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 的反义词。\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 在条件为 <code>true</code> 的时候显示模板内容，而 <code>UnlessDirective</code> 则会在条件为 <code>false</code> 时显示模板内容。</p><p translation-origin=\"off\">In this section, you write an <code>UnlessDirective</code> structural directive\nthat does the opposite of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> displays the template content when the condition is <code>true</code>.\n<code>UnlessDirective</code> displays the content when the condition is <strong><em>false</em></strong>.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (appUnless-1)\" region=\"appUnless-1\">\n&#x3C;p *appUnless=\"condition\">Show this sentence unless the condition is true.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">创建指令很像创建组件。</p><p translation-origin=\"off\">Creating a directive is similar to creating a component.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 导入 <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器（而不再是 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>）。</p><p translation-origin=\"off\">Import the <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator (instead of the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 导入符号 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>、<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 和 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>，你在<em>任何</em>结构型指令中都会需要它们。</p><p translation-origin=\"off\">Import the <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>, <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, and <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> symbols; you'll need them for <em>any</em> structural directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 给指令类添加装饰器。</p><p translation-origin=\"off\">Apply the decorator to the directive class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 设置 CSS <em>属性选择器</em>，以便在模板中标识出这个指令该应用于哪个元素。</p><p translation-origin=\"off\">Set the CSS <em>attribute selector</em> that identifies the directive when applied to an element in a template.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这里是起点：</p><p translation-origin=\"off\">Here's how you might begin:</p>\n\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" header=\"src/app/unless.directive.ts (skeleton)\" region=\"skeleton\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appUnless]'})\nexport class UnlessDirective {\n}\n\n\n</code-example>\n<p translation-result=\"on\">指令的<em>选择器</em>通常是把指令的属性名括在方括号中，如 <code>[appUnless]</code>。\n这个方括号定义出了一个 CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\" title=\"MDN: Attribute selectors\">属性选择器</a>。</p><p translation-origin=\"off\">The directive's <em>selector</em> is typically the directive's <strong>attribute name</strong> in square brackets, <code>[appUnless]</code>.\nThe brackets define a CSS\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\" title=\"MDN: Attribute selectors\">attribute selector</a>.</p>\n\n<p translation-result=\"on\">该指令的<em>属性名</em>应该拼写成<em>小驼峰</em>形式，并且带有一个前缀。\n但是，这个前缀不能用 <code>ng</code>，因为它只属于 Angular 本身。\n请选择一些简短的，适合你自己或公司的前缀。\n在这个例子中，前缀是 <code>app</code>。</p><p translation-origin=\"off\">The directive <em>attribute name</em> should be spelled in <em>lowerCamelCase</em> and begin with a prefix.\nDon't use <code>ng</code>. That prefix belongs to Angular.\nPick something short that fits you or your company.\nIn this example, the prefix is <code>app</code>.</p>\n\n<p translation-result=\"on\">指令的<em>类名</em>用 <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 结尾，参见<a href=\"guide/styleguide#02-03\" title=\"Angular 风格指南\">风格指南</a>。\n但 Angular 自己的指令例外。</p><p translation-origin=\"off\">The directive <em>class</em> name ends in <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> per the <a href=\"guide/styleguide#02-03\" title=\"Angular Style Guide\">style guide</a>.\nAngular's own directives do not.</p>\n\n<h3 id=\"templateref-and-viewcontainerref\" translation-result=\"on\"><em>TemplateRef</em> 和 <em>ViewContainerRef</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#templateref-and-viewcontainerref\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"templateref-and-viewcontainerref\"><em>TemplateRef</em> and <em>ViewContainerRef</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#templateref-and-viewcontainerref\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">像这个例子一样的简单结构型指令会从 Angular 生成的 <code>&#x3C;ng-template></code> 元素中创建一个<a href=\"api/core/EmbeddedViewRef\" title=\"API: EmbeddedViewRef\"><em>内嵌的视图</em></a>，并把这个视图插入到一个<a href=\"api/core/ViewContainerRef\" title=\"API: ViewContainerRef\"><em>视图容器</em></a>中，紧挨着本指令原来的宿主元素 <code>&#x3C;p></code>（译注：注意不是子节点，而是兄弟节点）。</p><p translation-origin=\"off\">A simple structural directive like this one creates an\n<a href=\"api/core/EmbeddedViewRef\" title=\"API: EmbeddedViewRef\"><em>embedded view</em></a>\nfrom the Angular-generated <code>&#x3C;ng-template></code> and inserts that view in a\n<a href=\"api/core/ViewContainerRef\" title=\"API: ViewContainerRef\"><em>view container</em></a>\nadjacent to the directive's original <code>&#x3C;p></code> host element.</p>\n\n<p translation-result=\"on\">你可以使用<a href=\"api/core/TemplateRef\" title=\"API: TemplateRef\"><code>TemplateRef</code></a>取得 <code>&#x3C;ng-template></code> 的内容，并通过<a href=\"api/core/ViewContainerRef\" title=\"API: ViewContainerRef\"><code>ViewContainerRef</code></a>来访问这个<em>视图容器</em>。</p><p translation-origin=\"off\">You'll acquire the <code>&#x3C;ng-template></code> contents with a\n<a href=\"api/core/TemplateRef\" title=\"API: TemplateRef\"><code>TemplateRef</code></a>\nand access the <em>view container</em> through a\n<a href=\"api/core/ViewContainerRef\" title=\"API: ViewContainerRef\"><code>ViewContainerRef</code></a>.</p>\n\n<p translation-result=\"on\">你可以把它们都注入到指令的构造函数中，作为该类的私有属性。</p><p translation-origin=\"off\">You inject both in the directive constructor as private variables of the class.</p>\n\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" header=\"src/app/unless.directive.ts (ctor)\" region=\"ctor\">\nconstructor(\n  private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>,\n  private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n\n</code-example>\n<h3 id=\"the-appunless-property\" translation-result=\"on\"><em>appUnless</em> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#the-appunless-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-appunless-property\">The <em>appUnless</em> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#the-appunless-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">该指令的使用者会把一个 true/false 条件绑定到 <code>[appUnless]</code> 属性上。\n也就是说，该指令需要一个带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 的 <code>appUnless</code> 属性。</p><p translation-origin=\"off\">The directive consumer expects to bind a true/false condition to <code>[appUnless]</code>.\nThat means the directive needs an <code>appUnless</code> property, decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code></p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解关于 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 的更多知识，参见<a href=\"guide/template-syntax#inputs-outputs\"><em>模板语法</em></a>一章。</p><p translation-origin=\"off\">Read about <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> in the <a href=\"guide/template-syntax#inputs-outputs\"><em>Template Syntax</em></a> guide.</p>\n\n</div>\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" header=\"src/app/unless.directive.ts (set)\" region=\"set\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n  if (!condition &#x26;&#x26; !this.hasView) {\n    this.viewContainer.createEmbeddedView(this.templateRef);\n    this.hasView = true;\n  } else if (condition &#x26;&#x26; this.hasView) {\n    this.viewContainer.clear();\n    this.hasView = false;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">一旦该值的条件发生了变化，Angular 就会去设置 <code>appUnless</code> 属性。因为不能用 <code>appUnless</code> 属性，所以你要为它定义一个设置器（setter）。</p><p translation-origin=\"off\">Angular sets the <code>appUnless</code> property whenever the value of the condition changes.\nBecause the <code>appUnless</code> property does work, it needs a setter.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   如果条件为假，并且以前尚未创建过该视图，就告诉<em>视图容器（ViewContainer）</em>根据模板创建一个<em>内嵌视图</em>。</p><p translation-origin=\"off\">If the condition is falsy and the view hasn't been created previously,\ntell the <em>view container</em> to create the <em>embedded view</em> from the template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   如果条件为真，并且视图已经显示出来了，就会清除该容器，并销毁该视图。</p><p translation-origin=\"off\">If the condition is truthy and the view is currently displayed,\nclear the container which also destroys the view.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">没有人会读取 <code>appUnless</code> 属性，因此它不需要定义 getter。</p><p translation-origin=\"off\">Nobody reads the <code>appUnless</code> property so it doesn't need a getter.</p>\n\n<p translation-result=\"on\">完整的指令代码如下：</p><p translation-origin=\"off\">The completed directive code looks like this:</p>\n\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" header=\"src/app/unless.directive.ts (excerpt)\" region=\"no-docs\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n */\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appUnless]'})\nexport class UnlessDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>,\n    private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n    if (!condition &#x26;&#x26; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (condition &#x26;&#x26; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">把这个指令添加到 AppModule 的 <code>declarations</code> 数组中。</p><p translation-origin=\"off\">Add this directive to the <code>declarations</code> array of the AppModule.</p>\n\n<p translation-result=\"on\">然后创建一些 HTML 来试用一下。</p><p translation-origin=\"off\">Then create some HTML to try it.</p>\n\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (appUnless)\" region=\"appUnless\">\n&#x3C;p *appUnless=\"condition\" class=\"unless a\">\n  (A) This paragraph is displayed because the condition is false.\n&#x3C;/p>\n\n&#x3C;p *appUnless=\"!condition\" class=\"unless b\">\n  (B) Although the condition is true,\n  this paragraph is displayed because appUnless is set to false.\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">当 <code>condition</code> 为 <code>false</code> 时，顶部的段落就会显示出来，而底部的段落消失了。\n当 <code>condition</code> 为 <code>true</code> 时，顶部的段落被移除了，而底部的段落显示了出来。</p><p translation-origin=\"off\">When the <code>condition</code> is falsy, the top (A) paragraph appears and the bottom (B) paragraph disappears.\nWhen the <code>condition</code> is truthy, the top (A) paragraph is removed and the bottom (B) paragraph appears.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/structural-directives/unless-anim.gif\" alt=\"UnlessDirective in action\" width=\"524\" height=\"100\">\n</div>\n<a id=\"directive-type-checks\"></a>\n<h2 id=\"improving-template-type-checking-for-custom-directives\" translation-result=\"on\">改进自定义指令的模板类型检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#improving-template-type-checking-for-custom-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"improving-template-type-checking-for-custom-directives\">Improving template type checking for custom directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#improving-template-type-checking-for-custom-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以通过在指令定义中添加模板守护属性来改进自定义指令的模板类型检查。这些属性可以帮助 Angular 模板类型检查器在编译期间发现模板中的错误，避免这些失误导致运行期错误。</p><p translation-origin=\"off\">You can improve template type checking for custom directives by adding template guard properties to your directive definition.\nThese properties help the Angular template type checker find mistakes in the template at compile time, which can avoid runtime errors those mistakes can cause.</p>\n\n<p translation-result=\"on\">使用类型守护属性可以告诉模板类型检查器你所期望的类型，从而改进该模板的编译期类型检查。</p><p translation-origin=\"off\">Use the type-guard properties to inform the template type checker of an expected type, thus improving compile-time type-checking for that template.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">属性 <code>ngTemplateGuard_(someInputProperty)</code> 允许你为模板中的输入表达式指定一个更准确的类型。</p><p translation-origin=\"off\">A property <code>ngTemplateGuard_(someInputProperty)</code> lets you specify a more accurate type for an input expression within the template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>ngTemplateContextGuard</code> 静态属性声明了模板上下文的类型。</p><p translation-origin=\"off\">The <code>ngTemplateContextGuard</code> static property declares the type of the template context.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">本节提供了这两种类型守护属性的例子。</p><p translation-origin=\"off\">This section provides example of both kinds of type-guard property.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">   有关更多信息，请参阅<a href=\"guide/template-typecheck\" title=\"模板类型检查指南\">模板类型检查指南</a>。</p><p translation-origin=\"off\">   For more information, see <a href=\"guide/template-typecheck\" title=\"Template type-checking guide\">Template type checking guide</a>.</p>\n\n</div>\n<a id=\"narrowing-input-types\"></a>\n<h3 id=\"make-in-template-type-requirements-more-specific-with-template-guards\" translation-result=\"on\">使用模板守护功能可以让模板内的类型需求更具体<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#make-in-template-type-requirements-more-specific-with-template-guards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"make-in-template-type-requirements-more-specific-with-template-guards\">Make in-template type requirements more specific with template guards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#make-in-template-type-requirements-more-specific-with-template-guards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板中的结构型指令会根据输入表达式来控制是否要在运行时渲染该模板。为了帮助编译器捕获模板类型中的错误，你应该尽可能详细地指定模板内指令的输入表达式所期待的类型。</p><p translation-origin=\"off\">A structural directive in a template controls whether that template is rendered at run time, based on its input expression.\nTo help the compiler catch template type errors, you should specify as closely as possible the required type of a directive's input expression when it occurs inside the template.</p>\n\n<p translation-result=\"on\">类型守护函数会把输入表达式所期待的类型<em>窄化</em>为在运行时可能传给指令的子类型。你可以提供这样一个函数来帮助类型检查器在编译期间推断出该表达式的正确类型。</p><p translation-origin=\"off\">A type guard function <em>narrows</em> the expected type of an input expression to a subset of types that might be passed to the directive within the template at run time.\nYou can provide such a function to help the type-checker infer the proper type for the expression at compile time.</p>\n\n<p translation-result=\"on\">例如，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 的实现使用类型窄化来确保只有当 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的输入表达式为真时，模板才会被实例化。为了提供具体的类型要求，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令定义了一个<a href=\"api/common/NgIf#static-properties\">静态属性 <code>ngTemplateGuard_ngIf: 'binding'</code></a>。<code>binding</code> 值是一种常见的类型窄化的例子，它会对输入表达式进行求值，以满足类型要求。</p><p translation-origin=\"off\">For example, the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> implementation uses type-narrowing to ensure that the\ntemplate is only instantiated if the input expression to <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is truthy.\nTo provide the specific type requirement, the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive defines a <a href=\"api/common/NgIf#static-properties\">static property <code>ngTemplateGuard_ngIf: 'binding'</code></a>.\nThe <code>binding</code> value is a special case for a common kind of type-narrowing where the input expression is evaluated in order to satisfy the type requirement.</p>\n\n<p translation-result=\"on\">要为模板中的指令提供一个更具体的输入表达式类型，就要把 <code>ngTemplateGuard_xx</code> 属性添加到该指令中，其静态属性名的后缀（xx）是 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 字段名。该属性的值既可以是针对其返回类型的通用类型窄化函数，也可以是字符串 <code>\"binding\"</code> 就像 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 一样。</p><p translation-origin=\"off\">To provide a more specific type for an input expression to a directive within the template, add a <code>ngTemplateGuard_xx</code> property to the directive, where the suffix to the static property name is the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> field name.\nThe value of the property can be either a general type-narrowing function based on its return type, or the string <code>\"binding\"</code> as in the case of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.</p>\n\n<p translation-result=\"on\">例如，考虑以下结构型指令，它以模板表达式的结果作为输入。</p><p translation-origin=\"off\">For example, consider the following structural directive that takes the result of a template expression as an input.</p>\n\n<code-example language=\"ts\" header=\"IfLoadedDirective\">\nexport type Loaded<t> = { type: 'loaded', data: T };\nexport type Loading = { type: 'loading' };\nexport type LoadingState<t> = Loaded<t> | Loading;\nexport class IfLoadedDirective<t> {\n    @Input('ifLoaded') set state(state: LoadingState<t>) {}\n    static ngTemplateGuard_state<t>(dir: IfLoadedDirective<t>, expr: LoadingState<t>): expr is Loaded<t> { return true; };\nexport interface Person {\n  name: string;\n}\n\n@Component({\n  template: `<div *ifloaded=\"state\">{{ state.data }}</div>`,\n})\nexport class AppComponent {\n  state: LoadingState<person>;\n}\n</person></t></t></t></t></t></t></t></t></t></code-example>\n<p translation-result=\"on\">在这个例子中，<code>LoadingState&#x3C;T></code> 类型允许两种状态之一，<code>Loaded&#x3C;T></code> 或 <code>Loading</code>。此表达式用作该指令的 <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 输入是一个总括类型 <code>LoadingState</code>，因为此处的加载状态是未知的。</p><p translation-origin=\"off\">In this example, the <code>LoadingState&#x3C;T></code> type permits either of two states, <code>Loaded&#x3C;T></code> or <code>Loading</code>. The expression used as the directive’s <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> input is of the umbrella type <code>LoadingState</code>, as it’s unknown what the loading state is at that point.</p>\n\n<p translation-result=\"on\"><code>IfLoadedDirective</code> 定义声明了静态字段 <code>ngTemplateGuard_state</code>，表示其窄化行为。在 <code>AppComponent</code> 模板中，<code>*ifLoaded</code> 结构型指令只有当实际的 <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 是 <code>Loaded&#x3C;Person></code> 类型时，才会渲染该模板。类型守护允许类型检查器推断出模板中可接受的 <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 类型是 <code>Loaded&#x3C;T></code>，并进一步推断出 <code>T</code> 必须是 <code>Person</code> 一个实例。</p><p translation-origin=\"off\">The <code>IfLoadedDirective</code> definition declares the static field <code>ngTemplateGuard_state</code>, which expresses the narrowing behavior.\nWithin the <code>AppComponent</code> template, the <code>*ifLoaded</code> structural directive should render this template only when <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> is actually <code>Loaded&#x3C;Person></code>.\nThe type guard allows the type checker to infer that the acceptable type of <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> within the template is a <code>Loaded&#x3C;T></code>, and further infer that <code>T</code> must be an instance of <code>Person</code>.</p>\n\n<a id=\"narrowing-context-type\"></a>\n<h3 id=\"typing-the-directives-context\" translation-result=\"on\">为指令上下文指定类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#typing-the-directives-context\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"typing-the-directives-context\">Typing the directive's context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#typing-the-directives-context\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你的结构型指令要为实例化的模板提供一个上下文，可以通过提供静态的 <code>ngTemplateContextGuard</code> 函数在模板中给它提供合适的类型。下面的代码片段展示了该函数的一个例子。</p><p translation-origin=\"off\">If your structural directive provides a context to the instantiated template, you can properly type it inside the template by providing a static <code>ngTemplateContextGuard</code> function.\nThe following snippet shows an example of such a function.</p>\n\n<code-example language=\"ts\" header=\"myDirective.ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({…})\nexport class ExampleDirective {\n    // Make sure the template checker knows the type of the context with which the\n    // template of this directive will be rendered\n    <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngTemplateContextGuard(dir: ExampleDirective, ctx: unknown): ctx is ExampleContext { return true; };\n\n    // …\n}\n</code-example>\n<a id=\"summary\"></a>\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以去<live-example></live-example>中下载本章的源码。</p><p translation-origin=\"off\">You can both try and download the source code for this guide in the <live-example></live-example>.</p>\n\n<p translation-result=\"on\">本章相关的代码如下：</p><p translation-origin=\"off\">Here is the source from the <code>src/app/</code> folder.</p>\n\n<code-tabs>\n\n  <code-pane header=\"app.component.ts\" path=\"structural-directives/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero, heroes } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ]\n})\nexport class AppComponent {\n  heroes = heroes;\n  hero = this.heroes[0];\n\n  condition = false;\n  logs: string[] = [];\n  showSad = true;\n  status = 'ready';\n\n  trackById(index: number, hero: Hero): number { return hero.id; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app.component.html\" path=\"structural-directives/src/app/app.component.html\">\n&#x3C;h1>Structural Directives&#x3C;/h1>\n\n&#x3C;p>Conditional display of hero&#x3C;/p>\n\n&#x3C;blockquote>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\">{{hero.name}}&#x3C;/div>\n&#x3C;/blockquote>\n\n&#x3C;p>List of heroes&#x3C;/p>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero.name}}&#x3C;/li>\n&#x3C;/ul>\n\n\n&#x3C;hr>\n\n&#x3C;h2 id=\"<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>\"><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>&#x3C;/h2>\n\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\">\n  Expression is true and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is true.\n  This paragraph is in the DOM.\n&#x3C;/p>\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"false\">\n  Expression is false and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is false.\n  This paragraph is not in the DOM.\n&#x3C;/p>\n\n&#x3C;p [style.display]=\"'block'\">\n  Expression sets display to \"block\".\n  This paragraph is visible.\n&#x3C;/p>\n&#x3C;p [style.display]=\"'none'\">\n  Expression sets display to \"none\".\n  This paragraph is hidden but still in the DOM.\n&#x3C;/p>\n\n&#x3C;h4><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a> with template&#x3C;/h4>\n&#x3C;p>&#x26;lt;ng-template&#x26;gt; element&#x3C;/p>\n&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"hero\">\n  &#x3C;div class=\"name\">{{hero.name}}&#x3C;/div>\n&#x3C;/ng-template>\n\n&#x3C;hr>\n\n&#x3C;h2 id=\"ng-container\">&#x26;lt;ng-container&#x26;gt;&#x3C;/h2>\n\n&#x3C;h4>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> with a &#x26;lt;ng-container&#x26;gt;&#x3C;/h4>\n\n&#x3C;button (click)=\"hero = hero ? null : heroes[0]\">Toggle hero&#x3C;/button>\n\n&#x3C;p>\n  I turned the corner\n  &#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n    and saw {{hero.name}}. I waved\n  &#x3C;/ng-container>\n  and continued on my way.\n&#x3C;/p>\n&#x3C;p>\n  I turned the corner\n  &#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n    and saw {{hero.name}}. I waved\n  &#x3C;/span>\n  and continued on my way.\n&#x3C;/p>\n\n&#x3C;p>&#x3C;i>&#x26;lt;select&#x26;gt; with &#x26;lt;span&#x26;gt;&#x3C;/i>&#x3C;/p>\n&#x3C;div>\n  Pick your favorite hero\n  (&#x3C;label>&#x3C;input type=\"checkbox\" checked (change)=\"showSad = !showSad\">show sad&#x3C;/label>)\n&#x3C;/div>\n&#x3C;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\">\n  &#x3C;span *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\">\n    &#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\">\n      &#x3C;option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})&#x3C;/option>\n    &#x3C;/span>\n  &#x3C;/span>\n&#x3C;/select>\n\n&#x3C;p>&#x3C;i>&#x26;lt;select&#x26;gt; with &#x26;lt;ng-container&#x26;gt;&#x3C;/i>&#x3C;/p>\n&#x3C;div>\n  Pick your favorite hero\n  (&#x3C;label>&#x3C;input type=\"checkbox\" checked (change)=\"showSad = !showSad\">show sad&#x3C;/label>)\n&#x3C;/div>\n&#x3C;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\">\n  &#x3C;ng-container *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\">\n    &#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\">\n      &#x3C;option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})&#x3C;/option>\n    &#x3C;/ng-container>\n  &#x3C;/ng-container>\n&#x3C;/select>\n&#x3C;br>&#x3C;br>\n\n&#x3C;hr>\n\n&#x3C;h2 id=\"<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>\">NgFor&#x3C;/h2>\n\n&#x3C;div class=\"box\">\n\n&#x3C;p class=\"code\">&#x26;lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\"&#x26;gt;&#x3C;/p>\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n  ({{i}}) {{hero.name}}\n&#x3C;/div>\n\n&#x3C;p class=\"code\">&#x26;lt;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\"/&#x26;gt;&#x3C;/p>\n&#x3C;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\">\n  &#x3C;div [class.odd]=\"odd\">({{i}}) {{hero.name}}&#x3C;/div>\n&#x3C;/ng-template>\n\n&#x3C;/div>\n&#x3C;hr>\n\n&#x3C;h2 id=\"<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>\"><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a>&#x3C;/h2>\n\n&#x3C;div>Pick your favorite hero&#x3C;/div>\n&#x3C;p>\n  &#x3C;label *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\">\n    &#x3C;input type=\"radio\" name=\"heroes\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\" [value]=\"h\">{{h.name}}\n  &#x3C;/label>\n  &#x3C;label>&#x3C;input type=\"radio\" name=\"heroes\" (click)=\"hero = null\">None of the above&#x3C;/label>\n&#x3C;/p>\n\n&#x3C;h4><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a>&#x3C;/h4>\n\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\">\n  &#x3C;app-happy-hero    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'happy'\"    [hero]=\"hero\">&#x3C;/app-happy-hero>\n  &#x3C;app-sad-hero      *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'sad'\"      [hero]=\"hero\">&#x3C;/app-sad-hero>\n  &#x3C;app-confused-hero *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'confused'\" [hero]=\"hero\">&#x3C;/app-confused-hero>\n  &#x3C;app-unknown-hero  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [hero]=\"hero\">&#x3C;/app-unknown-hero>\n&#x3C;/div>\n\n&#x3C;h4><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a> with &#x26;lt;ng-template&#x26;gt;&#x3C;/h4>\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\">\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'happy'\">\n    &#x3C;app-happy-hero [hero]=\"hero\">&#x3C;/app-happy-hero>\n  &#x3C;/ng-template>\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'sad'\">\n    &#x3C;app-sad-hero [hero]=\"hero\">&#x3C;/app-sad-hero>\n  &#x3C;/ng-template>\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'confused'\">\n    &#x3C;app-confused-hero [hero]=\"hero\">&#x3C;/app-confused-hero>\n  &#x3C;/ng-template >\n  &#x3C;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>>\n    &#x3C;app-unknown-hero [hero]=\"hero\">&#x3C;/app-unknown-hero>\n  &#x3C;/ng-template>\n&#x3C;/div>\n\n&#x3C;hr>\n\n&#x3C;h2>&#x26;lt;ng-template&#x26;gt;&#x3C;/h2>\n&#x3C;p>Hip!&#x3C;/p>\n&#x3C;ng-template>\n  &#x3C;p>Hip!&#x3C;/p>\n&#x3C;/ng-template>\n&#x3C;p>Hooray!&#x3C;/p>\n\n&#x3C;hr>\n\n&#x3C;h2 id=\"appUnless\">UnlessDirective&#x3C;/h2>\n&#x3C;p>\n  The condition is currently\n  &#x3C;span [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{ 'a': !condition, 'b': condition, 'unless': true }\">{{condition}}&#x3C;/span>.\n  &#x3C;button\n    (click)=\"condition = !condition\"\n    [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] = \"{ 'a': condition, 'b': !condition }\" >\n    Toggle condition to {{condition ? 'false' : 'true'}}\n  &#x3C;/button>\n&#x3C;/p>\n&#x3C;p *appUnless=\"condition\" class=\"unless a\">\n  (A) This paragraph is displayed because the condition is false.\n&#x3C;/p>\n\n&#x3C;p *appUnless=\"!condition\" class=\"unless b\">\n  (B) Although the condition is true,\n  this paragraph is displayed because appUnless is set to false.\n&#x3C;/p>\n\n\n&#x3C;h4>UnlessDirective with template&#x3C;/h4>\n\n&#x3C;p *appUnless=\"condition\">Show this sentence unless the condition is true.&#x3C;/p>\n\n&#x3C;p *appUnless=\"condition\" class=\"code unless\">\n  (A) &#x26;lt;p *appUnless=\"condition\" class=\"code unless\"&#x26;gt;\n&#x3C;/p>\n\n&#x3C;ng-template [appUnless]=\"condition\">\n  &#x3C;p class=\"code unless\">\n    (A) &#x26;lt;ng-template [appUnless]=\"condition\"&#x26;gt;\n  &#x3C;/p>\n&#x3C;/ng-template>\n\n\n\n</code-pane>\n\n  <code-pane header=\"app.component.css\" path=\"structural-directives/src/app/app.component.css\">\nbutton {\n  min-width: 100px;\n  font-size: 100%;\n}\n\n.box {\n  border: 1px solid gray;\n  max-width: 600px;\n  padding: 4px;\n}\n.choices {\n  font-style: italic;\n}\n\ncode, .code {\n  background-color: #eee;\n  color: black;\n  font-family: Courier, sans-serif;\n  font-size: 85%;\n}\n\ndiv.code {\n  width: 400px;\n}\n\n.heroic {\n  font-size: 150%;\n  font-weight: bold;\n}\n\nhr {\n  margin: 40px 0\n}\n\n.odd {\n  background-color:  palegoldenrod;\n}\n\ntd, th {\n  text-align: left;\n  vertical-align: top;\n}\n\np span { color: red; font-size: 70%; }\n\n.unless {\n  border: 2px solid;\n  padding: 6px;\n}\n\np.unless {\n  width: 500px;\n}\n\nbutton.a, span.a, .unless.a {\n  color: red;\n  border-color: gold;\n  background-color: yellow;\n  font-size: 100%;\n}\n\nbutton.b, span.b, .unless.b {\n  color: black;\n  border-color: green;\n  background-color: lightgreen;\n  font-size: 100%;\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app.module.ts\" path=\"structural-directives/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }         from './app.component';\nimport { heroSwitchComponents } from './hero-switch.components';\nimport { UnlessDirective }    from './unless.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> ],\n  declarations: [\n    AppComponent,\n    heroSwitchComponents,\n    UnlessDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"hero.ts\" path=\"structural-directives/src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n  emotion?: string;\n}\n\nexport const heroes: Hero[] = [\n  { id: 1, name: 'Dr Nice',  emotion: 'happy'},\n  { id: 2, name: 'Narco',     emotion: 'sad' },\n  { id: 3, name: 'Windstorm', emotion: 'confused' },\n  { id: 4, name: 'Magneta'}\n];\n\n\n</code-pane>\n\n  <code-pane header=\"hero-switch.components.ts\" path=\"structural-directives/src/app/hero-switch.components.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-happy-hero',\n  template: `Wow. You like {{hero.name}}. What a happy hero ... just like you.`\n})\nexport class HappyHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sad-hero',\n  template: `You like {{hero.name}}? Such a sad hero. Are you sad too?`\n})\nexport class SadHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-confused-hero',\n  template: `Are you as confused as {{hero.name}}?`\n})\nexport class ConfusedHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-unknown-hero',\n  template: `{{message}}`\n})\nexport class UnknownHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  get message() {\n    return this.hero &#x26;&#x26; this.hero.name ?\n      `${this.hero.name} is strange and mysterious.` :\n      'Are you feeling indecisive?';\n  }\n}\n\nexport const heroSwitchComponents =\n  [ HappyHeroComponent, SadHeroComponent, ConfusedHeroComponent, UnknownHeroComponent ];\n\n\n</code-pane>\n\n  <code-pane header=\"unless.directive.ts\" path=\"structural-directives/src/app/unless.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n *\n * If the expression assigned to `appUnless` evaluates to a truthy value\n * then the templated elements are removed removed from the DOM,\n * the templated elements are (re)inserted into the DOM.\n *\n * &#x3C;div *appUnless=\"errorCount\" class=\"success\">\n *   Congrats! Everything is great!\n * &#x3C;/div>\n *\n * ### Syntax\n *\n * - `&#x3C;div *appUnless=\"condition\">...&#x3C;/div>`\n * - `&#x3C;ng-template [appUnless]=\"condition\">&#x3C;div>...&#x3C;/div>&#x3C;/ng-template>`\n *\n */\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appUnless]'})\nexport class UnlessDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>,\n    private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n    if (!condition &#x26;&#x26; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (condition &#x26;&#x26; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">你学到了</p><p translation-origin=\"off\">You learned:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 结构型指令可以操纵 HTML 的元素布局。</p><p translation-origin=\"off\">that structural directives manipulate HTML layout.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当没有合适的宿主元素时，可以使用<a href=\"guide/structural-directives#ngcontainer\"><code>&#x3C;ng-container></code></a>对元素进行分组。</p><p translation-origin=\"off\">to use <a href=\"guide/structural-directives#ngcontainer\"><code>&#x3C;ng-container></code></a> as a grouping element when there is no suitable host element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> Angular 会把<a href=\"guide/structural-directives#asterisk\">星号（*）语法</a>解开成 <code>&#x3C;ng-template></code>。</p><p translation-origin=\"off\">that the Angular desugars <a href=\"guide/structural-directives#asterisk\">asterisk (*) syntax</a> into a <code>&#x3C;ng-template></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 内置指令 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>、<code>NgFor</code> 和 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 的工作原理。</p><p translation-origin=\"off\">how that works for the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>, <code>NgFor</code> and <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> built-in directives.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/structural-directives#microsyntax\"><em>微语法</em></a>如何展开成<a href=\"guide/structural-directives#template\"><code>&#x3C;ng-template></code></a>。</p><p translation-origin=\"off\">about the <a href=\"guide/structural-directives#microsyntax\"><em>microsyntax</em></a> that expands into a <a href=\"guide/structural-directives#template\"><code>&#x3C;ng-template></code></a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 写了一个<a href=\"guide/structural-directives#unless\">自定义结构型指令</a> —— <code>UnlessDirective</code>。</p><p translation-origin=\"off\">to write a <a href=\"guide/structural-directives#unless\">custom structural directive</a>, <code>UnlessDirective</code>.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - api/common\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgSwitch\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/glossary\n - guide/template-syntax\n - guide/template-typecheck\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgIf#static-properties\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Input\n - api/core/NgModule\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/upgrade/static\n - guide/attribute-directives\n - guide/structural-directives#asterisk\n - guide/structural-directives#constraints\n - guide/structural-directives#grammar\n - guide/structural-directives#group-sibling-elements-with-ng-container\n - guide/structural-directives#improving-template-type-checking-for-custom-directives\n - guide/structural-directives#inside-ngfor\n - guide/structural-directives#inside-ngswitch-directives\n - guide/structural-directives#make-in-template-type-requirements-more-specific-with-template-guards\n - guide/structural-directives#microsyntax\n - guide/structural-directives#microsyntax-examples\n - guide/structural-directives#ng-container\n - guide/structural-directives#ng-container-to-the-rescue\n - guide/structural-directives#ngFor\n - guide/structural-directives#ngSwitch\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#ngif-case-study\n - guide/structural-directives#one-per-element\n - guide/structural-directives#one-structural-directive-per-host-element\n - guide/structural-directives#prefer-the-asterisk--syntax\n - guide/structural-directives#structural-directives\n - guide/structural-directives#summary\n - guide/structural-directives#template\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#templateref-and-viewcontainerref\n - guide/structural-directives#the-appunless-property\n - guide/structural-directives#the-asterisk--prefix\n - guide/structural-directives#the-ng-template\n - guide/structural-directives#translation\n - guide/structural-directives#typing-the-directives-context\n - guide/structural-directives#unless\n - guide/structural-directives#what-are-structural-directives\n - guide/structural-directives#why-remove-rather-than-hide\n - guide/structural-directives#write-a-structural-directive\n - guide/structural-directives#writing-your-own-structural-directives\n - guide/styleguide#02-03\n - guide/template-syntax\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#ref-vars\n - guide/template-syntax#template-expressions\n - guide/template-typecheck\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/structural-directives.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts\n - https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n-->"
}