{
  "id": "guide/feature-modules",
  "title": "Feature modules",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/feature-modules.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"feature-modules\" translation-result=\"on\">特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"feature-modules\">Feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">特性模块是用来对代码进行组织的模块。</p><p translation-origin=\"off\">Feature modules are NgModules for the purpose of organizing code.</p>\n\n<p translation-result=\"on\">要想查看本页提到的这个带有特性模块的范例应用，参见 <live-example></live-example>。</p><p translation-origin=\"off\">For the final sample app with a feature module that this page describes,\nsee the <live-example></live-example>.</p>\n\n<hr>\n<p translation-result=\"on\">随着应用的增长，你可能需要组织与特定应用有关的代码。\n这将帮你把特性划出清晰的边界。使用特性模块，你可以把与特定的功能或特性有关的代码从其它代码中分离出来。\n为应用勾勒出清晰的边界，有助于开发人员之间、小组之间的协作，有助于分离各个指令，并帮助管理根模块的大小。</p><p translation-origin=\"off\">As your app grows, you can organize code relevant for a specific feature.\nThis helps apply clear boundaries for features. With feature modules,\nyou can keep code related to a specific functionality or feature\nseparate from other code. Delineating areas of your\napp helps with collaboration between developers and teams, separating\ndirectives, and managing the size of the root module.</p>\n\n<h2 id=\"feature-modules-vs-root-modules\" translation-result=\"on\">特性模块 vs. 根模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules-vs-root-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"feature-modules-vs-root-modules\">Feature modules vs. root modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules-vs-root-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">与核心的 Angular API 的概念相反，特性模块是最佳的组织方式。特性模块提供了聚焦于特定应用需求的一组功能，比如用户工作流、路由或表单。\n虽然你也可以用根模块做完所有事情，不过特性模块可以帮助你把应用划分成一些聚焦的功能区。特性模块通过它提供的服务以及共享出的组件、指令和管道来与根模块和其它模块合作。</p><p translation-origin=\"off\">A feature module is an organizational best practice, as opposed to a concept of the core Angular API. A feature module delivers a cohesive set of functionality focused on a\nspecific application need such as a user workflow, routing, or forms.\nWhile you can do everything within the root module, feature modules\nhelp you partition the app into focused areas. A feature module\ncollaborates with the root module and with other modules through\nthe services it provides and the components, directives, and\npipes that it shares.</p>\n\n<h2 id=\"how-to-make-a-feature-module\" translation-result=\"on\">如何制作特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#how-to-make-a-feature-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-to-make-a-feature-module\">How to make a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#how-to-make-a-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你已经有了 <a href=\"cli\">Angular CLI</a> 生成的应用，可以在项目的根目录下输入下面的命令来创建特性模块。把这里的 <code>CustomerDashboard</code> 替换成你的模块名。你可以从名字中省略掉“Module”后缀，因为 CLI 会自动追加上它：</p><p translation-origin=\"off\">Assuming you already have an app that you created with the <a href=\"cli\">Angular CLI</a>, create a feature\nmodule using the CLI by entering the following command in the\nroot project directory. Replace <code>CustomerDashboard</code> with the\nname of your module. You can omit the \"Module\" suffix from the name because the CLI appends it:</p>\n\n<code-example language=\"sh\">\nng generate module CustomerDashboard\n</code-example>\n<p translation-result=\"on\">这会让 CLI 创建一个名叫 <code>customer-dashboard</code> 的文件夹，其中有一个名叫 <code>customer-dashboard.module.ts</code>，内容如下：</p><p translation-origin=\"off\">This causes the CLI to create a folder called <code>customer-dashboard</code> with a file inside called <code>customer-dashboard.module.ts</code> with the following contents:</p>\n\n<code-example language=\"typescript\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class CustomerDashboardModule { }\n</code-example>\n<p translation-result=\"on\">无论根模块还是特性模块，其 NgModule 结构都是一样的。在 CLI 生成的特性模块中，在文件顶部有两个 JavaScript 的导入语句：第一个导入了 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，它像根模块中一样让你能使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器；第二个导入了 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，它提供了很多像 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 这样的常用指令。\n特性模块导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，而不是 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，后者只应该在根模块中导入一次。\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 只包含常用指令的信息，比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，它们在大多数模板中都要用到，而 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 为浏览器所做的应用配置只会使用一次。</p><p translation-origin=\"off\">The structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>, which, like the root module, lets you use the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator; the second imports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>, which contributes many common directives such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. Feature modules import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> instead of <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>, which is only imported once in the root module. <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> only contains information for common directives such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> which are needed in most templates, whereas <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> configures the Angular app for the browser which needs to be done only once.</p>\n\n<p translation-result=\"on\"><code>declarations</code> 数组让你能添加专属于这个模块的可声明对象（组件、指令和管道）。\n要添加组件，就在命令行中输入如下命令，这里的 <code>customer-dashboard</code> 是一个目录，CLI 会把特性模块生成在这里，而 <code>CustomerDashboard</code> 就是该组件的名字：</p><p translation-origin=\"off\">The <code>declarations</code> array is available for you to add declarables, which\nare components, directives, and pipes that belong exclusively to this particular module. To add a component, enter the following command at the command line where <code>customer-dashboard</code> is the directory where the CLI generated the feature module and <code>CustomerDashboard</code> is the name of the component:</p>\n\n<code-example language=\"sh\">\nng generate component customer-dashboard/CustomerDashboard\n</code-example>\n<p translation-result=\"on\">这会在 <code>customer-dashboard</code> 中为新组件生成一个目录，并使用 <code>CustomerDashboardComponent</code> 的信息修改这个特性模块：</p><p translation-origin=\"off\">This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the <code>CustomerDashboardComponent</code> info:</p>\n\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"customer-dashboard-component\" header=\"src/app/customer-dashboard/customer-dashboard.module.ts\">\n// import the new component\nimport { CustomerDashboardComponent } from './customer-dashboard/customer-dashboard.component';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: [\n    CustomerDashboardComponent\n  ],\n})\n\n\n</code-example>\n<p translation-result=\"on\"><code>CustomerDashboardComponent</code> 出现在了顶部的 JavaScript 导入列表里，并且被添加到了 <code>declarations</code> 数组中，它会让 Angular 把新组件和这个特性模块联系起来。</p><p translation-origin=\"off\">The <code>CustomerDashboardComponent</code> is now in the JavaScript import list at the top and added to the <code>declarations</code> array, which lets Angular know to associate this new component with this feature module.</p>\n\n<h2 id=\"importing-a-feature-module\" translation-result=\"on\">导入特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#importing-a-feature-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"importing-a-feature-module\">Importing a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#importing-a-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想把这个特性模块包含进应用中，你还得让根模块 <code>app.module.ts</code> 知道它。注意，在 <code>customer-dashboard.module.ts</code> 文件底部 <code>CustomerDashboardModule</code> 的导出部分。这样就把它暴露出来，以便其它模块可以拿到它。要想把它导入到 <code>AppModule</code> 中，就把它加入 <code>app.module.ts</code> 的导入表中，并将其加入 <code>imports</code> 数组：</p><p translation-origin=\"off\">To incorporate the feature module into your app, you have to let the root module, <code>app.module.ts</code>, know about it. Notice the <code>CustomerDashboardModule</code> export at the bottom of <code>customer-dashboard.module.ts</code>. This exposes it so that other modules can get to it. To import it into the <code>AppModule</code>, add it to the imports in <code>app.module.ts</code> and to the <code>imports</code> array:</p>\n\n<code-example path=\"feature-modules/src/app/app.module.ts\" region=\"app-module\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n// import the feature module here so you can add it to the imports array below\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    CustomerDashboardModule // add the feature module here\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p translation-result=\"on\">现在 <code>AppModule</code> 知道这个特性模块了。如果你往该特性模块中加入过任何服务提供者，<code>AppModule</code> 也同样会知道它，其它模块中也一样。不过，NgModule 并不会暴露出它们的组件。</p><p translation-origin=\"off\">Now the <code>AppModule</code> knows about the feature module. If you were to add any service providers to the feature module, <code>AppModule</code> would know about those too, as would any other feature modules. However, NgModules don’t expose their components.</p>\n\n<h2 id=\"rendering-a-feature-modules-component-template\" translation-result=\"on\">渲染特性模块的组件模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#rendering-a-feature-modules-component-template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"rendering-a-feature-modules-component-template\">Rendering a feature module’s component template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#rendering-a-feature-modules-component-template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当 CLI 为这个特性模块生成 <code>CustomerDashboardComponent</code> 时，还包含一个模板 <code>customer-dashboard.component.html</code>，它带有如下页面脚本：</p><p translation-origin=\"off\">When the CLI generated the <code>CustomerDashboardComponent</code> for the feature module, it included a template, <code>customer-dashboard.component.html</code>, with the following markup:</p>\n\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" region=\"feature-template\" header=\"src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\">\n&#x3C;p>\n  customer-dashboard works!\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">要想在 <code>AppComponent</code> 中查看这些 HTML，你首先要在 <code>CustomerDashboardModule</code> 中导出 <code>CustomerDashboardComponent</code>。\n在 <code>customer-dashboard.module.ts</code> 中，<code>declarations</code> 数组的紧下方，加入一个包含 <code>CustomerDashboardModule</code> 的 <code>exports</code> 数组：</p><p translation-origin=\"off\">To see this HTML in the <code>AppComponent</code>, you first have to export the <code>CustomerDashboardComponent</code> in the <code>CustomerDashboardModule</code>. In <code>customer-dashboard.module.ts</code>, just beneath the <code>declarations</code> array, add an <code>exports</code> array containing <code>CustomerDashboardComponent</code>:</p>\n\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"component-exports\" header=\"src/app/customer-dashboard/customer-dashboard.module.ts\">\nexports: [\n  CustomerDashboardComponent\n]\n\n</code-example>\n<p translation-result=\"on\">然后，在 <code>AppComponent</code> 的 <code>app.component.html</code> 中，加入标签 <code>&#x3C;app-customer-dashboard></code>：</p><p translation-origin=\"off\">Next, in the <code>AppComponent</code>, <code>app.component.html</code>, add the tag <code>&#x3C;app-customer-dashboard></code>:</p>\n\n<code-example path=\"feature-modules/src/app/app.component.html\" region=\"app-component-template\" header=\"src/app/app.component.html\">\n&#x3C;h1>\n  {{title}}\n&#x3C;/h1>\n\n&#x3C;!-- add the selector from the CustomerDashboardComponent -->\n&#x3C;app-customer-dashboard>&#x3C;/app-customer-dashboard>\n\n</code-example>\n<p translation-result=\"on\">现在，除了默认渲染出的标题外，还渲染出了 <code>CustomerDashboardComponent</code> 的模板：</p><p translation-origin=\"off\">Now, in addition to the title that renders by default, the <code>CustomerDashboardComponent</code> template renders too:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/feature-modules/feature-module.png\" alt=\"feature module component\" width=\"594\" height=\"408\">\n</div>\n<hr>\n<h2 id=\"more-on-ngmodules\" translation-result=\"on\">关于 NgModule 的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"more-on-ngmodules\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能还对下列内容感兴趣：</p><p translation-origin=\"off\">You may also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/lazy-loading-ngmodules\">使用 Angular 路由器惰性加载模块</a>。</p><p translation-origin=\"off\"><a href=\"guide/lazy-loading-ngmodules\">Lazy Loading Modules with the Angular Router</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/providers\">服务提供者</a>。</p><p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/module-types\">特性模块的分类</a>。</p><p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a>.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/testing\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - cli\n - guide/feature-modules#feature-modules\n - guide/feature-modules#feature-modules-vs-root-modules\n - guide/feature-modules#how-to-make-a-feature-module\n - guide/feature-modules#importing-a-feature-module\n - guide/feature-modules#more-on-ngmodules\n - guide/feature-modules#rendering-a-feature-modules-component-template\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/providers\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/feature-modules.md?message=docs%3A%20请简述你的修改...\n-->"
}