{
  "id": "guide/cheatsheet",
  "title": "速查表",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/cheatsheet.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <div class=\"center-layout-wide\">\n<h1 class=\"no-toc\" id=\"cheat-sheet\">Cheat Sheet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cheatsheet#cheat-sheet\"><i class=\"material-icons\">link</i></a></h1>\n<h1 class=\"no-toc\" id=\"速查表\">速查表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cheatsheet#速查表\"><i class=\"material-icons\">link</i></a></h1>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Bootstrapping</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">引导</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code> from <code>@angular/platform-browser-dynamic</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule); </code-example></td>\n<td align=\"left\">Bootstraps the application, using the root component from the specified <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule); </code-example></td>\n<td align=\"left\">用 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中指定的根组件进行启动。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">NgModules</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">NgModules</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> from <code>@angular/core</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ \n  declarations: …, \n  imports: …, \n  exports: …, \n  providers: …, \n  bootstrap: … \n}) \nclass MyModule {} </code-example></td>\n<td align=\"left\">Defines a module that contains components, directives, pipes, and providers.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ \n  declarations: …, \n  imports: …, \n  exports: …, \n  providers: …, \n  bootstrap: … \n}) \nclass MyModule {} </code-example></td>\n<td align=\"left\">定义一个模块，其中可以包含组件、指令、管道和服务提供者。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> declarations: [ \n  MyRedComponent, \n  MyBlueComponent, \n  MyDatePipe \n] </code-example></td>\n<td align=\"left\">List of components, directives, and pipes that belong to this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> declarations: [ \n  MyRedComponent, \n  MyBlueComponent, \n  MyDatePipe \n] </code-example></td>\n<td align=\"left\">属于当前模块的组件、指令和管道的列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> imports: [ \n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, \n  SomeOtherModule \n] </code-example></td>\n<td align=\"left\">List of modules to import into this module. Everything from the imported modules is available to <code>declarations</code> of this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> imports: [ \n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, \n  SomeOtherModule \n] </code-example></td>\n<td align=\"left\">本模块所导入的模块列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> exports: [ \n  MyRedComponent, \n  MyDatePipe \n] </code-example></td>\n<td align=\"left\">List of components, directives, and pipes visible to modules that import this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> exports: [ \n  MyRedComponent, \n  MyDatePipe \n] </code-example></td>\n<td align=\"left\">那些导入了本模块的模块所能看到的组件、指令和管道的列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n  MyService, \n  { provide: … } \n] </code-example></td>\n<td align=\"left\">List of dependency injection providers visible both to the contents of this module and to importers of this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n  MyService, \n  { provide: … } \n] </code-example></td>\n<td align=\"left\">依赖注入提供者的列表，本模块以及本模块导入的所有模块中的内容都可以看见它们。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> bootstrap: [MyAppComponent] </code-example></td>\n<td align=\"left\">List of components to bootstrap when this module is bootstrapped.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> bootstrap: [MyAppComponent] </code-example></td>\n<td align=\"left\">当本模块启动时，随之启动的组件列表。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Template syntax</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">模板语法</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;input [value]=\"firstName\"> </code-example></td>\n<td align=\"left\">Binds property <code>value</code> to the result of expression <code>firstName</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;input [value]=\"firstName\"> </code-example></td>\n<td align=\"left\">把 <code>value</code> 属性绑定到表达式 <code>firstName</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [attr.role]=\"myAriaRole\"> </code-example></td>\n<td align=\"left\">Binds attribute <code>role</code> to the result of expression <code>myAriaRole</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [attr.role]=\"myAriaRole\"> </code-example></td>\n<td align=\"left\">把属性（Attribute）<code>role</code> 绑定到表达式 <code>myAriaRole</code> 的结果。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [class.extra-sparkle]=\"isDelightful\"> </code-example></td>\n<td align=\"left\">Binds the presence of the CSS class <code>extra-sparkle</code> on the element to the truthiness of the expression <code>isDelightful</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [class.extra-sparkle]=\"isDelightful\"> </code-example></td>\n<td align=\"left\">根据 <code>isDelightful</code> 表达式的结果是否为真，决定 CSS 类 <code>extra-sparkle</code> 是否出现在当前元素上。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [style.width.px]=\"mySize\"> </code-example></td>\n<td align=\"left\">Binds style property <code>width</code> to the result of expression <code>mySize</code> in pixels. Units are optional.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [style.width.px]=\"mySize\"> </code-example></td>\n<td align=\"left\">把 CSS 样式属性 <code>width</code> 的 px（像素）值绑定到表达式 <code>mySize</code> 的结果。单位是可选的。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;button (click)=\"readRainbow($event)\"> </code-example></td>\n<td align=\"left\">Calls method <code>readRainbow</code> when a click event is triggered on this button element (or its children) and passes in the event object.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;button (click)=\"readRainbow($event)\"> </code-example></td>\n<td align=\"left\">当这个按钮元素（及其子元素）上的 click 事件触发时，调用方法 <code>readRainbow</code>，并把这个事件对象作为参数传进去。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div title=\"Hello {{ponyName}}\"> </code-example></td>\n<td align=\"left\">Binds a property to an interpolated string, for example, \"Hello Seabiscuit\". Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [title]=\"'Hello ' + ponyName\"> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div title=\"Hello {{ponyName}}\"> </code-example></td>\n<td align=\"left\">将属性绑定到插值字符串，比如“Hello Seabiscuit”。等效于：<code-example format=\"html\" hidecopy=\"\" language=\"html\">&#x3C;div [title]=\"'Hello ' + ponyName\"></code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Hello {{ponyName}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">Binds text content to an interpolated string, for example, \"Hello Seabiscuit\".</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Hello {{ponyName}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">把文本内容绑定到插值字符串（如\"Hello Seabiscuit\"）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;my-cmp [(title)]=\"name\"> </code-example></td>\n<td align=\"left\">Sets up two-way data binding. Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;my-cmp [(title)]=\"name\"> </code-example></td>\n<td align=\"left\">建立双向数据绑定。等效于：<code-example format=\"html\" hidecopy=\"\" language=\"html\">&#x3C;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"></code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;video #movieplayer …>&#x3C;/video> \n&#x3C;button (click)=\"movieplayer.play()\"> \n  Play \n&#x3C;/button> </code-example></td>\n<td align=\"left\">Creates a local variable <code>movieplayer</code> that provides access to the <code>video</code> element instance in data-binding and event-binding expressions in the current template.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;video #movieplayer …>&#x3C;/video> \n&#x3C;button (click)=\"movieplayer.play()\"> \n  Play \n&#x3C;/button> </code-example></td>\n<td align=\"left\">创建一个局部变量 <code>movieplayer</code>，支持在当前模板的数据绑定和事件绑定表达式中访问 <code>video</code> 元素的实例。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p *myUnless=\"myExpression\"> \n  … \n&#x3C;/p> </code-example></td>\n<td align=\"left\">The asterisk (<code>*</code>) character turns the current element into an embedded template. Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;ng-template [myUnless]=\"myExpression\"> \n  &#x3C;p> \n    … \n  &#x3C;/p> \n&#x3C;/ng-template> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p *myUnless=\"myExpression\"> \n  … \n&#x3C;/p> </code-example></td>\n<td align=\"left\">星号 ( <code>*</code> ) 字符将当前元素转换为嵌入式模板。等效于：<code-example format=\"html\" hidecopy=\"\" language=\"html\">&#x3C;ng-template [myUnless]=\"myExpression\"> &#x3C;p> … &#x3C;/p> &#x3C;/ng-template></code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Card No.: {{cardNumber | myCardNumberFormatter}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">Transforms the current value of expression <code>cardNumber</code> using the pipe called <code>myCardNumberFormatter</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Card No.: {{cardNumber | myCardNumberFormatter}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">使用名为 <code>myCardNumberFormatter</code> 的管道转换表达式 <code>cardNumber</code> 的当前值。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Employer: {{employer?.companyName}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">The safe navigation operator (<code>?</code>) means that the <code>employer</code> field is optional and if <code>undefined</code>, the rest of the expression should be ignored.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Employer: {{employer?.companyName}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">安全导航操作符（<code>?</code>）表示 <code>employer</code> 字段是可选的，如果它是 <code>undefined</code>，那么表达式其余的部分就会被忽略，并返回 <code>undefined</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;svg:rect x=\"0\" \n          y=\"0\" \n          width=\"100\" \n          height=\"100\"/> </code-example></td>\n<td align=\"left\">An SVG snippet template needs an <code>svg:</code> prefix on its root element to disambiguate the SVG element from an HTML component.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;svg:rect x=\"0\" \n          y=\"0\" \n          width=\"100\" \n          height=\"100\"/> </code-example></td>\n<td align=\"left\">模板中的 SVG 片段需要给它的根元素加上 <code>svg:</code> 前缀，以便把 SVG 元素和 HTML 元素区分开。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;svg> \n  &#x3C;rect x=\"0\" \n        y=\"0\" \n        width=\"100\" \n        height=\"100\"/> \n&#x3C;/svg> </code-example></td>\n<td align=\"left\">An <code>&#x3C;svg></code> root element is detected as an SVG element automatically, without the prefix.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;svg> \n  &#x3C;rect x=\"0\" \n        y=\"0\" \n        width=\"100\" \n        height=\"100\"/> \n&#x3C;/svg> </code-example></td>\n<td align=\"left\">以 <code>&#x3C;svg></code> 作为根元素时会自动识别为 SVG 元素，不需要前缀。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Built-in directives</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">内置指令</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> from <code>@angular/common</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;section *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSection\"> </code-example></td>\n<td align=\"left\">Removes or recreates a portion of the DOM tree based on the <code>showSection</code> expression.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;section *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSection\"> </code-example></td>\n<td align=\"left\">根据 <code>showSection</code> 表达式的结果，移除或重新创建 DOM 树的一部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of list\"> </code-example></td>\n<td align=\"left\">Turns the <code>li</code> element and its contents into a template, and uses that to instantiate a view for each item in list.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of list\"> </code-example></td>\n<td align=\"left\">将 <code>li</code> 元素及其内容转换为模板，并用它来实例化列表中的每个条目的视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"conditionExpression\">\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"case1Exp\"> \n    … \n  &#x3C;/ng-template>\n  &#x3C;ng-template <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"case2LiteralString\"> \n    … \n  &#x3C;/ng-template>\n  &#x3C;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>> \n    … \n  &#x3C;/ng-template> \n&#x3C;/div> </code-example></td>\n<td align=\"left\">Conditionally swaps the contents of the <code>div</code> by selecting one of the embedded templates based on the current value of <code>conditionExpression</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"conditionExpression\">\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"case1Exp\"> \n    … \n  &#x3C;/ng-template>\n  &#x3C;ng-template <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"case2LiteralString\"> \n    … \n  &#x3C;/ng-template>\n  &#x3C;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>> \n    … \n  &#x3C;/ng-template> \n&#x3C;/div> </code-example></td>\n<td align=\"left\">通过根据 <code>conditionExpression</code> 的当前值选择嵌入式模板之一，有条件地交换 <code>div</code> 的内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive, \n                 'disabled': isDisabled}\"> </code-example></td>\n<td align=\"left\">Binds the presence of CSS classes on the element to the truthiness of the associated map values. The right-hand expression should return <code>{class-name: true/false}</code> map.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive, \n                 'disabled': isDisabled}\"> </code-example></td>\n<td align=\"left\">将元素上存在的 CSS 类绑定到关联的映射值的真实性。右侧的表达式应返回 <code>{class-name: true/false}</code> 映射表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'property': 'value'}\"> \n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"dynamicStyles()\"> </code-example></td>\n<td align=\"left\">Allows you to assign styles to an HTML element using CSS. You can use CSS directly, as in the first example, or you can call a method from the component.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'property': 'value'}\"> \n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"dynamicStyles()\"> </code-example></td>\n<td align=\"left\">允许你使用 CSS 为 HTML 元素指定样式。你可以像第一个例子那样直接使用 CSS，也可以调用组件中的方法。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Forms</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">表单</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> from <code>@angular/forms</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"userName\"> </code-example></td>\n<td align=\"left\">Provides two-way data-binding, parsing, and validation for form controls.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"userName\"> </code-example></td>\n<td align=\"left\">为表单控件提供双向数据绑定、解析和验证功能。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Class decorators</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">类装饰器</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, &#x26;hellip;</code> from <code>@angular/core';</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({…}) \nclass MyComponent() {} </code-example></td>\n<td align=\"left\">Declares that a class is a component and provides metadata about the component.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({…}) \nclass MyComponent() {} </code-example></td>\n<td align=\"left\">声明一个类是组件，并提供该组件的元数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({…}) \nclass MyDirective() {} </code-example></td>\n<td align=\"left\">Declares that a class is a directive and provides metadata about the directive.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({…}) \nclass MyDirective() {} </code-example></td>\n<td align=\"left\">声明一个类是指令，并提供该指令的元数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({…}) \nclass MyPipe() {} </code-example></td>\n<td align=\"left\">Declares that a class is a pipe and provides metadata about the pipe.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({…}) \nclass MyPipe() {} </code-example></td>\n<td align=\"left\">声明一个类是管道，并提供该管道的元数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nclass MyService() {} </code-example></td>\n<td align=\"left\">Declares that a class can be provided and injected by other classes. Without this decorator, the compiler won't generate enough metadata to allow the class to be created properly when it's injected somewhere.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nclass MyService() {} </code-example></td>\n<td align=\"left\">声明某个类可以注册为提供者，并能被另一个类注入。如果没有该装饰器，编译器就不会生成足够的元数据，当它被注入到别处时，就无法正常创建该类。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Directive configuration</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">指令配置项</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ \n  property1: value1, \n  … \n}) </code-example></td>\n<td align=\"left\">Add <code>property1</code> property with <code>value1</code> value to Directive.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ \n  property1: value1, \n  … \n}) </code-example></td>\n<td align=\"left\">将具有 <code>value1</code> 值的 <code>property1</code> 属性添加到指令。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> selector: '.cool-button:not(a)' </code-example></td>\n<td align=\"left\">Specifies a CSS selector that identifies this directive within a template. Supported selectors include <code>element</code>, <code>[attribute]</code>, <code>.class</code>, and <code>:not()</code>. <br> Does not support parent-child relationship selectors.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> selector: '.cool-button:not(a)' </code-example></td>\n<td align=\"left\">指定一个 CSS 选择器，该选择器在模板中标识此指令。支持的选择器包括 <code>element</code> 、 <code>[attribute]</code> 、 <code>.class</code> 和 <code>:not()</code>。<br>不支持父子关系选择器。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n  MyService, \n  { provide: … } \n] </code-example></td>\n<td align=\"left\">List of dependency injection providers for this directive and its children.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n  MyService, \n  { provide: … } \n] </code-example></td>\n<td align=\"left\">该指令及其子指令的依赖注入提供者列表。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Component configuration <br> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> extends <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, so the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> configuration applies to components as well</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">组件配置 <br> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 扩展了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, 所以 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 的配置也同样适用于组件</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> moduleId: module.id </code-example></td>\n<td align=\"left\">If set, the <code>templateUrl</code> and <code>styleUrl</code> are resolved relative to the component.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> moduleId: module.id </code-example></td>\n<td align=\"left\">如果设置了，那么 <code>templateUrl</code> 和 <code>styleUrl</code> 的路径就会相对于当前组件进行解析。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> viewProviders: [MyService, { provide: … }] </code-example></td>\n<td align=\"left\">List of dependency injection providers scoped to this component's view.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> viewProviders: [MyService, { provide: … }] </code-example></td>\n<td align=\"left\">依赖注入提供者列表，但它们的范围被限定为当前组件的视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> template: 'Hello {{name}}' \ntemplateUrl: 'my-component.html' </code-example></td>\n<td align=\"left\">Inline template or external template URL of the component's view.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> template: 'Hello {{name}}' \ntemplateUrl: 'my-component.html' </code-example></td>\n<td align=\"left\">当前组件视图的内联模板或外部模板的 URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> styles: ['.primary {color: red}'] \nstyleUrls: ['my-component.css'] </code-example></td>\n<td align=\"left\">List of inline CSS styles or external stylesheet URLs for styling the component's view.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> styles: ['.primary {color: red}'] \nstyleUrls: ['my-component.css'] </code-example></td>\n<td align=\"left\">用于为当前组件的视图提供样式的内联 CSS 或外部样式表 URL 的列表。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Class field decorators for directives and components</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">给指令和组件使用的类属性配置项</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, ...</code> from <code>@angular/core</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() myProperty; </code-example></td>\n<td align=\"left\">Declares an input property that you can update using property binding (example: <code>&#x3C;my-cmp [myProperty]=\"someExpression\"></code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() myProperty; </code-example></td>\n<td align=\"left\">声明一个你可以用属性绑定来更新的输入属性（比如：<code>&#x26;lt;my-cmp [myProperty]=\"someExpression\"&#x26;gt;</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() myEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>(); </code-example></td>\n<td align=\"left\">Declares an output property that fires events that you can subscribe to with an event binding (example: <code>&#x3C;my-cmp (myEvent)=\"doSomething()\"></code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() myEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>(); </code-example></td>\n<td align=\"left\">声明一个输出属性，该属性会触发你可以用事件绑定订阅的事件（比如：<code>&#x26;lt;my-cmp (myEvent)=\"doSomething()\"&#x26;gt;</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('class.valid') isValid; </code-example></td>\n<td align=\"left\">Binds a host element property (here, the CSS class <code>valid</code>) to a directive/component property (<code>isValid</code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('class.valid') isValid; </code-example></td>\n<td align=\"left\">把宿主元素的一个属性（这里是 CSS 类 <code>valid</code>）绑定到指令或组件上的 <code>isValid</code> 属性。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click', ['$event']) onClick(e) {…} </code-example></td>\n<td align=\"left\">Subscribes to a host element event (<code>click</code>) with a directive/component method (<code>onClick</code>), optionally passing an argument (<code>$event</code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click', ['$event']) onClick(e) {…} </code-example></td>\n<td align=\"left\">用指令或组件上的 <code>onClick</code> 方法订阅宿主元素上的 <code>click</code> 事件，并从中获取 <code>$event</code> 参数（可选）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\">Binds the first result of the component content query (<code>myPredicate</code>) to a property (<code>myChildComponent</code>) of the class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\">把组件内容查询（<code>myPredicate</code>）的第一个结果绑定到该类的 <code>myChildComponent</code> 属性上。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\">Binds the results of the component content query (<code>myPredicate</code>) to a property (<code>myChildComponents</code>) of the class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\">把组件内容查询（<code>myPredicate</code>）的全部结果绑定到该类的 <code>myChildComponents</code> 属性上。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\">Binds the first result of the component view query (<code>myPredicate</code>) to a property (<code>myChildComponent</code>) of the class. Not available for directives.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\">把组件视图查询（<code>myPredicate</code>）的第一个结果绑定到该类的 <code>myChildComponent</code> 属性上。对指令无效。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\">Binds the results of the component view query (<code>myPredicate</code>) to a property (<code>myChildComponents</code>) of the class. Not available for directives.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\">把组件视图查询（<code>myPredicate</code>）的全部结果绑定到该类的 <code>myChildComponents</code> 属性上。对指令无效。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Directive and component change detection and lifecycle hooks (implemented as class methods)</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">指令和组件的变更检测与生命周期钩子（实现为类的方法）</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> constructor(myService: MyService, …) { … } </code-example></td>\n<td align=\"left\">Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> constructor(myService: MyService, …) { … } </code-example></td>\n<td align=\"left\">在任何其它生命周期钩子之前调用。可以用它来注入依赖项，但不要在这里做正事。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnChanges(changeRecord) { … } </code-example></td>\n<td align=\"left\">Called after every change to input properties and before processing content or child views.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnChanges(changeRecord) { … } </code-example></td>\n<td align=\"left\">每当输入属性发生变化时就会调用，但位于处理内容（<code>ng-content</code>）或子视图之前。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnInit() { … } </code-example></td>\n<td align=\"left\">Called after the constructor, initializing input properties, and the first call to <code>ngOnChanges</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnInit() { … } </code-example></td>\n<td align=\"left\">在调用完构造函数、初始化完所有输入属性并首次调用过 <code>ngOnChanges</code> 之后调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngDoCheck() { … } </code-example></td>\n<td align=\"left\">Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngDoCheck() { … } </code-example></td>\n<td align=\"left\">每当对组件或指令的输入属性进行变更检测时就会调用。可以用它来扩展变更检测逻辑，执行自定义的检测逻辑。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentInit() { … } </code-example></td>\n<td align=\"left\">Called after <code>ngOnInit</code> when the component's or directive's content has been initialized.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentInit() { … } </code-example></td>\n<td align=\"left\"><code>ngOnInit</code> 完成之后，当组件或指令的内容（<code>ng-content</code>）已经初始化完毕时调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentChecked() { … } </code-example></td>\n<td align=\"left\">Called after every check of the component's or directive's content.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentChecked() { … } </code-example></td>\n<td align=\"left\">每当组件或指令的内容（<code>ng-content</code>）做变更检测时调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewInit() { … } </code-example></td>\n<td align=\"left\">Called after <code>ngAfterContentInit</code> when the component's views and child views / the view that a directive is in has been initialized.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewInit() { … } </code-example></td>\n<td align=\"left\">当 <code>ngAfterContentInit</code> 完毕，并且组件的视图及其子视图或指令所属的视图已经初始化完毕时调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewChecked() { … } </code-example></td>\n<td align=\"left\">Called after every check of the component's views and child views / the view that a directive is in.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewChecked() { … } </code-example></td>\n<td align=\"left\">当组件的视图及其子视图或指令所属的视图每次执行变更检测时调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnDestroy() { … } </code-example></td>\n<td align=\"left\">Called once, before the instance is destroyed.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnDestroy() { … } </code-example></td>\n<td align=\"left\">只在实例被销毁前调用一次。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Dependency injection configuration</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">依赖注入配置项</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useClass: MyMockService } </code-example></td>\n<td align=\"left\">Sets or overrides the provider for <code>MyService</code> to the <code>MyMockService</code> class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useClass: MyMockService } </code-example></td>\n<td align=\"left\">把 <code>MyService</code> 的服务提供者设置或改写为 <code>MyMockService</code> 类。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useFactory: myFactory } </code-example></td>\n<td align=\"left\">Sets or overrides the provider for <code>MyService</code> to the <code>myFactory</code> factory function.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useFactory: myFactory } </code-example></td>\n<td align=\"left\">把 <code>MyService</code> 的服务提供者设置或改写为 <code>myFactory</code> 工厂函数。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyValue, useValue: 41 } </code-example></td>\n<td align=\"left\">Sets or overrides the provider for <code>MyValue</code> to the value <code>41</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyValue, useValue: 41 } </code-example></td>\n<td align=\"left\">把 <code>MyValue</code> 的服务提供者改写为一个特定的值 <code>41</code>。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Routing and navigation</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">路由与导航</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, … } from '@angular/router'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, ...</code> from <code>@angular/router</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n  { path: '', component: HomeComponent }, \n  { path: 'path/:routeParam', component: MyComponent }, \n  { path: 'staticPath', component: … }, \n  { path: '**', component: … }, \n  { path: 'oldPath', redirectTo: '/staticPath' }, \n  { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></td>\n<td align=\"left\">Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n  { path: '', component: HomeComponent }, \n  { path: 'path/:routeParam', component: MyComponent }, \n  { path: 'staticPath', component: … }, \n  { path: '**', component: … }, \n  { path: 'oldPath', redirectTo:b '/staticPath' }, \n  { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></td>\n<td align=\"left\">为该应用配置路由。支持静态、参数化、重定向和通配符路由。也支持自定义路由数据和解析（resolve）函数。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> \n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"aux\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> </code-example></td>\n<td align=\"left\">Marks the location to load the component of the active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> \n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"aux\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> </code-example></td>\n<td align=\"left\">标记出一个位置，用来加载活动路由的组件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', routeParam ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', { matrixParam: 'value' } ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" fragment=\"anchor\"> </code-example></td>\n<td align=\"left\">Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the <code>/</code> prefix; for a child route, use the <code>./</code>prefix; for a sibling or parent, use the <code>../</code> prefix.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', routeParam ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', { matrixParam: 'value' } ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" fragment=\"anchor\"> </code-example></td>\n<td align=\"left\">使用路由体系创建一个到其它视图的链接。路由体系由路由路径、必要参数、可选参数、查询参数和文档片段组成。要导航到根路由，请使用 <code>/</code> 前缀；要导航到子路由，使用 <code>./</code> 前缀；要导航到兄弟路由或父级路由，使用 <code>../</code> 前缀。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"> </code-example></td>\n<td align=\"left\">The provided classes are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"> </code-example></td>\n<td align=\"left\">当 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指向的路由变成活动路由时，为当前元素添加一些类（比如这里的 <code>active</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"> </code-example></td>\n<td align=\"left\">The provided classes and <code>aria-current</code> attribute are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"> </code-example></td>\n<td align=\"left\">当 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 成为当前的活动路由时，提供的类和 <code>aria-current</code> 属性会添加到元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanActivateGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> { \n  canActivate( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canActivate: [CanActivateGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a class that the router should call first to determine if it should activate this component. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanActivateGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> { \n  canActivate( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canActivate: [CanActivateGuard] } </code-example></td>\n<td align=\"left\">一个接口，用于定义路由器应该首先调用的类，以确定它是否应该激活此组件。应该返回一个<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&#x3C;T> { \n  canDeactivate( \n    component: T, \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canDeactivate: [CanDeactivateGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a class that the router should call first to determine if it should deactivate this component after a navigation. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&#x3C;T> { \n  canDeactivate( \n    component: T, \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canDeactivate: [CanDeactivateGuard] } </code-example></td>\n<td align=\"left\">一个接口，用于定义路由器应该首先调用的类，以确定它是否应该在导航后停用此组件。应该返回一个<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanActivateChildGuard implements <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> { \n  canActivateChild( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canActivateChild: [CanActivateGuard], children: … } </code-example></td>\n<td align=\"left\">An interface for defining a class that the router should call first to determine if it should activate the child route. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanActivateChildGuard implements <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> { \n  canActivateChild( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canActivateChild: [CanActivateGuard], children: … } </code-example></td>\n<td align=\"left\">一个接口，用于定义路由器应该首先调用的类，以确定它是否应该激活子路由。应该返回一个<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class ResolveGuard implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&#x3C;T> { \n  resolve( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;any>|Promise&#x3C;any>|any { … } \n} \n \n{ path: …, resolve: [ResolveGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a class that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class ResolveGuard implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&#x3C;T> { \n  resolve( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ): Observable&#x3C;any>|Promise&#x3C;any>|any { … } \n} \n \n{ path: …, resolve: [ResolveGuard] } </code-example></td>\n<td align=\"left\">用来定义类的接口。路由器会在渲染该路由之前，首先调用它来解析路由数据。应该返回一个值或能解析成值的 <code>Observable/Promise</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanLoadGuard implements <a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a> { \n  canLoad( \n    route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canLoad: [CanLoadGuard], loadChildren: … } </code-example></td>\n<td align=\"left\">An interface for defining a class that the router should call first to check if the lazy loaded module should be loaded. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> class CanLoadGuard implements <a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a> { \n  canLoad( \n    route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> \n  ): Observable&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|Promise&#x3C;boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a>>|boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a> { … } \n} \n \n{ path: …, canLoad: [CanLoadGuard], loadChildren: … } </code-example></td>\n<td align=\"left\">一个接口，用于定义路由器应该首先调用的类以检查是否应该加载惰性加载的模块。应该返回一个<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\">Routing and navigation</td>\n<td align=\"left\">Details</td>\n</tr>\n<tr>\n<td align=\"left\">:---</td>\n<td align=\"left\">:---</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, … } from '@angular/router'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, ...</code> from <code>@angular/router</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n  { path: '', component: HomeComponent }, \n  { path: 'path/:routeParam', component: MyComponent }, \n  { path: 'staticPath', component: … }, \n  { path: '**', component: … }, \n  { path: 'oldPath', redirectTo: '/staticPath' }, \n  { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></td>\n<td align=\"left\">Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> \n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"aux\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> </code-example></td>\n<td align=\"left\">Marks the location to load the component of the active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/path\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', routeParam ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', { matrixParam: 'value' } ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" fragment=\"anchor\"> </code-example></td>\n<td align=\"left\">Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the <code>/</code> prefix; for a child route, use the <code>./</code>prefix; for a sibling or parent, use the <code>../</code> prefix.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"> </code-example></td>\n<td align=\"left\">The provided classes are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"> </code-example></td>\n<td align=\"left\">The provided classes and <code>aria-current</code> attribute are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateGuard: <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = \n  ( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … } \n \n{ path: …, canActivate: [canActivateGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to determine if it should activate this component. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&#x3C;T> = \n  ( \n    component: T, \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … } \n \n{ path: …, canDeactivate: [canDeactivateGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to determine if it should deactivate this component after a navigation. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateChildGuard: <a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a> = \n  ( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … } \n \n{ path: …, canActivateChild: [canActivateGuard], children: … } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to determine if it should activate the child route. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function resolveGuard implements <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&#x3C;T> = \n  ( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … }  \n \n{ path: …, resolve: [resolveGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canLoadGuard: <a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a> = \n  ( \n    route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> \n  ) => { … } \n \n{ path: …, canLoad: [canLoadGuard], loadChildren: … } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to check if the lazy loaded module should be loaded. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/Pipe\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivate\n - api/router/CanDeactivateFn\n - api/router/CanLoad\n - api/router/CanLoadFn\n - api/router/Resolve\n - api/router/ResolveFn\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/UrlTree\n - guide/cheatsheet#cheat-sheet\n - guide/cheatsheet#速查表\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/cheatsheet.md?message=docs%3A%20请简述你的修改...\n-->"
}