{
  "id": "guide/ngmodule-faq",
  "title": "NgModule FAQ",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/ngmodule-faq.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngmodule-faq\">NgModule FAQ<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#ngmodule-faq\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-result=\"on\">NgModules 可以帮你把应用组织成一些紧密相关的代码块。</p><p translation-origin=\"off\">NgModules help organize an application into cohesive blocks of functionality.</p>\n\n<p translation-result=\"on\">这里回答的是开发者常问起的关于 NgModule 的设计与实现问题。</p><p translation-origin=\"off\">This page answers the questions many developers ask about NgModule design and implementation.</p>\n\n<h2 id=\"what-classes-should-i-add-to-the-declarations-array\" translation-result=\"on\">我应该把哪些类加到 <em>declarations</em> 中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-classes-should-i-add-to-the-declarations-array\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-classes-should-i-add-to-the-declarations-array\">What classes should I add to the <code>declarations</code> array?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-classes-should-i-add-to-the-declarations-array\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">把<a href=\"guide/bootstrapping#the-declarations-array\">可声明</a>的类（组件、指令和管道）添加到 <code>declarations</code> 列表中。</p><p translation-origin=\"off\">Add <a href=\"guide/bootstrapping#the-declarations-array\">declarable</a> classes—components, directives, and pipes—to a <code>declarations</code> list.</p>\n\n<p translation-result=\"on\">这些类只能在应用程序的<em>一个并且只有一个</em>模块中声明。\n只有当它们<em>从属于</em>某个模块时，才能把在<em>此</em>模块中声明它们。</p><p translation-origin=\"off\">Declare these classes in <em>exactly one</em> module of the application.\nDeclare them in a module if they belong to that particular module.</p>\n\n<hr>\n<a id=\"q-declarable\"></a>\n<h2 id=\"what-is-a-declarable\" translation-result=\"on\">什么是<em>可声明的</em>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-a-declarable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-is-a-declarable\">What is a <em>declarable</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-a-declarable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>可声明的</em>就是组件、指令和管道这些可以被加到模块的 <code>declarations</code> 列表中的类。它们也是<em>所有</em>能被加到 <code>declarations</code> 中的类。</p><p translation-origin=\"off\">Declarables are the class types—components, directives, and pipes—that\nyou can add to a module's <code>declarations</code> list.\nThey're the only classes that you can add to <code>declarations</code>.</p>\n\n<hr>\n<h2 id=\"what-classes-should-i-not-add-to-declarations\" translation-result=\"on\">哪些类<em>不</em>应该加到 <code>declarations</code> 中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-classes-should-i-not-add-to-declarations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-classes-should-i-not-add-to-declarations\">What classes should I <em>not</em> add to <code>declarations</code>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-classes-should-i-not-add-to-declarations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">只有<a href=\"guide/ngmodule-faq#q-declarable\">可声明的</a>类才能加到模块的 <code>declarations</code> 列表中。</p><p translation-origin=\"off\">Add only <a href=\"guide/bootstrapping#the-declarations-array\">declarable</a> classes to an NgModule's <code>declarations</code> list.</p>\n\n<p translation-result=\"on\"><em>不要</em>声明：</p><p translation-origin=\"off\">Do <em>not</em> declare the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 已经在其它模块中声明过的类。无论它来自应用自己的模块（@NgModule）还是第三方模块。</p><p translation-origin=\"off\">A class that's already declared in another module, whether an app module, @NgModule, or third-party module.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   从其它模块中导入的指令。例如，不要声明来自 <code>@angular/forms</code> 的 FORMS_DIRECTIVES，因为 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 已经声明过它们了。</p><p translation-origin=\"off\">An array of directives imported from another module.\nFor example, don't declare <code>FORMS_DIRECTIVES</code> from <code>@angular/forms</code> because the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> already declares it.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 模块类。</p><p translation-origin=\"off\">Module classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 服务类</p><p translation-origin=\"off\">Service classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   非 Angular 的类和对象，比如：字符串、数字、函数、实体模型、配置、业务逻辑和辅助类。</p><p translation-origin=\"off\">Non-Angular classes and objects, such as\nstrings, numbers, functions, entity models, configurations, business logic, and helper classes.</p>\n\n</li>\n</ul>\n<hr>\n<h2 id=\"why-list-the-same-component-in-multiple-ngmodule-properties\" translation-result=\"on\">为什么要把同一个组件声明在不同的 <em>NgModule</em> 属性中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-list-the-same-component-in-multiple-ngmodule-properties\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-list-the-same-component-in-multiple-ngmodule-properties\">Why list the same component in multiple <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> properties?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-list-the-same-component-in-multiple-ngmodule-properties\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>AppComponent</code> 经常被同时列在 <code>declarations</code> 和 <code>bootstrap</code> 中。\n另外你还可能看到 <code>HeroComponent</code> 被同时列在 <code>declarations</code>、<code>exports</code> 和 <code>entryComponent</code> 中。</p><p translation-origin=\"off\"><code>AppComponent</code> is often listed in both <code>declarations</code> and <code>bootstrap</code>.\nYou might see the same component listed in <code>declarations</code>, <code>exports</code>, and <code>entryComponents</code>.</p>\n\n<p translation-result=\"on\">这<em>看起来</em>是多余的，不过这些函数具有不同的功能，从它出现在一个列表中无法推断出它也应该在另一个列表中。</p><p translation-origin=\"off\">While that seems redundant, these properties have different functions.\nMembership in one list doesn't imply membership in another list.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>AppComponent</code> 可能被声明在此模块中，但可能不是引导组件。</p><p translation-origin=\"off\"><code>AppComponent</code> could be declared in this module but not bootstrapped.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>AppComponent</code> 可能在此模块中引导，但可能是由另一个特性模块声明的。</p><p translation-origin=\"off\"><code>AppComponent</code> could be bootstrapped in this module but declared in a different feature module.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 某个组件可能是从另一个应用模块中导入的（所以你没法声明它）并且被当前模块重新导出。</p><p translation-origin=\"off\">A component could be imported from another app module (so you can't declare it) and re-exported by this module.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   某个组件可能被导出，以便用在外部组件的模板中，也可能同时被一个弹出式对话框加载。</p><p translation-origin=\"off\">A component could be exported for inclusion in an external component's template\nas well as dynamically loaded in a pop-up dialog.</p>\n\n</li>\n</ul>\n<hr>\n<h2 id=\"what-does-cant-bind-to-x-since-it-isnt-a-known-property-of-y-mean\" translation-result=\"on\">\"<em>Can't bind to 'x' since it isn't a known property of 'y'</em>\"是什么意思？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-does-cant-bind-to-x-since-it-isnt-a-known-property-of-y-mean\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-does-cant-bind-to-x-since-it-isnt-a-known-property-of-y-mean\">What does \"Can't bind to 'x' since it isn't a known property of 'y'\" mean?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-does-cant-bind-to-x-since-it-isnt-a-known-property-of-y-mean\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">这个错误通常意味着你或者忘了声明指令“x”，或者你没有导入“x”所属的模块。</p><p translation-origin=\"off\">This error often means that you haven't declared the directive \"x\"\nor haven't imported the NgModule to which \"x\" belongs.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果“x”其实不是属性，或者是组件的私有属性（比如它不带 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 或 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 装饰器），那么你也同样会遇到这个错误。</p><p translation-origin=\"off\">Perhaps you declared \"x\" in an application sub-module but forgot to export it.\nThe \"x\" class isn't visible to other modules until you add it to the <code>exports</code> list.</p>\n\n</div>\n<hr>\n<h2 id=\"what-should-i-import\" translation-result=\"on\">我应该导入什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-should-i-import\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-should-i-import\">What should I import?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-should-i-import\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">导入你需要在当前模块的组件模板中使用的那些公开的（被导出的）<a href=\"guide/ngmodule-faq#q-declarable\">可声明类</a>。</p><p translation-origin=\"off\">Import NgModules whose public (exported) <a href=\"guide/bootstrapping#the-declarations-array\">declarable classes</a>\nyou need to reference in this module's component templates.</p>\n\n<p translation-result=\"on\">这意味着要从 <code>@angular/common</code> 中导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 才能访问 Angular 的内置指令，比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>NgFor</code>。\n你可以直接导入它或者从<a href=\"guide/ngmodule-faq#q-reexport\">重新导出</a>过该模块的其它模块中导入它。</p><p translation-origin=\"off\">This always means importing <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> from <code>@angular/common</code> for access to\nthe Angular directives such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>NgFor</code>.\nYou can import it directly or from another NgModule that <a href=\"guide/ngmodule-faq#q-reexport\">re-exports</a> it.</p>\n\n<p translation-result=\"on\">如果你的组件有 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 双向绑定表达式，就要从 <code>@angular/forms</code> 中导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p><p translation-origin=\"off\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> from <code>@angular/forms</code>\nif your components have <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> two-way binding expressions.</p>\n\n<p translation-result=\"on\">如果当前模块中的组件包含了<em>共享</em>模块和<em>特性</em>模块中的组件、指令和管道，就导入这些模块。</p><p translation-origin=\"off\">Import <em>shared</em> and <em>feature</em> modules when this module's components incorporate their\ncomponents, directives, and pipes.</p>\n\n<p translation-result=\"on\">只能在根模块 <code>AppModule</code> 中<a href=\"guide/ngmodule-faq#q-browser-vs-common-module\">导入 <em>BrowserModule</em></a>。</p><p translation-origin=\"off\">Import <a href=\"guide/ngmodule-faq#q-browser-vs-common-module\">BrowserModule</a> only in the root <code>AppModule</code>.</p>\n\n<hr>\n<a id=\"q-browser-vs-common-module\"></a>\n<h2 id=\"should-i-import-browsermodule-or-commonmodule\" translation-result=\"on\">我应该导入 <em>BrowserModule</em> 还是 <em>CommonModule</em>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#should-i-import-browsermodule-or-commonmodule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"should-i-import-browsermodule-or-commonmodule\">Should I import <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> or <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#should-i-import-browsermodule-or-commonmodule\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">几乎所有要在浏览器中使用的应用的<strong>根模块</strong>（<code>AppModule</code>）都应该从 <code>@angular/platform-browser</code> 中导入 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>。</p><p translation-origin=\"off\">The root application module, <code>AppModule</code>, of almost every browser application\nshould import <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> from <code>@angular/platform-browser</code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 提供了启动和运行浏览器应用的那些基本的服务提供者。</p><p translation-origin=\"off\"><code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> provides services that are essential to launch and run a browser app.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 还从 <code>@angular/common</code> 中重新导出了 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，这意味着 <code>AppModule</code> 中的组件也同样可以访问那些每个应用都需要的 Angular 指令，如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>NgFor</code>。</p><p translation-origin=\"off\"><code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> also re-exports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> from <code>@angular/common</code>,\nwhich means that components in the <code>AppModule</code> module also have access to\nthe Angular directives every app needs, such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>NgFor</code>.</p>\n\n<p translation-result=\"on\">在其它任何模块中都<em>不要导入</em><code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>。\n<em>特性模块</em>和<em>惰性加载模块</em>应该改成导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。\n它们需要通用的指令。它们不需要重新初始化全应用级的提供者。</p><p translation-origin=\"off\">Do not import <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> in any other module.\n<em>Feature modules</em> and <em>lazy-loaded modules</em> should import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> instead.\nThey need the common directives. They don't need to re-install the app-wide providers.</p>\n\n<p translation-result=\"on\">特性模块中导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 可以让它能用在任何目标平台上，不仅是浏览器。那些跨平台库的作者应该喜欢这种方式的。</p><p translation-origin=\"off\">Importing <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> also frees feature modules for use on <em>any</em> target platform, not just browsers.</p>\n\n<hr>\n<a id=\"q-reimport\"></a>\n<h2 id=\"what-if-i-import-the-same-module-twice\" translation-result=\"on\">如果我两次导入同一个模块会怎么样？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-if-i-import-the-same-module-twice\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-if-i-import-the-same-module-twice\">What if I import the same module twice?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-if-i-import-the-same-module-twice\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">没有任何问题。当三个模块全都导入模块'A'时，Angular 只会首次遇到时加载一次模块'A'，之后就不会这么做了。</p><p translation-origin=\"off\">That's not a problem. When three modules all import Module 'A',\nAngular evaluates Module 'A' once, the first time it encounters it, and doesn't do so again.</p>\n\n<p translation-result=\"on\">无论 <code>A</code> 出现在所导入模块的哪个层级，都会如此。\n如果模块'B'导入模块'A'、模块'C'导入模块'B'，模块'D'导入 <code>[C, B, A]</code>，那么'D'会触发模块'C'的加载，'C'会触发'B'的加载，而'B'会加载'A'。\n当 Angular 在'D'中想要获取'B'和'A'时，这两个模块已经被缓存过了，可以立即使用。</p><p translation-origin=\"off\">That's true at whatever level <code>A</code> appears in a hierarchy of imported NgModules.\nWhen Module 'B' imports Module 'A', Module 'C' imports 'B', and Module 'D' imports <code>[C, B, A]</code>,\nthen 'D' triggers the evaluation of 'C', which triggers the evaluation of 'B', which evaluates 'A'.\nWhen Angular gets to the 'B' and 'A' in 'D', they're already cached and ready to go.</p>\n\n<p translation-result=\"on\">Angular 不允许模块之间出现循环依赖，所以不要让模块'A'导入模块'B'，而模块'B'又导入模块'A'。</p><p translation-origin=\"off\">Angular doesn't like NgModules with circular references, so don't let Module 'A' import Module 'B', which imports Module 'A'.</p>\n\n<hr>\n<a id=\"q-reexport\"></a>\n<h2 id=\"what-should-i-export\" translation-result=\"on\">我应该导出什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-should-i-export\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-should-i-export\">What should I export?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-should-i-export\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">导出那些<em>其它模块</em>希望在自己的模板中引用的<a href=\"guide/ngmodule-faq#q-declarable\">可声明类</a>。这些也是你的<em>公共</em>类。\n如果你不导出某个类，它就是<em>私有的</em>，只对当前模块中声明的其它组件可见。</p><p translation-origin=\"off\">Export <a href=\"guide/bootstrapping#the-declarations-array\">declarable</a> classes that components in <em>other</em> NgModules\nare able to reference in their templates. These are your <em>public</em> classes.\nIf you don't export a declarable class, it stays <em>private</em>, visible only to other components\ndeclared in this NgModule.</p>\n\n<p translation-result=\"on\">你<em>可以</em>导出任何可声明类（组件、指令和管道），而不用管它是声明在当前模块中还是某个导入的模块中。</p><p translation-origin=\"off\">You <em>can</em> export any declarable class—components, directives, and pipes—whether\nit's declared in this NgModule or in an imported NgModule.</p>\n\n<p translation-result=\"on\">你<em>可以</em>重新导出整个导入过的模块，这将导致重新导出它们导出的所有类。重新导出的模块甚至不用先导入。</p><p translation-origin=\"off\">You <em>can</em> re-export entire imported NgModules, which effectively re-exports all of their exported classes.\nAn NgModule can even export a module that it doesn't import.</p>\n\n<hr>\n<h2 id=\"what-should-i-not-export\" translation-result=\"on\">我<em>不应该</em>导出什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-should-i-not-export\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-should-i-not-export\">What should I <em>not</em> export?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-should-i-not-export\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>不要</em>导出：</p><p translation-origin=\"off\">Don't export the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   那些你只想在当前模块中声明的那些组件中使用的私有组件、指令和管道。如果你不希望任何模块看到它，就不要导出。</p><p translation-origin=\"off\">Private components, directives, and pipes that you need only within components declared in this NgModule.\nIf you don't want another NgModule to see it, don't export it.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 不可声明的对象，比如服务、函数、配置、实体模型等。</p><p translation-origin=\"off\">Non-declarable objects such as services, functions, configurations, and entity models.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   那些只被路由器或引导函数动态加载的组件。\n比如<a href=\"guide/ngmodule-faq#q-entry-component-defined\">入口组件</a>可能从来不会在其它组件的模板中出现。\n导出它们没有坏处，但也没有好处。</p><p translation-origin=\"off\">Components that are only loaded dynamically by the router or by bootstrapping.\nSuch <a href=\"guide/ngmodule-faq#q-entry-component-defined\">entry components</a> can never be selected in another component's template.\nWhile there's no harm in exporting them, there's also no benefit.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   纯服务模块没有公开（导出）的声明。\n例如，没必要重新导出 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>，因为它不导出任何东西。\n它唯一的用途是一起把 http 的那些服务提供者添加到应用中。</p><p translation-origin=\"off\">Pure service modules that don't have public (exported) declarations.\nFor example, there's no point in re-exporting <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> because it doesn't export anything.\nIts only purpose is to add http service providers to the application as a whole.</p>\n\n</li>\n</ul>\n<hr>\n<h2 id=\"can-i-re-export-classes-and-modules\" translation-result=\"on\">我可以重新导出类和模块吗？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#can-i-re-export-classes-and-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"can-i-re-export-classes-and-modules\">Can I re-export classes and modules?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#can-i-re-export-classes-and-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">毫无疑问！</p><p translation-origin=\"off\">Absolutely.</p>\n\n<p translation-result=\"on\">模块是从其它模块中选取类并把它们重新导出成统一、便利的新模块的最佳方式。</p><p translation-origin=\"off\">NgModules are a great way to selectively aggregate classes from other NgModules and\nre-export them in a consolidated, convenience module.</p>\n\n<p translation-result=\"on\">模块可以重新导出其它模块，这会导致重新导出它们导出的所有类。\nAngular 自己的 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 就重新导出了一组模块，例如：</p><p translation-origin=\"off\">An NgModule can re-export entire NgModules, which effectively re-exports all of their exported classes.\nAngular's own <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> exports a couple of NgModules like this:</p>\n\n<code-example language=\"typescript\">\n  exports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/core/ApplicationModule\" class=\"code-anchor\">ApplicationModule</a>]\n</code-example>\n<p translation-result=\"on\">模块还能导出一个组合，它可以包含自己的声明、某些导入的类以及导入的模块。</p><p translation-origin=\"off\">An NgModule can export a combination of its own declarations, selected imported classes, and imported NgModules.</p>\n\n<p translation-result=\"on\">不要费心去导出纯服务类。\n纯服务类的模块不会导出任何可供其它模块使用的<a href=\"guide/ngmodule-faq#q-declarable\">可声明类</a>。\n例如，不用重新导出 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>，因为它没有导出任何东西。\n它唯一的用途是把那些 http 服务提供者一起添加到应用中。</p><p translation-origin=\"off\">Don't bother re-exporting pure service modules.\nPure service modules don't export <a href=\"guide/bootstrapping#the-declarations-array\">declarable</a> classes that another NgModule could use.\nFor example, there's no point in re-exporting <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> because it doesn't export anything.\nIts only purpose is to add http service providers to the application as a whole.</p>\n\n<hr>\n<h2 id=\"what-is-the-forroot-method\" translation-result=\"on\"><em>forRoot()</em>方法是什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-the-forroot-method\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-is-the-forroot-method\">What is the <code>forRoot()</code> method?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-the-forroot-method\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">静态方法 <code>forRoot()</code> 是一个约定，它可以让开发人员更轻松的配置模块的想要单例使用的服务及其提供者。<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 就是一个很好的例子。</p><p translation-origin=\"off\">The <code>forRoot()</code> static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of <code>forRoot()</code> is the <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> method.</p>\n\n<p translation-result=\"on\">应用把一个 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 对象传给 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>，为的就是使用路由配置全应用级的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务。\n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 返回一个<a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a>对象。\n你把这个结果添加到根模块 <code>AppModule</code> 的 <code>imports</code> 列表中。</p><p translation-origin=\"off\">Apps pass a <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> object to <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> in order to configure the app-wide <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service with routes.\n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> returns a <a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a>.\nYou add that result to the <code>imports</code> list of the root <code>AppModule</code>.</p>\n\n<p translation-result=\"on\">只能在应用的根模块 <code>AppModule</code> 中调用并导入 <code>forRoot()</code> 的结果。\n在其它模块，特别是惰性加载模块中，不要导入它。\n要了解关于 <code>forRoot()</code> 的更多信息，参见<a href=\"guide/singleton-services\">单例服务</a>一章的 <a href=\"guide/singleton-services#the-forroot-pattern\">the <code>forRoot()</code> 模式</a>部分。</p><p translation-origin=\"off\">Only call and import a <code>forRoot()</code> result in the root application module, <code>AppModule</code>.\nAvoid importing it in any other module, particularly in a lazy-loaded module. For more\ninformation on <code>forRoot()</code> see <a href=\"guide/singleton-services#the-forroot-pattern\">the <code>forRoot()</code> pattern</a> section of the <a href=\"guide/singleton-services\">Singleton Services</a> guide.</p>\n\n<p translation-result=\"on\">对于服务来说，除了可以使用 <code>forRoot()</code> 外，更好的方式是在该服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器中指定 <code>providedIn: 'root'</code>，它让该服务自动在全应用级可用，这样它也就默认是单例的。</p><p translation-origin=\"off\">For a service, instead of using <code>forRoot()</code>,  specify <code>providedIn: 'root'</code> on the service's <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator, which\nmakes the service automatically available to the whole application and thus singleton by default.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 也提供了静态方法 <code>forChild()</code>，用于配置惰性加载模块的路由。</p><p translation-origin=\"off\"><code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> also offers a <code>forChild()</code> static method for configuring the routes of lazy-loaded modules.</p>\n\n<p translation-result=\"on\"><code>forRoot()</code> 和 <code>forChild()</code> 都是约定俗成的方法名，它们分别用于在根模块和特性模块中配置服务。</p><p translation-origin=\"off\"><code>forRoot()</code> and <code>forChild()</code> are conventional names for methods that\nconfigure services in root and feature modules respectively.</p>\n\n<p translation-result=\"on\">当你写类似的需要可配置的服务提供者时，请遵循这个约定。</p><p translation-origin=\"off\">Follow this convention when you write similar modules with configurable service providers.</p>\n\n<hr>\n<h2 id=\"why-is-a-service-provided-in-a-feature-module-visible-everywhere\" translation-result=\"on\">为什么服务提供者在特性模块中的任何地方都是可见的？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-is-a-service-provided-in-a-feature-module-visible-everywhere\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-is-a-service-provided-in-a-feature-module-visible-everywhere\">Why is a service provided in a feature module visible everywhere?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-is-a-service-provided-in-a-feature-module-visible-everywhere\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">列在引导模块的 <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 中的服务提供者具有<strong>全应用级作用域</strong>。\n往 <code><a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 中添加服务提供者将导致该服务被发布到整个应用中。</p><p translation-origin=\"off\">Providers listed in the <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> of a bootstrapped module have application scope.\nAdding a service provider to <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> effectively publishes the service to the entire application.</p>\n\n<p translation-result=\"on\">当你导入一个模块时，Angular 就会把该模块的服务提供者（也就是它的 <code>providers</code> 列表中的内容）加入该应用的<em>根注入器</em>中。</p><p translation-origin=\"off\">When you import an NgModule,\nAngular adds the module's service providers (the contents of its <code>providers</code> list)\nto the application root injector.</p>\n\n<p translation-result=\"on\">这会让该提供者对应用中所有知道该提供者令牌（token）的类都可见。</p><p translation-origin=\"off\">This makes the provider visible to every class in the application that knows the provider's lookup token, or name.</p>\n\n<p translation-result=\"on\">通过 NgModule 导入来实现可扩展性是 NgModule 体系的主要设计目标。\n把 NgModule 的提供者并入应用程序的注入器可以让库模块使用新的服务来强化应用程序变得更容易。\n只要添加一次 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>，那么应用中的每个组件就都可以发起 Http 请求了。</p><p translation-origin=\"off\">Extensibility through NgModule imports is a primary goal of the NgModule system.\nMerging NgModule providers into the application injector\nmakes it easy for a module library to enrich the entire application with new services.\nBy adding the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> once, every application component can make HTTP requests.</p>\n\n<p translation-result=\"on\">不过，如果你期望模块的服务只对那个特性模块内部声明的组件可见，那么这可能会带来一些不受欢迎的意外。\n如果 <code>HeroModule</code> 提供了一个 <code>HeroService</code>，并且根模块 <code>AppModule</code> 导入了 <code>HeroModule</code>，那么任何知道 <code>HeroService</code><em>类型</em>的类都可能注入该服务，而不仅是在 <code>HeroModule</code> 中声明的那些类。</p><p translation-origin=\"off\">However, this might feel like an unwelcome surprise if you expect the module's services\nto be visible only to the components declared by that feature module.\nIf the <code>HeroModule</code> provides the <code>HeroService</code> and the root <code>AppModule</code> imports <code>HeroModule</code>,\nany class that knows the <code>HeroService</code> <em>type</em> can inject that service,\nnot just the classes declared in the <code>HeroModule</code>.</p>\n\n<p translation-result=\"on\">要限制对某个服务的访问，可以考虑惰性加载提供该服务的 NgModule。参见<a href=\"guide/ngmodule-faq#service-scope\">我要如何把服务的范围限定为某个模块？</a>。</p><p translation-origin=\"off\">To limit access to a service, consider lazy loading the NgModule that provides that service. See <a href=\"guide/ngmodule-faq#service-scope\">How do I restrict service scope to a module?</a> for more information.</p>\n\n<hr>\n<a id=\"q-lazy-loaded-module-provider-visibility\"></a>\n<h2 id=\"why-is-a-service-provided-in-a-lazy-loaded-module-visible-only-to-that-module\" translation-result=\"on\">为什么在惰性加载模块中声明的服务提供者只对该模块自身可见？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-is-a-service-provided-in-a-lazy-loaded-module-visible-only-to-that-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-is-a-service-provided-in-a-lazy-loaded-module-visible-only-to-that-module\">Why is a service provided in a lazy-loaded module visible only to that module?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-is-a-service-provided-in-a-lazy-loaded-module-visible-only-to-that-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">和启动时就加载的模块中的提供者不同，惰性加载模块中的提供者是<em>局限于模块</em>的。</p><p translation-origin=\"off\">Unlike providers of the modules loaded at launch,\nproviders of lazy-loaded modules are <em>module-scoped</em>.</p>\n\n<p translation-result=\"on\">当 Angular 路由器惰性加载一个模块时，它创建了一个新的运行环境。\n那个环境<a href=\"guide/ngmodule-faq#q-why-child-injector\" title=\"为什么 Angular 会创建子注入器\">拥有自己的注入器</a>，它是应用注入器的直属子级。</p><p translation-origin=\"off\">When the Angular router lazy-loads a module, it creates a new execution context.\nThat <a href=\"guide/ngmodule-faq#q-why-child-injector\" title=\"Why Angular creates a child injector\">context has its own injector</a>,\nwhich is a direct child of the application injector.</p>\n\n<p translation-result=\"on\">路由器把该惰性加载模块的提供者和它导入的模块的提供者添加到这个子注入器中。</p><p translation-origin=\"off\">The router adds the lazy module's providers and the providers of its imported NgModules to this child injector.</p>\n\n<p translation-result=\"on\">这些提供者不会被拥有相同令牌的应用级别提供者的变化所影响。\n当路由器在惰性加载环境中创建组件时，Angular 优先使用惰性加载模块中的服务实例，而不是来自应用的根注入器的。</p><p translation-origin=\"off\">These providers are insulated from changes to application providers with the same lookup token.\nWhen the router creates a component within the lazy-loaded context,\nAngular prefers service instances created from these providers to the service instances of the application root injector.</p>\n\n<hr>\n<h2 id=\"what-if-two-modules-provide-the-same-service\" translation-result=\"on\">如果两个模块提供了<em>同一个</em>服务会怎么样？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-if-two-modules-provide-the-same-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-if-two-modules-provide-the-same-service\">What if two modules provide the same service?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-if-two-modules-provide-the-same-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当同时加载了两个导入的模块，它们都列出了使用同一个令牌的提供者时，后导入的模块会“获胜”，这是因为这两个提供者都被添加到了同一个注入器中。</p><p translation-origin=\"off\">When two imported modules, loaded at the same time, list a provider with the same token,\nthe second module's provider \"wins\". That's because both providers are added to the same injector.</p>\n\n<p translation-result=\"on\">当 Angular 尝试根据令牌注入服务时，它使用第二个提供者来创建并交付服务实例。</p><p translation-origin=\"off\">When Angular looks to inject a service for that token,\nit creates and delivers the instance created by the second provider.</p>\n\n<p translation-result=\"on\"><em>每个</em>注入了该服务的类获得的都是由第二个提供者创建的实例。\n即使是声明在第一个模块中的类，它取得的实例也是来自第二个提供者的。</p><p translation-origin=\"off\"><em>Every</em> class that injects this service gets the instance created by the second provider.\nEven classes declared within the first module get the instance created by the second provider.</p>\n\n<p translation-result=\"on\">如果模块 A 提供了一个使用令牌'X'的服务，并且导入的模块 B 也用令牌'X'提供了一个服务，那么模块 A 中定义的服务“获胜”了。</p><p translation-origin=\"off\">If NgModule A provides a service for token 'X' and imports an NgModule B\nthat also provides a service for token 'X', then NgModule A's service definition \"wins\".</p>\n\n<p translation-result=\"on\">由根 <code>AppModule</code> 提供的服务相对于所导入模块中提供的服务有优先权。换句话说：<code>AppModule</code> 总会获胜。</p><p translation-origin=\"off\">The service provided by the root <code>AppModule</code> takes precedence over services provided by imported NgModules.\nThe <code>AppModule</code> always wins.</p>\n\n<hr>\n<a id=\"service-scope\"></a>\n<h2 id=\"how-do-i-restrict-service-scope-to-a-module\" translation-result=\"on\">我应该如何把服务的范围限制到模块中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#how-do-i-restrict-service-scope-to-a-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-do-i-restrict-service-scope-to-a-module\">How do I restrict service scope to a module?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#how-do-i-restrict-service-scope-to-a-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果一个模块在应用程序启动时就加载，它的 <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 具有<strong><em>全应用级作用域</em></strong>。\n它们也可用于整个应用的注入中。</p><p translation-origin=\"off\">When a module is loaded at application launch,\nits <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> have <em>application-wide scope</em>;\nthat is, they are available for injection throughout the application.</p>\n\n<p translation-result=\"on\">导入的提供者很容易被由其它导入模块中的提供者替换掉。\n这虽然是故意这样设计的，但是也可能引起意料之外的结果。</p><p translation-origin=\"off\">Imported providers are easily replaced by providers from another imported NgModule.\nSuch replacement might be by design. It could be unintentional and have adverse consequences.</p>\n\n<p translation-result=\"on\">作为一个通用的规则，应该<em>只导入一次</em>带提供者的模块，最好在应用的<em>根模块</em>中。\n那里也是配置、包装和改写这些服务的最佳位置。</p><p translation-origin=\"off\">As a general rule, import modules with providers <em>exactly once</em>, preferably in the application's <em>root module</em>.\nThat's also usually the best place to configure, wrap, and override them.</p>\n\n<p translation-result=\"on\">假设模块需要一个定制过的 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>，它为所有的 Http 请求添加一个特别的请求头。\n如果应用中其它地方的另一个模块也定制了 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> 或仅仅导入了 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>，它就会改写当前模块的 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> 提供者，丢掉了这个特别的请求头。\n这样服务器就会拒绝来自该模块的请求。</p><p translation-origin=\"off\">Suppose a module requires a customized <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> that adds a special header for all Http requests.\nIf another module elsewhere in the application also customizes <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>\nor merely imports the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>, it could override this module's <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> provider,\nlosing the special header. The server will reject http requests from this module.</p>\n\n<p translation-result=\"on\">要消除这个问题，就只能在应用的根模块 <code>AppModule</code> 中导入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p><p translation-origin=\"off\">To avoid this problem, import the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> only in the <code>AppModule</code>, the application <em>root module</em>.</p>\n\n<p translation-result=\"on\">如果你必须防范这种“提供者腐化”现象，那就<em>不要依赖于“启动时加载”模块的 <code>providers</code></em>。</p><p translation-origin=\"off\">If you must guard against this kind of \"provider corruption\", <em>don't rely on a launch-time module's <code>providers</code>.</em></p>\n\n<p translation-result=\"on\">只要可能，就让模块惰性加载。\nAngular 给了<a href=\"guide/ngmodule-faq#q-lazy-loaded-module-provider-visibility\">惰性加载模块</a>自己的子注入器。\n该模块中的提供者只对由该注入器创建的组件树可见。</p><p translation-origin=\"off\">Load the module lazily if you can.\nAngular gives a <a href=\"guide/ngmodule-faq#q-lazy-loaded-module-provider-visibility\">lazy-loaded module</a> its own child injector.\nThe module's providers are visible only within the component tree created with this injector.</p>\n\n<p translation-result=\"on\">如果你必须在应用程序启动时主动加载该模块，<strong><em>就改成在组件中提供该服务</em></strong>。</p><p translation-origin=\"off\">If you must load the module eagerly, when the application starts,\n<em>provide the service in a component instead.</em></p>\n\n<p translation-result=\"on\">继续看这个例子，假设某个模块的组件真的需要一个私有的、自定义的 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>。</p><p translation-origin=\"off\">Continuing with the same example, suppose the components of a module truly require a private, custom <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>.</p>\n\n<p translation-result=\"on\">那就创建一个“顶层组件”来扮演该模块中所有组件的根。\n把这个自定义的 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> 提供者添加到这个顶层组件的 <code>providers</code> 列表中，而不是该模块的 <code>providers</code> 中。\n回忆一下，Angular 会为每个组件实例创建一个子注入器，并使用组件自己的 <code>providers</code> 来配置这个注入器。</p><p translation-origin=\"off\">Create a \"top component\" that acts as the root for all of the module's components.\nAdd the custom <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> provider to the top component's <code>providers</code> list rather than the module's <code>providers</code>.\nRecall that Angular creates a child injector for each component instance and populates the injector\nwith the component's own providers.</p>\n\n<p translation-result=\"on\">当该组件的子组件<em>想要</em>一个 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> 服务时，Angular 会提供一个局部的 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> 服务，而不是应用的根注入器创建的那个。\n子组件将正确发起 http 请求，而不管其它模块对 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> 做了什么。</p><p translation-origin=\"off\">When a child of this component asks for the <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> service,\nAngular provides the local <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> service,\nnot the version provided in the application root injector.\nChild components make proper HTTP requests no matter what other modules do to <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>.</p>\n\n<p translation-result=\"on\">确保把模块中的组件都创建成这个顶层组件的子组件。</p><p translation-origin=\"off\">Be sure to create module components as children of this module's top component.</p>\n\n<p translation-result=\"on\">你可以把这些子组件都嵌在顶层组件的模板中。或者，给顶层组件一个 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>，让它作为路由的宿主。\n定义子路由，并让路由器把模块中的组件加载进该路由出口（outlet）中。</p><p translation-origin=\"off\">You can embed the child components in the top component's template.\nAlternatively, make the top component a routing host by giving it a <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.\nDefine child routes and let the router load module components into that outlet.</p>\n\n<p translation-result=\"on\">虽然通过在惰性加载模块中或组件中提供某个服务来限制它的访问都是可行的方式，但在组件中提供服务可能导致这些服务出现多个实例。因此，应该优先使用惰性加载的方式。</p><p translation-origin=\"off\">Though you can limit access to a service by providing it in a lazy loaded module or providing it in a component, providing services in a component can lead to multiple instances of those services. Thus, the lazy loading is preferable.</p>\n\n<hr>\n<a id=\"q-root-component-or-module\"></a>\n<h2 id=\"should-i-add-application-wide-providers-to-the-root-appmodule-or-the-root-appcomponent\" translation-result=\"on\">我应该把全应用级提供者添加到根模块 <code>AppModule</code> 中还是根组件 <code>AppComponent</code> 中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#should-i-add-application-wide-providers-to-the-root-appmodule-or-the-root-appcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"should-i-add-application-wide-providers-to-the-root-appmodule-or-the-root-appcomponent\">Should I add application-wide providers to the root <code>AppModule</code> or the root <code>AppComponent</code>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#should-i-add-application-wide-providers-to-the-root-appmodule-or-the-root-appcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">通过在服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器中（例如服务）指定 <code>providedIn: 'root'</code> 来定义全应用级提供者，或者 <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> 的构造器（例如提供令牌的地方），都可以定义全应用级提供者。\n通过这种方式创建的服务提供者会自动在整个应用中可用，而不用把它列在任何模块中。</p><p translation-origin=\"off\"> Define application-wide providers by specifying <code>providedIn: 'root'</code> on its <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator (in the case of services) or at <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> construction (in the case where tokens are provided). Providers that are created this way automatically are made available to the entire application and don't need to be listed in any module.</p>\n\n<p translation-result=\"on\">如果某个提供者不能用这种方式配置（可能因为它没有有意义的默认值），那就在根模块 <code>AppModule</code> 中注册这些全应用级服务，而不是在 <code>AppComponent</code> 中。</p><p translation-origin=\"off\">If a provider cannot be configured in this way (perhaps because it has no sensible default value), then register application-wide providers in the root <code>AppModule</code>, not in the <code>AppComponent</code>.</p>\n\n<p translation-result=\"on\">惰性加载模块及其组件可以注入 <code>AppModule</code> 中的服务，却不能注入 <code>AppComponent</code> 中的。</p><p translation-origin=\"off\">Lazy-loaded modules and their components can inject <code>AppModule</code> services;\nthey can't inject <code>AppComponent</code> services.</p>\n\n<p translation-result=\"on\"><em>只有</em>当该服务必须对 <code>AppComponent</code> 组件树之外的组件不可见时，才应该把服务注册进 <code>AppComponent</code> 的 <code>providers</code> 中。\n这是一个非常罕见的异常用法。</p><p translation-origin=\"off\">Register a service in <code>AppComponent</code> providers <em>only</em> if the service must be hidden\nfrom components outside the <code>AppComponent</code> tree. This is a rare use case.</p>\n\n<p translation-result=\"on\">更一般地说，<a href=\"guide/ngmodule-faq#q-component-or-module\">优先把提供者注册进模块中</a>，而不是组件中。</p><p translation-origin=\"off\">More generally, <a href=\"guide/ngmodule-faq#q-component-or-module\">prefer registering providers in NgModules</a> to registering in components.</p>\n\n<h3 class=\"no-toc\" id=\"discussion\" translation-result=\"on\">讨论<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#discussion\"><i class=\"material-icons\">link</i></a></h3><h3 class=\"no-toc\" translation-origin=\"off\" id=\"discussion\">Discussion<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#discussion\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 把所有启动期模块的提供者都注册进了应用的根注入器中。\n这些服务是由根注入器中的提供者创建的，并且在整个应用中都可用。\n它们具有<em>应用级作用域</em>。</p><p translation-origin=\"off\">Angular registers all startup module providers with the application root injector.\nThe services that root injector providers create have application scope, which\nmeans they are available to the entire application.</p>\n\n<p translation-result=\"on\">某些服务（比如 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>）只有当注册进应用的根注入器时才能正常工作。</p><p translation-origin=\"off\">Certain services, such as the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>, only work when you register them in the application root injector.</p>\n\n<p translation-result=\"on\">相反，Angular 使用 <code>AppComponent</code> 自己的注入器注册了 <code>AppComponent</code> 的提供者。\n<code>AppComponent</code> 服务只在该组件及其子组件树中才能使用。\n它们具有<em>组件级作用域</em>。</p><p translation-origin=\"off\">By contrast, Angular registers <code>AppComponent</code> providers with the <code>AppComponent</code>'s own injector.\n<code>AppComponent</code> services are available only to that component and its component tree.\nThey have component scope.</p>\n\n<p translation-result=\"on\"><code>AppComponent</code> 的注入器是根注入器的<em>子级</em>，注入器层次中的下一级。\n这对于没有路由器的应用来说<em>几乎是</em>整个应用了。\n但对那些带路由的应用，路由操作位于顶层，那里不存在 <code>AppComponent</code> 服务。这意味着惰性加载模块不能使用它们。</p><p translation-origin=\"off\">The <code>AppComponent</code>'s injector is a child of the root injector, one down in the injector hierarchy.\nFor applications that don't use the router, that's almost the entire application.\nBut in routed applications, routing operates at the root level\nwhere <code>AppComponent</code> services don't exist.\nThis means that lazy-loaded modules can't reach them.</p>\n\n<hr>\n<a id=\"q-component-or-module\"></a>\n<h2 id=\"should-i-add-other-providers-to-a-module-or-a-component\" translation-result=\"on\">我应该把其它提供者注册到模块中还是组件中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#should-i-add-other-providers-to-a-module-or-a-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"should-i-add-other-providers-to-a-module-or-a-component\">Should I add other providers to a module or a component?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#should-i-add-other-providers-to-a-module-or-a-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">提供者应该使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 语法进行配置。只要可能，就应该把它们在应用的根注入器中提供（<code>providedIn: 'root'</code>）。\n如果它们只被惰性加载的上下文中使用，那么这种方式配置的服务就是惰性加载的。</p><p translation-origin=\"off\">Providers should be configured using <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> syntax. If possible, they should be provided in the application root (<code>providedIn: 'root'</code>). Services that are configured this way are lazily loaded if they are only used from a lazily loaded context.</p>\n\n<p translation-result=\"on\">如果要由消费方来决定是否把它作为全应用级提供者，那么就要在模块中（<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code>）注册提供者，而不是组件中（<code>@Component.providers</code>）。</p><p translation-origin=\"off\">If it's the consumer's decision whether a provider is available application-wide or not,\nthen register providers in modules (<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code>) instead of registering in components (<code>@Component.providers</code>).</p>\n\n<p translation-result=\"on\">当你<em>必须</em>把服务实例的范围限制到某个组件及其子组件树时，就把提供者注册到该组件中。\n指令的提供者也同样照此处理。</p><p translation-origin=\"off\">Register a provider with a component when you <em>must</em> limit the scope of a service instance\nto that component and its component tree.\nApply the same reasoning to registering a provider with a directive.</p>\n\n<p translation-result=\"on\">例如，如果英雄编辑组件需要自己私有的缓存英雄服务实例，那就应该把 <code>HeroService</code> 注册进 <code>HeroEditorComponent</code> 中。\n这样，每个新的 <code>HeroEditorComponent</code> 的实例都会得到一份自己的缓存服务实例。\n编辑器的改动只会作用于它自己的服务，而不会影响到应用中其它地方的英雄实例。</p><p translation-origin=\"off\">For example, an editing component that needs a private copy of a caching service should register\nthe service with the component.\nThen each new instance of the component gets its own cached service instance.\nThe changes that editor makes in its service don't touch the instances elsewhere in the application.</p>\n\n<p translation-result=\"on\"><a href=\"guide/ngmodule-faq#q-root-component-or-module\">总是在根模块 <code>AppModule</code> 中注册<em>全应用级</em>服务</a>，而不要在根组件 <code>AppComponent</code> 中。</p><p translation-origin=\"off\"><a href=\"guide/ngmodule-faq#q-root-component-or-module\">Always register <em>application-wide</em> services with the root <code>AppModule</code></a>,\nnot the root <code>AppComponent</code>.</p>\n\n<hr>\n<a id=\"q-why-bad\"></a>\n<h2 id=\"why-is-it-bad-if-a-shared-module-provides-a-service-to-a-lazy-loaded-module\" translation-result=\"on\">为什么在共享模块中为惰性加载模块提供服务是个馊主意？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-is-it-bad-if-a-shared-module-provides-a-service-to-a-lazy-loaded-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-is-it-bad-if-a-shared-module-provides-a-service-to-a-lazy-loaded-module\">Why is it bad if a shared module provides a service to a lazy-loaded module?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-is-it-bad-if-a-shared-module-provides-a-service-to-a-lazy-loaded-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<h3 id=\"the-eagerly-loaded-scenario\" translation-result=\"on\">急性加载的场景<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#the-eagerly-loaded-scenario\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-eagerly-loaded-scenario\">The eagerly loaded scenario<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#the-eagerly-loaded-scenario\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当急性加载的模块提供了服务时，比如 <code>UserService</code>，该服务是在全应用级可用的。如果根模块提供了 <code>UserService</code>，并导入了另一个也提供了同一个 <code>UserService</code> 的模块，Angular 就会把它们中的一个注册进应用的根注入器中（参见<a href=\"guide/ngmodule-faq#q-reimport\">如果两次导入了同一个模块会怎样？</a>）。</p><p translation-origin=\"off\">When an eagerly loaded module provides a service, for example a <code>UserService</code>, that service is available application-wide. If the root module provides <code>UserService</code> and\nimports another module that provides the same <code>UserService</code>, Angular registers one of\nthem in the root app injector (see <a href=\"guide/ngmodule-faq#q-reimport\">What if I import the same module twice?</a>).</p>\n\n<p translation-result=\"on\">然后，当某些组件注入 <code>UserService</code> 时，Angular 就会发现它已经在应用的根注入器中了，并交付这个全应用级的单例服务。这样不会出现问题。</p><p translation-origin=\"off\">Then, when some component injects <code>UserService</code>, Angular finds it in the app root injector,\nand delivers the app-wide singleton service. No problem.</p>\n\n<h3 id=\"the-lazy-loaded-scenario\" translation-result=\"on\">惰性加载场景<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#the-lazy-loaded-scenario\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-lazy-loaded-scenario\">The lazy loaded scenario<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#the-lazy-loaded-scenario\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">现在，考虑一个惰性加载的模块，它也提供了一个名叫 <code>UserService</code> 的服务。</p><p translation-origin=\"off\">Now consider a lazy loaded module that also provides a service called <code>UserService</code>.</p>\n\n<p translation-result=\"on\">当路由器准备惰性加载 <code>HeroModule</code> 的时候，它会创建一个子注入器，并且把 <code>UserService</code> 的提供者注册到那个子注入器中。子注入器和根注入器是<em>不同</em>的。</p><p translation-origin=\"off\">When the router lazy loads a module, it creates a child injector and registers the <code>UserService</code>\nprovider with that child injector. The child injector is <em>not</em> the root injector.</p>\n\n<p translation-result=\"on\">当 Angular 创建一个惰性加载的 <code>HeroComponent</code> 时，它必须注入一个 <code>UserService</code>。\n这次，它会从惰性加载模块的<em>子注入器</em>中查找 <code>UserService</code> 的提供者，并用它创建一个 <code>UserService</code> 的新实例。\n这个 <code>UserService</code> 实例与 Angular 在主动加载的组件中注入的那个全应用级单例对象截然不同。</p><p translation-origin=\"off\">When Angular creates a lazy component for that module and injects <code>UserService</code>,\nit finds a <code>UserService</code> provider in the lazy module's <em>child injector</em>\nand creates a <em>new</em> instance of the <code>UserService</code>.\nThis is an entirely different <code>UserService</code> instance\nthan the app-wide singleton version that Angular injected in one of the eagerly loaded components.</p>\n\n<p translation-result=\"on\">这个场景导致你的应用每次都创建一个新的服务实例，而不是使用单例的服务。</p><p translation-origin=\"off\">This scenario causes your app to create a new instance every time, instead of using the singleton.</p>\n\n<!--KW--What does this cause? I wasn't able to get the suggestion of this to work from\nthe current FAQ:\nTo demonstrate, run the <live-example name=\"ngmodule\">live example</live-example>.\nModify the `SharedModule` so that it provides the `UserService` rather than the `CoreModule`.\nThen toggle between the \"Contact\" and \"Heroes\" links a few times.\nThe username goes bonkers as the Angular creates a new `UserService` instance each time.\nI'd like to see the error so I can include it.-->\n<hr>\n<a id=\"q-why-child-injector\"></a>\n<h2 id=\"why-does-lazy-loading-create-a-child-injector\" translation-result=\"on\">为什么惰性加载模块会创建一个子注入器？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-does-lazy-loading-create-a-child-injector\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-does-lazy-loading-create-a-child-injector\">Why does lazy loading create a child injector?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-does-lazy-loading-create-a-child-injector\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 会把 <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 中的提供者添加到应用的根注入器中……\n除非该模块是惰性加载的，这种情况下，Angular 会创建一<em>子注入器</em>，并且把该模块的提供者添加到这个子注入器中。</p><p translation-origin=\"off\">Angular adds <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> to the application root injector, unless the NgModule is lazy-loaded.\nFor a lazy-loaded NgModule, Angular creates a <em>child injector</em> and adds the module's providers to the child injector.</p>\n\n<p translation-result=\"on\">这意味着模块的行为将取决于它是在应用启动期间加载的还是后来惰性加载的。如果疏忽了这一点，可能导致<a href=\"guide/ngmodule-faq#q-why-bad\">严重后果</a>。</p><p translation-origin=\"off\">This means that an NgModule behaves differently depending on whether it's loaded during application start\nor lazy-loaded later. Neglecting that difference can lead to <a href=\"guide/ngmodule-faq#q-why-bad\">adverse consequences</a>.</p>\n\n<p translation-result=\"on\">为什么 Angular 不能像主动加载模块那样把惰性加载模块的提供者也添加到应用程序的根注入器中呢？为什么会出现这种不一致？</p><p translation-origin=\"off\">Why doesn't Angular add lazy-loaded providers to the app root injector as it does for eagerly loaded NgModules?</p>\n\n<p translation-result=\"on\">归根结底，这来自于 Angular 依赖注入系统的一个基本特征：\n在注入器还没有被第一次使用之前，可以不断为其添加提供者。\n一旦注入器已经创建和开始交付服务，它的提供者列表就被冻结了，不再接受新的提供者。</p><p translation-origin=\"off\">The answer is grounded in a fundamental characteristic of the Angular dependency-injection system.\nAn injector can add providers <em>until it's first used</em>.\nOnce an injector starts creating and delivering services, its provider list is frozen; no new providers are allowed.</p>\n\n<p translation-result=\"on\">当应用启动时，Angular 会首先使用所有主动加载模块中的提供者来配置根注入器，这发生在它创建第一个组件以及注入任何服务之前。\n一旦应用开始工作，应用的根注入器就不再接受新的提供者了。</p><p translation-origin=\"off\">When an applications starts, Angular first configures the root injector with the providers of all eagerly loaded NgModules\n<em>before</em> creating its first component and injecting any of the provided services.\nOnce the application begins, the app root injector is closed to new providers.</p>\n\n<p translation-result=\"on\">之后，应用逻辑开始惰性加载某个模块。\nAngular 必须把这个惰性加载模块中的提供者添加到<em>某个</em>注入器中。\n但是它无法将它们添加到应用的根注入器中，因为根注入器已经不再接受新的提供者了。\n于是，Angular 在惰性加载模块的上下文中创建了一个新的子注入器。</p><p translation-origin=\"off\">Time passes and application logic triggers lazy loading of an NgModule.\nAngular must add the lazy-loaded module's providers to an injector somewhere.\nIt can't add them to the app root injector because that injector is closed to new providers.\nSo Angular creates a new child injector for the lazy-loaded module context.</p>\n\n<hr>\n<a id=\"q-is-it-loaded\"></a>\n<h2 id=\"how-can-i-tell-if-an-ngmodule-or-service-was-previously-loaded\" translation-result=\"on\">我要如何知道一个模块或服务是否已经加载过了？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#how-can-i-tell-if-an-ngmodule-or-service-was-previously-loaded\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-can-i-tell-if-an-ngmodule-or-service-was-previously-loaded\">How can I tell if an NgModule or service was previously loaded?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#how-can-i-tell-if-an-ngmodule-or-service-was-previously-loaded\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">某些模块及其服务只能被根模块 <code>AppModule</code> 加载一次。\n在惰性加载模块中再次导入这个模块会<a href=\"guide/ngmodule-faq#q-why-bad\">导致错误的行为</a>，这个错误可能非常难于检测和诊断。</p><p translation-origin=\"off\">Some NgModules and their services should be loaded only once by the root <code>AppModule</code>.\nImporting the module a second time by lazy loading a module could <a href=\"guide/ngmodule-faq#q-why-bad\">produce errant behavior</a>\nthat may be difficult to detect and diagnose.</p>\n\n<p translation-result=\"on\">为了防范这种风险，可以写一个构造函数，它会尝试从应用的根注入器中注入该模块或服务。如果这种注入成功了，那就说明这个类是被第二次加载的，你就可以抛出一个错误，或者采取其它挽救措施。</p><p translation-origin=\"off\">To prevent this issue, write a constructor that attempts to inject the module or service\nfrom the root app injector. If the injection succeeds, the class has been loaded a second time.\nYou can throw an error or take other remedial action.</p>\n\n<p translation-result=\"on\">某些 NgModule（例如 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>）就实现了那样一个守卫。\n下面是一个名叫 <code>GreetingModule</code> 的 NgModule 的 自定义构造函数。</p><p translation-origin=\"off\">Certain NgModules, such as <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>, implement such a guard.\nHere is a custom constructor for an NgModule called <code>GreetingModule</code>.</p>\n\n<code-example path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"ctor\" header=\"src/app/greeting/greeting.module.ts (Constructor)\">\nconstructor (@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule?: GreetingModule) {\n  if (parentModule) {\n    throw new Error(\n      'GreetingModule is already loaded. Import it in the AppModule only');\n  }\n}\n\n</code-example>\n<hr>\n<a id=\"q-entry-component-defined\"></a>\n<h2 id=\"what-is-an-entry-component\" translation-result=\"on\">什么是<em>入口组件</em>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-an-entry-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-is-an-entry-component\">What is an <code>entry component</code>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-an-entry-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 根据组件类型<em>命令式</em>加载的组件是<em>入口组件</em>.</p><p translation-origin=\"off\">An entry component is any component that Angular loads <em>imperatively</em> by type.</p>\n\n<p translation-result=\"on\">而通过组件选择器<em>声明式</em>加载的组件则<em>不是</em>入口组件。</p><p translation-origin=\"off\">A component loaded <em>declaratively</em> via its selector is <em>not</em> an entry component.</p>\n\n<p translation-result=\"on\">Angular 会声明式的加载组件，它使用组件的选择器在模板中定位元素。\n然后，Angular 会创建该组件的 HTML 表示，并把它插入 DOM 中所选元素的内部。它们不是入口组件。</p><p translation-origin=\"off\">Angular loads a component declaratively when\nusing the component's selector to locate the element in the template.\nAngular then creates the HTML representation of the component and inserts it into the DOM at the selected element. These aren't entry components.</p>\n\n<p translation-result=\"on\">而用于引导的根 <code>AppComponent</code> 则是一个<em>入口组件</em>。\n虽然它的选择器匹配了 <code>index.html</code> 中的一个元素，但是 <code>index.html</code> 并不是组件模板，而且 <code>AppComponent</code> 选择器也不会在任何组件模板中出现。</p><p translation-origin=\"off\">The bootstrapped root <code>AppComponent</code> is an <em>entry component</em>.\nTrue, its selector matches an element tag in <code>index.html</code>.\nBut <code>index.html</code> isn't a component template and the <code>AppComponent</code>\nselector doesn't match an element in any component template.</p>\n\n<p translation-result=\"on\">在路由定义中用到的组件也同样是<em>入口组件</em>。\n路由定义根据<em>类型</em>来引用组件。\n路由器会忽略路由组件的选择器（即使它有选择器），并且把该组件动态加载到 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 中。</p><p translation-origin=\"off\">Components in route definitions are also <em>entry components</em>.\nA route definition refers to a component by its <em>type</em>.\nThe router ignores a routed component's selector, if it even has one, and\nloads the component dynamically into a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>.</p>\n\n<p translation-result=\"on\">要了解更多，参见<a href=\"guide/entry-components\">入口组件</a>一章。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/entry-components\">Entry Components</a>.</p>\n\n<hr>\n<h2 id=\"whats-the-difference-between-a-bootstrap-component-and-an-entry-component\" translation-result=\"on\"><em>引导组件</em>和<em>入口组件</em>有什么不同？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#whats-the-difference-between-a-bootstrap-component-and-an-entry-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"whats-the-difference-between-a-bootstrap-component-and-an-entry-component\">What's the difference between a <em>bootstrap</em> component and an <em>entry component</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#whats-the-difference-between-a-bootstrap-component-and-an-entry-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">引导组件是<a href=\"guide/ngmodule-faq#q-entry-component-defined\">入口组件</a>的一种。\n它是被 Angular 的引导（应用启动）过程加载到 DOM 中的入口组件。\n其它入口组件则是被其它方式动态加载的，比如被路由器加载。</p><p translation-origin=\"off\">A bootstrapped component <em>is</em> an <a href=\"guide/ngmodule-faq#q-entry-component-defined\">entry component</a>\nthat Angular loads into the DOM during the bootstrap process (application launch).\nOther entry components are loaded dynamically by other means, such as with the router.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 属性告诉编译器这是一个入口组件，同时它应该生成一些代码来用该组件引导此应用。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> property tells the compiler that this is an entry component <em>and</em>\nit should generate code to bootstrap the application with this component.</p>\n\n<p translation-result=\"on\">不需要把组件同时列在 <code>bootstrap</code> 和 <code>entryComponent</code> 列表中 —— 虽然这样做也没坏处。</p><p translation-origin=\"off\">There's no need to list a component in both the <code>bootstrap</code> and <code>entryComponents</code> lists,\nalthough doing so is harmless.</p>\n\n<p translation-result=\"on\">要了解更多，参见<a href=\"guide/entry-components\">入口组件</a>一章。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/entry-components\">Entry Components</a>.</p>\n\n<hr>\n<h2 id=\"when-do-i-add-components-to-entrycomponents\" translation-result=\"on\">什么时候我应该把组件加到 <code>entryComponents</code> 中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#when-do-i-add-components-to-entrycomponents\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"when-do-i-add-components-to-entrycomponents\">When do I add components to <em>entryComponents</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#when-do-i-add-components-to-entrycomponents\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">大多数应用开发者都不需要把组件添加到 <code>entryComponents</code> 中。</p><p translation-origin=\"off\">Most application developers won't need to add components to the <code>entryComponents</code>.</p>\n\n<p translation-result=\"on\">Angular 会自动把恰当的组件添加到<em>入口组件</em>中。\n列在 <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 中的组件会自动加入。\n由路由配置引用到的组件会被自动加入。\n用这两种机制添加的组件在入口组件中占了绝大多数。</p><p translation-origin=\"off\">Angular adds certain components to <em>entry components</em> automatically.\nComponents listed in <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> are added automatically.\nComponents referenced in router configuration are added automatically.\nThese two mechanisms account for almost all entry components.</p>\n\n<p translation-result=\"on\">如果你的应用要用其它手段来<em>根据类型</em>引导或动态加载组件，那就得把它显式添加到 <code>entryComponents</code> 中。</p><p translation-origin=\"off\">If your app happens to bootstrap or dynamically load a component <em>by type</em> in some other manner,\nyou must add it to <code>entryComponents</code> explicitly.</p>\n\n<p translation-result=\"on\">虽然把组件加到这个列表中也没什么坏处，不过最好还是只添加真正的<em>入口组件</em>。\n不要添加那些被其它组件的模板<a href=\"guide/ngmodule-faq#q-template-reference\">引用过</a>的组件。</p><p translation-origin=\"off\">Although it's harmless to add components to this list,\nit's best to add only the components that are truly <em>entry components</em>.\nDon't include components that <a href=\"guide/ngmodule-faq#q-template-reference\">are referenced</a>\nin the templates of other components.</p>\n\n<p translation-result=\"on\">要了解更多，参见<a href=\"guide/entry-components\">入口组件</a>一章。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/entry-components\">Entry Components</a>.</p>\n\n<hr>\n<h2 id=\"why-does-angular-need-entrycomponents\" translation-result=\"on\">为什么 Angular 需要<em>入口组件</em>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-does-angular-need-entrycomponents\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-does-angular-need-entrycomponents\">Why does Angular need <em>entryComponents</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#why-does-angular-need-entrycomponents\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">原因在于<em>摇树优化</em>。对于产品化应用，你会希望加载尽可能小而快的代码。\n代码中应该仅仅包括那些实际用到的类。\n它应该排除那些从未用过的组件，无论该组件是否被声明过。</p><p translation-origin=\"off\">The reason is <em>tree shaking</em>. For production apps you want to load the smallest, fastest code possible. The code should contain only the classes that you actually need.\nIt should exclude a component that's never used, whether or not that component is declared.</p>\n\n<p translation-result=\"on\">事实上，大多数库中声明和导出的组件你都用不到。\n如果你从未引用它们，那么<em>摇树优化器</em>就会从最终的代码包中把这些组件砍掉。</p><p translation-origin=\"off\">In fact, many libraries declare and export components you'll never use.\nIf you don't reference them, the tree shaker drops these components from the final code package.</p>\n\n<p translation-result=\"on\">如果<a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular 编译器</a>为每个声明的组件都生成了代码，那么摇树优化器的作用就没有了。</p><p translation-origin=\"off\">If the <a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular compiler</a> generated code for every declared component, it would defeat the purpose of the tree shaker.</p>\n\n<p translation-result=\"on\">所以，编译器转而采用一种递归策略，它只为你用到的那些组件生成代码。</p><p translation-origin=\"off\">Instead, the compiler adopts a recursive strategy that generates code only for the components you use.</p>\n\n<p translation-result=\"on\">编译器从入口组件开始工作，为它在入口组件的模板中<a href=\"guide/ngmodule-faq#q-template-reference\">找到的</a>那些组件生成代码，然后又为在这些组件中的模板中发现的组件生成代码，以此类推。\n当这个过程结束时，它就已经为每个入口组件以及从入口组件可以抵达的每个组件生成了代码。</p><p translation-origin=\"off\">The compiler starts with the entry components,\nthen it generates code for the declared components it <a href=\"guide/ngmodule-faq#q-template-reference\">finds</a> in an entry component's template,\nthen for the declared components it discovers in the templates of previously compiled components,\nand so on. At the end of the process, the compiler has generated code for every entry component\nand every component reachable from an entry component.</p>\n\n<p translation-result=\"on\">如果该组件不是<em>入口组件</em>或者没有在任何模板中发现过，编译器就会忽略它。</p><p translation-origin=\"off\">If a component isn't an <em>entry component</em> or wasn't found in a template,\nthe compiler omits it.</p>\n\n<hr>\n<h2 id=\"what-kinds-of-modules-should-i-have-and-how-should-i-use-them\" translation-result=\"on\">有哪些类型的模块？我应该如何使用它们？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-kinds-of-modules-should-i-have-and-how-should-i-use-them\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-kinds-of-modules-should-i-have-and-how-should-i-use-them\">What kinds of modules should I have and how should I use them?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-kinds-of-modules-should-i-have-and-how-should-i-use-them\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">每个应用都不一样。根据不同程度的经验，开发者会做出不同的选择。下列建议和指导原则广受欢迎。</p><p translation-origin=\"off\">Every app is different. Developers have various levels of experience and comfort with the available choices.\nSome suggestions and guidelines appear to have wide appeal.</p>\n\n<h3 id=\"sharedmodule\"><code>SharedModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#sharedmodule\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">为那些可能会在应用中到处使用的组件、指令和管道创建 <code>SharedModule</code>。\n这种模块应该只包含 <code>declarations</code>，并且应该导出几乎所有 <code>declarations</code> 里面的声明。</p><p translation-origin=\"off\"><code>SharedModule</code> is a conventional name for an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> with the components, directives, and pipes that you use\neverywhere in your app. This module should consist entirely of <code>declarations</code>,\nmost of them exported.</p>\n\n<p translation-result=\"on\"><code>SharedModule</code> 可以重新导出其它小部件模块，比如 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>、<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 和提供你广泛使用的 UI 控件的那些模块。</p><p translation-origin=\"off\">The <code>SharedModule</code> may re-export other widget modules, such as <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>,\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>, and NgModules with the UI controls that you use most widely.</p>\n\n<p translation-result=\"on\"><code>SharedModule</code><strong><em>不应该</em></strong>带有 <code>providers</code>，原因<a href=\"guide/ngmodule-faq#q-why-bad\">在前面解释过了</a>。\n它的导入或重新导出的模块中也不应该有 <code>providers</code>。\n如果你要违背这条指导原则，请务必想清楚你在做什么，并要有充分的理由。</p><p translation-origin=\"off\">The <code>SharedModule</code> should not have <code>providers</code> for reasons <a href=\"guide/ngmodule-faq#q-why-bad\">explained previously</a>.\nNor should any of its imported or re-exported modules have <code>providers</code>.</p>\n\n<p translation-result=\"on\">在任何特性模块中（无论是你在应用启动时主动加载的模块还是之后惰性加载的模块），你都可以随意导入这个 <code>SharedModule</code>。</p><p translation-origin=\"off\">Import the <code>SharedModule</code> in your <em>feature</em> modules,\nboth those loaded when the app starts and those you lazy load later.</p>\n\n<h3 id=\"feature-modules\" translation-result=\"on\">特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#feature-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"feature-modules\">Feature Modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">特性模块是你围绕特定的应用业务领域创建的模块，比如用户工作流、小工具集等。它们包含指定的特性，并为你的应用提供支持，比如路由、服务、窗口部件等。\n要对你的应用中可能会有哪些特性模块有个概念，考虑如果你要把与特定功能（比如搜索）有关的文件放进一个目录下，该目录的内容就可能是一个名叫 <code>SearchModule</code> 的特性模块。\n它将会包含构成搜索功能的全部组件、路由和模板。</p><p translation-origin=\"off\">Feature modules are modules you create around specific application business domains, user workflows, and utility collections. They support your app by containing a particular feature,\nsuch as routes, services, widgets, etc. To conceptualize what a feature module might be in your\napp, consider that if you would put the files related to a certain functionality, like a search,\nin one folder, that the contents of that folder would be a feature module that you might call\nyour <code>SearchModule</code>. It would contain all of the components, routing, and templates that\nwould make up the search functionality.</p>\n\n<p translation-result=\"on\">要了解更多，参见<a href=\"guide/feature-modules\">特性模块</a>和<a href=\"guide/module-types\">模块的分类</a>。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/feature-modules\">Feature Modules</a> and\n<a href=\"guide/module-types\">Module Types</a></p>\n\n<h2 id=\"whats-the-difference-between-ngmodules-and-javascript-modules\" translation-result=\"on\">在 NgModule 和 JavaScript 模块之间有什么不同？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#whats-the-difference-between-ngmodules-and-javascript-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"whats-the-difference-between-ngmodules-and-javascript-modules\">What's the difference between NgModules and JavaScript Modules?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#whats-the-difference-between-ngmodules-and-javascript-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 应用中，NgModule 会和 JavaScript 的模块一起工作。</p><p translation-origin=\"off\">In an Angular app, NgModules and JavaScript modules work together.</p>\n\n<p translation-result=\"on\">在现代 JavaScript 中，每个文件都是模块（参见<a href=\"http://exploringjs.com/es6/ch_modules.html\">模块</a>）。\n在每个文件中，你要写一个 <code>export</code> 语句将模块的一部分公开。</p><p translation-origin=\"off\">In modern JavaScript, every file is a module\n(see the <a href=\"http://exploringjs.com/es6/ch_modules.html\">Modules</a> page of the Exploring ES6 website).\nWithin each file you write an <code>export</code> statement to make parts of the module public.</p>\n\n<p translation-result=\"on\">Angular 模块是一个带有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器的类，而 JavaScript 模块则没有。\nAngular 的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 有自己的 <code>imports</code> 和 <code>exports</code> 来达到类似的目的。</p><p translation-origin=\"off\">An Angular NgModule is a class with the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator—JavaScript modules\ndon't have to have the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator. Angular's <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> has <code>imports</code> and <code>exports</code> and they serve a similar purpose.</p>\n\n<p translation-result=\"on\">你可以<em>导入</em>其它 NgModules，以便在当前模块的组件模板中使用它们导出的类。\n你可以<em>导出</em>当前 NgModules 中的类，以便<em>其它</em> NgModules 可以导入它们，并用在自己的组件模板中。</p><p translation-origin=\"off\">You <em>import</em> other NgModules so you can use their exported classes in component templates.\nYou <em>export</em> this NgModule's classes so they can be imported and used by components of <em>other</em> NgModules.</p>\n\n<p translation-result=\"on\">要了解更多，参见 <a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块 vs. NgModules</a> 一章</p><p translation-origin=\"off\">For more information, see <a href=\"guide/ngmodule-vs-jsmodule\">JavaScript Modules vs. NgModules</a>.</p>\n\n<hr>\n<a id=\"q-template-reference\"></a>\n<h2 id=\"how-does-angular-find-components-directives-and-pipes-in-a-templatewhat-is-a-template-reference\" translation-result=\"on\">Angular 如何查找模板中的组件、指令和管道？什么是 <strong><em>模板引用</em></strong> ？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#how-does-angular-find-components-directives-and-pipes-in-a-templatewhat-is-a-template-reference\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-does-angular-find-components-directives-and-pipes-in-a-templatewhat-is-a-template-reference\">How does Angular find components, directives, and pipes in a template?<br>What is a <i><b>template reference</b></i>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#how-does-angular-find-components-directives-and-pipes-in-a-templatewhat-is-a-template-reference\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular 编译器</a>在组件模板内查找其它组件、指令和管道。一旦找到了，那就是一个“模板引用”。</p><p translation-origin=\"off\">The <a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular compiler</a> looks inside component templates\nfor other components, directives, and pipes. When it finds one, that's a template reference.</p>\n\n<p translation-result=\"on\">Angular 编译器通过在一个模板的 HTML 中匹配组件或指令的<strong>选择器（selector）</strong>，来查找组件或指令。</p><p translation-origin=\"off\">The Angular compiler finds a component or directive in a template when it can match the <em>selector</em> of that component or directive to some HTML in that template.</p>\n\n<p translation-result=\"on\">编译器通过分析模板 HTML 中的管道语法中是否出现了特定的管道名来查找对应的管道。</p><p translation-origin=\"off\">The compiler finds a pipe if the pipe's <em>name</em> appears within the pipe syntax of the template HTML.</p>\n\n<p translation-result=\"on\">Angular 只查询两种组件、指令或管道：1）那些在当前模块中声明过的，以及 2）那些被当前模块导入的模块所导出的。</p><p translation-origin=\"off\">Angular only matches selectors and pipe names for classes that are declared by this module\nor exported by a module that this module imports.</p>\n\n<hr>\n<a id=\"q-angular-compiler\"></a>\n<h2 id=\"what-is-the-angular-compiler\" translation-result=\"on\">什么是 Angular 编译器？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-the-angular-compiler\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-is-the-angular-compiler\">What is the Angular compiler?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-faq#what-is-the-angular-compiler\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>Angular 编译器</em>会把你所编写的应用代码转换成高性能的 JavaScript 代码。\n在编译过程中，<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的元数据扮演了很重要的角色。</p><p translation-origin=\"off\">The Angular compiler converts the application code you write into highly performant JavaScript code.\nThe <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata plays an important role in guiding the compilation process.</p>\n\n<p translation-result=\"on\">你写的代码是无法直接执行的。\n比如<strong>组件</strong>。\n组件有一个模板，其中包含了自定义元素、属性型指令、Angular 绑定声明和一些显然不属于原生 HTML 的古怪语法。</p><p translation-origin=\"off\">The code you write isn't immediately executable. For example, components have templates that contain custom elements, attribute directives, Angular binding declarations,\nand some peculiar syntax that clearly isn't native HTML.</p>\n\n<p translation-result=\"on\"><em>Angular 编译器</em>读取模板的 HTML，把它和相应的组件类代码组合在一起，并产出<em>组件工厂</em>。</p><p translation-origin=\"off\">The Angular compiler reads the template markup,\ncombines it with the corresponding component class code, and emits <em>component factories</em>.</p>\n\n<p translation-result=\"on\">组件工厂为组件创建纯粹的、100% JavaScript 的表示形式，它包含了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中描述的一切：HTML、绑定指令、附属的样式等……</p><p translation-origin=\"off\">A component factory creates a pure, 100% JavaScript representation\nof the component that incorporates everything described in its <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata:\nthe HTML, the binding instructions, the attached styles.</p>\n\n<p translation-result=\"on\">由于<strong>指令</strong>和<strong>管道</strong>都出现在组件模板中，*Angular 编译器**也同样会把它们组合进编译后的组件代码中。</p><p translation-origin=\"off\">Because directives and pipes appear in component templates,\nthe Angular compiler incorporates them into compiled component code too.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据告诉<em>Angular 编译器</em>要为当前模块编译哪些组件，以及如何把当前模块和其它模块链接起来。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata tells the Angular compiler what components to compile for this module and\nhow to link this module with other modules.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/entry-components\n - guide/ngmodule-api\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/common/http/HttpBackend\n - api/common/http/HttpClientModule\n - api/core/ApplicationModule\n - api/core/Component\n - api/core/Injectable\n - api/core/InjectionToken\n - api/core/Input\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/Output\n - api/core/SkipSelf\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/Router\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/bootstrapping#the-declarations-array\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-faq#can-i-re-export-classes-and-modules\n - guide/ngmodule-faq#discussion\n - guide/ngmodule-faq#feature-modules\n - guide/ngmodule-faq#how-can-i-tell-if-an-ngmodule-or-service-was-previously-loaded\n - guide/ngmodule-faq#how-do-i-restrict-service-scope-to-a-module\n - guide/ngmodule-faq#how-does-angular-find-components-directives-and-pipes-in-a-templatewhat-is-a-template-reference\n - guide/ngmodule-faq#ngmodule-faq\n - guide/ngmodule-faq#q-angular-compiler\n - guide/ngmodule-faq#q-browser-vs-common-module\n - guide/ngmodule-faq#q-component-or-module\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-entry-component-defined\n - guide/ngmodule-faq#q-lazy-loaded-module-provider-visibility\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-reimport\n - guide/ngmodule-faq#q-root-component-or-module\n - guide/ngmodule-faq#q-template-reference\n - guide/ngmodule-faq#q-why-bad\n - guide/ngmodule-faq#q-why-child-injector\n - guide/ngmodule-faq#service-scope\n - guide/ngmodule-faq#sharedmodule\n - guide/ngmodule-faq#should-i-add-application-wide-providers-to-the-root-appmodule-or-the-root-appcomponent\n - guide/ngmodule-faq#should-i-add-other-providers-to-a-module-or-a-component\n - guide/ngmodule-faq#should-i-import-browsermodule-or-commonmodule\n - guide/ngmodule-faq#the-eagerly-loaded-scenario\n - guide/ngmodule-faq#the-lazy-loaded-scenario\n - guide/ngmodule-faq#what-classes-should-i-add-to-the-declarations-array\n - guide/ngmodule-faq#what-classes-should-i-not-add-to-declarations\n - guide/ngmodule-faq#what-does-cant-bind-to-x-since-it-isnt-a-known-property-of-y-mean\n - guide/ngmodule-faq#what-if-i-import-the-same-module-twice\n - guide/ngmodule-faq#what-if-two-modules-provide-the-same-service\n - guide/ngmodule-faq#what-is-a-declarable\n - guide/ngmodule-faq#what-is-an-entry-component\n - guide/ngmodule-faq#what-is-the-angular-compiler\n - guide/ngmodule-faq#what-is-the-forroot-method\n - guide/ngmodule-faq#what-kinds-of-modules-should-i-have-and-how-should-i-use-them\n - guide/ngmodule-faq#what-should-i-export\n - guide/ngmodule-faq#what-should-i-import\n - guide/ngmodule-faq#what-should-i-not-export\n - guide/ngmodule-faq#whats-the-difference-between-a-bootstrap-component-and-an-entry-component\n - guide/ngmodule-faq#whats-the-difference-between-ngmodules-and-javascript-modules\n - guide/ngmodule-faq#when-do-i-add-components-to-entrycomponents\n - guide/ngmodule-faq#why-does-angular-need-entrycomponents\n - guide/ngmodule-faq#why-does-lazy-loading-create-a-child-injector\n - guide/ngmodule-faq#why-is-a-service-provided-in-a-feature-module-visible-everywhere\n - guide/ngmodule-faq#why-is-a-service-provided-in-a-lazy-loaded-module-visible-only-to-that-module\n - guide/ngmodule-faq#why-is-it-bad-if-a-shared-module-provides-a-service-to-a-lazy-loaded-module\n - guide/ngmodule-faq#why-list-the-same-component-in-multiple-ngmodule-properties\n - guide/ngmodule-vs-jsmodule\n - guide/singleton-services\n - guide/singleton-services#the-forroot-pattern\n - http://exploringjs.com/es6/ch_modules.html\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/ngmodule-faq.md?message=docs%3A%20请简述你的修改...\n-->"
}