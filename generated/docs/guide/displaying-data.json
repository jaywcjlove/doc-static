{
  "id": "guide/displaying-data",
  "title": "Displaying data in views",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/displaying-data.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"displaying-data-in-views\" translation-result=\"on\">在视图中显示数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#displaying-data-in-views\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"displaying-data-in-views\">Displaying data in views<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#displaying-data-in-views\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">各种 Angular <a href=\"guide/glossary#component\">组件</a>构成了应用的数据结构。\n组件关联到的 HTML <a href=\"guide/glossary#template\">模板</a>提供了在 Web 页面的上下文中显示数据的各种方法。\n组件类和模板，共同构成了应用数据的一个<a href=\"guide/glossary#view\">视图</a>。</p><p translation-origin=\"off\">Angular <a href=\"guide/glossary#component\">components</a> form the data structure of your application.\nThe HTML <a href=\"guide/glossary#template\">template</a> associated with a component provides the means to display that data in the context of a web page.\nTogether, a component's class and template form a <a href=\"guide/glossary#view\">view</a> of your application data.</p>\n\n<p translation-result=\"on\">在页面上把数据的值及其表现形式组合起来的过程，就叫做<a href=\"guide/glossary#data-binding\">数据绑定</a>。\n通过将 HTML 模板中的各个控件<em>绑定</em>到组件类中的各种数据属性，你就把数据展示给了用户（并从该用户收集数据）。</p><p translation-origin=\"off\">The process of combining data values with their representation on the page is called <a href=\"guide/glossary#data-binding\">data binding</a>.\nYou display your data to a user (and collect data from the user) by <em>binding</em> controls in the HTML template to the data properties of the component class.</p>\n\n<p translation-result=\"on\">另外，你可以使用<a href=\"guide/glossary#directive\">指令</a>来向模板中添加逻辑，指令告诉 Angular 在渲染页面时要如何修改。</p><p translation-origin=\"off\">In addition, you can add logic to the template by including <a href=\"guide/glossary#directive\">directives</a>, which tell Angular how to modify the page as it is rendered.</p>\n\n<p translation-result=\"on\">Angular 定义了一种<em>模板语言</em>，它扩展了 HTML 标记，其扩展语法可以让你定义各种各样的数据绑定和逻辑指令。\n当渲染完此页面之后，Angular 会解释这种模板语法，来根据你的逻辑更新 HTML 和数据的当前状态。\n在你读完<a href=\"guide/template-syntax\">模板语法这章</a>之前，本页中的练习可以先让你快速了解下这种模板语法的工作方式。</p><p translation-origin=\"off\">Angular defines a <em>template language</em> that expands HTML notation with syntax that allows you to define various kinds of data binding and logical directives.\nWhen the page is rendered, Angular interprets the template syntax to update the HTML according to your logic and current data state.\nBefore you read the complete <a href=\"guide/template-syntax\">template syntax guide</a>, the exercises on this page give you a quick demonstration of how template syntax works.</p>\n\n<p translation-result=\"on\">在这个示例中，你将创建一个带有英雄列表的组件。\n你会显示出这些英雄的名字清单，某些情况下，还会在清单下方显示一条消息。\n最终的用户界面是这样的：</p><p translation-origin=\"off\">In this demo, you'll create a component with a list of heroes.\nYou'll display the list of hero names and conditionally show a message below the list.\nThe final UI looks like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/final.png\" alt=\"Final UI\" width=\"374\" height=\"290\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">这个<live-example></live-example>演示了本章中描述的所有语法和代码片段。</p><p translation-origin=\"off\">The <live-example></live-example> demonstrates all of the syntax and code\nsnippets described in this page.</p>\n\n</div>\n<a id=\"interpolation\"></a>\n<h2 id=\"showing-component-properties-with-interpolation\" translation-result=\"on\">使用插值显示组件属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#showing-component-properties-with-interpolation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"showing-component-properties-with-interpolation\">Showing component properties with interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#showing-component-properties-with-interpolation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要显示组件的属性，最简单的方式就是通过插值 (interpolation) 来绑定属性名。\n要使用插值，就把属性名包裹在双花括号里放进视图模板，如 <code>{{myHero}}</code>。</p><p translation-origin=\"off\">The easiest way to display a component property is to bind the property name through interpolation.\nWith interpolation, you put the property name in the view template, enclosed in double curly braces: <code>{{myHero}}</code>.</p>\n\n<p translation-result=\"on\">使用 CLI 命令 <a href=\"cli/new\"><code>ng new displaying-data</code></a> 创建一个工作空间和一个名叫 <code>displaying-data</code> 的应用。</p><p translation-origin=\"off\">Use the CLI command <a href=\"cli/new\"><code>ng new displaying-data</code></a> to create a workspace and app named <code>displaying-data</code>.</p>\n\n<p translation-result=\"on\">删除 <code>app.component.html</code> 文件，这个范例中不再需要它了。</p><p translation-origin=\"off\">Delete the <code>app.component.html</code> file. It is not needed for this example.</p>\n\n<p translation-result=\"on\">然后，到 <code>app.component.ts</code> 文件中修改组件的模板和代码。</p><p translation-origin=\"off\">Then modify the <code>app.component.ts</code> file by\nchanging the template and the body of the component.</p>\n\n<p translation-result=\"on\">修改完之后，它应该是这样的：</p><p translation-origin=\"off\">When you're done, it should look like this:</p>\n\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" header=\"src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  myHero = 'Windstorm';\n}\n\n\n</code-example>\n<p translation-result=\"on\">再把两个属性 <code>title</code> 和 <code>myHero</code> 添加到之前空白的组件中。</p><p translation-origin=\"off\">You added two properties to the formerly empty component: <code>title</code> and <code>myHero</code>.</p>\n\n<p translation-result=\"on\">修改完的模板会使用双花括号形式的插值来显示这两个模板属性：</p><p translation-origin=\"off\">The template displays the two component properties using double curly brace\ninterpolation:</p>\n\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n  `\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">模板是包在 ECMAScript 2015 反引号 (<code>`</code>) 中的一个多行字符串。\n反引号 (<code>`</code>) — 注意，不是单引号 (') — 允许把一个字符串写在多行上，\n使 HTML 模板更容易阅读。</p><p translation-origin=\"off\">The template is a multi-line string within ECMAScript 2015 backticks (<code>`</code>).\nThe backtick (<code>`</code>)—which is <em>not</em> the same character as a single\nquote (<code>'</code>)—allows you to compose a string over several lines, which makes the\nHTML more readable.</p>\n\n</div>\n<p translation-result=\"on\">Angular 自动从组件中提取 <code>title</code> 和 <code>myHero</code> 属性的值，并且把这些值插入浏览器中。当这些属性发生变化时，Angular 就会自动刷新显示。</p><p translation-origin=\"off\">Angular automatically pulls the value of the <code>title</code> and <code>myHero</code> properties from the component and\ninserts those values into the browser. Angular updates the display\nwhen these properties change.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">严格来说，“重新显示”是在某些与视图有关的异步事件之后发生的，例如，按键、定时器完成或对 HTTP 请求的响应。</p><p translation-origin=\"off\">More precisely, the redisplay occurs after some kind of asynchronous event related to\nthe view, such as a keystroke, a timer completion, or a response to an HTTP request.</p>\n\n</div>\n<p translation-result=\"on\">注意，你没有调用 <strong>new</strong> 来创建 <code>AppComponent</code> 类的实例，是 Angular 替你创建了它。那么它是如何创建的呢？</p><p translation-origin=\"off\">Notice that you don't call <strong>new</strong> to create an instance of the <code>AppComponent</code> class.\nAngular is creating an instance for you. How?</p>\n\n<p translation-result=\"on\">注意 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器中指定的 CSS 选择器 <code>selector</code>，它指定了一个叫 <code>&#x3C;app-root></code> 的元素。\n该元素是 <code>index.html</code> 文件里的一个占位符。</p><p translation-origin=\"off\">The CSS <code>selector</code> in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator specifies an element named <code>&#x3C;app-root></code>.\nThat element is a placeholder in the body of your <code>index.html</code> file:</p>\n\n<code-example path=\"displaying-data/src/index.html\" header=\"src/index.html (body)\" region=\"body\">\n&#x3C;body>\n  &#x3C;app-root>&#x3C;/app-root>\n&#x3C;/body>\n\n</code-example>\n<p translation-result=\"on\">当你通过 <code>main.ts</code> 中的 <code>AppComponent</code> 类启动时，Angular 在 <code>index.html</code> 中查找一个 <code>&#x3C;app-root></code> 元素，\n然后实例化一个 <code>AppComponent</code>，并将其渲染到 <code>&#x3C;app-root></code> 标签中。</p><p translation-origin=\"off\">When you bootstrap with the <code>AppComponent</code> class (in <code>main.ts</code>), Angular looks for a <code>&#x3C;app-root></code>\nin the <code>index.html</code>, finds it, instantiates an instance of <code>AppComponent</code>, and renders it\ninside the <code>&#x3C;app-root></code> tag.</p>\n\n<p translation-result=\"on\">运行应用。它应该显示出标题和英雄名：</p><p translation-origin=\"off\">Now run the app. It should display the title and hero name:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/title-and-hero.png\" alt=\"Title and Hero\" width=\"348\" height=\"108\">\n</div>\n<p translation-result=\"on\">回顾一下前面所做的决定，看看还有哪些其它选择。</p><p translation-origin=\"off\">The next few sections review some of the coding choices in the app.</p>\n\n<h2 id=\"choosing-the-template-source\" translation-result=\"on\">选择模板来源<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#choosing-the-template-source\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"choosing-the-template-source\">Choosing the template source<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#choosing-the-template-source\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据告诉 Angular 要到哪里去找该组件的模板。\n你有两种方式存放组件的模板。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata tells Angular where to find the component's template.\nYou can store your component's template in one of two places.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">你可以使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>template</code> 属性来定义<em>内联</em>模板。内联模板对于小型示例或测试很有用。</p><p translation-origin=\"off\">You can define the template <em>inline</em> using the <code>template</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator. An inline template is useful for a small demo or test.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 此外，你还可以把模板定义在单独的 HTML 文件中，并且让 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>templateUrl</code> 属性指向该文件。这种配置方式通常用于所有比小型测试或示例更复杂的场景中，它也是生成新组件时的默认值。</p><p translation-origin=\"off\">Alternatively, you can define the template in a separate HTML file and link to that file in the <code>templateUrl</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator. This configuration is typical for anything more complex than a small test or demo, and is the default when you generate a new component.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">无论用哪种风格，模板数据绑定在访问组件属性方面都是完全一样的。\n这里的应用使用了内联 HTML，是因为该模板很小，而且示例也很简单，用不到外部 HTML 文件。</p><p translation-origin=\"off\">In either style, the template data bindings have the same access to the component's properties.\nHere the app uses inline HTML because the template is small and the demo is simpler without the additional HTML file.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  默认情况下，Angular CLI 命令 <a href=\"cli/generate\"><code>ng generate component</code></a> 在生成组件时会带有模板文件，你可以通过参数来覆盖它：</p><p translation-origin=\"off\">  By default, the Angular CLI command <a href=\"cli/generate\"><code>ng generate component</code></a> generates components with a template file.\nYou can override that by adding the \"-t\" (short for <code>inlineTemplate=true</code>) option:</p>\n\n  <code-example hidecopy=\"\" language=\"sh\" class=\"code-shell\">\n    ng generate component hero -t\n  </code-example>\n</div>\n<h2 id=\"initialization\" translation-result=\"on\">初始化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#initialization\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"initialization\">Initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#initialization\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面的例子使用变量赋值来对组件进行初始化。</p><p translation-origin=\"off\">The following example uses variable assignment to initialize the components.</p>\n\n<code-example path=\"displaying-data/src/app/app-ctor.component.1.ts\" region=\"class\">\nexport class AppComponent {\n  title: string;\n  myHero: string;\n\n  constructor() {\n    this.title = 'Tour of Heroes';\n    this.myHero = 'Windstorm';\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">你可以用构造函数来代替这些属性的声明和初始化语句。</p><p translation-origin=\"off\">You could instead declare and initialize the properties using a constructor.\nThis app uses more terse \"variable assignment\" style simply for brevity.</p>\n\n<a id=\"ngFor\"></a>\n<h2 id=\"add-logic-to-loop-through-data\" translation-result=\"on\">添加循环遍历数据的逻辑<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#add-logic-to-loop-through-data\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-logic-to-loop-through-data\">Add logic to loop through data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#add-logic-to-loop-through-data\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令（Angular 预置）可以让你循环遍历数据。下面的例子使用该指令来显示数组型属性中的所有值。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive (predefined by Angular) lets you loop through data. The following example uses the directive to show all of the values in an array property.</p>\n\n<p translation-result=\"on\">要显示一个英雄列表，先向组件中添加一个英雄名字数组，然后把 <code>myHero</code> 重定义为数组中的第一个名字。</p><p translation-origin=\"off\">To display a list of heroes, begin by adding an array of hero names to the component and redefine <code>myHero</code> to be the first name in the array.</p>\n\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  myHero = this.heroes[0];\n}\n\n\n</code-example>\n<p translation-result=\"on\">接着，在模板中使用 Angular 的 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令来显示 <code>heroes</code> 列表中的每一项。</p><p translation-origin=\"off\">Now use the Angular <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive in the template to display\neach item in the <code>heroes</code> list.</p>\n\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n      {{ hero }}\n    &#x3C;/li>\n  &#x3C;/ul>\n`\n\n</code-example>\n<p translation-result=\"on\">这个界面使用了由 <code>&#x3C;ul></code> 和 <code>&#x3C;li></code> 标签组成的无序列表。<code>&#x3C;li></code> 元素里的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 是 Angular 的“迭代”指令。\n它将 <code>&#x3C;li></code> 元素及其子级标记为“迭代模板”：</p><p translation-origin=\"off\">This UI uses the HTML unordered list with <code>&#x3C;ul></code> and <code>&#x3C;li></code> tags. The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>\nin the <code>&#x3C;li></code> element is the Angular \"repeater\" directive.\nIt marks that <code>&#x3C;li></code> element (and its children) as the \"repeater template\":</p>\n\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (li)\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n  {{ hero }}\n&#x3C;/li>\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">不要忘记 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 中的前导星号 (*)。它是语法中不可或缺的一部分。\n关于 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 和 <code>*</code> 的更多信息，参见<a href=\"guide/template-syntax#ngFor\">模板语法</a>页的 <a href=\"guide/template-syntax#ngfor\">ngFor 部分</a>。</p><p translation-origin=\"off\">Don't forget the leading asterisk (*) in <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. It is an essential part of the syntax.\nRead more about <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> and <code>*</code> in the <a href=\"guide/template-syntax#ngfor\">ngFor section</a> of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n</div>\n<p translation-result=\"on\">注意看 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 双引号表达式中的 <code>hero</code>，它是一个模板输入变量。\n更多模板输入变量的信息，见<a href=\"guide/template-syntax\">模板语法</a>中的\n<a href=\"guide/template-syntax#microsyntax\">微语法 (microsyntax)</a>。</p><p translation-origin=\"off\">Notice the <code>hero</code> in the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> double-quoted instruction;\nit is an example of a template input variable. Read\nmore about template input variables in the <a href=\"guide/template-syntax#microsyntax\">microsyntax</a> section of\nthe <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n<p translation-result=\"on\">Angular 为列表中的每个条目复制一个 <code>&#x3C;li></code> 元素，在每个迭代中，把 <code>hero</code> 变量设置为当前条目（英雄）。\nAngular 把 <code>hero</code> 变量作为双花括号插值的上下文。</p><p translation-origin=\"off\">Angular duplicates the <code>&#x3C;li></code> for each item in the list, setting the <code>hero</code> variable\nto the item (the hero) in the current iteration. Angular uses that variable as the\ncontext for the interpolation in the double curly braces.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本例中，<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 用于显示一个“数组”，\n但 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 可以为任何<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">可迭代的 (iterable) </a>对象重复渲染条目。</p><p translation-origin=\"off\">In this case, <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is displaying an array, but <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> can\nrepeat items for any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable</a> object.</p>\n\n</div>\n<p translation-result=\"on\">现在，英雄们出现在了一个无序列表中。</p><p translation-origin=\"off\">Now the heroes appear in an unordered list.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/hero-names-list.png\" alt=\"After ngfor\" width=\"350\" height=\"239\">\n</div>\n<h2 id=\"creating-a-class-for-the-data\" translation-result=\"on\">为数据创建一个类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#creating-a-class-for-the-data\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"creating-a-class-for-the-data\">Creating a class for the data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#creating-a-class-for-the-data\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">应用代码直接在组件内部直接定义了数据。\n作为演示还可以，但它显然不是最佳实践。</p><p translation-origin=\"off\">The app's code defines the data directly inside the component, which isn't best practice.\nIn a simple demo, however, it's fine.</p>\n\n<p translation-result=\"on\">现在使用的是到了一个字符串数组的绑定。在真实的应用中，大多是到一个对象数组的绑定。</p><p translation-origin=\"off\">At the moment, the binding is to an array of strings.\nIn real applications, most bindings are to more specialized objects.</p>\n\n<p translation-result=\"on\">要将此绑定转换成使用对象，需要把这个英雄名字数组变成 <code>Hero</code> 对象数组。但首先得有一个 <code>Hero</code> 类。</p><p translation-origin=\"off\">To convert this binding to use specialized objects, turn the array\nof hero names into an array of <code>Hero</code> objects. For that you'll need a <code>Hero</code> class:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate class hero\n</code-example>\n<p translation-result=\"on\">此命令创建了如下代码：</p><p translation-origin=\"off\">This command creates the following code.</p>\n\n<code-example path=\"displaying-data/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-example>\n<p translation-result=\"on\">你定义了一个类，具有一个构造函数和两个属性：<code>id</code> 和 <code>name</code>。</p><p translation-origin=\"off\">You've defined a class with a constructor and two properties: <code>id</code> and <code>name</code>.</p>\n\n<p translation-result=\"on\">它可能看上去不像是有属性的类，但它确实有，利用的是 TypeScript 提供的简写形式 —— 用构造函数的参数直接定义属性。</p><p translation-origin=\"off\">It might not look like the class has properties, but it does.\nThe declaration of the constructor parameters takes advantage of a TypeScript shortcut.</p>\n\n<p translation-result=\"on\">来看第一个参数：</p><p translation-origin=\"off\">Consider the first parameter:</p>\n\n<code-example path=\"displaying-data/src/app/hero.ts\" header=\"src/app/hero.ts (id)\" region=\"id\">\npublic id: number,\n\n</code-example>\n<p translation-result=\"on\">这个简写语法做了很多：</p><p translation-origin=\"off\">That brief syntax does a lot:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 声明了一个构造函数参数及其类型。</p><p translation-origin=\"off\">Declares a constructor parameter and its type.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 声明了一个同名的公共属性。</p><p translation-origin=\"off\">Declares a public property of the same name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当创建该类的一个实例时，把该属性初始化为相应的参数值。</p><p translation-origin=\"off\">Initializes that property with the corresponding argument when creating an instance of the class.</p>\n\n</li>\n</ul>\n<h3 id=\"using-the-hero-class\" translation-result=\"on\">使用 Hero 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#using-the-hero-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"using-the-hero-class\">Using the Hero class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#using-the-hero-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">导入了 <code>Hero</code> 类之后，组件的 <code>heroes</code> 属性就可以返回一个<em>类型化的</em><code>Hero</code> 对象数组了。</p><p translation-origin=\"off\">After importing the <code>Hero</code> class, the <code>AppComponent.heroes</code> property can return a <em>typed</em> array\nof <code>Hero</code> objects:</p>\n\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (heroes)\" region=\"heroes\">\nheroes = [\n  new Hero(1, 'Windstorm'),\n  new Hero(13, 'Bombasto'),\n  new Hero(15, 'Magneta'),\n  new Hero(20, 'Tornado')\n];\nmyHero = this.heroes[0];\n\n</code-example>\n<p translation-result=\"on\">接着，修改模板。\n现在它显示的是英雄的 <code>id</code> 和 <code>name</code>。\n要修复它，只显示英雄的 <code>name</code> 属性就行了。</p><p translation-origin=\"off\">Next, update the template.\nAt the moment it displays the hero's <code>id</code> and <code>name</code>.\nFix that to display only the hero's <code>name</code> property.</p>\n\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero.name}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n      {{ hero.name }}\n    &#x3C;/li>\n  &#x3C;/ul>\n`\n\n</code-example>\n<p translation-result=\"on\">显示上还和以前一样，不过代码更清晰了。</p><p translation-origin=\"off\">The display looks the same, but the code is clearer.</p>\n\n<a id=\"ngIf\"></a>\n<h2 id=\"conditional-display-with-ngif\" translation-result=\"on\">通过 NgIf 进行条件显示<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#conditional-display-with-ngif\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"conditional-display-with-ngif\">Conditional display with NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#conditional-display-with-ngif\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有时，应用需要只在特定情况下显示视图或视图的一部分。</p><p translation-origin=\"off\">Sometimes an app needs to display a view or a portion of a view only under specific circumstances.</p>\n\n<p translation-result=\"on\">来改一下这个例子，如果多于三位英雄，显示一条消息。</p><p translation-origin=\"off\">Let's change the example to display a message if there are more than three heroes.</p>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令会根据一个布尔条件来显示或移除一个元素。\n来看看实际效果，把下列语句加到模板的底部：</p><p translation-origin=\"off\">The Angular <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive inserts or removes an element based on a <em>truthy/falsy</em> condition.\nTo see it in action, add the following paragraph at the bottom of the template:</p>\n\n<code-example path=\"displaying-data/src/app/app.component.ts\" header=\"src/app/app.component.ts (message)\" region=\"message\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\">There are many heroes!&#x3C;/p>\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">不要忘了 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 中的前导星号 (*)。它是本语法中不可或缺的一部分。\n更多 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*</code> 的内容，见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#ngIf\">ngIf</a>。</p><p translation-origin=\"off\">Don't forget the leading asterisk (*) in <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. It is an essential part of the syntax.\nRead more about <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*</code> in the <a href=\"guide/template-syntax#ngIf\">ngIf section</a> of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n</div>\n<p translation-result=\"on\">双引号内的模板表达式 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\"</code> 的外观和行为与 TypeScript 非常相似。当组件的英雄列表包含三个以上的条目时，Angular 会将这段话添加到 DOM 中，这条消息就显示出来了。如果只有三个或更少的条目，Angular 就会省略该段落，也就不会显示任何消息。</p><p translation-origin=\"off\">The template expression inside the double quotes,\n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\"</code>, looks and behaves much like TypeScript.\nWhen the component's list of heroes has more than three items, Angular adds the paragraph\nto the DOM and the message appears.\nIf there are three or fewer items, Angular omits the paragraph, so no message appears.</p>\n\n<p translation-result=\"on\">双引号中的模板表达式 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heros.length > 3\"</code>，外观和行为很象 TypeScript。\n当组件中的英雄列表有三个以上的条目时，Angular 就会把这个段落添加到 DOM 中，于是消息显示了出来。\n如果有三个或更少的条目，则 Angular 会省略这些段落，所以不显示消息。\n更多信息，见<a href=\"guide/template-syntax\">模板语法</a>中的<a href=\"guide/template-syntax#template-expressions\">模板表达式</a>。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/template-syntax#template-expressions\">template expressions</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">Angular 并不是在显示和隐藏这条消息，它是在从 DOM 中添加和移除这个段落元素。\n这会提高性能，特别是在一些大的项目中有条件地包含或排除一大堆带着很多数据绑定的 HTML 时。</p><p translation-origin=\"off\">Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in larger projects when conditionally including or excluding\nbig chunks of HTML with many data bindings.</p>\n\n</div>\n<p translation-result=\"on\">试一下。因为这个数组中有四个条目，所以消息应该显示出来。\n回到 <code>app.component.ts</code>，从英雄数组中删除或注释掉一个元素。\n浏览器应该自动刷新，消息应该会消失。</p><p translation-origin=\"off\">Try it out. Because the array has four items, the message should appear.\nGo back into <code>app.component.ts</code> and delete or comment out one of the elements from the heroes array.\nThe browser should refresh automatically and the message should disappear.</p>\n\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">现在你知道了如何使用：</p><p translation-origin=\"off\">Now you know how to use:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 带有双花括号的<strong>插值 (interpolation) </strong>来显示一个组件属性。</p><p translation-origin=\"off\"><strong>Interpolation</strong> with double curly braces to display a component property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用 <strong>ngFor</strong> 显示数组。</p><p translation-origin=\"off\"><strong>ngFor</strong> to display an array of items.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用一个 TypeScript 类来为你的组件描述<strong>模型数据</strong>并显示模型的属性。</p><p translation-origin=\"off\">A TypeScript class to shape the <strong>model data</strong> for your component and display properties of that model.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用 <strong>ngIf</strong> 根据一个布尔表达式有条件地显示一段 HTML。</p><p translation-origin=\"off\"><strong>ngIf</strong> to conditionally display a chunk of HTML based on a boolean expression.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下面是最终的代码：</p><p translation-origin=\"off\">Here's the final code:</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"displaying-data/src/app/app.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero.name}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n      {{ hero.name }}\n      &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\">There are many heroes!&#x3C;/p>\n`\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = [\n    new Hero(1, 'Windstorm'),\n    new Hero(13, 'Bombasto'),\n    new Hero(15, 'Magneta'),\n    new Hero(20, 'Tornado')\n  ];\n  myHero = this.heroes[0];\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero.ts\" path=\"displaying-data/src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"displaying-data/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"main.ts\" path=\"displaying-data/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/user-input\n - guide/zone\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli/generate\n - cli/new\n - guide/displaying-data#add-logic-to-loop-through-data\n - guide/displaying-data#choosing-the-template-source\n - guide/displaying-data#conditional-display-with-ngif\n - guide/displaying-data#creating-a-class-for-the-data\n - guide/displaying-data#displaying-data-in-views\n - guide/displaying-data#initialization\n - guide/displaying-data#showing-component-properties-with-interpolation\n - guide/displaying-data#summary\n - guide/displaying-data#using-the-hero-class\n - guide/glossary#component\n - guide/glossary#data-binding\n - guide/glossary#directive\n - guide/glossary#template\n - guide/glossary#view\n - guide/template-syntax\n - guide/template-syntax#microsyntax\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngfor\n - guide/template-syntax#template-expressions\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/displaying-data.md?message=docs%3A%20请简述你的修改...\n-->"
}