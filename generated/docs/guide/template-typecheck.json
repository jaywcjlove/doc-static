{
  "id": "guide/template-typecheck",
  "title": "Template type checking",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-typecheck.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"template-type-checking\" translation-result=\"on\">模板类型检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#template-type-checking\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"template-type-checking\">Template type checking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#template-type-checking\"><i class=\"material-icons\">link</i></a></h1>\n\n<h2 id=\"overview-of-template-type-checking\" translation-result=\"on\">模板类型检查概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#overview-of-template-type-checking\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"overview-of-template-type-checking\">Overview of template type checking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#overview-of-template-type-checking\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">正如 TypeScript 在代码中捕获类型错误一样，Angular 也会检查应用程序模板中的表达式和绑定，并可以报告所发现的任何类型错误。\nAngular 当前有三种执行此操作的模式，具体取决于 <a href=\"guide/typescript-configuration\">TypeScript 配置文件</a> 中的 <code>fullTemplateTypeCheck</code> 和 <code>strictTemplates</code> 标志的值。</p><p translation-origin=\"off\">Just as TypeScript catches type errors in your code, Angular checks the expressions and bindings within the templates of your application and can report any type errors it finds.\nAngular currently has three modes of doing this, depending on the value of the <code>fullTemplateTypeCheck</code> and <code>strictTemplates</code> flags in the <a href=\"guide/typescript-configuration\">TypeScript configuration file</a>.</p>\n\n<h3 id=\"basic-mode\" translation-result=\"on\">基本模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#basic-mode\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"basic-mode\">Basic mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#basic-mode\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在最基本的类型检查模式下，将 <code>fullTemplateTypeCheck</code> 标志设置为 <code>false</code>，Angular 仅验证模板中的顶层表达式。</p><p translation-origin=\"off\">In the most basic type-checking mode, with the <code>fullTemplateTypeCheck</code> flag set to <code>false</code>, Angular validates only top-level expressions in a template.</p>\n\n<p translation-result=\"on\">如果编写 <code>&#x3C;map [city]=\"user.address.city\"></code>，则编译器将验证以下内容：</p><p translation-origin=\"off\">If you write <code>&#x3C;map [city]=\"user.address.city\"></code>, the compiler verifies the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>user</code> 是该组件类的属性。</p><p translation-origin=\"off\"><code>user</code> is a property on the component class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>user</code> 是具有 <code>address</code> 属性的对象。</p><p translation-origin=\"off\"><code>user</code> is an object with an address property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>user.address</code> 是具有 <code>city</code> 属性的对象。</p><p translation-origin=\"off\"><code>user.address</code> is an object with a city property.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">编译器不会验证 <code>user.address.city</code> 的值是否可赋值给 <code>&#x3C;map></code> 组件的输入属性 <code>city</code>。</p><p translation-origin=\"off\">The compiler does not verify that the value of <code>user.address.city</code> is assignable to the city input of the <code>&#x3C;map></code> component.</p>\n\n<p translation-result=\"on\">编译器在此模式下也有一些主要限制：</p><p translation-origin=\"off\">The compiler also has some major limitations in this mode:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">重要的是，它不会检查嵌入式视图，例如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 和其它 <code>&#x3C;ng-template></code> 嵌入式视图。</p><p translation-origin=\"off\">Importantly, it doesn't check embedded views, such as <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>, <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, other <code>&#x3C;ng-template></code> embedded view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">它无法弄清 <code>#refs</code> 的类型、管道的结果、事件绑定中 <code>$event</code> 的类型等等。</p><p translation-origin=\"off\">It doesn't figure out the types of <code>#refs</code>, the results of pipes, the type of <code>$event</code> in event bindings, and so on.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在许多情况下，这些东西最终都以 <code>any</code> 类型结束，这可能导致表达式的后续部分不受检查。</p><p translation-origin=\"off\">In many cases, these things end up as type <code>any</code>, which can cause subsequent parts of the expression to go unchecked.</p>\n\n<h3 id=\"full-mode\" translation-result=\"on\">完全模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#full-mode\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"full-mode\">Full mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#full-mode\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果将 <code>fullTemplateTypeCheck</code> 标志设置为 <code>true</code>，则 Angular 在模板中进行类型检查时会更加主动。特别是：</p><p translation-origin=\"off\">If the <code>fullTemplateTypeCheck</code> flag is set to <code>true</code>, Angular is more aggressive in its type-checking within templates.\nIn particular:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">检查嵌入式视图（例如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 或 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 内的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> ）。</p><p translation-origin=\"off\">Embedded views (such as those within an <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> or <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>) are checked.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">管道具有正确的返回类型。</p><p translation-origin=\"off\">Pipes have the correct return type.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">对指令和管道的本地引用具有正确的类型（any 泛型参数除外，该通用参数将是 <code>any</code> ）。</p><p translation-origin=\"off\">Local references to directives and pipes have the correct type (except for any generic parameters, which will be <code>any</code>).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">以下仍然具有 <code>any</code> 类型。</p><p translation-origin=\"off\">The following still have type <code>any</code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">对 DOM 元素的本地引用。</p><p translation-origin=\"off\">Local references to DOM elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>$event</code> 对象。</p><p translation-origin=\"off\">The <code>$event</code> object.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">安全导航表达式。</p><p translation-origin=\"off\">Safe navigation expressions.</p>\n\n</li>\n</ul>\n<a id=\"strict-mode\"></a>\n<h3 id=\"strict-mode\" translation-result=\"on\">严格模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#strict-mode\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"strict-mode\">Strict mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#strict-mode\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 版本 9 延续了 <code>fullTemplateTypeCheck</code> 标志的行为，并引入了第三个“严格模式”。严格模式是完全模式的超集，可以通过将 <code>strictTemplates</code> 标志设置为 true 来访问。该标志取代 <code>fullTemplateTypeCheck</code> 标志。在严格模式下，Angular 9 版添加了超出 8 版类型检查器的检查。请注意，严格模式仅在使用 Ivy 时可用。</p><p translation-origin=\"off\">Angular version 9 maintains the behavior of the <code>fullTemplateTypeCheck</code> flag, and introduces a third \"strict mode\".\nStrict mode is a superset of full mode, and is accessed by setting the <code>strictTemplates</code> flag to true. This flag supersedes the <code>fullTemplateTypeCheck</code> flag.\nIn strict mode, Angular version 9 adds checks that go beyond the version 8 type-checker.\nNote that strict mode is only available if using Ivy.</p>\n\n<p translation-result=\"on\">除了完全模式的行为之外，Angular 版本 9 还会：</p><p translation-origin=\"off\">In addition to the full mode behavior, Angular version 9:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">验证组件/指令绑定是否可赋值给它们的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>。</p><p translation-origin=\"off\">Verifies that component/directive bindings are assignable to their <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>s.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">验证以上内容时，遵守 TypeScript 的 <code>strictNullChecks</code> 标志。</p><p translation-origin=\"off\">Obeys TypeScript's <code>strictNullChecks</code> flag when validating the above.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">推断组件/指令的正确类型，包括泛型。</p><p translation-origin=\"off\">Infers the correct type of components/directives, including generics.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">推断配置模板上下文的类型（例如，允许对 <code>NgFor</code> 进行正确的类型检查）。</p><p translation-origin=\"off\">Infers template context types where configured (for example, allowing correct type-checking of <code>NgFor</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在组件/指令、DOM 和动画事件绑定中推断 <code>$event</code> 的正确类型。</p><p translation-origin=\"off\">Infers the correct type of <code>$event</code> in component/directive, DOM, and animation event bindings.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">根据标签（tag）名称（例如，<code>document.createElement</code> 将为该标签返回正确的类型），推断出对 DOM 元素的局部引用的正确类型。</p><p translation-origin=\"off\">Infers the correct type of local references to DOM elements, based on the tag name (for example, the type that <code>document.createElement</code> would return for that tag).</p>\n\n</li>\n</ul>\n<h2 id=\"checking-of-ngfor\" translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#checking-of-ngfor\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"checking-of-ngfor\">Checking of <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#checking-of-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">类型检查的三种模式对嵌入式视图的处理方式不同。考虑以下示例。</p><p translation-origin=\"off\">The three modes of type-checking treat embedded views differently. Consider the following example.</p>\n\n<code-example language=\"ts\" header=\"User interface\">\n\ninterface User {\n  name: string;\n  address: {\n    city: string;\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: string;\n  }\n}\n\n</code-example>\n<code-example language=\"html\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let user of users\">\n\n    &#x3C;h2>{{config.title}}&#x3C;/h2>\n\n    &#x3C;span>City: {{user.address.city}}&#x3C;/span>\n\n  &#x3C;/div>\n</code-example>\n<p translation-result=\"on\"><code>&#x3C;h2></code> 和 <code>&#x3C;span></code> 在 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 嵌入式视图中。在基本模式下，Angular 不会检查它们中的任何一个。但是，在完全模式下，Angular 会检查 <code>config</code> 和 <code>user</code> 是否存在，并假设为 <code>any</code> 的类型。在严格模式下，Angular 知道该 <code>user</code> 在 <code>&#x3C;span></code> 中是 <code>User</code> 类型，而 <code>address</code> 是与一个对象，它有一个 <code>string</code> 类型的属性 <code>city</code>。</p><p translation-origin=\"off\">The <code>&#x3C;h2></code> and the <code>&#x3C;span></code> are in the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> embedded view.\nIn basic mode, Angular doesn't check either of them.\nHowever, in full mode, Angular checks that <code>config</code> and <code>user</code> exist and assumes a type of <code>any</code>.\nIn strict mode, Angular knows that the <code>user</code> in the <code>&#x3C;span></code> has a type of <code>User</code>, and that <code>address</code> is an object with a <code>city</code> property of type <code>string</code>.</p>\n\n<a id=\"troubleshooting-template-errors\"></a>\n<h2 id=\"troubleshooting-template-errors\" translation-result=\"on\">排除模板错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#troubleshooting-template-errors\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"troubleshooting-template-errors\">Troubleshooting template errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#troubleshooting-template-errors\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在版本 9 中启用新的严格模式时，你可能会遇到在以前的两种模式下都没有出现过的模板错误。这些错误通常表示模板中的真正类型不匹配，而以前的工具并未捕获这些错误。在这种情况下，该错误消息会使该问题在模板中的位置清晰可见。</p><p translation-origin=\"off\">When enabling the new strict mode in version 9, you might encounter template errors that didn't arise in either of the previous modes.\nThese errors often represent genuine type mismatches in the templates that were not caught by the previous tooling.\nIf this is the case, the error message should make it clear where in the template the problem occurs.</p>\n\n<p translation-result=\"on\">当 Angular 库的类型不完整或不正确，或者在以下情况下类型与预期不完全一致时，也可能存在误报。</p><p translation-origin=\"off\">There can also be false positives when the typings of an Angular library are either incomplete or incorrect, or when the typings don't quite line up with expectations as in the following cases.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">当库的类型错误或不完整时（例如，如果编写库的时候没有注意 <code>strictNullChecks</code>，则可能缺少 <code>null | undefined</code> ）。</p><p translation-origin=\"off\">When a library's typings are wrong or incomplete (for example, missing <code>null | undefined</code> if the library was not written with <code>strictNullChecks</code> in mind).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">当库的输入类型太窄并且库没有为 Angular 添加适当的元数据来解决这个问题时。这通常在禁用或使用其它通用布尔输入作为属性时发生，例如 <code>&#x3C;input disabled></code>。</p><p translation-origin=\"off\">When a library's input types are too narrow and the library hasn't added appropriate metadata for Angular to figure this out. This usually occurs with disabled or other common Boolean inputs used as attributes, for example, <code>&#x3C;input disabled></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在将 <code>$event.target</code> 用于 DOM 事件时（由于事件冒泡的可能性，DOM 类型中的 <code>$event.target</code> 不具有你可能期望的类型）。</p><p translation-origin=\"off\">When using <code>$event.target</code> for DOM events (because of the possibility of event bubbling, <code>$event.target</code> in the DOM typings doesn't have the type you might expect).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">如果发生此类误报，则有以下几种选择：</p><p translation-origin=\"off\">In case of a false positive like these, there are a few options:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在某些情况下，使用 <a href=\"guide/template-syntax#any-type-cast-function\"><code>$any()</code> 类型转换函数</a>可以选择不对部分表达式进行类型检查。</p><p translation-origin=\"off\">Use the <a href=\"guide/template-syntax#any-type-cast-function\"><code>$any()</code> type-cast function</a> in certain contexts to opt out of type-checking for a part of the expression.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你可以通过在应用程序的 TypeScript 配置文件 <code>tsconfig.json</code> 中设置 <code>strictTemplates: false</code> 来完全禁用严格检查。</p><p translation-origin=\"off\">You can disable strict checks entirely by setting <code>strictTemplates: false</code> in the application's TypeScript configuration file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">通过将<em>严格性标志</em>设置为 <code>false</code>，可以在保持其它方面的严格性的同时，单独禁用某些特定的类型检查操作。</p><p translation-origin=\"off\">You can disable certain type-checking operations individually, while maintaining strictness in other aspects, by setting a <em>strictness flag</em> to <code>false</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果要一起使用 <code>strictTemplates</code> 和 <code>strictNullChecks</code>，则可以通过 <code>strictNullInputTypes</code> 来选择性排除专门用于输入绑定的严格空类型检查。</p><p translation-origin=\"off\">If you want to use <code>strictTemplates</code> and <code>strictNullChecks</code> together, you can opt out of strict null type checking specifically for input bindings via <code>strictNullInputTypes</code>.</p>\n\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><p translation-result=\"on\">严格标志</p><p translation-origin=\"off\">Strictness flag</p></th>\n<th><p translation-result=\"on\">影响</p><p translation-origin=\"off\">Effect</p></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td><code>strictInputTypes</code></td>\n<td><p translation-result=\"on\">是否检查绑定表达式对 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 字段的可赋值性。也会影响指令泛型类型的推断。</p><p translation-origin=\"off\">Whether the assignability of a binding expression to the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> field is checked. Also affects the inference of directive generic types.</p></td>\n</tr>\n\n<tr>\n<td><code>strictNullInputTypes</code></td>\n<td><p translation-result=\"on\">检查 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 绑定时是否要 <code>strictNullChecks</code>（对于每个 <code>strictInputTypes</code>）。当使用的库不是基于 <code>strictNullChecks</code> 构建的时，将其关闭会很有帮助。</p><p translation-origin=\"off\">Whether <code>strictNullChecks</code> is honored when checking <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> bindings (per <code>strictInputTypes</code>). Turning this off can be useful when using a library that was not built with <code>strictNullChecks</code> in mind.</p></td>\n</tr>\n\n<tr>\n<td><code>strictAttributeTypes</code></td>\n<td><p translation-result=\"on\">是否检查使用文本属性（例如，<code>&#x3C;mat-tab label=\"Step 1\"></code> 与 <code>&#x3C;mat-tab [label]=\"'Step 1'\"></code>）进行的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 绑定。</p><p translation-origin=\"off\">Whether to check <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> bindings that are made using text attributes (for example, <code>&#x3C;mat-tab label=\"Step 1\"></code> vs <code>&#x3C;mat-tab [label]=\"'Step 1'\"></code>).</p></td>\n</tr>\n\n<tr>\n<td><code>strictSafeNavigationTypes</code></td>\n<td><p translation-result=\"on\">是否根据 <code>user</code> 的类型正确推断出安全导航操作的返回类型（例如 <code>user?.name</code> ）。如果禁用，则 <code>user?.name</code> 的类型为 <code>any</code>。</p><p translation-origin=\"off\">Whether the return type of safe navigation operations (for example, <code>user?.name</code>) will be correctly inferred based on the type of <code>user</code>). If disabled, <code>user?.name</code> will be of type <code>any</code>.</p></td>\n</tr>\n\n<tr>\n<td><code>strictDomLocalRefTypes</code></td>\n<td><p translation-result=\"on\">对 DOM 元素的本地引用是否将具有正确的类型。如果禁用，对于 <code>&#x3C;input #ref></code> 来说 <code>ref</code> 会是 <code>any</code> 类型的。</p><p translation-origin=\"off\">Whether local references to DOM elements will have the correct type. If disabled <code>ref</code> will be of type <code>any</code> for <code>&#x3C;input #ref></code>.</p></td>\n</tr>\n\n<tr>\n<td><code>strictOutputEventTypes</code></td>\n<td><p translation-result=\"on\">对于绑定到组件/指令 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 或动画事件的事件绑定，<code>$event</code> 是否具有正确的类型。如果禁用，它将为 <code>any</code>。</p><p translation-origin=\"off\">Whether <code>$event</code> will have the correct type for event bindings to component/directive an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, or to animation events. If disabled, it will be <code>any</code>.</p></td>\n</tr>\n\n<tr>\n<td><code>strictDomEventTypes</code></td>\n<td><p translation-result=\"on\">对于与 DOM 事件的事件绑定，<code>$event</code> 是否具有正确的类型。如果禁用，它将为 <code>any</code>。</p><p translation-origin=\"off\">Whether <code>$event</code> will have the correct type for event bindings to DOM events. If disabled, it will be <code>any</code>.</p></td>\n</tr>\n\n<tr>\n<td><code>strictContextGenerics</code></td>\n<td><p translation-result=\"on\">泛型组件的类型参数是否应该被正确推断（包括泛型上界和下界）. 如果禁用它，所有的类型参数都会被当做 <code>any</code>。</p><p translation-origin=\"off\">Whether the type parameters of generic components will be inferred correctly (including any generic bounds). If disabled, any type parameters will be <code>any</code>.</p></td>\n</tr>\n\n<tr>\n<td><code>strictLiteralTypes</code></td>\n<td><p translation-result=\"on\">是否要推断模板中声明的对象和数组字面量的类型。如果禁用，则此类文字的类型就是 <code>any</code>。</p><p translation-origin=\"off\">Whether object and array literals declared in the template will have their type inferred. If disabled, the type of such literals will be <code>any</code>.</p></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">如果使用这些标志进行故障排除后仍然存在问题，可以通过禁用 <code>strictTemplates</code> 退回到完全模式。</p><p translation-origin=\"off\">If you still have issues after troubleshooting with these flags, you can fall back to full mode by disabling <code>strictTemplates</code>.</p>\n\n<p translation-result=\"on\">如果这不起作用，则最后一种选择是完全关闭 full 模式，并使用 <code>fullTemplateTypeCheck: false</code>，因为在这种情况下，我们已经做了一些特殊的努力来使 Angular 9 向后兼容。</p><p translation-origin=\"off\">If that doesn't work, an option of last resort is to turn off full mode entirely with <code>fullTemplateTypeCheck: false</code>, as we've made a special effort to make Angular version 9 backwards compatible in this case.</p>\n\n<p translation-result=\"on\">你无法使用任何推荐方式解决的类型检查错误可能是因为模板类型检查器本身存在错误。如果遇到需要退回到基本模式的错误，则很可能是这样的错误。如果发生这种情况，请<a href=\"https://github.com/angular/angular/issues\">提出问题</a>，以便开发组解决。</p><p translation-origin=\"off\">A type-checking error that you cannot resolve with any of the recommended methods can be the result of a bug in the template type-checker itself.\nIf you get errors that require falling back to basic mode, it is likely to be such a bug.\nIf this happens, please <a href=\"https://github.com/angular/angular/issues\">file an issue</a> so the team can address it.</p>\n\n<h2 id=\"inputs-and-type-checking\" translation-result=\"on\">输入和类型检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#inputs-and-type-checking\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"inputs-and-type-checking\">Inputs and type-checking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#inputs-and-type-checking\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 版本 9 中，模板类型检查器会检查绑定表达式的类型是否与相应指令输入的类型兼容。例如，请考虑以下组件：</p><p translation-origin=\"off\">In Angular version 9, the template type checker checks whether a binding expression's type is compatible with that of the corresponding directive input.\nAs an example, consider the following component:</p>\n\n<code-example language=\"typescript\">\nexport interface User {\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'user-detail',\n  template: '{{ user.name }}',\n})\nexport class UserDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() user: User;\n}\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 模板按以下方式使用此组件：</p><p translation-origin=\"off\">The <code>AppComponent</code> template uses this component as follows:</p>\n\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  template: '&#x3C;user-detail [user]=\"selectedUser\" />',\n})\nexport class AppComponent {\n  selectedUser: User | null = null;\n}\n</code-example>\n<p translation-result=\"on\">这里，在检查 <code>AppComponent</code> 的模板期间，<code>[user]=\"selectedUser\"</code> 绑定与 <code>UserDetailComponent.user</code> 输入属性相对应。因此，Angular 会将 <code>selectedUser</code> 属性赋值给 <code>UserDetailComponent.user</code>，如果它们的类型不兼容，则将导致错误。TypeScript 会根据其类型系统进行赋值检查，并遵循在应用程序中配置的标志（例如 <code>strictNullChecks</code> ）。</p><p translation-origin=\"off\">Here, during type checking of the template for <code>AppComponent</code>, the <code>[user]=\"selectedUser\"</code> binding corresponds with the <code>UserDetailComponent.user</code> input.\nTherefore, Angular assigns the <code>selectedUser</code> property to <code>UserDetailComponent.user</code>, which would result in an error if their types were incompatible.\nTypeScript checks the assignment according to its type system, obeying flags such as <code>strictNullChecks</code> as they are configured in the application.</p>\n\n<p translation-result=\"on\">通过向模板类型检查器提出更具体的模板内类型要求，可以避免一些运行时类型错误。通过在指令定义中提供各种“模板守卫”功能，可以让自定义指令的输入类型要求尽可能具体。参阅本指南中的<a href=\"guide/structural-directives#directive-type-checks\">强化自定义指令的模板类型检查</a>和<a href=\"guide/template-typecheck#input-setter-coercion\">输入属性 setter 的强制转换</a>。</p><p translation-origin=\"off\">You can avoid run-time type errors by providing more specific in-template type requirements to the template type checker. Make the input type requirements for your own directives as specific as possible by providing template-guard functions in the directive definition. See <a href=\"guide/structural-directives#directive-type-checks\">Improving template type checking for custom directives</a>, and <a href=\"guide/template-typecheck#input-setter-coercion\">Input setter coercion</a> in this guide.</p>\n\n<h3 id=\"strict-null-checks\" translation-result=\"on\">严格的空检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#strict-null-checks\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"strict-null-checks\">Strict null checks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#strict-null-checks\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当你启用 <code>strictTemplates</code> 和 TypeScript 标志 <code>strictNullChecks</code>，在某些情况下可能会发生类型检查错误，这些情况很难避免。例如：</p><p translation-origin=\"off\">When you enable <code>strictTemplates</code> and the TypeScript flag <code>strictNullChecks</code>, typecheck errors may occur for certain situations that may not easily be avoided. For example:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">  一个可空值，该值绑定到未启用 <code>strictNullChecks</code> 的库中的指令。</p><p translation-origin=\"off\">A nullable value that is bound to a directive from a library which did not have <code>strictNullChecks</code> enabled.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">  对于没有使用 <code>strictNullChecks</code> 编译的库，其声明文件将不会指示字段是否可以为 <code>null</code>。对于库正确处理 <code>null</code> 的情况，这是有问题的，因为编译器将根据声明文件进行空值检查，而它省略了 <code>null</code> 类型。这样，编译器会产生类型检查错误，因为它要遵守 <code>strictNullChecks</code>。</p><p translation-origin=\"off\">For a library compiled without <code>strictNullChecks</code>, its declaration files will not indicate whether a field can be <code>null</code> or not.\nFor situations where the library handles <code>null</code> correctly, this is problematic, as the compiler will check a nullable value against the declaration files which omit the <code>null</code> type.\nAs such, the compiler produces a type-check error because it adheres to <code>strictNullChecks</code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">  将 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道与 Observable 一起使用会同步发出值。</p><p translation-origin=\"off\">Using the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe with an Observable which you know will emit synchronously.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">  <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道当前假定它预订的 Observable 可以是异步的，这意味着可能还没有可用的值。在这种情况下，它仍然必须返回某些内容 —— <code>null</code>。换句话说，<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道的返回类型包括 <code>null</code>，这在知道此 Observable 会同步发出非空值的情况下可能会导致错误。</p><p translation-origin=\"off\">The <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe currently assumes that the Observable it subscribes to can be asynchronous, which means that it's possible that there is no value available yet.\nIn that case, it still has to return something—which is <code>null</code>.\nIn other words, the return type of the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe includes <code>null</code>, which may result in errors in situations where the Observable is known to emit a non-nullable value synchronously.</p>\n\n<p translation-result=\"on\">对于上述问题，有两种潜在的解决方法：</p><p translation-origin=\"off\">There are two potential workarounds to the above issues:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"> 在模板中，包括非空断言运算符 <code>!</code> 用在可为空的表达式的末尾，例如 <code>&#x3C;user-detail [user]=\"user!\" /></code>。</p><p translation-origin=\"off\">In the template, include the non-null assertion operator <code>!</code> at the end of a nullable expression, such as  <code>&#x3C;user-detail [user]=\"user!\" /></code>.</p>\n\n<p translation-result=\"on\"> 在此示例中，编译器在可空性方面会忽略类型不兼容，就像在 TypeScript 代码中一样。对于 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道，请注意，表达式需要用括号括起来，如 <code>&#x3C;user-detail [user]=\"(user$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>)!\" /></code>。</p><p translation-origin=\"off\"> In this example, the compiler disregards type incompatibilities in nullability, just as in TypeScript code.\nIn the case of the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe, note that the expression needs to be wrapped in parentheses, as in <code>&#x3C;user-detail [user]=\"(user$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>)!\" /></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">完全禁用 Angular 模板中的严格空检查。</p><p translation-origin=\"off\">Disable strict null checks in Angular templates completely.</p>\n\n<p translation-result=\"on\">当启用 <code>strictTemplates</code> 时，仍然可以禁用类型检查的某些方面。将选项 <code>strictNullInputTypes</code> 设置为 <code>false</code> 将禁用 Angular 模板中的严格空检查。此标志会作用于应用程序中包含的所有组件。</p><p translation-origin=\"off\">When <code>strictTemplates</code> is enabled, it is still possible to disable certain aspects of type checking.\nSetting the option <code>strictNullInputTypes</code> to <code>false</code> disables strict null checks within Angular templates.\nThis flag applies for all components that are part of the application.</p>\n\n</li>\n</ol>\n<h3 id=\"advice-for-library-authors\" translation-result=\"on\">给库作者的建议<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#advice-for-library-authors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"advice-for-library-authors\">Advice for library authors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#advice-for-library-authors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">作为库作者，你可以采取多种措施为用户提供最佳体验。首先，启用 <code>strictNullChecks</code> 并在输入的类型中包括 <code>null</code>（如果适用），可以与消费者沟通，看他们是否可以提供可空的值。\n此外，可以提供特定模板类型检查器的类型提示，请参阅本指南的<a href=\"guide/structural-directives#directive-type-checks\">为自定义指令改进模板类型检查</a>和<a href=\"guide/template-typecheck#input-setter-coercion\">输入设置器强制转型</a>部分。</p><p translation-origin=\"off\">As a library author, you can take several measures to provide an optimal experience for your users.\nFirst, enabling <code>strictNullChecks</code> and including <code>null</code> in an input's type, as appropriate, communicates to your consumers whether they can provide a nullable value or not.\nAdditionally, it is possible to provide type hints that are specific to the template type checker. See <a href=\"guide/structural-directives#directive-type-checks\">Improving template type checking for custom directives</a>, and <a href=\"guide/template-typecheck#input-setter-coercion\">Input setter coercion</a> below.</p>\n\n<a id=\"input-setter-coercion\"></a>\n<h2 id=\"input-setter-coercion\" translation-result=\"on\">输入设置器强制转型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#input-setter-coercion\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"input-setter-coercion\">Input setter coercion<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#input-setter-coercion\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有时，指令或组件的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 最好更改绑定到它的值，通常使用此输入的 getter / setter 对。例如，考虑以下自定义按钮组件：</p><p translation-origin=\"off\">Occasionally it is desirable for the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> of a directive or component to alter the value bound to it, typically using a getter/setter pair for the input.\nAs an example, consider this custom button component:</p>\n\n<p translation-result=\"on\">考虑以下指令：</p><p translation-origin=\"off\">Consider the following directive:</p>\n\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'submit-button',\n  template: `\n\n    &#x3C;div class=\"wrapper\">\n\n      &#x3C;button [disabled]=\"disabled\">Submit&#x3C;/button>'\n\n    &#x3C;/div>\n\n  `,\n})\nclass SubmitButton {\n  private _disabled: boolean;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n}\n</code-example>\n<p translation-result=\"on\">在这里，组件的输入 <code>disabled</code> 将传给模板中的 <code>&#x3C;button></code>。只要将 <code>boolean</code> 值绑定到输入，所有这些工作都可以按预期进行。但是，假设使用者使用模板中的这个输入作为属性：</p><p translation-origin=\"off\">Here, the <code>disabled</code> input of the component is being passed on to the <code>&#x3C;button></code> in the template. All of this works as expected, as long as a <code>boolean</code> value is bound to the input. But, suppose a consumer uses this input in the template as an attribute:</p>\n\n<code-example language=\"html\">\n&#x3C;submit-button disabled>&#x3C;/submit-button>\n</code-example>\n<p translation-result=\"on\">这与绑定具有相同的效果：</p><p translation-origin=\"off\">This has the same effect as the binding:</p>\n\n<code-example language=\"html\">\n&#x3C;submit-button [disabled]=\"''\">&#x3C;/submit-button>\n</code-example>\n<p translation-result=\"on\">在运行时，输入将设置为空字符串，这不是 <code>boolean</code> 值。处理此问题的角组件库通常将值“强制转换”到 setter 中的正确类型中：</p><p translation-origin=\"off\">At runtime, the input will be set to the empty string, which is not a <code>boolean</code> value. Angular component libraries that deal with this problem often \"coerce\" the value into the right type in the setter:</p>\n\n<code-example language=\"typescript\">\nset disabled(value: boolean) {\n  this._disabled = (value === '') || value;\n}\n</code-example>\n<p translation-result=\"on\">最好在这里将 <code>value</code> 的类型从 <code>boolean</code> 更改为 <code>boolean|''</code> 以匹配 setter 实际会接受的一组值。TypeScript 要求 getter 和 setter 的类型相同，因此，如果 getter 应该返回 <code>boolean</code> 则 setter 会卡在较窄的类型上。</p><p translation-origin=\"off\">It would be ideal to change the type of <code>value</code> here, from <code>boolean</code> to <code>boolean|''</code>, to match the set of values which are actually accepted by the setter.\nTypeScript requires that both the getter and setter have the same type, so if the getter should return a <code>boolean</code> then the setter is stuck with the narrower type.</p>\n\n<p translation-result=\"on\">如果消费者对模板启用了 Angular 的最严格的类型检查功能，则会产生一个问题：空字符串 <code>''</code> 实际上无法赋值给 <code>disabled</code> 字段，使用属性格式写会产生类型错误。</p><p translation-origin=\"off\">If the consumer has Angular's strictest type checking for templates enabled, this creates a problem: the empty string <code>''</code> is not actually assignable to the <code>disabled</code> field, which will create a type error when the attribute form is used.</p>\n\n<p translation-result=\"on\">作为解决此问题的一种取巧方式，Angular 支持对 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 检查比声明的输入字段更宽松的类型。\n通过向组件类添加带有 <code>ngAcceptInputType_</code> 前缀的静态属性来启用此功能：</p><p translation-origin=\"off\">As a workaround for this problem, Angular supports checking a wider, more permissive type for <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> than is declared for the input field itself. Enable this by adding a static property with the <code>ngAcceptInputType_</code> prefix to the component class:</p>\n\n<code-example language=\"typescript\">\nclass SubmitButton {\n  private _disabled: boolean;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = (value === '') || value;\n  }\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngAcceptInputType_disabled: boolean|'';\n}\n</code-example>\n<p translation-result=\"on\">该字段不需要值。它只要存在就会通知 Angular 的类型检查器，<code>disabled</code> 输入应被视为接受与 <code>boolean|''</code> 类型匹配的绑定。后缀应为 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> <em>字段</em>的名称。</p><p translation-origin=\"off\">This field does not need to have a value. Its existence communicates to the Angular type checker that the <code>disabled</code> input should be considered as accepting bindings that match the type <code>boolean|''</code>. The suffix should be the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> <em>field</em> name.</p>\n\n<p translation-result=\"on\">请注意，如果给定输入存在 <code>ngAcceptInputType_</code> 覆盖，则设置器应能够处理任何覆盖类型的值。</p><p translation-origin=\"off\">Care should be taken that if an <code>ngAcceptInputType_</code> override is present for a given input, then the setter should be able to handle any values of the overridden type.</p>\n\n<h2 id=\"disabling-type-checking-using-any\" translation-result=\"on\">使用 <code>$any()</code> 禁用类型检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#disabling-type-checking-using-any\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"disabling-type-checking-using-any\">Disabling type checking using <code>$any()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-typecheck#disabling-type-checking-using-any\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以通过把绑定表达式包含在<a href=\"guide/template-syntax\">类型转换伪函数 <code>$any()</code> </a> 中来禁用类型检查。\n编译器会像在 TypeScript 中使用 <code>&#x3C;any></code> 或 <code>as any</code> 进行类型转换一样对待它。</p><p translation-origin=\"off\">Disable checking of a binding expression by surrounding the expression in a call to the <a href=\"guide/template-syntax\"><code>$any()</code> cast pseudo-function</a>.\nThe compiler treats it as a cast to the <code>any</code> type just like in TypeScript when a <code>&#x3C;any></code> or <code>as any</code> cast is used.</p>\n\n<p translation-result=\"on\">在以下示例中，将 <code>person</code> 强制转换为 <code>any</code> 类型可以压制错误 <code>Property address does not exist</code>。</p><p translation-origin=\"off\">In the following example, casting <code>person</code> to the <code>any</code> type suppresses the error <code>Property address does not exist</code>.</p>\n\n<code-example language=\"typescript\">\n  @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    selector: 'my-component',\n    template: '{{$any(person).addresss.street}}'\n  })\n  class MyComponent {\n    person?: Person;\n  }\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/ivy-compatibility\n - guide/structural-directives\n - guide/typescript-configuration\n - guide/updating-to-version-10\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Input\n - api/core/Output\n - api/core/testing/async\n - api/upgrade/static\n - guide/structural-directives#directive-type-checks\n - guide/template-syntax\n - guide/template-syntax#any-type-cast-function\n - guide/template-typecheck#advice-for-library-authors\n - guide/template-typecheck#basic-mode\n - guide/template-typecheck#checking-of-ngfor\n - guide/template-typecheck#disabling-type-checking-using-any\n - guide/template-typecheck#full-mode\n - guide/template-typecheck#input-setter-coercion\n - guide/template-typecheck#inputs-and-type-checking\n - guide/template-typecheck#overview-of-template-type-checking\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#strict-null-checks\n - guide/template-typecheck#template-type-checking\n - guide/template-typecheck#troubleshooting-template-errors\n - guide/typescript-configuration\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-typecheck.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/angular/issues\n-->"
}