{
  "id": "guide/typescript-configuration",
  "title": "TypeScript configuration",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/typescript-configuration.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"typescript-configuration\" translation-result=\"on\">TypeScript 配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"typescript-configuration\">TypeScript configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">TypeScript 是 Angular 应用开发中使用的主语言。\n它是 JavaScript 的“方言”之一，为类型安全和工具化而做了设计期支持。</p><p translation-origin=\"off\">TypeScript is a primary language for Angular application development.\nIt is a superset of JavaScript with design-time support for type safety and tooling.</p>\n\n<p translation-result=\"on\">浏览器不能直接执行 TypeScript。它得先用 <em>tsc</em> 编译器转译(transpile)成 JavaScript，而且编译器需要进行一些配置。</p><p translation-origin=\"off\">Browsers can't execute TypeScript directly.\nTypescript must be \"transpiled\" into JavaScript using the <em>tsc</em> compiler, which requires some configuration.</p>\n\n<p translation-result=\"on\">本页面会涵盖 TypeScript 配置与环境的某些方面，这些对 Angular 开发者是很重要的。具体来说包括下列文件：</p><p translation-origin=\"off\">This page covers some aspects of TypeScript configuration and the TypeScript environment\nthat are important to Angular developers, including details about the following files:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a> - TypeScript 编译器配置。</p><p translation-origin=\"off\"><a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a>—TypeScript compiler configuration.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/typescript-configuration#typings\">typings</a> - TypesScript 类型声明文件。</p><p translation-origin=\"off\"><a href=\"guide/typescript-configuration#typings\">typings</a>—TypesScript declaration files.</p>\n\n</li>\n</ul>\n<a id=\"tsconfig\"></a>\n<h2 id=\"configuration-files\" translation-result=\"on\">配置文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#configuration-files\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"configuration-files\">Configuration files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#configuration-files\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一个 Angular 工作空间中包含多个 TypeScript 配置文件。在根一级，有两个主要的 TypeScript 配置文件：<code>tsconfig.json</code> 文件和 <code>tsconfig.base.json</code> 文件。</p><p translation-origin=\"off\">A given Angular workspace contains several TypeScript configuration files.\nAt the root level, there are two main TypeScript configuration files: a <code>tsconfig.json</code> file and a <code>tsconfig.base.json</code> file.</p>\n\n<p translation-result=\"on\"><code>tsconfig.json</code> 文件是一个<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#support-for-solution-style-tsconfigjson-files\">“解决方案型”</a>的 TypeScript 配置文件。代码编辑器和 TypeScript 的语言服务都会使用这个文件来改善开发体验。而编译器不会使用这个文件。</p><p translation-origin=\"off\">The <code>tsconfig.json</code> file is a <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#support-for-solution-style-tsconfigjson-files\">\"Solution Style\"</a> TypeScript configuration file.\nCode editors and TypeScript’s language server use this file to improve development experience.\nCompilers do not use this file.</p>\n\n<p translation-result=\"on\"><code>tsconfig.json</code> 文件中包含指向工作空间中其它 TypeScript 配置文件的路径列表。</p><p translation-origin=\"off\">The <code>tsconfig.json</code> file contains a list of paths to the other TypeScript configuration files used in the workspace.</p>\n\n<code-example lang=\"json\" header=\"tsconfig.json\" linenums=\"false\">\n{\n \"files\": [],\n \"references\": [\n   {\n     \"path\": \"./tsconfig.app.json\"\n   },\n   {\n     \"path\": \"./tsconfig.spec.json\"\n   },\n   {\n     \"path\": \"./projects/my-lib/tsconfig.lib.json\"\n   }\n ]\n}\n</code-example>\n<p translation-result=\"on\"><code>tsconfig.base.json</code> 文件指定了工作空间中所有项目都要继承的基础 TypeScript 编译选项和 Angular 编译选项。</p><p translation-origin=\"off\">The <code>tsconfig.base.json</code> file specifies the base TypeScript and Angular compiler options that all projects in the workspace inherit.</p>\n\n<p translation-result=\"on\">TypeScript 和 Angular 提供了很多选项，可以用来配置类型检查功能和要生成的输出。更多信息，请参阅 TypeScript 文档中的<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 进行配置继承</a>部分。</p><p translation-origin=\"off\">The TypeScript and Angular have a wide range of options which can be used to configure type-checking features and generated output.\nFor more information, see the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">Configuration inheritance with extends</a> section of the TypeScript documentation.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解 TypeScript 配置文件的详情，请参阅官方提供的\n<a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript wiki</a>。要了解配置继承的详情，参见<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 进行配置继承</a>部分。</p><p translation-origin=\"off\">For more information TypeScript configuration files, see the official <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript wiki</a>\nFor details about configuration inheritance, see the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">Configuration inheritance with extends</a> section.</p>\n\n</div>\n<p translation-result=\"on\">Angular 工作空间的初始 <code>tsconfig.base.json</code> 通常是这样的。</p><p translation-origin=\"off\">The initial <code>tsconfig.base.json</code> for an Angular workspace typically looks like the following example.</p>\n\n<code-example lang=\"json\" header=\"tsconfig.base.json\" linenums=\"false\">\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"es2015\",\n    \"module\": \"es2020\",\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ]\n  }\n}\n</code-example>\n<h3 id=\"strict-mode\" translation-result=\"on\">严格模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#strict-mode\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"strict-mode\">Strict mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#strict-mode\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当你创建新的工作空间和项目时，你可以选择使用 Angular 的严格模式，它会帮助你写出更好、更容易维护的代码。\n欲知详情，参见<a href=\"/guide/strict-mode\">严格模式</a>。</p><p translation-origin=\"off\">When you create new workspaces and projects, you have the option to use Angular's strict mode, which can help you write better, more maintainable code.\nFor more information, see <a href=\"/guide/strict-mode\">Strict mode</a>.</p>\n\n<a id=\"noImplicitAny\"></a>\n<h3 id=\"noimplicitany-and-suppressimplicitanyindexerrors\" translation-result=\"on\"><em>noImplicitAny</em> 与 <em>suppressImplicitAnyIndexErrors</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"noimplicitany-and-suppressimplicitanyindexerrors\"><em>noImplicitAny</em> and <em>suppressImplicitAnyIndexErrors</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">TypeScript 开发者们在 <code>noImplicitAny</code> 标志应该是 <code>true</code> 还是 <code>false</code> 上存在分歧。\n这没有标准答案，你以后还可以修改这个标志。\n但是你的选择会在大项目中产生显著差异，所以它值得讨论一番。</p><p translation-origin=\"off\">TypeScript developers disagree about whether the <code>noImplicitAny</code> flag should be <code>true</code> or <code>false</code>.\nThere is no correct answer and you can change the flag later.\nBut your choice now can make a difference in larger projects, so it merits discussion.</p>\n\n<p translation-result=\"on\">当 <code>noImplicitAny</code> 标志是 <code>false</code>(默认值)时，\n如果编译器无法根据变量的用途推断出变量的类型，它就会悄悄的把变量类型默认为 <code>any</code>。这就是<em>隐式 <code>any</code></em>的含义。</p><p translation-origin=\"off\">When the <code>noImplicitAny</code> flag is <code>false</code> (the default), and if\nthe compiler cannot infer the variable type based on how it's used,\nthe compiler silently defaults the type to <code>any</code>. That's what is meant by <em>implicit <code>any</code></em>.</p>\n\n<p translation-result=\"on\">当 <code>noImplicitAny</code> 标志是 <code>true</code> 并且 TypeScript 编译器无法推断出类型时，它仍然会生成 JavaScript 文件。\n但是它也会<strong>报告一个错误</strong>。\n很多饱经沧桑的程序员更喜欢这种严格的设置，因为类型检查能在编译期间捕获更多意外错误。</p><p translation-origin=\"off\">When the <code>noImplicitAny</code> flag is <code>true</code> and the TypeScript compiler cannot infer\nthe type, it still generates the JavaScript files, but it also <strong>reports an error</strong>.\nMany seasoned developers prefer this stricter setting because type checking catches more\nunintentional errors at compile time.</p>\n\n<p translation-result=\"on\">即使 <code>noImplicitAny</code> 标志被设置成了 <code>true</code>，你也可以把变量的类型设置为 <code>any</code>。</p><p translation-origin=\"off\">You can set a variable's type to <code>any</code> even when the <code>noImplicitAny</code> flag is <code>true</code>.</p>\n\n<p translation-result=\"on\">如果把 <code>noImplicitAny</code> 标志设置为了 <code>true</code>，你可能会得到<em>隐式索引错</em>。\n大多数程序员可能觉得<em>这种错误</em>是个烦恼而不是助力。\n你可以使用另一个标志来禁止它们。</p><p translation-origin=\"off\">When the <code>noImplicitAny</code> flag is <code>true</code>, you may get <em>implicit index errors</em> as well.\nMost developers feel that <em>this particular error</em> is more annoying than helpful.\nYou can suppress them with the following additional flag:</p>\n\n<code-example>\n\n  \"suppressImplicitAnyIndexErrors\": true\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解 TypeScript 配置如何影响编译的更多信息，请参见 <a href=\"guide/angular-compiler-options\">Angular 编译器选项</a>和<a href=\"guide/template-typecheck\">模板类型检查</a> 两章。</p><p translation-origin=\"off\">For more information about how the TypeScript configuration affects compilation, see <a href=\"guide/angular-compiler-options\">Angular Compiler Options</a> and <a href=\"guide/template-typecheck\">Template Type Checking</a>.</p>\n\n</div>\n<a id=\"typings\"></a>\n<h2 id=\"typescript-typings\" translation-result=\"on\">TypeScript 类型定义(typings)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"typescript-typings\">TypeScript typings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">很多 JavaScript 库，比如 jQuery、Jasmine 测试库和 Angular，会通过新的特性和语法来扩展 JavaScript 环境。\n而 TypeScript 编译器并不能原生的识别它们。\n当编译器不能识别时，它就会抛出一个错误。</p><p translation-origin=\"off\">Many JavaScript libraries, such as jQuery, the Jasmine testing library, and Angular,\nextend the JavaScript environment with features and syntax\nthat the TypeScript compiler doesn't recognize natively.\nWhen the compiler doesn't recognize something, it throws an error.</p>\n\n<p translation-result=\"on\">可以使用<a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript 类型定义文件</a>\n—— <code>.d.ts</code> 文件 —— 来告诉编译器你要加载的库的类型定义。</p><p translation-origin=\"off\">Use <a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript type definition files</a>—<code>d.ts files</code>—to tell the compiler about the libraries you load.</p>\n\n<p translation-result=\"on\">TypeScript 敏感的编辑器借助这些定义文件来显示这些库中各个特性的类型定义。</p><p translation-origin=\"off\">TypeScript-aware editors leverage these same definition files to display type information about library features.</p>\n\n<p translation-result=\"on\">很多库在自己的 npm 包中都包含了它们的类型定义文件，TypeScript 编译器和编辑器都能找到它们。Angular 库也是这样的。\n任何 Angular 应用程序的 <code>node_modules/@angular/core/</code> 目录下，都包含几个 <code>d.ts</code> 文件，它们描述了 Angular 的各个部分。</p><p translation-origin=\"off\">Many libraries include definition files in their npm packages where both the TypeScript compiler and editors\ncan find them. Angular is one such library.\nThe <code>node_modules/@angular/core/</code> folder of any Angular application contains several <code>d.ts</code> files that describe parts of Angular.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你不需要为那些包含了 <code>d.ts</code> 文件的库获取<em>类型定义</em>文件 —— Angular 的所有包都是如此。</p><p translation-origin=\"off\">You don't need to do anything to get <em>typings</em> files for library packages that include <code>d.ts</code> files.\nAngular packages include them already.</p>\n\n</div>\n<h3 id=\"libdts\" translation-result=\"on\">lib.d.ts 文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#libdts\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"libdts\">lib.d.ts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#libdts\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">TypeScript 带有一个特殊的声明文件，名为 <code>lib.d.ts</code>。该文件包含了 JavaScript 运行库和 DOM 的各种常用 JavaScript 环境声明。</p><p translation-origin=\"off\">TypeScript includes a special declaration file called <code>lib.d.ts</code>. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</p>\n\n<p translation-result=\"on\">基于 <code>--target</code>，TypeScript 添加<em>额外</em>的环境声明，例如如果目标为 <code>es6</code> 时将添加 <code>Promise</code>。</p><p translation-origin=\"off\">Based on the <code>--target</code>, TypeScript adds <em>additional</em> ambient declarations\nlike <code>Promise</code> if the target is <code>es6</code>.</p>\n\n<p translation-result=\"on\">默认情况下，目标是 <code>es2015</code>。如果你把目标改为 <code>es5</code>，那么由于包含了声明文件列表，你仍然拥有较新的类型声明：</p><p translation-origin=\"off\">By default, the target is <code>es2015</code>. If you are targeting <code>es5</code>, you still have newer type declarations due to the list of declaration files included:</p>\n\n<code-example path=\"getting-started/tsconfig.0.json\" header=\"tsconfig.json (lib excerpt)\" region=\"lib\">\n\"lib\": [\n  \"es2018\",\n  \"dom\"\n]\n\n</code-example>\n<h3 id=\"installable-typings-files\" translation-result=\"on\">安装类型定义文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"installable-typings-files\">Installable typings files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">遗憾的是，很多库 —— jQuery、Jasmine 和 Lodash 等库 —— 都<em>没有</em>在它们自己的 npm 包中包含 <code>d.ts</code> 文件。\n幸运的是，它们的作者或社区中的贡献者已经为这些库创建了独立的 <code>d.ts</code> 文件，并且把它们发布到了一个众所周知的位置。</p><p translation-origin=\"off\">Many libraries—jQuery, Jasmine, and Lodash among them—do <em>not</em> include <code>d.ts</code> files in their npm packages.\nFortunately, either their authors or community contributors have created separate <code>d.ts</code> files for these libraries and\npublished them in well-known locations.</p>\n\n<p translation-result=\"on\">你还可以通过 <code>npm</code> 来使用<a href=\"http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> 范围化包</a>来安装这些类型信息，\n而 TypeScript 自从 2.0 开始，可以自动识别它们。</p><p translation-origin=\"off\">You can install these typings via <code>npm</code> using the\n<a href=\"http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> scoped package</a>\nand Typescript, starting at 2.0, automatically recognizes them.</p>\n\n<p translation-result=\"on\">比如，要安装 <code>jasmine</code> 的类型信息，你可以执行 <code>npm install @types/jasmine --save-dev</code>。</p><p translation-origin=\"off\">For instance, to install typings for <code>jasmine</code> you run <code>npm install @types/jasmine --save-dev</code>.</p>\n\n<a id=\"target\"></a>\n<h3 id=\"target\" translation-result=\"on\"><em>编译目标（target）</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#target\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"target\"><em>target</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#target\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">默认情况下，编译目标是 <code>es2015</code>，只有现代浏览器才支持它。\n你可以把编译目标配置为 <code>es5</code> 以指定支持老式浏览器。\nAngular CLI 还提供了<a href=\"guide/deployment#differential-loading\">差异化加载</a>功能，以便使用不同的包来分别支持现代浏览器和老式浏览器。</p><p translation-origin=\"off\">By default, the target is <code>es2015</code>, which is supported only in modern browsers. You can configure the target to <code>es5</code> to specifically support legacy browsers. <a href=\"guide/deployment#differential-loading\">Differential loading</a> is also provided by the Angular CLI to support modern, and legacy browsers with separate bundles.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/architecture-next-steps\n - guide/file-structure\n - guide/migration-solution-style-tsconfig\n - guide/migration-update-module-and-target-compiler-options\n - guide/template-typecheck\n - guide/upgrade\n-->\n<!-- links from this doc:\n - /guide/strict-mode\n - guide/angular-compiler-options\n - guide/deployment#differential-loading\n - guide/template-typecheck\n - guide/typescript-configuration#configuration-files\n - guide/typescript-configuration#installable-typings-files\n - guide/typescript-configuration#libdts\n - guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\n - guide/typescript-configuration#strict-mode\n - guide/typescript-configuration#target\n - guide/typescript-configuration#tsconfig\n - guide/typescript-configuration#typescript-configuration\n - guide/typescript-configuration#typescript-typings\n - guide/typescript-configuration#typings\n - http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\n - http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/typescript-configuration.md?message=docs%3A%20请简述你的修改...\n - https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#support-for-solution-style-tsconfigjson-files\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\n - https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\n-->"
}