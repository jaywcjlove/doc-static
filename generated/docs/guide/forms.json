{
  "id": "guide/forms",
  "title": "Template-driven forms",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/forms.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"template-driven-forms\" translation-result=\"on\">表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#template-driven-forms\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"template-driven-forms\">Template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#template-driven-forms\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">表单是商业应用的支柱，你用它来执行登录、求助、下单、预订机票、安排会议，以及不计其数的其它数据录入任务。</p><p translation-origin=\"off\">Forms are the mainstay of business applications.\nYou use forms to log in, submit a help request, place an order, book a flight,\nschedule a meeting, and perform countless other data-entry tasks.</p>\n\n<p translation-result=\"on\">在开发表单时，创建数据方面的体验是非常重要的，它能指引用户明晰、高效的完成工作流程。</p><p translation-origin=\"off\">In developing a form, it's important to create a data-entry experience that guides the\nuser efficiently and effectively through the workflow.</p>\n\n<h2 id=\"introduction-to-template-driven-forms\" translation-result=\"on\">模板驱动表单简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#introduction-to-template-driven-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"introduction-to-template-driven-forms\">Introduction to Template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#introduction-to-template-driven-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">开发表单需要设计能力（那超出了本章的范围），而框架支持<em>双向数据绑定、变更检测、验证和错误处理</em>，而本章你将会学到它们。</p><p translation-origin=\"off\">Developing forms requires design skills (which are out of scope for this page), as well as framework support for\n<em>two-way data binding, change tracking, validation, and error handling</em>,\nwhich you'll learn about on this page.</p>\n\n<p translation-result=\"on\">这个页面演示了如何从草稿构建一个简单的表单。这个过程中你将学会如何：</p><p translation-origin=\"off\">This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 用组件和模板构建 Angular 表单</p><p translation-origin=\"off\">Build an Angular form with a component and template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 创建双向数据绑定，以读取和写入输入控件的值</p><p translation-origin=\"off\">Use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> to create two-way data bindings for reading and writing input-control values.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 跟踪状态的变化，并验证表单控件</p><p translation-origin=\"off\">Track state changes and the validity of form controls.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 使用特殊的 CSS 类来跟踪控件的状态并给出视觉反馈</p><p translation-origin=\"off\">Provide visual feedback using special CSS classes that track the state of the controls.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 向用户显示验证错误提示，以及启用/禁用表单控件</p><p translation-origin=\"off\">Display validation errors to users and enable/disable form controls.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 使用模板引用变量在 HTML 元素之间共享信息</p><p translation-origin=\"off\">Share information across HTML elements using template reference variables.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你可以运行<live-example></live-example>，在 Stackblitz 中试用并下载本页的代码。</p><p translation-origin=\"off\">You can run the <live-example></live-example> in Stackblitz and download the code from there.</p>\n\n<a id=\"template-driven\"></a>\n<h2 id=\"template-driven-forms-1\" translation-result=\"on\">模板驱动表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#template-driven-forms-1\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-driven-forms-1\">Template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#template-driven-forms-1\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">通常，使用 Angular <a href=\"guide/template-syntax\">模板语法</a>编写模板，结合本章所描述的表单专用指令和技术来构建表单。</p><p translation-origin=\"off\">You can build forms by writing templates in the Angular <a href=\"guide/template-syntax\">template syntax</a> with\nthe form-specific directives and techniques described in this page.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  你还可以使用响应式（也叫模型驱动）的方式来构建表单。不过本章中只介绍模板驱动表单。</p><p translation-origin=\"off\">  You can also use a reactive (or model-driven) approach to build forms.\nHowever, this page focuses on template-driven forms.</p>\n\n</div>\n<p translation-result=\"on\">利用 Angular 模板，可以构建几乎所有表单 — 登录表单、联系人表单…… 以及任何的商务表单。\n可以创造性地摆放各种控件、把它们绑定到数据、指定校验规则、显示校验错误、有条件的禁用或\n启用特定的控件、触发内置的视觉反馈等等，不胜枚举。</p><p translation-origin=\"off\">You can build almost any form with an Angular template—login forms, contact forms, and pretty much any business form.\nYou can lay out the controls creatively, bind them to data, specify validation rules and display validation errors,\nconditionally enable or disable specific controls, trigger built-in visual feedback, and much more.</p>\n\n<p translation-result=\"on\">它用起来很简单，这是因为 Angular 处理了大多数重复、单调的任务，这让你可以不必亲自操刀、身陷其中。</p><p translation-origin=\"off\">Angular makes the process easy by handling many of the repetitive, boilerplate tasks you'd\notherwise wrestle with yourself.</p>\n\n<p translation-result=\"on\">你将学习构建如下的“模板驱动”表单：</p><p translation-origin=\"off\">You'll learn to build a template-driven form that looks like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/hero-form-1.png\" alt=\"Clean Form\" width=\"479\" height=\"339\">\n</div>\n<p translation-result=\"on\">这里是<em>英雄职业介绍所</em>，使用这个表单来维护候选英雄们的个人信息。每个英雄都需要一份工作。\n公司的使命就是让合适的英雄去应对恰当的危机！</p><p translation-origin=\"off\">The <em>Hero Employment Agency</em> uses this form to maintain personal information about heroes.\nEvery hero needs a job. It's the company mission to match the right hero with the right crisis.</p>\n\n<p translation-result=\"on\">表单中的三个字段，其中两个是必填的。必填的字段在左侧有个绿色的竖条，方便用户分辨哪些是必填项。</p><p translation-origin=\"off\">Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</p>\n\n<p translation-result=\"on\">如果删除了英雄的名字，表单就会用醒目的样式把验证错误显示出来。</p><p translation-origin=\"off\">If you delete the hero name, the form displays a validation error in an attention-grabbing style:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/hero-form-2.png\" alt=\"Invalid, Name Required\" width=\"465\" height=\"402\">\n</div>\n<p translation-result=\"on\">注意，提交按钮被禁用了，而且输入控件左侧的“必填”条从绿色变为了红色。</p><p translation-origin=\"off\">Note that the <em>Submit</em> button is disabled, and the \"required\" bar to the left of the input control changes from green to red.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  稍后，会使用标准 CSS 来定制“必填”条的颜色和位置。</p><p translation-origin=\"off\">  You can customize the colors and location of the \"required\" bar with standard CSS.</p>\n\n</div>\n<p translation-result=\"on\">你将一点点构建出此表单：</p><p translation-origin=\"off\">You'll build this form in small steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">创建 <code>Hero</code> 模型类</p><p translation-origin=\"off\">Create the <code>Hero</code> model class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">创建控制此表单的组件。</p><p translation-origin=\"off\">Create the component that controls the form.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">创建具有初始表单布局的模板。</p><p translation-origin=\"off\">Create a template with the initial form layout.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 双向数据绑定语法把数据属性绑定到每个表单输入控件。</p><p translation-origin=\"off\">Bind data properties to each form control using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> two-way data-binding syntax.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">往每个表单输入控件上添加 <code>name</code> 属性 (attribute)。</p><p translation-origin=\"off\">Add a <code>name</code> attribute to each form-input control.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">添加自定义 CSS 来提供视觉反馈。</p><p translation-origin=\"off\">Add custom CSS to provide visual feedback.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">显示和隐藏有效性验证的错误信息。</p><p translation-origin=\"off\">Show and hide validation-error messages.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <strong>ngSubmit</strong> 处理表单提交。</p><p translation-origin=\"off\">Handle form submission with <em>ngSubmit</em>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">禁用此表单的提交按钮，直到表单变为有效。</p><p translation-origin=\"off\">Disable the form’s <em>Submit</em> button until the form is valid.</p>\n\n</li>\n</ol>\n<h2 id=\"setup\" translation-result=\"on\">准备工作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#setup\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#setup\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">创建一个名为 <code>angular-forms</code> 的新项目：</p><p translation-origin=\"off\">Create a new project named <code>angular-forms</code>:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng new angular-forms\n\n</code-example>\n<h2 id=\"create-the-hero-model-class\" translation-result=\"on\">创建 Hero 模型类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-the-hero-model-class\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-hero-model-class\">Create the Hero model class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-the-hero-model-class\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当用户输入表单数据时，需要捕获它们的变化，并更新到模型的实例中。\n除非知道模型里有什么，否则无法设计表单的布局。</p><p translation-origin=\"off\">As users enter form data, you'll capture their changes and update an instance of a model.\nYou can't lay out the form until you know what the model looks like.</p>\n\n<p translation-result=\"on\">最简单的模型是个“属性包”，用来存放应用中一件事物的事实。\n这里使用三个必备字段 (<code>id</code>、<code>name</code>、<code>power</code>)，和一个可选字段 (<code>alterEgo</code>，译注：中文含义是第二人格，例如 X 战警中的 Jean / 黑凤凰)。</p><p translation-origin=\"off\">A model can be as simple as a \"property bag\" that holds facts about a thing of application importance.\nThat describes well the <code>Hero</code> class with its three required fields (<code>id</code>, <code>name</code>, <code>power</code>)\nand one optional field (<code>alterEgo</code>).</p>\n\n<p translation-result=\"on\">使用 Angular CLI 命令 <a href=\"cli/generate\"><code>ng generate class</code></a> 生成一个名叫 <code>Hero</code> 的新类：</p><p translation-origin=\"off\">Using the Angular CLI command <a href=\"cli/generate\"><code>ng generate class</code></a>, generate a new class named <code>Hero</code>:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate class Hero\n\n</code-example>\n<p translation-result=\"on\">内容如下：</p><p translation-origin=\"off\">With this content:</p>\n\n<code-example path=\"forms/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-example>\n<p translation-result=\"on\">这是一个少量需求和零行为的贫血模型。对演示来说很完美。</p><p translation-origin=\"off\">It's an anemic model with few requirements and no behavior. Perfect for the demo.</p>\n\n<p translation-result=\"on\">TypeScript 编译器为每个 <code>public</code> 构造函数参数生成一个公共字段，在创建新的英雄实例时，自动把参数值赋给这些公共字段。</p><p translation-origin=\"off\">The TypeScript compiler generates a public field for each <code>public</code> constructor parameter and\nautomatically assigns the parameter’s value to that field when you create heroes.</p>\n\n<p translation-result=\"on\"><code>alterEgo</code> 是可选的，调用构造函数时可省略，注意 <code>alterEgo?</code> 中的问号 (?)。</p><p translation-origin=\"off\">The <code>alterEgo</code> is optional, so the constructor lets you omit it; note the question mark (?) in <code>alterEgo?</code>.</p>\n\n<p translation-result=\"on\">可以这样创建新英雄：</p><p translation-origin=\"off\">You can create a new hero like this:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"SkyDog\">\nlet myHero =  new Hero(42, 'SkyDog',\n                       'Fetch any object at any distance',\n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"\n\n</code-example>\n<h2 id=\"create-a-form-component\" translation-result=\"on\">创建表单组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-a-form-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-a-form-component\">Create a form component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-a-form-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 表单分为两部分：基于 HTML 的<em>模板</em>和组件<em>类</em>，用来程序处理数据和用户交互。\n先从组件类开始，是因为它可以简要说明英雄编辑器能做什么。</p><p translation-origin=\"off\">An Angular form has two parts: an HTML-based <em>template</em> and a component <em>class</em>\nto handle data and user interactions programmatically.\nBegin with the class because it states, in brief, what the hero editor can do.</p>\n\n<p translation-result=\"on\">使用 Angular CLI 命令 <a href=\"cli/generate\"><code>ng generate component</code></a> 生成一个名叫 <code>HeroForm</code> 的新组件：</p><p translation-origin=\"off\">Using the Angular CLI command <a href=\"cli/generate\"><code>ng generate component</code></a>, generate a new component named <code>HeroForm</code>:</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate component HeroForm\n\n</code-example>\n<p translation-result=\"on\">内容如下：</p><p translation-origin=\"off\">With this content:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" header=\"src/app/hero-form/hero-form.component.ts (v1)\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero }    from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './hero-form.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  <a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a> = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  // TODO: Remove this when we're <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>\n  get diagnostic() { return JSON.stringify(this.model); }\n}\n\n\n</code-example>\n<p translation-result=\"on\">这个组件没有什么特别的地方，没有表单相关的东西，与之前写过的组件没什么不同。</p><p translation-origin=\"off\">There’s nothing special about this component, nothing form-specific,\nnothing to distinguish it from any component you've written before.</p>\n\n<p translation-result=\"on\">只要用前面章节中学过的 Angular 概念，就可以完全理解这个组件：</p><p translation-origin=\"off\">Understanding this component requires only the Angular concepts covered in previous pages.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 这段代码导入了 Angular 核心库以及你刚刚创建的 <code>Hero</code> 模型。</p><p translation-origin=\"off\">The code imports the Angular core library and the <code>Hero</code> model you just created.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 选择器“hero-form”表示可以用 <code>&#x3C;app-hero-form></code> 标签把这个表单放进父模板。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> selector value of \"app-hero-form\" means you can drop this form in a parent\ntemplate with a <code>&#x3C;app-hero-form></code> tag.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a></code> 属性指向一个独立的 HTML 模板文件。</p><p translation-origin=\"off\">The <code><a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a></code> property points to a separate file for the template HTML.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你定义了一些用来演示的，关于 <code><a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a></code> 和 <code>powers</code> 的模拟数据。</p><p translation-origin=\"off\">You defined dummy data for <code><a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a></code> and <code>powers</code>, as befits a demo.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">接下来，你可以注入一个数据服务，以获取或保存真实的数据，或者把这些属性暴露为输入属性和输出属性（参见<a href=\"guide/template-syntax\">Template Syntax</a>中的<a href=\"guide/template-syntax#inputs-outputs\">输入和输出属性</a>）来绑定到一个父组件。这不是现在需要关心的问题，未来的更改不会影响到这个表单。</p><p translation-origin=\"off\">Down the road, you can inject a data service to get and save real data\nor perhaps expose these properties as inputs and outputs\n(see <a href=\"guide/template-syntax#inputs-outputs\">Input and output properties</a> on the\n<a href=\"guide/template-syntax\">Template Syntax</a> page) for binding to a\nparent component. This is not a concern now and these future changes won't affect the form.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   你添加一个 <code>diagnostic</code> 属性，以返回这个模型的 JSON 形式。在开发过程中，它用于调试，最后清理时会丢弃它。</p><p translation-origin=\"off\">You added a <code>diagnostic</code> property to return a JSON representation of the model.\nIt'll help you see what you're doing during development; you've left yourself a cleanup note to discard it later.</p>\n\n</li>\n</ul>\n<h2 id=\"revise-appmodulets\" translation-result=\"on\">修改 <em>app.module.ts</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#revise-appmodulets\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"revise-appmodulets\">Revise <em>app.module.ts</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#revise-appmodulets\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>app.module.ts</code> 定义了应用的根模块。其中标识即将用到的外部模块，以及声明属于本模块中的组件，例如 <code>HeroFormComponent</code>。</p><p translation-origin=\"off\"><code>app.module.ts</code> defines the application's root module. In it you identify the external modules you'll use in the application\nand declare the components that belong to this module, such as the <code>HeroFormComponent</code>.</p>\n\n<p translation-result=\"on\">因为模板驱动的表单位于它们自己的模块，所以在使用表单之前，需要将 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到应用模块的 <code>imports</code> 数组中。</p><p translation-origin=\"off\">Because template-driven forms are in their own module, you need to add the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the array of\n<code>imports</code> for the application module before you can use forms.</p>\n\n<p translation-result=\"on\">对它做如下修改：</p><p translation-origin=\"off\">Update it with the following:</p>\n\n<code-example path=\"forms/src/app/app.module.ts\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  有两处更改</p><p translation-origin=\"off\">  There are two changes:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p><p translation-origin=\"off\">You import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 <code>ngModule</code> 装饰器的 <code>imports</code> 列表中，这样应用就能访问模板驱动表单的所有特性，包括 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</p><p translation-origin=\"off\">You add the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the list of <code>imports</code> defined in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator. This gives the application\naccess to all of the template-driven forms features, including <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.</p>\n\n</li>\n</ol>\n</div>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">  如果某个组件、指令或管道是属于 <code>imports</code> 中所导入的某个模块的，那就<em>不能再</em>把它再声明到本模块的 <code>declarations</code> 数组中。\n如果它是你自己写的，并且确实属于当前模块，<em>才应该</em>把它声明在 <code>declarations</code> 数组中。</p><p translation-origin=\"off\">  If a component, directive, or pipe belongs to a module in the <code>imports</code> array, ​<em>don't</em>​ re-declare it in the <code>declarations</code> array.\nIf you wrote it and it should belong to this module, ​<em>do</em>​ declare it in the <code>declarations</code> array.</p>\n\n</div>\n<h2 id=\"revise-appcomponenthtml\" translation-result=\"on\">修改 <em>app.component.html</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#revise-appcomponenthtml\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"revise-appcomponenthtml\">Revise <em>app.component.html</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#revise-appcomponenthtml\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>AppComponent</code> 是应用的根组件，<code>HeroFormComponent</code> 将被放在其中。</p><p translation-origin=\"off\"><code>AppComponent</code> is the application's root component. It will host the new <code>HeroFormComponent</code>.</p>\n\n<p translation-result=\"on\">把模板中的内容替换成如下代码：</p><p translation-origin=\"off\">Replace the contents of its template with the following:</p>\n\n<code-example path=\"forms/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&#x3C;app-hero-form>&#x3C;/app-hero-form>\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  这里只做了两处修改。\n<code>template</code> 中只剩下这个新的元素标签，即组件的 <code>selector</code> 属性。这样当应用组件被加载时，就会显示这个英雄表单。\n同样别忘了从类中移除了 <code>name</code> 字段。</p><p translation-origin=\"off\">  There are only two changes.\nThe <code>template</code> is simply the new element tag identified by the component's <code>selector</code> property.\nThis displays the hero form when the application component is loaded.\nDon't forget to remove the <code>name</code> field from the class body as well.</p>\n\n</div>\n<h2 id=\"create-an-initial-html-form-template\" translation-result=\"on\">创建初始 HTML 表单模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-an-initial-html-form-template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-an-initial-html-form-template\">Create an initial HTML form template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-an-initial-html-form-template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">修改模板文件，内容如下：</p><p translation-origin=\"off\">Update the template file with the following contents:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"start\" header=\"src/app/hero-form/hero-form.component.html\">\n&#x3C;div class=\"container\">\n    &#x3C;h1>Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&#x3C;/h1>\n    &#x3C;form>\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"name\">Name&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"name\" required>\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"alterEgo\">Alter Ego&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"alterEgo\">\n      &#x3C;/div>\n\n      &#x3C;button type=\"submit\" class=\"btn btn-success\">Submit&#x3C;/button>\n\n    &#x3C;/form>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">这只是一段普通的旧式 HTML 5 代码。这里有两个 <code>Hero</code> 字段，<code>name</code> 和 <code>alterEgo</code>，供用户输入。</p><p translation-origin=\"off\">The language is simply HTML5. You're presenting two of the <code>Hero</code> fields, <code>name</code> and <code>alterEgo</code>, and\nopening them up for user input in input boxes.</p>\n\n<p translation-result=\"on\"><em>Name</em> <code>&#x3C;input></code> 控件具有 HTML5 的 <code>required</code> 属性；但 <em>Alter Ego</em> <code>&#x3C;input></code> 控件没有，因为 <code>alterEgo</code> 字段是可选的。</p><p translation-origin=\"off\">The <em>Name</em> <code>&#x3C;input></code> control has the HTML5 <code>required</code> attribute;\nthe <em>Alter Ego</em> <code>&#x3C;input></code> control does not because <code>alterEgo</code> is optional.</p>\n\n<p translation-result=\"on\">在底部添加个 <em>Submit</em> 按钮，它还带一些 CSS 样式类。</p><p translation-origin=\"off\">You added a <em>Submit</em> button at the bottom with some classes on it for styling.</p>\n\n<p translation-result=\"on\"><strong>你还没有真正用到 Angular</strong>。没有绑定，没有额外的指令，只有布局。</p><p translation-origin=\"off\"><em>You're not using Angular yet</em>. There are no bindings or extra directives, just layout.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  在模板驱动表单中，你只要导入了 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 就不用对 <code>&#x3C;form></code> 做任何改动来使用 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。接下来你会看到它的原理。</p><p translation-origin=\"off\">  In template driven forms, if you've imported <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>, you don't have to do anything\nto the <code>&#x3C;form></code> tag in order to make use of <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>. Continue on to see how this works.</p>\n\n</div>\n<p translation-result=\"on\"><code>container</code>、<code>form-group</code>、<code>form-control</code> 和 <code>btn</code> 类来自 <a href=\"http://getbootstrap.com/css/\">Twitter Bootstrap</a>。这些类纯粹是装饰品。\nBootstrap 为这个表单提供了一些样式。</p><p translation-origin=\"off\">The <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code> classes\ncome from <a href=\"http://getbootstrap.com/css/\">Twitter Bootstrap</a>. These classes are purely cosmetic.\nBootstrap gives the form a little style.</p>\n\n<div class=\"callout is-important\">\n  <header translation-result=\"on\">Angular 表单不需要任何样式库</header><header translation-origin=\"off\">Angular forms don't require a style library</header>\n  \n<p translation-result=\"on\">  Angular 不需要 <code>container</code>、<code>form-group</code>、<code>form-control</code> 和 <code>btn</code> 类，\n或者外部库的任何样式。Angular 应用可以使用任何 CSS 库…… ，或者啥都不用。</p><p translation-origin=\"off\">  Angular makes no use of the <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code> classes or\nthe styles of any external library. Angular apps can use any CSS library or none at all.</p>\n\n</div>\n<p translation-result=\"on\">要添加样式表，就打开 <code>styles.css</code>，并把下列代码添加到顶部：</p><p translation-origin=\"off\">To add the stylesheet, open <code>styles.css</code> and add the following import line at the top:</p>\n\n<code-example path=\"forms/src/styles.1.css\" header=\"src/styles.css\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n<h2 id=\"add-powers-with-ngfor\" translation-result=\"on\">用 <strong><em>ngFor</em></strong> 添加超能力<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-powers-with-ngfor\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-powers-with-ngfor\">Add powers with <em>*ngFor</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-powers-with-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">英雄必须从认证过的固定列表中选择一项超能力。\n这个列表位于 <code>HeroFormComponent</code> 中。</p><p translation-origin=\"off\">The hero must choose one superpower from a fixed list of agency-approved powers.\nYou maintain that list internally (in <code>HeroFormComponent</code>).</p>\n\n<p translation-result=\"on\">在表单中添加 <code>select</code>，用 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 把 <code>powers</code> 列表绑定到列表选项。\n之前的<a href=\"guide/displaying-data\">显示数据</a>一章中见过 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>。</p><p translation-origin=\"off\">You'll add a <code>select</code> to the\nform and bind the options to the <code>powers</code> list using <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>,\na technique seen previously in the <a href=\"guide/displaying-data\">Displaying Data</a> page.</p>\n\n<p translation-result=\"on\">在 <em>Alter Ego</em> 的紧下方添加如下 HTML：</p><p translation-origin=\"off\">Add the following HTML <em>immediately below</em> the <em>Alter Ego</em> group:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (powers)\" region=\"powers\">\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"power\">Hero Power&#x3C;/label>\n  &#x3C;select class=\"form-control\" id=\"power\" required>\n    &#x3C;option *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\">{{pow}}&#x3C;/option>\n  &#x3C;/select>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\">列表中的每一项超能力都会渲染成 <code>&#x3C;option></code> 标签。\n模板输入变量 <code>pow</code> 在每个迭代指向不同的超能力，使用双花括号插值语法来显示它的名称。</p><p translation-origin=\"off\">This code repeats the <code>&#x3C;option></code> tag for each power in the list of powers.\nThe <code>pow</code> template input variable is a different power in each iteration;\nyou display its name using the interpolation syntax.</p>\n\n<a id=\"ngModel\"></a>\n<h2 id=\"two-way-data-binding-with-ngmodel\" translation-result=\"on\">使用 <em>ngModel</em> 进行双向数据绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#two-way-data-binding-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"two-way-data-binding-with-ngmodel\">Two-way data binding with <em>ngModel</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#two-way-data-binding-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果立即运行此应用，你将会失望。</p><p translation-origin=\"off\">Running the app right now would be disappointing.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/hero-form-3.png\" alt=\"Early form with no binding\" width=\"473\" height=\"294\">\n</div>\n<p translation-result=\"on\">因为还没有绑定到某个英雄，所以看不到任何数据。\n解决方案见前面的章节。\n<a href=\"guide/displaying-data\">显示数据</a>介绍了属性绑定。\n<a href=\"guide/user-input\">用户输入</a>介绍了如何通过事件绑定来监听 DOM 事件，以及如何用显示值更新组件的属性。</p><p translation-origin=\"off\">You don't see hero data because you're not binding to the <code>Hero</code> yet.\nYou know how to do that from earlier pages.\n<a href=\"guide/displaying-data\">Displaying Data</a> teaches property binding.\n<a href=\"guide/user-input\">User Input</a> shows how to listen for DOM events with an\nevent binding and how to update a component property with the displayed value.</p>\n\n<p translation-result=\"on\">现在，需要同时进行显示、监听和提取。</p><p translation-origin=\"off\">Now you need to display, listen, and extract at the same time.</p>\n\n<p translation-result=\"on\">虽然可以在表单中再次使用这些技术。\n但是，这里将介绍个新东西，<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法，使表单绑定到模型的工作变得超级简单。</p><p translation-origin=\"off\">You could use the techniques you already know, but\ninstead you'll use the new <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax, which\nmakes binding the form to the model easy.</p>\n\n<p translation-result=\"on\">找到 <em>Name</em> 对应的 <code>&#x3C;input></code> 标签，并且像这样修改它：</p><p translation-origin=\"off\">Find the <code>&#x3C;input></code> tag for <em>Name</em> and update it like this:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"ngModelName-1\">\n&#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\">\nTODO: remove this: {{model.name}}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  在 input 标签后添加用于诊断的插值，以看清正在发生什么事。\n给自己留个备注，提醒你完成后移除它。</p><p translation-origin=\"off\">  You added a diagnostic interpolation after the input tag\nso you can see what you're doing.\nYou left yourself a note to throw it away when you're done.</p>\n\n</div>\n<p translation-result=\"on\">聚焦到绑定语法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code> 上。</p><p translation-origin=\"off\">Focus on the binding syntax: <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code>.</p>\n\n<p translation-result=\"on\">你需要更多的工作来显示数据。在表单中声明一个模板变量。往 <code>&#x3C;form></code> 标签中加入 <code>#heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"</code>，代码如下：</p><p translation-origin=\"off\">You need one more addition to display the data. Declare\na template variable for the form. Update the <code>&#x3C;form></code> tag with\n<code>#heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"</code> as follows:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"template-variable\">\n&#x3C;form #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\">\n\n</code-example>\n<p translation-result=\"on\"><code>heroForm</code> 变量是一个到 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令的引用，它代表该表单的整体。</p><p translation-origin=\"off\">The variable <code>heroForm</code> is now a reference to the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive that governs the form as a whole.</p>\n\n<div class=\"alert is-helpful\">\n<p>  <a id=\"ngForm\"></a></p>\n<h3 id=\"the-ngform-directive\" translation-result=\"on\"><em>NgForm</em> 指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-ngform-directive\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-ngform-directive\">The <em>NgForm</em> directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-ngform-directive\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">  什么是 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令？\n但你明明没有添加过<a href=\"api/forms/NgForm\">NgForm</a>指令啊！</p><p translation-origin=\"off\">  What <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive?\nYou didn't add an <a href=\"api/forms/NgForm\">NgForm</a> directive.</p>\n\n<p translation-result=\"on\">  Angular 替你做了。Angular 会在 <code>&#x3C;form></code> 标签上自动创建并附加一个 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令。</p><p translation-origin=\"off\">  Angular did. Angular automatically creates and attaches an <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive to the <code>&#x3C;form></code> tag.</p>\n\n<p translation-result=\"on\">  <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令为 <code>form</code> 增补了一些额外特性。\n它会控制那些带有 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令和 <code>name</code> 属性的元素，监听他们的属性（包括其有效性）。\n它还有自己的 <code>valid</code> 属性，这个属性只有在<em>它包含的每个控件</em>都有效时才是真。</p><p translation-origin=\"off\">  The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive supplements the <code>form</code> element with additional features.\nIt holds the controls you created for the elements with an <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive\nand <code>name</code> attribute, and monitors their properties, including their validity.\nIt also has its own <code>valid</code> property which is true only <em>if every contained\ncontrol</em> is valid.</p>\n\n</div>\n<p translation-result=\"on\">如果现在运行这个应用，开始在<em>姓名</em>输入框中键入，添加和删除字符，将看到它们从插值结果中显示和消失。\n某一瞬间，它可能是这样的：</p><p translation-origin=\"off\">If you ran the app now and started typing in the <em>Name</em> input box,\nadding and deleting characters, you'd see them appear and disappear\nfrom the interpolated text.\nAt some point it might look like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/ng-model-in-action.png\" alt=\"ngModel in action\" width=\"500\" height=\"74\">\n</div>\n<p translation-result=\"on\">诊断信息可以证明，数据确实从输入框流动到模型，再反向流动回来。</p><p translation-origin=\"off\">The diagnostic is evidence that values really are flowing from the input box to the model and\nback again.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  <strong>这就是双向数据绑定！</strong>要了解更多信息，参见<a href=\"guide/template-syntax\">模板语法</a>页的<a href=\"guide/template-syntax#ngModel\">使用 NgModel 进行双向绑定</a>。</p><p translation-origin=\"off\">  That's <em>two-way data binding</em>.\nFor more information, see\n<a href=\"guide/template-syntax#ngModel\">Two-way binding with NgModel</a> on the\nthe <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n\n</div>\n<p translation-result=\"on\">注意，<code>&#x3C;input></code> 标签还添加了 <code>name</code> 属性 (attribute)，并设置为 \"name\"，表示英雄的名字。\n使用任何唯一的值都可以，但使用具有描述性的名字会更有帮助。\n当在表单中使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 时，必须要定义 <code>name</code> 属性。</p><p translation-origin=\"off\">Notice that you also added a <code>name</code> attribute to the <code>&#x3C;input></code> tag and set it to \"name\",\nwhich makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful.\nDefining a <code>name</code> attribute is a requirement when using <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> in combination with a form.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  在内部，Angular 创建了一些 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>，并把它们注册到 Angular 附加到 <code>&#x3C;form></code> 标签上的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令。\n注册每个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 时，使用 <code>name</code> 属性值作为键值。欲知详情，参见前面的 <a href=\"guide/forms#ngForm\">NgForm 指令</a>。</p><p translation-origin=\"off\">  Internally, Angular creates <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instances and\nregisters them with an <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive that Angular attached to the <code>&#x3C;form></code> tag.\nEach <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> is registered under the name you assigned to the <code>name</code> attribute.\nRead more in the previous section, <a href=\"guide/forms#ngForm\">The NgForm directive</a>.</p>\n\n</div>\n<p translation-result=\"on\">为<em>第二人格</em>和<em>超能力</em>属性添加类似的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 绑定和 <code>name</code> 属性。\n抛弃输入框的绑定消息，在组件顶部添加到 <code>diagnostic</code> 属性的新绑定。\n这样就能确认双向数据绑定<em>在整个 Hero 模型上</em>都能正常工作了。</p><p translation-origin=\"off\">Add similar <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> bindings and <code>name</code> attributes to <em>Alter Ego</em> and <em>Hero Power</em>.\nYou'll ditch the input box binding message\nand add a new binding (at the top) to the component's <code>diagnostic</code> property.\nThen you can confirm that two-way data binding works <em>for the entire hero model</em>.</p>\n\n<p translation-result=\"on\">修改之后，这个表单的核心是这样的：</p><p translation-origin=\"off\">After revision, the core of the form should look like this:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"ngModel-2\">\n{{diagnostic}}\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"name\">Name&#x3C;/label>\n  &#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\">\n&#x3C;/div>\n\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"alterEgo\">Alter Ego&#x3C;/label>\n  &#x3C;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\">\n&#x3C;/div>\n\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"power\">Hero Power&#x3C;/label>\n  &#x3C;select class=\"form-control\"  id=\"power\"\n          required\n          [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\">\n    &#x3C;option *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\">{{pow}}&#x3C;/option>\n  &#x3C;/select>\n&#x3C;/div>\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<ul>\n<li>\n<p translation-result=\"on\">   每个 input 元素都有 <code>id</code> 属性，<code>label</code> 元素的 <code>for</code> 属性用它来匹配到对应的输入控件。</p><p translation-origin=\"off\">Each input element has an <code>id</code> property that is used by the <code>label</code> element's <code>for</code> attribute\nto match the label to its input control.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 每个 input 元素都有 <code>name</code> 属性，Angular 表单用它注册控件。</p><p translation-origin=\"off\">Each input element has a <code>name</code> property that is required by Angular forms to register the control with the form.</p>\n\n</li>\n</ul>\n</div>\n<p translation-result=\"on\">如果现在运行本应用，修改 Hero 模型的每个属性，表单是这样的：</p><p translation-origin=\"off\">If you run the app now and change every hero model property, the form might display like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/ng-model-in-action-2.png\" alt=\"ngModel in action\" width=\"515\" height=\"377\">\n</div>\n<p translation-result=\"on\">表单顶部的诊断信息反映出所做的一切更改。</p><p translation-origin=\"off\">The diagnostic near the top of the form\nconfirms that all of your changes are reflected in the model.</p>\n\n<p translation-result=\"on\">表单顶部的 <code>{{diagnostic}}</code> 绑定已经完成了它的使命，<strong>删除</strong>它。</p><p translation-origin=\"off\"><em>Delete</em> the <code>{{diagnostic}}</code> binding at the top as it has served its purpose.</p>\n\n<h2 id=\"track-control-state-and-validity-with-ngmodel\" translation-result=\"on\">通过 <strong>ngModel</strong> 跟踪修改状态与有效性验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-state-and-validity-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"track-control-state-and-validity-with-ngmodel\">Track control state and validity with <em>ngModel</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-state-and-validity-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在表单中使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 可以获得比仅使用双向数据绑定更多的控制权。它还会告诉你很多信息：用户碰过此控件吗？它的值变化了吗？数据变得无效了吗？</p><p translation-origin=\"off\">Using <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> in a form gives you more than just two-way data binding. It also tells\nyou if the user touched the control, if the value changed, or if the value became invalid.</p>\n\n<p translation-result=\"on\"><em>NgModel</em> 指令不仅仅跟踪状态。它还使用特定的 Angular CSS 类来更新控件，以反映当前状态。\n可以利用这些 CSS 类来修改控件的外观，显示或隐藏消息。</p><p translation-origin=\"off\">The <em>NgModel</em> directive doesn't just track state; it updates the control with special Angular CSS classes that reflect the state.\nYou can leverage those class names to change the appearance of the control.</p>\n\n<table>\n  <tbody><tr>\n    <th>\n<p translation-result=\"on\">      状态</p><p translation-origin=\"off\">      State</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      为真时的 CSS 类</p><p translation-origin=\"off\">      Class if true</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      为假时的 CSS 类</p><p translation-origin=\"off\">      Class if false</p>\n\n    </th>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      控件被访问过。</p><p translation-origin=\"off\">      The control has been visited.</p>\n\n    </td>\n    <td>\n<p>      <code>ng-touched</code></p>\n    </td>\n    <td>\n<p>      <code>ng-untouched</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      控件的值变化了。</p><p translation-origin=\"off\">      The control's value has changed.</p>\n\n    </td>\n    <td>\n<p>      <code>ng-dirty</code></p>\n    </td>\n    <td>\n<p>      <code>ng-pristine</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p translation-result=\"on\">      控件的值有效。</p><p translation-origin=\"off\">      The control's value is valid.</p>\n\n    </td>\n    <td>\n<p>      <code>ng-valid</code></p>\n    </td>\n    <td>\n<p>      <code>ng-invalid</code></p>\n    </td>\n  </tr>\n</tbody></table>\n<p translation-result=\"on\">往姓名 <code>&#x3C;input></code> 标签上添加名叫 <code>spy</code> 的临时<a href=\"guide/template-syntax#ref-vars\">模板引用变量</a>，\n然后用这个 spy 来显示它上面的所有 CSS 类。</p><p translation-origin=\"off\">Temporarily add a <a href=\"guide/template-syntax#ref-vars\">template reference variable</a> named <code>spy</code>\nto the <em>Name</em> <code>&#x3C;input></code> tag and use it to display the input's CSS classes.</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"ngModelName-2\">\n&#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n  required\n  [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n  #spy>\n&#x3C;br>TODO: remove this: {{spy.className}}\n\n</code-example>\n<p translation-result=\"on\">现在，运行本应用，并让<em>姓名</em>输入框获得焦点。\n然后严格按照下面四个步骤来做：</p><p translation-origin=\"off\">Now run the app and look at the <em>Name</em> input box.\nFollow these steps <em>precisely</em>:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">查看输入框，但别碰它。</p><p translation-origin=\"off\">Look but don't touch.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">点击输入框，然后点击输入框外面。</p><p translation-origin=\"off\">Click inside the name box, then click outside it.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在名字的末尾添加些斜杠。</p><p translation-origin=\"off\">Add slashes to the end of the name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">删除名字。</p><p translation-origin=\"off\">Erase the name.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">动作和它对应的效果如下：</p><p translation-origin=\"off\">The actions and effects are as follows:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/control-state-transitions-anim.gif\" alt=\"Control State Transition\" width=\"540\" height=\"72\">\n</div>\n<p translation-result=\"on\">你会看到下列转换及其类名：</p><p translation-origin=\"off\">You should see the following transitions and class names:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/ng-control-class-changes.png\" alt=\"Control state transitions\" width=\"600\" height=\"311\">\n</div>\n<p translation-result=\"on\">(<code>ng-valid</code> | <code>ng-invalid</code>)这一对是最有趣的部分，因为当数据变得无效时，你希望发出强力的视觉信号，\n还想要标记出必填字段。可以通过加入自定义 CSS 来提供视觉反馈。</p><p translation-origin=\"off\">The <code>ng-valid</code>/<code>ng-invalid</code> pair is the most interesting, because you want to send a\nstrong visual signal when the values are invalid. You also want to mark required fields.\nTo create such visual feedback, add definitions for the <code>ng-*</code> CSS classes.</p>\n\n<p translation-result=\"on\"><strong>删除</strong>模板引用变量 <code>#spy</code> 和 <code>TODO</code>，因为它们已经完成了使命。</p><p translation-origin=\"off\"><em>Delete</em> the <code>#spy</code> template reference variable and the <code>TODO</code> as they have served their purpose.</p>\n\n<h2 id=\"add-custom-css-for-visual-feedback\" translation-result=\"on\">添加用于视觉反馈的自定义 CSS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-custom-css-for-visual-feedback\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-custom-css-for-visual-feedback\">Add custom CSS for visual feedback<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-custom-css-for-visual-feedback\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以在输入框的左侧添加带颜色的竖条，用于标记必填字段和无效输入：</p><p translation-origin=\"off\">You can mark required fields and invalid data at the same time with a colored bar\non the left of the input box:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/validity-required-indicator.png\" alt=\"Invalid Form\" width=\"600\" height=\"171\">\n</div>\n<p translation-result=\"on\">在新建的 <code>forms.css</code> 文件中，添加两个样式来实现这一效果。把这个文件添加到项目中，与 <code>index.html</code> 相邻。</p><p translation-origin=\"off\">You achieve this effect by adding these class definitions to a new <code>forms.css</code> file\nthat you add to the project as a sibling to <code>index.html</code>:</p>\n\n<code-example path=\"forms/src/assets/forms.css\" header=\"src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-example>\n<p translation-result=\"on\">修改 <code>index.html</code> 中的 <code>&#x3C;head></code>，以包含这个样式表：</p><p translation-origin=\"off\">Update the <code>&#x3C;head></code> of <code>index.html</code> to include this style sheet:</p>\n\n<code-example path=\"forms/src/index.html\" header=\"src/index.html (styles)\" region=\"styles\">\n&#x3C;link rel=\"stylesheet\" href=\"assets/forms.css\">\n\n</code-example>\n<h2 id=\"show-and-hide-validation-error-messages\" translation-result=\"on\">显示和隐藏验证错误信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"show-and-hide-validation-error-messages\">Show and hide validation error messages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你还能做的更好。“Name” 输入框是必填的，清空它会让左侧的条变红。这表示<em>某些东西</em>是错的，但用户不知道错在哪里，或者如何纠正。\n可以借助 <code>ng-invalid</code> 类来给出有用的提示。</p><p translation-origin=\"off\">You can improve the form. The <em>Name</em> input box is required and clearing it turns the bar red.\nThat says something is wrong but the user doesn't know <em>what</em> is wrong or what to do about it.\nLeverage the control's state to reveal a helpful message.</p>\n\n<p translation-result=\"on\">当用户删除姓名时，应该是这样的：</p><p translation-origin=\"off\">When the user deletes the name, the form should look like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/forms/name-required-error.png\" alt=\"Name required\" width=\"400\" height=\"108\">\n</div>\n<p translation-result=\"on\">要达到这个效果，在 <code>&#x3C;input></code> 标签中添加：</p><p translation-origin=\"off\">To achieve this effect, extend the <code>&#x3C;input></code> tag with the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/template-syntax#ref-vars\">模板引用变量</a></p><p translation-origin=\"off\">A <a href=\"guide/template-syntax#ref-vars\">template reference variable</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> “is required”消息，放在邻近的 <code>&#x3C;div></code> 元素中，只有当控件无效时，才显示它。</p><p translation-origin=\"off\">The \"<em>is required</em>\" message in a nearby <code>&#x3C;div></code>, which you'll display only if the control is invalid.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下面这个例子中把一条错误信息添加到了 <code>name</code> 输入框中：</p><p translation-origin=\"off\">Here's an example of an error message added to the <em>name</em> input box:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"name-with-error-msg\">\n&#x3C;label for=\"name\">Name&#x3C;/label>\n&#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n       #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\">\n&#x3C;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\">\n  Name is required\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">模板引用变量可以访问模板中输入框的 Angular 控件。\n这里，创建了名叫 <code>name</code> 的变量，并且赋值为 \"ngModel\"。</p><p translation-origin=\"off\">You need a template reference variable to access the input box's Angular control from within the template.\nHere you created a variable called <code>name</code> and gave it the value \"ngModel\".</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  为什么是 “ngModel”？\n指令的 <a href=\"api/core/Directive\">exportAs</a> 属性告诉 Angular 如何链接模板引用变量到指令。\n这里把 <code>name</code> 设置为 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 是因为 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令的 <code>exportAs</code> 属性设置成了 “ngModel”。</p><p translation-origin=\"off\">  Why \"ngModel\"?\nA directive's <a href=\"api/core/Directive\">exportAs</a> property\ntells Angular how to link the reference variable to the directive.\nYou set <code>name</code> to <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> because the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive's <code>exportAs</code> property happens to be \"ngModel\".</p>\n\n</div>\n<p translation-result=\"on\">你把 <code>div</code> 元素的 <code>hidden</code> 属性绑定到 <code>name</code> 控件的属性，这样就可以控制“姓名”字段错误信息的可见性了。</p><p translation-origin=\"off\">You control visibility of the name error message by binding properties of the <code>name</code>\ncontrol to the message <code>&#x3C;div></code> element's <code>hidden</code> property.</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (hidden-error-msg)\" region=\"hidden-error-msg\">\n&#x3C;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\">\n\n</code-example>\n<p translation-result=\"on\">上例中，当控件是有效的 (valid) 或全新的 (pristine) 时，隐藏消息。\n“全新的”意味着从它显示在表单中开始，用户还从未修改过它的值。</p><p translation-origin=\"off\">In this example, you hide the message when the control is valid or pristine;\n\"pristine\" means the user hasn't changed the value since it was displayed in this form.</p>\n\n<p translation-result=\"on\">这种用户体验取决于开发人员的选择。有些人会希望任何时候都显示这条消息。\n如果忽略了 <code>pristine</code> 状态，就会只在值有效时隐藏此消息。\n如果往这个组件中传入全新（空）的英雄，或者无效的英雄，将立刻看到错误信息 —— 虽然你还啥都没做。</p><p translation-origin=\"off\">This user experience is the developer's choice. Some developers want the message to display at all times.\nIf you ignore the <code>pristine</code> state, you would hide the message only when the value is valid.\nIf you arrive in this component with a new (blank) hero or an invalid hero,\nyou'll see the error message immediately, before you've done anything.</p>\n\n<p translation-result=\"on\">有些人会为这种行为感到不安。它们希望只有在用户做出无效的更改时才显示这个消息。\n如果当控件是“全新”状态时也隐藏消息，就能达到这个目的。\n在往表单中添加新英雄时，将看到这种选择的重要性。</p><p translation-origin=\"off\">Some developers want the message to display only when the user makes an invalid change.\nHiding the message while the control is \"pristine\" achieves that goal.\nYou'll see the significance of this choice when you add a new hero to the form.</p>\n\n<p translation-result=\"on\">英雄的<em>第二人格</em>是可选项，所以不用改它。</p><p translation-origin=\"off\">The hero <em>Alter Ego</em> is optional so you can leave that be.</p>\n\n<p translation-result=\"on\">英雄的<em>超能力</em>选项是必填的。\n只要愿意，可以往 <code>&#x3C;select></code> 上添加相同的错误处理。\n但没有必要，这个选择框已经限制了“超能力”只能选有效值。</p><p translation-origin=\"off\">Hero <em>Power</em> selection is required.\nYou can add the same kind of error handling to the <code>&#x3C;select></code> if you want,\nbut it's not imperative because the selection box already constrains the\npower to valid values.</p>\n\n<p translation-result=\"on\">现在，你要在这个表单中添加新的英雄。\n在表单的底部放置“New Hero（新增英雄）”按钮，并把它的点击事件绑定到组件上的 <code>newHero</code> 方法。</p><p translation-origin=\"off\">Now you'll add a new hero in this form.\nPlace a <em>New Hero</em> button at the bottom of the form and bind its click event to a <code>newHero</code> component method.</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-no-reset\" header=\"src/app/hero-form/hero-form.component.html (New Hero button)\">\n&#x3C;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\">New Hero&#x3C;/button>\n\n</code-example>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"new-hero\" header=\"src/app/hero-form/hero-form.component.ts (New Hero method)\">\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n\n</code-example>\n<p translation-result=\"on\">再次运行应用，点击 <em>New Hero</em> 按钮，表单被清空了。\n输入框左侧的<em>必填项</em>竖条是红色的，表示 <code>name</code> 和 <code>power</code> 属性是无效的。\n这可以理解，因为有一些必填字段。\n错误信息是隐藏的，因为表单还是全新的，还没有修改任何东西。</p><p translation-origin=\"off\">Run the application again, click the <em>New Hero</em> button, and the form clears.\nThe <em>required</em> bars to the left of the input box are red, indicating invalid <code>name</code> and <code>power</code> properties.\nThat's understandable as these are required fields.\nThe error messages are hidden because the form is pristine; you haven't changed anything yet.</p>\n\n<p translation-result=\"on\">输入名字，再次点击 <em>New Hero</em> 按钮。\n这次，出现了错误信息！为什么？你不希望显示新（空）的英雄时，出现错误信息。</p><p translation-origin=\"off\">Enter a name and click <em>New Hero</em> again.\nThe app displays a <em>Name is required</em> error message.\nYou don't want error messages when you create a new (empty) hero.\nWhy are you getting one now?</p>\n\n<p translation-result=\"on\">使用浏览器工具审查这个元素就会发现，这个 <em>name</em> 输入框并不是全新的。\n表单记得你在点击 <em>New Hero</em> 前输入的名字。\n更换了英雄对象<em>并不会重置控件的“全新”状态</em>。</p><p translation-origin=\"off\">Inspecting the element in the browser tools reveals that the <em>name</em> input box is <em>no longer pristine</em>.\nThe form remembers that you entered a name before clicking <em>New Hero</em>.\nReplacing the hero object <em>did not restore the pristine state</em> of the form controls.</p>\n\n<p translation-result=\"on\">你必须清除所有标记，在调用 <code>newHero()</code> 方法后调用表单的 <code>reset()</code> 方法即可。</p><p translation-origin=\"off\">You have to clear all of the flags imperatively, which you can do\nby calling the form's <code>reset()</code> method after calling the <code>newHero()</code> method.</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-form-reset\" header=\"src/app/hero-form/hero-form.component.html (Reset the form)\">\n&#x3C;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\">New Hero&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">现在点击“New Hero”重设表单和它的控制标记。</p><p translation-origin=\"off\">Now clicking \"New Hero\" resets both the form and its control flags.</p>\n\n<h2 id=\"submit-the-form-with-ngsubmit\" translation-result=\"on\">使用 <em>ngSubmit</em> 提交该表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"submit-the-form-with-ngsubmit\">Submit the form with <em>ngSubmit</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在填表完成之后，用户还应该能提交这个表单。\n“Submit（提交）”按钮位于表单的底部，它自己不做任何事，但因为有特殊的 type 值 (<code>type=\"submit\"</code>)，所以会触发表单提交。</p><p translation-origin=\"off\">The user should be able to submit this form after filling it in.\nThe <em>Submit</em> button at the bottom of the form\ndoes nothing on its own, but it will\ntrigger a form submit because of its type (<code>type=\"submit\"</code>).</p>\n\n<p translation-result=\"on\">现在这样仅仅触发“表单提交”是没用的。\n要让它有用，就要把该表单的 <code>ngSubmit</code> 事件属性绑定到英雄表单组件的 <code>onSubmit()</code> 方法上：</p><p translation-origin=\"off\">A \"form submit\" is useless at the moment.\nTo make it useful, bind the form's <code>ngSubmit</code> event property\nto the hero form component's <code>onSubmit()</code> method:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (ngSubmit)\" region=\"ngSubmit\">\n&#x3C;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\">\n\n</code-example>\n<p translation-result=\"on\">你已经定义了一个模板引用变量 <code>#heroForm</code>，并且把赋值为“ngForm”。\n现在，就可以在“Submit”按钮中访问这个表单了。</p><p translation-origin=\"off\">You'd already defined a template reference variable,\n<code>#heroForm</code>, and initialized it with the value \"ngForm\".\nNow, use that variable to access the form with the Submit button.</p>\n\n<p translation-result=\"on\">你要把表单的总体有效性通过 <code>heroForm</code> 变量绑定到此按钮的 <code>disabled</code> 属性上，代码如下：</p><p translation-origin=\"off\">You'll bind the form's overall validity via\nthe <code>heroForm</code> variable to the button's <code>disabled</code> property\nusing an event binding. Here's the code:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (submit-button)\" region=\"submit-button\">\n&#x3C;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\">Submit&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">重新运行应用。表单打开时，状态是有效的，按钮是可用的。</p><p translation-origin=\"off\">If you run the application now, you find that the button is enabled—although\nit doesn't do anything useful yet.</p>\n\n<p translation-result=\"on\">现在，如果你删除<em>姓名</em>，就会违反“必填姓名”规则，就会像以前那样显示出错误信息。同时，Submit 按钮也被禁用了。</p><p translation-origin=\"off\">Now if you delete the Name, you violate the \"required\" rule, which\nis duly noted in the error message.\nThe <em>Submit</em> button is also disabled.</p>\n\n<p translation-result=\"on\">没感觉吗？再想一会儿。如果没有 Angular <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的帮助，又该怎么让按钮的禁用/启用状态和表单的有效性关联起来呢？</p><p translation-origin=\"off\">Not impressed?  Think about it for a moment. What would you have to do to\nwire the button's enable/disabled state to the form's validity without Angular's help?</p>\n\n<p translation-result=\"on\">对你来说，它就是这么简单：</p><p translation-origin=\"off\">For you, it was as simple as this:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">定义模板引用变量，放在（强化过的）form 元素上</p><p translation-origin=\"off\">Define a template reference variable on the (enhanced) form element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">从很多行之外的按钮上引用这个变量。</p><p translation-origin=\"off\">Refer to that variable in a button many lines away.</p>\n\n</li>\n</ol>\n<h2 id=\"toggle-two-form-regions-extra-credit\" translation-result=\"on\">切换两个表单区域（额外的奖励）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#toggle-two-form-regions-extra-credit\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"toggle-two-form-regions-extra-credit\">Toggle two form regions (extra credit)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#toggle-two-form-regions-extra-credit\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">提交表单还是不够激动人心。</p><p translation-origin=\"off\">Submitting the form isn't terribly dramatic at the moment.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  对演示来说，这个收场很平淡的。老实说，即使让它更出彩，也无法教给你任何关于表单的新知识。\n但这是练习新学到的绑定技能的好机会。\n如果你不感兴趣，可以跳到本章的总结部分。</p><p translation-origin=\"off\">  An unsurprising observation for a demo. To be honest,\njazzing it up won't teach you anything new about forms.\nBut this is an opportunity to exercise some of your newly won\nbinding skills.\nIf you aren't interested, skip to this page's conclusion.</p>\n\n</div>\n<p translation-result=\"on\">来实现一些更炫的视觉效果吧。\n隐藏掉数据输入框，显示一些别的东西。</p><p translation-origin=\"off\">For a more strikingly visual effect,\nhide the data entry area and display something else.</p>\n\n<p translation-result=\"on\">先把表单包裹进 <code>&#x3C;div></code> 中，再把它的 <code>hidden</code> 属性绑定到 <code>HeroFormComponent.submitted</code> 属性。</p><p translation-origin=\"off\">Wrap the form in a <code>&#x3C;div></code> and bind\nits <code>hidden</code> property to the <code>HeroFormComponent.submitted</code> property.</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"edit-div\">\n&#x3C;div [hidden]=\"submitted\">\n  &#x3C;h1>Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&#x3C;/h1>\n  &#x3C;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\">\n\n     &#x3C;!-- ... all of the form ... -->\n\n  &#x3C;/form>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">主表单从一开始就是可见的，因为 <code>submitted</code> 属性是 false，直到提交了这个表单。\n来自 <code>HeroFormComponent</code> 的代码片段证实了这一点：</p><p translation-origin=\"off\">The main form is visible from the start because the\n<code>submitted</code> property is false until you submit the form,\nas this fragment from the <code>HeroFormComponent</code> shows:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" header=\"src/app/hero-form/hero-form.component.ts (submitted)\" region=\"submitted\">\nsubmitted = false;\n\nonSubmit() { this.submitted = true; }\n\n</code-example>\n<p translation-result=\"on\">当点击 Submit 按钮时，<code>submitted</code> 标志会变成 true，并且表单像预想中一样消失了。</p><p translation-origin=\"off\">When you click the <em>Submit</em> button, the <code>submitted</code> flag becomes true and the form disappears\nas planned.</p>\n\n<p translation-result=\"on\">现在，当表单处于已提交状态时，需要显示一些别的东西。\n在刚刚写的 <code>&#x3C;div></code> 包装下方，添加下列 HTML 语句：</p><p translation-origin=\"off\">Now the app needs to show something else while the form is in the submitted state.\nAdd the following HTML below the <code>&#x3C;div></code> wrapper you just wrote:</p>\n\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" header=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"submitted\">\n&#x3C;div [hidden]=\"!submitted\">\n  &#x3C;h2>You submitted the following:&#x3C;/h2>\n  &#x3C;div class=\"row\">\n    &#x3C;div class=\"col-xs-3\">Name&#x3C;/div>\n    &#x3C;div class=\"col-xs-9\">{{ model.name }}&#x3C;/div>\n  &#x3C;/div>\n  &#x3C;div class=\"row\">\n    &#x3C;div class=\"col-xs-3\">Alter Ego&#x3C;/div>\n    &#x3C;div class=\"col-xs-9\">{{ model.alterEgo }}&#x3C;/div>\n  &#x3C;/div>\n  &#x3C;div class=\"row\">\n    &#x3C;div class=\"col-xs-3\">Power&#x3C;/div>\n    &#x3C;div class=\"col-xs-9\">{{ model.power }}&#x3C;/div>\n  &#x3C;/div>\n  &#x3C;br>\n  &#x3C;button class=\"btn btn-primary\" (click)=\"submitted=false\">Edit&#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">英雄又出现了，它通过插值绑定显示为只读内容。\n这一小段 HTML 只在组件处于已提交状态时才会显示。</p><p translation-origin=\"off\">There's the hero again, displayed read-only with interpolation bindings.\nThis <code>&#x3C;div></code> appears only while the component is in the submitted state.</p>\n\n<p translation-result=\"on\">这段 HTML 包含一个 “Edit（编辑）”按钮，它的 click 事件绑定到了一个用于清除 <code>submitted</code> 标志的表达式。</p><p translation-origin=\"off\">The HTML includes an <em>Edit</em> button whose click event is bound to an expression\nthat clears the <code>submitted</code> flag.</p>\n\n<p translation-result=\"on\">当点 <em>Edit</em> 按钮时，这个只读块消失了，可编辑的表单重新出现了。</p><p translation-origin=\"off\">When you click the <em>Edit</em> button, this block disappears and the editable form reappears.</p>\n\n<h2 id=\"summary\" translation-result=\"on\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本章讨论的 Angular 表单技术利用了下列框架特性来支持数据修改、验证和更多操作：</p><p translation-origin=\"off\">The Angular form discussed in this page takes advantage of the following\nframework features to provide support for data modification, validation, and more:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> Angular HTML 表单模板。</p><p translation-origin=\"off\">An Angular HTML form template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 带有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的表单组件类。</p><p translation-origin=\"off\">A form component class with a <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 通过绑定到 <code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> 事件属性来处理表单提交。</p><p translation-origin=\"off\">Handling form submission by binding to the <code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> event property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 模板引用变量，例如 <code>#heroForm</code> 和 <code>#name</code>。</p><p translation-origin=\"off\">Template-reference variables such as <code>#heroForm</code> and <code>#name</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法用来实现双向数据绑定。</p><p translation-origin=\"off\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax for two-way data binding.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>name</code> 属性的用途是有效性验证和对表单元素的变更进行追踪。</p><p translation-origin=\"off\">The use of <code>name</code> attributes for validation and form-element change tracking.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 指向 input 控件的引用变量上的 <code>valid</code> 属性，可用于检查控件是否有效、是否显示/隐藏错误信息。</p><p translation-origin=\"off\">The reference variable’s <code>valid</code> property on input controls to check if a control is valid and show/hide error messages.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 通过绑定到 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的有效性状态，控制 <em>Submit</em> 按钮的禁用状态。</p><p translation-origin=\"off\">Controlling the <em>Submit</em> button's enabled state by binding to <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> validity.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 定制 CSS 类来给用户提供无效控件的视觉反馈。</p><p translation-origin=\"off\">Custom CSS classes that provide visual feedback to users about invalid controls.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下面是该应用最终版本的代码：</p><p translation-origin=\"off\">Here’s the code for the final version of the application:</p>\n\n<code-tabs>\n\n  <code-pane header=\"hero-form/hero-form.component.ts\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero }    from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './hero-form.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  <a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a> = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"hero-form/hero-form.component.html\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"final\">\n&#x3C;div class=\"container\">\n  &#x3C;div [hidden]=\"submitted\">\n    &#x3C;h1>Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&#x3C;/h1>\n    &#x3C;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\">\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"name\">Name&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n               #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\">\n        &#x3C;div [hidden]=\"name.valid || name.pristine\"\n             class=\"alert alert-danger\">\n          Name is required\n        &#x3C;/div>\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"alterEgo\">Alter Ego&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\">\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"power\">Hero Power&#x3C;/label>\n        &#x3C;select class=\"form-control\" id=\"power\"\n                required\n                [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"\n                #power=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\">\n          &#x3C;option *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\">{{pow}}&#x3C;/option>\n        &#x3C;/select>\n        &#x3C;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\">\n          Power is required\n        &#x3C;/div>\n      &#x3C;/div>\n\n      &#x3C;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\">Submit&#x3C;/button>\n      &#x3C;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\">New Hero&#x3C;/button>\n    &#x3C;/form>\n  &#x3C;/div>\n\n  &#x3C;div [hidden]=\"!submitted\">\n    &#x3C;h2>You submitted the following:&#x3C;/h2>\n    &#x3C;div class=\"row\">\n      &#x3C;div class=\"col-xs-3\">Name&#x3C;/div>\n      &#x3C;div class=\"col-xs-9\">{{ model.name }}&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;div class=\"row\">\n      &#x3C;div class=\"col-xs-3\">Alter Ego&#x3C;/div>\n      &#x3C;div class=\"col-xs-9\">{{ model.alterEgo }}&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;div class=\"row\">\n      &#x3C;div class=\"col-xs-3\">Power&#x3C;/div>\n      &#x3C;div class=\"col-xs-9\">{{ model.power }}&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;br>\n    &#x3C;button class=\"btn btn-primary\" (click)=\"submitted=false\">Edit&#x3C;/button>\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-pane>\n\n  <code-pane header=\"hero.ts\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-pane>\n\n  <code-pane header=\"app.module.ts\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"app.component.html\" path=\"forms/src/app/app.component.html\">\n&#x3C;app-hero-form>&#x3C;/app-hero-form>\n\n\n</code-pane>\n\n  <code-pane header=\"app.component.ts\" path=\"forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './app.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane header=\"main.ts\" path=\"forms/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane header=\"forms.css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-pane>\n\n</code-tabs>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/form-validation\n - guide/forms-overview\n - guide/glossary\n - guide/npm-packages\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/ApplicationInitStatus#done\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/Directive\n - api/core/NgModule\n - api/core/enableProdMode\n - api/forms/Form\n - api/forms/FormControl\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgForm#ngSubmit\n - api/forms/NgModel\n - api/forms/NgModel#model\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli/generate\n - guide/displaying-data\n - guide/forms#add-custom-css-for-visual-feedback\n - guide/forms#add-powers-with-ngfor\n - guide/forms#create-a-form-component\n - guide/forms#create-an-initial-html-form-template\n - guide/forms#create-the-hero-model-class\n - guide/forms#introduction-to-template-driven-forms\n - guide/forms#ngForm\n - guide/forms#revise-appcomponenthtml\n - guide/forms#revise-appmodulets\n - guide/forms#setup\n - guide/forms#show-and-hide-validation-error-messages\n - guide/forms#submit-the-form-with-ngsubmit\n - guide/forms#summary\n - guide/forms#template-driven-forms\n - guide/forms#template-driven-forms-1\n - guide/forms#the-ngform-directive\n - guide/forms#toggle-two-form-regions-extra-credit\n - guide/forms#track-control-state-and-validity-with-ngmodel\n - guide/forms#two-way-data-binding-with-ngmodel\n - guide/template-syntax\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#ngModel\n - guide/template-syntax#ref-vars\n - guide/user-input\n - http://getbootstrap.com/css/\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/forms.md?message=docs%3A%20请简述你的修改...\n-->"
}