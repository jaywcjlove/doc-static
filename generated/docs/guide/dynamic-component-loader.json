{
  "id": "guide/dynamic-component-loader",
  "title": "Dynamic component loader",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/dynamic-component-loader.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"dynamic-component-loader\" translation-result=\"on\">动态组件加载器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loader\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"dynamic-component-loader\">Dynamic component loader<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loader\"><i class=\"material-icons\">link</i></a></h1>\n\n<div class=\"alert is-warning\">\n<p>译注：本页讲的是一个用于显示广告的范例，而部分广告拦截器插件，比如 Chrome 的 AdGuard，可能会破坏其工作逻辑，因此，请在本页关闭那些插件。</p>\n</div>\n<p translation-result=\"on\">组件的模板不会永远是固定的。应用可能会需要在运行期间加载一些新的组件。</p><p translation-origin=\"off\">Component templates are not always fixed. An application may need to load new components at runtime.</p>\n\n<p translation-result=\"on\">这本烹饪书为你展示如何使用 <code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code> 来动态添加组件。</p><p translation-origin=\"off\">This cookbook shows you how to use <code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code> to add components dynamically.</p>\n\n<p translation-result=\"on\">到<live-example name=\"dynamic-component-loader\"></live-example>查看本烹饪书的源码。</p><p translation-origin=\"off\">See the <live-example name=\"dynamic-component-loader\"></live-example>\nof the code in this cookbook.</p>\n\n<a id=\"dynamic-loading\"></a>\n<h2 id=\"dynamic-component-loading\" translation-result=\"on\">动态组件加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"dynamic-component-loading\">Dynamic component loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面的例子展示了如何构建动态广告条。</p><p translation-origin=\"off\">The following example shows how to build a dynamic ad banner.</p>\n\n<p translation-result=\"on\">英雄管理局正在计划一个广告活动，要在广告条中显示一系列不同的广告。几个不同的小组可能会频繁加入新的广告组件。\n再用只支持静态组件结构的模板显然是不现实的。</p><p translation-origin=\"off\">The hero agency is planning an ad campaign with several different\nads cycling through the banner. New ad components are added\nfrequently by several different teams. This makes it impractical\nto use a template with a static component structure.</p>\n\n<p translation-result=\"on\">你需要一种新的组件加载方式，它不需要在广告条组件的模板中引用固定的组件。</p><p translation-origin=\"off\">Instead, you need a way to load a new component without a fixed\nreference to the component in the ad banner's template.</p>\n\n<p translation-result=\"on\">Angular 自带的 API 就能支持动态加载组件。</p><p translation-origin=\"off\">Angular comes with its own API for loading components dynamically.</p>\n\n<a id=\"directive\"></a>\n<h2 id=\"the-anchor-directive\" translation-result=\"on\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-anchor-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-anchor-directive\">The anchor directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-anchor-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在添加组件之前，先要定义一个锚点来告诉 Angular 要把组件插入到什么地方。</p><p translation-origin=\"off\">Before you can add components you have to define an anchor point\nto tell Angular where to insert components.</p>\n\n<p translation-result=\"on\">广告条使用一个名叫 <code>AdDirective</code> 的辅助指令来在模板中标记出有效的插入点。</p><p translation-origin=\"off\">The ad banner uses a helper directive called <code>AdDirective</code> to\nmark valid insertion points in the template.</p>\n\n<code-example path=\"dynamic-component-loader/src/app/ad.directive.ts\" header=\"src/app/ad.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[ad-host]',\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n}\n\n\n\n</code-example>\n<p translation-result=\"on\"><code>AdDirective</code> 注入了 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 来获取对容器视图的访问权，这个容器就是那些动态加入的组件的宿主。</p><p translation-origin=\"off\"><code>AdDirective</code> injects <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> to gain access to the view\ncontainer of the element that will host the dynamically added component.</p>\n\n<p translation-result=\"on\">在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器中，要注意选择器的名称：<code>ad-host</code>，它就是你将应用到元素上的指令。下一节会展示该如何做。</p><p translation-origin=\"off\">In the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator, notice the selector name, <code>ad-host</code>;\nthat's what you use to apply the directive to the element.\nThe next section shows you how.</p>\n\n<a id=\"loading-components\"></a>\n<h2 id=\"loading-components\" translation-result=\"on\">加载组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#loading-components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"loading-components\">Loading components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#loading-components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">广告条的大部分实现代码都在 <code>ad-banner.component.ts</code> 中。\n为了让这个例子简单点，HTML 被直接放在了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>template</code> 属性中。</p><p translation-origin=\"off\">Most of the ad banner implementation is in <code>ad-banner.component.ts</code>.\nTo keep things simple in this example, the HTML is in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\ndecorator's <code>template</code> property as a template string.</p>\n\n<p translation-result=\"on\"><code>&#x3C;ng-template></code> 元素就是刚才制作的指令将应用到的地方。\n要应用 <code>AdDirective</code>，回忆一下来自 <code>ad.directive.ts</code> 的选择器 <code>ad-host</code>。把它应用到 <code>&#x3C;ng-template></code>（不用带方括号）。\n这下，Angular 就知道该把组件动态加载到哪里了。</p><p translation-origin=\"off\">The <code>&#x3C;ng-template></code> element is where you apply the directive you just made.\nTo apply the <code>AdDirective</code>, recall the selector from <code>ad.directive.ts</code>,\n<code>ad-host</code>. Apply that to <code>&#x3C;ng-template></code> without the square brackets. Now Angular knows\nwhere to dynamically load components.</p>\n\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"ad-host\" header=\"src/app/ad-banner.component.ts (template)\">\ntemplate: `\n            &#x3C;div class=\"ad-banner-example\">\n              &#x3C;h3>Advertisements&#x3C;/h3>\n              &#x3C;ng-template ad-host>&#x3C;/ng-template>\n            &#x3C;/div>\n          `\n\n</code-example>\n<p translation-result=\"on\"><code>&#x3C;ng-template></code> 元素是动态加载组件的最佳选择，因为它不会渲染任何额外的输出。</p><p translation-origin=\"off\">The <code>&#x3C;ng-template></code> element is a good choice for dynamic components\nbecause it doesn't render any additional output.</p>\n\n<a id=\"resolving-components\"></a>\n<h2 id=\"resolving-components\" translation-result=\"on\">解析组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#resolving-components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"resolving-components\">Resolving components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#resolving-components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">深入看看 <code>ad-banner.component.ts</code> 中的方法。</p><p translation-origin=\"off\">Take a closer look at the methods in <code>ad-banner.component.ts</code>.</p>\n\n<p translation-result=\"on\"><code>AdBannerComponent</code> 接收一个 <code>AdItem</code> 对象的数组作为输入，它最终来自 <code>AdService</code>。\n<code>AdItem</code> 对象指定要加载的组件类，以及绑定到该组件上的任意数据。\n<code>AdService</code> 可以返回广告活动中的那些广告。</p><p translation-origin=\"off\"><code>AdBannerComponent</code> takes an array of <code>AdItem</code> objects as input,\nwhich ultimately comes from <code>AdService</code>.  <code>AdItem</code> objects specify\nthe type of component to load and any data to bind to the\ncomponent.<code>AdService</code> returns the actual ads making up the ad campaign.</p>\n\n<p translation-result=\"on\">给 <code>AdBannerComponent</code> 传入一个组件数组可以在模板中放入一个广告的动态列表，而不用写死在模板中。</p><p translation-origin=\"off\">Passing an array of components to <code>AdBannerComponent</code> allows for a\ndynamic list of ads without static elements in the template.</p>\n\n<p translation-result=\"on\">通过 <code>getAds()</code> 方法，<code>AdBannerComponent</code> 可以循环遍历 <code>AdItems</code> 的数组，并且每三秒调用一次 <code>loadComponent()</code> 来加载新组件。</p><p translation-origin=\"off\">With its <code>getAds()</code> method, <code>AdBannerComponent</code> cycles through the array of <code>AdItems</code>\nand loads a new component every 3 seconds by calling <code>loadComponent()</code>.</p>\n\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"class\" header=\"src/app/ad-banner.component.ts (excerpt)\">\nexport class AdBannerComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() ads: AdItem[];\n  currentAdIndex = -1;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(AdDirective, {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) adHost: AdDirective;\n  interval: any;\n\n  constructor(private componentFactoryResolver: <a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a>) { }\n\n  ngOnInit() {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);\n  }\n\n  loadComponent() {\n    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;\n    const adItem = this.ads[this.currentAdIndex];\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);\n\n    const viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent(componentFactory);\n    (&#x3C;AdComponent>componentRef.instance).data = adItem.data;\n  }\n\n  getAds() {\n    this.interval = setInterval(() => {\n      this.loadComponent();\n    }, 3000);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">这里的 <code>loadComponent()</code> 方法很重要。\n来一步步看看。首先，它选取了一个广告。</p><p translation-origin=\"off\">The <code>loadComponent()</code> method is doing a lot of the heavy lifting here.\nTake it step by step. First, it picks an ad.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong><code>loadComponent()</code> 如何选择广告</strong></p><p translation-origin=\"off\"><strong>How <em>loadComponent()</em> chooses an ad</strong></p>\n\n<p translation-result=\"on\"><code>loadComponent()</code> 方法使用某种算法选择了一个广告。</p><p translation-origin=\"off\">The <code>loadComponent()</code> method chooses an ad using some math.</p>\n\n<p translation-result=\"on\">（译注：循环选取算法）首先，它把 <code>currentAdIndex</code> 递增一，然后用它除以 <code>AdItem</code> 数组长度的<em>余数</em>作为新的 <code>currentAdIndex</code> 的值，\n最后用这个值来从数组中选取一个 <code>adItem</code>。</p><p translation-origin=\"off\">First, it sets the <code>currentAdIndex</code> by taking whatever it\ncurrently is plus one, dividing that by the length of the <code>AdItem</code> array, and\nusing the <em>remainder</em> as the new <code>currentAdIndex</code> value. Then, it uses that\nvalue to select an <code>adItem</code> from the array.</p>\n\n</div>\n<p translation-result=\"on\">在 <code>loadComponent()</code> 选取了一个广告之后，它使用 <code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code> 来为每个具体的组件解析出一个 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>。\n然后 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 会为每一个组件创建一个实例。</p><p translation-origin=\"off\">After <code>loadComponent()</code> selects an ad, it uses <code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code>\nto resolve a <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> for each specific component.\nThe <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> then creates an instance of each component.</p>\n\n<p translation-result=\"on\">接下来，你要把 <code>viewContainerRef</code> 指向这个组件的现有实例。但你怎么才能找到这个实例呢？\n很简单，因为它指向了 <code>adHost</code>，而这个 <code>adHost</code> 就是你以前设置过的指令，用来告诉 Angular 该把动态组件插入到什么位置。</p><p translation-origin=\"off\">Next, you're targeting the <code>viewContainerRef</code> that\nexists on this specific instance of the component. How do you know it's\nthis specific instance? Because it's referring to <code>adHost</code> and <code>adHost</code> is the\ndirective you set up earlier to tell Angular where to insert dynamic components.</p>\n\n<p translation-result=\"on\">回忆一下，<code>AdDirective</code> 曾在它的构造函数中注入了一个 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>。\n因此这个指令可以访问到这个你打算用作动态组件宿主的元素。</p><p translation-origin=\"off\">As you may recall, <code>AdDirective</code> injects <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> into its constructor.\nThis is how the directive accesses the element that you want to use to host the dynamic component.</p>\n\n<p translation-result=\"on\">要把这个组件添加到模板中，你可以调用 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createComponent()</code>。</p><p translation-origin=\"off\">To add the component to the template, you call <code>createComponent()</code> on <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>.</p>\n\n<p translation-result=\"on\"><code>createComponent()</code> 方法返回一个引用，指向这个刚刚加载的组件。\n使用这个引用就可以与该组件进行交互，比如设置它的属性或调用它的方法。</p><p translation-origin=\"off\">The <code>createComponent()</code> method returns a reference to the loaded component.\nUse that reference to interact with the component by assigning to its properties or calling its methods.</p>\n\n<a id=\"selector-references\"></a>\n<h4 id=\"selector-references\" translation-result=\"on\">对选择器的引用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#selector-references\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"selector-references\">Selector references<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#selector-references\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">通常，Angular 编译器会为模板中所引用的每个组件都生成一个 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 类。\n但是，对于动态加载的组件，模板中不会出现对它们的选择器的引用。</p><p translation-origin=\"off\">Generally, the Angular compiler generates a <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>\nfor any component referenced in a template. However, there are\nno selector references in the templates for\ndynamically loaded components since they load at runtime.</p>\n\n<p translation-result=\"on\">要想确保编译器照常生成工厂类，就要把这些动态加载的组件添加到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>entryComponents</code> 数组中：</p><p translation-origin=\"off\">To ensure that the compiler still generates a factory,\nadd dynamically loaded components to the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>'s <code>entryComponents</code> array:</p>\n\n<code-example path=\"dynamic-component-loader/src/app/app.module.ts\" region=\"entry-components\" header=\"src/app/app.module.ts (entry components)\">\nentryComponents: [ HeroJobAdComponent, HeroProfileComponent ],\n\n</code-example>\n<a id=\"common-interface\"></a>\n<h2 id=\"the-adcomponent-interface\" translation-result=\"on\">公共的 <code>AdComponent</code> 接口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-adcomponent-interface\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-adcomponent-interface\">The <em>AdComponent</em> interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-adcomponent-interface\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在广告条中，所有组件都实现了一个公共接口 <code>AdComponent</code>，它定义了一个标准化的 API，来把数据传给组件。</p><p translation-origin=\"off\">In the ad banner, all components implement a common <code>AdComponent</code> interface to\nstandardize the API for passing data to the components.</p>\n\n<p translation-result=\"on\">下面就是两个范例组件及其 <code>AdComponent</code> 接口：</p><p translation-origin=\"off\">Here are two sample components and the <code>AdComponent</code> interface for reference:</p>\n\n<code-tabs>\n\n  <code-pane header=\"hero-job-ad.component.ts\" path=\"dynamic-component-loader/src/app/hero-job-ad.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { AdComponent }      from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &#x3C;div class=\"job-ad\">\n      &#x3C;h4>{{data.headline}}&#x3C;/h4>\n\n      {{data.body}}\n    &#x3C;/div>\n  `\n})\nexport class HeroJobAdComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n\n}\n\n\n\n</code-pane>\n\n  <code-pane header=\"hero-profile.component.ts\" path=\"dynamic-component-loader/src/app/hero-profile.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> }  from '@angular/core';\n\nimport { AdComponent }       from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &#x3C;div class=\"hero-profile\">\n      &#x3C;h3>Featured Hero Profile&#x3C;/h3>\n      &#x3C;h4>{{data.name}}&#x3C;/h4>\n\n      &#x3C;p>{{data.bio}}&#x3C;/p>\n\n      &#x3C;strong>Hire this hero today!&#x3C;/strong>\n    &#x3C;/div>\n  `\n})\nexport class HeroProfileComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n}\n\n\n\n\n</code-pane>\n\n  <code-pane header=\"ad.component.ts\" path=\"dynamic-component-loader/src/app/ad.component.ts\">\nexport interface AdComponent {\n  data: any;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"final-ad-baner\"></a>\n<h2 id=\"final-ad-banner\" translation-result=\"on\">最终的广告栏<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#final-ad-banner\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-ad-banner\">Final ad banner<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#final-ad-banner\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"> 最终的广告栏是这样的：</p><p translation-origin=\"off\"> The final ad banner looks like this:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/dynamic-component-loader/ads-example.gif\" alt=\"Ads\" width=\"480\" height=\"222\">\n</div>\n<p translation-result=\"on\">参见<live-example name=\"dynamic-component-loader\"></live-example>。</p><p translation-origin=\"off\">See the <live-example name=\"dynamic-component-loader\"></live-example>.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - guide/elements\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/Directive\n - api/core/Input\n - api/core/NgModule\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - api/upgrade/static\n - guide/dynamic-component-loader#dynamic-component-loader\n - guide/dynamic-component-loader#dynamic-component-loading\n - guide/dynamic-component-loader#final-ad-banner\n - guide/dynamic-component-loader#loading-components\n - guide/dynamic-component-loader#resolving-components\n - guide/dynamic-component-loader#selector-references\n - guide/dynamic-component-loader#the-adcomponent-interface\n - guide/dynamic-component-loader#the-anchor-directive\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/dynamic-component-loader.md?message=docs%3A%20请简述你的修改...\n-->"
}