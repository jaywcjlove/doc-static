{
  "id": "guide/elements",
  "title": "Angular 元素（Elements）概览",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/elements.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"angular-elements-overview\">Angular elements overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#angular-elements-overview\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"angular-元素elements概览\">Angular 元素（Elements）概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#angular-元素elements概览\"><i class=\"material-icons\">link</i></a></h1>\n<p><em>Angular elements</em> are Angular components packaged as <em>custom elements</em> (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way.</p>\n<p><em>Angular 元素</em>就是打包成<em>自定义元素</em>的 Angular 组件。所谓自定义元素就是一套与具体框架无关的用于定义新 HTML 元素的 Web 标准。</p>\n<div class=\"alert is-helpful\">\n<p>For the sample application that this page describes, see the <live-example></live-example>.</p>\n<p>这里所说的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<p><a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements\">Custom elements</a> are a Web Platform feature currently supported by Chrome, Edge (Chromium-based), Firefox, Opera, and Safari, and available in other browsers through polyfills (see <a href=\"guide/elements#browser-support\">Browser Support</a>).\nA custom element extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code.\nThe browser maintains a <code>CustomElementRegistry</code> of defined custom elements, which maps an instantiable JavaScript class to an HTML tag.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements\">自定义元素</a>这项特性目前受到了 Chrome、Edge（基于 Chromium 的版本）、Opera 和 Safari 的支持，在其它浏览器中也能通过腻子脚本（参阅<a href=\"guide/elements#browser-support\">浏览器支持</a>）加以支持。\n自定义元素扩展了 HTML，它允许你定义一个由 JavaScript 代码创建和控制的标签。\n浏览器会维护一个自定义元素的注册表 <code>CustomElementRegistry</code>，它把一个可实例化的 JavaScript 类映射到 HTML 标签上。</p>\n<p>The <code>@angular/elements</code> package exports a <code><a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>()</code> API that provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</p>\n<p><code>@angular/elements</code> 包导出了一个 <code><a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>()</code> API，它在 Angular 组件接口与变更检测功能和内置 DOM API 之间建立了一个桥梁。</p>\n<p>Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser.\nCreating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding built-in HTML equivalents.</p>\n<p>把组件转换成自定义元素可以让所有所需的 Angular 基础设施都在浏览器中可用。\n创建自定义元素的方式简单直观，它会自动把你组件定义的视图连同变更检测与数据绑定等 Angular 的功能映射为相应的内置 HTML 等价物。</p>\n<div class=\"alert is-helpful\">\n<p>We are working on custom elements that can be used by web apps built on other frameworks.\nA minimal, self-contained version of the Angular framework is injected as a service to support the component's change-detection and data-binding functionality.\nFor more about the direction of development, check out this <a href=\"https://www.youtube.com/watch?v=Z1gLFPLVJjY&#x26;t=4s\">video presentation</a>.</p>\n<p>我们正在持续开发自定义元素功能，让它们可以用在由其它框架所构建的 Web 应用中。\nAngular 框架的一个小型的、自包含的版本将会作为服务注入进去，以提供组件的变更检测和数据绑定功能。\n要了解这个开发方向的更多内容，参阅<a href=\"https://www.youtube.com/watch?v=Z1gLFPLVJjY&#x26;t=4s\">这个视频演讲</a>。</p>\n</div>\n<h2 id=\"using-custom-elements\">Using custom elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#using-custom-elements\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"使用自定义元素\">使用自定义元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#使用自定义元素\"><i class=\"material-icons\">link</i></a></h2>\n<p>Custom elements bootstrap themselves - they start automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM.\nOnce a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not require any special knowledge of Angular terms or usage conventions.</p>\n<p>自定义元素会自举 —— 它们在添加到 DOM 中时就会自行启动自己，并在从 DOM 中移除时自行销毁自己。一旦自定义元素添加到了任何页面的 DOM 中，它的外观和行为就和其它的 HTML 元素一样了，不需要对 Angular 的术语或使用约定有任何特殊的了解。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">详细信息</td>\n</tr>\n<tr>\n<td align=\"left\">Easy dynamic content in an Angular application</td>\n<td align=\"left\">Transforming a component to a custom element provides a straightforward path to creating dynamic HTML content in your Angular application. HTML content that you add directly to the DOM in an Angular application is normally displayed without Angular processing, unless you define a <em>dynamic component</em>, adding your own code to connect the HTML tag to your application data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</td>\n</tr>\n<tr>\n<td align=\"left\">Angular 应用程序中的简单动态内容</td>\n<td align=\"left\">把组件转换成自定义元素为你在 Angular 应用中创建动态 HTML 内容提供了一种简单的方式。在 Angular 应用中，你直接添加到 DOM 中的 HTML 内容是不会经过 Angular 处理的，除非你使用<em>动态组件</em>来借助自己的代码把 HTML 标签与你的应用数据关联起来并参与变更检测。而使用自定义组件，所有这些装配工作都是自动的。</td>\n</tr>\n<tr>\n<td align=\"left\">Content-rich applications</td>\n<td align=\"left\">If you have a content-rich application, such as the Angular app that presents this documentation, custom elements let you give your content providers sophisticated Angular functionality without requiring knowledge of Angular. For example, an Angular guide like this one is added directly to the DOM by the Angular navigation tools, but can include special elements like <code>&#x3C;code-snippet></code> that perform complex operations. All you need to tell your content provider is the syntax of your custom element. They don't need to know anything about Angular, or anything about your component's data structures or implementation.</td>\n</tr>\n<tr>\n<td align=\"left\">富内容应用</td>\n<td align=\"left\">如果你有一个富内容应用（比如正在展示本文档的这个），自定义元素能让你的内容提供者使用复杂的 Angular 功能，而不要求他了解 Angular 的知识。比如，像本文档这样的 Angular 指南是使用 Angular 导航工具直接添加到 DOM 中的，但是其中可以包含特殊的元素，比如 <code>&#x3C;code-snippet></code>，它可以执行复杂的操作。你所要告诉你的内容提供者的一切，就是这个自定义元素的语法。他们不需要了解关于 Angular 的任何知识，也不需要了解你的组件的数据结构或实现。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"how-it-works\">How it works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#how-it-works\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"工作原理\">工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#工作原理\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use the <code><a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>()</code> function to convert a component into a class that can be registered with the browser as a custom element.\nAfter you register your configured class with the browser's custom-element registry, use the new element just like a built-in HTML element in content that you add directly into the DOM:</p>\n<p>使用 <code><a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>()</code> 函数来把组件转换成一个可注册成浏览器中自定义元素的类。\n注册完这个配置好的类之后，就可以在内容中像内置 HTML 元素一样使用这个新元素了，比如直接把它加到 DOM 中：</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;my-popup message=\"Use Angular!\">&#x3C;/my-popup>\n\n</code-example>\n<p>When your custom element is placed on a page, the browser creates an instance of the registered class and adds it to the DOM.\nThe content is provided by the component's template, which uses Angular template syntax, and is rendered using the component and DOM data.\nInput properties in the component correspond to input attributes for the element.</p>\n<p>当你的自定义元素放进页面中时，浏览器会创建一个已注册类的实例。其内容是由组件模板提供的，它使用 Angular 模板语法，并且使用组件和 DOM 数据进行渲染。组件的输入属性（Property）对应于该元素的输入属性（Attribute）。</p>\n<div class=\"lightbox\">\n<img alt=\"Custom element in browser\" class=\"left\" src=\"generated/images/guide/elements/customElement1.png\" width=\"600\" height=\"360\">\n</div>\n<h2 id=\"transforming-components-to-custom-elements\">Transforming components to custom elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#transforming-components-to-custom-elements\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"把组件转换成自定义元素\">把组件转换成自定义元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#把组件转换成自定义元素\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular provides the <code><a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>()</code> function for converting an Angular component, together with its dependencies, to a custom element.\nThe function collects the component's observable properties, along with the Angular functionality the browser needs to create and destroy instances, and to detect and respond to changes.</p>\n<p>Angular 提供了 <code><a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>()</code> 函数，以支持把 Angular 组件及其依赖转换成自定义元素。该函数会收集该组件的 <code>Observable</code> 型属性，提供浏览器创建和销毁实例时所需的 Angular 功能，还会对变更进行检测并做出响应。</p>\n<p>The conversion process implements the <code><a href=\"api/elements/NgElementConstructor\" class=\"code-anchor\">NgElementConstructor</a></code> interface, and creates a\nconstructor class that is configured to produce a self-bootstrapping instance of your component.</p>\n<p>这个转换过程实现了 <code><a href=\"api/elements/NgElementConstructor\" class=\"code-anchor\">NgElementConstructor</a></code> 接口，并创建了一个构造器类，用于生成该组件的一个自举型实例。</p>\n<p>Use the built-in <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define\"><code>customElements.define()</code></a> function to register the configured constructor and its associated custom-element tag with the browser's <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a>.\nWhen the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.</p>\n<p>使用内置的 <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define\"><code>customElements.define()</code></a> 函数把这个配置好的构造器和相关的自定义元素标签注册到浏览器的 <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> 中。\n当浏览器遇到这个已注册元素的标签时，就会使用该构造器来创建一个自定义元素的实例。</p>\n<div class=\"lightbox\">\n<img alt=\"Transform a component to a custom element\" class=\"left\" src=\"generated/images/guide/elements/createElement.png\" width=\"600\" height=\"400\">\n</div>\n<div class=\"alert is-important\">\n<p>Avoid using the <a href=\"api/core/Component\"><code>@Component</code></a> <a href=\"api/core/Directive#selector\">selector</a> as the custom-element tag name.\nThis can lead to unexpected behavior, due to Angular creating two component instances for a single DOM element:\nOne regular Angular component and a second one using the custom element.</p>\n<p>不要将 <a href=\"api/core/Component\"><code>@Component</code></a> 的<a href=\"api/core/Directive#selector\">选择器</a>用作自定义元素的标记名称。由于 Angular 会为单个 DOM 元素创建两个组件实例，所以这可能导致意外行为：一个是常规的 Angular 组件，而另一个是自定义元素。</p>\n</div>\n<h3 id=\"mapping\">Mapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#mapping\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"映射\">映射<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#映射\"><i class=\"material-icons\">link</i></a></h3>\n<p>A custom element <em>hosts</em> an Angular component, providing a bridge between the data and logic defined in the component and standard DOM APIs.\nComponent properties and logic maps directly into HTML attributes and the browser's event system.</p>\n<p><em>寄宿</em>着 Angular 组件的自定义元素在组件中定义的\"数据及逻辑\"和标准的 DOM API 之间建立了一座桥梁。组件的属性和逻辑会直接映射到 HTML 属性和浏览器的事件系统中。</p>\n<ul>\n<li>\n<p>The creation API parses the component looking for input properties, and defines corresponding attributes for the custom element.\nIt transforms the property names to make them compatible with custom elements, which do not recognize case distinctions.\nThe resulting attribute names use dash-separated lowercase.\nFor example, for a component with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('myInputProp') inputProp</code>, the corresponding custom element defines an attribute <code>my-input-prop</code>.</p>\n<p>用于创建的 API 会解析该组件，以查找输入属性（Property），并在这个自定义元素上定义相应的属性（Attribute）。\n它把属性名转换成与自定义元素兼容的形式（自定义元素不区分大小写），生成的属性名会使用中线分隔的小写形式。\n比如，对于带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('myInputProp') inputProp</code> 的组件，其对应的自定义元素会带有一个 <code>my-input-prop</code> 属性。</p>\n</li>\n<li>\n<p>Component outputs are dispatched as HTML <a href=\"https://developer.mozilla.org/docs/Web/API/CustomEvent\">Custom Events</a>, with the name of the custom event matching the output name.\nFor example, for a component with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() valueChanged = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code>, the corresponding custom element dispatches events with the name \"valueChanged\", and the emitted data is stored on the event's <code>detail</code> property.\nIf you provide an alias, that value is used; for example, <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('myClick') clicks = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();</code> results in dispatch events with the name \"myClick\".</p>\n<p>组件的输出属性会用 HTML <a href=\"https://developer.mozilla.org/docs/Web/API/CustomEvent\">自定义事件</a>的形式进行分发，自定义事件的名字就是这个输出属性的名字。\n比如，对于带有 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() valueChanged = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code> 属性的组件，其相应的自定义元素将会分发名叫 \"valueChanged\" 的事件，事件中所携带的数据存储在该事件对象的 <code>detail</code> 属性中。\n如果你提供了别名，就改用这个别名。比如，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('myClick') clicks = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();</code> 会导致分发名为 \"myClick\" 事件。</p>\n</li>\n</ul>\n<p>For more information, see Web Component documentation for <a href=\"https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events\">Creating custom events</a>.</p>\n<p>要了解更多，参阅 Web Component 的文档：<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events\">Creating custom events</a>。</p>\n<p><a id=\"browser-support\"></a></p>\n<h2 id=\"browser-support-for-custom-elements\">Browser support for custom elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#browser-support-for-custom-elements\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"自定义元素的浏览器支持\">自定义元素的浏览器支持<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#自定义元素的浏览器支持\"><i class=\"material-icons\">link</i></a></h2>\n<p>The recently-developed <a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements\">custom elements</a> Web Platform feature is currently supported natively in a number of browsers.</p>\n<p>最近开发的 Web 平台特性：<a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements\">自定义元素</a>目前在一些浏览器中实现了原生支持，而其它浏览器或者尚未决定，或者已经制订了计划。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Browser</th>\n<th align=\"left\">Custom Element Support</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">浏览器</td>\n<td align=\"left\">自定义元素支持</td>\n</tr>\n<tr>\n<td align=\"left\">Chrome</td>\n<td align=\"left\">Supported natively.</td>\n</tr>\n<tr>\n<td align=\"left\">Chrome</td>\n<td align=\"left\">原生支持。</td>\n</tr>\n<tr>\n<td align=\"left\">Edge (Chromium-based)</td>\n<td align=\"left\">Supported natively.</td>\n</tr>\n<tr>\n<td align=\"left\">Edge (基于 Chromium 的版本)</td>\n<td align=\"left\">原生支持。</td>\n</tr>\n<tr>\n<td align=\"left\">Firefox</td>\n<td align=\"left\">Supported natively.</td>\n</tr>\n<tr>\n<td align=\"left\">Firefox</td>\n<td align=\"left\">原生支持。</td>\n</tr>\n<tr>\n<td align=\"left\">Opera</td>\n<td align=\"left\">Supported natively.</td>\n</tr>\n<tr>\n<td align=\"left\">Opera</td>\n<td align=\"left\">原生支持。</td>\n</tr>\n<tr>\n<td align=\"left\">Safari</td>\n<td align=\"left\">Supported natively.</td>\n</tr>\n<tr>\n<td align=\"left\">Safari</td>\n<td align=\"left\">原生支持。</td>\n</tr>\n</tbody>\n</table>\n<p>To add the <code>@angular/elements</code> package to your workspace, run the following command:</p>\n<p>要往工作空间中添加 <code>@angular/elements</code> 包，请运行如下命令：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install @angular/elements --save\n\n</code-example>\n<h2 id=\"example-a-popup-service\">Example: A Popup Service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#example-a-popup-service\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"范例弹窗服务\">范例：弹窗服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#范例弹窗服务\"><i class=\"material-icons\">link</i></a></h2>\n<p>Previously, when you wanted to add a component to an application at runtime, you had to define a <em>dynamic component</em>, and then you would have to load it, attach it to an element in the DOM, and wire up all of the dependencies, change detection, and event handling, as described in <a href=\"guide/dynamic-component-loader\">Dynamic Component Loader</a>.</p>\n<p>以前，如果你要在运行期间把一个组件添加到应用中，就得定义成<em>动态组件</em>，然后还要加载它、把它附加到 DOM 中的元素上，并且装配所有的依赖、变更检测和事件处理，详见<a href=\"guide/dynamic-component-loader\">动态组件加载器</a>。</p>\n<p>Using an Angular custom element makes the process much simpler and more transparent, by providing all of the infrastructure and framework automatically —all you have to do is define the kind of event handling you want.\n(You do still have to exclude the component from compilation, if you are not going to use it in your application.)</p>\n<p>用 Angular 自定义组件会让这个过程更简单、更透明。它会自动提供所有基础设施和框架，而你要做的就是定义所需的各种事件处理逻辑。（如果你不准备在应用中直接用它，还要把该组件在编译时排除出去。）</p>\n<p>The following Popup Service example application defines a component that you can either load dynamically or convert to a custom element.</p>\n<p>这个弹窗服务的范例应用（见后面）定义了一个组件，你可以动态加载它也可以把它转换成自定义组件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Files</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">文件</td>\n<td align=\"left\">详细信息</td>\n</tr>\n<tr>\n<td align=\"left\"><code>popup.component.ts</code></td>\n<td align=\"left\">Defines a simple pop-up element that displays an input message, with some animation and styling.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>popup.component.ts</code></td>\n<td align=\"left\">定义了一个简单的弹窗元素，用于显示一条输入消息，附带一些动画和样式。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>popup.service.ts</code></td>\n<td align=\"left\">Creates an injectable service that provides two different ways to invoke the <code>PopupComponent</code>; as a dynamic component, or as a custom element Notice how much more setup is required for the dynamic-loading method.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>popup.service.ts</code></td>\n<td align=\"left\">创建了一个可注入的服务，它提供了两种方式来执行 <code>PopupComponent</code>：作为动态组件或作为自定义元素。注意动态组件的方式需要更多的代码来做搭建工作。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app.module.ts</code></td>\n<td align=\"left\">Adds the <code>PopupComponent</code> in the module's <code>declarations</code> list.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app.module.ts</code></td>\n<td align=\"left\">把 <code>PopupComponent</code> 添加到模块的 <code>declarations</code> 列表中</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app.component.ts</code></td>\n<td align=\"left\">Defines the application's root component, which uses the <code>PopupService</code> to add the pop-up to the DOM at run time. When the application runs, the root component's constructor converts <code>PopupComponent</code> to a custom element.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app.component.ts</code></td>\n<td align=\"left\">定义了该应用的根组件，它借助 <code>PopupService</code> 在运行时把这个弹窗添加到 DOM 中。在应用运行期间，根组件的构造函数会把 <code>PopupComponent</code> 转换成自定义元素。</td>\n</tr>\n</tbody>\n</table>\n<p>For comparison, the demo shows both methods.\nOne button adds the popup using the dynamic-loading method, and the other uses the custom element.\nThe result is the same; only the preparation is different.</p>\n<p>为了对比，这个范例中同时演示了这两种方式。一个按钮使用动态加载的方式添加弹窗，另一个按钮使用自定义元素的方式。可以看到，两者的结果是一样的，其差别只是准备过程不同。</p>\n<code-tabs>\n    <code-pane header=\"popup.component.ts\" path=\"elements/src/app/popup.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\nimport { <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, state, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> } from '@angular/animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-popup',\n  template: `\n    &#x3C;span>Popup: {{message}}&#x3C;/span>\n    &#x3C;button type=\"button\" (click)=\"closed.next()\">&#x26;#x2716;&#x3C;/button>\n  `,\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('state', [\n      state('opened', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateY(0%)'})),\n      state('void, closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateY(100%)', opacity: 0})),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* => *', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-in')),\n    ])\n  ],\n  styles: [`\n    :host {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: #009cff;\n      height: 48px;\n      padding: 16px;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border-top: 1px solid black;\n      font-size: 24px;\n    }\n\n    button {\n      border-radius: 50%;\n    }\n  `]\n})\nexport class PopupComponent {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@state')\n  state: 'opened' | 'closed' = 'closed';\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  get message(): string { return this._message; }\n  set message(message: string) {\n    this._message = message;\n    this.state = 'opened';\n  }\n  private _message = '';\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()\n  closed = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;void>();\n}\n\n\n</code-pane>\n    <code-pane header=\"popup.service.ts\" path=\"elements/src/app/popup.service.ts\">\n\nimport { <a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>, <a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a>, <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>, <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a> } from '@angular/core';\nimport { <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a>, <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a> } from '@angular/elements';\nimport { PopupComponent } from './popup.component';\n\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class PopupService {\n  constructor(private injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>,\n              private applicationRef: <a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>,\n              private componentFactoryResolver: <a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a>) {}\n\n  // Previous dynamic-loading method required you to set up infrastructure\n  // before adding the popup to the DOM.\n  showAsComponent(message: string) {\n    // Create element\n    const popup = document.createElement('popup-component');\n\n    // Create the component and wire it up with the element\n    const factory = this.componentFactoryResolver.resolveComponentFactory(PopupComponent);\n    const popupComponentRef = factory.create(this.injector, [], popup);\n\n    // Attach to the view so that the change detector knows to run\n    this.applicationRef.attachView(popupComponentRef.hostView);\n\n    // Listen to the close event\n    popupComponentRef.instance.closed.subscribe(() => {\n      document.body.removeChild(popup);\n      this.applicationRef.detachView(popupComponentRef.hostView);\n    });\n\n    // Set the message\n    popupComponentRef.instance.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popup);\n  }\n\n  // This uses the new custom-element method to add the popup to the DOM.\n  showAsElement(message: string) {\n    // Create element\n    const popupEl: <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a> &#x26; <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a>&#x3C;PopupComponent> = document.createElement('popup-element') as any;\n\n    // Listen to the close event\n    popupEl.addEventListener('closed', () => document.body.removeChild(popupEl));\n\n    // Set the message\n    popupEl.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popupEl);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"elements/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { PopupComponent } from './popup.component';\nimport { PopupService } from './popup.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>],\n  providers: [PopupService],\n  declarations: [AppComponent, PopupComponent],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n\n\n</code-pane>\n    <code-pane header=\"app.component.ts\" path=\"elements/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a> } from '@angular/core';\nimport { <a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a> } from '@angular/elements';\nimport { PopupService } from './popup.service';\nimport { PopupComponent } from './popup.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;input #input value=\"Message\">\n    &#x3C;button type=\"button\" (click)=\"popup.showAsComponent(input.value)\">Show as component&#x3C;/button>\n    &#x3C;button type=\"button\" (click)=\"popup.showAsElement(input.value)\">Show as element&#x3C;/button>\n  `,\n})\nexport class AppComponent {\n  constructor(injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>, public popup: PopupService) {\n    // Convert `PopupComponent` to a custom element.\n    const PopupElement = <a href=\"api/elements/createCustomElement\" class=\"code-anchor\">createCustomElement</a>(PopupComponent, {injector});\n    // Register the custom element with the browser.\n    customElements.define('popup-element', PopupElement);\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"typings-for-custom-elements\">Typings for custom elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#typings-for-custom-elements\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"为自定义元素添加类型支持\">为自定义元素添加类型支持<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/elements#为自定义元素添加类型支持\"><i class=\"material-icons\">link</i></a></h2>\n<p>Generic DOM APIs, such as <code>document.createElement()</code> or <code>document.querySelector()</code>, return an element type that is appropriate for the specified arguments.\nFor example, calling <code>document.createElement('a')</code> returns an <code>HTMLAnchorElement</code>, which TypeScript knows has an <code>href</code> property.\nSimilarly, <code>document.createElement('div')</code> returns an <code>HTMLDivElement</code>, which TypeScript knows has no <code>href</code> property.</p>\n<p>一般的 DOM API，比如 <code>document.createElement()</code> 或 <code>document.querySelector()</code>，会返回一个与指定的参数相匹配的元素类型。比如，调用 <code>document.createElement('a')</code> 会返回 <code>HTMLAnchorElement</code>，这样 TypeScript 就会知道它有一个 <code>href</code> 属性，而 <code>document.createElement('div')</code> 会返回 <code>HTMLDivElement</code>，这样 TypeScript 就会知道它没有 <code>href</code> 属性。</p>\n<p>When called with unknown elements, such as a custom element name (<code>popup-element</code> in our example), the methods return a generic type, such as <code>HTMLElement</code>, because TypeScript can't infer the correct type of the returned element.</p>\n<p>当调用未知元素（比如自定义的元素名 <code>popup-element</code>）时，该方法会返回泛化类型，比如 <code>HTMLELement</code>，这时候 TypeScript 就无法推断出所返回元素的正确类型。</p>\n<p>Custom elements created with Angular extend <code><a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a></code> (which in turn extends <code>HTMLElement</code>).\nAdditionally, these custom elements will have a property for each input of the corresponding component.\nFor example, our <code>popup-element</code> has a <code>message</code> property of type <code>string</code>.</p>\n<p>用 Angular 创建的自定义元素会扩展 <code><a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a></code> 类型（而它扩展了 <code>HTMLElement</code>）。除此之外，这些自定义元素还拥有相应组件的每个输入属性。比如，<code>popup-element</code> 元素具有一个 <code>string</code> 型的 <code>message</code> 属性。</p>\n<p>There are a few options if you want to get correct types for your custom elements.\nAssume you create a <code>my-dialog</code> custom element based on the following component:</p>\n<p>如果你要让你的自定义元素获得正确的类型，还可使用一些选项。假设你要创建一个基于下列组件的自定义元素 <code>my-dialog</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(…)\nclass MyDialog {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() content: string;\n}\n\n</code-example>\n<p>The most straightforward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type.\nFor that, use the <code><a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a></code> and <code><a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a></code> types (both exported from <code>@angular/elements</code>):</p>\n<p>要获得精确类型，最直白的方式是把相关 DOM 方法的返回值转换成正确的类型。要做到这一点，可以使用 <code><a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a></code> 和 <code><a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a></code> 类型（都导出自 <code>@angular/elements</code>）：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nconst aDialog = document.createElement('my-dialog') as <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a> &#x26; <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a>&#x3C;{content: string}>;\naDialog.content = 'Hello, world!';\naDialog.content = 123;  // &#x3C;-- ERROR: TypeScript knows this should be a string.\naDialog.body = 'News';  // &#x3C;-- ERROR: TypeScript knows there is no `body` property on `aDialog`.\n\n</code-example>\n<p>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for your custom element.\nBut it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</p>\n<p>这是一种让你的自定义元素快速获得 TypeScript 特性（比如类型检查和自动完成支持）的好办法，不过如果你要在多个地方使用它，可能会有点啰嗦，因为不得不在每个地方对返回类型做转换。</p>\n<p>An alternative way, that only requires defining each custom element's type once, is augmenting the <code>HTMLElementTagNameMap</code>, which TypeScript uses to infer the type of a returned element based on its tag name (for DOM methods such as <code>document.createElement()</code>, <code>document.querySelector()</code>, etc.):</p>\n<p>另一种方式可以对每个自定义元素的类型只声明一次。你可以扩展 <code>HTMLElementTagNameMap</code>，TypeScript 会在 DOM 方法（如 <code>document.createElement()</code>、<code>document.querySelector()</code> 等）中用它来根据标签名推断返回元素的类型。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare <a href=\"api/core/global\" class=\"code-anchor\">global</a> {\n  interface HTMLElementTagNameMap {\n    'my-dialog': <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a> &#x26; <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a>&#x3C;{content: string}>;\n    'my-other-element': <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a> &#x26; <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a>&#x3C;{foo: 'bar'}>;\n    …\n  }\n}\n\n</code-example>\n<p>Now, TypeScript can infer the correct type the same way it does for built-in elements:</p>\n<p>现在，TypeScript 就可以像内置元素一样推断出它的正确类型了：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndocument.createElement('div')               //--> HTMLDivElement (built-in element)\ndocument.querySelector('foo')               //--> Element        (unknown element)\ndocument.createElement('my-dialog')         //--> <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a> &#x26; <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a>&#x3C;{content: string}> (custom element)\ndocument.querySelector('my-other-element')  //--> <a href=\"api/elements/NgElement\" class=\"code-anchor\">NgElement</a> &#x26; <a href=\"api/elements/WithProperties\" class=\"code-anchor\">WithProperties</a>&#x3C;{foo: 'bar'}>      (custom element)\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/elements\n - api/elements/NgElementConstructor\n - api/elements/createCustomElement\n - guide/architecture-next-steps\n - guide/example-apps-list\n - guide/glossary\n - guide/libraries\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/core/ApplicationRef\n - api/core/Component\n - api/core/ComponentFactoryResolver\n - api/core/Directive#selector\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/global\n - api/elements/NgElement\n - api/elements/NgElementConstructor\n - api/elements/WithProperties\n - api/elements/createCustomElement\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - guide/dynamic-component-loader\n - guide/elements#angular-elements-overview\n - guide/elements#angular-元素elements概览\n - guide/elements#browser-support\n - guide/elements#browser-support-for-custom-elements\n - guide/elements#example-a-popup-service\n - guide/elements#how-it-works\n - guide/elements#mapping\n - guide/elements#transforming-components-to-custom-elements\n - guide/elements#typings-for-custom-elements\n - guide/elements#using-custom-elements\n - guide/elements#为自定义元素添加类型支持\n - guide/elements#使用自定义元素\n - guide/elements#工作原理\n - guide/elements#把组件转换成自定义元素\n - guide/elements#映射\n - guide/elements#自定义元素的浏览器支持\n - guide/elements#范例弹窗服务\n - https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\n - https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define\n - https://developer.mozilla.org/docs/Web/API/CustomEvent\n - https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events\n - https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements\n - https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/elements.md?message=docs%3A%20请简述你的修改...\n - https://www.youtube.com/watch?v=Z1gLFPLVJjY&t=4s\n-->"
}