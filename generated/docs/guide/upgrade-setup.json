{
  "id": "guide/upgrade-setup",
  "title": "Setup for upgrading from AngularJS",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/upgrade-setup.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"setup-for-upgrading-from-angularjs\" translation-result=\"on\">准备从 AngularJS 升级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#setup-for-upgrading-from-angularjs\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"setup-for-upgrading-from-angularjs\">Setup for upgrading from AngularJS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#setup-for-upgrading-from-angularjs\"><i class=\"material-icons\">link</i></a></h1>\n\n<!--\nQuestion: Can we remove this file and instead direct readers to https://github.com/angular/quickstart/blob/master/README.md\n-->\n<div class=\"alert is-critical\">\n<p translation-result=\"on\"><strong>注意：</strong>本指南<strong>仅仅</strong>适用于<a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">从 AngularJS 升级</a>和<a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">注重性能的升级</a>。\n本指南中提到的升级指南使用的是<a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">已弃用的快速上手 Github 仓库</a>，它是在 Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a> 推出之前创建的。</p><p translation-origin=\"off\"><strong>Audience:</strong> Use this guide <strong>only</strong> in the context of  <a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">Upgrading from AngularJS</a> or <a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">Upgrading for Performance</a>.\nThose Upgrade guides refer to this Setup guide for information about using the <a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">deprecated QuickStart GitHub repository</a>, which was created prior to the current Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a>.</p>\n\n<p translation-result=\"on\"><strong>对于所有其它场景</strong>，请参见<a href=\"guide/setup-local\" title=\"Setting up for Local Development\">建立本地开发环境</a>中的步骤。</p><p translation-origin=\"off\"><strong>For all other scenarios,</strong> see the current instructions in <a href=\"guide/setup-local\" title=\"Setting up for Local Development\">Setting up the Local Environment and Workspace</a>.</p>\n\n</div>\n<!--\nThe <live-example name=quickstart>QuickStart live-coding</live-example> example is an Angular _playground_.\nThere are also some differences from a local app, to simplify that live-coding experience.\nIn particular, the QuickStart live-coding example shows just the AppComponent file; it creates the equivalent of app.module.ts and main.ts internally for the playground only.\n-->\n<p translation-result=\"on\">本指南讲的是如何在你自己的机器上进行本地化开发。\n利用 <a href=\"https://github.com/angular/quickstart\" title=\"安装 github 《快速上手》库\">github 上的<strong>《快速上手》种子</strong></a>在你的电脑上搭建一个新项目是很快很容易的。</p><p translation-origin=\"off\">This guide describes how to develop locally on your own machine.\nSetting up a new project on your machine is quick and easy with the <a href=\"https://github.com/angular/quickstart\" title=\"Install the github QuickStart repo\">QuickStart seed on github</a>.</p>\n\n<p translation-result=\"on\"><strong>前提条件：</strong>确保你已经安装好了 <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® 和 npm</a>。</p><p translation-origin=\"off\"><strong>Prerequisite:</strong> Make sure you have <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® and npm installed</a>.</p>\n\n<a id=\"clone\"></a>\n<h2 id=\"clone\" translation-result=\"on\">克隆<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#clone\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"clone\">Clone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#clone\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">运行下列命令来执行<em>克隆并启动</em>步骤。</p><p translation-origin=\"off\">Perform the <em>clone-to-launch</em> steps with these terminal commands.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  git clone https://github.com/angular/quickstart.git quickstart\n  cd quickstart\n  npm install\n  npm start\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">在<em>Bash for Windows</em>中 <code>npm start</code> 可能会失败，因为到 2017-04 为止它还不支持访问网络上的服务器。</p><p translation-origin=\"off\"><code>npm start</code> fails in <em>Bash for Windows</em> in versions earlier than the Creator's Update (April 2017).</p>\n\n</div>\n<a id=\"download\"></a>\n<h2 id=\"download\" translation-result=\"on\">下载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#download\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"download\">Download<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#download\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"下载《快速上手》种子库\">下载《快速上手》种子</a>\n并解压到你的项目目录中。然后执行下面的命令完成剩余步骤。</p><p translation-origin=\"off\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"Download the QuickStart seed repository\">Download the QuickStart seed</a>\nand unzip it into your project folder. Then perform the remaining steps with these terminal commands.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  cd quickstart\n  npm install\n  npm start\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">在<em>Bash for Windows</em>中 <code>npm start</code> 可能会失败，因为到 2017-01 为止它还不支持访问网络上的服务器。</p><p translation-origin=\"off\"><code>npm start</code> fails in <em>Bash for Windows</em> in versions earlier than the Creator's Update (April 2017).</p>\n\n</div>\n<a id=\"non-essential\"></a>\n<h2 id=\"delete-non-essential-files-optional\" translation-result=\"on\">删除<em>非必需</em>文件（可选）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"delete-non-essential-files-optional\">Delete <em>non-essential</em> files (optional)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以快速删除一些涉及到测试和维护快速开始版本库的 <em>非必需</em> 文件\n（<strong><em>包括所有 git 相关的文件</em></strong>如 <code>.git</code> 文件夹和 <code>.gitignore</code>！）。</p><p translation-origin=\"off\">You can quickly delete the <em>non-essential</em> files that concern testing and QuickStart repository maintenance\n(<strong><em>including all git-related artifacts</em></strong> such as the <code>.git</code> folder and <code>.gitignore</code>!).</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">请只在开始时执行此删除操作，以防你自己的测试和 git 文件被意外删除！</p><p translation-origin=\"off\">Do this only in the beginning to avoid accidentally deleting your own tests and git setup!</p>\n\n</div>\n<p translation-result=\"on\">在项目目录下打开一个终端窗口，并根据你的操作系统执行以下命令：</p><p translation-origin=\"off\">Open a terminal window in the project folder and enter the following commands for your environment:</p>\n\n<h3 id=\"osx-bash\">OS/X (bash)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#osx-bash\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\" class=\"code-shell\">\n  xargs rm -rf &#x3C; non-essential-files.osx.txt\n  rm src/app/*.spec*.ts\n  rm non-essential-files.osx.txt\n\n</code-example>\n<h3 id=\"windows\">Windows<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#windows\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\" class=\"code-shell\">\n  for /f %i in (non-essential-files.txt) do del %i /F /S /Q\n  rd .git /s /q\n  rd e2e /s /q\n\n</code-example>\n<a id=\"seed\"></a>\n<h2 id=\"whats-in-the-quickstart-seed\" translation-result=\"on\">《快速上手》种子库里都有什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"whats-in-the-quickstart-seed\">What's in the QuickStart seed?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><strong>《快速上手》种子</strong> 提供了一个基本的《快速上手》游乐场应用，以及进行本地开发的其它必要文件。\n所以，你电脑里的项目目录中有<em>更多文件</em>，其中的大部分你都会<a href=\"guide/file-structure\">在稍后学到</a>。</p><p translation-origin=\"off\">The <strong>QuickStart seed</strong> provides a basic QuickStart playground application and other files necessary for local development.\nConsequently, there are many files in the project folder on your machine,\nmost of which you can <a href=\"guide/file-structure\">learn about later</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p><strong>Reminder:</strong> The \"QuickStart seed\" example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.</p>\n</div>\n<a id=\"app-files\"></a>\n<p translation-result=\"on\">注意<strong><code>/src</code></strong>目录中以下三个 TypeScript (<code>.ts</code>) 文件：</p><p translation-origin=\"off\">Focus on the following three TypeScript (<code>.ts</code>) files in the <strong><code>/src</code></strong> folder.</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    src</p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n<p>      app</p>\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n<p>        app.component.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        app.module.ts</p>\n      </div>\n    </div>\n    <div class=\"file\">\n<p>      main.ts</p>\n    </div>\n  </div>\n</div>\n<code-tabs>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"setup/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `&#x3C;h1>Hello {{name}}&#x3C;/h1>`\n})\nexport class AppComponent { name = 'Angular'; }\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"setup/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"src/main.ts\" path=\"setup/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">所有指南和烹饪书都至少有<em>这几个核心文件</em>。每个文件都有独特的用途，并且随着应用的成长各自独立演变。</p><p translation-origin=\"off\">All guides and cookbooks have <em>at least these core files</em>.\nEach file has a distinct purpose and evolves independently as the application grows.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目录之外的文件为构建、部署和测试 app 相关的文件，他们只包括配置文件和外部依赖。</p><p translation-origin=\"off\">Files outside <code>src/</code> concern building, deploying, and testing your app.\nThey include configuration files and external dependencies.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目录下的文件才“属于”你的 app。\n除非明确指出，否则教程中添加的 TypeScript，HTML 和 CSS 文件都在 <code>src/</code> 目录下，\n大多数在 <code>src/app</code> 目录中。</p><p translation-origin=\"off\">Files inside <code>src/</code> \"belong\" to your app.\nAdd new Typescript, HTML and CSS files inside the <code>src/</code> directory, most of them inside <code>src/app</code>,\nunless told to do otherwise.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目录文件详情如下：</p><p translation-origin=\"off\">The following are all in <code>src/</code></p>\n\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"20%\">\n  \n  <col width=\"80%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      文件</p><p translation-origin=\"off\">      File</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      用途</p><p translation-origin=\"off\">      Purpose</p>\n\n    </th>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>app/app.component.ts</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      定义与《快速上手》游乐场同样的 <code>AppComponent</code>。\n它是<strong>根</strong>组件，随着应用的演变，它将变成一颗嵌套组件树。</p><p translation-origin=\"off\">      Defines the same <code>AppComponent</code> as the one in the QuickStart playground.\nIt is the <strong>root</strong> component of what will become a tree of nested components\nas the application evolves.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>app/app.module.ts</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      定义 <code>AppModule</code>，<a href=\"guide/bootstrapping\" title=\"AppModule: 根模块\">根模块</a>为 Angular 描述如何组装应用。\n目前，它只声明了 <code>AppComponent</code>。\n不久，它将声明更多组件。</p><p translation-origin=\"off\">      Defines <code>AppModule</code>, the  <a href=\"guide/bootstrapping\" title=\"AppModule: the root module\">root module</a> that tells Angular how to assemble the application.\nWhen initially created, it declares only the <code>AppComponent</code>.\nOver time, you add more components to declare.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>main.ts</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      使<a href=\"guide/glossary#jit\">即时 (JIT) 编译器</a>用编译应用并且在浏览器中<a href=\"guide/bootstrapping\" title=\"启动应用\">启动</a>并运行应用。\n对于大多数项目的开发，这都是合理的选择。而且它是在像 Stackblitz 这样的<em>在线编程</em>环境中运行例子的唯一选择。\n你将在本文档中学习其它编译和开发选择。</p><p translation-origin=\"off\">      Compiles the application with the <a href=\"guide/glossary#jit\">JIT compiler</a> and\n<a href=\"guide/bootstrapping\">bootstraps</a>\nthe application's main module (<code>AppModule</code>) to run in the browser.\nThe JIT compiler is a reasonable choice during the development of most projects and\nit's the only viable choice for a sample running in a <em>live-coding</em> environment such as Stackblitz.\nAlternative <a href=\"guide/aot-compiler\">compilation</a>, <a href=\"guide/build\">build</a>, and <a href=\"guide/deployment\">deployment</a> options are available.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<h2 id=\"appendix-develop-locally-with-ie\" translation-result=\"on\">附录：用 IE 进行本地化开发<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-develop-locally-with-ie\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix-develop-locally-with-ie\">Appendix: Develop locally with IE<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-develop-locally-with-ie\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你使用 <code>ng serve</code> 进行本地化 Angular 开发，就会自动在浏览器和本地开发服务器之间建立一个 <code>websocket</code> 连接，这样，在代码发生变化时，浏览器就会自动刷新。</p><p translation-origin=\"off\">If you develop angular locally with <code>ng serve</code>, a <code>websocket</code> connection is set up automatically between browser and local dev server, so when your code changes, the browser can automatically refresh.</p>\n\n<p translation-result=\"on\">在 Windows 上，默认情况下，每个应用最多只能有 6 个 websocket 连接，参见 <a href=\"https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&#x26;MSPPError=-2147217396#websocket_maxconn\" title=\"MSDN WebSocket settings\">MSDN 上的 WebSocket 设置</a>。\n所以，当 IE 刷新时（手动刷新或由 <code>ng serve</code> 自动刷新），websocket 可能无法正常关闭。当 websocket 连接数超过上限时，就会抛出一个 <code>SecurityError</code> 异常。这种错误不会影响 Angular 应用，你可以重启 IE 来清除此异常或在 Windows 注册表中加大这个上限。</p><p translation-origin=\"off\">In Windows, by default, one application can only have 6 websocket connections, <a href=\"https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&#x26;MSPPError=-2147217396#websocket_maxconn\" title=\"MSDN WebSocket settings\">MSDN WebSocket Settings</a>.\nSo when IE is refreshed (manually or automatically by <code>ng serve</code>), sometimes the websocket does not close properly. When websocket connections exceed the limitations, a <code>SecurityError</code> will be thrown. This error will not affect the angular application, you can just restart IE to clear this error, or modify the windows registry to update the limitations.</p>\n\n<h2 id=\"appendix-test-using-fakeasyncasync\" translation-result=\"on\">附录：使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 进行测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-test-using-fakeasyncasync\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix-test-using-fakeasyncasync\">Appendix: Test using <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-test-using-fakeasyncasync\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 辅助函数来运行单元测试（详情参见<a href=\"guide/testing#async-test-with-fakeasync\">测试指南</a>），就要在测试的准备文件中导入 <code>zone.js/dist/zone-testing</code>。</p><p translation-origin=\"off\">If you use the <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> helper function to run unit tests (for details, read the <a href=\"guide/testing#async-test-with-fakeasync\">Testing guide</a>), you need to import <code>zone.js/dist/zone-testing</code> in your test setup file.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">如果你是用 <code>Angular/CLI</code> 创建的项目，那么它已经在 <code>src/test.ts</code> 中导入过了。</p><p translation-origin=\"off\">If you create project with <code>Angular/CLI</code>, it is already imported in <code>src/test.ts</code>.</p>\n\n</div>\n<p translation-result=\"on\">在以前版本的 <code>Angular</code> 中，下列文件曾被导入或添加到 html 文件中：</p><p translation-origin=\"off\">And in the earlier versions of <code>Angular</code>, the following files were imported or added in your html file:</p>\n\n<code-example>\nimport 'zone.js/dist/long-stack-trace-zone';\nimport 'zone.js/dist/proxy';\nimport 'zone.js/dist/sync-test';\nimport 'zone.js/dist/jasmine-patch';\nimport 'zone.js/dist/async-test';\nimport 'zone.js/dist/fake-async-test';\n</code-example>\n<p translation-result=\"on\">你仍然可以分别导入这些文件，不过导入顺序很重要，你必须在 <code>sync-test</code>、<code>async-test</code>、<code>fake-async-test</code> 和 <code>jasmine-patch</code> 之前导入 <code>proxy</code>。还要注意在 <code>jasmine-patch</code> 之前导入 <code>sync-test</code>。所以，建议你只导入 <code>zone-testing</code> 而不要分别加载那些文件。</p><p translation-origin=\"off\">You can still load those files separately, but the order is important, you must import <code>proxy</code> before <code>sync-test</code>, <code>async-test</code>, <code>fake-async-test</code> and <code>jasmine-patch</code>. And you also need to import <code>sync-test</code> before <code>jasmine-patch</code>, so it is recommended to just import <code>zone-testing</code> instead of loading those separated files.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/upgrade\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli\n - guide/aot-compiler\n - guide/bootstrapping\n - guide/build\n - guide/deployment\n - guide/file-structure\n - guide/glossary#jit\n - guide/setup-local\n - guide/setup-local#prerequisites\n - guide/testing#async-test-with-fakeasync\n - guide/upgrade\n - guide/upgrade-performance\n - guide/upgrade-setup#appendix-develop-locally-with-ie\n - guide/upgrade-setup#appendix-test-using-fakeasyncasync\n - guide/upgrade-setup#clone\n - guide/upgrade-setup#delete-non-essential-files-optional\n - guide/upgrade-setup#download\n - guide/upgrade-setup#osx-bash\n - guide/upgrade-setup#setup-for-upgrading-from-angularjs\n - guide/upgrade-setup#whats-in-the-quickstart-seed\n - guide/upgrade-setup#windows\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/upgrade-setup.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/quickstart\n - https://github.com/angular/quickstart/archive/master.zip\n - https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396#websocket_maxconn\n-->"
}