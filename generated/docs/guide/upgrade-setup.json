{
  "id": "guide/upgrade-setup",
  "title": "准备从 AngularJS 升级",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/upgrade-setup.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"setup-for-upgrading-from-angularjs\">Setup for upgrading from AngularJS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#setup-for-upgrading-from-angularjs\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"准备从-angularjs-升级\">准备从 AngularJS 升级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#准备从-angularjs-升级\"><i class=\"material-icons\">link</i></a></h1>\n<!--todo: Question: Can we remove this file and instead direct readers to https://github.com/angular/quickstart/blob/master/README.md -->\n<div class=\"alert is-critical\">\n<p><strong>AUDIENCE</strong>: <br>\nUse this guide <strong>only</strong> in the context of  <a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">Upgrading from AngularJS</a> or <a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">Upgrading for Performance</a>.\nThose Upgrade guides refer to this Setup guide for information about using the <a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">deprecated QuickStart GitHub repository</a>, which was created prior to the current Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a>.</p>\n<p><strong>注意</strong>：<br>\n本指南<strong>仅仅</strong>适用于<a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">从 AngularJS 升级</a>和<a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">注重性能的升级</a>。\n本指南中提到的升级指南使用的是<a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">已弃用的快速上手 Github 仓库</a>，它是在 Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a> 推出之前创建的。</p>\n<p><strong>For all other scenarios</strong>, see the current instructions in <a href=\"guide/setup-local\" title=\"Setting up for Local Development\">Setting up the Local Environment and Workspace</a>.</p>\n<p><strong>对于所有其它场景</strong>，请参阅<a href=\"guide/setup-local\" title=\"Setting up for Local Development\">建立本地开发环境</a>中的步骤。</p>\n</div>\n<!--\nThe <live-example name=quickstart>QuickStart live-coding</live-example> example is an Angular *playground*.\nThere are also some differences from a local app, to simplify that live-coding experience.\nIn particular, the QuickStart live-coding example shows just the AppComponent file; it creates the equivalent of app.module.ts and main.ts internally for the playground only.\n-->\n<p>This guide describes how to develop locally on your own machine.\nSetting up a new project on your machine is quick and easy with the <a href=\"https://github.com/angular/quickstart\" title=\"Install the github QuickStart repo\">QuickStart seed on GitHub</a>.</p>\n<p>本指南讲的是如何在你自己的机器上进行本地化开发。利用 <a href=\"https://github.com/angular/quickstart\" title=\"安装 github 《快速上手》库\">github 上的<strong>《快速上手》种子</strong></a>在你的电脑上搭建一个新项目是很快很容易的。</p>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"前提条件\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#前提条件\"><i class=\"material-icons\">link</i></a></h2>\n<p>Make sure you have <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® and npm installed</a>.</p>\n<p>确保你已经安装好了 <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® 和 npm</a>。</p>\n<p><a id=\"clone\"></a></p>\n<h2 id=\"clone\">Clone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#clone\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"克隆\">克隆<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#克隆\"><i class=\"material-icons\">link</i></a></h2>\n<p>Perform the <em>clone-to-launch</em> steps with these terminal commands.</p>\n<p>运行下列命令来执行<em>克隆并启动</em>步骤。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ngit clone https://github.com/angular/quickstart.git quickstart\ncd quickstart\nnpm install\n\n</code-example>\n<p><a id=\"download\"></a></p>\n<h2 id=\"download\">Download<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#download\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"下载\">下载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#下载\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"Download the QuickStart seed repository\">Download the QuickStart seed</a> and unzip it into your project folder.\nThen perform the remaining steps with these terminal commands.</p>\n<p><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"下载《快速上手》种子库\">下载《快速上手》种子</a> 并解压到你的项目目录中。然后执行下面的命令完成剩余步骤。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ncd quickstart\nnpm install\n\n</code-example>\n<p><a id=\"non-essential\"></a></p>\n<h2 id=\"delete-non-essential-files-optional\">Delete <em>non-essential</em> files (optional)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"删除非必需文件可选\">删除<em>非必需</em>文件（可选）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#删除非必需文件可选\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can quickly delete the <em>non-essential</em> files that concern testing and QuickStart repository maintenance (<strong><em>including all git-related artifacts</em></strong> such as the <code>.git</code> folder and <code>.gitignore</code>).</p>\n<p>你可以快速删除一些涉及到测试和维护快速开始版本库的 <em>非必需</em> 文件（<strong><em>包括所有 git 相关的文件</em></strong>如 <code>.git</code> 文件夹和 <code>.gitignore</code>！）。</p>\n<div class=\"alert is-important\">\n<p>Do this only in the beginning to avoid accidentally deleting your own tests and git setup.</p>\n<p>请只在开始时执行此删除操作，以防你自己的测试和 git 文件被意外删除！。</p>\n</div>\n<p>Open a terminal window in the project folder and enter the following commands for your environment:</p>\n<p>在项目目录下打开一个终端窗口，并根据你的操作系统执行以下命令：</p>\n<h3 id=\"macos--mac-os-x-bash\">macOS / Mac OS X (bash)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#macos--mac-os-x-bash\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"shell\" language=\"shell\">\n\nxargs rm -rf &#x3C; non-essential-files.osx.txt\nrm src/app/*.spec*.ts\nrm non-essential-files.osx.txt\n\n</code-example>\n<h3 id=\"windows\">Windows<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#windows\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"shell\" language=\"shell\">\n\nfor /f %i in (non-essential-files.txt) do del %i /F /S /Q\nrd .git /s /q\nrd e2e /s /q\n\n</code-example>\n<h2 id=\"update-dependency-versions\">Update dependency versions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#update-dependency-versions\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"更新依赖版本\">更新依赖版本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#更新依赖版本\"><i class=\"material-icons\">link</i></a></h2>\n<p>Since the quickstart repository is deprecated, it is no longer updated and you need some additional steps to use the latest Angular.</p>\n<p>由于不推荐使用快速入门仓库（它已不再更新），所以你需要一些额外的步骤来使用最新的 Angular。</p>\n<ol>\n<li>\n<p>Remove the obsolete <code>@angular/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package (both from <code>package.json > dependencies</code> and <code>src/systemjs.config.js > SystemJS.config() > map</code>).</p>\n<p>删除过时的 <code>@angular/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包（全都来自 <code>package.json > dependencies</code> 和 <code>src/systemjs.config.js > SystemJS.config() > map</code>）。</p>\n</li>\n<li>\n<p>Install the latest versions of the Angular framework packages by running:</p>\n<p>通过运行以下命令来安装最新版本的 Angular 框架包：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save @angular/common@latest @angular/compiler@latest @angular/core@latest @angular/forms@latest @angular/platform-browser@latest @angular/platform-browser-dynamic@latest @angular/router@latest\n\n</code-example>\n</li>\n<li>\n<p>Install the latest versions of other packages used by Angular (RxJS, TypeScript, Zone.js) by running:</p>\n<p>通过运行以下命令安装 Angular 用到的其它包的最新版本（RxJS、TypeScript、Zone.js）：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save rxjs@latest zone.js@latest\nnpm install --save-dev typescript@latest\n\n</code-example>\n</li>\n<li>\n<p>Install the <code>systemjs-plugin-babel</code> package.\nThis will later be used to load the Angular framework files, which are in ES2015 format, using SystemJS.</p>\n<p>安装 <code>systemjs-plugin-babel</code> 包。稍后它将用于使用 SystemJS 加载 ES2015 格式的 Angular 框架文件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save systemjs-plugin-babel@latest\n\n</code-example>\n</li>\n<li>\n<p>In order to be able to load the latest Angular framework packages (in ES2015 format) correctly, replace the relevant entries in <code>src/systemjs.config.js</code>:</p>\n<p>为了能正确加载最新的 Angular 框架包（ES2015 格式），请替换 <code>src/systemjs.config.js</code> 中的相关条目：</p>\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"angular-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    '@angular/core': 'npm:@angular/core/fesm2015/core.mjs',\n    '@angular/common': 'npm:@angular/common/fesm2015/common.mjs',\n    '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>': 'npm:@angular/common/fesm2015/http.mjs',\n    '@angular/compiler': 'npm:@angular/compiler/fesm2015/compiler.mjs',\n    '@angular/platform-browser': 'npm:@angular/platform-browser/fesm2015/platform-browser.mjs',\n    '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.mjs',\n    '@angular/router': 'npm:@angular/router/fesm2015/router.mjs',\n    '@angular/router/upgrade': 'npm:@angular/router/fesm2015/upgrade.mjs',\n    '@angular/forms': 'npm:@angular/forms/fesm2015/forms.mjs',\n    /* . . . */\n  },\n  /* . . . */\n});\n\n</code-example>\n</li>\n<li>\n<p>In order to be able to load the latest RxJS package correctly, replace the relevant entries in <code>src/systemjs.config.js</code>:</p>\n<p>为了能够正确加载最新的 RxJS 包，请替换 <code>src/systemjs.config.js</code> 中的相关条目：</p>\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"rxjs-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'rxjs': 'npm:rxjs/dist/cjs',\n    'rxjs/operators': 'npm:rxjs/dist/cjs/operators',\n    /* . . . */\n  },\n  /* . . . */\n  packages: {\n    /* . . . */\n    'rxjs': {\n      defaultExtension: 'js',\n      format: 'cjs',\n      main: 'index.js'\n    },\n    'rxjs/operators': {\n      defaultExtension: 'js',\n      format: 'cjs',\n      main: 'index.js'\n    },\n    /* . . . */\n  }\n});\n\n</code-example>\n</li>\n<li>\n<p>In order to be able to load the <code>tslib</code> package (which is required for files transpiled by TypeScript), add the following entry to <code>src/systemjs.config.js</code>:</p>\n<p>为了能够加载 <code>tslib</code> 包（这是由 TypeScript 转译后的文件所必需的），请将以下条目添加到 <code>src/systemjs.config.js</code> ：</p>\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"tslib-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'tslib': 'npm:tslib/tslib.js',\n    /* . . . */\n  },\n  /* . . . */\n});\n\n</code-example>\n</li>\n<li>\n<p>In order for SystemJS to be able to load the ES2015 Angular files correctly, add the following entries to <code>src/systemjs.config.js</code>:</p>\n<p>为了使 SystemJS 能够正确加载 ES2015 Angular 文件，请将以下条目添加到 <code>src/systemjs.config.js</code> ：</p>\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"plugin-babel\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'plugin-babel': 'npm:systemjs-plugin-babel/plugin-babel.js',\n    'systemjs-babel-build': 'npm:systemjs-plugin-babel/systemjs-babel-browser.js'\n  },\n\n  transpiler: 'plugin-babel',\n  /* . . . */\n  packages: {\n    /* . . . */\n    'meta': {\n      '*.mjs': {\n        babelOptions: {\n          es2015: false\n        }\n      }\n    }\n  }\n});\n\n</code-example>\n</li>\n<li>\n<p>Finally, in order to prevent TypeScript typecheck errors for dependencies, add the following entry to <code>src/tsconfig.json</code>:</p>\n<p>最后，为了防止依赖项的 TypeScript 类型检查错误，请将以下条目添加到 <code>src/tsconfig.json</code> ：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    // …\n  }\n}\n\n</code-example>\n</li>\n</ol>\n<p>With that, you can now run <code>npm start</code> and have the application built and served.\nOnce built, the application will be automatically opened in a new browser tab and it will be automatically reloaded when you make changes to the source code.</p>\n<p>有了这些，你现在就可以运行 <code>npm start</code> 并构建和启动应用程序了。构建后，应用程序将自动在新的浏览器选项卡中打开，并在你更改源代码时自动重新加载。</p>\n<p><a id=\"seed\"></a></p>\n<h2 id=\"whats-in-the-quickstart-seed\">What's in the QuickStart seed?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"快速上手种子库里都有什么\">《快速上手》种子库里都有什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#快速上手种子库里都有什么\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <strong>QuickStart seed</strong> provides a basic QuickStart playground application and other files necessary for local development.\nConsequently, there are many files in the project folder on your machine, most of which you can <a href=\"guide/file-structure\">learn about later</a>.</p>\n<p><strong>《快速上手》种子</strong> 提供了一个基本的《快速上手》游乐场应用，以及进行本地开发的其它必要文件。所以，你电脑里的项目目录中有<em>更多文件</em>，其中的大部分你都会<a href=\"guide/file-structure\">在稍后学到</a>。</p>\n<div class=\"alert is-helpful\">\n<p><strong>Reminder:</strong> The \"QuickStart seed\" example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.</p>\n<p><strong>提醒</strong>：“快速上手”种子项目是在 Angular CLI 之前创建的，因此这里讲的会和 Angular CLI 创建的应用有一些差异。</p>\n</div>\n<p><a id=\"app-files\"></a></p>\n<p>Focus on the following three TypeScript (<code>.ts</code>) files in the <code>/src</code> folder.</p>\n<p>注意 <code>/src</code> 目录中以下三个 TypeScript (<code>.ts</code>) 文件：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app.component.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n  </div>\n</div>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.ts\" path=\"setup/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&#x3C;h1>Hello {{name}}&#x3C;/h1>'\n})\nexport class AppComponent { name = 'Angular'; }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"setup/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/main.ts\" path=\"setup/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n\n</code-pane>\n</code-tabs>\n<p>All guides and cookbooks have <em>at least these core files</em>.\nEach file has a distinct purpose and evolves independently as the application grows.</p>\n<p>所有指南和烹饪书都至少有<em>这几个核心文件</em>。每个文件都有独特的用途，并且随着应用的成长各自独立演变。</p>\n<p>Files outside <code>src/</code> concern building, deploying, and testing your application.\nThey include configuration files and external dependencies.</p>\n<p><code>src/</code> 目录之外的文件为构建、部署和测试 app 相关的文件，他们只包括配置文件和外部依赖。</p>\n<p>Files inside <code>src/</code> \"belong\" to your application.\nAdd new Typescript, HTML and CSS files inside the <code>src/</code> directory, most of them inside <code>src/app</code>, unless told to do otherwise.</p>\n<p><code>src/</code> 目录下的文件才“属于”你的 app。除非明确指出，否则教程中添加的 TypeScript，HTML 和 CSS 文件都在 <code>src/</code> 目录下，大多数在 <code>src/app</code> 目录中。</p>\n<p>The following are all in <code>src/</code></p>\n<p><code>src/</code> 目录文件详情如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">File</th>\n<th align=\"left\">Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">文件</td>\n<td align=\"left\">用途</td>\n</tr>\n<tr>\n<td align=\"left\">app/app.component.ts</td>\n<td align=\"left\">Defines the same <code>AppComponent</code> as the one in the QuickStart playground. It is the <strong>root</strong> component of what will become a tree of nested components as the application evolves.</td>\n</tr>\n<tr>\n<td align=\"left\">app/app.component.ts</td>\n<td align=\"left\">定义与《快速上手》游乐场同样的 <code>AppComponent</code>。它是<strong>根</strong>组件，随着应用的演变，它将变成一颗嵌套组件树。</td>\n</tr>\n<tr>\n<td align=\"left\">app/app.module.ts</td>\n<td align=\"left\">Defines <code>AppModule</code>, the  <a href=\"guide/bootstrapping\" title=\"AppModule: the root module\">root module</a> that tells Angular how to assemble the application. When initially created, it declares only the <code>AppComponent</code>. Over time, you add more components to declare.</td>\n</tr>\n<tr>\n<td align=\"left\">app/app.module.ts</td>\n<td align=\"left\">定义 <code>AppModule</code>，<a href=\"guide/bootstrapping\" title=\"AppModule: 根模块\">根模块</a>为 Angular 描述如何组装应用。目前，它只声明了 <code>AppComponent</code>。不久，它将声明更多组件。</td>\n</tr>\n<tr>\n<td align=\"left\">main.ts</td>\n<td align=\"left\">Compiles the application with the <a href=\"guide/glossary#jit\">JIT compiler</a> and <a href=\"guide/bootstrapping\">bootstraps</a> the application's main module (<code>AppModule</code>) to run in the browser. The JIT compiler is a reasonable choice during the development of most projects and it's the only viable choice for a sample running in a <em>live-coding</em> environment such as Stackblitz. Alternative <a href=\"guide/aot-compiler\">compilation</a>, <a href=\"guide/build\">build</a>, and <a href=\"guide/deployment\">deployment</a> options are available.</td>\n</tr>\n<tr>\n<td align=\"left\">main.ts</td>\n<td align=\"left\">使<a href=\"guide/glossary#jit\">即时 (JIT) 编译器</a>用编译应用并且在浏览器中<a href=\"guide/bootstrapping\" title=\"启动应用\">启动</a>并运行应用。对于大多数项目的开发，这都是合理的选择。而且它是在像 Stackblitz 这样的<em>在线编程</em>环境中运行例子的唯一选择。你将在本文档中学习其它编译和开发选择。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"appendix-test-using-fakeasyncwaitforasync\">Appendix: Test using <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-test-using-fakeasyncwaitforasync\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"附录使用-fakeasyncwaitforasync-进行测试\">附录：使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 进行测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#附录使用-fakeasyncwaitforasync-进行测试\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you use the <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> or <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> helper functions to run unit tests (for details, read the <a href=\"guide/testing-components-scenarios#fake-async\">Testing guide</a>), you need to import <code>zone.js/testing</code> in your test setup file.</p>\n<p>如果你使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 或 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>()</code> 辅助函数来运行单元测试（详情参阅<a href=\"guide/testing-components-scenarios#fake-async\">测试指南</a>），就要在测试的准备文件中导入 <code>zone.js/testing</code>。</p>\n<div class=\"alert is-important\">\n<p>If you create project with <code>Angular/CLI</code>, it is already imported in <code>src/test.ts</code>.</p>\n<p>如果你是用 <code>Angular/CLI</code> 创建的项目，那么它已经在 <code>src/test.ts</code> 中导入过了。</p>\n</div>\n<p>And in the earlier versions of <code>Angular</code>, the following files were imported or added in your html file:</p>\n<p>在以前版本的 <code>Angular</code> 中，下列文件曾被导入或添加到 html 文件中：</p>\n<code-example format=\"html\" language=\"html\">\n\nimport 'zone.js/plugins/long-stack-trace-zone';\nimport 'zone.js/plugins/proxy';\nimport 'zone.js/plugins/sync-test';\nimport 'zone.js/plugins/jasmine-patch';\nimport 'zone.js/plugins/async-test';\nimport 'zone.js/plugins/fake-async-test';\n\n</code-example>\n<p>You can still load those files separately, but the order is important, you must import <code>proxy</code> before <code>sync-test</code>, <code>async-test</code>, <code>fake-async-test</code> and <code>jasmine-patch</code>.\nAnd you also need to import <code>sync-test</code> before <code>jasmine-patch</code>, so it is recommended to just import <code>zone-testing</code> instead of loading those separated files.</p>\n<p>你仍然可以分别导入这些文件，不过导入顺序很重要，你必须在 <code>sync-test</code>、<code>async-test</code>、<code>fake-async-test</code> 和 <code>jasmine-patch</code> 之前导入 <code>proxy</code>。还要注意在 <code>jasmine-patch</code> 之前导入 <code>sync-test</code>。所以，建议你只导入 <code>zone-testing</code> 而不要分别加载那些文件。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/upgrade\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/http\n - api/core/Component\n - api/core/NgModule\n - api/core/testing/fakeAsync\n - api/core/testing/waitForAsync\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli\n - guide/aot-compiler\n - guide/bootstrapping\n - guide/build\n - guide/deployment\n - guide/file-structure\n - guide/glossary#jit\n - guide/setup-local\n - guide/setup-local#prerequisites\n - guide/testing-components-scenarios#fake-async\n - guide/upgrade\n - guide/upgrade-performance\n - guide/upgrade-setup#appendix-test-using-fakeasyncwaitforasync\n - guide/upgrade-setup#clone\n - guide/upgrade-setup#delete-non-essential-files-optional\n - guide/upgrade-setup#download\n - guide/upgrade-setup#macos--mac-os-x-bash\n - guide/upgrade-setup#prerequisites\n - guide/upgrade-setup#setup-for-upgrading-from-angularjs\n - guide/upgrade-setup#update-dependency-versions\n - guide/upgrade-setup#whats-in-the-quickstart-seed\n - guide/upgrade-setup#windows\n - guide/upgrade-setup#下载\n - guide/upgrade-setup#克隆\n - guide/upgrade-setup#准备从-angularjs-升级\n - guide/upgrade-setup#删除非必需文件可选\n - guide/upgrade-setup#前提条件\n - guide/upgrade-setup#快速上手种子库里都有什么\n - guide/upgrade-setup#更新依赖版本\n - guide/upgrade-setup#附录使用-fakeasyncwaitforasync-进行测试\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/upgrade-setup.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/quickstart\n - https://github.com/angular/quickstart/archive/master.zip\n-->"
}