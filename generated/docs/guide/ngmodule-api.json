{
  "id": "guide/ngmodule-api",
  "title": "NgModule API",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/ngmodule-api.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngmodule-api\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-result=\"on\">宏观来讲，NgModule 是组织 Angular 应用的一种方式，它们通过 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器中的元数据来实现这一点。\n这些元数据可以分成三类：</p><p translation-origin=\"off\">At a high level, NgModules are a way to organize Angular apps\nand they accomplish this through the metadata in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>\ndecorator.\nThe metadata falls into three categories:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <strong>静态的：</strong>编译器配置，用于告诉编译器指令的选择器并通过选择器匹配的方式决定要把该指令应用到模板中的什么位置。它是通过 <code>declarations</code> 数组来配置的。</p><p translation-origin=\"off\"><strong>Static:</strong> Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured via the <code>declarations</code> array.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <strong>运行时：</strong>通过 <code>providers</code> 数组提供给注入器的配置。</p><p translation-origin=\"off\"><strong>Runtime:</strong> Injector configuration via the <code>providers</code> array.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <strong>组合/分组：</strong>通过 <code>imports</code> 和 <code>exports</code> 数组来把多个 NgModule 放在一起，并让它们可用。</p><p translation-origin=\"off\"><strong>Composability/Grouping:</strong> Bringing NgModules together and making them available via the <code>imports</code> and <code>exports</code> arrays.</p>\n\n</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n  entryComponents: [], // Generate the host factory\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n</code-example>\n<h2 id=\"ngmodule-metadata\" translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"ngmodule-metadata\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据中属性的汇总表：</p><p translation-origin=\"off\">The following table summarizes the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n\n<table>\n  <tbody><tr>\n    <th>\n<p translation-result=\"on\">      属性</p><p translation-origin=\"off\">      Property</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      说明</p><p translation-origin=\"off\">      Description</p>\n\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p>      <code>declarations</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      <em>属于该模块</em>的<a href=\"guide/ngmodule-faq#q-declarable\">可声明对象</a>（<em>组件</em>、<em>指令</em>和<em>管道</em>）的列表。</p><p translation-origin=\"off\">      A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes,\n(<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>.</p>\n\n      <ol>\n        <li>\n<p translation-result=\"on\">            当编译模板时，你需要确定一组选择器，它们将用于触发相应的指令。</p><p translation-origin=\"off\">            When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives.</p>\n\n        </li>\n        <li>\n<p translation-result=\"on\">          该模板在 NgModule 环境中编译 —— 模板的组件是在该 NgModule 内部声明的，它会使用如下规则来确定这组选择器：</p><p translation-origin=\"off\">          The template is compiled within the context of an NgModule—the NgModule within which the template's component is declared—which determines the set of selectors using the following rules:</p>\n\n          <ul>\n            <li>\n<p translation-result=\"on\">                列在 <code>declarations</code> 中的所有指令选择器。</p><p translation-origin=\"off\">                All selectors of directives listed in <code>declarations</code>.</p>\n\n            </li>\n            <li>\n<p translation-result=\"on\">                从所导入的 NgModule 中导出的那些指令的选择器。</p><p translation-origin=\"off\">                All selectors of directives exported from imported NgModules.</p>\n\n            </li>\n          </ul>\n        </li>\n      </ol>\n<p translation-result=\"on\">      组件、指令和管道<em>只能</em>属于一个模块。\n如果尝试把同一个类声明在多个模块中，编译器就会报告一个错误。\n小心，不要重复声明从其它模块中直接或间接导入的类。</p><p translation-origin=\"off\">      Components, directives, and pipes must belong to <em>exactly</em> one module.\nThe compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported\ndirectly or indirectly from another module.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p>      <code>providers</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      依赖注入提供者的列表。</p><p translation-origin=\"off\">      A list of dependency-injection providers.</p>\n\n<p translation-result=\"on\">      Angular 会使用该模块的注入器注册这些提供者。\n如果该模块是启动模块，那就会使用根注入器。</p><p translation-origin=\"off\">      Angular registers these providers with the NgModule's injector.\nIf it is the NgModule used for bootstrapping then it is the root injector.</p>\n\n<p translation-result=\"on\">      当需要注入到任何组件、指令、管道或服务时，这些服务对于本注入器的子注入器都是可用的。</p><p translation-origin=\"off\">      These services become available for injection into any component, directive, pipe or service which is a child of this injector.</p>\n\n<p translation-result=\"on\">      惰性加载模块有自己的注入器，它通常是应用的根注入器的子注入器。</p><p translation-origin=\"off\">      A lazy-loaded module has its own injector which\nis typically a child of the application root injector.</p>\n\n<p translation-result=\"on\">      惰性加载的服务是局限于这个惰性加载模块的注入器中的。\n如果惰性加载模块也提供了 <code>UserService</code>，那么在这个模块的上下文中创建的任何组件（比如在路由器导航时），都会获得这个服务的本模块内实例，而不是来自应用的根注入器的实例。</p><p translation-origin=\"off\">      Lazy-loaded services are scoped to the lazy module's injector.\nIf a lazy-loaded module also provides the <code>UserService</code>,\nany component created within that module's context (such as by router navigation)\ngets the local instance of the service, not the instance in the root application injector.</p>\n\n<p translation-result=\"on\">      其它外部模块中的组件也会使用它们自己的注入器提供的服务实例。</p><p translation-origin=\"off\">      Components in external modules continue to receive the instance provided by their injectors.</p>\n\n<p translation-result=\"on\">      要深入了解关于多级注入器及其作用域，参见<a href=\"guide/providers\">服务提供者</a>。</p><p translation-origin=\"off\">      For more information on injector hierarchy and scoping, see <a href=\"guide/providers\">Providers</a> and the <a href=\"guide/dependency-injection\">DI Guide</a>.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p>      <code>imports</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      要折叠（Folded）进本模块中的其它模块。折叠的意思是从被导入的模块中导出的那些软件资产同样会被声明在这里。</p><p translation-origin=\"off\">      A list of modules which should be folded into this module. Folded means it is\nas if all the imported NgModule's exported properties were declared here.</p>\n\n<p translation-result=\"on\">      特别是，这里列出的模块，其导出的组件、指令或管道，当在组件模板中被引用时，和本模块自己声明的那些是等价的。</p><p translation-origin=\"off\">      Specifically, it is as if the list of modules whose exported components, directives, or pipes\nare referenced by the component templates were declared in this module.</p>\n\n<p translation-result=\"on\">      组件模板可以<a href=\"guide/ngmodule-faq#q-template-reference\">引用</a>其它组件、指令或管道，不管它们是在本模块中声明的，还是从导入的模块中导出的。\n比如，只有当该模块导入了 Angular 的 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>（也可能从</code>BrowserModule<code>中间接导入）时，组件才能使用</code>NgIf<code>和</code>NgFor` 指令。</p><p translation-origin=\"off\">      A component template can <a href=\"guide/ngmodule-faq#q-template-reference\">reference</a> another component, directive, or pipe\nwhen the reference is declared in this module or if the imported module has exported it.\nFor example, a component can use the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>NgFor</code> directives only if the\nmodule has imported the Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> (perhaps indirectly by importing <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>).</p>\n\n<p translation-result=\"on\">      你可以从 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中导入很多标准指令，不过也有些常用的指令属于其它模块。\n比如，你只有导入了 Angular 的 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 时才能使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>。</p><p translation-origin=\"off\">      You can import many standard directives from the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>\nbut some familiar directives belong to other modules.\nFor example, you can use <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> only\nafter importing the Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p>      <code>exports</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      可供导入了自己的模块使用的可声明对象（<strong>组件</strong>、<strong>指令</strong>、<strong>管道类</strong>）的列表。</p><p translation-origin=\"off\">      A list of declarations—<em>component</em>, <em>directive</em>, and <em>pipe</em> classes—that\nan importing module can use.</p>\n\n<p translation-result=\"on\">      导出的可声明对象就是本模块的<em>公共 API</em>。\n只有当其它模块导入了本模块，并且本模块导出了 <code>UserComponent</code> 时，其它模块中的组件才能<a href=\"guide/ngmodule-faq#q-template-reference\">使用</a><em>本</em>模块中的 <code>UserComponent</code>。</p><p translation-origin=\"off\">      Exported declarations are the module's <em>public API</em>.\nA component in another module can <a href=\"guide/ngmodule-faq#q-template-reference\">use</a> <em>this</em>\nmodule's <code>UserComponent</code> if it imports this module and this module exports <code>UserComponent</code>.</p>\n\n<p translation-result=\"on\">      默认情况下这些可声明对象都是私有的。\n如果本模块<em>没有</em>导出 <code>UserComponent</code>，那么就只有<em>本</em>模块中的组件才能使用 <code>UserComponent</code>。</p><p translation-origin=\"off\">      Declarations are private by default.\nIf this module does <em>not</em> export <code>UserComponent</code>, then only the components within <em>this</em>\nmodule can use <code>UserComponent</code>.</p>\n\n<p translation-result=\"on\">      导入某个模块<em>并不会</em>自动重新导出被导入模块的那些导入。\n模块 B 不会因为它导入了模块 A，而模块 A 导入了 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 而能够使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。\n模块 B 必须自己导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</p><p translation-origin=\"off\">      Importing a module does <em>not</em> automatically re-export the imported module's imports.\nModule 'B' can't use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> just because it imported module 'A' which imported <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.\nModule 'B' must import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> itself.</p>\n\n<p translation-result=\"on\">      一个模块可以把另一个模块加入自己的 <code>exports</code> 列表中，这时，另一个模块的所有公共组件、指令和管道都会被导出。</p><p translation-origin=\"off\">      A module can list another module among its <code>exports</code>, in which case\nall of that module's public components, directives, and pipes are exported.</p>\n\n<p translation-result=\"on\">      <a href=\"guide/ngmodule-faq#q-reexport\">重新导出</a>可以让模块被显式传递。\n如果模块 A 重新导出了 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，而模块 B 导入了模块 A，那么模块 B 就可以使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 了 —— 即使它自己没有导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</p><p translation-origin=\"off\">      <a href=\"guide/ngmodule-faq#q-reexport\">Re-export</a> makes module transitivity explicit.\nIf Module 'A' re-exports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and Module 'B' imports Module 'A',\nModule 'B' components can use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> even though 'B' itself didn't import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p>      <code>bootstrap</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      要自动启动的组件列表。</p><p translation-origin=\"off\">      A list of components that are automatically bootstrapped.</p>\n\n<p translation-result=\"on\">      通常，在这个列表中只有一个组件，也就是应用的<em>根组件</em>。</p><p translation-origin=\"off\">      Usually there's only one component in this list, the <em>root component</em> of the application.</p>\n\n<p translation-result=\"on\">      Angular 也可以用多个引导组件进行启动，它们每一个在宿主页面中都有自己的位置。</p><p translation-origin=\"off\">      Angular can launch with multiple bootstrap components,\neach with its own location in the host web page.</p>\n\n<p translation-result=\"on\">      启动组件会自动添加到 <code>entryComponents</code> 中。</p><p translation-origin=\"off\">      A bootstrap component is automatically added to <code>entryComponents</code>.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p>      <code>entryComponents</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      那些可以动态加载进视图的组件列表。</p><p translation-origin=\"off\">      A list of components that can be dynamically loaded into the view.</p>\n\n<p translation-result=\"on\">      默认情况下，Angular 应用至少有一个入口组件，也就是根组件 <code>AppComponent</code>。\n它用作进入该应用的入口点，也就是说你通过引导它来启动本应用。</p><p translation-origin=\"off\">      By default, an Angular app always has at least one entry component, the root component, <code>AppComponent</code>. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.</p>\n\n<p translation-result=\"on\">      路由组件也是<em>入口组件</em>，因为你需要动态加载它们。\n路由器创建它们，并把它们扔到 DOM 中的 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 附近。</p><p translation-origin=\"off\">      Routed components are also <em>entry components</em> because they need to be loaded dynamically.\nThe router creates them and drops them into the DOM near a <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.</p>\n\n<p translation-result=\"on\">      虽然引导组件和路由组件都是<em>入口组件</em>，不过你不用自己把它们加到模块的 <code>entryComponents</code> 列表中，因为它们会被隐式添加进去。</p><p translation-origin=\"off\">      While the bootstrapped and routed components are <em>entry components</em>,\nyou don't have to add them to a module's <code>entryComponents</code> list,\nas they are added implicitly.</p>\n\n<p translation-result=\"on\">      Angular 会自动把模块的 <code>bootstrap</code> 中的组件和路由定义中的组件添加到 <code>entryComponents</code> 列表。</p><p translation-origin=\"off\">      Angular automatically adds components in the module's <code>bootstrap</code> and route definitions into the <code>entryComponents</code> list.</p>\n\n<p translation-result=\"on\">      而那些使用不易察觉的<a href=\"api/core/ViewContainerRef#createComponent\"><code>ViewComponentRef.createComponent()</code></a>的方式进行命令式引导的组件仍然需要添加。</p><p translation-origin=\"off\">      That leaves only components bootstrapped using one of the imperative techniques, such as <a href=\"api/core/ViewContainerRef#createComponent\"><code>ViewComponentRef.createComponent()</code></a> as undiscoverable.</p>\n\n<p translation-result=\"on\">      动态组件加载在除路由器之外的大多数应用中都不太常见。如果你需要动态加载组件，就必须自己把那些组件添加到 <code>entryComponents</code> 列表中。</p><p translation-origin=\"off\">      Dynamic component loading is not common in most apps beyond the router. If you need to dynamically load components, you must add these components to the <code>entryComponents</code> list yourself.</p>\n\n<p translation-result=\"on\">      要了解更多，参见<a href=\"guide/entry-components\">入口组件</a>一章。</p><p translation-origin=\"off\">      For more information, see <a href=\"guide/entry-components\">Entry Components</a>.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h2 id=\"more-on-ngmodules\" translation-result=\"on\">关于 NgModule 的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"more-on-ngmodules\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能还对下列内容感兴趣：</p><p translation-origin=\"off\">You may also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/feature-modules\">特性模块</a></p><p translation-origin=\"off\"><a href=\"guide/feature-modules\">Feature Modules</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/entry-components\">入口组件</a></p><p translation-origin=\"off\"><a href=\"guide/entry-components\">Entry Components</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/providers\">服务提供者</a>。</p><p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <a href=\"guide/module-types\">特性模块的分类</a>。</p><p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a>.</p>\n\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/NgModule\n - api/core/ViewContainerRef#createComponent\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/RouterOutlet\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/providers\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/ngmodule-api.md?message=docs%3A%20请简述你的修改...\n-->"
}