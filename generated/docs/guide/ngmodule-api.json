{
  "id": "guide/ngmodule-api",
  "title": "NgModule API",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/ngmodule-api.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"ngmodule-api\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<p>At a high level, NgModules are a way to organize Angular applications and they accomplish this through the metadata in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator.\nThe metadata falls into three categories:</p>\n<p>宏观来讲，NgModule 是组织 Angular 应用的一种方式，它们通过 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器中的元数据来实现这一点。这些元数据可以分成三类：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Category</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">分类</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\">Static</td>\n<td align=\"left\">Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured using the <code>declarations</code> array.</td>\n</tr>\n<tr>\n<td align=\"left\">静态</td>\n<td align=\"left\">这个编译器配置用于告诉编译器指令的选择器并通过选择器匹配的方式决定要把该指令应用到模板中的什么位置。它是通过 <code>declarations</code> 数组来配置的。</td>\n</tr>\n<tr>\n<td align=\"left\">Runtime</td>\n<td align=\"left\">Injector configuration using the <code>providers</code> array.</td>\n</tr>\n<tr>\n<td align=\"left\">运行时</td>\n<td align=\"left\">通过 <code>providers</code> 数组提供给注入器的配置。</td>\n</tr>\n<tr>\n<td align=\"left\">Composability / Grouping</td>\n<td align=\"left\">Bringing NgModules together and making them available using the <code>imports</code> and <code>exports</code> arrays.</td>\n</tr>\n<tr>\n<td align=\"left\">组合 / 分组</td>\n<td align=\"left\">通过 <code>imports</code> 和 <code>exports</code> 数组来把多个 NgModule 放在一起，并让它们可用。</td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n\n</code-example>\n<h2 id=\"ngmodule-metadata\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"ngmodule-元数据\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-元数据\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following table summarizes the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n<p>下面是 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据中属性的汇总表。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Property</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">属性</td>\n<td align=\"left\">详情</td>\n</tr>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\">A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes (<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>. <ol> <li> When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives. </li> <li> The template is compiled within the context of an NgModule —the NgModule within which the template's component is declared— which determines the set of selectors using the following rules: <ul> <li> All selectors of directives listed in <code>declarations</code>. </li> <li> All selectors of directives exported from imported NgModules. </li> </ul> </li> </ol> Components, directives, and pipes must belong to <em>exactly</em> one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\"><em>属于此模块</em>的可<a href=\"guide/ngmodule-faq#q-declarable\">声明</a>类（<em>组件</em>、<em>指令</em>和<em>管道</em>）的列表。<ol><li>编译模板时，你需要确定一组选择器，用于触发其对应的指令。</li><li>模板是在 NgModule（声明模板组件的 NgModule）的上下文中编译的，它使用以下规则确定选择器集：<ul><li><code>declarations</code> 中列出的指令的所有选择器。</li><li>从导入的 NgModules 导出的指令的所有选择器。</li></ul></li></ol>组件、指令和管道必须<em>正好</em>属于一个模块。如果你尝试在多个模块中声明同一个类，编译器会发出错误。请注意不要重新声明从另一个模块直接或间接导入的类。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\">A list of dependency-injection providers. <br> Angular registers these providers with the NgModule's injector. If it is the NgModule used for bootstrapping then it is the root injector. <br> These services become available for injection into any component, directive, pipe or service which is a child of this injector. <br> A lazy-loaded module has its own injector which is typically a child of the application root injector. <br> Lazy-loaded services are scoped to the lazy module's injector. If a lazy-loaded module also provides the <code>UserService</code>, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root application injector. <br> Components in external modules continue to receive the instance provided by their injectors. <br> For more information on injector hierarchy and scoping, see <a href=\"guide/providers\">Providers</a> and the <a href=\"guide/dependency-injection\">DI Guide</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\">依赖注入提供者的列表。<br>Angular 会使用 NgModule 的注入器注册这些提供者。如果是用于引导的 NgModule，则它是根注入器。<br>这些服务可用于注入到作为此注入器子项的任何组件、指令、管道或服务中。<br>惰性加载的模块有自己的注入器，它通常是应用程序根注入器的子。<br>惰性加载的服务的范围为延迟模块的注入器。如果惰性加载的模块还提供了 <code>UserService</code>，则在该模块的上下文中创建的任何组件（例如通过路由器导航）都会获取服务的本地实例，而不是根应用程序注入器中的实例。<br>外部模块中的组件会继续接收其注入器提供的实例。<br>有关注入器层次结构和范围的更多信息，请参阅<a href=\"guide/providers\">提供者</a>和<a href=\"guide/dependency-injection\">DI 指南</a>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\">A list of modules which should be folded into this module. Folded means it is as if all the imported NgModule's exported properties were declared here. <br> Specifically, it is as if the list of modules whose exported components, directives, or pipes are referenced by the component templates were declared in this module. <br> A component template can <a href=\"guide/ngmodule-faq#q-template-reference\">reference</a> another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it. For example, a component can use the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directives only if the module has imported the Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> (perhaps indirectly by importing <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>). <br> You can import many standard directives from the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> but some familiar directives belong to other modules. For example, you can use <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> only after importing the Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\">应该折叠到此模块中的模块列表。Folded 意味着就好像所有导入的 NgModule 的导出属性都在这里声明了。<br>具体来说，就好像在此模块中声明了其导出的组件、指令或管道被组件模板引用的模块列表。<br>当在此模块中声明引用或者导入的模块已导出它时，组件模板<a href=\"guide/ngmodule-faq#q-template-reference\">可以引用</a>另一个组件、指令或管道。例如，只有在模块导入了 Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>（可能是通过导入 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 间接）时，组件才能使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令。<br>你可以从 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 导入许多标准指令，但一些熟悉的指令属于其他模块。例如，你只能在导入 Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 之后使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\">A list of declarations —<em>component</em>, <em>directive</em>, and <em>pipe</em> classes— that an importing module can use. <br> Exported declarations are the module's <em>public API</em>. A component in another module can <a href=\"guide/ngmodule-faq#q-template-reference\">use</a> <em>this</em> module's <code>UserComponent</code> if it imports this module and this module exports <code>UserComponent</code>. <br> Declarations are private by default. If this module does <em>not</em> export <code>UserComponent</code>, then only the components within <em>this</em> module can use <code>UserComponent</code>. <br> Importing a module does <em>not</em> automatically re-export the imported module's imports. Module 'B' can't use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> just because it imported module 'A' which imported <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>. Module 'B' must import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> itself. <br> A module can list another module among its <code>exports</code>, in which case all of that module's public components, directives, and pipes are exported. <br> <a href=\"guide/ngmodule-faq#q-reexport\">Re-export</a> makes module transitivity explicit. If Module 'A' re-exports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and Module 'B' imports Module 'A', Module 'B' components can use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> even though 'B' itself didn't import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\">导入模块可以使用的声明列表（<em>组件</em>、<em>指令</em>和<em>管道</em>类）。<br>导出的声明是模块的<em>公共 API</em>。如果另一个模块中的组件导入此模块并且此模块导出 <code>UserComponent</code>，则另一个模块中的组件可以<a href=\"guide/ngmodule-faq#q-template-reference\">用</a><em>此</em>模块的 <code>UserComponent</code>。<br>默认情况下，声明是私有的。如果此模块<em>不</em>导出 <code>UserComponent</code>，则只有<em>此</em>模块中的组件可以使用 <code>UserComponent</code>。<br>导入模块<em>不会</em>自动重新导出导入模块的导入。模块“B”不能使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，因为它导入了模块“A”，而模块“A”又导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。模块“B”必须导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 本身。<br>一个模块可以在其 <code>exports</code> 中列出另一个模块，在这种情况下，该模块的所有公共组件、指令和管道都会被导出。<br><a href=\"guide/ngmodule-faq#q-reexport\">重新导出</a>使模块可传递性显式。如果模块“A”重新导出 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，而模块“B”导入了模块“A”，则模块“B”组件可以用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，即使“B”本身没有导入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\">A list of components that are automatically bootstrapped. <br> Usually there's only one component in this list, the <em>root component</em> of the application. <br> Angular can launch with multiple bootstrap components, each with its own location in the host web page.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\">自动引导的组件列表。<br>通常此列表中只有一个组件，即应用程序的<em>根组件</em>。<br>Angular 可以用多个引导组件启动，每个组件在宿主网页中都有自己的位置。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"more-on-ngmodules\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"关于-ngmodule-的更多知识\">关于 NgModule 的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#关于-ngmodule-的更多知识\"><i class=\"material-icons\">link</i></a></h2>\n<p>You may also be interested in the following:</p>\n<p>你可能还对下列内容感兴趣：</p>\n<ul>\n<li>\n<p><a href=\"guide/feature-modules\">Feature Modules</a></p>\n<p><a href=\"guide/feature-modules\">特性模块</a></p>\n</li>\n<li>\n<p><a href=\"guide/entry-components\">Entry Components</a></p>\n<p><a href=\"guide/entry-components\">入口组件</a></p>\n</li>\n<li>\n<p><a href=\"guide/providers\">Providers</a></p>\n<p><a href=\"guide/providers\">服务提供者</a></p>\n</li>\n<li>\n<p><a href=\"guide/module-types\">Types of Feature Modules</a></p>\n<p><a href=\"guide/module-types\">特性模块的分类</a></p>\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-api#ngmodule-元数据\n - guide/ngmodule-api#关于-ngmodule-的更多知识\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/providers\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/ngmodule-api.md?message=docs%3A%20请简述你的修改...\n-->"
}