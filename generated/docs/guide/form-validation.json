{
  "id": "guide/form-validation",
  "title": "Form validation",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/form-validation.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"form-validation\" translation-result=\"on\">表单验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#form-validation\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"form-validation\">Form validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#form-validation\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">通过验证用户输入的准确性和完整性，来增强整体数据质量。</p><p translation-origin=\"off\">Improve overall data quality by validating user input for accuracy and completeness.</p>\n\n<p translation-result=\"on\">本文展示了在界面中如何验证用户输入，并显示有用的验证信息，先使用模板驱动表单方式，再使用响应式表单方式。</p><p translation-origin=\"off\">This page shows how to validate user input in the UI and display useful validation messages\nusing both reactive and template-driven forms. It assumes some basic knowledge of the two\nforms modules.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">参见<a href=\"guide/forms\">表单</a>和<a href=\"guide/reactive-forms\">响应式表单</a>了解关于这些选择的更多知识。</p><p translation-origin=\"off\">If you're new to forms, start by reviewing the <a href=\"guide/forms\">Forms</a> and\n<a href=\"guide/reactive-forms\">Reactive Forms</a> guides.</p>\n\n</div>\n<h2 id=\"template-driven-validation\" translation-result=\"on\">模板驱动验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#template-driven-validation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-driven-validation\">Template-driven validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#template-driven-validation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">为了往模板驱动表单中添加验证机制，你要添加一些验证属性，就像<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\">原生的 HTML 表单验证器</a>。\nAngular 会用指令来匹配这些具有验证功能的指令。</p><p translation-origin=\"off\">To add validation to a template-driven form, you add the same validation attributes as you\nwould with <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\">native HTML form validation</a>.\nAngular uses directives to match these attributes with validator functions in the framework.</p>\n\n<p translation-result=\"on\">每当表单控件中的值发生变化时，Angular 就会进行验证，并生成一个验证错误的列表（对应着 INVALID 状态）或者 null（对应着 VALID 状态）。</p><p translation-origin=\"off\">Every time the value of a form control changes, Angular runs validation and generates\neither a list of validation errors, which results in an INVALID status, or null, which results in a VALID status.</p>\n\n<p translation-result=\"on\">你可以通过把 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 导出成局部模板变量来查看该控件的状态。\n比如下面这个例子就把 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 导出成了一个名叫 <code>name</code> 的变量：</p><p translation-origin=\"off\">You can then inspect the control's state by exporting <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> to a local template variable.\nThe following example exports <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> into a variable called <code>name</code>:</p>\n\n<code-example path=\"form-validation/src/app/template/hero-form-template.component.html\" region=\"name-with-error-msg\" header=\"template/hero-form-template.component.html (name)\">\n&#x3C;input id=\"name\" name=\"name\" class=\"form-control\"\n      required <a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a>=\"4\" appForbiddenName=\"bob\"\n      [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\" >\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.invalid &#x26;&#x26; (name.dirty || name.touched)\"\n    class=\"alert alert-danger\">\n\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.errors.required\">\n    Name is required.\n  &#x3C;/div>\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.errors.minlength\">\n    Name must be at least 4 characters long.\n  &#x3C;/div>\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.errors.forbiddenName\">\n    Name cannot be Bob.\n  &#x3C;/div>\n\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">请注意以下几点：</p><p translation-origin=\"off\">Note the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   <code>&#x3C;input></code> 元素带有一些 HTML 验证属性：<code>required</code> 和 <code><a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a></code>。它还带有一个自定义的验证器指令 <code>forbiddenName</code>。要了解更多信息，参见<a href=\"guide/form-validation#custom-validators\">自定义验证器</a>一节。</p><p translation-origin=\"off\">The <code>&#x3C;input></code> element carries the HTML validation attributes: <code>required</code> and <code><a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a></code>. It\nalso carries a custom validator directive, <code>forbiddenName</code>. For more\ninformation, see <a href=\"guide/form-validation#custom-validators\">Custom validators</a> section.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>#name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code> 把 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 导出成了一个名叫 <code>name</code> 的局部变量。<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 把自己控制的 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例的属性映射出去，让你能在模板中检查控件的状态，比如 <code>valid</code> 和 <code>dirty</code>。要了解完整的控件属性，参见 API 参考手册中的<a href=\"api/forms/AbstractControl\">AbstractControl</a>。</p><p translation-origin=\"off\"><code>#name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code> exports <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> into a local variable called <code>name</code>. <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> mirrors many of the properties of its underlying\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instance, so you can use this in the template to check for control states such as <code>valid</code> and <code>dirty</code>. For a full list of control properties, see the <a href=\"api/forms/AbstractControl\">AbstractControl</a>\nAPI reference.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>&#x3C;div></code> 元素的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 展示了一组嵌套的消息 <code>div</code>，但是只在有“name”错误和控制器为 <code>dirty</code> 或者 <code>touched</code> 时才出现。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on the <code>&#x3C;div></code> element reveals a set of nested message <code>divs</code>\nbut only if the <code>name</code> is invalid and the control is either <code>dirty</code> or <code>touched</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   每个嵌套的 <code>&#x3C;div></code> 为其中一个可能出现的验证错误显示一条自定义消息。比如 <code>required</code>、<code><a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a></code> 和 <code>forbiddenName</code>。</p><p translation-origin=\"off\">Each nested <code>&#x3C;div></code> can present a custom message for one of the possible validation errors.\nThere are messages for <code>required</code>, <code><a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a></code>, and <code>forbiddenName</code>.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<h4 id=\"why-check-dirty-and-touched\" translation-result=\"on\">为何检查 <strong>dirty</strong> 和 <strong>touched</strong>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#why-check-dirty-and-touched\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"why-check-dirty-and-touched\">Why check <em>dirty</em> and <em>touched</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#why-check-dirty-and-touched\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你肯定不希望应用在用户还没有编辑过表单的时候就给他们显示错误提示。\n对 <code>dirty</code> 和 <code>touched</code> 的检查可以避免这种问题。改变控件的值会改变控件的 <code>dirty</code>（脏）状态，而当控件失去焦点时，就会改变控件的 <code>touched</code>（碰过）状态。</p><p translation-origin=\"off\">You may not want your application to display errors before the user has a chance to edit the form.\nThe checks for <code>dirty</code> and <code>touched</code> prevent errors from showing until the user\ndoes one of two things: changes the value,\nturning the control dirty; or blurs the form control element, setting the control to touched.</p>\n\n</div>\n<h2 id=\"reactive-form-validation\" translation-result=\"on\">响应式表单的验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#reactive-form-validation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"reactive-form-validation\">Reactive form validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#reactive-form-validation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在响应式表单中，权威数据源是其组件类。不应该通过模板上的属性来添加验证器，而应该在组件类中直接把验证器函数添加到表单控件模型上（<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>）。然后，一旦控件发生了变化，Angular 就会调用这些函数。</p><p translation-origin=\"off\">In a reactive form, the source of truth is the component class. Instead of adding validators through attributes in the template, you add validator functions directly to the form control model in the component class. Angular then calls these functions whenever the value of the control changes.</p>\n\n<h3 id=\"validator-functions\" translation-result=\"on\">验证器函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#validator-functions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"validator-functions\">Validator functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#validator-functions\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">有两种验证器函数：同步验证器和异步验证器。</p><p translation-origin=\"off\">There are two types of validator functions: sync validators and async validators.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <strong>同步验证器</strong>函数接受一个控件实例，然后返回一组验证错误或 <code>null</code>。你可以在实例化一个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 时把它作为构造函数的第二个参数传进去。</p><p translation-origin=\"off\"><strong>Sync validators</strong>: functions that take a control instance and immediately return either a set of validation errors or <code>null</code>. You can pass these in as the second argument when you instantiate a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <strong>异步验证器</strong>函数接受一个控件实例，并返回一个承诺（Promise）或可观察对象（Observable），它们稍后会发出一组验证错误或者 <code>null</code>。你可以在实例化一个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 时把它作为构造函数的第三个参数传进去。</p><p translation-origin=\"off\"><strong>Async validators</strong>: functions that take a control instance and return a Promise\nor Observable that later emits a set of validation errors or <code>null</code>. You can\npass these in as the third argument when you instantiate a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">注意：出于性能方面的考虑，只有在所有同步验证器都通过之后，Angular 才会运行异步验证器。当每一个异步验证器都执行完之后，才会设置这些验证错误。</p><p translation-origin=\"off\">Note: for performance reasons, Angular only runs async validators if all sync validators pass. Each must complete before errors are set.</p>\n\n<h3 id=\"built-in-validators\" translation-result=\"on\">内置验证器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#built-in-validators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"built-in-validators\">Built-in validators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#built-in-validators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以<a href=\"guide/form-validation#custom-validators\">写自己的验证器</a>，也可以使用一些 Angular 内置的验证器。</p><p translation-origin=\"off\">You can choose to <a href=\"guide/form-validation#custom-validators\">write your own validator functions</a>, or you can use some of\nAngular's built-in validators.</p>\n\n<p translation-result=\"on\">模板驱动表单中可用的那些属性型验证器（如 <code>required</code>、<code><a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a></code> 等）对应于 <code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> 类中的同名函数。要想查看内置验证器的全列表，参见 API 参考手册中的<a href=\"api/forms/Validators\">验证器</a>部分。</p><p translation-origin=\"off\">The same built-in validators that are available as attributes in template-driven forms, such as <code>required</code> and <code><a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a></code>, are all available to use as functions from the <code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> class. For a full list of built-in validators, see the <a href=\"api/forms/Validators\">Validators</a> API reference.</p>\n\n<p translation-result=\"on\">要想把这个英雄表单改造成一个响应式表单，你还是用那些内置验证器，但这次改为用它们的函数形态。</p><p translation-origin=\"off\">To update the hero form to be a reactive form, you can use some of the same\nbuilt-in validators—this time, in function form. See below:</p>\n\n<a id=\"reactive-component-class\"></a>\n<code-example path=\"form-validation/src/app/reactive/hero-form-reactive.component.1.ts\" region=\"form-group\" header=\"reactive/hero-form-reactive.component.ts (validator functions)\">\nngOnInit(): void {\n  this.heroForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    'name': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(this.hero.name, [\n      Validators.required,\n      Validators.minLength(4),\n      forbiddenNameValidator(/bob/i) // &#x3C;-- Here's how you pass in the custom validator.\n    ]),\n    'alterEgo': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(this.hero.alterEgo),\n    'power': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(this.hero.power, Validators.required)\n  });\n\n}\n\nget name() { return this.heroForm.get('name'); }\n\nget power() { return this.heroForm.get('power'); }\n\n</code-example>\n<p translation-result=\"on\">注意</p><p translation-origin=\"off\">Note that:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code>name</code> 控件设置了两个内置验证器：<code>Validators.required</code> 和 <code>Validators.minLength(4)</code>。要了解更多信息，参见本章的<a href=\"guide/form-validation#custom-validators\">自定义验证器</a>一节。</p><p translation-origin=\"off\">The name control sets up two built-in validators—<code>Validators.required</code> and <code>Validators.minLength(4)</code>—and one custom validator, <code>forbiddenNameValidator</code>. For more details see the <a href=\"guide/form-validation#custom-validators\">Custom validators</a> section in this guide.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 由于这些验证器都是同步验证器，因此你要把它们作为第二个参数传进去。</p><p translation-origin=\"off\">As these validators are all sync validators, you pass them in as the second argument. </p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 可以通过把这些函数放进一个数组后传进去，可以支持多重验证器。</p><p translation-origin=\"off\">Support multiple validators by passing the functions in as an array.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   这个例子添加了一些 getter 方法。在响应式表单中，你通常会通过它所属的控件组（FormGroup）的 <code>get</code> 方法来访问表单控件，但有时候为模板定义一些 getter 作为简短形式。</p><p translation-origin=\"off\">This example adds a few getter methods. In a reactive form, you can always access any form control through the <code>get</code> method on its parent group, but sometimes it's useful to define getters as shorthands\nfor the template.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">如果你到模板中找到 name 输入框，就会发现它和模板驱动的例子很相似。</p><p translation-origin=\"off\">If you look at the template for the name input again, it is fairly similar to the template-driven example.</p>\n\n<code-example path=\"form-validation/src/app/reactive/hero-form-reactive.component.html\" region=\"name-with-error-msg\" header=\"reactive/hero-form-reactive.component.html (name with error msg)\">\n&#x3C;input id=\"name\" class=\"form-control\"\n      <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\" required >\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.invalid &#x26;&#x26; (name.dirty || name.touched)\"\n    class=\"alert alert-danger\">\n\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.errors.required\">\n    Name is required.\n  &#x3C;/div>\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.errors.minlength\">\n    Name must be at least 4 characters long.\n  &#x3C;/div>\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"name.errors.forbiddenName\">\n    Name cannot be Bob.\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">关键改动是：</p><p translation-origin=\"off\">Key takeaways:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   该表单不再导出任何指令，而是使用组件类中定义的 <code>name</code> 读取器。</p><p translation-origin=\"off\">The form no longer exports any directives, and instead uses the <code>name</code> getter defined in\nthe component class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <code>required</code> 属性仍然存在，虽然验证不再需要它，但你仍然要在模板中保留它，以支持 CSS 样式或可访问性。</p><p translation-origin=\"off\">The <code>required</code> attribute is still present. While it's not necessary for validation purposes,\nyou may want to keep it in your template for CSS styling or accessibility reasons.</p>\n\n</li>\n</ul>\n<h2 id=\"custom-validators\" translation-result=\"on\">自定义验证器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#custom-validators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"custom-validators\">Custom validators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#custom-validators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">由于内置验证器无法适用于所有应用场景，有时候你还是得创建自定义验证器。</p><p translation-origin=\"off\">Since the built-in validators won't always match the exact use case of your application, sometimes you'll want to create a custom validator.</p>\n\n<p translation-result=\"on\">考虑前面的<a href=\"guide/form-validation#reactive-component-class\">例子</a>中的 <code>forbiddenNameValidator</code> 函数。该函数的定义看起来是这样的：</p><p translation-origin=\"off\">Consider the <code>forbiddenNameValidator</code> function from previous\n<a href=\"guide/form-validation#reactive-component-class\">examples</a> in\nthis guide. Here's what the definition of that function looks like:</p>\n\n<code-example path=\"form-validation/src/app/shared/forbidden-name.directive.ts\" region=\"custom-validator\" header=\"shared/forbidden-name.directive.ts (forbiddenNameValidator)\">\n/** A hero's name can't match the given regular expression */\nexport function forbiddenNameValidator(nameRe: RegExp): <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> {\n  return (control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): {[key: string]: any} | null => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n\n</code-example>\n<p translation-result=\"on\">这个函数实际上是一个工厂，它接受一个用来检测指定名字是否已被禁用的正则表达式，并返回一个验证器函数。</p><p translation-origin=\"off\">The function is actually a factory that takes a regular expression to detect a <em>specific</em> forbidden name and returns a validator function.</p>\n\n<p translation-result=\"on\">在本例中，禁止的名字是“bob”；\n验证器会拒绝任何带有“bob”的英雄名字。\n在其他地方，只要配置的正则表达式可以匹配上，它可能拒绝“alice”或者任何其他名字。</p><p translation-origin=\"off\">In this sample, the forbidden name is \"bob\", so the validator will reject any hero name containing \"bob\".\nElsewhere it could reject \"alice\" or any name that the configuring regular expression matches.</p>\n\n<p translation-result=\"on\"><code>forbiddenNameValidator</code> 工厂函数返回配置好的验证器函数。\n该函数接受一个 Angular 控制器对象，并在控制器值有效时返回 null，或无效时返回验证错误对象。\n验证错误对象通常有一个名为验证秘钥（<code>forbiddenName</code>）的属性。其值为一个任意词典，你可以用来插入错误信息（<code>{name}</code>）。</p><p translation-origin=\"off\">The <code>forbiddenNameValidator</code> factory returns the configured validator function.\nThat function takes an Angular control object and returns <em>either</em>\nnull if the control value is valid <em>or</em> a validation error object.\nThe validation error object typically has a property whose name is the validation key, <code>'forbiddenName'</code>,\nand whose value is an arbitrary dictionary of values that you could insert into an error message, <code>{name}</code>.</p>\n\n<p translation-result=\"on\">自定义异步验证器和同步验证器很像，只是它们必须返回一个稍后会输出 null 或“验证错误对象”的承诺（Promise）或可观察对象，如果是可观察对象，那么它必须在某个时间点被完成（complete），那时候这个表单就会使用它输出的最后一个值作为验证结果。（译注：HTTP 服务是自动完成的，但是某些自定义的可观察对象可能需要手动调用 complete 方法）</p><p translation-origin=\"off\">Custom async validators are similar to sync validators, but they must instead return a Promise or Observable\nthat later emits null or a validation error object. In the case of an Observable, the Observable must complete,\nat which point the form uses the last value emitted for validation.</p>\n\n<h3 id=\"adding-to-reactive-forms\" translation-result=\"on\">添加响应式表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-reactive-forms\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-to-reactive-forms\">Adding to reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-reactive-forms\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在响应式表单组件中，添加自定义验证器相当简单。你所要做的一切就是直接把这个函数传给 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 。</p><p translation-origin=\"off\">In reactive forms, custom validators are fairly simple to add. All you have to do is pass the function directly\nto the <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.</p>\n\n<code-example path=\"form-validation/src/app/reactive/hero-form-reactive.component.1.ts\" region=\"custom-validator\" header=\"reactive/hero-form-reactive.component.ts (validator functions)\">\nthis.heroForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  'name': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(this.hero.name, [\n    Validators.required,\n    Validators.minLength(4),\n    forbiddenNameValidator(/bob/i) // &#x3C;-- Here's how you pass in the custom validator.\n  ]),\n  'alterEgo': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(this.hero.alterEgo),\n  'power': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(this.hero.power, Validators.required)\n});\n\n</code-example>\n<h3 id=\"adding-to-template-driven-forms\" translation-result=\"on\">添加到模板驱动表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-template-driven-forms\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-to-template-driven-forms\">Adding to template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-template-driven-forms\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在模板驱动表单中，你不用直接访问 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例。所以不能像响应式表单中那样把验证器传进去，而应该在模板中添加一个指令。</p><p translation-origin=\"off\">In template-driven forms, you don't have direct access to the <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instance, so you can't pass the\nvalidator in like you can for reactive forms. Instead, you need to add a directive to the template.</p>\n\n<p translation-result=\"on\"><code>ForbiddenValidatorDirective</code> 指令相当于 <code>forbiddenNameValidator</code> 的包装器。</p><p translation-origin=\"off\">The corresponding <code>ForbiddenValidatorDirective</code> serves as a wrapper around the <code>forbiddenNameValidator</code>.</p>\n\n<p translation-result=\"on\">Angular 在验证过程中能识别出指令的作用，是因为指令把自己注册成了 <code><a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a></code> 提供者，该提供者拥有一组可扩展的验证器。</p><p translation-origin=\"off\">Angular recognizes the directive's role in the validation process because the directive registers itself\nwith the <code><a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a></code> provider, a provider with an extensible collection of validators.</p>\n\n<code-example path=\"form-validation/src/app/shared/forbidden-name.directive.ts\" region=\"directive-providers\" header=\"shared/forbidden-name.directive.ts (providers)\">\nproviders: [{provide: <a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a>, <a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a>: ForbiddenValidatorDirective, multi: true}]\n\n</code-example>\n<p translation-result=\"on\">然后该指令类实现了 <code><a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a></code> 接口，以便它能简单的与 Angular 表单集成在一起。这个指令的其余部分有助于你理解它们是如何协作的：</p><p translation-origin=\"off\">The directive class then implements the <code><a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a></code> interface, so that it can easily integrate\nwith Angular forms. Here is the rest of the directive to help you get an idea of how it all\ncomes together:</p>\n\n<code-example path=\"form-validation/src/app/shared/forbidden-name.directive.ts\" region=\"directive\" header=\"shared/forbidden-name.directive.ts (directive)\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appForbiddenName]',\n  providers: [{provide: <a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a>, <a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a>: ForbiddenValidatorDirective, multi: true}]\n})\nexport class ForbiddenValidatorDirective implements <a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appForbiddenName') forbiddenName: string;\n\n  validate(control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): {[key: string]: any} | null {\n    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)\n                              : null;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">一旦 <code>ForbiddenValidatorDirective</code> 写好了，你只要把 <code>forbiddenName</code> 选择器添加到输入框上就可以激活这个验证器了。比如：</p><p translation-origin=\"off\">Once the <code>ForbiddenValidatorDirective</code> is ready, you can simply add its selector, <code>appForbiddenName</code>, to any input element to activate it. For example:</p>\n\n<code-example path=\"form-validation/src/app/template/hero-form-template.component.html\" region=\"name-input\" header=\"template/hero-form-template.component.html (forbidden-name-input)\">\n&#x3C;input id=\"name\" name=\"name\" class=\"form-control\"\n      required <a href=\"api/forms/MinLengthValidator\" class=\"code-anchor\">minlength</a>=\"4\" appForbiddenName=\"bob\"\n      [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\" >\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你可能注意到了自定义验证器指令是用 <code><a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a></code> 而不是 <code>useClass</code> 来实例化的。注册的验证器必须是这个 <code>ForbiddenValidatorDirective</code> 实例本身，也就是表单中 <code>forbiddenName</code> 属性被绑定到了\"bob\"的那个。如果用 <code>useClass</code> 来代替 <code><a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a></code>，就会注册一个新的类实例，而它是没有 <code>forbiddenName</code> 的。</p><p translation-origin=\"off\">You may have noticed that the custom validation directive is instantiated with <code><a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a></code>\nrather than <code>useClass</code>. The registered validator must be <em>this instance</em> of\nthe <code>ForbiddenValidatorDirective</code>—the instance in the form with\nits <code>forbiddenName</code> property bound to “bob\". If you were to replace\n<code><a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a></code> with <code>useClass</code>, then you’d be registering a new class instance, one that\ndoesn’t have a <code>forbiddenName</code>.</p>\n\n</div>\n<h2 id=\"control-status-css-classes\" translation-result=\"on\">表示控件状态的 CSS 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#control-status-css-classes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"control-status-css-classes\">Control status CSS classes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#control-status-css-classes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">像 AngularJS 中一样，Angular 会自动把很多控件属性作为 CSS 类映射到控件所在的元素上。你可以使用这些类来根据表单状态给表单控件元素添加样式。目前支持下列类：</p><p translation-origin=\"off\">Like in AngularJS, Angular automatically mirrors many control properties onto the form control element as CSS classes. You can use these classes to style form control elements according to the state of the form. The following classes are currently supported:</p>\n\n<ul>\n<li>\n<p><code>.ng-valid</code></p>\n</li>\n<li>\n<p><code>.ng-invalid</code></p>\n</li>\n<li>\n<p><code>.ng-pending</code></p>\n</li>\n<li>\n<p><code>.ng-pristine</code></p>\n</li>\n<li>\n<p><code>.ng-dirty</code></p>\n</li>\n<li>\n<p><code>.ng-untouched</code></p>\n</li>\n<li>\n<p><code>.ng-touched</code></p>\n</li>\n</ul>\n<p translation-result=\"on\">这个英雄表单使用 <code>.ng-valid</code> 和 <code>.ng-invalid</code> 来设置每个表单控件的边框颜色。</p><p translation-origin=\"off\">The hero form uses the <code>.ng-valid</code> and <code>.ng-invalid</code> classes to\nset the color of each form control's border.</p>\n\n<code-example path=\"form-validation/src/assets/forms.css\" header=\"forms.css (status classes)\">\n\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n\n</code-example>\n<h2 id=\"cross-field-validation\" translation-result=\"on\">跨字段交叉验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#cross-field-validation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"cross-field-validation\">Cross field validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#cross-field-validation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节将展示如何进行跨字段验证。这里假设你已经有了创建自定义验证器所需的基础知识。</p><p translation-origin=\"off\">This section shows how to perform cross field validation. It assumes some basic knowledge of creating custom validators.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你以前没有创建过自定义验证器，请先阅读<a href=\"guide/form-validation#custom-validators\">自定义验证器</a>一节。</p><p translation-origin=\"off\">If you haven't created custom validators before, start by reviewing the <a href=\"guide/form-validation#custom-validators\">custom validators section</a>.</p>\n\n</div>\n<p translation-result=\"on\">在下一节中，我们要确保英雄们不能通过填写表单来暴露他们的真实身份。要做到这一点，我们就要验证英雄的名字和他的第二人格（alterEgo）是否匹配。</p><p translation-origin=\"off\">In the following section, we will make sure that our heroes do not reveal their true identities by filling out the Hero Form. We will do that by validating that the hero names and alter egos do not match.</p>\n\n<h3 id=\"adding-to-reactive-forms-1\" translation-result=\"on\">添加到响应式表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-reactive-forms-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-to-reactive-forms-1\">Adding to reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-reactive-forms-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">表单具有下列结构：</p><p translation-origin=\"off\">The form has the following structure:</p>\n\n<code-example language=\"javascript\">\nconst heroForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  'name': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n  'alterEgo': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n  'power': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n});\n</code-example>\n<p translation-result=\"on\">注意，name 和 alterEgo 是兄弟控件。要想在单个的自定义验证器中计算这两个控件，我们就得在它们共同的祖先控件（<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>）中进行验证。这样，我们就可以查询 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的子控件，从而让我们能够比较它们的值。</p><p translation-origin=\"off\">Notice that the name and alterEgo are sibling controls. To evaluate both controls in a single custom validator, we should perform the validation in a common ancestor control: the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>. That way, we can query the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> for the child controls which will allow us to compare their values.</p>\n\n<p translation-result=\"on\">要想给 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 添加验证器，就要在创建时把一个新的验证器传给它的第二个参数。</p><p translation-origin=\"off\">To add a validator to the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, pass the new validator in as the second argument on creation.</p>\n\n<code-example language=\"javascript\">\nconst heroForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  'name': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n  'alterEgo': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n  'power': new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n}, { <a href=\"api/forms/AbstractControlOptions#validators\" class=\"code-anchor\">validators</a>: identityRevealedValidator });\n</code-example>\n<p translation-result=\"on\">验证器的代码如下：</p><p translation-origin=\"off\">The validator code is as follows:</p>\n\n<code-example path=\"form-validation/src/app/shared/identity-revealed.directive.ts\" region=\"cross-validation-validator\" header=\"shared/identity-revealed.directive.ts\">\n/** A hero's name can't match the hero's alter ego */\nexport const identityRevealedValidator: <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> = (control: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>): <a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a> | null => {\n  const name = control.get('name');\n  const alterEgo = control.get('alterEgo');\n\n  return name &#x26;&#x26; alterEgo &#x26;&#x26; name.value === alterEgo.value ? { 'identityRevealed': true } : null;\n};\n\n</code-example>\n<p translation-result=\"on\">这个身份验证器实现了 <code><a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a></code> 接口。它接收一个 Angular 表单控件对象作为参数，当表单有效时，它返回一个 null，否则返回 <code><a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a></code> 对象。</p><p translation-origin=\"off\">The identity validator implements the <code><a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a></code> interface. It takes an Angular control object as an argument and returns either null if the form is valid, or <code><a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a></code> otherwise.</p>\n\n<p translation-result=\"on\">我们先通过调用 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的 <a href=\"api/forms/AbstractControl#get\">get</a> 方法来获取子控件。然后，简单地比较一下 <code>name</code> 和 <code>alterEgo</code> 控件的值。</p><p translation-origin=\"off\">First we retrieve the child controls by calling the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>'s <a href=\"api/forms/AbstractControl#get\">get</a> method. Then we simply compare the values of the <code>name</code> and <code>alterEgo</code> controls.</p>\n\n<p translation-result=\"on\">如果这两个值不一样，那么英雄的身份就应该继续保密，我们可以安全的返回 null。否则就说明英雄的身份已经暴露了，我们必须通过返回一个错误对象来把这个表单标记为无效的。</p><p translation-origin=\"off\">If the values do not match, the hero's identity remains secret, and we can safely return null. Otherwise, the hero's identity is revealed and we must mark the form as invalid by returning an error object.</p>\n\n<p translation-result=\"on\">接下来，为了提供更好的用户体验，当表单无效时，我们还要显示一个恰当的错误信息。</p><p translation-origin=\"off\">Next, to provide better user experience, we show an appropriate error message when the form is invalid.</p>\n\n<code-example path=\"form-validation/src/app/reactive/hero-form-reactive.component.html\" region=\"cross-validation-error-message\" header=\"reactive/hero-form-template.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroForm.errors?.identityRevealed &#x26;&#x26; (heroForm.touched || heroForm.dirty)\" class=\"cross-validation-error-message alert alert-danger\">\n    Name cannot match alter ego.\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">注意，我们需要检查：</p><p translation-origin=\"off\">Note that we check if:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 应该有一个由 <code>identityRevealed</code> 验证器返回的交叉验证错误对象。</p><p translation-origin=\"off\">the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> has the cross validation error returned by the <code>identityRevealed</code> validator, </p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用户已经和表单进行过<a href=\"guide/form-validation#why-check-dirty-and-touched\">交互</a>。</p><p translation-origin=\"off\">the user is yet to <a href=\"guide/form-validation#why-check-dirty-and-touched\">interact</a> with the form.</p>\n\n</li>\n</ul>\n<h3 id=\"adding-to-template-driven-forms-1\" translation-result=\"on\">添加到模板驱动表单中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-template-driven-forms-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"adding-to-template-driven-forms-1\">Adding to template driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#adding-to-template-driven-forms-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">首先，我们必须创建一个指令，它会包装这个验证器函数。我们使用 <code><a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a></code> 令牌来把它作为验证器提供出来。如果你还不清楚为什么要这么做或者不能完全理解这种语法，请重新访问前面的<a href=\"guide/form-validation#adding-to-template-driven-forms\">小节</a>。</p><p translation-origin=\"off\">First we must create a directive that will wrap the validator function. We provide it as the validator using the <code><a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a></code> token. If you are not sure why, or you do not fully understand the syntax, revisit the previous <a href=\"guide/form-validation#adding-to-template-driven-forms\">section</a>.</p>\n\n<code-example path=\"form-validation/src/app/shared/identity-revealed.directive.ts\" region=\"cross-validation-directive\" header=\"shared/identity-revealed.directive.ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appIdentityRevealed]',\n  providers: [{ provide: <a href=\"api/forms/NG_VALIDATORS\" class=\"code-anchor\">NG_VALIDATORS</a>, <a href=\"api/core/ExistingSansProvider#useExisting\" class=\"code-anchor\">useExisting</a>: IdentityRevealedValidatorDirective, multi: true }]\n})\nexport class IdentityRevealedValidatorDirective implements <a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a> {\n  validate(control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): <a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a> {\n    return identityRevealedValidator(control)\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">接下来，我们要把该指令添加到 HTML 模板中。由于验证器必须注册在表单的最高层，所以我们要把该指令放在 <code>form</code> 标签上。</p><p translation-origin=\"off\">Next, we have to add the directive to the html template. Since the validator must be registered at the highest level in the form, we put the directive on the <code>form</code> tag.</p>\n\n<code-example path=\"form-validation/src/app/template/hero-form-template.component.html\" region=\"cross-validation-register-validator\" header=\"template/hero-form-template.component.html\">\n&#x3C;form #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" appIdentityRevealed>\n\n</code-example>\n<p translation-result=\"on\">为了提供更好的用户体验，当表单无效时，我们要显示一个恰当的错误信息。</p><p translation-origin=\"off\">To provide better user experience, we show an appropriate error message when the form is invalid.</p>\n\n<code-example path=\"form-validation/src/app/template/hero-form-template.component.html\" region=\"cross-validation-error-message\" header=\"template/hero-form-template.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroForm.errors?.identityRevealed &#x26;&#x26; (heroForm.touched || heroForm.dirty)\" class=\"cross-validation-error-message alert alert-danger\">\n    Name cannot match alter ego.\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">注意，我们需要检查：</p><p translation-origin=\"off\">Note that we check if:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 该表单具有一个由 <code>identityRevealed</code> 验证器提供的交叉验证错误对象。</p><p translation-origin=\"off\">the form has the cross validation error returned by the <code>identityRevealed</code> validator, </p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 用户已经和表单进行过<a href=\"guide/form-validation#why-check-dirty-and-touched\">交互</a>。</p><p translation-origin=\"off\">the user is yet to <a href=\"guide/form-validation#why-check-dirty-and-touched\">interact</a> with the form.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这样就完成了这个交叉验证的例子。我们的做法是：</p><p translation-origin=\"off\">This completes the cross validation example. We managed to:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 基于两个相邻控件的值来验证表单</p><p translation-origin=\"off\">validate the form based on the values of two sibling controls, </p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 当用户与表单交互过并且验证失败时，才显示一个描述性的错误信息。</p><p translation-origin=\"off\">show a descriptive error message after the user interacted with the form and the validation failed.</p>\n\n</li>\n</ul>\n<h2 id=\"async-validation\" translation-result=\"on\">异步验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#async-validation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"async-validation\">Async Validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#async-validation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节展示如何创建异步验证器。这里假设你已经具有了一些创建<a href=\"guide/form-validation#custom-validators\">自定义验证器</a>的基础知识。</p><p translation-origin=\"off\">This section shows how to create asynchronous validators. It assumes some basic knowledge of creating <a href=\"guide/form-validation#custom-validators\">custom validators</a>.</p>\n\n<h3 id=\"the-basics\" translation-result=\"on\">基础<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#the-basics\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-basics\">The Basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#the-basics\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">就像同步验证器有 <code><a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a></code> 和 <code><a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a></code> 接口一样，异步验证器也有自己的对应物：<code><a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a></code> 和 <code><a href=\"api/forms/AsyncValidator\" class=\"code-anchor\">AsyncValidator</a></code>。</p><p translation-origin=\"off\">Just like synchronous validators have the <code><a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a></code> and <code><a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a></code> interfaces, asynchronous validators have their own counterparts: <code><a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a></code> and <code><a href=\"api/forms/AsyncValidator\" class=\"code-anchor\">AsyncValidator</a></code>.</p>\n\n<p translation-result=\"on\">它们非常像，但是有下列不同：</p><p translation-origin=\"off\">They are very similar with the only difference being:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">它们必须返回承诺（Promise）或可观察对象（Observable），</p><p translation-origin=\"off\">They must return a Promise or an Observable,</p>\n\n</li>\n<li>\n<p translation-result=\"on\">返回的可观察对象必须是有限的，也就是说，它必须在某个时间点结束（complete）。要把无尽的可观察对象转换成有限的，可以使用 <code>first</code>、<code>last</code>、<code>take</code> 或 <code>takeUntil</code> 等过滤型管道对其进行处理。</p><p translation-origin=\"off\">The observable returned must be finite, meaning it must complete at some point. To convert an infinite observable into a finite one, pipe the observable through a filtering operator such as <code>first</code>, <code>last</code>, <code>take</code>, or <code>takeUntil</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">注意！异步验证总是会在同步验证之后执行，并且只有当同步验证成功了之后才会执行。如果更基本的验证方法已经失败了，那么这能让表单避免进行可能会很昂贵的异步验证过程，比如 HTTP 请求。</p><p translation-origin=\"off\">It is important to note that the asynchronous validation happens after the synchronous validation, and is performed only if the synchronous validation is successful. This check allows forms to avoid potentially expensive async validation processes such as an HTTP request if more basic validation methods fail.</p>\n\n<p translation-result=\"on\">在异步验证器开始之后，表单控件会进入 <code>pending</code> 状态。你可以监视该控件的 <code>pending</code> 属性，利用它来给用户一些视觉反馈，表明正在进行验证。</p><p translation-origin=\"off\">After asynchronous validation begins, the form control enters a <code>pending</code> state. You can inspect the control's <code>pending</code> property and use it to give visual feedback about the ongoing validation.</p>\n\n<p translation-result=\"on\">常见的 UI 处理模式是在执行异步验证时显示一个旋转指示标（spinner）。下面的例子展示了在模板驱动表单中该怎么做：</p><p translation-origin=\"off\">A common UI pattern is to show a spinner while the async validation is being performed. The following example presents how to achieve this with template-driven forms:</p>\n\n<code-example language=\"html\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\" #<a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a>=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\" appSomeAsyncValidator>\n&#x3C;app-spinner *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"model.pending\">&#x3C;/app-spinner>\n</code-example>\n<h3 id=\"implementing-custom-async-validator\" translation-result=\"on\">实现自定义异步验证器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#implementing-custom-async-validator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"implementing-custom-async-validator\">Implementing Custom Async Validator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#implementing-custom-async-validator\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在下一节中，会异步执行一个验证，以确保英雄选取了一个还没有人选过的第二人格。新的英雄不断招募，而老的英雄不断离开。这意味着我们没法提前拿到一个可用的第二人格列表。</p><p translation-origin=\"off\">In the following section, validation is performed asynchronously to ensure that our heroes pick an alter ego that is not already taken. New heroes are constantly enlisting and old heroes are leaving the service. That means that we do not have the list of available alter egos ahead of time.</p>\n\n<p translation-result=\"on\">要验证潜在的第二人格，我们需要咨询一个存有全部已招募英雄的中央数据库。而这个过程是异步的，我们需要一个特殊的验证器。</p><p translation-origin=\"off\">To validate the potential alter ego, we need to consult a central database of all currently enlisted heroes. The process is asynchronous, so we need a special validator for that.</p>\n\n<p translation-result=\"on\">我们先创建一个验证器类。</p><p translation-origin=\"off\">Let's start by creating the validator class.</p>\n\n<code-example path=\"form-validation/src/app/shared/alter-ego.directive.ts\" region=\"async-validator\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root' })\nexport class UniqueAlterEgoValidator implements <a href=\"api/forms/AsyncValidator\" class=\"code-anchor\">AsyncValidator</a> {\n  constructor(private heroesService: HeroesService) {}\n\n  validate(\n    ctrl: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>\n  ): Promise&#x3C;<a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a> | null> | Observable&#x3C;<a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a> | null> {\n    return this.heroesService.isAlterEgoTaken(ctrl.value).pipe(\n      map(isTaken => (isTaken ? { uniqueAlterEgo: true } : null)),\n      catchError(() => of(null))\n    );\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">如你所见，<code>UniqueAlterEgoValidator</code> 类实现了 <code><a href=\"api/forms/AsyncValidator\" class=\"code-anchor\">AsyncValidator</a></code> 接口。在其构造函数中，我们注入了一个\n<code>HeroesService</code>，其接口如下：</p><p translation-origin=\"off\">As you can see, the <code>UniqueAlterEgoValidator</code> class implements the <code><a href=\"api/forms/AsyncValidator\" class=\"code-anchor\">AsyncValidator</a></code> interface. In the constructor, we inject the <code>HeroesService</code> that has the following interface:</p>\n\n<code-example language=\"typescript\">\ninterface HeroesService {\n  isAlterEgoTaken: (alterEgo: string) => Observable&#x3C;boolean>;\n}\n</code-example>\n<p translation-result=\"on\">在真实的应用中，<code>HeroesService</code> 负责向英雄数据库发起一个 HTTP 请求，以检查该第二人格是否可用。\n从该验证器的视角看，此服务的具体实现无关紧要，所以我们仅仅针对 <code>HeroesService</code> 接口来写实现代码。</p><p translation-origin=\"off\">In a real world application, the <code>HeroesService</code> is responsible for making an HTTP request to the hero database to check if the alter ego is available. From the validator's point of view, the actual implementation of the service is not important, so we can just code against the <code>HeroesService</code> interface.</p>\n\n<p translation-result=\"on\">当验证开始的时候，<code>UniqueAlterEgoValidator</code> 把任务委托给 <code>HeroesService</code> 的 <code>isAlterEgoTaken()</code> 方法，并传入当前控件的值。这时候，该控件会被标记为 <code>pending</code> 状态，直到 <code>validate()</code> 方法所返回的可观察对象完成（complete）了。</p><p translation-origin=\"off\">As the validation begins, the <code>UniqueAlterEgoValidator</code> delegates to the <code>HeroesService</code> <code>isAlterEgoTaken()</code> method with the current control value. At this point the control is marked as <code>pending</code> and remains in this state until the observable chain returned from the <code>validate()</code> method completes.</p>\n\n<p translation-result=\"on\"><code>isAlterEgoTaken()</code> 方法会发出一个 HTTP 请求，以检查该第二人格是否可用，并返回一个 <code>Observable&#x3C;boolean></code> 型结果。我们通过 <code>map</code> 操作符把响应对象串起来，并把它转换成一个有效性结果。\n与往常一样，如果表单有效则返回 <code>null</code>，否则返回 <code><a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a></code>。我们还是用 <code>catchError</code> 操作符来确保对任何潜在错误都进行了处理。</p><p translation-origin=\"off\">The <code>isAlterEgoTaken()</code> method dispatches an HTTP request that checks if the alter ego is available, and returns <code>Observable&#x3C;boolean></code> as the result. We pipe the response through the <code>map</code> operator and transform it into a validation result. As always, we return <code>null</code> if the form is valid, and <code><a href=\"api/forms/ValidationErrors\" class=\"code-anchor\">ValidationErrors</a></code> if it is not. We make sure to handle any potential errors with the <code>catchError</code> operator.</p>\n\n<p translation-result=\"on\">这里，我们决定将 <code>isAlterEgoTaken()</code> 中的错误视为成功验证，因为如果没能发起验证请求，未必代表这个第二人格是无效的。你也可以将其视为失败，并返回 <code>ValidationError</code> 对象。</p><p translation-origin=\"off\">Here we decided that <code>isAlterEgoTaken()</code> error is treated as a successful validation, because failure to make a validation request does not necessarily mean that the alter ego is invalid. You could handle the error differently and return the <code>ValidationError</code> object instead.</p>\n\n<p translation-result=\"on\">一段时间之后，可观察对象完成了，异步验证也就结束了。这时候 <code>pending</code> 标志就改成了 <code>false</code>，并且表单的有效性也更新了。</p><p translation-origin=\"off\">After some time passes, the observable chain completes and the async validation is done. The <code>pending</code> flag is set to <code>false</code>, and the form validity is updated.</p>\n\n<h3 id=\"note-on-performance\" translation-result=\"on\">性能上的注意事项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#note-on-performance\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"note-on-performance\">Note on performance<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/form-validation#note-on-performance\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">默认情况下，每当表单值变化之后，都会执行所有验证器。对于同步验证器，没有什么会显著影响应用性能的地方。不过，异步验证器通常会执行某种 HTTP 请求来对控件进行验证。如果在每次按键之后都发出 HTTP 请求会给后端 API 带来沉重的负担，应该尽量避免。</p><p translation-origin=\"off\">By default, all validators are run after every form value change. With synchronous validators, this will not likely have a noticeable impact on application performance. However, it's common for async validators to perform some kind of HTTP request to validate the control. Dispatching an HTTP request after every keystroke could put a strain on the backend API, and should be avoided if possible.</p>\n\n<p translation-result=\"on\">我们可以把 <code>updateOn</code> 属性从 <code>change</code>（默认值）改成 <code>submit</code> 或 <code>blur</code> 来推迟表单验证的更新时机。</p><p translation-origin=\"off\">We can delay updating the form validity by changing the <code>updateOn</code> property from <code>change</code> (default) to <code>submit</code> or <code>blur</code>.</p>\n\n<p translation-result=\"on\">对于模板驱动表单：</p><p translation-origin=\"off\">With template-driven forms:</p>\n\n<code-example language=\"html\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\" [ngModelOptions]=\"{updateOn: 'blur'}\">\n</code-example>\n<p translation-result=\"on\">对于响应式表单：</p><p translation-origin=\"off\">With reactive forms:</p>\n\n<code-example language=\"typescript\">\nnew <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {updateOn: 'blur'});\n</code-example>\n<p translation-result=\"on\"><strong>你可以运行<live-example></live-example>来查看完整的响应式和模板驱动表单的代码。</strong></p><p translation-origin=\"off\"><strong>You can run the <live-example></live-example> to see the complete reactive and template-driven example code.</strong></p>\n\n\n</div>\n\n<!-- links to this doc:\n - api/forms/CheckboxRequiredValidator\n - api/forms/EmailValidator\n - api/forms/MaxLengthValidator\n - api/forms/MinLengthValidator\n - api/forms/PatternValidator\n - api/forms/RequiredValidator\n - guide/forms-overview\n - guide/glossary\n - guide/reactive-forms\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/core/Directive\n - api/core/ExistingSansProvider#useExisting\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/Input\n - api/forms/AbstractControl\n - api/forms/AbstractControl#get\n - api/forms/AbstractControlOptions#validators\n - api/forms/AsyncValidator\n - api/forms/AsyncValidatorFn\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/MinLengthValidator\n - api/forms/NG_VALIDATORS\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModel#model\n - api/forms/ValidationErrors\n - api/forms/Validator\n - api/forms/ValidatorFn\n - api/forms/Validators\n - guide/form-validation#adding-to-reactive-forms\n - guide/form-validation#adding-to-reactive-forms-1\n - guide/form-validation#adding-to-template-driven-forms\n - guide/form-validation#adding-to-template-driven-forms-1\n - guide/form-validation#async-validation\n - guide/form-validation#built-in-validators\n - guide/form-validation#control-status-css-classes\n - guide/form-validation#cross-field-validation\n - guide/form-validation#custom-validators\n - guide/form-validation#form-validation\n - guide/form-validation#implementing-custom-async-validator\n - guide/form-validation#note-on-performance\n - guide/form-validation#reactive-component-class\n - guide/form-validation#reactive-form-validation\n - guide/form-validation#template-driven-validation\n - guide/form-validation#the-basics\n - guide/form-validation#validator-functions\n - guide/form-validation#why-check-dirty-and-touched\n - guide/forms\n - guide/reactive-forms\n - https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/form-validation.md?message=docs%3A%20请简述你的修改...\n-->"
}