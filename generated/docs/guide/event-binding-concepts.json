{
  "id": "guide/event-binding-concepts",
  "title": "事件绑定的工作原理",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/guide/event-binding-concepts.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"how-event-binding-works\">How event binding works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#how-event-binding-works\"><i class=\"material-icons\">link</i></a></h1>\n<h1 id=\"事件绑定的工作原理\">事件绑定的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#事件绑定的工作原理\"><i class=\"material-icons\">link</i></a></h1>\n<p>In an event binding, Angular configures an event handler for the target event.\nYou can use event binding with your own custom events.</p>\n<p>在事件绑定中，Angular 会为目标事件配置事件处理函数。你还可以将事件绑定用于自定义事件。</p>\n<p>When the component or directive raises the event, the handler executes the template statement.\nThe template statement performs an action in response to the event.</p>\n<p>当组件或指令引发事件时，处理程序就会执行模板语句。模板语句会执行一个动作来响应这个事件。</p>\n<h2 id=\"handling-events\">Handling events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#handling-events\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"处理事件\">处理事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#处理事件\"><i class=\"material-icons\">link</i></a></h2>\n<p>A common way to handle events is to pass the event object, <code>$event</code>, to the method handling the event.\nThe <code>$event</code> object often contains information the method needs, such as a user's name or an image URL.</p>\n<p>处理事件的常见方法之一是把事件对象 <code>$event</code> 传给处理该事件的方法。<code>$event</code> 对象通常包含该方法所需的信息，比如用户名或图片 URL。</p>\n<p>The target event determines the shape of the <code>$event</code> object.\nIf the target event is a native DOM element event, then <code>$event</code> is a <a href=\"https://developer.mozilla.org/docs/Web/Events\">DOM event object</a>, with properties such as <code>target</code> and <code>target.value</code>.</p>\n<p>目标事件决定了 <code>$event</code> 对象的形态。如果目标事件是来自原生 DOM 元素的，那么 <code>$event</code> 是一个<a href=\"https://developer.mozilla.org/docs/Web/Events\">DOM 事件对象</a>，它具有 <code>target</code> 和 <code>target.value</code> 等属性。</p>\n<p>In the following example the code sets the <code>&#x3C;input></code> <code>value</code> property by binding to the <code>name</code> property.</p>\n<p>在下面的例子中，代码通过绑定到 <code>name</code> 来设置 <code>&#x3C;input></code> 的 <code>value</code> 属性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\">\n&#x3C;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=getValue($event)\">\n\n</code-example>\n<p>With this example, the following actions occur:</p>\n<p>在这个例子中，会发生下列操作：</p>\n<ol>\n<li>\n<p>The code binds to the <code>input</code> event of the <code>&#x3C;input></code> element, which allows the code to listen for changes.</p>\n<p>该代码绑定到 <code>&#x3C;input></code> 元素的 <code>input</code> 事件，该事件允许代码监听这些更改。</p>\n</li>\n<li>\n<p>When the user makes changes, the component raises the <code>input</code> event.</p>\n<p>当用户做出更改时，该组件会引发 <code>input</code> 事件。</p>\n</li>\n<li>\n<p>The binding executes the statement within a context that includes the DOM event object, <code>$event</code>.</p>\n<p>这个绑定会在一个上下文中执行该语句，此上下文中包含 DOM 事件对象 <code>$event</code>。</p>\n</li>\n<li>\n<p>Angular retrieves the changed text by calling <code>getValue($event.target)</code> and updates the <code>name</code> property.</p>\n<p>Angular 会通过调用 <code>getValue($event.target)</code> 来获取更改后的文本，并用它更新 <code>name</code> 属性。</p>\n</li>\n</ol>\n<p>If the event belongs to a directive or component, <code>$event</code> has the shape that the directive or component produces.</p>\n<p>如果该事件属于某个指令或组件，那么 <code>$event</code> 就具有指令或组件中生成的形态。</p>\n<div class=\"alert is-helpful\">\n<p>The type of <code>$event.target</code> is only <code>EventTarget</code> in the template.\nIn the <code>getValue()</code> method, the target is cast to an <code>HTMLInputElement</code> to allow type-safe access to its <code>value</code> property.</p>\n<p>在模板中，<code>$event.target</code> 的类型只是 <code>EventTarget</code>。在 <code>getValue()</code> 方法中，把此目标转为 <code>HTMLInputElement</code> 类型，以允许对其 <code>value</code> 属性进行类型安全的访问。</p>\n<code-example path=\"event-binding/src/app/app.component.ts\" region=\"getValue\">\ngetValue(event: <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>): string {\n  return (event.target as HTMLInputElement).value;\n}\n\n</code-example>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/event-binding\n-->\n<!-- links from this doc:\n - api/router/Event\n - guide/event-binding-concepts#handling-events\n - guide/event-binding-concepts#how-event-binding-works\n - guide/event-binding-concepts#事件绑定的工作原理\n - guide/event-binding-concepts#处理事件\n - https://developer.mozilla.org/docs/Web/Events\n - https://github.com/angular/angular-cn/edit/cn/aio/content/guide/event-binding-concepts.md?message=docs%3A%20请简述你的修改...\n-->"
}