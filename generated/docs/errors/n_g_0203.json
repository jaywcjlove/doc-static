{
  "id": "errors/NG0203",
  "title": "NG0203: `inject()` must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with `EnvironmentInjector#runInContext`.\n\n`inject()` 只能从注入上下文（比如构造函数、工厂函数、字段初始化器或使用了 `EnvironmentInjector#runInContext` 的函数）中调用",
  "contents": "<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/errors/NG0203.md?message=docs(...)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n<div class=\"content\">\n\n  <h1 id=\"ng0203-inject-must-be-called-from-an-injection-context-such-as-a-constructor-a-factory-function-a-field-initializer-or-a-function-used-with-environmentinjectorrunincontextinject-只能从注入上下文比如构造函数工厂函数字段初始化器或使用了-environmentinjectorrunincontext-的函数中调用\">NG0203: `inject()` must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with `EnvironmentInjector#runInContext`.\n\n`inject()` 只能从注入上下文（比如构造函数、工厂函数、字段初始化器或使用了 `EnvironmentInjector#runInContext` 的函数）中调用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#ng0203-inject-must-be-called-from-an-injection-context-such-as-a-constructor-a-factory-function-a-field-initializer-or-a-function-used-with-environmentinjectorrunincontextinject-只能从注入上下文比如构造函数工厂函数字段初始化器或使用了-environmentinjectorrunincontext-的函数中调用\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 translation-result=\"on\" id=\"说明\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#说明\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>You see this error when you try to use the <code>inject()</code> function outside of the allowed injection context. The injection context is available during the class creation and initialization. It is also available to functions\nused with <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>#runInContext</code>.</p>\n<p>当试图在允许的注入上下文之外使用 <code>inject()</code> 函数时，就会看到此错误。注入上下文只能在类的创建和初始化过程中使用。它还可用于使用了 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>#runInContext</code> 的函数中。</p>\n<p>In practice the <code>inject()</code> calls are allowed in a constructor, a constructor parameter and a field initializer:</p>\n<p>在实践中，构造函数、构造函数参数和字段初始化器中允许进行 <code>inject()</code> 调用：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class Car {\n  radio: Radio|undefined;\n\n  // OK: field initializer\n  spareTyre = inject(Tyre);\n  \n  constructor() {\n    // OK: constructor body\n    this.radio = inject(Radio);\n  }\n}\n</code-example>\n<p>It is also legal to call <code>inject</code> from a provider's factory:</p>\n<p>从提供者的工厂调用 <code>inject</code> 也是合法的：</p>\n<code-example language=\"typescript\">\nproviders: [\n  {provide: Car, useFactory: () => {\n    // OK: a class factory\n    const engine = inject(Engine);\n    return new Car(engine);\n  }}\n]\n</code-example>\n<p>Calls to the <code>inject()</code> function outside of the class creation or <code>runInContext</code> will result in error. Most notably, calls to <code>inject()</code> are disallowed after a class instance was created, in methods (including lifecycle hooks):</p>\n<p>在类的创建上下文或 <code>runInContext</code> 之外调用 <code>inject()</code> 函数将导致错误。最值得注意的是，在创建类实例之后，不允许在方法（包括生命周期钩子）中调用 <code>inject()</code> ) ：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\nexport class CarComponent {\n  ngOnInit() {\n    // ERROR: too late, the component instance was already created\n    const engine = inject(Engine);\n    engine.start();\n  }\n}\n</code-example>\n\n  </div>\n\n  <br>\n\n  <div class=\"debugging\">\n    <h2 translation-result=\"on\" id=\"如何排除本错误\">如何排除本错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#如何排除本错误\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>Work backwards from the stack trace of the error to identify a place where the disallowed call to <code>inject()</code> is located. </p>\n<p>从错误堆栈跟踪中向后找，以识别出不允许的 <code>inject()</code> 调用所在的位置。</p>\n<p>To fix the error move the <code>inject()</code> call to an allowed place (usually a class constructor or a field initializer).</p>\n<p>要解决此错误，请将 <code>inject()</code> 调用移动到允许的位置（通常是类构造函数或字段初始化器）。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  </div>\n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/EnvironmentInjector\n - api/core/Injectable\n - errors/NG0203#debugging-the-error\n - errors/NG0203#description\n - errors/NG0203#ng0203-inject-must-be-called-from-an-injection-context-such-as-a-constructor-a-factory-function-a-field-initializer-or-a-function-used-with-environmentinjectorrunincontextinject-只能从注入上下文比如构造函数工厂函数字段初始化器或使用了-environmentinjectorrunincontext-的函数中调用\n - errors/NG0203#如何排除本错误\n - errors/NG0203#说明\n - https://github.com/angular/angular-cn/edit/cn/aio/content/errors/NG0203.md?message=docs(...)%3A%20请简述你的修改...\n-->"
}