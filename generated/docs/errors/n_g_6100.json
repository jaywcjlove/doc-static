{
  "id": "errors/NG6100",
  "title": "NG6100: Setting NgModule.id to module.id is a common anti-pattern\n\n把 NgModule.id 设置为 module.id 是一种常见的反模式",
  "contents": "<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/errors/NG6100.md?message=docs(...)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n<div class=\"content\">\n\n  <h1 id=\"ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern把-ngmoduleid-设置为-moduleid-是一种常见的反模式\">NG6100: Setting NgModule.id to module.id is a common anti-pattern\n\n把 NgModule.id 设置为 module.id 是一种常见的反模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern把-ngmoduleid-设置为-moduleid-是一种常见的反模式\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 translation-result=\"on\" id=\"说明\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#说明\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>Using <code>module.id</code> as an NgModule <code>id</code> is a common anti-pattern and is likely not serving a useful purpose in your code.</p>\n<p>使用 <code>module.id</code> 作为 NgModule 的 <code>id</code> 是一种常见的反模式，并且可能在你的代码中无法达到预期效果。</p>\n<p>NgModules can be declared with an <code>id</code>:</p>\n<p>NgModules 可以用 <code>id</code> 来声明：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  id: 'my_module'\n})\nexport class MyModule {}\n</code-example>\n<p>Declaring an <code>id</code> makes the NgModule available for lookup via the <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> operation. This functionality is rarely used, mainly in very specific bundling scenarios when lazily loading NgModules without obtaining direct references to them. In most Angular code, ES dynamic <code>import()</code> (<code>import('./path/to/module')</code>) should be used instead, as this provides a direct reference to the NgModule being loaded without the need for a global registration side effect.</p>\n<p>声明一个 <code>id</code> 可以让 NgModule 通过 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> 操作进行查找。此特性很少使用，主要用在非常特定的打包场景中惰性加载 NgModules 而不获取对它们的直接引用。在大多数 Angular 代码中，应该改用 ES 动态 <code>import()</code>（<code>import('./path/to/module')</code>），因为这样可以提供对正在加载的 NgModule 的直接引用，而无需全局注册的副作用.</p>\n<p>If you are not using <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code>, you do not need to provide <code>id</code>s for your NgModules. Providing one has a significant drawback: it makes the NgModule non-tree-shakable, which can have an impact on your bundle size.</p>\n<p>如果你不使用 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code>，则无需为 NgModules 提供 <code>id</code>。提供它有一个显着的缺点：它使 NgModule 不可摇树优化，这可能会影响你的包大小。</p>\n<p>In particular, the pattern of specifying <code>id: module.id</code> results from a misunderstanding of <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code>. In earlier versions of Angular, it was sometimes necessary to include the property <code>moduleId: module.id</code> in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata.</p>\n<p>特别是，指定 <code>id: module.id</code> 的模式是由于对 <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code> 的误解导致的。在早期版本的 Angular 中，有时有必要在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中包含属性 <code>moduleId: module.id</code>。</p>\n<p>Using <code>module.id</code> for <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code> likely results from confusion between <code>@<a href=\"api/core/Component#moduleId\" class=\"code-anchor\">Component.moduleId</a></code> and <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code>. <code>module.id</code> would not typically be useful for <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> operations as the <code>id</code> needs to be a well-known string, and <code>module.id</code> is usually opaque to consumers.</p>\n<p>将 <code>module.id</code> 用作 <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code> 可能是由于混淆了 <code>@<a href=\"api/core/Component#moduleId\" class=\"code-anchor\">Component.moduleId</a></code> 和 <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code>。<code>module.id</code> 通常对于 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> 操作还有点用，因为 <code>id</code> 需要的是众所周知的字符串，而 <code>module.id</code> 通常对消费者来说是不可见的。</p>\n\n  </div>\n\n  <br>\n\n  <div class=\"debugging\">\n    <h2 translation-result=\"on\" id=\"如何排除本错误\">如何排除本错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#如何排除本错误\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>You can remove the <code>id: module.id</code> declaration from your NgModules. The compiler ignores this declaration and issues this warning instead.</p>\n<p>你可以从 NgModules 中删除 <code>id: module.id</code> 声明。编译器会忽略此声明并发出此警告。</p>\n\n  </div>\n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Component#moduleId\n - api/core/NgModule\n - api/core/NgModule#id\n - api/core/getNgModuleById\n - errors/NG6100#debugging-the-error\n - errors/NG6100#description\n - errors/NG6100#ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern把-ngmoduleid-设置为-moduleid-是一种常见的反模式\n - errors/NG6100#如何排除本错误\n - errors/NG6100#说明\n - https://github.com/angular/angular-cn/edit/cn/aio/content/errors/NG6100.md?message=docs(...)%3A%20请简述你的修改...\n-->"
}