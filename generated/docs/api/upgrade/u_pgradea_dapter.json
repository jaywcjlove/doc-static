{
  "id": "api/upgrade/UpgradeAdapter",
  "title": "UpgradeAdapter",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/upgrade\", \"name\": \"@angular/upgrade\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/upgrade/UpgradeAdapter\", \"name\": \"UpgradeAdapter\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/upgrade\">@angular/upgrade</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L21-L841\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L21-L841\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"upgradeadapter\">UpgradeAdapter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#upgradeadapter\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label class\">class</label>\n    <label class=\"api-status-label deprecated\">已弃用</label>\n    <label class=\"github-links api-status-label final\" title=\"This class should not be extended.\">\n      <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/docs/PUBLIC_API.md#final-classes\">final</a>\n    </label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p>Use <code><a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a></code> to allow AngularJS and Angular to coexist in a single application.</p>\n<p>使用 <code><a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a></code> 允许 AngularJS 和 Angular 在单个应用程序中共存。</p>\n\n    <p no-translate=\"\"><a href=\"api/upgrade/UpgradeAdapter#description\">查看\"说明\"...</a></p>\n  </section>\n<section class=\"deprecated\">\n  <p><strong>已弃用:</strong> Deprecated since v5. Use <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> instead, which also supports\n<a href=\"guide/aot-compiler\">Ahead-of-Time compilation</a>.</p>\n<p>自 v5 以来已弃用。改用 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> ，它也支持<a href=\"guide/aot-compiler\">Ahead-of-Time 编译</a>。</p>\n\n</section><section class=\"class-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a> {\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#constructor()\"><span class=\"member-name\">constructor</span>(ng2AppModule: Type&#x3C;any>, compilerOptions?: CompilerOptions)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Component\"><span class=\"member-name\">downgradeNg2Component</span>(component: Type&#x3C;any>): Function</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Component\"><span class=\"member-name\">upgradeNg1Component</span>(name: string): Type&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#registerForNg1Tests\"><span class=\"member-name\">registerForNg1Tests</span>(modules?: string[]): UpgradeAdapterRef</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#bootstrap\"><span class=\"member-name\">bootstrap</span>(element: Element, modules?: any[], config?: IAngularBootstrapConfig): UpgradeAdapterRef</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Provider\"><span class=\"member-name\">upgradeNg1Provider</span>(name: string, options?: { asToken: any; })</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Provider\"><span class=\"member-name\">downgradeNg2Provider</span>(token: any): Function</a>\n}\n</code-example>\n\n</section>\n\n  \n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p>The <code><a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a></code> allows:</p>\n<p><code><a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a></code> 允许：</p>\n<ol>\n<li>\n<p>creation of Angular component from AngularJS component directive\n(See [UpgradeAdapter#upgradeNg1Component()])</p>\n<p>   从 AngularJS 组件指令创建 Angular\n组件（请参阅[UpgradeAdapter#upgradeNg1Component()][UpgradeAdapter#upgradeNg1Component()]）</p>\n</li>\n<li>\n<p>creation of AngularJS directive from Angular component.\n(See [UpgradeAdapter#downgradeNg2Component()])</p>\n<p>   从 Angular 组件创建 AngularJS\n指令。（请参阅[UpgradeAdapter#downgradeNg2Component()][UpgradeAdapter#downgradeNg2Component()]</p>\n</li>\n<li>\n<p>Bootstrapping of a hybrid Angular application which contains both of the frameworks\ncoexisting in a single application.</p>\n<p>混合 Angular 应用程序的引导，该应用程序包含在单个应用程序中共存的两个框架。</p>\n</li>\n</ol>\n  <p>Further information is available in the <a href=\"api/upgrade/UpgradeAdapter#usage-notes\">Usage Notes...</a></p>\n</section>\n  \n<h2 id=\"constructor\">构造函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#constructor\"><i class=\"material-icons\">link</i></a></h2>\n<a id=\"constructor()\"></a>\n<table class=\"is-full-width method-table constructor\">\n  <tbody>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">constructor</span>(ng2AppModule: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any>, compilerOptions?: <a href=\"api/core/CompilerOptions\" class=\"code-anchor\">CompilerOptions</a>)</code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table constructor-overload-parameters\">\n  <tbody>\n    <tr class=\"constructor-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>ng2AppModule</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"constructor-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>compilerOptions</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/CompilerOptions\" class=\"code-anchor\">CompilerOptions</a></code></td>\n      <td class=\"param-description\">\n        <p>可选值。默认值为 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<section class=\"instance-methods\">\n  <a name=\"methods\"></a>\n  <h2 id=\"instance-methods\">方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#instance-methods\"><i class=\"material-icons\">link</i></a></h2>\n  <a id=\"downgradeNg2Component\"></a>\n<table class=\"is-full-width method-table instance-methods\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"downgradeng2component\">downgradeNg2Component()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#downgradeng2component\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L193-L274\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L193-L274\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p>Allows Angular Component to be used from AngularJS.</p>\n<p>允许从 AngularJS 使用 Angular 组件。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">downgradeNg2Component</span>(component: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any>): Function</code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数-1\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-methods-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>component</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p><code>Function</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p>Use <code>downgradeNg2Component</code> to create an AngularJS Directive Definition Factory from\nAngular Component. The adapter will bootstrap Angular component from within the\nAngularJS template.</p>\n<p>使用 <code>downgradeNg2Component</code> 从 Angular 组件创建 AngularJS 指令定义工厂。适配器将从 AngularJS\n模板中引导 Angular 组件。</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"downgradeNg2Component-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Component-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"mental-model\">Mental Model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#mental-model\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"心理模型\">心理模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#心理模型\"><i class=\"material-icons\">link</i></a></h5>\n<ol>\n<li>\n<p>The component is instantiated by being listed in AngularJS template. This means that the\nhost element is controlled by AngularJS, but the component's view will be controlled by\nAngular.</p>\n<p>   该组件是通过在 AngularJS 模板中列出来实例化的。这意味着宿主元素由 AngularJS\n控制，但组件的视图将由 Angular 控制。</p>\n</li>\n<li>\n<p>Even thought the component is instantiated in AngularJS, it will be using Angular\nsyntax. This has to be done, this way because we must follow Angular components do not\ndeclare how the attributes should be interpreted.</p>\n<p>   即使组件是在 AngularJS 中实例化的，它也将使用 Angular 语法。必须这样做，因为我们必须遵循\nAngular 组件，而不是声明应该如何解释属性。</p>\n</li>\n<li>\n<p><code>ng-model</code> is controlled by AngularJS and communicates with the downgraded Angular component\nby way of the <code><a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a></code> interface from @angular/forms. Only components that\nimplement this interface are eligible.</p>\n</li>\n</ol>\n<h5 id=\"supported-features\">Supported Features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#supported-features\"><i class=\"material-icons\">link</i></a></h5>\n<ul>\n<li>Bindings:\n<ul>\n<li>Attribute: <code>&#x3C;comp name=\"World\"></code></li>\n<li>Interpolation:  <code>&#x3C;comp greeting=\"Hello {{name}}!\"></code></li>\n<li>Expression:  <code>&#x3C;comp [name]=\"username\"></code></li>\n<li>Event:  <code>&#x3C;comp (close)=\"doSomething()\"></code></li>\n<li>ng-model: <code>&#x3C;comp ng-model=\"name\"></code></li>\n</ul>\n</li>\n<li>Content projection: yes</li>\n</ul>\n<h5 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example\"><i class=\"material-icons\">link</i></a></h5>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(<a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a>(() => MyNg2Module));\nconst module = angular.module('myExample', []);\nmodule.directive('greet', adapter.downgradeNg2Component(Greeter));\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greet',\n  template: '{{salutation}} {{name}}! - &#x3C;ng-content>&#x3C;/ng-content>'\n})\nclass Greeter {\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a> () salutation: string;\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a> () name: string;\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Greeter],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML =\n  'ng1 template: &#x3C;greet salutation=\"Hello\" [name]=\"world\">text&#x3C;/greet>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n});\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"upgradeNg1Component\"></a>\n<table class=\"is-full-width method-table instance-methods\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"upgradeng1component\">upgradeNg1Component()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#upgradeng1component\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L275-L439\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L275-L439\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p>Allows AngularJS Component to be used from Angular.</p>\n<p>允许从 Angular 使用 AngularJS 组件。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">upgradeNg1Component</span>(name: string): <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数-2\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-methods-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>name</code>\n      </td>\n      <td class=\"param-type\"><code>string</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-1\">返回值</h6>\n  <p><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p>Use <code>upgradeNg1Component</code> to create an Angular component from AngularJS Component\ndirective. The adapter will bootstrap AngularJS component from within the Angular\ntemplate.</p>\n<p>使用 <code>upgradeNg1Component</code> 从 AngularJS Component 指令创建一个 Angular 组件。适配器将从 Angular\n模板中引导 AngularJS 组件。</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"upgradeNg1Component-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Component-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"mental-model-1\">Mental Model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#mental-model-1\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"心理模型-1\">心理模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#心理模型-1\"><i class=\"material-icons\">link</i></a></h5>\n<ol>\n<li>\n<p>The component is instantiated by being listed in Angular template. This means that the\nhost element is controlled by Angular, but the component's view will be controlled by\nAngularJS.</p>\n<p>   该组件是通过在 Angular 模板中列出来实例化的。这意味着宿主元素由 Angular\n控制，但组件的视图将由 AngularJS 控制。</p>\n</li>\n</ol>\n<h5 id=\"supported-features-1\">Supported Features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#supported-features-1\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"支持的特性\">支持的特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#支持的特性\"><i class=\"material-icons\">link</i></a></h5>\n<ul>\n<li>\n<p>Bindings:</p>\n<p>绑定：</p>\n<ul>\n<li>\n<p>Attribute: <code>&#x3C;comp name=\"World\"></code></p>\n<p>属性： <code>&#x3C;comp name=\"World\"></code></p>\n</li>\n<li>\n<p>Interpolation:  <code>&#x3C;comp greeting=\"Hello {{name}}!\"></code></p>\n<p>插值： <code>&#x3C;comp greeting=\"Hello {{name}}!\"></code></p>\n</li>\n<li>\n<p>Expression:  <code>&#x3C;comp [name]=\"username\"></code></p>\n<p>表达式： <code>&#x3C;comp [name]=\"username\"></code></p>\n</li>\n<li>\n<p>Event:  <code>&#x3C;comp (close)=\"doSomething()\"></code></p>\n<p>事件： <code>&#x3C;comp (close)=\"doSomething()\"></code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Transclusion: yes</p>\n<p>嵌入：是</p>\n</li>\n<li>\n<p>Only some of the features of\n<a href=\"https://docs.angularjs.org/api/ng/service/$compile\">Directive Definition Object</a> are\nsupported:</p>\n<p>仅支持<a href=\"https://docs.angularjs.org/api/ng/service/$compile\">指令定义对象</a>的某些特性：</p>\n<ul>\n<li>\n<p><code>compile</code>: not supported because the host element is owned by Angular, which does\nnot allow modifying DOM structure during compilation.</p>\n<p><code>compile</code> ：不支持，因为宿主元素归 Angular 所有，它不允许在编译期间修改 DOM 结构。</p>\n</li>\n<li>\n<p><code>controller</code>: supported. (NOTE: injection of <code>$attrs</code> and <code>$transclude</code> is not supported.)</p>\n<p><code>controller</code> ：支持。（注意：不支持注入 <code>$attrs</code> 和 <code>$transclude</code> 。）</p>\n</li>\n<li>\n<p><code>controllerAs</code>: supported.</p>\n<p><code>controllerAs</code> ：支持。</p>\n</li>\n<li>\n<p><code>bindToController</code>: supported.</p>\n<p><code>bindToController</code> ：支持。</p>\n</li>\n<li>\n<p><code>link</code>: supported. (NOTE: only pre-link function is supported.)</p>\n<p><code>link</code> ：支持。（注意：仅支持预链接功能。）</p>\n</li>\n<li>\n<p><code>name</code>: supported.</p>\n<p><code>name</code> ：支持。</p>\n</li>\n<li>\n<p><code>priority</code>: ignored.</p>\n<p><code>priority</code> ：忽略。</p>\n</li>\n<li>\n<p><code>replace</code>: not supported.</p>\n<p><code>replace</code> ：不支持。</p>\n</li>\n<li>\n<p><code>require</code>: supported.</p>\n<p><code>require</code> ：支持。</p>\n</li>\n<li>\n<p><code>restrict</code>: must be set to 'E'.</p>\n<p><code>restrict</code> ：必须设置为 'E'。</p>\n</li>\n<li>\n<p><code>scope</code>: supported.</p>\n<p><code>scope</code> ：支持。</p>\n</li>\n<li>\n<p><code>template</code>: supported.</p>\n<p><code>template</code> ：支持。</p>\n</li>\n<li>\n<p><code>templateUrl</code>: supported.</p>\n<p><code>templateUrl</code> ：支持。</p>\n</li>\n<li>\n<p><code>terminal</code>: ignored.</p>\n<p><code>terminal</code> ：被忽略。</p>\n</li>\n<li>\n<p><code>transclude</code>: supported.</p>\n<p><code>transclude</code> ：支持。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"example-1\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-1\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"例子\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#例子\"><i class=\"material-icons\">link</i></a></h5>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(<a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a>(() => MyNg2Module));\nconst module = angular.module('myExample', []);\n\nmodule.directive('greet', function() {\n  return {\n    scope: {salutation: '=', name: '=' },\n    template: '{{salutation}} {{name}}! - &#x3C;span ng-transclude>&#x3C;/span>'\n  };\n});\n\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2',\n  template: 'ng2 template: &#x3C;greet salutation=\"Hello\" [name]=\"world\">text&#x3C;/greet>'\n})\nclass Ng2Component {\n}\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&#x3C;ng2>&#x3C;/ng2>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n});\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"registerForNg1Tests\"></a>\n<table class=\"is-full-width method-table instance-methods\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"registerforng1tests\">registerForNg1Tests()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#registerforng1tests\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L440-L510\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L440-L510\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p>Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\nUse this instead of <code>angular.mock.module()</code> to load the upgrade module into\nthe AngularJS testing injector.</p>\n<p>注册适配器的 AngularJS 升级模块以在 AngularJS 中进行单元测试。使用它而不是\n<code>angular.mock.module()</code> 将升级模块加载到 AngularJS 测试注入器中。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">registerForNg1Tests</span>(modules?: string[]): <a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数-3\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-methods-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>modules</code>\n      </td>\n      <td class=\"param-type\"><code>string[]</code></td>\n      <td class=\"param-description\">\n        <p>any AngularJS modules that the upgrade module should depend upon</p>\n<p>升级模块应该依赖的任何 AngularJS 模块</p>\n\n        <p>可选值。默认值为 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-2\">返回值</h6>\n  <p><code><a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code>: an <code><a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code>, which lets you register a <code>ready()</code> callback to\nrun assertions once the Angular components are ready to test through AngularJS.</p>\n<p>一个 <code><a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code> ，它允许你注册一个 <code>ready()</code> 回调以在 Angular 组件准备好通过 AngularJS\n进行测试后运行断言。</p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"registerForNg1Tests-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#registerForNg1Tests-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"example-2\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-2\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"例子-1\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#例子-1\"><i class=\"material-icons\">link</i></a></h5>\n<code-example>\nconst upgradeAdapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\n\n// configure the adapter with upgrade/downgrade components and services\nupgradeAdapter.downgradeNg2Component(MyComponent);\n\nlet upgradeAdapterRef: <a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a>;\nlet $compile, $rootScope;\n\n// We must register the adapter before any calls to `inject()`\nbeforeEach(() => {\n  upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n});\n\nbeforeEach(inject((_$compile_, _$rootScope_) => {\n  $compile = _$compile_;\n  $rootScope = _$rootScope_;\n}));\n\nit(\"says hello\", (done) => {\n  upgradeAdapterRef.ready(() => {\n    const element = $compile(\"&#x3C;my-component>&#x3C;/my-component>\")($rootScope);\n    $rootScope.$apply();\n    expect(element.html()).toContain(\"Hello World\");\n    done();\n  })\n});\n\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"bootstrap\"></a>\n<table class=\"is-full-width method-table instance-methods\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"bootstrap\">bootstrap()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#bootstrap\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L511-L600\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L511-L600\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p>Bootstrap a hybrid AngularJS / Angular application.</p>\n<p>引导混合 AngularJS / Angular 应用程序。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">bootstrap</span>(element: Element, modules?: any[], config?: IAngularBootstrapConfig): <a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数-4\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-methods-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>element</code>\n      </td>\n      <td class=\"param-type\"><code>Element</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>modules</code>\n      </td>\n      <td class=\"param-type\"><code>any[]</code></td>\n      <td class=\"param-description\">\n        <p>可选值。默认值为 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>config</code>\n      </td>\n      <td class=\"param-type\"><code>IAngularBootstrapConfig</code></td>\n      <td class=\"param-description\">\n        <p>可选值。默认值为 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-3\">返回值</h6>\n  <p><code><a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p>This <code>bootstrap</code> method is a direct replacement (takes same arguments) for AngularJS\n<a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\"><code>bootstrap</code></a> method. Unlike\nAngularJS, this bootstrap is asynchronous.</p>\n<p>此 <code>bootstrap</code> 方法是 AngularJS\n<a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\"><code>bootstrap</code></a>方法的直接替换（采用相同的参数）。与\nAngularJS 不同，此引导程序是异步的。</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"bootstrap-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#bootstrap-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"example-3\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-3\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"例子-2\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#例子-2\"><i class=\"material-icons\">link</i></a></h5>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\nconst module = angular.module('myExample', []);\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2));\n\nmodule.directive('ng1', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&#x3C;span ng-transclude>&#x3C;/span>)'\n  };\n});\n\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2',\n  inputs: ['name'],\n  template: 'ng2[&#x3C;ng1 [title]=\"name\">transclude&#x3C;/ng1>](&#x3C;ng-content>&#x3C;/ng-content>)'\n})\nclass Ng2 {\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&#x3C;ng2 name=\"World\">project&#x3C;/ng2>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"upgradeNg1Provider\"></a>\n<table class=\"is-full-width method-table instance-methods\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"upgradeng1provider\">upgradeNg1Provider()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#upgradeng1provider\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L601-L645\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L601-L645\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p>Allows AngularJS service to be accessible from Angular.</p>\n<p>允许从 Angular 访问 AngularJS 服务。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">upgradeNg1Provider</span>(name: string, options?: { asToken: any; })</code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数-5\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-methods-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>name</code>\n      </td>\n      <td class=\"param-type\"><code>string</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code>{ asToken: any; }</code></td>\n      <td class=\"param-description\">\n        <p>可选值。默认值为 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"upgradeNg1Provider-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Provider-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"example-4\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-4\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"例子-3\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#例子-3\"><i class=\"material-icons\">link</i></a></h5>\n<code-example>\nclass Login { ... }\nclass Server { ... }\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> ()\nclass Example {\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>('server') server, login: Login) {\n    ...\n  }\n}\n\nconst module = angular.module('myExample', []);\nmodule.service('server', Server);\nmodule.service('login', Login);\n\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\nadapter.upgradeNg1Provider('server');\nadapter.upgradeNg1Provider('login', {asToken: Login});\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n  const example: Example = ref.ng2Injector.get(Example);\n});\n\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"downgradeNg2Provider\"></a>\n<table class=\"is-full-width method-table instance-methods\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"downgradeng2provider\">downgradeNg2Provider()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#downgradeng2provider\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L646-L675\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L646-L675\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p>Allows Angular service to be accessible from AngularJS.</p>\n<p>允许从 AngularJS 访问 Angular 服务。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">downgradeNg2Provider</span>(token: any): Function</code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数-6\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-methods-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-methods-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>token</code>\n      </td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-4\">返回值</h6>\n  <p><code>Function</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"downgradeNg2Provider-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Provider-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"example-5\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-5\"><i class=\"material-icons\">link</i></a></h5>\n<h5 id=\"例子-4\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#例子-4\"><i class=\"material-icons\">link</i></a></h5>\n<code-example>\nclass Example {\n}\n\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\n\nconst module = angular.module('myExample', []);\nmodule.factory('example', adapter.downgradeNg2Provider(Example));\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n  const example: Example = ref.ng1Injector.get('example');\n});\n\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n</section>\n\n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"mental-model-2\">Mental Model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#mental-model-2\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"心理模型-2\">心理模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#心理模型-2\"><i class=\"material-icons\">link</i></a></h3>\n<p>When reasoning about how a hybrid application works it is useful to have a mental model which\ndescribes what is happening and explains what is happening at the lowest level.</p>\n<p>在推理混合应用程序的工作方式时，有一个心智模型会很有用，它可以描述正在发生的事情并在最低级别解释正在发生的事情。</p>\n<ol>\n<li>\n<p>There are two independent frameworks running in a single application, each framework treats\nthe other as a black box.</p>\n<p>在单个应用程序中运行有两个独立的框架，每个框架都将另一个框架视为黑盒。</p>\n</li>\n<li>\n<p>Each DOM element on the page is owned exactly by one framework. Whichever framework\ninstantiated the element is the owner. Each framework only updates/interacts with its own\nDOM elements and ignores others.</p>\n<p>   页面上的每个 DOM\n元素都归一个框架所有。无论哪个框架实例化此元素，都是所有者。每个框架都只更新自己的 DOM\n元素/交互，而忽略其他框架。</p>\n</li>\n<li>\n<p>AngularJS directives always execute inside AngularJS framework codebase regardless of\nwhere they are instantiated.</p>\n<p>AngularJS 指令始终在 AngularJS 框架代码库中执行，无论它们是在哪里实例化的。</p>\n</li>\n<li>\n<p>Angular components always execute inside Angular framework codebase regardless of\nwhere they are instantiated.</p>\n<p>Angular 组件始终在 Angular 框架代码库中执行，无论它们在哪里实例化。</p>\n</li>\n<li>\n<p>An AngularJS component can be upgraded to an Angular component. This creates an\nAngular directive, which bootstraps the AngularJS component directive in that location.</p>\n<p>   AngularJS 组件可以升级为 Angular 组件。这会创建一个 Angular 指令，它会引导该位置的 AngularJS\n组件指令。</p>\n</li>\n<li>\n<p>An Angular component can be downgraded to an AngularJS component directive. This creates\nan AngularJS directive, which bootstraps the Angular component in that location.</p>\n<p>   Angular 组件可以降级为 AngularJS 组件指令。这会创建一个 AngularJS 指令，该指令会引导该位置的\nAngular 组件。</p>\n</li>\n<li>\n<p>Whenever an adapter component is instantiated the host element is owned by the framework\ndoing the instantiation. The other framework then instantiates and owns the view for that\ncomponent. This implies that component bindings will always follow the semantics of the\ninstantiation framework. The syntax is always that of Angular syntax.</p>\n<p>   每当实例化适配器组件时，宿主元素都归进行实例化的框架所有。然后，另一个框架会实例化并拥有该组件的视图。这意味着组件绑定将始终遵循实例化框架的语义。语法始终是\nAngular 语法。</p>\n</li>\n<li>\n<p>AngularJS is always bootstrapped first and owns the bottom most view.</p>\n<p>AngularJS 始终首先引导并拥有最底部的视图。</p>\n</li>\n<li>\n<p>The new application is running in Angular zone, and therefore it no longer needs calls to\n<code>$apply()</code>.</p>\n<p>新应用程序在 Angular 区域中运行，因此它不再需要调用 <code>$apply()</code> 。</p>\n</li>\n</ol>\n<h3 id=\"example-6\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-6\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"例子-5\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#例子-5\"><i class=\"material-icons\">link</i></a></h3>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(<a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a>(() => MyNg2Module), myCompilerOptions);\nconst module = angular.module('myExample', []);\nmodule.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n\nmodule.directive('ng1Hello', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&#x3C;span ng-transclude>&#x3C;/span>)'\n  };\n});\n\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2-comp',\n  inputs: ['name'],\n  template: 'ng2[&#x3C;ng1-hello [title]=\"name\">transclude&#x3C;/ng1-hello>](&#x3C;ng-content>&#x3C;/ng-content>)',\n  directives:\n})\nclass Ng2Component {\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\n\ndocument.body.innerHTML = '&#x3C;ng2-comp name=\"World\">project&#x3C;/ng2-comp>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n\n</code-example>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/upgrade\n-->\n<!-- links from this doc:\n - /api\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Type\n - api/core/forwardRef\n - api/forms/ControlValueAccessor\n - api/platform-browser/BrowserModule\n - api/upgrade\n - api/upgrade/UpgradeAdapter#bootstrap\n - api/upgrade/UpgradeAdapter#bootstrap-usage-notes\n - api/upgrade/UpgradeAdapter#constructor\n - api/upgrade/UpgradeAdapter#constructor()\n - api/upgrade/UpgradeAdapter#description\n - api/upgrade/UpgradeAdapter#downgradeNg2Component\n - api/upgrade/UpgradeAdapter#downgradeNg2Component-usage-notes\n - api/upgrade/UpgradeAdapter#downgradeNg2Provider\n - api/upgrade/UpgradeAdapter#downgradeNg2Provider-usage-notes\n - api/upgrade/UpgradeAdapter#downgradeng2component\n - api/upgrade/UpgradeAdapter#downgradeng2provider\n - api/upgrade/UpgradeAdapter#example\n - api/upgrade/UpgradeAdapter#example-1\n - api/upgrade/UpgradeAdapter#example-2\n - api/upgrade/UpgradeAdapter#example-3\n - api/upgrade/UpgradeAdapter#example-4\n - api/upgrade/UpgradeAdapter#example-5\n - api/upgrade/UpgradeAdapter#example-6\n - api/upgrade/UpgradeAdapter#instance-methods\n - api/upgrade/UpgradeAdapter#mental-model\n - api/upgrade/UpgradeAdapter#mental-model-1\n - api/upgrade/UpgradeAdapter#mental-model-2\n - api/upgrade/UpgradeAdapter#registerForNg1Tests\n - api/upgrade/UpgradeAdapter#registerForNg1Tests-usage-notes\n - api/upgrade/UpgradeAdapter#registerforng1tests\n - api/upgrade/UpgradeAdapter#supported-features\n - api/upgrade/UpgradeAdapter#supported-features-1\n - api/upgrade/UpgradeAdapter#upgradeNg1Component\n - api/upgrade/UpgradeAdapter#upgradeNg1Component-usage-notes\n - api/upgrade/UpgradeAdapter#upgradeNg1Provider\n - api/upgrade/UpgradeAdapter#upgradeNg1Provider-usage-notes\n - api/upgrade/UpgradeAdapter#upgradeadapter\n - api/upgrade/UpgradeAdapter#upgradeng1component\n - api/upgrade/UpgradeAdapter#upgradeng1provider\n - api/upgrade/UpgradeAdapter#usage-notes\n - api/upgrade/UpgradeAdapter#例子\n - api/upgrade/UpgradeAdapter#例子-1\n - api/upgrade/UpgradeAdapter#例子-2\n - api/upgrade/UpgradeAdapter#例子-3\n - api/upgrade/UpgradeAdapter#例子-4\n - api/upgrade/UpgradeAdapter#例子-5\n - api/upgrade/UpgradeAdapter#心理模型\n - api/upgrade/UpgradeAdapter#心理模型-1\n - api/upgrade/UpgradeAdapter#心理模型-2\n - api/upgrade/UpgradeAdapter#支持的特性\n - api/upgrade/UpgradeAdapterRef\n - api/upgrade/static\n - guide/aot-compiler\n - https://docs.angularjs.org/api/ng/function/angular.bootstrap\n - https://docs.angularjs.org/api/ng/service/$compile\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L193-L274\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L21-L841\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L275-L439\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L440-L510\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L511-L600\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L601-L645\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/src/dynamic/src/upgrade_adapter.ts?message=docs(upgrade)%3A%20请简述你的修改...#L646-L675\n - https://github.com/angular/angular-cn/tree/15.0.1/docs/PUBLIC_API.md#final-classes\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L193-L274\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L21-L841\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L275-L439\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L440-L510\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L511-L600\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L601-L645\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/src/dynamic/src/upgrade_adapter.ts#L646-L675\n-->"
}