{
  "id": "api/upgrade/static/downgradeModule",
  "title": "downgradeModule",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/upgrade\", \"name\": \"@angular/upgrade\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/upgrade/static\", \"name\": \"@angular/upgrade/static\" } },\n            { \"@type\": \"ListItem\", \"position\": 4, \"item\": { \"@id\": \"https://angular.cn/api/upgrade/static/downgradeModule\", \"name\": \"downgradeModule\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/upgrade\">@angular/upgrade</a> > <a href=\"api/upgrade/static\">@angular/upgrade/static</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/upgrade/static/src/downgrade_module.ts?message=docs(upgrade)%3A%20请简述你的修改...#L415-L676\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/static/src/downgrade_module.ts#L415-L676\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"downgrademodule\">downgradeModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrademodule\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p>A helper function for creating an AngularJS module that can bootstrap an Angular module\n\"on-demand\" (possibly lazily) when a <a href=\"api/upgrade/static/downgradeComponent\">downgraded component</a> needs to be\ninstantiated.</p>\n<p>一个用于创建 AngularJS 模块的帮助器函数，当需要实例化 <a href=\"api/upgrade/static/downgradeComponent\">降级组件</a>\n时，可以“按需”（可能是延迟）引导 Angular 模块。</p>\n\n    <p no-translate=\"\"><a href=\"api/upgrade/static/downgradeModule#description\">查看\"说明\"...</a></p>\n  </section>\n<div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></span>(moduleOrBootstrapFn: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;T> | ((extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) => Promise&#x3C;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&#x3C;T>>)): string</code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>moduleOrBootstrapFn</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;T> | ((extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) => Promise&#x3C;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&#x3C;T>>)</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p><code>string</code></p>\n\n</div>\n    <hr class=\"hr-margin fullwidth\">\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <span class=\"member-name\"><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></span>(moduleOrBootstrapFn: <a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>&#x3C;T>): string</code-example>\n  <div class=\"deprecated\">\n    <p><strong>Deprecated</strong> Passing <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> as the <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> function argument is deprecated,\nplease pass an NgModule class reference instead.</p>\n<p>不推荐将 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 作为 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> 函数参数传递，请改为传递 NgModule 类引用。</p>\n\n  </div>\n\n  <h6 class=\"no-anchor\" id=\"参数-1\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>moduleOrBootstrapFn</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory&#x3C;T></a></code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-1\">返回值</h6>\n  <p><code>string</code></p>\n\n</div>\n    \n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p><em>Part of the <a href=\"api?query=upgrade/static\">upgrade/static</a> library for hybrid upgrade apps that\nsupport AOT compilation.</em></p>\n<p><em>支持 AOT 编译的混合升级应用程序的<a href=\"api?query=upgrade/static\">upgrade/静态</a>库的一部分。</em></p>\n<p>It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\npay the cost up-front. For example, you can have an AngularJS application that uses Angular for\nspecific routes and only instantiate the Angular modules if/when the user visits one of these\nroutes.</p>\n<p>它允许惰性加载/引导混合应用程序的 Angular 部分，而无需预先支付成本。例如，你可以有一个 AngularJS\n应用程序，将 Angular 用于特定路由，并且只有在/当用户访问这些路由之一时才实例化 Angular 模块。</p>\n<p>The Angular module will be bootstrapped once (when requested for the first time) and the same\nreference will be used from that point onwards.</p>\n<p>Angular 模块将被引导一次（第一次请求时），并且从那时起将使用相同的引用。</p>\n<p><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> requires either an <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>, <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class or a function:</p>\n<p><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 需要 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>、<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类或函数：</p>\n<ul>\n<li>\n<p><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>: If you pass an <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>, it will be used to instantiate a module\nusing <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code>'s <a href=\"api/core/PlatformRef#bootstrapModuleFactory\">bootstrapModuleFactory()</a>.\nNOTE: this type of the argument is deprecated. Please either provide an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class or a\nbootstrap function instead.</p>\n<p>  <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> ：如果你传递了 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> ，它将用于使用 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 的 <a href=\"api/core/PlatformRef#bootstrapModuleFactory\">bootstrapModuleFactory()</a>\n来实例化模块。注意：这种类型的参数已被弃用。请提供 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类或引导函数。</p>\n</li>\n<li>\n<p><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class: If you pass an NgModule class, it will be used to instantiate a module\nusing <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code>'s <a href=\"api/core/PlatformRef#bootstrapModule\">bootstrapModule()</a>.</p>\n<p>  <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类：如果你传递了 NgModule 类，它将用于使用 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 的 <a href=\"api/core/PlatformRef#bootstrapModule\">bootstrapModule()</a> 来实例化模块。</p>\n</li>\n<li>\n<p><code>Function</code>: If you pass a function, it is expected to return a promise resolving to an\n<code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code>. The function is called with an array of extra <a href=\"api/core/StaticProvider\">Providers</a>\nthat are expected to be available from the returned <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code>'s <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>.</p>\n<p><code>Function</code> ：如果你传递了一个函数，它应该会返回一个解析为 <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的\nPromise。使用额外的 <a href=\"api/core/StaticProvider\">Providers</a> 数组来调用该函数，这些数组可以从返回的\n<code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 中获得。</p>\n</li>\n</ul>\n<p><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> returns the name of the created AngularJS wrapper module. You can use it to\ndeclare a dependency in your main AngularJS module.</p>\n<p><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 会返回创建的 AngularJS 包装器模块的名称。你可以用它在主 AngularJS\n模块中声明依赖项。</p>\n<code-example path=\"upgrade/static/ts/lite/module.ts\" region=\"basic-how-to\">\nimport {<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>} from '@angular/platform-browser-dynamic';\nimport {<a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>, <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>, <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a>} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n\n\n\n// The function that will bootstrap the Angular module (when/if necessary).\n// (This would be omitted if we provided an `<a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>` directly.)\nconst ng2BootstrapFn = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =>\n    <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders).bootstrapModule(MyLazyAngularModule);\n\n\n// This AngularJS module represents the AngularJS pieces of the application.\nconst myMainAngularJsModule = angular.module('myMainAngularJsModule', [\n  // We declare a dependency on the \"downgraded\" Angular module.\n  <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(ng2BootstrapFn)\n  // or\n  // <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(MyLazyAngularModuleFactory)\n]);\n\n</code-example>\n<p>For more details on how to use <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> see\n<a href=\"guide/upgrade-performance\">Upgrading for Performance</a>.</p>\n  <p>Further information is available in the <a href=\"api/upgrade/static/downgradeModule#usage-notes\">Usage Notes...</a></p>\n</section>\n\n\n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p>Apart from <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>, you can use the rest of the <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> helpers as usual to\nbuild a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\navailable until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\ncomponent.</p>\n<p>除了 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> ，你可以像往常一样使用其余的 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code>\n帮助器来构建混合应用程序。请注意，在降级的模块被引导（即通过实例化降级组件）之前，Angular\n部分（例如降级的服务）将不可用。</p>\n<div class=\"alert is-important\">\n<p>  You cannot use <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> and <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> in the same hybrid application.<br>\nUse one or the other.</p>\n<p>你不能在同一个混合应用程序中使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 。<br>使用两者之一。</p>\n</div>\n<h3 id=\"differences-with-upgrademodule\">Differences with <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#differences-with-upgrademodule\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"与-upgrademodule-的区别\">与 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 的区别<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#与-upgrademodule-的区别\"><i class=\"material-icons\">link</i></a></h3>\n<p>Besides their different API, there are two important internal differences between\n<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> and <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> that affect the behavior of hybrid applications:</p>\n<p>除了它们不同的 API 之外，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>\n之间还有两个重要的内部区别会影响混合应用程序的行为：</p>\n<ol>\n<li>\n<p>Unlike <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>, <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> does not bootstrap the main AngularJS module\ninside the <a href=\"api/core/NgZone\">Angular zone</a>.</p>\n<p>与 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 不同，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 不会引导 <a href=\"api/core/NgZone\">Angular zone</a> 中的主\nAngularJS 模块。</p>\n</li>\n<li>\n<p>Unlike <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>, <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> does not automatically run a\n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$digest()</a> when changes are\ndetected in the Angular part of the application.</p>\n<p>与 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 不同，当检测到应用程序的 Angular 部分发生更改时，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>\n不会自动运行<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$digest()</a> 。</p>\n</li>\n</ol>\n<p>What this means is that applications using <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> will run change detection more\nfrequently in order to ensure that both frameworks are properly notified about possible changes.\nThis will inevitably result in more change detection runs than necessary.</p>\n<p>这意味着使用 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>\n的应用程序将更频繁地运行变更检测，以确保这两个框架都得到有关可能的更改的正确通知。这将不可避免地导致比必要的变更检测运行更多。</p>\n<p><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>, on the other side, does not try to tie the two change detection systems as\ntightly, restricting the explicit change detection runs only to cases where it knows it is\nnecessary (e.g. when the inputs of a downgraded component change). This improves performance,\nespecially in change-detection-heavy applications, but leaves it up to the developer to manually\nnotify each framework as needed.</p>\n<p>另一方面，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>\n不会尝试将两个变更检测系统紧密联系起来，而是将显式变更检测限制仅在它知道有必要的情况下运行（例如，当降级组件的输入更改时）。这提高了性能，尤其是在需要大量变更检测的应用程序中，但让开发人员根据需要手动通知每个框架。</p>\n<p>For a more detailed discussion of the differences and their implications, see\n<a href=\"guide/upgrade-performance\">Upgrading for Performance</a>.</p>\n<p>有关区别及其含义的更详细讨论，请参阅<a href=\"guide/upgrade-performance\">升级以提高性能</a>。</p>\n<div class=\"alert is-helpful\">\n<p>  You can manually trigger a change detection run in AngularJS using\n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\">scope.$apply(...)</a> or\n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$rootScope.$digest()</a>.</p>\n<p>你可以用<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\">scope.$apply(…)</a>或<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$rootScope.$digest()</a>手动触发\nAngularJS 中运行的变更检测。</p>\n<p>  You can manually trigger a change detection run in Angular using <a href=\"api/core/NgZone#run\">ngZone.run(...)</a>.</p>\n<p>你可以用 <a href=\"api/core/NgZone#run\">ngZone.run(…)</a> 手动触发 Angular 中运行的变更检测。</p>\n</div>\n<h3 id=\"downgrading-multiple-modules\">Downgrading multiple modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrading-multiple-modules\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"降级多个模块\">降级多个模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#降级多个模块\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is possible to downgrade multiple modules and include them in an AngularJS application. In\nthat case, each downgraded module will be bootstrapped when an associated downgraded component or\ninjectable needs to be instantiated.</p>\n<p>可以降级多个模块并将它们包含在 AngularJS\n应用程序中。在这种情况下，当需要实例化关联的降级组件或可注入时，每个降级的模块都将被引导。</p>\n<p>Things to keep in mind, when downgrading multiple modules:</p>\n<p>降级多个模块时要记住的事情：</p>\n<ul>\n<li>\n<p>Each downgraded component/injectable needs to be explicitly associated with a downgraded\nmodule. See <code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> and <code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code> for more details.</p>\n<p>每个降级的组件/可注入物都需要与降级的模块显式关联。有关更多详细信息，请参阅\n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 和 <code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code> 。</p>\n</li>\n<li>\n<p>If you want some injectables to be shared among all downgraded modules, you can provide them as\n<code><a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a></code>s, when creating the <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code> (e.g. via <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> or\n<code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code>).</p>\n<p>如果你希望在所有降级模块之间共享某些注入器，可以在创建 <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code> 时将它们作为\n<code><a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a></code> 提供（例如通过 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 或 <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code>）。</p>\n</li>\n<li>\n<p>When using <a href=\"api/core/PlatformRef#bootstrapmodule\">`bootstrapModule()`</a> or\n<a href=\"api/core/PlatformRef#bootstrapmodulefactory\">`bootstrapModuleFactory()`</a> to bootstrap the\ndowngraded modules, each one is considered a \"root\" module. As a consequence, a new instance\nwill be created for every injectable provided in <code>\"root\"</code> (via\n<a href=\"api/core/Injectable#providedIn\">`providedIn`</a>).\nIf this is not your intention, you can have a shared module (that will act as act as the \"root\"\nmodule) and create all downgraded modules using that module's injector:</p>\n<p>  使用 <a href=\"api/core/PlatformRef#bootstrapmodule\">`bootstrapModule()`</a> 或 <a href=\"api/core/PlatformRef#bootstrapmodulefactory\">`bootstrapModuleFactory()`</a>\n引导降级模块时，每个都被认为是一个“根”模块。因此，将为 <code>\"root\"</code>\n中提供的每个可注入物创建一个新实例（通过 <a href=\"api/core/Injectable#providedIn\">`providedIn`</a>\n）。如果这不是你的意图，你可以有一个共享模块（将作为“根”模块）并使用该模块的注入器创建所有降级模块：</p>\n<p>  <code-example path=\"upgrade/static/ts/lite-multi-shared/module.ts\" region=\"shared-root-module\">\nlet rootInjectorPromise: Promise&#x3C;<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>>|null = null;\nconst getRootInjector = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) => {\n  if (!rootInjectorPromise) {\n    rootInjectorPromise = <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders)\n                              .bootstrapModule(Ng2RootModule)\n                              .then(moduleRef => moduleRef.injector);\n  }\n  return rootInjectorPromise;\n};\n\nconst downgradedNg2AModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(async (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) => {\n  const rootInjector = await getRootInjector(extraProviders);\n  const moduleAFactory = await rootInjector.get(<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>).compileModuleAsync(Ng2AModule);\n  return moduleAFactory.create(rootInjector);\n});\nconst downgradedNg2BModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(async (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) => {\n  const rootInjector = await getRootInjector(extraProviders);\n  const moduleBFactory = await rootInjector.get(<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>).compileModuleAsync(Ng2BModule);\n  return moduleBFactory.create(rootInjector);\n});\n/* . . . */\nconst appModule =\n    angular\n        .module(\n            'exampleAppModule', [downgradedNg2AModule, downgradedNg2BModule, downgradedNg2CModule])\n\n</code-example></p>\n</li>\n</ul>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/upgrade/static\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/testing/createAngularJSTestingModule\n - api/upgrade/static/testing/createAngularTestingModule\n - guide/deprecations\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - /api\n - api/core/Compiler\n - api/core/Injectable#providedIn\n - api/core/Injector\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgZone\n - api/core/NgZone#run\n - api/core/PlatformRef\n - api/core/PlatformRef#bootstrapModule\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/PlatformRef#bootstrapmodule\n - api/core/PlatformRef#bootstrapmodulefactory\n - api/core/StaticProvider\n - api/core/Type\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/platformBrowser\n - api/upgrade\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/downgradeModule#description\n - api/upgrade/static/downgradeModule#differences-with-upgrademodule\n - api/upgrade/static/downgradeModule#downgrademodule\n - api/upgrade/static/downgradeModule#downgrading-multiple-modules\n - api/upgrade/static/downgradeModule#usage-notes\n - api/upgrade/static/downgradeModule#与-upgrademodule-的区别\n - api/upgrade/static/downgradeModule#降级多个模块\n - api?query=upgrade/static\n - guide/upgrade-performance\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\n - https://github.com/angular/angular-cn/edit/cn/packages/upgrade/static/src/downgrade_module.ts?message=docs(upgrade)%3A%20请简述你的修改...#L415-L676\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/upgrade/static/src/downgrade_module.ts#L415-L676\n-->"
}