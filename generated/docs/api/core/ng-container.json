{
  "id": "api/core/ng-container",
  "title": "<ng-container>",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/core/ng-container\", \"name\": \"<ng-container>\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/core\">@angular/core</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/aio/content/special-elements/core/ng-container.md?message=docs(core)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/aio/content/special-elements/core/ng-container.md\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ng-container\">&#x3C;ng-container><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#ng-container\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label element\">element</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p>A special element that can hold structural directives without adding new elements to the DOM.</p>\n\n    <p no-translate=\"\"><a href=\"api/core/ng-container#description\">查看\"说明\"...</a></p>\n  </section>\n\n\n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p>The <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> allows us to use structural directives without any extra element, making sure that the only DOM changes being applied are those dictated by the directives themselves.</p>\n<p>This not only increases performance (even so slightly) since the browser ends up rendering less elements but can also be a valuable asset in having cleaner DOMs and styles alike.</p>\n<p>It can for example enable us to use structural directives without breaking styling dependent on a precise DOM structure (as for example the ones we get when using flex containers, margins, the child combinator selector, etc.).</p>\n  <p>Further information is available in the <a href=\"api/core/ng-container#usage-notes\">Usage Notes...</a></p>\n</section>\n\n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"with-ngifs\">With <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>s<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#with-ngifs\"><i class=\"material-icons\">link</i></a></h3>\n<p>One common use case of <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> is alongside the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> structural directive. By using the special element we can produce very clean templates easy to understand and work with.</p>\n<p>For example, we may want to have a number of elements shown conditionally but they do not need to be all under the same root element. That can be easily done by wrapping them in such a block:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\">\n  …\n&#x3C;/ng-container>\n\n</code-example>\n<p>This can also be augmented with an <code>else</code> statement alongside an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> as:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else templateA\">\n  …\n&#x3C;/ng-container>\n&#x3C;ng-template #templateA>\n  …\n&#x3C;/ng-template>\n\n</code-example>\n<h3 id=\"combination-of-multiple-structural-directives\">Combination of multiple structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#combination-of-multiple-structural-directives\"><i class=\"material-icons\">link</i></a></h3>\n<p>Multiple structural directives cannot be used on the same element; if you need to take advantage of more than one structural directive, it is advised to use an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> per structural directive.</p>\n<p>The most common scenario is with <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>. For example, let's imagine that we have a list of items but each item needs to be displayed only if a certain condition is true. We could be tempted to try something like:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item.isValid\">\n    {{ item.name }}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>As we said that would not work, what we can do is to simply move one of the structural directives to an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element, which would then wrap the other one, like so:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;ul>\n  &#x3C;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\">\n    &#x3C;li *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item.isValid\">\n      {{ item.name }}\n    &#x3C;/li>\n  &#x3C;/ng-container>\n&#x3C;/ul>\n\n</code-example>\n<p>This would work as intended without introducing any new unnecessary elements in the DOM.</p>\n<p>For more information see <a href=\"guide/structural-directives#one-per-element\">one structural directive per element</a>.</p>\n<h3 id=\"use-alongside-ngtemplateoutlet\">Use alongside ngTemplateOutlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#use-alongside-ngtemplateoutlet\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> directive can be applied to any element but most of the time it's applied to <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> ones. By combining the two, we get a very clear and easy to follow HTML and DOM structure in which no extra elements are necessary and template views are instantiated where requested.</p>\n<p>For example, imagine a situation in which we have a large HTML, in which a small portion needs to be repeated in different places. A simple solution is to define an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> containing our repeating HTML and render that where necessary by using <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> alongside an <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code>.</p>\n<p>Like so:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;!-- … -->\n\n&#x3C;ng-container *<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>=\"tmpl; context: {$implicit: 'Hello'}\">\n&#x3C;/ng-container>\n\n&#x3C;!-- … -->\n\n&#x3C;ng-container *<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>=\"tmpl; context: {$implicit: 'World'}\">\n&#x3C;/ng-container>\n\n&#x3C;!-- … -->\n\n&#x3C;ng-template #tmpl let-text>\n  &#x3C;h1>{{ text }}&#x3C;/h1>\n&#x3C;/ng-template>\n\n</code-example>\n<p>For more information regarding <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code>, see the <a href=\"api/common/NgTemplateOutlet\"><code>NgTemplateOutlet</code>s api documentation page</a>.</p>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - guide/built-in-directives\n - guide/content-projection\n - guide/i18n-common-prepare\n - guide/structural-directives\n-->\n<!-- links from this doc:\n - /api\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core\n - api/core/ng-container#combination-of-multiple-structural-directives\n - api/core/ng-container#description\n - api/core/ng-container#ng-container\n - api/core/ng-container#usage-notes\n - api/core/ng-container#use-alongside-ngtemplateoutlet\n - api/core/ng-container#with-ngifs\n - api/core/ng-template\n - guide/structural-directives#one-per-element\n - https://github.com/angular/angular-cn/edit/cn/aio/content/special-elements/core/ng-container.md?message=docs(core)%3A%20请简述你的修改...\n - https://github.com/angular/angular-cn/tree/15.0.1/aio/content/special-elements/core/ng-container.md\n-->"
}