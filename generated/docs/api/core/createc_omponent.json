{
  "id": "api/core/createComponent",
  "title": "createComponent",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/core/createComponent\", \"name\": \"createComponent\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/core\">@angular/core</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/core/src/render3/component.ts?message=docs(core)%3A%20请简述你的修改...#L17-L117\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/core/src/render3/component.ts#L17-L117\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"createcomponent\">createComponent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/createComponent#createcomponent\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p>Creates a <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> instance based on provided component type and a set of options.</p>\n<p>根据提供的组件类型和一组选项创建一个 <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> 实例。</p>\n\n  </section>\n\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></span>&#x3C;C>(component: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;C>, options: { environmentInjector: <a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>; hostElement?: Element; elementInjector?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>; projectableNodes?: Node[][]; }): <a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a>&#x3C;C></code-example>\n\n  <h6 class=\"no-anchor\" id=\"参数\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>component</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;C></code></td>\n      <td class=\"param-description\">\n        <p>Component class reference.</p>\n<p>组件类引用。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code>object</code></td>\n      <td class=\"param-description\">\n        <p>Set of options to use:</p>\n<p>要使用的选项集：</p>\n<ul>\n<li>\n<p><code>environmentInjector</code>: An <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> instance to be used for the component, see\nadditional info about it at <a href=\"https://angular.io/guide/standalone-components#environment-injectors\">https://angular.io/guide/standalone-components#environment-injectors</a>.</p>\n<p><code>environmentInjector</code> ：要用于组件的 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 实例，请在<a href=\"https://angular.io/guide/standalone-components#environment-injectors\">https://angular.io/guide/standalone-components#environment-injectors</a>中查看有关它的其他信息。</p>\n</li>\n<li>\n<p><code>hostElement</code> (optional): A DOM node that should act as a host node for the component. If not\nprovided, Angular creates one based on the tag name used in the component selector (and falls\nback to using <code>div</code> if selector doesn't have tag name info).</p>\n<p><code>hostElement</code> （可选）：应该作为组件的宿主节点的 DOM 节点。如果未提供，Angular 会根据组件选择器中使用的标签名称创建一个（如果选择器没有标签名称信息，则回用 <code>div</code> ）。</p>\n</li>\n<li>\n<p><code>elementInjector</code> (optional): An <code>ElementInjector</code> instance, see additional info about it at\n<a href=\"https://angular.io/guide/hierarchical-dependency-injection#elementinjector\">https://angular.io/guide/hierarchical-dependency-injection#elementinjector</a>.</p>\n<p><code>elementInjector</code> （可选）：一个 <code>ElementInjector</code> 实例，请在<a href=\"https://angular.io/guide/hierarchical-dependency-injection#elementinjector\">https://angular.io/guide/hierarchical-dependency-injection#elementinjector</a>上查看有关它的其他信息。</p>\n</li>\n<li>\n<p><code>projectableNodes</code> (optional): A list of DOM nodes that should be projected through\n<a href=\"api/core/ng-content\"><code>&#x3C;ng-content></code></a> of the new component instance.</p>\n<p><code>projectableNodes</code> （可选）：应该通过新组件实例的<a href=\"api/core/ng-content\"><code>&#x3C;ng-content></code></a>投影的 DOM 节点列表。</p>\n</li>\n</ul>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p><code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef&#x3C;C></a></code>: ComponentRef instance that represents a given Component.</p>\n<p>表示给定 Component 的 ComponentRef 实例。</p>\n\n</div>\n\n\n\n\n\n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/createComponent#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p>The example below demonstrates how the <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> function can be used\nto create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\nso that it gets included into change detection cycles.</p>\n<p>下面的示例演示了如何使用 <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> 函数动态创建 ComponentRef 的实例并将其附加到 ApplicationRef 上，以便它被包含在变更检测周期中。</p>\n<p>Note: the example uses standalone components, but the function can also be used for\nnon-standalone components (declared in an NgModule) as well.</p>\n<p>注：该示例使用了独立组件，但该函数也可用于非独立组件（在 NgModule 中声明）。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `Hello {{ name }}!`\n})\nclass HelloComponent {\n  name = 'Angular';\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `&#x3C;div id=\"hello-component-host\">&#x3C;/div>`\n})\nclass RootComponent {}\n\n// Bootstrap an application.\nconst applicationRef = await <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(RootComponent);\n\n// Locate a DOM node that would be used as a host.\nconst host = document.getElementById('hello-component-host');\n\n// Get an `<a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>` instance from the `<a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>`.\nconst environmentInjector = applicationRef.injector;\n\n// We can now create a `<a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a>` instance.\nconst componentRef = <a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a>(HelloComponent, {host, environmentInjector});\n\n// Last step is to register the newly created ref using the `<a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>` instance\n// to include the component view into change detection cycles.\napplicationRef.attachView(componentRef.hostView);\n</code-example>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - api/core/ViewContainerRef\n - api/core/testing/TestBed\n - guide/deprecations\n - guide/dynamic-component-loader\n - guide/testing-components-basics\n - guide/testing-components-scenarios\n - guide/testing-utility-apis\n-->\n<!-- links from this doc:\n - /api\n - api/core\n - api/core/ApplicationRef\n - api/core/Component\n - api/core/ComponentRef\n - api/core/EnvironmentInjector\n - api/core/Injector\n - api/core/Type\n - api/core/createComponent#createcomponent\n - api/core/createComponent#usage-notes\n - api/core/ng-content\n - api/platform-browser/bootstrapApplication\n - https://angular.io/guide/hierarchical-dependency-injection#elementinjector\n - https://angular.io/guide/standalone-components#environment-injectors\n - https://github.com/angular/angular-cn/edit/cn/packages/core/src/render3/component.ts?message=docs(core)%3A%20请简述你的修改...#L17-L117\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/core/src/render3/component.ts#L17-L117\n-->"
}