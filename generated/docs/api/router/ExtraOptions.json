{
  "id": "api/router/ExtraOptions",
  "title": "ExtraOptions",
  "contents": "\n\n<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/router\", \"name\": \"@angular/router\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/router/ExtraOptions\", \"name\": \"ExtraOptions\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/router\">@angular/router</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/packages/router/src/router_module.ts?message=docs(router)%3A%20请简述你的修改...#L293-L552\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/12.1.0-next.1/packages/router/src/router_module.ts#L293-L552\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  \n  <header class=\"api-header\">\n    <h1 id=\"extraoptions\">ExtraOptions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/ExtraOptions#extraoptions\"><i class=\"material-icons\">link</i></a></h1>\n    \n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n  </header>\n  \n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <section class=\"short-description\">\n    <p translation-result=\"on\">在 <code>forRoot()</code> 方法中提供的一组路由器模块配置选项。</p><p translation-origin=\"off\">A set of configuration options for a router module, provided in the\n<code>forRoot()</code> method.</p>\n\n\n    \n  </section>\n  \n\n  \n\n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/router/ExtraOptions\" class=\"code-anchor\">ExtraOptions</a> {\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#enableTracing\"><span class=\"member-name\">enableTracing</span>?: boolean</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#useHash\"><span class=\"member-name\">useHash</span>?: boolean</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#initialNavigation\"><span class=\"member-name\">initialNavigation</span>?: InitialNavigation</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#errorHandler\"><span class=\"member-name\">errorHandler</span>?: ErrorHandler</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#preloadingStrategy\"><span class=\"member-name\">preloadingStrategy</span>?: any</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#onSameUrlNavigation\"><span class=\"member-name\">onSameUrlNavigation</span>?: 'reload' | 'ignore'</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#scrollPositionRestoration\"><span class=\"member-name\">scrollPositionRestoration</span>?: 'disabled' | 'enabled' | 'top'</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#anchorScrolling\"><span class=\"member-name\">anchorScrolling</span>?: 'disabled' | 'enabled'</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#scrollOffset\"><span class=\"member-name\">scrollOffset</span>?: [number, number] | (() => [number, number])</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#paramsInheritanceStrategy\"><span class=\"member-name\">paramsInheritanceStrategy</span>?: 'emptyOnly' | 'always'</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#malformedUriErrorHandler\"><span class=\"member-name\">malformedUriErrorHandler</span>?: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#urlUpdateStrategy\"><span class=\"member-name\">urlUpdateStrategy</span>?: 'deferred' | 'eager'</a>\n  <a class=\"code-anchor\" href=\"api/router/ExtraOptions#relativeLinkResolution\"><span class=\"member-name\">relativeLinkResolution</span>?: 'legacy' | 'corrected'</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/ExtraOptions#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><p><code>forRoot()</code></p>\n</li>\n  </ul>\n</section>\n\n\n  \n  \n\n  \n<section class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/ExtraOptions#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"enableTracing\"></a>\n          <code class=\"\"><span class=\"member-name\">enableTracing</span>?: boolean</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">如果为 true，则将所有内部导航事件记录到控制台。用于调试。</p><p translation-origin=\"off\">When true, log all internal navigation events to the console.\nUse for debugging.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"useHash\"></a>\n          <code class=\"\"><span class=\"member-name\">useHash</span>?: boolean</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">修改位置策略（<code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code>），用 URL 片段（<code>#</code>）代替 <code>history</code> API。</p><p translation-origin=\"off\">When true, enable the location strategy that uses the URL fragment\ninstead of the history API.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"initialNavigation\"></a>\n          <code class=\"\"><span class=\"member-name\">initialNavigation</span>?: <a href=\"api/router/InitialNavigation\" class=\"code-anchor\">InitialNavigation</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\"><code>enabled</code>、<code>enabledBlocking</code>、<code>enabledNonBlocking</code> 或 <code>disabled</code> 之一。\n设置为 <code>enabled</code> 或 <code>enabledBlocking</code> ，则初始导航在创建根组件之前开始。引导程序将被阻止，直到完成初始导航为止。\n该值是让<a href=\"guide/universal\">服务器端渲染</a>正常工作所必需的。\n设置为 <code>enabledNonBlocking</code>，则初始导航在创建根组件之后开始。初始导航完成后，引导程序不会被阻止。\n设置为 <code>disabled</code>，不执行初始导航。位置监听器是在创建根组件之前设置的。\n如果由于某些复杂的初始化逻辑，而有理由对路由器何时开始其初始导航有更多的控制权，请使用它。</p><p translation-origin=\"off\">One of <code>enabled</code>, <code>enabledBlocking</code>, <code>enabledNonBlocking</code> or <code>disabled</code>.\nWhen set to <code>enabled</code> or <code>enabledBlocking</code>, the initial navigation starts before the root\ncomponent is created. The bootstrap is blocked until the initial navigation is complete. This\nvalue is required for <a href=\"guide/universal\">server-side rendering</a> to work. When set to\n<code>enabledNonBlocking</code>, the initial navigation starts after the root component has been created.\nThe bootstrap is not blocked on the completion of the initial navigation. When set to\n<code>disabled</code>, the initial navigation is not performed. The location listener is set up before the\nroot component gets created. Use if there is a reason to have more control over when the router\nstarts its initial navigation due to some complex initialization logic.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"errorHandler\"></a>\n          <code class=\"\"><span class=\"member-name\">errorHandler</span>?: <a href=\"api/core/ErrorHandler\" class=\"code-anchor\">ErrorHandler</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">导航失败的自定义错误处理器。如果处理器返回一个值，则导航的 Promise 将使用该值进行解析。如果处理器引发异常，则导航 Promise 将被拒绝，并带有该异常。</p><p translation-origin=\"off\">A custom error handler for failed navigations.\nIf the handler returns a value, the navigation Promise is resolved with this value.\nIf the handler throws an exception, the navigation Promise is rejected with the exception.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"preloadingStrategy\"></a>\n          <code class=\"\"><span class=\"member-name\">preloadingStrategy</span>?: any</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">配置预加载策略，参见 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code>。</p><p translation-origin=\"off\">Configures a preloading strategy.\nOne of <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> or <code><a href=\"api/router/NoPreloading\" class=\"code-anchor\">NoPreloading</a></code> (the default).</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"onSameUrlNavigation\"></a>\n          <code class=\"\"><span class=\"member-name\">onSameUrlNavigation</span>?: 'reload' | 'ignore'</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">规定当路由器收到一个导航到当前 URL 的请求时该如何处理。\n默认情况下，路由器会忽略本次导航。不过，这会阻止实现类似于\"刷新\"按钮的功能。\n使用该选项可以控制导航到当前 URL 时的行为。默认为 'ignore'。</p><p translation-origin=\"off\">Define what the router should do if it receives a navigation request to the current URL.\nDefault is <code>ignore</code>, which causes the router ignores the navigation.\nThis can disable features such as a \"refresh\" button.\nUse this option to configure the behavior when navigating to the\ncurrent URL. Default is 'ignore'.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"scrollPositionRestoration\"></a>\n          <code class=\"\"><span class=\"member-name\">scrollPositionRestoration</span>?: 'disabled' | 'enabled' | 'top'</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">配置是否需要在导航回来的时候恢复滚动位置。</p><p translation-origin=\"off\">Configures if the scroll position needs to be restored when navigating back.</p>\n\n</div>\n          <ul>\n<li>\n<p translation-result=\"on\">'disabled' - 什么也不做（默认）。在导航时，会自动维护滚动位置</p><p translation-origin=\"off\">'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">'top' - 在任何一次导航中都把滚动位置设置为 x=0, y=0。</p><p translation-origin=\"off\">'top'- Sets the scroll position to x = 0, y = 0 on all navigation.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  'enabled' —— 当向后导航时，滚动到以前的滚动位置。当向前导航时，如果提供了锚点，则自动滚动到那个锚点，否则把滚动位置设置为 [0, 0]。该选项将来会变成默认值。</p><p translation-origin=\"off\">'enabled'- Restores the previous scroll position on backward navigation, else sets the\nposition to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\nnavigation). This option will be the default in the future.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你可以像下面的例子一样适配它启用时的行为，来自定义恢复滚动位置的策略：</p><p translation-origin=\"off\">You can implement custom scroll restoration behavior by adapting the enabled behavior as\nin the following example.</p>\n\n<code-example language=\"typescript\">\nclass AppModule {\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, viewportScroller: <a href=\"api/common/ViewportScroller\" class=\"code-anchor\">ViewportScroller</a>) {\n    router.events.pipe(\n      filter((e: <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>): e is <a href=\"api/router/Scroll\" class=\"code-anchor\">Scroll</a> => e instanceof <a href=\"api/router/Scroll\" class=\"code-anchor\">Scroll</a>)\n    ).subscribe(e => {\n      if (e.position) {\n        // backward navigation\n        viewportScroller.scrollToPosition(e.position);\n      } else if (e.anchor) {\n        // anchor navigation\n        viewportScroller.scrollToAnchor(e.anchor);\n      } else {\n        // forward navigation\n        viewportScroller.scrollToPosition([0, 0]);\n      }\n    });\n  }\n}\n</code-example>\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"anchorScrolling\"></a>\n          <code class=\"\"><span class=\"member-name\">anchorScrolling</span>?: 'disabled' | 'enabled'</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">设置为 “enabled” 时，如果 URL 有一个片段，就滚动到锚点元素。默认情况下，锚定滚动是禁用的。</p><p translation-origin=\"off\">When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\nAnchor scrolling is disabled by default.</p>\n\n</div>\n          <p translation-result=\"on\">锚点滚动不会在 “popstate” 上发生。相反，我们会恢复存储的位置或滚动到顶部。</p><p translation-origin=\"off\">Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\nthat we stored or scroll to the top.</p>\n\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"scrollOffset\"></a>\n          <code class=\"\"><span class=\"member-name\">scrollOffset</span>?: [number, number] | (() => [number, number])</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">配置当滚动到一个元素时，路由器使用的滚动偏移。</p><p translation-origin=\"off\">Configures the scroll offset the router will use when scrolling to an element.</p>\n\n</div>\n          <p translation-result=\"on\">当给出两个数字时，路由器总会使用它们。\n当给出一个函数时，路由器每当要恢复滚动位置时，都会调用该函数。</p><p translation-origin=\"off\">When given a tuple with x and y position value,\nthe router uses that offset each time it scrolls.\nWhen given a function, the router invokes the function every time\nit restores scroll position.</p>\n\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"paramsInheritanceStrategy\"></a>\n          <code class=\"\"><span class=\"member-name\">paramsInheritanceStrategy</span>?: 'emptyOnly' | 'always'</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">定义路由器如何将参数、数据和已解析的数据从父路由合并到子路由。默认情况下（“emptyOnly”），仅继承无路径或无组件路由的父参数。</p><p translation-origin=\"off\">Defines how the router merges parameters, data, and resolved data from parent to child\nroutes. By default ('emptyOnly'), inherits parent parameters only for\npath-less or component-less routes.</p>\n\n</div>\n          <p translation-result=\"on\">设置为 “always” 时会始终启用父参数的无条件继承。</p><p translation-origin=\"off\">Set to 'always' to enable unconditional inheritance of parent parameters.</p>\n\n<p>Note that when dealing with matrix parameters, \"parent\" refers to the parent <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>\nconfig which does not necessarily mean the \"URL segment to the left\". When the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> <code>path</code>\ncontains multiple segments, the matrix parameters must appear on the last segment. For example,\nmatrix parameters for <code>{path: 'a/b', component: MyComp}</code> should appear as <code>a/b;foo=bar</code> and not\n<code>a;foo=bar/b</code>.</p>\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"malformedUriErrorHandler\"></a>\n          <code class=\"\"><span class=\"member-name\">malformedUriErrorHandler</span>?: (error: URIError, urlSerializer: <a href=\"api/router/UrlSerializer\" class=\"code-anchor\">UrlSerializer</a>, url: string) => <a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一个自定义的 URI 格式无效错误的处理器。每当 encodeURI 包含无效字符序列时，就会调用该处理器。默认的实现是跳转到根路径，抛弃任何路径和参数信息。该函数传入三个参数：</p><p translation-origin=\"off\">A custom handler for malformed URI errors. The handler is invoked when <code>encodedURI</code> contains\ninvalid character sequences.\nThe default implementation is to redirect to the root URL, dropping\nany path or parameter information. The function takes three parameters:</p>\n\n</div>\n          <ul>\n<li>\n<p translation-result=\"on\"><code>'URIError'</code> - 当传入错误的 URL 时抛出的错误。</p><p translation-origin=\"off\"><code>'URIError'</code> - Error thrown when parsing a bad URL.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>'<a href=\"api/router/UrlSerializer\" class=\"code-anchor\">UrlSerializer</a>'</code> - 路由器所配置的 UrlSerializer。</p><p translation-origin=\"off\"><code>'<a href=\"api/router/UrlSerializer\" class=\"code-anchor\">UrlSerializer</a>'</code> - UrlSerializer that’s configured with the router.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>'url'</code> - 导致 URIError 的格式无效的 URL</p><p translation-origin=\"off\"><code>'url'</code> -  The malformed URL that caused the URIError</p>\n\n</li>\n</ul>\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"urlUpdateStrategy\"></a>\n          <code class=\"\"><span class=\"member-name\">urlUpdateStrategy</span>?: 'deferred' | 'eager'</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">定义路由器要何时更新浏览器 URL。默认情况下（“deferred”），在成功导航后进行更新。如果希望在导航开始时更新 URL，则设置为 “eager” 。\n以便早期更新 URL，这样可以通过显示带有失败 URL 的错误消息来处理导航失败。</p><p translation-origin=\"off\">Defines when the router updates the browser URL. By default ('deferred'),\nupdate after successful navigation.\nSet to 'eager' if prefer to update the URL at the beginning of navigation.\nUpdating the URL early allows you to handle a failure of navigation by\nshowing an error message with the URL that failed.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"relativeLinkResolution\"></a>\n          <code class=\"\"><span class=\"member-name\">relativeLinkResolution</span>?: 'legacy' | 'corrected'</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">启用 BUG 补丁，纠正空路径组件的相对链接解析问题。</p><p translation-origin=\"off\">Enables a bug fix that corrects relative link resolution in components with empty paths.\nExample:</p>\n\n</div>\n          <code-example>\nconst routes = [\n  {\n    path: '',\n    component: ContainerComponent,\n    children: [\n      { path: 'a', component: AComponent },\n      { path: 'b', component: BComponent },\n    ]\n  }\n];\n</code-example>\n<p translation-result=\"on\">在 <code>ContainerComponent</code> 中不能这样用：</p><p translation-origin=\"off\">From the <code>ContainerComponent</code>, you should be able to navigate to <code>AComponent</code> using\nthe following <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>, but it will not work if <code>relativeLinkResolution</code> is set\nto <code>'legacy'</code>:</p>\n\n<p><code>&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['./a']\">Link to A&#x3C;/a></code></p>\n<p translation-result=\"on\">不过，可以这样用：</p><p translation-origin=\"off\">However, this will work:</p>\n\n<p><code>&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['../a']\">Link to A&#x3C;/a></code></p>\n<p translation-result=\"on\">换句话说，你需要使用 <code>../</code> 而不是 <code>./</code> 。</p><p translation-origin=\"off\">In other words, you're required to use <code>../</code> rather than <code>./</code> when the relative link\nresolution is set to <code>'legacy'</code>.</p>\n\n<p translation-result=\"on\">v11 中的默认值是 <code>corrected</code>。</p><p translation-origin=\"off\">The default in v11 is <code>corrected</code>.</p>\n\n\n          </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/router\n - api/router/InitialNavigation\n - api/router/ROUTER_CONFIGURATION\n - api/router/RouterModule\n - api/router/testing/RouterTestingModule\n - api/router/testing/setupTestingRouter\n-->\n<!-- links from this doc:\n - /api\n - api/common/LocationStrategy\n - api/common/ViewportScroller\n - api/core/ErrorHandler\n - api/router\n - api/router/Event\n - api/router/ExtraOptions#anchorScrolling\n - api/router/ExtraOptions#enableTracing\n - api/router/ExtraOptions#errorHandler\n - api/router/ExtraOptions#extraoptions\n - api/router/ExtraOptions#initialNavigation\n - api/router/ExtraOptions#instance-properties\n - api/router/ExtraOptions#malformedUriErrorHandler\n - api/router/ExtraOptions#onSameUrlNavigation\n - api/router/ExtraOptions#paramsInheritanceStrategy\n - api/router/ExtraOptions#preloadingStrategy\n - api/router/ExtraOptions#relativeLinkResolution\n - api/router/ExtraOptions#scrollOffset\n - api/router/ExtraOptions#scrollPositionRestoration\n - api/router/ExtraOptions#see-also\n - api/router/ExtraOptions#urlUpdateStrategy\n - api/router/ExtraOptions#useHash\n - api/router/InitialNavigation\n - api/router/NoPreloading\n - api/router/PreloadAllModules\n - api/router/Route\n - api/router/Router\n - api/router/RouterLink\n - api/router/Scroll\n - api/router/UrlSerializer\n - api/router/UrlTree\n - guide/universal\n - https://github.com/angular/angular-cn/edit/aio/packages/router/src/router_module.ts?message=docs(router)%3A%20请简述你的修改...#L293-L552\n - https://github.com/angular/angular-cn/tree/12.1.0-next.1/packages/router/src/router_module.ts#L293-L552\n-->"
}