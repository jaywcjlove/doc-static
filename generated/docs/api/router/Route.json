{
  "id": "api/router/Route",
  "title": "Route",
  "contents": "\n\n<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/router\", \"name\": \"@angular/router\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/router/Route\", \"name\": \"Route\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/router\">@angular/router</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/packages/router/src/config.ts?message=docs(router)%3A%20请简述你的修改...#L214-L660\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/12.1.0-next.1/packages/router/src/config.ts#L214-L660\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  \n  <header class=\"api-header\">\n    <h1 id=\"route\">Route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#route\"><i class=\"material-icons\">link</i></a></h1>\n    \n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n  </header>\n  \n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <section class=\"short-description\">\n    <p translation-result=\"on\">定义单个路由的配置对象。在 <code><a href=\"api/router/Routes-0\" class=\"code-anchor\">Routes</a></code> 数组中收集了一组路由定义，以用作 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的配置。路由器会尝试使用此对象中定义的配置选项，将给定 URL 段与每个路由进行匹配。</p><p translation-origin=\"off\">A configuration object that defines a single route.\nA set of routes are collected in a <code><a href=\"api/router/Routes-0\" class=\"code-anchor\">Routes</a></code> array to define a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> configuration.\nThe router attempts to match segments of a given URL against each route,\nusing the configuration options defined in this object.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/router/Route#description\">查看\"说明\"...</a></p>\n  </section>\n  \n\n  \n\n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> {\n  <a class=\"code-anchor\" href=\"api/router/Route#path\"><span class=\"member-name\">path</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#pathMatch\"><span class=\"member-name\">pathMatch</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#matcher\"><span class=\"member-name\">matcher</span>?: UrlMatcher</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#component\"><span class=\"member-name\">component</span>?: Type&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/router/Route#redirectTo\"><span class=\"member-name\">redirectTo</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#outlet\"><span class=\"member-name\">outlet</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivate\"><span class=\"member-name\">canActivate</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivateChild\"><span class=\"member-name\">canActivateChild</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canDeactivate\"><span class=\"member-name\">canDeactivate</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canLoad\"><span class=\"member-name\">canLoad</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#data\"><span class=\"member-name\">data</span>?: Data</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#resolve\"><span class=\"member-name\">resolve</span>?: ResolveData</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#children\"><span class=\"member-name\">children</span>?: Routes</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#loadChildren\"><span class=\"member-name\">loadChildren</span>?: LoadChildren</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#runGuardsAndResolvers\"><span class=\"member-name\">runGuardsAndResolvers</span>?: RunGuardsAndResolvers</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">支持静态、参数化、重定向和通配符路由，以及自定义路由数据和解析方法。</p><p translation-origin=\"off\">Supports static, parameterized, redirect, and wildcard routes, as well as\ncustom route data and resolve methods.</p>\n\n<p translation-result=\"on\">欲知详情，请参阅<a href=\"guide/router\">《路由指南》</a> 。</p><p translation-origin=\"off\">For detailed usage information, see the <a href=\"guide/router\">Routing Guide</a>.</p>\n\n\n  <p>Further information available in the <a href=\"api/router/Route#usage-notes\">Usage Notes</a>...</p>\n</section>\n\n\n  \n<section class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"path\"></a>\n          <code class=\"\"><span class=\"member-name\">path</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">匹配的路径。不能与自定义 <code>matcher</code> 功能一起使用。使用路由器匹配表示法的 URL 字符串。可以是与任何 URL 匹配的通配符（<code>**</code>）（请参阅下面的使用说明）。默认值为 “/”（根路径）。</p><p translation-origin=\"off\">The path to match against. Cannot be used together with a custom <code>matcher</code> function.\nA URL string that uses router matching notation.\nCan be a wild card (<code>**</code>) that matches any URL (see Usage Notes below).\nDefault is \"/\" (the root path).</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"pathMatch\"></a>\n          <code class=\"\"><span class=\"member-name\">pathMatch</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">路径匹配策略，为 “prefix” 或 “full” 之一。默认为“prefix”。</p><p translation-origin=\"off\">The path-matching strategy, one of 'prefix' or 'full'.\nDefault is 'prefix'.</p>\n\n</div>\n          <p translation-result=\"on\">默认情况下，路由器会从左边开始检查 URL 中的各个元素，以查看此 URL 是否匹配给定的路径，遇到任何一个匹配的，就停止。比如，'/team/11/user' 能匹配 'team/:id'。</p><p translation-origin=\"off\">By default, the router checks URL elements from the left to see if the URL\nmatches a given  path, and stops when there is a match. For example,\n'/team/11/user' matches 'team/:id'.</p>\n\n<p translation-result=\"on\">路径匹配策略 “full” 表示与整个 URL 匹配。重定向空路径路由时，执行此操作很重要。否则，因为空路径是任何 URL 的前缀，所以路由器即使在导航到重定向目标时也会进行重定向，从而造成无限循环。</p><p translation-origin=\"off\">The path-match strategy 'full' matches against the entire URL.\nIt is important to do this when redirecting empty-path routes.\nOtherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating\nto the redirect destination, creating an endless loop.</p>\n\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"matcher\"></a>\n          <code class=\"\"><span class=\"member-name\">matcher</span>?: <a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">自定义 URL 匹配功能。不能与 <code>path</code> 一起使用。</p><p translation-origin=\"off\">A custom URL-matching function. Cannot be used together with <code>path</code>.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"component\"></a>\n          <code class=\"\"><span class=\"member-name\">component</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">路径匹配时实例化的组件。如果要由其子路由指定组件，则可以为空。</p><p translation-origin=\"off\">The component to instantiate when the path matches.\nCan be empty if child routes specify components.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"redirectTo\"></a>\n          <code class=\"\"><span class=\"member-name\">redirectTo</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">路径匹配时重定向到的 URL。如果 URL 以斜杠（/）开头，则为绝对值，否则相对于当前路径 URL。如果不存在，则路由器不会重定向。</p><p translation-origin=\"off\">A URL to redirect to when the path matches.\nAbsolute if the URL begins with a slash (/), otherwise relative to the path URL.\nWhen not present, router does not redirect.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"outlet\"></a>\n          <code class=\"\"><span class=\"member-name\">outlet</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 对象的名字，当路径匹配时会把组件放置在其中。</p><p translation-origin=\"off\">Name of a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> object where the component can be placed\nwhen the path matches.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivate</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一组依赖项注入令牌，用于查找 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 处理器，以确定是否允许当前用户激活该组件。默认情况下，任何用户都可以激活。</p><p translation-origin=\"off\">An array of dependency-injection tokens used to look up <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nactivate the component. By default, any user can activate.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivateChild\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivateChild</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌数组，用于查找 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> 处理器，以确定是否允许当前用户激活组件的子级。默认情况下，任何用户都可以激活子路由。</p><p translation-origin=\"off\">An array of DI tokens used to look up <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> handlers,\nin order to determine if the current user is allowed to activate\na child of the component. By default, any user can activate a child.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canDeactivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canDeactivate</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌数组，用于查找 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code> 处理器，以确定是否允许当前用户停用该组件。默认情况下，任何用户都可以停用。</p><p translation-origin=\"off\">An array of DI tokens used to look up <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\ndeactivate the component. By default, any user can deactivate.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canLoad\"></a>\n          <code class=\"\"><span class=\"member-name\">canLoad</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌数组，用于查找 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code> 处理器，以确定是否允许当前用户加载组件。默认情况下，任何用户都可以加载。</p><p translation-origin=\"off\">An array of DI tokens used to look up <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nload the component. By default, any user can load.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"data\"></a>\n          <code class=\"\"><span class=\"member-name\">data</span>?: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 提供给组件的由开发人员定义的额外数据。默认情况下，不传递任何额外数据。</p><p translation-origin=\"off\">Additional developer-defined data provided to the component via\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>. By default, no additional data is passed.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"resolve\"></a>\n          <code class=\"\"><span class=\"member-name\">resolve</span>?: <a href=\"api/router/ResolveData\" class=\"code-anchor\">ResolveData</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌的映射，用于查找数据解析器。请参阅 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 。</p><p translation-origin=\"off\">A map of DI tokens used to look up data resolvers. See <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"children\"></a>\n          <code class=\"\"><span class=\"member-name\">children</span>?: <a href=\"api/router/Routes-0\" class=\"code-anchor\">Routes</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一个子 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 对象数组，用于指定嵌套路由配置。</p><p translation-origin=\"off\">An array of child <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> objects that specifies a nested route\nconfiguration.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"loadChildren\"></a>\n          <code class=\"\"><span class=\"member-name\">loadChildren</span>?: <a href=\"api/router/LoadChildren\" class=\"code-anchor\">LoadChildren</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一个对象，指定要惰性加载的子路由。</p><p translation-origin=\"off\">An object specifying lazy-loaded child routes.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"runGuardsAndResolvers\"></a>\n          <code class=\"\"><span class=\"member-name\">runGuardsAndResolvers</span>?: <a href=\"api/router/RunGuardsAndResolvers\" class=\"code-anchor\">RunGuardsAndResolvers</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">定义何时运行守卫（guard）和解析器（resolver）。为下列值之一</p><p translation-origin=\"off\">Defines when guards and resolvers will be run. One of</p>\n\n</div>\n          <ul>\n<li>\n<p translation-result=\"on\"><code>paramsOrQueryParamsChange</code> ：当查询参数发生变化时运行。</p><p translation-origin=\"off\"><code>paramsOrQueryParamsChange</code> : Run when query parameters change.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">    <code>always</code> ：在每次执行时运行。默认情况下，仅当路由的矩阵参数发生更改时，守卫和解析器才会运行。</p><p translation-origin=\"off\"><code>always</code> : Run on every execution.\nBy default, guards and resolvers run only when the matrix\nparameters of the route change.</p>\n\n</li>\n</ul>\n\n          </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"simple-configuration\" translation-result=\"on\">简单配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"simple-configuration\">Simple Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由指定在导航到 <code>/team/11/user/bob</code> 时，路由器会在其中创建带有 'User' 子组件的 'Team' 组件。</p><p translation-origin=\"off\">The following route specifies that when navigating to, for example,\n<code>/team/11/user/bob</code>, the router creates the 'Team' component\nwith the 'User' child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n component: Team,\n  children: [{\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<h3 id=\"multiple-outlets\" translation-result=\"on\">多重出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"multiple-outlets\">Multiple Outlets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由创建具有多个出口的兄弟组件。当导航到 <code>/team/11(aux:chat/jim)</code> 时，路由器会在 'Chat' 组件旁边创建 'Team' 组件。 'Chat' 组件放置在 'aux' 出口中。</p><p translation-origin=\"off\">The following route creates sibling components with multiple outlets.\nWhen navigating to <code>/team/11(aux:chat/jim)</code>, the router creates the 'Team' component next to\nthe 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team\n}, {\n  path: 'chat/:user',\n  component: Chat\n  outlet: 'aux'\n}]\n</code-example>\n<h3 id=\"wild-cards\" translation-result=\"on\">通配符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"wild-cards\">Wild Cards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由使用通配符表示法来指定始终实例化的组件，无论你导航到何处。</p><p translation-origin=\"off\">The following route uses wild-card notation to specify a component\nthat is always instantiated regardless of where you navigate to.</p>\n\n<code-example>\n[{\n  path: '**',\n  component: WildcardComponent\n}]\n</code-example>\n<h3 id=\"redirects\" translation-result=\"on\">重定向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"redirects\">Redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当寻找子路径时，以下路由使用 <code>redirectTo</code> 属性忽略给定 URL 的一部分。</p><p translation-origin=\"off\">The following route uses the <code>redirectTo</code> property to ignore a segment of\na given URL when looking for a child path.</p>\n\n<p translation-result=\"on\">导航到 '/team/11/legacy/user/jim' 时，路由器将 URL 段 '/team/11/legacy/user/jim' 更改为 '/team/11/user/jim'，然后实例化 Team 组件以及其中的 User 子组件。</p><p translation-origin=\"off\">When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n'/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\nthe Team component with the User child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: 'legacy/user/:name',\n    redirectTo: 'user/:name'\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">重定向路径可以是相对的（如本示例所示），也可以是绝对的。 <code>redirectTo</code> 值更改为绝对 URL 段 '/user/:name'，则结果 URL 也是绝对 URL，'/user/jim'。</p><p translation-origin=\"off\">The redirect path can be relative, as shown in this example, or absolute.\nIf we change the <code>redirectTo</code> value in the example to the absolute URL segment '/user/:name',\nthe result URL is also absolute, '/user/jim'.</p>\n\n<h3 id=\"empty-path\" translation-result=\"on\">空路径<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"empty-path\">Empty Path<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">空路径路由可用来实例化一些不\"消费\"任何 url 区段的组件。</p><p translation-origin=\"off\">Empty-path route configurations can be used to instantiate components that do not 'consume'\nany URL segments.</p>\n\n<p translation-result=\"on\">在下列配置中，当导航到 <code>/team/11</code> 时，路由器会实例化 'AllUsers' 组件。</p><p translation-origin=\"off\">In the following configuration, when navigating to\n<code>/team/11</code>, the router instantiates the 'AllUsers' component.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: AllUsers\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">空路径路由可以有子路由。在以下示例中，当导航到 <code>/team/11/user/jim</code> 时，路由器会实例化带有用户组件的包装器组件。</p><p translation-origin=\"off\">Empty-path routes can have children. In the following example, when navigating\nto <code>/team/11/user/jim</code>, the router instantiates the wrapper component with\nthe user component in it.</p>\n\n<p translation-result=\"on\">请注意，空路径路由会继承其父级的参数和数据。</p><p translation-origin=\"off\">Note that an empty path route inherits its parent's parameters and data.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: WrapperCmp,\n    children: [{\n      path: 'user/:name',\n      component: User\n    }]\n  }]\n}]\n</code-example>\n<h3 id=\"matching-strategy\" translation-result=\"on\">匹配策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"matching-strategy\">Matching Strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">默认的路径匹配策略是 'prefix'，这意味着路由器从左开始检查 URL 元素以查看 URL 是否与指定的路径匹配。比如，'/team/11/user' 与 'team/:id' 匹配。</p><p translation-origin=\"off\">The default path-match strategy is 'prefix', which means that the router\nchecks URL elements from the left to see if the URL matches a specified path.\nFor example, '/team/11/user' matches 'team/:id'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<p translation-result=\"on\">你可以将路径匹配策略指定为 'full'，以确保路径覆盖整个未使用的 URL。重定向到空路径路由时，这样做很重要。否则，因为空路径是任何 URL 的前缀，所以路由器即使在导航到重定向目标时又会被再次重定向，从而造成无限循环。</p><p translation-origin=\"off\">You can specify the path-match strategy 'full' to make sure that the path\ncovers the whole unconsumed URL. It is important to do this when redirecting\nempty-path routes. Otherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating to the redirect destination,\ncreating an endless loop.</p>\n\n<p translation-result=\"on\">在以下示例中，提供 'full' <code>pathMatch</code> 策略可确保路由器仅在导航到 '/' 时才应用重定向。</p><p translation-origin=\"off\">In the following example, supplying the 'full' <code>pathMatch</code> strategy ensures\nthat the router applies the redirect if and only if navigating to '/'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<h3 id=\"componentless-routes\" translation-result=\"on\">无组件路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"componentless-routes\">Componentless Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以在同级组件之间共享参数。比如，假设两个同级组件应该彼此相邻，并且它们两个都需要 ID 参数。你可以使用不在顶层指定组件的路由来完成此操作。</p><p translation-origin=\"off\">You can share parameters between sibling components.\nFor example, suppose that two sibling components should go next to each other,\nand both of them require an ID parameter. You can accomplish this using a route\nthat does not specify a component at the top level.</p>\n\n<p translation-result=\"on\">在以下示例中，'MainChild' 和 'AuxChild' 是同级。当导航到 'parent/10/(a//aux:b)' 时，该路由会实例化彼此相邻的主要子组件和 aux 子组件。为此，应用程序组件必须定义主要和辅助出口。</p><p translation-origin=\"off\">In the following example, 'MainChild' and 'AuxChild' are siblings.\nWhen navigating to 'parent/10/(a//aux:b)', the route instantiates\nthe main child and aux child components next to each other.\nFor this to work, the application component must have the primary and aux outlets defined.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: 'a', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p translation-result=\"on\">路由器将无组件父级的参数、数据和解析结果合并为子级的参数、数据和解析结果。</p><p translation-origin=\"off\">The router merges the parameters, data, and resolve of the componentless\nparent into the parameters, data, and resolve of the children.</p>\n\n<p translation-result=\"on\">当用空路径字符串定义子组件时，这特别有用，如以下示例所示。使用此配置，导航到 '/parent/10' 将创建主要子组件和 aux 组件。</p><p translation-origin=\"off\">This is especially useful when child components are defined\nwith an empty path string, as in the following example.\nWith this configuration, navigating to '/parent/10' creates\nthe main child and aux components.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<h3 id=\"lazy-loading\" translation-result=\"on\">惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"lazy-loading\">Lazy Loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">惰性加载通过将应用程序拆分为多个包并按需加载它们来加快应用程序加载时间。要使用惰性加载，请在 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 中提供 <code>loadChildren</code> 属性，而不是 <code>children</code> 属性。</p><p translation-origin=\"off\">Lazy loading speeds up application load time by splitting the application\ninto multiple bundles and loading them on demand.\nTo use lazy loading, provide the <code>loadChildren</code> property in the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> object,\ninstead of the <code>children</code> property.</p>\n\n<p translation-result=\"on\">给定以下示例路由，路由器将使用浏览器原生导入体系按需惰性加载相关模块。</p><p translation-origin=\"off\">Given the following example route, the router will lazy load\nthe associated module on demand using the browser native import system.</p>\n\n<code-example>\n[{\n  path: 'lazy',\n  loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n}];\n</code-example>\n\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/router\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/Data\n - api/router/ExtraOptions\n - api/router/LoadChildrenCallback\n - api/router/NoPreloading\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/ROUTES-1\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/RouteConfigLoadEnd\n - api/router/RouteConfigLoadStart\n - api/router/Router\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterOutletContract\n - api/router/Routes-0\n - api/router/RunGuardsAndResolvers\n - api/router/UrlMatcher\n - api/router/provideRoutes\n - api/router/testing/RouterTestingModule\n - api/router/testing/setupTestingRouter\n - guide/cheatsheet\n - guide/router\n - guide/router-reference\n - guide/router-tutorial-toh\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - /api\n - api/core/Type\n - api/router\n - api/router/ActivatedRoute\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/Data\n - api/router/LoadChildren\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/Route#canActivate\n - api/router/Route#canActivateChild\n - api/router/Route#canDeactivate\n - api/router/Route#canLoad\n - api/router/Route#children\n - api/router/Route#component\n - api/router/Route#componentless-routes\n - api/router/Route#data\n - api/router/Route#description\n - api/router/Route#empty-path\n - api/router/Route#instance-properties\n - api/router/Route#lazy-loading\n - api/router/Route#loadChildren\n - api/router/Route#matcher\n - api/router/Route#matching-strategy\n - api/router/Route#multiple-outlets\n - api/router/Route#outlet\n - api/router/Route#path\n - api/router/Route#pathMatch\n - api/router/Route#redirectTo\n - api/router/Route#redirects\n - api/router/Route#resolve\n - api/router/Route#route\n - api/router/Route#runGuardsAndResolvers\n - api/router/Route#simple-configuration\n - api/router/Route#usage-notes\n - api/router/Route#wild-cards\n - api/router/Router\n - api/router/RouterOutlet\n - api/router/Routes-0\n - api/router/RunGuardsAndResolvers\n - api/router/UrlMatcher\n - guide/router\n - https://github.com/angular/angular-cn/edit/aio/packages/router/src/config.ts?message=docs(router)%3A%20请简述你的修改...#L214-L660\n - https://github.com/angular/angular-cn/tree/12.1.0-next.1/packages/router/src/config.ts#L214-L660\n-->"
}
