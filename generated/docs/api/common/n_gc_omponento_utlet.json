{
  "id": "api/common/NgComponentOutlet",
  "title": "NgComponentOutlet",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/common\", \"name\": \"@angular/common\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/common/NgComponentOutlet\", \"name\": \"NgComponentOutlet\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/common\">@angular/common</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/common/src/directives/ng_component_outlet.ts?message=docs(common)%3A%20请简述你的修改...#L10-L167\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/common/src/directives/ng_component_outlet.ts#L10-L167\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ngcomponentoutlet\">NgComponentOutlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#ngcomponentoutlet\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p>Instantiates a <a href=\"api/core/Component\"><code>Component</code></a> type and inserts its Host View into the current View.\n<code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> provides a declarative approach for dynamic component creation.</p>\n<p>实例化单个 <a href=\"api/core/Component\"><code>Component</code></a> 类型，并将其宿主视图插入当前视图。<code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code>\n为动态组件创建提供了一种声明式方法。</p>\n\n    <p no-translate=\"\"><a href=\"api/common/NgComponentOutlet#description\">查看\"说明\"...</a></p>\n  </section>\n<h2 id=\"导出自\">导出自<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#导出自\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n  <li>\n    <a href=\"api/common/CommonModule\">\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box\">CommonModule</code-example>\n    </a>\n  </li>\n</ul>\n  \n<section class=\"selector-list\">\n  <h2 id=\"selectors\">选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><code>[<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>]</code></li>\n  </ul>\n</section>\n\n  \n<section class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutlet\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\"><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a></span>: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any> | null</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletInjector\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletInjector</span>?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletContent\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletContent</span>?: any[][]</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletNgModule\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletNgModule</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletNgModuleFactory\"></a>\n          <code class=\"deprecated-api-item\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletNgModuleFactory</span>?: <a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>&#x3C;any></code>\n        </td>\n        <td>\n          \n          <p><strong>Deprecated</strong> This input is deprecated, use <code>ngComponentOutletNgModule</code> instead.</p>\n<p>不推荐使用此输入，请改用 <code>ngComponentOutletNgModule</code> 。</p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n  \n  <section class=\"description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p><code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> requires a component type, if a falsy value is set the view will clear and\nany existing component will be destroyed.</p>\n<p><code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> 所需的组件类型，如果设置为假值，则视图将被清除并且任何现有组件将被销毁。</p>\n\n    <h3 id=\"fine-tune-control\">Fine tune control<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#fine-tune-control\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"微调控制\">微调控制<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#微调控制\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can control the component creation process by using the following optional attributes:</p>\n<p>你可以使用以下可选属性来控制组件的创建过程：</p>\n<ul>\n<li>\n<p><code>ngComponentOutletInjector</code>: Optional custom <a href=\"api/core/Injector\"><code>Injector</code></a> that will be used as parent for\nthe Component. Defaults to the injector of the current view container.</p>\n<p><code>ngComponentOutletInjector</code> ：可选的自定义 <a href=\"api/core/Injector\"><code>Injector</code></a> ，将用作 Component\n的父级。默认为当前视图容器的注入器。</p>\n</li>\n<li>\n<p><code>ngComponentOutletContent</code>: Optional list of projectable nodes to insert into the content\nsection of the component, if it exists.</p>\n<p><code>ngComponentOutletContent</code> ：要插入组件的 content 部分的可项目节点的可选列表（如果存在）。</p>\n</li>\n<li>\n<p><code>ngComponentOutletNgModule</code>: Optional NgModule class reference to allow loading another\nmodule dynamically, then loading a component from that module.</p>\n<p><code>ngComponentOutletNgModule</code> ：可选的 NgModule\n类引用，以允许动态加载另一个模块，然后从该模块加载组件。</p>\n</li>\n<li>\n<p><code>ngComponentOutletNgModuleFactory</code>: Deprecated config option that allows providing optional\nNgModule factory to allow loading another module dynamically, then loading a component from\nthat module. Use <code>ngComponentOutletNgModule</code> instead.</p>\n<p><code>ngComponentOutletNgModuleFactory</code> ：不推荐使用的配置选项，它允许提供可选的 NgModule\n工厂以允许动态加载另一个模块，然后从该模块加载组件。改用 <code>ngComponentOutletNgModule</code> 。</p>\n</li>\n</ul>\n<h3 id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#syntax\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"语法\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#语法\"><i class=\"material-icons\">link</i></a></h3>\n<p>Simple</p>\n<p>简单</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression\">&#x3C;/ng-container>\n</code-example>\n<p>Customized injector/content</p>\n<p>定制的注入器/内容</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  injector: injectorExpression;\n                                  content: contentNodesExpression;\">\n&#x3C;/ng-container>\n</code-example>\n<p>Customized NgModule reference</p>\n<p>定制的 ngModule 引用</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  ngModule: ngModuleClass;\">\n&#x3C;/ng-container>\n</code-example>\n<h3 id=\"a-simple-example\">A simple example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#a-simple-example\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"一个简单的例子\">一个简单的例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#一个简单的例子\"><i class=\"material-icons\">link</i></a></h3>\n<code-example path=\"common/ngComponentOutlet/ts/module.ts\" region=\"SimpleExample\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'hello-world', template: 'Hello World!'})\nexport class HelloWorld {\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-component-outlet-simple-example',\n  template: `&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"HelloWorld\">&#x3C;/ng-container>`\n})\nexport class NgComponentOutletSimpleExample {\n  // This field is necessary to expose HelloWorld to the template.\n  HelloWorld = HelloWorld;\n}\n\n</code-example>\n<p>A more complete example with additional options:</p>\n<code-example path=\"common/ngComponentOutlet/ts/module.ts\" region=\"CompleteExample\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Greeter {\n  suffix = '!';\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'complete-component',\n  template: `Complete: &#x3C;ng-content>&#x3C;/ng-content> &#x3C;ng-content>&#x3C;/ng-content>{{ greeter.suffix }}`\n})\nexport class CompleteComponent {\n  constructor(public greeter: Greeter) {}\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-component-outlet-complete-example',\n  template: `\n    &#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"CompleteComponent;\n                                      injector: myInjector;\n                                      content: myContent\">&#x3C;/ng-container>`\n})\nexport class NgComponentOutletCompleteExample {\n  // This field is necessary to expose CompleteComponent to the template.\n  CompleteComponent = CompleteComponent;\n  myInjector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>;\n\n  myContent = [[document.createTextNode('Ahoj')], [document.createTextNode('Svet')]];\n\n  constructor(injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    this.myInjector =\n        Injector.create({providers: [{provide: Greeter, deps: []}], parent: injector});\n  }\n}\n\n</code-example>\n\n  </section>\n\n  \n  \n  \n  </div>\n</article>\n\n<!-- links to this doc:\n - api/common\n - api/common/CommonModule\n - api/core/OnChanges\n - api/core/OnDestroy\n - guide/deprecations\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/CommonModule\n - api/common/NgComponentOutlet#a-simple-example\n - api/common/NgComponentOutlet#description\n - api/common/NgComponentOutlet#fine-tune-control\n - api/common/NgComponentOutlet#instance-properties\n - api/common/NgComponentOutlet#ngcomponentoutlet\n - api/common/NgComponentOutlet#selectors\n - api/common/NgComponentOutlet#syntax\n - api/common/NgComponentOutlet#一个简单的例子\n - api/common/NgComponentOutlet#导出自\n - api/common/NgComponentOutlet#微调控制\n - api/common/NgComponentOutlet#语法\n - api/core/Component\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModuleFactory\n - api/core/Type\n - https://github.com/angular/angular-cn/edit/cn/packages/common/src/directives/ng_component_outlet.ts?message=docs(common)%3A%20请简述你的修改...#L10-L167\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/common/src/directives/ng_component_outlet.ts#L10-L167\n-->"
}