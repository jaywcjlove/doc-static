{
  "id": "api/core",
  "title": "@angular/core",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/cn/packages/core/PACKAGE.md?message=docs(...)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/15.0.1/packages/core/PACKAGE.md\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n<header class=\"api-header\">\n  <h1 id=\"angularcore\">@angular/core<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#angularcore\"><i class=\"material-icons\">link</i></a></h1>\n  <label class=\"api-type-label package\">package</label>\n  \n  \n  \n</header>\n\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\"><p>Implements Angular's core functionality, low-level services, and utilities.</p>\n\n  <ul>\n<li>\n<p>Defines the class infrastructure for components, view hierarchies, change detection, rendering, and event handling.</p>\n</li>\n<li>\n<p>Defines the decorators that supply metadata and context for Angular constructs. </p>\n</li>\n<li>\n<p>Defines infrastructure for dependency injection (DI), internationalization (i18n), and various testing and debugging facilities.</p>\n</li>\n</ul>\n\n\n  \n\n  \n  <h2 translation-result=\"on\" id=\"入口点\">入口点<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#入口点\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"entry-points\">Entry points<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#entry-points\"><i class=\"material-icons\">link</i></a></h2>\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"主要\">主要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#主要\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"primary\">Primary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#primary\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core#primary-entry-point-exports\">@angular/core</a></code></td>\n        <td>\n          \n          <p>Implements Angular's core functionality, low-level services, and utilities.</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"次要\">次要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#次要\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"secondary\">Secondary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#secondary\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/global\">@angular/core/global</a></code></td>\n        <td>\n          \n          <p>Exposes a set of functions in the global namespace which are useful for debugging the current state\nof your application.\nThese functions are exposed via the global <code>ng</code> \"namespace\" variable automatically when you import\nfrom <code>@angular/core</code> and run your application in development mode. These functions are not exposed\nwhen the application runs in a production mode.</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/testing\">@angular/core/testing</a></code></td>\n        <td>\n          \n          <p>Provides infrastructure for testing Angular core functionality.</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n\n  <h2 translation-result=\"on\" id=\"主要入口点的导出\">主要入口点的导出<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#主要入口点的导出\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"primary-entry-point-exports\">Primary entry point exports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#primary-entry-point-exports\"><i class=\"material-icons\">link</i></a></h2>\n  \n  \n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"ngmodules\">NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationModule\">ApplicationModule</a></code></td>\n        <td>\n          \n          <p>Re-exported by <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>, which is included automatically in the root\n<code>AppModule</code> when you create a new app with the CLI <code>new</code> command. Eagerly injects\n<code><a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a></code> to instantiate it.</p>\n<p>由 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 重新导出，当你使用 CLI <code>new</code> 命令创建新应用时，它会自动包含在根 <code>AppModule</code>\n中。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"类\">类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#类\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"classes\">Classes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#classes\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationInitStatus\">ApplicationInitStatus</a></code></td>\n        <td>\n          \n          <p>A class that reflects the state of running <a href=\"api/core/APP_INITIALIZER\"><code>APP_INITIALIZER</code></a> functions.</p>\n<p>反映正在运行的 <a href=\"api/core/APP_INITIALIZER\"><code>APP_INITIALIZER</code></a> 函数状态的类。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationRef\">ApplicationRef</a></code></td>\n        <td>\n          \n          <p>A reference to an Angular application running on a page.</p>\n<p>对页面上运行的 Angular 应用程序的引用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ChangeDetectorRef\">ChangeDetectorRef</a></code></td>\n        <td>\n          \n          <p>Base class that provides change detection functionality.\nA change-detection tree collects all views that are to be checked for changes.\nUse the methods to add and remove views from the tree, initiate change-detection,\nand explicitly mark views as <em>dirty</em>, meaning that they have changed and need to be re-rendered.</p>\n<p>Angular 各种视图的基础类，提供变更检测功能。\n变更检测树会收集要检查的所有视图。\n使用这些方法从树中添加或移除视图、初始化变更检测并显式地把这些视图标记为<em>脏的</em>，意思是它们变了、需要重新渲染。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/Compiler\" class=\"deprecated-api-item\">Compiler</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n<p>Ivy JIT 模式不需要访问此符号。有关其他上下文，请参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API\n更改</a>。</p>\n\n          <p>Low-level service for running the angular compiler during runtime\nto create <a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a>s, which\ncan later be used to create and render a Component instance.</p>\n<p>本底层服务用于供 Angular 编译器在运行期间创建 <a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a>，该工厂以后可用于创建和渲染组件实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/CompilerFactory\" class=\"deprecated-api-item\">CompilerFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n<p>Ivy JIT 模式不需要访问此符号。有关其他上下文，请参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API\n更改</a>。</p>\n\n          <p>A factory for creating a Compiler</p>\n<p>用于创建编译器的工厂</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ComponentFactory\" class=\"deprecated-api-item\">ComponentFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Angular no longer requires Component factories. Please use other APIs where\nComponent class can be used directly.</p>\n<p>Angular 不再需要组件工厂。请使用可以直接使用 Component 类的其他 API。</p>\n\n          <p>Base class for a factory that can create a component dynamically.\nInstantiate a factory for a given type of component with <code>resolveComponentFactory()</code>.\nUse the resulting <code>ComponentFactory.create()</code> method to create a component of that type.</p>\n<p>可用来动态创建组件的工厂的基类。<code>resolveComponentFactory()</code>\n实例化给定类型的组件的工厂。使用生成的 <code>ComponentFactory.create()</code> 方法创建该类型的组件。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ComponentFactoryResolver\" class=\"deprecated-api-item\">ComponentFactoryResolver</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Angular no longer requires Component factories. Please use other APIs where\nComponent class can be used directly.</p>\n<p>Angular 不再需要组件工厂。请使用可以直接使用 Component 类的其他 API。</p>\n\n          <p>A simple registry that maps <code>Components</code> to generated <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> classes\nthat can be used to create instances of components.\nUse to obtain the factory for a given component type,\nthen use the factory's <code>create()</code> method to create a component of that type.</p>\n<p>一个简单的注册表，它将 <code>Components</code> 映射到生成的 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>\n类，该类可用于创建组件的实例。用于获取给定组件类型的工厂，然后使用工厂的 <code>create()</code>\n方法创建该类型的组件。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ComponentRef\">ComponentRef</a></code></td>\n        <td>\n          \n          <p>Represents a component created by a <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>.\nProvides access to the component instance and related objects,\nand provides the means of destroying the instance.</p>\n<p>表示由 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 创建的组件。提供对组件实例和相关对象的访问，并提供销毁实例的方法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugElement\">DebugElement</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugEventListener\">DebugEventListener</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugNode\">DebugNode</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/DefaultIterableDiffer\" class=\"deprecated-api-item\">DefaultIterableDiffer</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> v4.0.0 - Should not be part of public API.</p>\n<p>v4.0.0-不应成为公共 API 的一部分。</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ElementRef\">ElementRef</a></code></td>\n        <td>\n          \n          <p>A wrapper around a native element inside of a View.</p>\n<p>对视图中某个原生元素的包装器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EmbeddedViewRef\">EmbeddedViewRef</a></code></td>\n        <td>\n          \n          <p>Represents an Angular <a href=\"guide/glossary#view\">view</a> in a view container.\nAn <a href=\"guide/glossary#view-tree\">embedded view</a> can be referenced from a component\nother than the hosting component whose template defines it, or it can be defined\nindependently by a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>.</p>\n<p>表示视图容器中的 Angular\n<a href=\"guide/glossary#view\">视图</a>。<a href=\"guide/glossary#view-tree\">嵌入视图</a>可以从在模板中定义它的宿主组件之外的组件中引用，也可以由\n<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 进行独立定义。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EnvironmentInjector\">EnvironmentInjector</a></code></td>\n        <td>\n          \n          <p>An <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> that's part of the environment injector hierarchy, which exists outside of the\ncomponent tree.</p>\n<p>创建一个新的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，它是使用 <code><a href=\"api/core/InjectorType\" class=\"code-anchor\">InjectorType</a>&#x3C;any></code> 的 <code>defType</code> 配置的。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ErrorHandler\">ErrorHandler</a></code></td>\n        <td>\n          \n          <p>Provides a hook for centralized exception handling.</p>\n<p>提供用于集中式异常处理的挂钩。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EventEmitter\">EventEmitter</a></code></td>\n        <td>\n          \n          <p>Use in components with the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> directive to emit custom events\nsynchronously or asynchronously, and register handlers for those events\nby subscribing to an instance.</p>\n<p>用在带有 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>\n指令的组件中，以同步或异步方式发出自定义事件，并通过订阅实例来为这些事件注册处理器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectionToken\">InjectionToken</a></code></td>\n        <td>\n          \n          <p>Creates a token that can be used in a DI Provider.</p>\n<p>创建可用于 DI 提供者的令牌。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Injector\">Injector</a></code></td>\n        <td>\n          \n          <p>Concrete injectors implement this interface. Injectors are configured\nwith <a href=\"guide/glossary#provider\">providers</a> that associate\ndependencies of various types with <a href=\"guide/glossary#di-token\">injection tokens</a>.</p>\n<p>具体的注入器会实现此接口。配置有<a href=\"guide/glossary#provider\">某些提供者</a>的注入器，这些提供者会将各种类型的依赖项与<a href=\"guide/glossary#di-token\">注入令牌</a>相关联。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDiffers\">IterableDiffers</a></code></td>\n        <td>\n          \n          <p>A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</p>\n<p>NgFor、NgClass 等使用的不同迭代策略的存储库。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDiffers\">KeyValueDiffers</a></code></td>\n        <td>\n          \n          <p>A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</p>\n<p>NgClass、NgStyle 等使用的不同映射表差异策略的存储库。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ModuleWithComponentFactories\" class=\"deprecated-api-item\">ModuleWithComponentFactories</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n<p>Ivy JIT 模式不需要访问此符号。有关其他上下文，请参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API\n更改</a>。</p>\n\n          <p>Combination of NgModuleFactory and ComponentFactories.</p>\n<p>NgModuleFactory 和一些 ComponentFactory 的组合。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/NgModuleFactory\" class=\"deprecated-api-item\">NgModuleFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\nJIT mode. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a>\nfor additional context. Angular provides APIs that accept NgModule classes directly (such as\n<a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a> and\n<a href=\"api/core/createNgModule\">createNgModule</a>), consider switching to those APIs instead of\nusing factory-based ones.</p>\n<p>此类主要作为 ViewEngine-based JIT API 的一部分使用，在 Ivy JIT\n模式下不再需要。有关其他上下文，请参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API\n更改</a>。 Angular 提供了直接接受 NgModule 类的\nAPI（例如<a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a>和<a href=\"api/core/createNgModuleRef\">createNgModuleRef</a>\n），请考虑切换到这些 API，而不是使用基于工厂的 API。</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgModuleRef\">NgModuleRef</a></code></td>\n        <td>\n          \n          <p>Represents an instance of an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> created by an <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>.\nProvides access to the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> instance and related objects.</p>\n<p><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 创建的 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 的实例。提供对 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 实例和相关对象的访问。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgProbeToken\">NgProbeToken</a></code></td>\n        <td>\n          \n          <p>A token for third-party components that can register themselves with NgProbe.</p>\n<p>本令牌可以在 NgProbe 中注册自己的第三方组件。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgZone\">NgZone</a></code></td>\n        <td>\n          \n          <p>An injectable service for executing work inside or outside of the Angular zone.</p>\n<p>一种用于在 Angular Zone 内部或外部执行任务的可注入服务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PlatformRef\">PlatformRef</a></code></td>\n        <td>\n          \n          <p>The Angular platform is the entry point for Angular on a web page.\nEach page has exactly one platform. Services (such as reflection) which are common\nto every Angular application running on the page are bound in its scope.\nA page's platform is initialized implicitly when a platform is created using a platform\nfactory such as <code>PlatformBrowser</code>, or explicitly by calling the <code><a href=\"api/core/createPlatform\" class=\"code-anchor\">createPlatform</a>()</code> function.</p>\n<p>Angular 平台是 Angular 在网页上的入口点。每个页面只有一个平台。页面上运行的每个 Angular\n应用程序所共有的服务（比如反射）都在其范围内绑定。当使用 <code>PlatformBrowser</code>\n这样的平台工厂创建平台时，将隐式初始化此页面的平台；也可以通过调用 <code><a href=\"api/core/createPlatform\" class=\"code-anchor\">createPlatform</a>()</code>\n函数来显式初始化此页面的平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Query\">Query</a></code></td>\n        <td>\n          \n          <p>Base class for query metadata.</p>\n<p>查询元数据的基类。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/QueryList\">QueryList</a></code></td>\n        <td>\n          \n          <p>An unmodifiable list of items that Angular keeps up to date when the state\nof the application changes.</p>\n<p>一个不可修改的条目列表，当应用状态变化时，Angular 会保证它是最新的。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ReflectiveInjector\" class=\"deprecated-api-item\">ReflectiveInjector</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> from v5 - slow and brings in a lot of code, Use <code>Injector.create</code> instead.</p>\n<p>从 v5 开始 - 速度慢，并且引入了大量代码，请改用 <code>Injector.create</code> 。</p>\n\n          <p>A ReflectiveDependency injection container used for instantiating objects and resolving\ndependencies.</p>\n<p>一个 ReflectiveDependency 注入容器，用于实例化对象和解析依赖关系。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ReflectiveKey\" class=\"deprecated-api-item\">ReflectiveKey</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> No replacement</p>\n<p>无替代品</p>\n\n          <p>A unique object used for retrieving items from the <a href=\"api/core/ReflectiveInjector\"><code>ReflectiveInjector</code></a>.</p>\n<p>用于从 <a href=\"api/core/ReflectiveInjector\"><code>ReflectiveInjector</code></a> 中检索项目的唯一对象。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Renderer2\">Renderer2</a></code></td>\n        <td>\n          \n          <p>Extend this base class to implement custom rendering. By default, Angular\nrenders a template into DOM. You can use custom rendering to intercept\nrendering calls, or to render to something other than DOM.</p>\n<p>扩展此基类以实现自定义渲染器。默认情况下，Angular 会把模板渲染成 DOM。\n你可以使用自定义渲染器来拦截渲染类调用，或用于渲染一些非 DOM 的东西。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererFactory2\">RendererFactory2</a></code></td>\n        <td>\n          \n          <p>Creates and initializes a custom renderer that implements the <code><a href=\"api/core/Renderer2\" class=\"code-anchor\">Renderer2</a></code> base class.</p>\n<p>创建并初始化实现 <code><a href=\"api/core/Renderer2\" class=\"code-anchor\">Renderer2</a></code> 基类的自定义渲染器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ResolvedReflectiveFactory\">ResolvedReflectiveFactory</a></code></td>\n        <td>\n          \n          <p>An internal resolved representation of a factory function created by resolving <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code>.</p>\n<p><code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 创建的工厂函数的内部解析表示形式。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Sanitizer\">Sanitizer</a></code></td>\n        <td>\n          \n          <p>Sanitizer is used by the views to sanitize potentially dangerous values.</p>\n<p>视图使用消毒器来对潜在的危险值进行无害化处理。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SimpleChange\">SimpleChange</a></code></td>\n        <td>\n          \n          <p>Represents a basic change from a previous to a new value for a single\nproperty on a directive instance. Passed as a value in a\n<a href=\"api/core/SimpleChanges\"><code>SimpleChanges</code></a> object to the <code>ngOnChanges</code> hook.</p>\n<p>表示指令实例上单个属性从先前值到新值的基本变更对象。在 <a href=\"api/core/SimpleChanges\"><code>SimpleChanges</code></a> 对象中作为值传递给 <code>ngOnChanges</code> 挂钩。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TemplateRef\">TemplateRef</a></code></td>\n        <td>\n          \n          <p>Represents an embedded template that can be used to instantiate embedded views.\nTo instantiate embedded views based on a template, use the <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>\nmethod <code>createEmbeddedView()</code>.</p>\n<p>表示一个内嵌模板，它可用于实例化内嵌的视图。\n要想根据模板实例化内嵌的视图，请使用 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Testability\">Testability</a></code></td>\n        <td>\n          \n          <p>The Testability service provides testing hooks that can be accessed from\nthe browser.</p>\n<p>Testability 服务提供了可以从浏览器访问的测试钩子。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TestabilityRegistry\">TestabilityRegistry</a></code></td>\n        <td>\n          \n          <p>A global registry of <a href=\"api/core/Testability\"><code>Testability</code></a> instances for specific elements.</p>\n<a href=\"api/core/Testability\"><code>Testability</code></a>\n<p> 实例的全局注册表，用于特定元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Type\">Type</a></code></td>\n        <td>\n          \n          <p>Represents a type that a Component or other object is instances of.</p>\n<p>表示 Component 或其他对象的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Version\">Version</a></code></td>\n        <td>\n          \n          <p>Represents the version of Angular</p>\n<p>表示 Angular 的版本</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewContainerRef\">ViewContainerRef</a></code></td>\n        <td>\n          \n          <p>Represents a container where one or more views can be attached to a component.</p>\n<p>表示可以将一个或多个视图附着到组件中的容器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewRef\">ViewRef</a></code></td>\n        <td>\n          \n          <p>Represents an Angular <a href=\"guide/glossary#view\" title=\"Definition\">view</a>.</p>\n<p>表示一个 Angular <a href=\"guide/glossary#view\" title=\"Definition\">视图</a>。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"装饰器\">装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#装饰器\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"decorators\">Decorators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#decorators\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Attribute\">Attribute</a></code></td>\n        <td>\n          \n          <p>Parameter decorator for a directive constructor that designates\na host-element attribute whose value is injected as a constant string literal.</p>\n<p>指令构造函数的参数修饰器，用于指定宿主元素属性，其值作为常量字符串文字注入。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Component\">Component</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class as an Angular component and provides configuration\nmetadata that determines how the component should be processed,\ninstantiated, and used at runtime.</p>\n<p>一个装饰器，用于把某个类标记为 Angular\n组件，并为它配置一些元数据，以决定该组件在运行期间该如何处理、实例化和使用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChild\">ContentChild</a></code></td>\n        <td>\n          \n          <p>Property decorator that configures a content query.</p>\n<p>用于配置内容查询的参数装饰器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChildren\">ContentChildren</a></code></td>\n        <td>\n          \n          <p>Property decorator that configures a content query.</p>\n<p>用于配置内容查询的参数装饰器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Directive\">Directive</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class as an Angular directive.\nYou can define your own directives to attach custom behavior to elements in the DOM.</p>\n<p>将类标记为 Angular 指令的装饰器。你可以定义自己的指令，以将自定义行为附加到 DOM 中的元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Host\">Host</a></code></td>\n        <td>\n          \n          <p>Parameter decorator on a view-provider parameter of a class constructor\nthat tells the DI framework to resolve the view by checking injectors of child\nelements, and stop when reaching the host element of the current component.</p>\n<p>类构造函数的视图提供者参数上的参数修饰器，用于指示 DI 框架通过检查子元素的注入器来解析视图，并在到达当前组件的宿主元素时停止。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostBinding\">HostBinding</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a DOM property as a host-binding property and supplies configuration\nmetadata.\nAngular automatically checks host property bindings during change detection, and\nif a binding changes it updates the host element of the directive.</p>\n<p>一个装饰器，用于把一个 DOM 属性标记为绑定到宿主的属性，并提供配置元数据。\nAngular\n在变更检测期间会自动检查宿主属性绑定，如果这个绑定变化了，它就会更新该指令所在的宿主元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostListener\">HostListener</a></code></td>\n        <td>\n          \n          <p>Decorator that declares a DOM event to listen for,\nand provides a handler method to run when that event occurs.</p>\n<p>一个装饰器，用于声明要监听的 DOM 事件，并提供在该事件发生时要运行的处理器方法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Inject\">Inject</a></code></td>\n        <td>\n          \n          <p>Parameter decorator on a dependency parameter of a class constructor\nthat specifies a custom provider of the dependency.</p>\n<p>类构造函数中依赖项参数上的参数装饰器，用于指定依赖项的自定义提供者。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Injectable\">Injectable</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class as available to be\nprovided and injected as a dependency.</p>\n<p>标记性元数据，表示一个类可以由 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 进行创建。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Input\">Input</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class field as an input property and supplies configuration metadata.\nThe input property is bound to a DOM property in the template. During change detection,\nAngular automatically updates the data property with the DOM property's value.</p>\n<p>一个装饰器，用来把某个类字段标记为输入属性，并提供配置元数据。\n该输入属性会绑定到模板中的某个 DOM 属性。当变更检测时，Angular 会自动使用这个 DOM\n属性的值来更新此数据属性。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgModule\">NgModule</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class as an NgModule and supplies configuration metadata.</p>\n<p>把一个类标记为 NgModule，并提供配置元数据。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Optional\">Optional</a></code></td>\n        <td>\n          \n          <p>Parameter decorator to be used on constructor parameters,\nwhich marks the parameter as being an optional dependency.\nThe DI framework provides <code>null</code> if the dependency is not found.</p>\n<p>用于构造函数参数的参数装饰器，将参数标记为可选依赖项。如果找不到依赖项，则 DI 框架提供 null。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Output\">Output</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class field as an output property and supplies configuration metadata.\nThe DOM property bound to the output property is automatically updated during change detection.</p>\n<p>一个装饰器，用于把一个类字段标记为输出属性，并提供配置元数据。\n凡是绑定到输出属性上的 DOM 属性，Angular 在变更检测期间都会自动进行更新。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Pipe\">Pipe</a></code></td>\n        <td>\n          \n          <p>Decorator that marks a class as pipe and supplies configuration metadata.</p>\n<p>本装饰器用于将类标记为管道并提供配置元数据。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Self\">Self</a></code></td>\n        <td>\n          \n          <p>Parameter decorator to be used on constructor parameters,\nwhich tells the DI framework to start dependency resolution from the local injector.</p>\n<p>将在构造函数参数上使用参数装饰器，该装饰器告诉 DI 框架从本地注入器开始解析依赖项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SkipSelf\">SkipSelf</a></code></td>\n        <td>\n          \n          <p>Parameter decorator to be used on constructor parameters,\nwhich tells the DI framework to start dependency resolution from the parent injector.\nResolution works upward through the injector hierarchy, so the local injector\nis not checked for a provider.</p>\n<p>将在构造函数参数上使用的参数装饰器，该参数指示 DI 框架从父注入器启动依赖项解析。解析器在注入器层次结构中向上查找，因此不会检查本地注入器的提供者。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChild\">ViewChild</a></code></td>\n        <td>\n          \n          <p>Property decorator that configures a view query.\nThe change detector looks for the first element or the directive matching the selector\nin the view DOM. If the view DOM changes, and a new child matches the selector,\nthe property is updated.</p>\n<p>属性装饰器，用于配置一个视图查询。\n变更检测器会在视图的 DOM 中查找能匹配上该选择器的第一个元素或指令。\n如果视图的 DOM 发生了变化，出现了匹配该选择器的新的子节点，该属性就会被更新。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChildren\">ViewChildren</a></code></td>\n        <td>\n          \n          <p>Property decorator that configures a view query.</p>\n<p>用于配置视图查询的参数装饰器。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"函数\">函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#函数\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"functions\">Functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#functions\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/asNativeElements\">asNativeElements</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/assertPlatform\">assertPlatform</a></code></td>\n        <td>\n          \n          <p>Checks that there is currently a platform that contains the given token as a provider.</p>\n<p>检查当前是否存在以给定标记为提供者的平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createComponent\">createComponent</a></code></td>\n        <td>\n          \n          <p>Creates a <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> instance based on provided component type and a set of options.</p>\n<p>根据提供的组件类型和一组选项创建一个 <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> 实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createEnvironmentInjector\">createEnvironmentInjector</a></code></td>\n        <td>\n          \n          <p>Create a new environment injector.</p>\n<p>创建一个新的环境注入器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createNgModule\">createNgModule</a></code></td>\n        <td>\n          \n          <p>Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.</p>\n<p>根据提供的 NgModule 类和父注入器返回一个新的 NgModuleRef 实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createPlatform\">createPlatform</a></code></td>\n        <td>\n          \n          <p>Creates a platform.\nPlatforms must be created on launch using this function.</p>\n<p>创建一个平台。必须使用此函数在启动时创建平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createPlatformFactory\">createPlatformFactory</a></code></td>\n        <td>\n          \n          <p>Creates a factory for a platform. Can be used to provide or override <code>Providers</code> specific to\nyour application's runtime needs, such as <code><a href=\"api/core/PLATFORM_INITIALIZER\" class=\"code-anchor\">PLATFORM_INITIALIZER</a></code> and <code><a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a></code>.</p>\n<p>为平台创建工厂。可用于提供或覆盖针对你的应用程序的运行时需求的 <code>Providers</code>，比如\n<code><a href=\"api/core/PLATFORM_INITIALIZER\" class=\"code-anchor\">PLATFORM_INITIALIZER</a></code> 和 <code><a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a></code> 。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/destroyPlatform\">destroyPlatform</a></code></td>\n        <td>\n          \n          <p>Destroys the current Angular platform and all Angular applications on the page.\nDestroys all modules and listeners registered with the platform.</p>\n<p>销毁页面上的当前 Angular 平台和所有 Angular 应用程序。销毁在平台上注册的所有模块和监听器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/enableProdMode\">enableProdMode</a></code></td>\n        <td>\n          \n          <p>Disable Angular's development mode, which turns off assertions and other\nchecks within the framework.</p>\n<p>禁用 Angular 的开发模式，该模式将关闭框架中的断言和其他检查。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/forwardRef\">forwardRef</a></code></td>\n        <td>\n          \n          <p>Allows to refer to references which are not yet defined.</p>\n<p>允许引用尚未定义的引用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getDebugNode\">getDebugNode</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/getModuleFactory\" class=\"deprecated-api-item\">getModuleFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Use <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code> instead.</p>\n<p>改用 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code> 。</p>\n\n          <p>Returns the NgModuleFactory with the given id (specified using <a href=\"api/core/NgModule#id\">@NgModule.id\nfield</a>), if it exists and has been loaded. Factories for NgModules that do\nnot specify an <code>id</code> cannot be retrieved. Throws if an NgModule cannot be found.</p>\n<p>返回具有给定 id 的 NgModuleFactory（如果存在并且已加载）。无法检索未指定过 <code>id</code>\n的模块工厂。如果找不到模块，则抛出该异常。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getNgModuleById\">getNgModuleById</a></code></td>\n        <td>\n          \n          <p>Returns the NgModule class with the given id (specified using <a href=\"api/core/NgModule#id\">@NgModule.id\nfield</a>), if it exists and has been loaded. Classes for NgModules that do\nnot specify an <code>id</code> cannot be retrieved. Throws if an NgModule cannot be found.</p>\n<p>返回具有给定 id（使用<a href=\"api/core/NgModule#id\">@NgModule.id 字段</a>指定）的 NgModule\n类（如果存在并且已加载）。无法检索未指定 <code>id</code> 的 NgModules 类。如果找不到 NgModule ，则抛出。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getPlatform\">getPlatform</a></code></td>\n        <td>\n          \n          <p>Returns the current platform.</p>\n<p>返回当前平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/importProvidersFrom\">importProvidersFrom</a></code></td>\n        <td>\n          \n          <p>Collects providers from all NgModules and standalone components, including transitively imported\nones.</p>\n<p>从所有 NgModule 和独立组件（包括可传递导入的组件）收集提供程序。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/inject\">inject</a></code></td>\n        <td>\n          \n          <p>Injects a token from the currently active injector.\n<code>inject</code> is only supported during instantiation of a dependency by the DI system. It can be used\nduring:</p>\n<p>从当前活动的注入器注入令牌。 <code>inject</code> 仅在 DI 系统实例化依赖项期间受支持。它可以在以下期间使用：</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isDevMode\">isDevMode</a></code></td>\n        <td>\n          \n          <p>Returns whether Angular is in development mode.</p>\n<p>返回 Angular 是否处于开发模式。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/makeEnvironmentProviders\">makeEnvironmentProviders</a></code></td>\n        <td>\n          \n          <p>Wrap an array of <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code>s into <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code>, preventing them from being accidentally\nreferenced in `@Component in a component injector.</p>\n<p>将 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 数组包装到 <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code> 中，以防止它们在组件注入器的 `@Component 中被意外引用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/reflectComponentType\">reflectComponentType</a></code></td>\n        <td>\n          \n          <p>Creates an object that allows to retrieve component metadata.</p>\n<p>创建一个允许检索组件元数据的对象。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/resolveForwardRef\">resolveForwardRef</a></code></td>\n        <td>\n          \n          <p>Lazily retrieves the reference value from a forwardRef.</p>\n<p>从 forwardRef 惰性检索引用值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/setTestabilityGetter\">setTestabilityGetter</a></code></td>\n        <td>\n          \n          <p>Set the <a href=\"api/core/GetTestability\"><code>GetTestability</code></a> implementation used by the Angular testing framework.</p>\n<p>设置 Angular 测试框架使用的 <a href=\"api/core/GetTestability\"><code>GetTestability</code></a> 实现。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"结构\">结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#结构\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"structures\">Structures<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#structures\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AbstractType\">AbstractType</a></code></td>\n        <td>\n          \n          <p>Represents an abstract class <code>T</code>, if applied to a concrete class it would stop being\ninstantiable.</p>\n<p>表示抽象类 <code>T</code>，如果将其应用于具体类，它将无法被实例化。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterContentChecked\">AfterContentChecked</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called after the default change detector has\ncompleted checking all content of a directive.</p>\n<p>一个生命周期钩子，它会在默认的变更检测器对指令的所有内容完成了变更检查之后调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterContentInit\">AfterContentInit</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called after Angular has fully initialized\nall content of a directive.\nDefine an <code>ngAfterContentInit()</code> method to handle any additional initialization tasks.</p>\n<p>一个生命周期钩子，它会在 Angular 完全实例化了指令的所有内容之后调用。\n定义一个 <code>ngAfterContentInit()</code> 方法来处理额外的初始化任务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterViewChecked\">AfterViewChecked</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called after the default change detector has\ncompleted checking a component's view for changes.</p>\n<p>一个生命周期钩子，它会在默认的变更检测器完成了对组件视图的变更检测之后调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterViewInit\">AfterViewInit</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called after Angular has fully initialized\na component's view.\nDefine an <code>ngAfterViewInit()</code> method to handle any additional initialization tasks.</p>\n<p>一个生命周期钩子，会在 Angular 完全初始化了组件的视图后调用。\n定义一个 <code>ngAfterViewInit()</code> 方法来处理一些额外的初始化任务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/BootstrapOptions\">BootstrapOptions</a></code></td>\n        <td>\n          \n          <p>Provides additional options to the bootstrapping process.</p>\n<p>为引导过程提供其他选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ChangeDetectionStrategy\">ChangeDetectionStrategy</a></code></td>\n        <td>\n          \n          <p>The strategy that the default change detector uses to detect changes.\nWhen set, takes effect the next time change detection is triggered.</p>\n<p>默认变更检测器用来检测更改的策略。设置后，将在下次触发变更检测时生效。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ClassProvider\">ClassProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code>useClass</code> for a token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以便为令牌返回 <code>useClass</code> 的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ClassSansProvider\">ClassSansProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value by invoking a <code>useClass</code> function.\nBase for <code><a href=\"api/core/ClassProvider\" class=\"code-anchor\">ClassProvider</a></code> decorator.</p>\n<p>配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以通过调用 <code>useClass</code> 函数返回某个值。是 <code><a href=\"api/core/ClassProvider\" class=\"code-anchor\">ClassProvider</a></code> 装饰器的基接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ComponentMirror\">ComponentMirror</a></code></td>\n        <td>\n          \n          <p>An interface that describes the subset of component metadata\nthat can be retrieved using the <code><a href=\"api/core/reflectComponentType\" class=\"code-anchor\">reflectComponentType</a></code> function.</p>\n<p>一个接口，描述可以用 <code><a href=\"api/core/reflectComponentType\" class=\"code-anchor\">reflectComponentType</a></code> 函数检索的组件元数据子集。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ConstructorProvider\">ConstructorProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of a token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以返回令牌的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ConstructorSansProvider\">ConstructorSansProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of a token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DoBootstrap\">DoBootstrap</a></code></td>\n        <td>\n          \n          <p>Hook for manual bootstrapping of the application instead of using <code>bootstrap</code> array in @NgModule\nannotation. This hook is invoked only when the <code>bootstrap</code> array is empty or not provided.</p>\n<p>挂钩以手动引导应用程序，而不使用 @NgModule 标记中的 bootstrap 数组。这个钩子只有在 bootstrap\n数组为空或未提供时才会被调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DoCheck\">DoCheck</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that invokes a custom change-detection function for a directive,\nin addition to the check performed by the default change-detector.</p>\n<p>一个生命周期钩子，除了使用默认的变更检查器执行检查之外，还会为指令执行自定义的变更检测函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ExistingProvider\">ExistingProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value of another <code>useExisting</code> token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回另一个 <code>useExisting</code> 令牌的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ExistingSansProvider\">ExistingSansProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value of another <code>useExisting</code> token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回另一个 <code>useExisting</code> 令牌的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/FactoryProvider\">FactoryProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value by invoking a <code>useFactory</code> function.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以便调用 <code>useFactory</code> 函数返回一个值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/FactorySansProvider\">FactorySansProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value by invoking a <code>useFactory</code> function.</p>\n<p>把此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 配置为调用 <code>useFactory</code> 函数返回一个值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ForwardRefFn\">ForwardRefFn</a></code></td>\n        <td>\n          \n          <p>An interface that a function passed into <a href=\"api/core/forwardRef\"><code>forwardRef</code></a> has to implement.</p>\n<p>要传给 <a href=\"api/core/forwardRef\"><code>forwardRef</code></a> 的函数时必须实现的接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/GetTestability\">GetTestability</a></code></td>\n        <td>\n          \n          <p>Adapter interface for retrieving the <code><a href=\"api/core/Testability\" class=\"code-anchor\">Testability</a></code> service associated for a\nparticular context.</p>\n<p>适配器接口，用于检索与特定上下文关联 <code><a href=\"api/core/Testability\" class=\"code-anchor\">Testability</a></code></p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/InjectFlags\" class=\"deprecated-api-item\">InjectFlags</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> use an options object for <code>inject</code> instead.</p>\n\n          <p>Injection flags for DI.</p>\n<p>DI 的注入标志。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectOptions\">InjectOptions</a></code></td>\n        <td>\n          \n          <p>Type of the options argument to <code>inject</code>.</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectableType\">InjectableType</a></code></td>\n        <td>\n          \n          <p>A <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> which has a <code>ɵprov: ɵɵInjectableDeclaration</code> static field.</p>\n<p>具有 <code>InjectableDef</code> 静态字段的 <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code></p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectorType\">InjectorType</a></code></td>\n        <td>\n          \n          <p>A type which has an <code>InjectorDef</code> static field.</p>\n<p>具有 <code>InjectorDef</code> 静态字段的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableChangeRecord\">IterableChangeRecord</a></code></td>\n        <td>\n          \n          <p>Record representing the item change information.</p>\n<p>代表条目变更信息的记录。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableChanges\">IterableChanges</a></code></td>\n        <td>\n          \n          <p>An object describing the changes in the <code>Iterable</code> collection since last time\n<code><a href=\"api/core/IterableDiffer\" class=\"code-anchor\">IterableDiffer</a>#diff()</code> was invoked.</p>\n<p>本对象描述自上次调用 <code><a href=\"api/core/IterableDiffer\" class=\"code-anchor\">IterableDiffer</a>#diff()</code> 以来 <code>Iterable</code> 集合中的变更。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDiffer\">IterableDiffer</a></code></td>\n        <td>\n          \n          <p>A strategy for tracking changes over time to an iterable. Used by <a href=\"api/common/NgForOf\"><code>NgForOf</code></a> to\nrespond to changes in an iterable by effecting equivalent changes in the DOM.</p>\n<p>用来跟踪一个迭代内的更改的策略。<a href=\"api/common/NgForOf\"><code>NgForOf</code></a> 使用它通过对 DOM\n进行等效更改来响应此迭代内的更改。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDifferFactory\">IterableDifferFactory</a></code></td>\n        <td>\n          \n          <p>Provides a factory for <a href=\"api/core/IterableDiffer\"><code>IterableDiffer</code></a>.</p>\n<p>提供 <a href=\"api/core/IterableDiffer\"><code>IterableDiffer</code></a> 的工厂。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueChangeRecord\">KeyValueChangeRecord</a></code></td>\n        <td>\n          \n          <p>Record representing the item change information.</p>\n<p>代表条目变更信息的记录。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueChanges\">KeyValueChanges</a></code></td>\n        <td>\n          \n          <p>An object describing the changes in the <code>Map</code> or <code>{[k:string]: string}</code> since last time\n<code><a href=\"api/core/KeyValueDiffer\" class=\"code-anchor\">KeyValueDiffer</a>#diff()</code> was invoked.</p>\n<p>一个对象，描述自上次调用 <code><a href=\"api/core/KeyValueDiffer\" class=\"code-anchor\">KeyValueDiffer</a>#diff()</code> 以来的变化的 <code>Map</code> 或 <code>{[k:string]: string}</code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDiffer\">KeyValueDiffer</a></code></td>\n        <td>\n          \n          <p>A differ that tracks changes made to an object over time.</p>\n<p>跟踪对象随时间变化的差异。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDifferFactory\">KeyValueDifferFactory</a></code></td>\n        <td>\n          \n          <p>Provides a factory for <a href=\"api/core/KeyValueDiffer\"><code>KeyValueDiffer</code></a>.</p>\n<p>提供 <a href=\"api/core/KeyValueDiffer\"><code>KeyValueDiffer</code></a> 的工厂。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/MissingTranslationStrategy\">MissingTranslationStrategy</a></code></td>\n        <td>\n          \n          <p>Use this enum at bootstrap as an option of <code>bootstrapModule</code> to define the strategy\nthat the compiler should use in case of missing translations:</p>\n<p>在系统启动时使用此枚举作为 <code>bootstrapModule</code>\n的一个选项来定义策略，编译器应该在缺少翻译的情况下使用：</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a></code></td>\n        <td>\n          \n          <p>A wrapper around an NgModule that associates it with <a href=\"guide/glossary#provider\" title=\"Definition\">providers</a>. Usage without a generic type is deprecated.</p>\n<p>将 NgModule 与<a href=\"guide/glossary#provider\" title=\"定义\">provider</a>关联的 NgModule\n的包装器。不推荐使用没有泛型类型的用法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnChanges\">OnChanges</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called when any data-bound property of a directive changes.\nDefine an <code>ngOnChanges()</code> method to handle the changes.</p>\n<p>一个生命周期钩子，当指令的任何一个可绑定属性发生变化时调用。\n定义一个 <code>ngOnChanges()</code> 方法来处理这些变更。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnDestroy\">OnDestroy</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called when a directive, pipe, or service is destroyed.\nUse for any custom cleanup that needs to occur when the\ninstance is destroyed.</p>\n<p>一个生命周期钩子，它会在指令、管道或服务被销毁时调用。\n用于在实例被销毁时，执行一些自定义清理代码。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnInit\">OnInit</a></code></td>\n        <td>\n          \n          <p>A lifecycle hook that is called after Angular has initialized\nall data-bound properties of a directive.\nDefine an <code>ngOnInit()</code> method to handle any additional initialization tasks.</p>\n<p>一个生命周期钩子，它会在 Angular 初始化完了该指令的所有数据绑定属性之后调用。\n定义 <code>ngOnInit()</code> 方法可以处理所有附加的初始化任务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PipeTransform\">PipeTransform</a></code></td>\n        <td>\n          \n          <p>An interface that is implemented by pipes in order to perform a transformation.\nAngular invokes the <code>transform</code> method with the value of a binding\nas the first argument, and any parameters as the second argument in list form.</p>\n<p>一个需要由管道实现的接口，用于执行转换操作。\nAngular 会调用它的 <code>transform</code>\n方法，并把要绑定的值作为第一个参数传入，其它参数会依次从第二个参数的位置开始传入。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Predicate\">Predicate</a></code></td>\n        <td>\n          \n          <p>A boolean-valued function over a value, possibly including context information\nregarding that value's position in an array.</p>\n<p>根据参数值返回布尔值的函数，可能包括该值在数组中位置的上下文信息。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererStyleFlags2\">RendererStyleFlags2</a></code></td>\n        <td>\n          \n          <p>Flags for renderer-specific style modifiers.</p>\n<p>渲染器特有样式修饰符的标志。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererType2\">RendererType2</a></code></td>\n        <td>\n          \n          <p>Used by <code><a href=\"api/core/RendererFactory2\" class=\"code-anchor\">RendererFactory2</a></code> to associate custom rendering data and styles\nwith a rendering implementation.</p>\n<p>供 <code><a href=\"api/core/RendererFactory2\" class=\"code-anchor\">RendererFactory2</a></code> 用于将自定义渲染数据和样式与某个渲染器的实现相关联。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ResolvedReflectiveProvider\">ResolvedReflectiveProvider</a></code></td>\n        <td>\n          \n          <p>An internal resolved representation of a <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> used by the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>.</p>\n<p>供 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 使用的 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 的内部解析表示形式。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SchemaMetadata\">SchemaMetadata</a></code></td>\n        <td>\n          \n          <p>A schema definition associated with an NgModule.</p>\n<p>与 NgModule 关联的架构定义。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SecurityContext\">SecurityContext</a></code></td>\n        <td>\n          \n          <p>A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\nlike <code>innerHTML</code> that could cause Cross Site Scripting (XSS) security bugs when improperly\nhandled.</p>\n<p>SecurityContext 标记了具有危险安全隐患的位置，比如，像 <code>innerHTML</code> 这样的 DOM\n属性，如果处理不当，可能会导致跨站点脚本（XSS）安全错误。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SimpleChanges\">SimpleChanges</a></code></td>\n        <td>\n          \n          <p>A hashtable of changes represented by <a href=\"api/core/SimpleChange\"><code>SimpleChange</code></a> objects stored\nat the declared property name they belong to on a Directive or Component. This is\nthe type passed to the <code>ngOnChanges</code> hook.</p>\n<p>用 <a href=\"api/core/SimpleChange\"><code>SimpleChange</code></a> 对象表示的变更的哈希表，这些对象以声明的属性名称存储在指令或组件上，这些属性属于它们。这是传递给 <code>ngOnChanges</code> 钩子的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticClassProvider\">StaticClassProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code>useClass</code> for a token.</p>\n<p>配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回 <code>useClass</code> 的令牌实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticClassSansProvider\">StaticClassSansProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code>useClass</code> for a token.\nBase for <code><a href=\"api/core/StaticClassProvider\" class=\"code-anchor\">StaticClassProvider</a></code> decorator.</p>\n<p>配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回 <code>useClass</code> 的令牌实例。这是 <code><a href=\"api/core/StaticClassProvider\" class=\"code-anchor\">StaticClassProvider</a></code> 装饰器的基接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TrackByFunction\">TrackByFunction</a></code></td>\n        <td>\n          \n          <p>A function optionally passed into the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive to customize how <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> uniquely\nidentifies items in an iterable.</p>\n<p>一个可选地传入 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令的函数，以自定义 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 如何唯一标识迭代中的条目。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TypeDecorator\">TypeDecorator</a></code></td>\n        <td>\n          \n          <p>An interface implemented by all Angular type decorators, which allows them to be used as\ndecorators as well as Angular syntax.</p>\n<p>由所有 Angular 类型装饰器实现的接口，该接口允许将它们用作装饰器以及 Angular 语法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TypeProvider\">TypeProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> when `Type' is used as the token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以将“类型”用作令牌时返回 <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> 的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueProvider\">ValueProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value for a token.</p>\n<p>配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueSansProvider\">ValueSansProvider</a></code></td>\n        <td>\n          \n          <p>Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value for a token.\nBase for <code><a href=\"api/core/ValueProvider\" class=\"code-anchor\">ValueProvider</a></code> decorator.</p>\n<p>配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的值。是 <code><a href=\"api/core/ValueProvider\" class=\"code-anchor\">ValueProvider</a></code> 装饰器的基接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewEncapsulation\">ViewEncapsulation</a></code></td>\n        <td>\n          \n          <p>Defines the CSS styles encapsulation policies for the <a href=\"api/core/Component\"><code>Component</code></a> decorator's\n<code>encapsulation</code> option.</p>\n<p>定义可用于 Component 的 <a href=\"api/core/Component\"><code>Component</code></a> 的模板和样式封装选项。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#-1\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"elements\">Elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#elements\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-container\">&#x3C;ng-container></a></code></td>\n        <td>\n          \n          <p>A special element that can hold structural directives without adding new elements to the DOM.</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-content\">&#x3C;ng-content></a></code></td>\n        <td>\n          \n          <p>The <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element specifies where to project content inside a component template.</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-template\">&#x3C;ng-template></a></code></td>\n        <td>\n          \n          <p>Angular's <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element defines a template that is not rendered by default.</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n\n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"类型\">类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#类型\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"types\">Types<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#types\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ANALYZE_FOR_ENTRY_COMPONENTS\" class=\"deprecated-api-item\">ANALYZE_FOR_ENTRY_COMPONENTS</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Since 9.0.0. With Ivy, this property is no longer necessary.</p>\n<p>从 9.0.0 开始。使用 Ivy，不再需要此属性。</p>\n\n          <p>A DI token that you can use to create a virtual <a href=\"guide/glossary#provider\">provider</a>\nthat will populate the <code>entryComponents</code> field of components and NgModules\nbased on its <code>useValue</code> property value.\nAll components that are referenced in the <code>useValue</code> value (either directly\nor in a nested array or map) are added to the <code>entryComponents</code> property.</p>\n<p>可用于创建虚拟<a href=\"guide/glossary#provider\">提供者</a>的 DI 令牌，该虚拟提供者将基于其 <code>useValue</code>\n属性值填充组件和 NgModule 的 <code>entryComponents</code> 字段。<code>useValue</code>\n值中引用的所有组件（无论是直接还是在嵌套数组还是在映射表中）都将添加到 <code>entryComponents</code> 属性。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ANIMATION_MODULE_TYPE\">ANIMATION_MODULE_TYPE</a></code></td>\n        <td>\n          \n          <p>A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that indicates which animations\nmodule has been loaded.</p>\n<p>一个<a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>，表明已加载了哪个动画模块。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_BOOTSTRAP_LISTENER\">APP_BOOTSTRAP_LISTENER</a></code></td>\n        <td>\n          \n          <p>A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that provides a set of callbacks to\nbe called for every component that is bootstrapped.</p>\n<p>一个 <a href=\"guide/glossary#di-token\" title=\"DI\n令牌定义\">DI 令牌</a>，该令牌提供了一组针对每个要引导的组件调用的回调。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_ID\">APP_ID</a></code></td>\n        <td>\n          \n          <p>A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> representing a unique string ID, used\nprimarily for prefixing application attributes and CSS styles when\n<a href=\"api/core/ViewEncapsulation#Emulated\">ViewEncapsulation.Emulated</a> is being used.</p>\n<p>表示唯一字符串 ID 的 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>，主要用于在使用 <a href=\"api/core/ViewEncapsulation#Emulated\">ViewEncapsulation.Emulated</a> 时为应用程序属性和 CSS 样式添加前缀。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_INITIALIZER\">APP_INITIALIZER</a></code></td>\n        <td>\n          \n          <p>A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that you can use to provide\none or more initialization functions.</p>\n<p>可用于提供一个或多个初始化功能的 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/COMPILER_OPTIONS\">COMPILER_OPTIONS</a></code></td>\n        <td>\n          \n          <p>Token to provide CompilerOptions in the platform injector.</p>\n<p>在平台注入器中提供 CompilerOptions 的令牌。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CUSTOM_ELEMENTS_SCHEMA\">CUSTOM_ELEMENTS_SCHEMA</a></code></td>\n        <td>\n          \n          <p>Defines a schema that allows an NgModule to contain the following:</p>\n<p>定义一个架构，该架构允许 NgModule 包含以下内容：</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CompilerOptions\">CompilerOptions</a></code></td>\n        <td>\n          \n          <p>Options for creating a compiler.</p>\n<p>创建编译器的选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DEFAULT_CURRENCY_CODE\">DEFAULT_CURRENCY_CODE</a></code></td>\n        <td>\n          \n          <p>Provide this token to set the default currency code your application uses for\nCurrencyPipe when there is no currency code passed into it. This is only used by\nCurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.</p>\n<p>如果没有传递任何货币代码，请提供此令牌来设置你的应用程序用于 CurrencyPipe 的默认货币代码。仅由\nCurrencyPipe 使用，与语言环境的货币无关。如果未配置，则默认为 USD。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ENVIRONMENT_INITIALIZER\">ENVIRONMENT_INITIALIZER</a></code></td>\n        <td>\n          \n          <p>A multi-provider token for initialization functions that will run upon construction of an\nenvironment injector.</p>\n<p>初始化函数的多提供者令牌，将在构建环境注入器时运行。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EnvironmentProviders\">EnvironmentProviders</a></code></td>\n        <td>\n          \n          <p>Encapsulated <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code>s that are only accepted during creation of an <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> (e.g.\nin an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>).</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/INJECTOR\">INJECTOR</a></code></td>\n        <td>\n          \n          <p>An InjectionToken that gets the current <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> for <code>createInjector()</code>-style injectors.</p>\n<p>一个 InjectionToken，用于获取当前 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 的 <code>createInjector()</code> 式的注入器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ImportProvidersSource\">ImportProvidersSource</a></code></td>\n        <td>\n          \n          <p>A source of providers for the <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> function.</p>\n<p><code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> 函数的提供程序来源。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ImportedNgModuleProviders\" class=\"deprecated-api-item\">ImportedNgModuleProviders</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> replaced by <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code></p>\n\n          <p>Providers that were imported from NgModules via the <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> function.</p>\n<p>通过 <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> 函数从 NgModules 导入的提供程序。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectableProvider\">InjectableProvider</a></code></td>\n        <td>\n          \n          <p>Injectable providers used in <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator.</p>\n<p><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器中使用的可注入对象提供者。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/LOCALE_ID\">LOCALE_ID</a></code></td>\n        <td>\n          \n          <p>Provide this token to set the locale of your application.\nIt is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\nDecimalPipe and PercentPipe) and by ICU expressions.</p>\n<p>提供此令牌以设置应用程序的语言环境。它通过 i18n\n管道（DatePipe、I18nPluralPipe、CurrencyPipe、DecimalPipe 和 PercentPipe）和 ICU 表达式用于 i18n\n提取。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NO_ERRORS_SCHEMA\">NO_ERRORS_SCHEMA</a></code></td>\n        <td>\n          \n          <p>Defines a schema that allows any property on any element.</p>\n<p>定义一个架构，该架构允许任何元素上的任何属性。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgIterable\">NgIterable</a></code></td>\n        <td>\n          \n          <p>A type describing supported iterable types.</p>\n<p>描述受支持的可迭代类型的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PACKAGE_ROOT_URL\">PACKAGE_ROOT_URL</a></code></td>\n        <td>\n          \n          <p>A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that indicates the root directory of\nthe application</p>\n<p>一个 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>，指示应用程序的根目录</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PLATFORM_ID\">PLATFORM_ID</a></code></td>\n        <td>\n          \n          <p>A token that indicates an opaque platform ID.</p>\n<p>标识不透明平台 ID 的令牌。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PLATFORM_INITIALIZER\">PLATFORM_INITIALIZER</a></code></td>\n        <td>\n          \n          <p>A function that is executed when a platform is initialized.</p>\n<p>平台初始化时执行的函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Provider\">Provider</a></code></td>\n        <td>\n          \n          <p>Describes how the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> should be configured.</p>\n<p>描述应该如何配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ProviderToken\">ProviderToken</a></code></td>\n        <td>\n          \n          <p>Token that can be used to retrieve an instance from an injector or through a query.</p>\n<p>可用于从注入器或通过查询检索实例的标记。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticProvider\">StaticProvider</a></code></td>\n        <td>\n          \n          <p>Describes how an <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> should be configured as static (that is, without reflection).\nA static provider provides tokens to an injector for various types of dependencies.</p>\n<p>描述如何将 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\n配置为静态的（即不需要反射）。静态提供者为各种类型的依赖项提供令牌给注入器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TRANSLATIONS\">TRANSLATIONS</a></code></td>\n        <td>\n          \n          <p>Use this token at bootstrap to provide the content of your translation file (<code>xtb</code>,\n<code>xlf</code> or <code>xlf2</code>) when you want to translate your application in another language.</p>\n<p>当你想用另一种语言翻译应用程序时，可以在引导程序中使用此令牌来提供翻译文件的内容（<code>xtb</code>、<code>xlf</code>\n或 <code>xlf2</code>）</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TRANSLATIONS_FORMAT\">TRANSLATIONS_FORMAT</a></code></td>\n        <td>\n          \n          <p>Provide this token at bootstrap to set the format of your <a href=\"api/core/TRANSLATIONS\"><code>TRANSLATIONS</code></a>: <code>xtb</code>,\n<code>xlf</code> or <code>xlf2</code>.</p>\n<p>在引导程序中提供此令牌以设置 <a href=\"api/core/TRANSLATIONS\"><code>TRANSLATIONS</code></a> 的格式： <code>xtb</code>、<code>xlf</code> 或 <code>xlf2</code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/createNgModuleRef\" class=\"deprecated-api-item\">createNgModuleRef</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Use <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> instead.</p>\n<p>改用 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> 。</p>\n\n          <p>The <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> function alias for backwards-compatibility.\nPlease avoid using it directly and use <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> instead.</p>\n<p>向后兼容的 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> 函数别名。请避免直接使用它，而改用 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> 。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/defineInjectable\" class=\"deprecated-api-item\">defineInjectable</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> in v8, delete after v10. This API should be used only by generated code, and that\ncode should now use ɵɵdefineInjectable instead.</p>\n<p>在 v8 中弃用，在 v10 之后删除。此 API 仅应由生成的代码使用，并且该代码现在应改用\nɵɵdefineInjectable。</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/platformCore\">platformCore</a></code></td>\n        <td>\n          \n          <p>This platform has to be included in any other platform</p>\n<p>任何其他平台都必须包含此平台</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n</div>\n</article>\n\n<!-- links to this doc:\n - api/core/ANALYZE_FOR_ENTRY_COMPONENTS\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/AbstractType\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationInitStatus\n - api/core/ApplicationModule\n - api/core/ApplicationRef\n - api/core/Attribute\n - api/core/BootstrapOptions\n - api/core/COMPILER_OPTIONS\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectorRef\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ComponentMirror\n - api/core/ComponentRef\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/DebugElement\n - api/core/DebugEventListener\n - api/core/DebugNode\n - api/core/DefaultIterableDiffer\n - api/core/Directive\n - api/core/DoBootstrap\n - api/core/DoCheck\n - api/core/ENVIRONMENT_INITIALIZER\n - api/core/ElementRef\n - api/core/EmbeddedViewRef\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/ErrorHandler\n - api/core/EventEmitter\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/ForwardRefFn\n - api/core/GetTestability\n - api/core/Host\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/INJECTOR\n - api/core/ImportProvidersSource\n - api/core/ImportedNgModuleProviders\n - api/core/Inject\n - api/core/InjectFlags\n - api/core/InjectOptions\n - api/core/Injectable\n - api/core/InjectableProvider\n - api/core/InjectableType\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/InjectorType\n - api/core/Input\n - api/core/IterableChangeRecord\n - api/core/IterableChanges\n - api/core/IterableDiffer\n - api/core/IterableDifferFactory\n - api/core/IterableDiffers\n - api/core/KeyValueChangeRecord\n - api/core/KeyValueChanges\n - api/core/KeyValueDiffer\n - api/core/KeyValueDifferFactory\n - api/core/KeyValueDiffers\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgIterable\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgProbeToken\n - api/core/NgZone\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/PACKAGE_ROOT_URL\n - api/core/PLATFORM_ID\n - api/core/PLATFORM_INITIALIZER\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/Predicate\n - api/core/Provider\n - api/core/ProviderToken\n - api/core/Query\n - api/core/QueryList\n - api/core/ReflectiveInjector\n - api/core/ReflectiveKey\n - api/core/Renderer2\n - api/core/RendererFactory2\n - api/core/RendererStyleFlags2\n - api/core/RendererType2\n - api/core/ResolvedReflectiveFactory\n - api/core/ResolvedReflectiveProvider\n - api/core/Sanitizer\n - api/core/SchemaMetadata\n - api/core/SecurityContext\n - api/core/Self\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/SkipSelf\n - api/core/StaticClassProvider\n - api/core/StaticClassSansProvider\n - api/core/StaticProvider\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/TemplateRef\n - api/core/Testability\n - api/core/TestabilityRegistry\n - api/core/TrackByFunction\n - api/core/Type\n - api/core/TypeDecorator\n - api/core/TypeProvider\n - api/core/ValueProvider\n - api/core/ValueSansProvider\n - api/core/Version\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/ViewRef\n - api/core/asNativeElements\n - api/core/assertPlatform\n - api/core/createComponent\n - api/core/createEnvironmentInjector\n - api/core/createNgModule\n - api/core/createNgModuleRef\n - api/core/createPlatform\n - api/core/createPlatformFactory\n - api/core/defineInjectable\n - api/core/destroyPlatform\n - api/core/enableProdMode\n - api/core/forwardRef\n - api/core/getDebugNode\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/getPlatform\n - api/core/global\n - api/core/global/ComponentDebugMetadata\n - api/core/global/DirectiveDebugMetadata\n - api/core/global/Listener\n - api/core/global/ngApplyChanges\n - api/core/global/ngGetComponent\n - api/core/global/ngGetContext\n - api/core/global/ngGetDirectiveMetadata\n - api/core/global/ngGetDirectives\n - api/core/global/ngGetHostElement\n - api/core/global/ngGetInjector\n - api/core/global/ngGetListeners\n - api/core/global/ngGetOwningComponent\n - api/core/global/ngGetRootComponents\n - api/core/importProvidersFrom\n - api/core/inject\n - api/core/isDevMode\n - api/core/makeEnvironmentProviders\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - api/core/platformCore\n - api/core/reflectComponentType\n - api/core/resolveForwardRef\n - api/core/setTestabilityGetter\n - api/core/testing\n - api/core/testing/ComponentFixture\n - api/core/testing/ComponentFixtureAutoDetect\n - api/core/testing/ComponentFixtureNoNgZone\n - api/core/testing/InjectSetupWrapper\n - api/core/testing/MetadataOverride\n - api/core/testing/ModuleTeardownOptions\n - api/core/testing/TestBed\n - api/core/testing/TestBedStatic\n - api/core/testing/TestComponentRenderer\n - api/core/testing/TestEnvironmentOptions\n - api/core/testing/TestModuleMetadata\n - api/core/testing/async\n - api/core/testing/discardPeriodicTasks\n - api/core/testing/fakeAsync\n - api/core/testing/flush\n - api/core/testing/flushMicrotasks\n - api/core/testing/getTestBed\n - api/core/testing/inject\n - api/core/testing/resetFakeAsyncZone\n - api/core/testing/tick\n - api/core/testing/waitForAsync\n - api/core/testing/withModule\n - guide/aot-compiler\n - guide/npm-packages\n-->\n<!-- links from this doc:\n - /api\n - api/common/NgForOf\n - api/core#\n - api/core#-1\n - api/core#angularcore\n - api/core#classes\n - api/core#decorators\n - api/core#elements\n - api/core#entry-points\n - api/core#functions\n - api/core#ngmodules\n - api/core#primary\n - api/core#primary-entry-point-exports\n - api/core#secondary\n - api/core#structures\n - api/core#types\n - api/core#主要\n - api/core#主要入口点的导出\n - api/core#入口点\n - api/core#函数\n - api/core#次要\n - api/core#类\n - api/core#类型\n - api/core#结构\n - api/core#装饰器\n - api/core/ANALYZE_FOR_ENTRY_COMPONENTS\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/AbstractType\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationInitStatus\n - api/core/ApplicationModule\n - api/core/ApplicationRef\n - api/core/Attribute\n - api/core/BootstrapOptions\n - api/core/COMPILER_OPTIONS\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectorRef\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ComponentMirror\n - api/core/ComponentRef\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/DebugElement\n - api/core/DebugEventListener\n - api/core/DebugNode\n - api/core/DefaultIterableDiffer\n - api/core/Directive\n - api/core/DoBootstrap\n - api/core/DoCheck\n - api/core/ENVIRONMENT_INITIALIZER\n - api/core/ElementRef\n - api/core/EmbeddedViewRef\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/ErrorHandler\n - api/core/EventEmitter\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/ForwardRefFn\n - api/core/GetTestability\n - api/core/Host\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/INJECTOR\n - api/core/ImportProvidersSource\n - api/core/ImportedNgModuleProviders\n - api/core/Inject\n - api/core/InjectFlags\n - api/core/InjectOptions\n - api/core/Injectable\n - api/core/InjectableProvider\n - api/core/InjectableType\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/InjectorType\n - api/core/Input\n - api/core/IterableChangeRecord\n - api/core/IterableChanges\n - api/core/IterableDiffer\n - api/core/IterableDifferFactory\n - api/core/IterableDiffers\n - api/core/KeyValueChangeRecord\n - api/core/KeyValueChanges\n - api/core/KeyValueDiffer\n - api/core/KeyValueDifferFactory\n - api/core/KeyValueDiffers\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgIterable\n - api/core/NgModule\n - api/core/NgModule#id\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgProbeToken\n - api/core/NgZone\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/PACKAGE_ROOT_URL\n - api/core/PLATFORM_ID\n - api/core/PLATFORM_INITIALIZER\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/PlatformRef#bootstrapModule\n - api/core/Predicate\n - api/core/Provider\n - api/core/ProviderToken\n - api/core/Query\n - api/core/QueryList\n - api/core/ReflectiveInjector\n - api/core/ReflectiveKey\n - api/core/Renderer2\n - api/core/RendererFactory2\n - api/core/RendererStyleFlags2\n - api/core/RendererType2\n - api/core/ResolvedReflectiveFactory\n - api/core/ResolvedReflectiveProvider\n - api/core/Sanitizer\n - api/core/SchemaMetadata\n - api/core/SecurityContext\n - api/core/Self\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/SkipSelf\n - api/core/StaticClassProvider\n - api/core/StaticClassSansProvider\n - api/core/StaticProvider\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/TemplateRef\n - api/core/Testability\n - api/core/TestabilityRegistry\n - api/core/TrackByFunction\n - api/core/Type\n - api/core/TypeDecorator\n - api/core/TypeProvider\n - api/core/ValueProvider\n - api/core/ValueSansProvider\n - api/core/Version\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewRef\n - api/core/asNativeElements\n - api/core/assertPlatform\n - api/core/createComponent\n - api/core/createEnvironmentInjector\n - api/core/createNgModule\n - api/core/createNgModuleRef\n - api/core/createPlatform\n - api/core/createPlatformFactory\n - api/core/defineInjectable\n - api/core/destroyPlatform\n - api/core/enableProdMode\n - api/core/forwardRef\n - api/core/getDebugNode\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/getPlatform\n - api/core/global\n - api/core/importProvidersFrom\n - api/core/inject\n - api/core/isDevMode\n - api/core/makeEnvironmentProviders\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - api/core/platformCore\n - api/core/reflectComponentType\n - api/core/resolveForwardRef\n - api/core/setTestabilityGetter\n - api/core/testing\n - api/platform-browser/BrowserModule\n - guide/deprecations#jit-api-changes\n - guide/glossary#di-token\n - guide/glossary#provider\n - guide/glossary#view\n - guide/glossary#view-tree\n - https://github.com/angular/angular-cn/edit/cn/packages/core/PACKAGE.md?message=docs(...)%3A%20请简述你的修改...\n - https://github.com/angular/angular-cn/tree/15.0.1/packages/core/PACKAGE.md\n-->"
}