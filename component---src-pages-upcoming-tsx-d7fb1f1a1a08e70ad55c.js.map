{"version":3,"sources":["webpack:///./src/components/index/UpcomingReleaseMeta.tsx","webpack:///./src/pages/upcoming.tsx"],"names":["UpcomingReleaseMeta","intl","useIntl","i","createInternational","startDate","Date","releasePlan","last_release_date","betaDate","upcoming_beta_date","rcDate","upcoming_rc_date","endDate","upcoming_release_date","today","failed","date","filter","d","Error","join","validateDates","diffTotalDays","Math","round","abs","diffToBetaDays","diffToRCDays","diffToToday","needlePerc","releaseParts","formatDateToParts","month","day","betaParts","rcParts","shipParts","shipMsg","href","iteration_plan_url","upcoming_version","releaseMsg","withPrefix","releaseInfo","releaseNotesURL","betaMsg","isBeta","betaPostURL","rcMsg","isRC","rcPostURL","className","map","p","value","style","left","display","tags","stableMajMin","Index","props","betaDateString","rcDateString","shipDateString","metaDescription","title","description","lang","allSitePage","data","id","marginTop","locale","query"],"mappings":"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","file":"component---src-pages-upcoming-tsx-d7fb1f1a1a08e70ad55c.js","sourcesContent":["import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\n\n// Automatic metadata from npm and VS Marketplace\nimport releaseInfo from \"../../lib/release-info.json\"\n// Manual input of dates\nimport releasePlan from \"../../lib/release-plan.json\"\n\nimport { createInternational } from \"../../lib/createInternational\"\nimport { useIntl } from \"react-intl\"\nimport { indexCopy } from \"../../copy/en/index.js\"\n\n/**\n * Shows the current versions, and upcoming releases\n */\nexport const UpcomingReleaseMeta = () => {\n  const intl = useIntl()\n\n  const i = createInternational<typeof indexCopy>(intl)\n\n  const startDate = new Date(releasePlan.last_release_date)\n  const betaDate = new Date(releasePlan.upcoming_beta_date)\n  const rcDate = new Date(releasePlan.upcoming_rc_date)\n  const endDate = new Date(releasePlan.upcoming_release_date)\n\n  // const today = new Date(\"04/30/2020\")\n  const today = new Date()\n\n\n  validateDates(startDate, betaDate, rcDate, endDate)\n\n  // it's an approximation, but we don't need fidelity on a 300px wide bar\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  const diffTotalDays = Math.round(Math.abs(((+startDate) - (+endDate)) / oneDay));\n  const diffToBetaDays = Math.round(Math.abs(((+startDate) - (+betaDate)) / oneDay));\n  const diffToRCDays = Math.round(Math.abs(((+startDate) - (+rcDate)) / oneDay));\n  const diffToToday = Math.round(Math.abs(((+startDate) - (+today)) / oneDay));\n\n  let needlePerc = -1\n  // is after release || somehow ended up negative\n  if (diffToToday > diffTotalDays || diffToToday < 0) {\n    // uh oh, we need to update the release-plan.json\n    // so NOOP to leave at -1\n  } else if (diffToToday < diffToBetaDays) {\n    // It's in the first bit, so x% of 0 - 55%\n    const onePerc = 55 / 100;\n    needlePerc = ((diffToToday / diffToBetaDays) * onePerc) * 100\n  } else if (diffToToday < diffToRCDays) {\n    // It's in the second bit, so x% of 55 - 83%\n    const onePerc = (83 - 55) / 100;\n    needlePerc = ((onePerc * (diffToToday / diffToRCDays)) * 100) + 55\n  } else {\n    // must be in the final section\n    const onePerc = 17 / 100;\n    needlePerc = ((onePerc * (diffToToday / diffTotalDays)) * 100) + 83\n  }\n\n  const releaseParts = intl.formatDateToParts(startDate, { month: \"short\", day: \"numeric\" })\n  const betaParts = intl.formatDateToParts(betaDate, { month: \"short\", day: \"numeric\" })\n  const rcParts = intl.formatDateToParts(rcDate, { month: \"short\", day: \"numeric\" })\n  const shipParts = intl.formatDateToParts(endDate, { month: \"short\", day: \"numeric\" })\n\n  const shipMsg = <a href={releasePlan.iteration_plan_url}>{releasePlan.upcoming_version}</a>\n  const releaseMsg = <a href={withPrefix(releaseInfo.releaseNotesURL)}>{i(\"index_releases_released\")}</a>\n  const betaMsg = !releaseInfo.isBeta ? <span>{i(\"index_releases_beta\")}</span> : <a href={releaseInfo.betaPostURL}>{i(\"index_releases_beta\")}</a>\n  const rcMsg = !releaseInfo.isRC ? <span>{i(\"index_releases_rc\")}</span> : <a href={releaseInfo.rcPostURL}>{i(\"index_releases_rc\")}</a>\n\n  return (\n    <div className=\"grey-box last\">\n      <p>{i(\"index_releases_pt1\")} {shipMsg}{i(\"index_releases_pt2\")} {shipParts.map(p => p.value).join('')}</p>\n      <div className=\"release-info\">\n        <div className=\"needle\" style={{ left: needlePerc + \"%\", display: needlePerc === -1 ? \"none\" : \"block\" }} />\n        <div className=\"needle-head\" style={{ left: needlePerc + \"%\", display: needlePerc === -1 ? \"none\" : \"block\" }} />\n        <div className=\"release\">\n          <div>\n            <div className=\"separator\" />\n            <div className=\"bar\" />\n          </div>\n          <p>{releaseInfo.tags.stableMajMin} {releaseMsg}<br />{releaseParts.map(p => p.value).join('')}</p>\n        </div>\n        <div className=\"beta\">\n          <div>\n            <div className=\"separator\" />\n            <div className=\"bar\" />\n          </div>\n          <p>{releasePlan.upcoming_version} {betaMsg}<br />{betaParts.map(p => p.value).join('')}</p>\n        </div>\n        <div className=\"rc\">\n          <div>\n            <div className=\"separator\" />\n            <div className=\"bar\" />\n          </div>\n          <p>{releasePlan.upcoming_version} {rcMsg}<br />{rcParts.map(p => p.value).join('')}</p>\n        </div>\n      </div>\n    </div>)\n}\n\n\nfunction validateDates(startDate: Date, betaDate: Date, rcDate: Date, endDate: Date) {\n  if (!startDate || !betaDate || !rcDate || !endDate) {\n    const dates = [\n      { \"name\": \"startDate\", date: startDate },\n      { \"name\": \"betaDate\", date: betaDate },\n      { \"name\": \"rcDate\", date: rcDate },\n      { \"name\": \"releaseDate\", date: releasePlan }\n    ]\n    const failed = dates.filter(d => !d.date)\n    throw new Error(`Dates in release-plan.json can't be converted into JS dates: ${failed.join(\" - \")}`)\n  }\n}\n\n","import * as React from \"react\"\nimport { Layout } from \"../components/layout\"\nimport { withPrefix, graphql, Link } from \"gatsby\"\n\nimport { Intl } from \"../components/Intl\"\nimport { UpcomingQuery } from \"../__generated__/gatsby-types\"\nimport { UpcomingReleaseMeta } from \"../components/index/UpcomingReleaseMeta\"\nimport { useIntl } from \"react-intl\"\n\nimport \"../templates/pages/index.scss\"\n\ntype Props = {\n  data: UpcomingQuery\n}\n\nimport releasePlan from \"../lib/release-plan.json\"\n\nconst Index: React.FC<Props> = (props) => {\n  const intl = useIntl()\n  const today = new Date()\n\n  const startDate = new Date(releasePlan.last_release_date)\n  const betaDate = new Date(releasePlan.upcoming_beta_date)\n  const rcDate = new Date(releasePlan.upcoming_rc_date)\n  const endDate = new Date(releasePlan.upcoming_release_date)\n\n  // it's an approximation, but we don't need fidelity on a 300px wide bar\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  const diffTotalDays = Math.round(Math.abs(((+startDate) - (+endDate)) / oneDay));\n  const diffToBetaDays = Math.round(Math.abs(((+startDate) - (+betaDate)) / oneDay));\n  const diffToRCDays = Math.round(Math.abs(((+startDate) - (+rcDate)) / oneDay));\n  const diffToToday = Math.round(Math.abs(((+startDate) - (+today)) / oneDay));\n\n  const betaDateString = intl.formatDateToParts(betaDate, { month: \"short\", day: \"numeric\" }).map(p => p.value).join('')\n  const rcDateString = intl.formatDateToParts(rcDate, { month: \"short\", day: \"numeric\" }).map(p => p.value).join('')\n  const shipDateString = intl.formatDateToParts(endDate, { month: \"short\", day: \"numeric\" }).map(p => p.value).join('')\n\n  // Update the meta description (so you don't need to click through) on a new build\n  let metaUpcoming = \"\"\n  if (diffToToday > diffTotalDays || diffToToday < 0) {\n    metaUpcoming = \"Preparing details for the next release\"\n  } else if (diffToToday < diffToBetaDays) {\n    metaUpcoming = `${releasePlan.upcoming_version} Beta on ${betaDateString}`\n  } else if (diffToToday < diffToRCDays) {\n    metaUpcoming = `${releasePlan.upcoming_version} RC on ${rcDateString}`\n  } else {\n    metaUpcoming = `${releasePlan.upcoming_version} Final release on ${shipDateString}`\n  }\n\n  const metaDescription = `Up next: ${metaUpcoming}`\n\n  return (\n    <>\n      <Layout title=\"Release Cycle\" description={metaDescription} lang=\"en\" allSitePage={props.data.allSitePage}>\n        <div id=\"upcoming\">\n          <div className=\"raised content main-content-block\">\n            <div className=\"split-sixhundred\">\n              <h1 style={{ marginTop: \"20px\" }}>Release Cycle</h1>\n              <div id='index'>\n                <UpcomingReleaseMeta />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\n\nexport default (props: Props) => <Intl locale=\"en\"><Index {...props} /></Intl>\n\nexport const query = graphql`\n  query Upcoming {\n    ...AllSitePage\n  }\n`\n"],"sourceRoot":""}