import{g as s,r as n,o as a,c as l,e as o,F as p,n as e,W as t,t as r,f as c,_ as y,j as F,w as D,a as i,d as A}from"./app.8d30a6c9.js";const C={class:"tabs"},d=["onClick"],h={class:"code-example"},u=y(s({__name:"TestingApiSwitcher",setup(s){const y=n("vtu-api"),F=[{label:"Vue Test Utils",className:"vtu-api"},{label:"Cypress",className:"cypress-api"},{label:"Testing Library",className:"testing-library-api"}];return(s,n)=>(a(),l("div",{class:t(["testing-code-examples",`prefers-${y.value}`])},[o("div",C,[(a(),l(p,null,e(F,(s=>o("div",{key:s.className,class:t(["tab",{active:s.className===y.value}]),onClick:n=>y.value=s.className},r(s.label),11,d))),64))]),o("div",h,[c(s.$slots,"default")])],2))}}),[["__scopeId","data-v-36595bd6"]]),g=i('<h1 id="testing" tabindex="-1">测试 <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h1><h2 id="why-test" tabindex="-1">为什么需要测试 <a class="header-anchor" href="#why-test" aria-hidden="true">#</a></h2><p>自动化测试能够预防无意引入的 bug，并鼓励开发者将应用分解为可测试、可维护的函数、模块、类和组件。这能够帮助你和你的团队更快速、自信地构建复杂的 Vue 应用。与任何应用一样，新的 Vue 应用可能会以多种方式崩溃，因此，在发布前发现并解决这些问题就变得十分重要。</p><p>在本篇指引中，我们将介绍一些基本术语，并就你的 Vue 3 应用应选择哪些工具提供一些建议。</p><p>还有一个特定用于 Vue 的小节，介绍了组合式函数的测试，详情请参阅<a href="#testing-composables">测试组合式函数</a>。</p><h2 id="when-to-test" tabindex="-1">何时测试 <a class="header-anchor" href="#when-to-test" aria-hidden="true">#</a></h2><p>越早越好！我们建议你尽快开始编写测试。拖得越久，应用就会有越多的依赖和复杂性，想要开始添加测试也就越困难。</p><h2 id="testing-types" tabindex="-1">测试的类型 <a class="header-anchor" href="#testing-types" aria-hidden="true">#</a></h2><p>当设计你的 Vue 应用的测试策略时，你应该利用以下几种测试类型：</p><ul><li><strong>单元测试</strong>：检查给定函数、类或组合式函数的输入是否产生预期的输出或副作用。</li><li><strong>组件测试</strong>：检查你的组件是否正常挂载和渲染、是否可以与之互动，以及表现是否符合预期。这些测试比单元测试导入了更多的代码，更复杂，需要更多时间来执行。</li><li><strong>端到端测试</strong>：检查跨越多个页面的功能，并对生产构建的 Vue 应用进行实际的网络请求。这些测试通常涉及到建立一个数据库或其他后端。</li></ul><p>每种测试类型在你的应用的测试策略中都发挥着作用，保护你免受不同类型的问题的影响。</p><h2 id="overview" tabindex="-1">总览 <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>我们将简要地讨论这些测试是什么，以及如何在 Vue 应用中实现它们，并提供一些普适性建议。</p><h2 id="unit-testing" tabindex="-1">单元测试 <a class="header-anchor" href="#unit-testing" aria-hidden="true">#</a></h2><p>编写单元测试是为了验证小的、独立的代码单元是否按预期工作。一个单元测试通常覆盖一个单个函数、类、组合式函数或模块。单元测试侧重于逻辑上的正确性，只关注应用整体功能的一小部分。他们可能会模拟你的应用环境的很大一部分（如初始状态、复杂的类、第三方模块和网络请求）。</p><p>一般来说，单元测试将捕获函数的业务逻辑和逻辑正确性的问题。</p><p>以这个 <code>increment</code> 函数为例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// helpers.js</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">max</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>因为它很独立，可以很容易地调用 <code>increment</code> 函数并断言它是否返回了所期望的内容，所以我们将编写一个单元测试。</p><p>如果任何一条断言失败了，那么问题一定是出在 <code>increment</code> 函数上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// helpers.spec.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./helpers</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line highlighted"><span style="color:#82AAFF;">describe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">increment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">increments the current number by 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">does not increment the current number over the max</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">has a default max of 10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>如前所述，单元测试通常适用于独立的业务逻辑、组件、类、模块或函数，不涉及 UI 渲染、网络请求或其他环境问题。</p><p>这些通常是与 Vue 无关的纯 JavaScript/TypeScript 模块。一般来说，在 Vue 应用中为业务逻辑编写单元测试与使用其他框架的应用没有明显区别。</p><p>但有两种情况，你必须对 Vue 的特定功能进行单元测试：</p><ol><li>组合式函数</li><li>组件</li></ol><h3 id="composables" tabindex="-1">组合式函数 <a class="header-anchor" href="#composables" aria-hidden="true">#</a></h3><p>有一类 Vue 应用中特有的函数被称为 <a href="/guide/reusability/composables.html">组合式函数</a>，在测试过程中可能需要特殊处理。 你可以跳转到下方查看 <a href="#testing-composables">测试组合式函数</a> 了解更多细节。</p><h3 id="unit-testing-components" tabindex="-1">组件的单元测试 <a class="header-anchor" href="#unit-testing-components" aria-hidden="true">#</a></h3><p>一个组件可以通过两种方式测试：</p><ol><li><p>白盒：单元测试</p><p>白盒测试知晓一个组件的实现细节和依赖关系。它们更专注于将组件进行更 <strong>独立</strong> 的测试。这些测试通常会涉及到模拟一些组件的部分子组件，以及设置插件的状态和依赖性（例如 Vuex）。</p></li><li><p>黑盒：组件测试</p><p>黑盒测试不知晓一个组件的实现细节。这些测试尽可能少地模拟，以测试组件在整个系统中的集成情况。它们通常会渲染所有子组件，因而会被认为更像一种“集成测试”。请查看下方的<a href="#component-testing">组件测试建议</a>作进一步了解。</p></li></ol><h3 id="recommendation" tabindex="-1">推荐方案 <a class="header-anchor" href="#recommendation" aria-hidden="true">#</a></h3><ul><li><p><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a></p><p>因为由 <code>create-vue</code> 创建的官方项目配置是基于 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 的，所以我们推荐你使用一个可以利用同一套 Vite 配置和转换管道的单元测试框架。<a href="https://cn.vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 正是一个针对此目标设计的单元测试框架，它由 Vue / Vite 团队成员开发和维护。在 Vite 的项目集成它会非常简单，而且速度非常快。</p></li></ul><h3 id="other-options" tabindex="-1">其他选择 <a class="header-anchor" href="#other-options" aria-hidden="true">#</a></h3><ul><li><p><a href="https://peeky.dev/" target="_blank" rel="noreferrer">Peeky</a> 是另一速度极快的单元测试运行器，对 Vite 集成提供第一优先级支持。它也是由 Vue 核心团队成员创建的，并提供了一个基于图形用户界面（GUI）的测试界面。</p></li><li><p><a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a> 是一个广受欢迎的单元测试框架，并可通过 <a href="https://github.com/sodatea/vite-jest" target="_blank" rel="noreferrer">vite-jest</a> 这个包在 Vite 中使用。不过，我们只推荐你在已有一套 Jest 测试配置、且需要迁移到基于 Vite 的项目时使用它，因为 Vitest 提供了更无缝的集成和更好的性能。</p></li></ul><h2 id="component-testing" tabindex="-1">组件测试 <a class="header-anchor" href="#component-testing" aria-hidden="true">#</a></h2><p>在 Vue 应用中，主要用组件来构建用户界面。因此，当验证应用的行为时，组件是一个很自然的独立单元。从粒度的角度来看，组件测试位于单元测试之上，可以被认为是集成测试的一种形式。你的 Vue 应用中大部分内容都应该由组件测试来覆盖，我们建议每个 Vue 组件都应有自己的组件测试文件。</p><p>组件测试应该捕捉组件中的 prop、事件、提供的插槽、样式、CSS class 名、生命周期钩子，和其他相关的问题。</p><p>组件测试不应该模拟子组件，而应该像用户一样，通过与组件互动来测试组件和其子组件之间的交互。例如，组件测试应该像用户那样点击一个元素，而不是编程式地与组件进行交互。</p><p>组件测试主要需要关心组件的公开接口而不是内部实现细节。对于大部分的组件来说，公开接口包括触发的事件、prop 和插槽。当进行测试时，请记住，<strong>测试这个组件做了什么，而不是测试它是怎么做到的</strong>。</p><ul><li><p><strong>推荐的做法</strong></p><ul><li>对于 <strong>视图</strong> 的测试：根据输入 prop 和插槽断言渲染输出是否正确。</li><li>对于 <strong>交互</strong> 的测试：断言渲染的更新是否正确或触发的事件是否正确地响应了用户输入事件。</li></ul><p>在下面的例子中，我们展示了一个步进器（Stepper）组件，它拥有一个标记为 <code>increment</code> 的可点击的 DOM 元素。我们还传入了一个名为 <code>max</code> 的 prop 防止步进器增长超过 <code>2</code>，因此如果我们点击了按钮 3 次，视图将仍然显示 <code>2</code>。</p><p>我们不了解这个步进器的实现细节，只知道“输入”是这个 <code>max</code> prop，“输出”是这个组件状态所呈现出的视图。</p></li></ul>',40),m=o("div",{class:"testing-library-api"},[o("div",{class:"language-js"},[o("button",{title:"Copy Code",class:"copy"}),o("span",{class:"lang"},"js"),o("pre",{class:"shiki"},[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{"),o("span",{style:{color:"#A6ACCD"}}," getByText "),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"render"),o("span",{style:{color:"#A6ACCD"}},"(Stepper"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#F07178"}},"props"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#F07178"}},"max"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"1")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"getByText"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"0"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},") "),o("span",{style:{color:"#676E95"}},'// 隐式断言 "0" 在这个组件中')]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," button "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"getByText"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"increment"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95"}},"// 向我们的增长按钮发送一个点击事件。")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"await"),o("span",{style:{color:"#A6ACCD"}}," fireEvent"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"click"),o("span",{style:{color:"#A6ACCD"}},"(button)")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"getByText"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"1"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"await"),o("span",{style:{color:"#A6ACCD"}}," fireEvent"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"click"),o("span",{style:{color:"#A6ACCD"}},"(button)")]),A("\n"),o("span",{class:"line"})])])])],-1),b=o("div",{class:"vtu-api"},[o("div",{class:"language-js"},[o("button",{title:"Copy Code",class:"copy"}),o("span",{class:"lang"},"js"),o("pre",{class:"shiki"},[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," valueSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=stepper-value]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," buttonSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=increment]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," wrapper "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"mount"),o("span",{style:{color:"#A6ACCD"}},"(Stepper"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#F07178"}},"props"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#F07178"}},"max"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"1")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"expect"),o("span",{style:{color:"#A6ACCD"}},"(wrapper"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"find"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"text"),o("span",{style:{color:"#A6ACCD"}},"())"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"toContain"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"0"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"await"),o("span",{style:{color:"#A6ACCD"}}," wrapper"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"find"),o("span",{style:{color:"#A6ACCD"}},"(buttonSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"trigger"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"click"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"expect"),o("span",{style:{color:"#A6ACCD"}},"(wrapper"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"find"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"text"),o("span",{style:{color:"#A6ACCD"}},"())"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"toContain"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"1"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"})])])])],-1),v=o("div",{class:"cypress-api"},[o("div",{class:"language-js"},[o("button",{title:"Copy Code",class:"copy"}),o("span",{class:"lang"},"js"),o("pre",{class:"shiki"},[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," valueSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=stepper-value]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," buttonSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=increment]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"mount"),o("span",{style:{color:"#A6ACCD"}},"(Stepper"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#F07178"}},"props"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#F07178"}},"max"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"1")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"cy"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"get"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"should"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"be.visible"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"and"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"contain.text"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"0"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"get"),o("span",{style:{color:"#A6ACCD"}},"(buttonSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"click"),o("span",{style:{color:"#A6ACCD"}},"()")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"get"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"should"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"contain.text"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"1"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"})])])])],-1),f=i('<ul><li><p><strong>应避免的做法</strong></p><p>不要去断言一个组件实例的私有状态或测试一个组件的私有方法。测试实现细节会使测试代码太脆弱，因为当实现发生变化时，它们更有可能失败并需要更新重写。</p><p>组件的最终工作是渲染正确的 DOM 输出，所以专注于 DOM 输出的测试提供了足够的正确性保证（如果你不需要更多其他方面测试的话），同时更加健壮、需要的改动更少。</p><p>不要完全依赖快照测试。断言 HTML 字符串并不能完全说明正确性。应当编写有意图的测试。</p><p>如果一个方法需要测试，把它提取到一个独立的实用函数中，并为它写一个专门的单元测试。如果它不能被直截了当地抽离出来，那么对它的调用应该作为交互测试的一部分。</p></li></ul><h3 id="recommendation-1" tabindex="-1">推荐方案 <a class="header-anchor" href="#recommendation-1" aria-hidden="true">#</a></h3><ul><li><p><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 对于组件和组合式函数都采用无头渲染的方式 (例如 VueUse 中的 <a href="https://vueuse.org/core/useFavicon/#usefavicon" target="_blank" rel="noreferrer"><code>useFavicon</code></a> 函数)。组件和 DOM 都可以通过 <a href="https://testing-library.com/docs/vue-testing-library/intro" target="_blank" rel="noreferrer">@testing-library/vue</a> 来测试。</p></li><li><p><a href="https://on.cypress.io/component" target="_blank" rel="noreferrer">Cypress 组件测试</a> 会预期其准确地渲染样式或者触发原生 DOM 事件。可以搭配 <a href="https://testing-library.com/docs/cypress-testing-library/intro" target="_blank" rel="noreferrer">@testing-library/cypress</a> 这个库一同进行测试。</p></li></ul><p>Vitest 和基于浏览器的运行器之间的主要区别是速度和执行上下文。简而言之，基于浏览器的运行器，如 Cypress，可以捕捉到基于 Node 的运行器（如 Vitest）所不能捕捉的问题（比如样式问题、原生 DOM 事件、Cookies、本地存储和网络故障），但基于浏览器的运行器比 Vitest <em>慢几个数量级</em>，因为它们要执行打开浏览器，编译样式表以及其他步骤。Cypress 是一个基于浏览器的运行器，支持组件测试。请阅读 <a href="https://vitest.dev/guide/comparisons.html#cypress" target="_blank" rel="noreferrer">Vitest 文档的“比较”这一章</a> 了解 Vitest 和 Cypress 最新的比较信息。</p><h3 id="mounting-libraries" tabindex="-1">组件挂载库 <a class="header-anchor" href="#mounting-libraries" aria-hidden="true">#</a></h3><p>组件测试通常涉及到单独挂载被测试的组件，触发模拟的用户输入事件，并对渲染的 DOM 输出进行断言。有一些专门的工具库可以使这些任务变得更简单。</p><ul><li><p><a href="https://github.com/testing-library/vue-testing-library" target="_blank" rel="noreferrer"><code>@testing-library/vue</code></a> 是一个 Vue 的测试库，专注于测试组件而不依赖其他实现细节。因其良好的设计使得代码重构也变得非常容易。它的指导原则是，测试代码越接近软件的使用方式，它们就越值得信赖。</p></li><li><p><a href="https://github.com/vuejs/test-utils" target="_blank" rel="noreferrer"><code>@vue/test-utils</code></a> 是官方的底层组件测试库，用来提供给用户访问 Vue 特有的 API。<code>@testing-library/vue</code> 也是基于此库构建的。</p></li></ul><p>我们推荐使用 <code>@testing-library/vue</code> 测试应用中的组件, 因为它更匹配整个应用的测试优先级。只有在你构建高级组件、并需要测试内部的 Vue 特有 API 时再使用 <code>@vue/test-utils</code>。</p><h3 id="other-options-1" tabindex="-1">其他选择 <a class="header-anchor" href="#other-options-1" aria-hidden="true">#</a></h3><ul><li><a href="https://v2.nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch</a> 是一个端到端测试运行器，支持 Vue 的组件测试。（Nightwatch v2 版本的 <a href="https://github.com/nightwatchjs-community/todo-vue" target="_blank" rel="noreferrer">示例项目</a>）</li></ul><h2 id="e2e-testing" tabindex="-1">端到端（E2E）测试 <a class="header-anchor" href="#e2e-testing" aria-hidden="true">#</a></h2><p>虽然单元测试为所写的代码提供了一定程度的验证，但单元测试和组件测试在部署到生产时，对应用整体覆盖的能力有限。因此，端到端测试针对的可以说是应用最重要的方面：当用户实际使用你的应用时发生了什么。</p><p>端到端测试的重点是多页面的应用表现，针对你的应用在生产环境下进行网络请求。他们通常需要建立一个数据库或其他形式的后端，甚至可能针对一个预备上线的环境运行。</p><p>端到端测试通常会捕捉到路由、状态管理库、顶级组件（常见为 App 或 Layout）、公共资源或任何请求处理方面的问题。如上所述，它们可以捕捉到单元测试或组件测试无法捕捉的关键问题。</p><p>端到端测试不导入任何 Vue 应用的代码，而是完全依靠在真实浏览器中浏览整个页面来测试你的应用。</p><p>端到端测试验证了你的应用中的许多层。可以在你的本地构建的应用中，甚至是一个预上线的环境中运行。针对预上线环境的测试不仅包括你的前端代码和静态服务器，还包括所有相关的后端服务和基础设施。</p><blockquote><p>你的测试越是类似于你的软件的使用方式，它们就越能值得你信赖。- <a href="https://twitter.com/kentcdodds/status/977018512689455106" target="_blank" rel="noreferrer">Kent C. Dodds</a> - Testing Library 的作者</p></blockquote><p>通过测试用户操作如何影响你的应用，端到端测试通常是提高应用能否正常运行的置信度的关键。</p><h3 id="choosing-an-e2e-testing-solution" tabindex="-1">选择一个端到端测试解决方案 <a class="header-anchor" href="#choosing-an-e2e-testing-solution" aria-hidden="true">#</a></h3><p>虽然因为不可靠且拖慢了开发过程，市面上对 Web 上的端到端测试的评价并不好，但现代端到端工具已经在创建更可靠、更有用和交互性更好的测试方面取得了很大进步。在选择端到端测试框架时，以下小节会为你给应用选择测试框架时需要注意的事项提供一些指导。</p><h4 id="cross-browser-testing" tabindex="-1">跨浏览器测试 <a class="header-anchor" href="#cross-browser-testing" aria-hidden="true">#</a></h4><p>端到端测试的一个主要优点是你可以了解你的应用在多个不同浏览器上运行的情况。尽管理想情况应该是 100% 的跨浏览器覆盖率，但很重要的一点是跨浏览器测试对团队资源的回报是递减的，因为需要额外的时间和机器来持续运行它们。因此，在选择应用所需的跨浏览器测试的数量时，注意权衡是很有必要的。</p><h4 id="faster-feedback-loops" tabindex="-1">更快的反馈 <a class="header-anchor" href="#faster-feedback-loops" aria-hidden="true">#</a></h4><p>端到端测试和相应开发过程的主要问题之一是，运行整个套件需要很长的时间。通常情况下，这只在持续集成和部署（CI/CD）管道中进行。现代的端到端测试框架通过增加并行化等功能来帮助解决这个问题，这使得 CI/CD 管道的运行速度比以前快了几倍。此外，在本地开发时，能够有选择地为你正在工作的页面运行单个测试，同时还提供测试的热重载，大大提高了开发者的工作流程和生产力。</p><h4 id="first-class-debugging-experience" tabindex="-1">第一优先级的调试体验 <a class="header-anchor" href="#first-class-debugging-experience" aria-hidden="true">#</a></h4><p>传统上，开发者依靠扫描终端窗口中的日志来帮助确定测试中出现的问题，而现代端到端测试框架允许开发者利用他们已经熟悉的工具，例如浏览器开发工具。</p><h4 id="visibility-in-headless-mode" tabindex="-1">无头模式下的可见性 <a class="header-anchor" href="#visibility-in-headless-mode" aria-hidden="true">#</a></h4><p>当端到端测试在 CI/CD 管道中运行时，它们通常在无头浏览器（即不带界面的浏览器）中运行。因此，当错误发生时，现代端到端测试框架的一个关键特性是能够在不同的测试阶段查看应用的快照、视频，从而深入了解错误的原因。而在很早以前，要手动维护这些集成是非常繁琐的。</p><h3 id="recommendation-2" tabindex="-1">推荐方案 <a class="header-anchor" href="#recommendation-2" aria-hidden="true">#</a></h3><ul><li><p><a href="https://www.cypress.io/" target="_blank" rel="noreferrer">Cypress</a></p><p>总的来说，我们认为 Cypress 提供了最完整的端到端解决方案，其具有信息丰富的图形界面、出色的调试性、内置断言和存根、抗剥落性、并行化和快照等诸多特性。而且如上所述，它还提供对 <a href="https://docs.cypress.io/guides/component-testing/introduction" target="_blank" rel="noreferrer">组件测试</a> 的支持。不过，它只支持测试基于 Chromium 的浏览器和 Firefox。</p></li></ul><h3 id="other-options-2" tabindex="-1">其他选项 <a class="header-anchor" href="#other-options-2" aria-hidden="true">#</a></h3><ul><li><p><a href="https://playwright.dev/" target="_blank" rel="noreferrer">Playwright</a> 也是一个非常好的端到端测试解决方案，支持测试范围更广的浏览器品类（主要是 WebKit 型的）。查看这篇文章 <a href="https://playwright.dev/docs/why-playwright" target="_blank" rel="noreferrer">《为什么选择 Playwright》</a> 了解更多细节。</p></li><li><p><a href="https://v2.nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch v2</a> 是一个基于 <a href="https://www.npmjs.com/package/selenium-webdriver" target="_blank" rel="noreferrer">Selenium WebDriver</a> 的端到端测试解决方案。它的浏览器品类支持范围是最广的。</p></li></ul><h2 id="recipes" tabindex="-1">用例指南 <a class="header-anchor" href="#recipes" aria-hidden="true">#</a></h2><h3 id="adding-vitest-to-a-project" tabindex="-1">添加 Vitest 到项目中 <a class="header-anchor" href="#adding-vitest-to-a-project" aria-hidden="true">#</a></h3><p>在一个基于 Vite 的 Vue 项目中，运行如下命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> npm install -D vitest happy-dom @testing-library/vue</span></span>\n<span class="line"></span></code></pre></div><p>接着，更新你的 Vite 配置，添加上 <code>test</code> 选项：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// vite.config.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 启用类似 jest 的全局测试 API</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">globals</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 使用 happy-dom 模拟 DOM</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 这需要你安装 happy-dom 作为对等依赖（peer dependency）</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">happy-dom</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你在使用 TypeScript，请将 <code>vitest/globals</code> 添加到 <code>tsconfig.json</code> 的 <code>types</code> 字段当中。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// tsconfig.json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitest/globals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><p>接着在你的项目中创建名字以 <code>*.test.js</code> 结尾的文件。你可以把所有的测试文件放在项目根目录下的 <code>test</code> 目录中，或者放在源文件旁边的 <code>test</code> 目录中。Vitest 会使用命名规则自动搜索它们。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// MyComponent.test.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">render</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@testing-library/vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./MyComponent.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">it should work</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getByText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">MyComponent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    props</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 断言输出</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getByText</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>最后，在 <code>package.json</code> 之中添加测试命令，然后运行它：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitest</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> npm </span><span style="color:#82AAFF;">test</span></span>\n<span class="line"></span></code></pre></div><h3 id="testing-composables" tabindex="-1">测试组合式函数 <a class="header-anchor" href="#testing-composables" aria-hidden="true">#</a></h3><blockquote><p>这一小节假设你已经读过了<a href="/guide/reusability/composables.html">组合式函数</a>这一章。</p></blockquote><p>当涉及到测试组合式函数时，我们可以根据是否依赖宿主组件实例把它们分为两类。</p><p>当一个组合式函数使用以下 API 时，它依赖于一个宿主组件实例：</p><ul><li>生命周期钩子</li><li>供给/注入</li></ul><p>如果一个组合式程序只使用响应式 API，那么它可以通过直接调用并断言其返回的状态或方法来进行测试。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// counter.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCounter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">increment</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// counter.test.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./counter.js</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">useCounter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useCounter</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>一个依赖生命周期钩子或供给/注入的组合式函数需要被包装在一个宿主组件中才可以测试。我们可以创建下面这样的帮手函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// test-utils.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withSetup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">composable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    setup</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">composable</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 忽略模板警告</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 返回结果与应用实例</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 用来测试供给和组件卸载</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withSetup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./test-utils</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useFoo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">useFoo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">withSetup</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useFoo</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">123</span><span style="color:#F07178;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 为注入的测试模拟一方供给</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">provide</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 执行断言</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 如果需要的话可以这样触发</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unmount</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>对于更复杂的组合式函数，通过使用<a href="#component-testing">组件测试</a>编写针对这个包装器组件的测试，这会容易很多。</p>',56),E=JSON.parse('{"title":"测试","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么需要测试","slug":"why-test","link":"#why-test","children":[]},{"level":2,"title":"何时测试","slug":"when-to-test","link":"#when-to-test","children":[]},{"level":2,"title":"测试的类型","slug":"testing-types","link":"#testing-types","children":[]},{"level":2,"title":"总览","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"单元测试","slug":"unit-testing","link":"#unit-testing","children":[{"level":3,"title":"组合式函数","slug":"composables","link":"#composables","children":[]},{"level":3,"title":"组件的单元测试","slug":"unit-testing-components","link":"#unit-testing-components","children":[]},{"level":3,"title":"推荐方案","slug":"recommendation","link":"#recommendation","children":[]},{"level":3,"title":"其他选择","slug":"other-options","link":"#other-options","children":[]}]},{"level":2,"title":"组件测试","slug":"component-testing","link":"#component-testing","children":[{"level":3,"title":"推荐方案","slug":"recommendation-1","link":"#recommendation-1","children":[]},{"level":3,"title":"组件挂载库","slug":"mounting-libraries","link":"#mounting-libraries","children":[]},{"level":3,"title":"其他选择","slug":"other-options-1","link":"#other-options-1","children":[]}]},{"level":2,"title":"端到端（E2E）测试","slug":"e2e-testing","link":"#e2e-testing","children":[{"level":3,"title":"选择一个端到端测试解决方案","slug":"choosing-an-e2e-testing-solution","link":"#choosing-an-e2e-testing-solution","children":[]},{"level":3,"title":"推荐方案","slug":"recommendation-2","link":"#recommendation-2","children":[]},{"level":3,"title":"其他选项","slug":"other-options-2","link":"#other-options-2","children":[]}]},{"level":2,"title":"用例指南","slug":"recipes","link":"#recipes","children":[{"level":3,"title":"添加 Vitest 到项目中","slug":"adding-vitest-to-a-project","link":"#adding-vitest-to-a-project","children":[]},{"level":3,"title":"测试组合式函数","slug":"testing-composables","link":"#testing-composables","children":[]}]}],"relativePath":"guide/scaling-up/testing.md"}'),k=Object.assign({name:"guide/scaling-up/testing.md"},{setup:s=>(s,n)=>(a(),l("div",null,[g,F(u,null,{default:D((()=>[m,b,v])),_:1}),f]))});export{E as __pageData,k as default};
