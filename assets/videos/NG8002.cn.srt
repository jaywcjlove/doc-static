1
00:00:00,400 --> 00:00:05,360
Can't bind to prop name because it isn't a known property of node.

2
00:00:05,360 --> 00:00:10,160
你可能在试图绑定某元素的 Property 或 Attribute，而

3
00:00:10,160 --> 00:00:15,600
这可能出于多种原因。如果它是 Angular 组件

4
00:00:15,600 --> 00:00:20,640
它可能在组件定义中忘了写 @Input 装饰器。但是如果它是原生 HTML 元素

5
00:00:20,640 --> 00:00:25,520
它可能只是因为该属性不存在。或者，如果你在使用自定义元素或 Web Components

6
00:00:25,520 --> 00:00:30,080
它可能需要进行额外的配置，以绑定到自定义属性

7
00:00:30,080 --> 00:00:35,520
让我们先快速过一遍 Angular 属性绑定的工作原理

8
00:00:35,520 --> 00:00:39,600
然后，我们会检查一些错误重现并解决它们

9
00:00:39,600 --> 00:00:44,000
在 Angular 模板中，我们可以通过把属性包裹在方括号中来绑定它

10
00:00:44,000 --> 00:00:49,040
并且在其右侧提供表达式。当表达式的值发生变化时，被绑定的属性

11
00:00:49,040 --> 00:00:54,640
及其对应的 UI 都会自动更新。
通常，你会在使用自定义组件时会遇到未知属性的问题

12
00:00:54,640 --> 00:00:59,600
在我们的代码中，我们有一个带有 name 属性的 ItemComponent

13
00:00:59,600 --> 00:01:05,520
然后，在 AppComponent 模板中，我们引用了 ItemComponent

14
00:01:05,520 --> 00:01:10,800
并试图绑定到其 name 属性
但现在，Angular 告诉我们它无法绑定到 name

15
00:01:10,800 --> 00:01:15,920
因为它不是一个 'app-item' 的已知属性
我们可以通过回到 ItemComponent，并且

16
00:01:15,920 --> 00:01:22,080
为 name 属性添加 @Input 装饰器来解决此问题

17
00:01:22,080 --> 00:01:28,000
这个 @Input 装饰器允许数据进行绑定或者说通过模板从组件的外部传入

18
00:01:28,000 --> 00:01:32,960
换句话说，如果某个属性没有被指定为 @Input，它就不能

19
00:01:32,960 --> 00:01:37,760
在模板中使用方括号进行数据绑定。
另请注意，你可以给 @Input 装饰器传入参数

20
00:01:37,760 --> 00:01:42,880
以改变该属性的名字。

21
00:01:42,880 --> 00:01:48,080
这可以让你能在模板中使用与其组件内部属性名不同的名字

22
00:01:48,080 --> 00:01:53,440
另外，你的自定义组件还可能出现与原生 HTML 元素相关的问题
在默认配置下

23
00:01:53,440 --> 00:01:58,240
你只能绑定 Angular 编译器认识的属性

24
00:01:58,240 --> 00:02:03,600
当使用原生 HTML 元素时，它认识来自 HTML 规范的 Property 和 Attribute

25
00:02:03,600 --> 00:02:09,120
比如，对于 Input 元素，我们可以绑定到该元素的 value 属性

26
00:02:09,120 --> 00:02:13,840
这时不会发生错误，因为 value 是 input 的一个有效属性

27
00:02:13,840 --> 00:02:18,640
但如果我们试图绑定到一个不存在的属性，Angular 就会抛出错误

28
00:02:18,640 --> 00:02:23,280
虽然并没有什么好的理由绑定到原生 HTML 元素中不存在的属性

29
00:02:23,280 --> 00:02:29,440
但是仍然可以告诉 Angular 在某个 ngModule 中忽略这个错误

30
00:02:29,440 --> 00:02:36,000
添加到 ngModule 装饰器中的 schemas 数组中

31
00:02:36,000 --> 00:02:41,360
注意，当我们修改这个 schema 的时候，错误消失了，但是要记住

32
00:02:41,360 --> 00:02:46,240
这项技巧只应该作为不得已的手段使用，因为它会忽略所有此类错误

33
00:02:46,240 --> 00:02:51,920
而这会在未来给我们带来未捕获的问题和不稳定的代码

34
00:02:51,920 --> 00:02:56,480
另一个你可能遇到此问题的地方是使用 Web Components 或自定义元素时

35
00:02:56,480 --> 00:03:02,000
当使用自定义元素时，绑定到一个 Angular 不认识的属性是完全可以的

36
00:03:02,000 --> 00:03:07,200
我们可以用一种更保守的方式告诉 Angular 忽略本错误
那就是在 ngModule 中使用 CUSTOM_ELEMENTS_SCHEMA

37
00:03:07,200 --> 00:03:13,760
这会告诉 Angular 在自定义元素上忽略其已知属性的错误

38
00:03:13,760 --> 00:03:17,840
就像它们是你自己的 Angular 组件或第三方 Web 组件一样

39
00:03:18,480 --> 00:03:22,880
它会允许你在自定义元素上绑定任意属性，但是当

40
00:03:22,880 --> 00:03:28,000
在原生 HTML 元素上绑定到不存在的属性时仍然会报错

41
00:03:28,000 --> 00:03:32,800
我们来回顾一下。
当你遇到 'Can't bind to prop name since it isn't a known property of node'

42
00:03:32,800 --> 00:03:37,600
错误时，你首先要验证一下此属性名对 Angular 是已知的。

43
00:03:37,600 --> 00:03:43,280
原生 HTML 元素只应该使用基于现行 HTML 规范的属性

44
00:03:43,280 --> 00:03:48,400
当使用自定义元素时，你可以通过在 ngModule 中
使用 CUSTOM_ELEMENTS_SCHEMA 来忽略本错误

45
00:03:48,400 --> 00:03:54,080
作为不得已的手段，你可以使用 NO_ERRORS_SCHEMA 来忽略所有此类错误

46
00:03:54,080 --> 00:03:58,960

欲知详情和范例，请参阅 Angular 官方文档的属性绑定指南
