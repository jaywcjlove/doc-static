import{_ as s,o as n,c as a,a as e}from"./app.8d30a6c9.js";const l=JSON.parse('{"title":"Vue 与 Web Components","description":"","frontmatter":{},"headers":[{"level":2,"title":"在 Vue 中使用自定义元素","slug":"using-custom-elements-in-vue","link":"#using-custom-elements-in-vue","children":[{"level":3,"title":"跳过组件解析","slug":"skipping-component-resolution","link":"#skipping-component-resolution","children":[]},{"level":3,"title":"传递 DOM 属性","slug":"passing-dom-properties","link":"#passing-dom-properties","children":[]}]},{"level":2,"title":"使用 Vue 构建自定义元素","slug":"building-custom-elements-with-vue","link":"#building-custom-elements-with-vue","children":[{"level":3,"title":"defineCustomElement","slug":"definecustomelement","link":"#definecustomelement","children":[]},{"level":3,"title":"将 SFC 编译为自定义元素","slug":"sfc-as-custom-element","link":"#sfc-as-custom-element","children":[]},{"level":3,"title":"基于 Vue 构建自定义元素库","slug":"tips-for-a-vue-custom-elements-library","link":"#tips-for-a-vue-custom-elements-library","children":[]}]},{"level":2,"title":"Web Components vs. Vue 组件","slug":"web-components-vs-vue-components","link":"#web-components-vs-vue-components","children":[]}],"relativePath":"guide/extras/web-components.md"}'),p={name:"guide/extras/web-components.md"},o=[e('<h1 id="vue-and-web-components" tabindex="-1">Vue 与 Web Components <a class="header-anchor" href="#vue-and-web-components" aria-hidden="true">#</a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noreferrer">Web Components</a> 是一组 web 原生 API 的统称，允许开发者创建可复用的自定义元素 (custom elements)。</p><p>我们认为 Vue 和 Web Components 是互补的技术。Vue 为使用和创建自定义元素提供了出色的支持。无论你是将自定义元素集成到现有的 Vue 应用中，还是使用 Vue 来构建和分发自定义元素都很方便。</p><h2 id="using-custom-elements-in-vue" tabindex="-1">在 Vue 中使用自定义元素 <a class="header-anchor" href="#using-custom-elements-in-vue" aria-hidden="true">#</a></h2><p>Vue <a href="https://custom-elements-everywhere.com/libraries/vue/results/results.html" target="_blank" rel="noreferrer">在 Custom Elements Everywhere 测试中取得了 100% 的分数</a>。在 Vue 应用中使用自定义元素基本上与使用原生 HTML 元素的效果相同，但需要留意以下几点：</p><h3 id="skipping-component-resolution" tabindex="-1">跳过组件解析 <a class="header-anchor" href="#skipping-component-resolution" aria-hidden="true">#</a></h3><p>默认情况下，Vue 会将任何非原生的 HTML 标签优先当作 Vue 组件处理，而将“渲染一个自定义元素”作为后备选项。这会在开发时导致 Vue 抛出一个“解析组件失败”的警告。要让 Vue 知晓特定元素应该被视为自定义元素并跳过组件解析，我们可以指定 <a href="/api/application.html#app-config-compileroptions"><code>compilerOptions.isCustomElement</code> 这个选项</a>。</p><p>如果在开发 Vue 应用时进行了构建配置，则应该在构建配置中传递该选项，因为它是一个编译时选项。</p><h4 id="example-in-browser-config" tabindex="-1">浏览器内编译时的示例配置 <a class="header-anchor" href="#example-in-browser-config" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 仅在浏览器内编译时才会工作</span></span>\n<span class="line"><span style="color:#676E95;">// 如果使用了构建工具，请看下面的配置示例</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isCustomElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> tag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><h4 id="example-vite-config" tabindex="-1">Vite 示例配置 <a class="header-anchor" href="#example-vite-config" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// vite.config.js</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> vue </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vitejs/plugin-vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">compilerOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;">// 将所有带短横线的标签名都视为自定义元素</span></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#82AAFF;">isCustomElement</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> tag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="example-vue-cli-config" tabindex="-1">Vue CLI 示例配置 <a class="header-anchor" href="#example-vue-cli-config" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// vue.config.js</span></span>\n<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">chainWebpack</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">module</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rule</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">        compilerOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;">// 将所有带 ion- 的标签名都视为自定义元素</span></span>\n<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">isCustomElement</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ion-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">))</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="passing-dom-properties" tabindex="-1">传递 DOM 属性 <a class="header-anchor" href="#passing-dom-properties" aria-hidden="true">#</a></h3><p>由于 DOM attribute 只能为字符串值，因此我们只能使用 DOM 对象的属性来传递复杂数据。当为自定义元素设置 props 时，Vue 3 将通过 <code>in</code> 操作符自动检查该属性是否已经存在于 DOM 对象上，并且在这个 key 存在时，更倾向于将值设置为一个 DOM 对象的属性。这意味着，在大多数情况下，如果自定义元素遵循<a href="https://web.dev/custom-elements-best-practices/" target="_blank" rel="noreferrer">推荐的最佳实践</a>，你就不需要考虑这个问题。</p><p>然而，也会有一些特别的情况：必须将数据以一个 DOM 对象属性的方式传递，但该自定义元素无法正确地定义/反射这个属性 (因为 <code>in</code> 检查失败)。在这种情况下，你可以强制使用一个 <code>v-bind</code> 绑定、通过 <code>.prop</code> 修饰符来设置该 DOM 对象的属性：</p><div class="language-vue-html"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">{ </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- 等价简写 --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;"> .</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ name: &#39;jack&#39; }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h2 id="building-custom-elements-with-vue" tabindex="-1">使用 Vue 构建自定义元素 <a class="header-anchor" href="#building-custom-elements-with-vue" aria-hidden="true">#</a></h2><p>自定义元素的主要好处是，它们可以在使用任何框架，甚至是在不使用框架的场景下使用。当你面向的最终用户可能使用了不同的前端技术栈，或是当你希望将最终的应用与它使用的组件实现细节解耦时，它们会是理想的选择。</p><h3 id="definecustomelement" tabindex="-1">defineCustomElement <a class="header-anchor" href="#definecustomelement" aria-hidden="true">#</a></h3><p>Vue 提供了一个和定义一般 Vue 组件几乎完全一致的 <a href="/api/general.html#definecustomelement"><code>defineCustomElement</code></a> 方法来支持创建自定义元素。这个方法接收的参数和 <a href="/api/general.html#definecomponent"><code>defineComponent</code></a> 完全相同。但它会返回一个继承自 <code>HTMLElement</code> 的自定义元素构造器：</p><div class="language-vue-html"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-vue-element</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-vue-element</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyVueElement </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 这里是同平常一样的 Vue 组件选项</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emits</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// defineCustomElement 特有的：注入进 shadow root 的 CSS</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">styles</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">/* inlined css */</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// 注册自定义元素</span></span>\n<span class="line"><span style="color:#676E95;">// 注册之后，所有此页面中的 `&lt;my-vue-element&gt;` 标签</span></span>\n<span class="line"><span style="color:#676E95;">// 都会被升级</span></span>\n<span class="line"><span style="color:#A6ACCD;">customElements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-vue-element</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MyVueElement)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// 你也可以编程式地实例化元素：</span></span>\n<span class="line"><span style="color:#676E95;">// （必须在注册之后）</span></span>\n<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyVueElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 初始化 props（可选）</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><h4 id="lifecycle" tabindex="-1">生命周期 <a class="header-anchor" href="#lifecycle" aria-hidden="true">#</a></h4><ul><li><p>当该元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks" target="_blank" rel="noreferrer"><code>connectedCallback</code></a> 初次调用时，一个 Vue 自定义元素会在内部挂载一个 Vue 组件实例到它的 shadow root 上。</p></li><li><p>当此元素的 <code>disconnectedCallback</code> 被调用时，Vue 会在一个微任务后检查元素是否还留在文档中。</p><ul><li><p>如果元素仍然在文档中，那么说明它是一次移动操作，组件实例将被保留；</p></li><li><p>如果该元素不再存在于文档中，那么说明这是一次移除操作，组件实例将被销毁。</p></li></ul></li></ul><h4 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h4><ul><li><p>所有使用 <code>props</code> 选项声明了的 props 都会作为属性定义在该自定义元素上。Vue 会自动地、恰当地处理其作为 attribute 还是属性的反射。</p><ul><li><p>attribute 总是根据需要反射为相应的属性类型。</p></li><li><p>基础类型的属性值 (<code>string</code>，<code>boolean</code> 或 <code>number</code>) 会被反射为 attribute。</p></li></ul></li><li><p>当它们被设为 attribute 时 (永远是字符串)，Vue 也会自动将以 <code>Boolean</code> 或 <code>Number</code> 类型声明的 prop 转换为所期望的类型。比如下面这样的 props 声明：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">selected</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Boolean</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">index</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Number</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>并以下面这样的方式使用自定义元素：</p><div class="language-vue-html"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">selected</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">index</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>在组件中，<code>selected</code> 会被转换为 <code>true</code> (boolean 类型值) 而 <code>index</code> 会被转换为 <code>1</code> (number 类型值)。</p></li></ul><h4 id="events" tabindex="-1">事件 <a class="header-anchor" href="#events" aria-hidden="true">#</a></h4><p>通过 <code>this.$emit</code> 或者 setup 中的 <code>emit</code> 触发的事件都会通过以 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent" target="_blank" rel="noreferrer">CustomEvents</a> 的形式从自定义元素上派发。额外的事件参数 (payload) 将会被暴露为 CustomEvent 对象上的一个 <code>detail</code> 数组。</p><h4 id="slots" tabindex="-1">插槽 <a class="header-anchor" href="#slots" aria-hidden="true">#</a></h4><p>在一个组件中，插槽将会照常使用 <code>&lt;slot/&gt;</code> 渲染。然而，当使用最终的元素时，它只接受<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots" target="_blank" rel="noreferrer">原生插槽的语法</a>：</p><ul><li><p>不支持<a href="/guide/components/slots.html#scoped-slots">作用域插槽</a>。</p></li><li><p>当传递具名插槽时，应使用 <code>slot</code> attribute 而不是 <code>v-slot</code> 指令：</p><div class="language-vue-html"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">named</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">my-element</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div></li></ul><h4 id="provide-inject" tabindex="-1">依赖注入 <a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a></h4><p><a href="/guide/components/provide-inject.html#provide-inject">Provide / Inject API</a> 和<a href="/api/composition-api-dependency-injection.html#provide">相应的组合式 API</a> 在 Vue 定义的自定义元素中都可以正常工作。但是请注意，依赖关系<strong>只在自定义元素之间</strong>起作用。例如一个 Vue 定义的自定义元素就无法注入一个由常规 Vue 组件所提供的属性。</p><h3 id="sfc-as-custom-element" tabindex="-1">将 SFC 编译为自定义元素 <a class="header-anchor" href="#sfc-as-custom-element" aria-hidden="true">#</a></h3><p><code>defineCustomElement</code> 也可以搭配 Vue 单文件组件 (SFC) 使用。但是，根据默认的工具链配置，SFC 中的 <code>&lt;style&gt;</code> 在生产环境构建时仍然会被抽取和合并到一个单独的 CSS 文件中。当正在使用 SFC 编写自定义元素时，通常需要改为注入 <code>&lt;style&gt;</code> 标签到自定义元素的 shadow root 上。</p><p>官方的 SFC 工具链支持以“自定义元素模式”导入 SFC (需要 <code>@vitejs/plugin-vue@^1.4.0</code> 或 <code>vue-loader@^16.5.0</code>)。一个以自定义元素模式加载的 SFC 将会内联其 <code>&lt;style&gt;</code> 标签为 CSS 字符串，并将其暴露为组件的 <code>styles</code> 选项。这会被 <code>defineCustomElement</code> 提取使用，并在初始化时注入到元素的 shadow root 上。</p><p>要开启这个模式，只需要将你的组件文件以 <code>.ce.vue</code> 结尾即可：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Example </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Example.ce.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Example</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">styles) </span><span style="color:#676E95;">// [&quot;/* 内联 css */&quot;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// 转换为自定义元素构造器</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ExampleElement </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#A6ACCD;">(Example)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// 注册</span></span>\n<span class="line"><span style="color:#A6ACCD;">customElements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-example</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ExampleElement)</span></span>\n<span class="line"></span></code></pre></div><p>如果你想要自定义如何判断是否将文件作为自定义元素导入 (例如将所有的 SFC 都视为用作自定义元素)，你可以通过给构建插件传递相应插件的 <code>customElement</code> 选项来实现：</p><ul><li><a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#using-vue-sfcs-as-custom-elements" target="_blank" rel="noreferrer">@vitejs/plugin-vue</a></li><li><a href="https://github.com/vuejs/vue-loader/tree/next#v16-only-options" target="_blank" rel="noreferrer">vue-loader</a></li></ul><h3 id="tips-for-a-vue-custom-elements-library" tabindex="-1">基于 Vue 构建自定义元素库 <a class="header-anchor" href="#tips-for-a-vue-custom-elements-library" aria-hidden="true">#</a></h3><p>当使用 Vue 构建自定义元素时，该元素将依赖于 Vue 的运行时。这会有大约 16kb 的基本打包大小，并视功能的使用情况而增长。这意味着如果只编写一个自定义元素，那么使用 Vue 并不是理想的选择。你可能想要使用原生 JavaScript、<a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">petite-vue</a>，或其他框架以追求更小的运行时体积。但是，如果你需要编写的是一组具有复杂逻辑的自定义元素，那么这个基本体积是非常合理的，因为 Vue 允许用更少的代码编写每个组件。在一起发布的元素越多，收益就会越高。</p><p>如果自定义元素将在同样使用 Vue 的应用中使用，那么你可以选择将构建包中的 Vue 外部化 (externalize)，这样这些自定义元素将与宿主应用使用同一份 Vue。</p><p>建议按元素分别导出构造函数，以便用户可以灵活地按需导入它们，并使用期望的标签名称注册它们。你还可以导出一个函数来方便用户自动注册所有元素。下面是一个 Vue 自定义元素库的入口文件示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./MyFoo.ce.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Bar </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./MyBar.ce.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyFoo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#A6ACCD;">(Foo)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyBar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#A6ACCD;">(Bar)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// 分别导出元素</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyFoo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyBar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">customElements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyFoo</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">customElements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyBar</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>如果你有非常多的组件，你也可以利用构建工具的功能，比如 Vite 的 <a href="https://cn.vitejs.dev/guide/features.html#glob-import" target="_blank" rel="noreferrer">glob 导入</a>或者 webpack 的 <a href="https://webpack.js.org/guides/dependency-management/#requirecontext" target="_blank" rel="noreferrer"><code>require.context</code></a> 来从一个文件夹加载所有的组件。</p><h2 id="web-components-vs-vue-components" tabindex="-1">Web Components vs. Vue 组件 <a class="header-anchor" href="#web-components-vs-vue-components" aria-hidden="true">#</a></h2><p>一些开发者认为应该避免使用框架专有的组件模型，而改为全部使用自定义元素来构建应用，因为这样可以使应用“永不过时”。在这里，我们将解释为什么我们认为这样的想法过于简单。</p><p>自定义元素和 Vue 组件之间确实存在一定程度的功能重叠：它们都允许我们定义具有数据传递、事件发射和生命周期管理的可重用组件。然而，Web Components 的 API 相对来说是更底层的和更基础的。要构建一个实际的应用，我们需要相当多平台没有涵盖的附加功能：</p><ul><li><p>一个声明式的、高效的模板系统；</p></li><li><p>一个响应式的，利于跨组件逻辑提取和重用的状态管理系统；</p></li><li><p>一种在服务器上呈现组件并在客户端“激活”(hydrate) 组件的高性能方法 (SSR)，这对 SEO 和 <a href="https://web.dev/vitals/" target="_blank" rel="noreferrer">LCP 这样的 Web 关键指标</a>非常重要。原生自定义元素 SSR 通常需要在 Node.js 中模拟 DOM，然后序列化更改后的 DOM，而 Vue SSR 则尽可能地将其编译为拼接起来的字符串，这会高效得多。</p></li></ul><p>Vue 的组件模型在设计时同时兼顾了这些需求，因此是一个更内聚的系统。</p><p>当你的团队有足够的技术水平时，可能可以在原生自定义元素的基础上构建具备同等功能的组件。但这也意味着你将承担长期维护内部框架的负担，同时失去了像 Vue 这样成熟的框架生态社区所带来的收益。</p><p>也有一些框架使用自定义元素作为其组件模型的基础，但它们都不可避免地要引入自己的专有解决方案来解决上面列出的问题。使用这些框架便意味着对它们针对这些问题的技术决策买单。不管这类框架怎么宣传它们“永不过时”，它们其实都无法保证你以后永远不需要重构。</p><p>除此之外，我们还发现自定义元素存在以下限制：</p><ul><li><p>贪婪 (eager) 的插槽求值会阻碍组件之间的可组合性。Vue 的<a href="/guide/components/slots.html#scoped-slots">作用域插槽</a>是一套强大的组件组合机制，而由于原生插槽的贪婪求值性质，自定义元素无法支持这样的设计。贪婪求值的插槽也意味着接收组件时不能控制何时或是否创建插槽内容的节点。</p></li><li><p>在当下要想使用 shadow DOM 书写局部作用域的 CSS，必须将样式嵌入到 JavaScript 中才可以在运行时将其注入到 shadow root 上。这也导致了 SSR 场景下需要渲染大量重复的样式标签。虽然有一些<a href="https://github.com/whatwg/html/pull/4898/" target="_blank" rel="noreferrer">平台功能</a>在尝试解决这一领域的问题，但是直到现在还没有达到通用支持的状态，而且仍有生产性能 / SSR 方面的问题需要解决。可与此同时，Vue 的 SFC 本身就提供了 <a href="/api/sfc-css-features.html">CSS 局域化机制</a>，并支持抽取样式到纯 CSS 文件中。</p></li></ul><p>Vue 将始终紧跟 Web 平台的最新标准，如果平台的新功能能让我们的工作变得更简单，我们将非常乐于利用它们。但是，我们的目标是提供“好用，且现在就能用”的解决方案。这意味着我们在采用新的原生功能时需要保持客观、批判性的态度，并在原生功能完成度不足的时候选择更适当的解决方案。</p>',58)];const t=s(p,[["render",function(s,e,l,p,t,c){return n(),a("div",null,o)}]]);export{l as __pageData,t as default};
