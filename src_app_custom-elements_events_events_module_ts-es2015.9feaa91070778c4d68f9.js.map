{"version":3,"sources":["webpack:///src/app/custom-elements/events/events.service.ts","webpack:///src/app/custom-elements/events/events.component.html","webpack:///src/app/custom-elements/events/events.component.ts","webpack:///src/app/custom-elements/events/events.module.ts"],"names":["eventsPath","EventsService","http","logger","this","events","getEvents","get","pipe","catchError","error","Error","message","of","publishLast","connect","MONTHS","EventsComponent","eventsService","subscribe","pastEvents","filter","event","Date","date","end","getTime","now","sort","l","r","isBefore","upcomingEvents","dateString","workshopsDate","mainEventDateString","processDate","workshopsDateString","getUTCFullYear","dates","startDate","start","endDate","processedDate","getUTCMonth","getUTCDate","duration1","duration2","EventsModule","customElementComponent"],"mappings":"+RAUA,MAAMA,EAAa,KAAqB,cAGjC,Y,MAAMC,EAGX,YAAoBC,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,SAC5CC,KAAKC,OAASD,KAAKE,YAGb,YACN,MAAMD,EAASD,KAAKF,KAAKK,IAASP,GAAYQ,MAC5C,EAAAC,EAAA,GAAWC,IACTN,KAAKD,OAAOO,MAAM,IAAIC,MAAM,GAAGX,qBAA8BU,EAAME,aAC5D,EAAAC,MAAG,OAEZ,EAAAC,EAAA,MAGF,OADCT,EAA0CU,UACpCV,G,6CAhBEJ,GAAa,yB,0BAAbA,EAAa,QAAbA,EAAa,Y,GAAnB,G,sBCZP,eACE,aAAG,0EAA8D,QACjE,aAAG,8DAAkD,eAA0C,2BAAe,QAC5G,8BAAiB,eAAsC,wBAAY,QAAI,cAAC,QAC1E,cAAG,kEAAqD,gBAAmC,8BAAiB,QAAI,cAAC,QACnH,S,yBAWI,cACE,cAAI,eAAsD,SAAc,QAAI,QAC5E,cAAI,SAAkB,QACtB,cACE,eACE,SACF,QACF,QACF,S,oCAPS,uCAAyB,yBAA0B,uBACtD,2BAGA,4C,yBAdV,mBACE,iBACE,cACE,cAAI,iBAAK,QACT,cAAI,oBAAQ,QACZ,cAAI,gBAAI,QACV,QACF,QACA,iBACE,uBASF,QACF,S,qBAV0B,6C,yBAwBtB,cACE,cAAI,eAAsD,SAAc,QAAI,QAC5E,cAAI,SAAkB,QACtB,cACE,eACE,SACF,QACF,QACF,S,mCAPS,uCAAyB,yBAA0B,uBACtD,2BAGA,4CC1CV,MACMe,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAsBK,Y,MAAMC,EAKX,YAAoBC,GAAA,KAAAA,gBAEpB,WACEd,KAAKc,cAAcb,OAAOc,UAAUd,IAClCD,KAAKgB,WAAaf,EACbgB,OAAOC,GAAS,IAAIC,KAAKD,EAAME,KAAKC,KAAKC,UAAYH,KAAKI,MA7CzD,OA8CDC,KAAK,CAACC,EAAUC,IAAaC,EAASF,EAAEL,KAAMM,EAAEN,MAAQ,GAAK,GAElEpB,KAAK4B,eAAiB3B,EACjBgB,OAAOC,GAAS,IAAIC,KAAKD,EAAME,KAAKC,KAAKC,WAAaH,KAAKI,MAjD1D,OAkDDC,KAAK,CAACC,EAAUC,IAAaC,EAASF,EAAEL,KAAMM,EAAEN,OAAS,EAAI,KAItE,cAAcF,GACZ,IAAIW,EAGJ,GAAIX,EAAMY,cAAe,CACvB,MAAMC,EAAsB,GAAGC,EAAYd,EAAME,qBAC3Ca,EAAsB,GAAGD,EAAYd,EAAMY,6BAGjDD,EAFgCF,EAAST,EAAMY,cAAeZ,EAAME,MAGhE,GAAGa,MAAwBF,IAC3B,GAAGA,MAAwBE,SAG/BJ,EAAaG,EAAYd,EAAME,MAGjC,OADAS,EAAa,GAAGA,MAAe,IAAIV,KAAKD,EAAME,KAAKC,KAAKa,mBACjDL,G,6CApCEhB,GAAe,W,wBAAfA,EAAe,kTDvC5B,cAAI,sCAA0B,QAC9B,wBAOA,0BAqBA,cAEA,cAAI,uCAA2B,QAC/B,mBACE,iBACE,cACE,eAAI,kBAAK,QACT,eAAI,qBAAQ,QACZ,eAAI,iBAAI,QACV,QACF,QACA,kBACE,uBASF,QACF,S,MAlDM,0EAOwB,2EAiCJ,0C,4CCFnB,GAwCP,SAASmB,EAAYG,GAEnB,MAAMC,EAAY,IAAIjB,KAAKgB,EAAME,OAC3BC,EAAU,IAAInB,KAAKgB,EAAMd,KAG/B,IAAIkB,EAAgB,GAAG3B,EAAOwB,EAAUI,kBAAkBJ,EAAUK,eAUpE,OAPIL,EAAUI,gBAAkBF,EAAQE,cACtCD,EAAgB,GAAGA,OAAmB3B,EAAO0B,EAAQE,kBAAkBF,EAAQG,eACtEL,EAAUK,eAAiBH,EAAQG,eAE5CF,EAAgB,GAAGA,KAAiBD,EAAQG,gBAGvCF,EAGT,SAASZ,EAASe,EAAqBC,GACrC,OAAQD,EAAUL,MAAQM,EAAUN,OAC/BK,EAAUL,QAAUM,EAAUN,OAASK,EAAUrB,IAAMsB,EAAUtB,ICxFjE,Y,MAAMuB,EANb,cAOE,KAAAC,uBAAoChC,G,6CADzB+B,I,wBAAAA,I,6BAFA,CAAE/C,GAAc,SAHlB,CAAE,S,GAKN","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable, of } from 'rxjs';\nimport { catchError, publishLast } from 'rxjs/operators';\n\nimport { Event } from './events.component';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { Logger } from 'app/shared/logger.service';\n\nconst eventsPath = CONTENT_URL_PREFIX + 'events.json';\n\n@Injectable()\nexport class EventsService {\n  events: Observable<Event[]>;\n\n  constructor(private http: HttpClient, private logger: Logger) {\n    this.events = this.getEvents();\n  }\n\n  private getEvents() {\n    const events = this.http.get<any>(eventsPath).pipe(\n      catchError(error => {\n        this.logger.error(new Error(`${eventsPath} request failed: ${error.message}`));\n        return of([]);\n      }),\n      publishLast()\n    );\n    (events as ConnectableObservable<Event[]>).connect();\n    return events;\n  }\n}\n","<h2>Where we'll be presenting:</h2>\n<div *ngIf=\"!upcomingEvents?.length\">\n  <p>We don't have any upcoming speaking engagements at the moment.</p>\n  <p>Until something comes up, make sure you check our <a href=\"https://www.youtube.com/angular\">YouTube channel</a>\n    and follow us on <a href=\"https://twitter.com/angular\">social media</a>.</p>\n  <p>If you want us to be part of your event reach out on <a href=\"mailto:devrel@angular.io\">devrel@angular.io</a>!</p>\n</div>\n\n<table class=\"is-full-width\" *ngIf=\"upcomingEvents?.length\">\n  <thead>\n    <tr>\n      <th>Event</th>\n      <th>Location</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let event of upcomingEvents\">\n      <th><a href=\"{{event.linkUrl}}\" title=\"{{event.tooltip}}\">{{event.name}}</a></th>\n      <td>{{event.location}}</td>\n      <td>\n        <div>\n          {{getEventDates(event)}}\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<br />\n\n<h2>Where we already presented:</h2>\n<table class=\"is-full-width\">\n  <thead>\n    <tr>\n      <th>Event</th>\n      <th>Location</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let event of pastEvents\">\n      <th><a href=\"{{event.linkUrl}}\" title=\"{{event.tooltip}}\">{{event.name}}</a></th>\n      <td>{{event.location}}</td>\n      <td>\n        <div>\n          {{getEventDates(event)}}\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventsService } from './events.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\nconst MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport type date = string; // of the format `YYYY-MM-DD`.\nexport interface Duration {\n  start: date;\n  end: date;\n}\n\nexport interface Event {\n  name: string;\n  location: string;\n  linkUrl: string;\n  tooltip?: string;\n  date: Duration;\n  workshopsDate?: Duration;\n}\n\n@Component({\n  selector: 'aio-events',\n  templateUrl: 'events.component.html'\n})\nexport class EventsComponent implements OnInit {\n\n  pastEvents: Event[];\n  upcomingEvents: Event[];\n\n  constructor(private eventsService: EventsService) { }\n\n  ngOnInit() {\n    this.eventsService.events.subscribe(events => {\n      this.pastEvents = events\n          .filter(event => new Date(event.date.end).getTime() < Date.now() - DAY)\n          .sort((l: Event, r: Event) => isBefore(l.date, r.date) ? 1 : -1);\n\n      this.upcomingEvents = events\n          .filter(event => new Date(event.date.end).getTime() >= Date.now() - DAY)\n          .sort((l: Event, r: Event) => isBefore(l.date, r.date) ? -1 : 1);\n    });\n  }\n\n  getEventDates(event: Event) {\n    let dateString;\n\n    // Check if there is a workshop\n    if (event.workshopsDate) {\n      const mainEventDateString = `${processDate(event.date)} (conference)`;\n      const workshopsDateString = `${processDate(event.workshopsDate)} (workshops)`;\n      const areWorkshopsBeforeEvent = isBefore(event.workshopsDate, event.date);\n\n      dateString = areWorkshopsBeforeEvent ?\n          `${workshopsDateString}, ${mainEventDateString}` :\n          `${mainEventDateString}, ${workshopsDateString}`;\n    } else {\n      // If no work shop date create conference date string\n      dateString = processDate(event.date);\n    }\n    dateString = `${dateString}, ${new Date(event.date.end).getUTCFullYear()}`;\n    return dateString;\n  }\n}\n\nfunction processDate(dates: Duration) {\n  // Covert Date sting to date object for comparisons\n  const startDate = new Date(dates.start);\n  const endDate = new Date(dates.end);\n\n  // Create a date string in the start like January 31\n  let processedDate = `${MONTHS[startDate.getUTCMonth()]} ${startDate.getUTCDate()}`;\n\n  // If they are in different months add the string '- February 2' Making the final string January 31 - February 2\n  if (startDate.getUTCMonth() !== endDate.getUTCMonth()) {\n    processedDate = `${processedDate} - ${MONTHS[endDate.getUTCMonth()]} ${endDate.getUTCDate()}`;\n  } else if (startDate.getUTCDate() !== endDate.getUTCDate()) {\n    // If not add - date eg it will make // January 30-31\n    processedDate = `${processedDate}-${endDate.getUTCDate()}`;\n  }\n\n  return processedDate;\n}\n\nfunction isBefore(duration1: Duration, duration2: Duration): boolean {\n  return (duration1.start < duration2.start) ||\n      (duration1.start === duration2.start && duration1.end < duration2.end);\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EventsComponent } from './events.component';\nimport { EventsService } from './events.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ EventsComponent ],\n  entryComponents: [ EventsComponent ],\n  providers: [ EventsService]\n})\nexport class EventsModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = EventsComponent;\n}\n"]}