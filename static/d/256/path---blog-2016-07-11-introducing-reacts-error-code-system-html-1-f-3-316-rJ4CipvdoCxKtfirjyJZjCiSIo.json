{"data":{"markdownRemark":{"html":"<p>营造更好的开发者体验一直是 React 十分关心的事之一，而其中很重要的部分就是可以及早察觉反模式或潜在的错误并给出有用的提示。但是，这些大都只会在开发环境里看到。在生产环境中，为了减少字节发送的数量，我们尽量避免出现多余的断言以及完整的错误提示。</p>\n<p>在此发布版之前，我们会在构建时去除错误提示，这就是为什么你会在生产环境中看到这样的提示：</p>\n<blockquote>\n<p>Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.</p>\n</blockquote>\n<p>为了简化生产环境的调试，我们将在 <a href=\"https://github.com/facebook/react/releases/tag/v15.2.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">15.2.0</a> 推出错误代码系统。我们开发了一个 <a href=\"https://github.com/facebook/react/blob/master/scripts/error-codes/gulp-extract-errors.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gulp 脚本</a>来集合所有 <code class=\"gatsby-code-text\">invariant</code> 错误提示然后转化为一个 <a href=\"https://github.com/facebook/react/blob/master/scripts/error-codes/codes.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON 文件</a>。在打包时 Babel 会用这个 JSON 来对照与其对应的错误 ID 然后<a href=\"https://github.com/facebook/react/blob/master/scripts/error-codes/replace-invariant-error-codes.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">重写</a>所有生产环境中 <code class=\"gatsby-code-text\">invariant</code> 错误提示。当生产环境中出现问题时，React 显示的错误提示将会包含一个附有错误 ID 以及相关讯息的 URL。这个 URL 将带你到我们文档中的一页来去看原本错误提示的重组。</p>\n<p>虽然我们不预期你会经常看到错误提示，但你可以到<a href=\"/docs/error-decoder.html?invariant=109&#x26;args%5B%5D=Foo\">这里</a>去参考它的运作方式。以上同样的错误提示会被显示为：</p>\n<blockquote>\n<p>Minified React error #109; visit <a href=\"/docs/error-decoder.html?invariant=109&#x26;args%5B%5D=Foo\">https://reactjs.org/docs/error-decoder.html?invariant=109&#x26;args[]=Foo</a> for the full message or use the non-minified dev environment for full errors and additional helpful warnings.</p>\n</blockquote>\n<p>我们这样做是为了让开发者的体验越来越好，同时尽可能的不扩大生产环境的 bundle 尺寸。此功能不需要你做任何改变 —— 只要在生产环境中用 <code class=\"gatsby-code-text\">min.js</code> 或用 <code class=\"gatsby-code-text\">process.env.NODE_ENV === &#39;production&#39;</code> 来打包你的应用程序就可以了!</p>","excerpt":"营造更好的开发者体验一直是 React 十分关心的事之一，而其中很重要的部分就是可以及早察觉反模式或潜在的错误并给出有用的提示。但是，这些大都只会在开发环境里看到。在生产环境中，为了减少字节发送的数量，我们尽量避免出现多余的断言以及完整的错误提示。 在此发布版之前，我们会在构建时去除错误提示，这就是为什么你会在生产环境中看到这样的提示： Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings. 为了简化生产环境的调试，我们将在  15.2.0  推出错误代码系统。我们开发了一个  gulp 脚本 来集合所有   错误提示然后转化为一个  JSON 文件 。在打包时 Babel 会用这个 JSON 来对照与其对应的错误 ID 然后 重写 所有生产环境中   错误提示。当生产环境中出现问题时，React 显示的错误提示将会包含一个附有错误 ID 以及相关讯息的 URL。这个 URL…","frontmatter":{"title":"推出 React 错误代码系统","next":null,"prev":null,"author":[{"frontmatter":{"name":"Keyan Zhang","url":"https://twitter.com/keyanzhang"}}]},"fields":{"date":"July 11, 2016","path":"content/blog/2016-07-11-introducing-reacts-error-code-system.md","slug":"/blog/2016/07/11/introducing-reacts-error-code-system.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Building Great User Experiences with Concurrent Mode and Suspense"},"fields":{"slug":"/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html"}}},{"node":{"frontmatter":{"title":"使用 React 预发布版为新功能打基础"},"fields":{"slug":"/blog/2019/10/22/react-release-channels.html"}}},{"node":{"frontmatter":{"title":"全新的 React DevTools 简介"},"fields":{"slug":"/blog/2019/08/15/new-react-devtools.html"}}},{"node":{"frontmatter":{"title":"React v16.9.0 发布及 Roadmap 最新进展"},"fields":{"slug":"/blog/2019/08/08/react-v16.9.0.html"}}},{"node":{"frontmatter":{"title":"Is React Translated Yet? ¡Sí! Sim! はい！"},"fields":{"slug":"/blog/2019/02/23/is-react-translated-yet.html"}}},{"node":{"frontmatter":{"title":"React v16.8：Hook 发布"},"fields":{"slug":"/blog/2019/02/06/react-v16.8.0.html"}}},{"node":{"frontmatter":{"title":"React v16.7: No, This Is Not the One With Hooks"},"fields":{"slug":"/blog/2018/12/19/react-v-16-7.html"}}},{"node":{"frontmatter":{"title":"React 16.x Roadmap"},"fields":{"slug":"/blog/2018/11/27/react-16-roadmap.html"}}},{"node":{"frontmatter":{"title":"React Conf 会议纪要：Hook，Suspense 和 Concurrent Rendering"},"fields":{"slug":"/blog/2018/11/13/react-conf-recap.html"}}},{"node":{"frontmatter":{"title":"React v16.6.0: lazy, memo and contextType"},"fields":{"slug":"/blog/2018/10/23/react-v-16-6.html"}}}]}},"pageContext":{"slug":"/blog/2016/07/11/introducing-reacts-error-code-system.html"}}