{"version":3,"file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.97103fe01ea72bda.js","mappings":"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","names":["PendingCopy","constructor","text","_document","this","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","readOnly","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","ɵfac","i0","DOCUMENT","ɵprov","factory","CodeComponent","snackbar","pretty","clipboard","logger","EventEmitter","code","_code","toString","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabel","ngOnChanges","linenums","getLinenums","leftAlignedCode","leftAlign","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","htmlSafeByReview","map","slice","join","setCodeHtml","codeText","getCodeText","skipPrettify","of","prettifyCode","formatCode","language","pipe","tap","formattedCode","warn","subscribe","next","codeFormatted","emit","error","src","path","region","msg","el","className","textContent","fromOuterHTML","codeContainer","nativeElement","innerHTML","unwrapHtml","doCopy","log","open","duration","Error","parseInt","isNaN","static","core","selectors","CodeModule","PrettyPrinter","imports","CommonModule","MatSnackBarModule","prettyPrintOne","from","getPrettyPrintOne","share","ppo","window","Promise","resolve","__webpack_require__","then","err","message","console","first","_angular_core__WEBPACK_IMPORTED_MODULE_6__","Portal","attach","host","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","super","TemplatePortal","templateRef","context","origin","elementRef","DomPortal","element","ElementRef","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","createComment","parentNode","insertBefore","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","create","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","detectChanges","index","indexOf","CdkPortal","ɵdir","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","clear","nodeType","ELEMENT_NODE","PortalModule","ɵmod","ɵinj","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","_isEnabled","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","i1","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","splice","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","onDestroy","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","requestAnimationFrame","nextSibling","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","filter","c","subscription","takeUntil","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","Element","destination","source","hasOwnProperty","input","units","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_animationsModuleType","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","get","ApplicationRef","i5","i6","ANIMATION_MODULE_TYPE","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","BidiModule","ScrollingModule","_r2","ctx_r1","ctx_r0","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵcmp","ctx","i2","i3","matSnackBarAnimations","snackBarState","trigger","state","transition","animate","_MatSnackBarContainerBase","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","_assertNotAttached","result","_afterPortalAttached","_live","FIREFOX","_role","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","HTMLElement","removeAttribute","viewQuery","_t","MatSnackBarContainer","t","decls","i3$1","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","template","simpleSnackBarComponent","_attachSnackBarContainer","providers","useValue","containerPortal","snackBarContainerComponent","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","$implicit","_createInjector","contentRef","observe","Breakpoints","toggle","handsetCssClass","matches","announce","_animateSnackBar","isLeft","isRight","i2$1","i3$2","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2020/clipboard.mjs","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./node_modules/@angular/cdk/fesm2020/portal.mjs","./node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Clipboard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCopyToClipboard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }]; }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ClipboardModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { unwrapHtml } from 'safevalues';\nimport { htmlSafeByReview } from 'safevalues/restricted/reviewed';\nimport { fromOuterHTML } from 'app/shared/security';\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: TrustedHTML) {\n    this._code = code;\n\n    if (!this._code.toString().trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): TrustedHTML {\n    return this._code;\n  }\n  _code: TrustedHTML;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | undefined;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string | undefined;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | undefined) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string|undefined { return this._header; }\n  private _header: string | undefined;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private clipboard: Clipboard,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const linenums = this.getLinenums();\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    const skipPrettify = of(undefined);\n    const prettifyCode = this.pretty\n        .formatCode(leftAlignedCode, this.language, linenums)\n        .pipe(tap(formattedCode => this.setCodeHtml(formattedCode)));\n\n    if (linenums !== false && this.language === 'none') {\n      this.logger.warn(\"Using 'linenums' with 'language: none' is currently not supported.\");\n    }\n\n    ((this.language === 'none' ? skipPrettify : prettifyCode) as Observable<unknown>)\n        .subscribe({\n          next: () => this.codeFormatted.emit(),\n          error: () => { /* ignore failure to format */ },\n        });\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const msg = `The code sample is missing${src ? ` for\\n${src}` : '.'}`;\n    const el = document.createElement('p');\n    el.className = 'code-missing';\n    el.textContent = msg;\n    this.setCodeHtml(fromOuterHTML(el));\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: TrustedHTML) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = unwrapHtml(formattedCode);\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.clipboard.copy(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums() {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    return (linenums != null) && !isNaN(linenums as number) && linenums;\n  }\n}\n\nfunction leftAlign(text: TrustedHTML): TrustedHTML {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.toString().split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return htmlSafeByReview(\n      lines.map(line => line.slice(indent)).join('\\n').trim(),\n      'safe manipulation of existing trusted HTML');\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\nimport { htmlSafeByReview } from 'safevalues/restricted/reviewed';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: TrustedHTML, language?: string, linenums?: number|boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML.\n   *\n   * @param code - the code snippet to format; should already be HTML encoded\n   * @param [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: TrustedHTML, language?: string, linenums?: number|boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return htmlSafeByReview(\n              ppo(code, language, linenums), 'prettify.js modifies already trusted HTML inline');\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.toString().slice(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"x_google_ignoreList":[0,4,5,6]}