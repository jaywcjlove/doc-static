{"version":3,"sources":["webpack://typescriptlang-org/./src/templates/tsconfigReference.tsx"],"names":["TSConfigReferenceTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","console","log","JSON","stringify","useEffect","calculateOffset","target","subnav","offset","offsetTop","window","getComputedStyle","position","clientHeight","document","querySelectorAll","forEach","link","addEventListener","event","preventDefault","hash","querySelector","search","parentElement","tagName","scrollTo","top","behavior","scrollToHash","history","pushState","subnavs","updateSidebar","fromTop","scrollY","currentPossibleAnchor","subnavLinks","section","classList","add","remove","passive","capture","removeEventListener","anchor","sectionName","prefixes","showCategories","categories","className","href","map","c","key","display","id","aria-labelledby","options","o","name","opt","index","indexOf","length","pageContext","root","filter","watch","typeAcq","skip","compilerOpts","includes","useState","openInfo","setOpenInfo","title","description","lang","locale","onClick","width","height","viewBox","fill","xmlns","d","stroke","intro","header","preview","dangerouslySetInnerHTML","__html","html"],"mappings":"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","file":"component---src-templates-tsconfig-reference-tsx-a59eddb1a468e9b14120.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./tsconfig.scss\"\n\ntype Category = { anchor: string, display: string, options: Array<{ anchor: string, name: string }> }\n\ntype Props = {\n  pageContext: {\n    categories: Category[],\n    tsconfigMDPath: string,\n    intro: {\n      html: string\n      header: string\n      preview: string\n    },\n    locale: string\n  },\n  data: GatsbyTypes.TSConfigReferenceTemplateQuery,\n  path: string\n}\n\nconst TSConfigReferenceTemplateComponent = (props: Props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    const calculateOffset = (\n      target: HTMLElement,\n      subnav: HTMLElement | null\n    ) => {\n      let offset = target.offsetTop\n      if (subnav) {\n        // Subtract height of subnav if \"position: sticky\" is active\n        const style = window.getComputedStyle(subnav)\n        if (style.position === \"sticky\") {\n          offset -= subnav.clientHeight\n        }\n      }\n      return offset\n    }\n\n    const scrollToHash = (hash: string) => {\n      if (hash === \"#\") return\n      const target = document.querySelector<HTMLElement>(hash)\n      if (!target) return\n\n      // Search for subnav if the target is a descendant of <article>\n      let search = target\n      let subnav: HTMLElement | null = null\n      while (search.parentElement) {\n        search = search.parentElement\n        if (search.tagName === \"ARTICLE\") {\n          subnav = search.querySelector(\"nav\")\n          break\n        }\n      }\n\n      // Smooth scroll to the target\n      const offset = calculateOffset(target, subnav)\n      if (!offset) return\n      window.scrollTo({\n        top: offset,\n        behavior: \"smooth\",\n      })\n    }\n\n    // Overrides the anchor behavior to smooth scroll instead\n    const hashLinks = document.querySelectorAll<HTMLAnchorElement>(\n      \".tsconfig a[href^='#']\"\n    )\n    hashLinks.forEach(link => {\n      link.addEventListener(\"click\", (event: MouseEvent) => {\n        event.preventDefault()\n        scrollToHash(link.hash)\n\n        // Update URL without triggering default scroll behavior\n        window.history.pushState(null, \"\", link.hash)\n      })\n    })\n\n    // Sets the current selection\n    // Based on https://css-tricks.com/sticky-smooth-active-nav/\n    const subnavs = document.querySelectorAll<HTMLElement>(\n      \".tsconfig article nav\"\n    )\n    const updateSidebar = () => {\n      const fromTop = window.scrollY\n\n      subnavs.forEach(subnav => {\n        const subnavLinks = subnav.querySelectorAll<HTMLAnchorElement>(\n          \"a[href^='#']\"\n        )\n        let currentPossibleAnchor: HTMLAnchorElement | undefined\n\n        // Scroll down to find the highest anchor on the screen\n        subnavLinks.forEach(link => {\n          const section = document.querySelector<HTMLElement>(link.hash)\n          if (!section) return\n          const offset = calculateOffset(section, subnav)\n          const isBelow = offset - 100 <= fromTop\n          if (isBelow) currentPossibleAnchor = link\n        })\n\n        // Then set the active tag\n        subnavLinks.forEach(link => {\n          if (link === currentPossibleAnchor) {\n            link.classList.add(\"current\")\n          } else {\n            link.classList.remove(\"current\")\n          }\n        })\n      })\n    }\n\n    // Handles setting the scroll \n    window.addEventListener(\"scroll\", updateSidebar, { passive: true, capture: true });\n    updateSidebar()\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateSidebar)\n    }\n  }, [])\n\n  const joiner = (options: any[], opt: any) => {\n    const index = options.indexOf(opt)\n    if (index === options.length - 1) return null\n    return (index === options.length - 2) ? (<span> and </span>) : <span>, </span>\n  }\n\n  const anchor = (sectionName: string | undefined, anchor: string) => {\n    const prefixes = {\n      \"watchOptions\": \"watch\",\n      \"typeAcquisition\": \"type\"\n    }\n    if (!sectionName || !prefixes[sectionName]) return \"#\" + anchor\n    return `#${prefixes[sectionName]}-${anchor}`\n  }\n\n  const showCategories = (categories: Category[], sectionName?: string) => {\n    return <div className={sectionName ? \"tsconfig-quick-nav grouped\" : \"tsconfig-quick-nav\"}>\n      {sectionName ? <h4><code><a href={`#${sectionName}`}>\"{sectionName}\"</a></code></h4> : <div />}\n      {\n        categories.map(c => <div className=\"tsconfig-quick-nav-category\" key={c.display}>\n          <h5 id={`quick-nav-${c.anchor}`}>{c.display}</h5>\n          <ol aria-labelledby={`quick-nav-${c.anchor}`}>\n            {c.options.map(o => <li key={o.name}><code><a href={anchor(sectionName, o.anchor)}>{o.anchor}</a>{joiner(c.options, o)}</code></li>)}\n          </ol>\n        </div>)\n      }\n    </div >\n  }\n  const categories = props.pageContext.categories\n\n  const root = categories.filter(c => c.anchor === \"Top Level\")\n  const watch = categories.filter(c => c.anchor === \"watchOptions\")\n  const typeAcq = categories.filter(c => c.anchor === \"typeAcquisition\")\n  const skip = [\"Top Level\", \"watchOptions\", \"typeAcquisition\"]\n  const compilerOpts = categories.filter(c => !skip.includes(c.anchor))\n\n  const [openInfo, setOpenInfo] = useState(false)\n  const toggleInfoState = () => setOpenInfo(!openInfo)\n\n\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n\n      <div className={`tsconfig raised main-content-block markdown button ${openInfo ? \"open\" : \"closed\"}`} >\n        <a href=\"#\" onClick={toggleInfoState}>\n          <h2>\n            <svg width=\"22\" height=\"13\" viewBox=\"0 0 22 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M0.5 1L11 11.5L21.5 1\" stroke=\"black\" />\n            </svg>\n            {props.pageContext.intro.header}</h2>\n          {!openInfo && <div className=\"preview\">{props.pageContext.intro.preview}</div>}\n        </a>\n\n        {openInfo && <div className=\"content\">  <div dangerouslySetInnerHTML={{ __html: props.pageContext.intro.html }} /></div>}\n      </div>\n\n      <div className=\"tsconfig main-content-block\">\n        <h2>Compiler Options</h2>\n        {showCategories(root)}\n        {showCategories(compilerOpts, \"compilerOptions\")}\n        {showCategories(watch, \"watchOptions\")}\n        {showCategories(typeAcq, \"typeAcquisition\")}\n      </div>\n\n\n      <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n\n    </Layout >\n  )\n}\n\n\nexport const pageQuery = graphql`\nquery TSConfigReferenceTemplate($tsconfigMDPath: String!) {\n\n  markdownRemark(fileAbsolutePath: {eq: $tsconfigMDPath} ) {\n    id\n    html\n    frontmatter {\n      permalink\n    }\n  }\n}\n`\n\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><TSConfigReferenceTemplateComponent {...props} /></Intl>\n"],"sourceRoot":""}