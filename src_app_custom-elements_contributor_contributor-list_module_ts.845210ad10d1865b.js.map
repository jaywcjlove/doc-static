{"version":3,"file":"src_app_custom-elements_contributor_contributor-list_module_ts.845210ad10d1865b.js","mappings":"0QAWA,MAAMA,EAAmBC,KAAqB,oBACxCC,EAAc,CAAC,UAAW,gBAAiB,OAG3C,MAAOC,EAGXC,YAAoBC,eAClBC,KAAKC,aAAeD,KAAKE,iBAC3B,CAEQA,kBACN,MAAMD,EAAeD,KAAKD,KAAKI,IAAkCT,GAAkBU,QAEjFC,KAAIC,IACF,MAAMC,EAA+C,GACrDC,cAAOC,KAAKH,GAAUI,QAAQC,IAC5B,MAAMC,EAAcN,EAASK,GAC7BC,EAAYC,OAAOH,QAAQI,KACJP,EAAWO,KAAWP,EAAWO,GAAS,KAClDC,KAAKH,EAAW,EAC9B,GAGIL,KACR,EAGDF,KAAIW,GAAQR,OAAOC,KAAKO,GAAMX,IAAIM,IAC9B,MAAMM,EAAQrB,EAAYsB,QAAQP,GAClC,MAAO,CACLQ,KAAMR,EACNM,OAAiB,IAAVA,EAAerB,EAAYwB,OAASH,EAC3ChB,aAAce,EAAKL,GAAKU,KAAKC,MAGhCD,KAAKE,KAAc,EAGtBC,QAGDvB,SAA2DwB,UACrDxB,CACT,CAACyB,kDAxCU7B,GAAkB8B,oDAAlB9B,EAAkB+B,QAAlB/B,EAAkB,YA2C/B,SAASyB,EAAoBO,EAAgBC,GAC5C,OAAOD,EAAEV,KAAKY,cAAgBD,EAAEX,KAAKY,cAAgB,GAAI,CAC1D,CAEA,SAASR,EAAcM,EAAqBC,GAC1C,OAAOD,EAAEZ,QAAUa,EAAEb,MAClBY,EAAEV,KAAOW,EAAEX,KAAO,GAAI,EACtBU,EAAEZ,MAAQa,EAAEb,MAAQ,GAAI,CAC7B,wCCxDMe,iBACAA,iBACAA,8BADwCA,oCAAnCA,4EAKHA,eAGoBA,iCAASC,mBAAwB,GACjDD,uBACJA,8BAJIA,mDACAA,yFAIJA,gBAE6CA,iCAASC,mBAAwB,GAC3ED,uBAA4BA,gBAAIA,gCAFhCA,mDACAA,sCAOL,MAAOE,EA1BbpC,cA4BEE,iBAAcL,KAAqB,eACpC+B,kDAHYQ,EAAoB,sCAApBA,EAAoBC,wvBAvB7BH,qBAEEA,uBAGAA,gBAAmEA,SAAeA,QAClFA,eAA2BA,SAAcA,QACzCA,iBACEA,qBAMAA,qBAKFA,iBAnBgCA,oCAChCA,6DACMA,wCAGFA,yDAA+DA,8BACxCA,6BAErBA,wCAMAA,6HCbNA,oBAGIA,qEAASA,uBAAiB,GAAEA,SAAQA,8CADpCA,2CAC4BA,wCAI9BA,kCACIA,qDAHRA,qBAAkD,WAE9CA,mCAEFA,gCAFsCA,wDAMtC,MAAOI,EAKXtC,YACUuC,EACAC,GADAtC,0BACAA,sBAAoC,CAE9CuC,WACE,MAAMC,EAAaxC,KAAKsC,gBAAgBG,SAAS3B,OAAS,GAE1Dd,KAAKqC,mBAAmBpC,aACrByC,UAAUC,IACT3C,KAAKa,OAAS8B,EACd3C,KAAK4C,WAAaD,EAAKtC,IAAIwC,GAAKA,EAAE1B,MAClCnB,KAAK8C,YAAYN,EAAS,EAEhC,CAEAM,YAAY3B,GACVA,EAAOA,EAAK4B,cACZ/C,KAAKgD,cAAgBhD,KAAKa,OAAOoC,KAAKJ,GAAKA,EAAE1B,KAAK4B,gBAAkB5B,IAASnB,KAAKa,OAAO,GACzFb,KAAKsC,gBAAgBY,UAAU,GAAI,CAACpC,MAAOd,KAAKgD,cAAc7B,MAChE,CAACO,kDAxBUU,GAAwBT,0DAAxBS,EAAwBD,4XAdjCH,iBACEA,0BAIFA,QACAA,kCAL2BA,uCAKjBA,sFCDR,MAAOmB,EALbrD,cAMEE,4BAAoCoC,EACrCV,kDAFYyB,EAAqB,sCAArBA,IAAqBzB,yCAFrB,CAAE7B,GAAoBuD,SAFtBC,KAAcC","names":["contributorsPath","CONTENT_URL_PREFIX","knownGroups","ContributorService","constructor","http","this","contributors","getContributors","get","pipe","map","contribs","contribMap","Object","keys","forEach","key","contributor","groups","group","push","cmap","order","indexOf","name","length","sort","compareContributors","compareGroups","publishLast","connect","static","core","factory","l","r","toUpperCase","i0","$event","ContributorComponent","selectors","ContributorListComponent","contributorService","locationService","ngOnInit","groupName","search","subscribe","grps","groupNames","g","selectGroup","toLowerCase","selectedGroup","find","setSearch","ContributorListModule","imports","CommonModule","MatIconModule"],"sourceRoot":"webpack:///","sources":["./src/app/custom-elements/contributor/contributor.service.ts","./src/app/custom-elements/contributor/contributor.component.ts","./src/app/custom-elements/contributor/contributor-list.component.ts","./src/app/custom-elements/contributor/contributor-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { map, publishLast } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Angular', 'Collaborators', 'GDE'];\n\n@Injectable()\nexport class ContributorService {\n  contributors: Observable<ContributorGroup[]>;\n\n  constructor(private http: HttpClient) {\n    this.contributors = this.getContributors();\n  }\n\n  private getContributors() {\n    const contributors = this.http.get<{[key: string]: Contributor}>(contributorsPath).pipe(\n      // Create group map\n      map(contribs => {\n        const contribMap: { [name: string]: Contributor[]} = {};\n        Object.keys(contribs).forEach(key => {\n          const contributor = contribs[key];\n          contributor.groups.forEach(group => {\n            const contribGroup = contribMap[group] || (contribMap[group] = []);\n            contribGroup.push(contributor);\n          });\n        });\n\n        return contribMap;\n      }),\n\n      // Flatten group map into sorted group array of sorted contributors\n      map(cmap => Object.keys(cmap).map(key => {\n          const order = knownGroups.indexOf(key);\n          return {\n            name: key,\n            order: order === -1 ? knownGroups.length : order,\n            contributors: cmap[key].sort(compareContributors)\n          } as ContributorGroup;\n        })\n        .sort(compareGroups)\n      ),\n\n      publishLast(),\n    );\n\n    (contributors as ConnectableObservable<ContributorGroup[]>).connect();\n    return contributors;\n  }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n  return l.order === r.order ?\n    (l.name > r.name ? 1 : -1) :\n     l.order > r.order ? 1 : -1;\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n  selector: 'aio-contributor',\n  template: `\n    <section class=\"contributor-card\" [class.no-image]=\"!person.picture\"\n      attr.aria-labelledby=\"{{person.name}}-section-heading\">\n      <div *ngIf=\"person.picture\" class=\"contributor-image-wrapper\">\n      <img [src]=\"pictureBase+person.picture\" alt=\"{{person.name}}\" class=\"contributor-image\">\n      </div>\n      <h3 id=\"{{person.name}}-section-heading\" class=\"contributor-title\">{{person.name}}</h3>\n      <p class=\"contributor-bio\">{{person.bio}}</p>\n      <div class=\"contributor-social-links\">\n        <a *ngIf=\"person.twitter\" mat-icon-button class=\"info-item icon contributor-social\"\n            attr.aria-label=\"twitter of {{person.name}}\"\n            href=\"https://twitter.com/{{person.twitter}}\"\n            target=\"_blank\" (click)=\"$event.stopPropagation()\">\n            <mat-icon svgIcon=\"logos:twitter\"></mat-icon>\n        </a>\n        <a *ngIf=\"person.website\" mat-icon-button class=\"info-item icon\"\n           attr.aria-label=\"website of {{person.name}}\"\n           href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n           <mat-icon class=\"link-icon\">link</mat-icon>\n        </a>\n      </div>\n    </section>\n  `\n})\nexport class ContributorComponent {\n  @Input() person: Contributor;\n  pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\n\n@Component({\n  selector: 'aio-contributor-list',\n  template: `\n    <div class=\"flex-center group-buttons\">\n      <button *ngFor=\"let name of groupNames\"\n          class=\"button mat-button filter-button\"\n          [class.selected]=\"name === selectedGroup.name\"\n          (click)=\"selectGroup(name)\">{{name}}</button>\n    </div>\n    <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n      <div class=\"contributor-group\">\n        <aio-contributor *ngFor=\"let person of selectedGroup.contributors\"\n            [person]=\"person\"></aio-contributor>\n      </div>\n    </section>\n  `,\n})\nexport class ContributorListComponent implements OnInit {\n  private groups: ContributorGroup[];\n  groupNames: string[];\n  selectedGroup: ContributorGroup;\n\n  constructor(\n    private contributorService: ContributorService,\n    private locationService: LocationService) { }\n\n  ngOnInit() {\n    const groupName =  this.locationService.search().group || '';\n    // no need to unsubscribe because `contributors` completes\n    this.contributorService.contributors\n      .subscribe(grps => {\n        this.groups = grps;\n        this.groupNames = grps.map(g => g.name);\n        this.selectGroup(groupName);\n      });\n  }\n\n  selectGroup(name: string) {\n    name = name.toLowerCase();\n    this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n    this.locationService.setSearch('', {group: this.selectedGroup.name});\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule, MatIconModule ],\n  declarations: [ ContributorListComponent, ContributorComponent ],\n  providers: [ ContributorService ]\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ContributorListComponent;\n}\n"],"x_google_ignoreList":[]}