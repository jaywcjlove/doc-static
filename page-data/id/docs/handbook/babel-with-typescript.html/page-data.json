{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/babel-with-typescript.html","result":{"data":{"markdownRemark":{"id":"e19cbd37-e98a-52de-b0e9-ab31fc04843e","excerpt":"Babel vs tsc untuk TypeScript Ketika membuat proyek JavaScript modern, anda mungkin bertanya pada dirimu sendiri, apa cara yang benar untuk mengkonversi berkas…","html":"<h2 id=\"babel-vs-tsc-untuk-typescript\" style=\"position:relative;\"><a href=\"#babel-vs-tsc-untuk-typescript\" aria-label=\"babel vs tsc untuk typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel vs <code>tsc</code> untuk TypeScript</h2>\n<p>Ketika membuat proyek JavaScript modern, anda mungkin bertanya pada dirimu sendiri, apa cara yang benar untuk mengkonversi berkas-berkas dari TypeScript ke JavaScript.</p>\n<p>Sering kali jawabannya adalah <em>“tergantung”</em>, atau <em>“seseorang mungkin telah memutuskan untukmu”</em> bergantung pada proyeknya. Jika anda membangun proyekmu dengan <em>framework</em> yang sudah ada, seperti <a href=\"https://tsdx.io\">tsdx</a>, <a href=\"https://angular.io/\">Angular</a>, <a href=\"https://nestjs.com/\">NestJS</a> atau <em>framework</em> apapun yang disebutkan di <a href=\"/docs/home\"><em>Getting Started</em></a>.</p>\n<p>Namun, <em>heuristic</em> yang berguna bisa jadi:</p>\n<ul>\n<li>Apakah keluaran dari <em>build</em>-mu sebagian besar sama seperti berkas-berkas yang di-<em>input</em>-kan? Jika iya, maka gunakan <code>tsc</code></li>\n<li>Apakah anda butuh build pipeline dengan output yang memiliki beberapa potensi? Jika iya, maka gunakan <code>babel</code> untuk <em>transpiling</em> dan <code>tsc</code> untuk pemeriksaan tipe</li>\n</ul>\n<h2 id=\"babel-untuk-transpiling-tsc-untuk-tipe\" style=\"position:relative;\"><a href=\"#babel-untuk-transpiling-tsc-untuk-tipe\" aria-label=\"babel untuk transpiling tsc untuk tipe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel untuk transpiling, <code>tsc</code> untuk tipe</h2>\n<p>Ini adalah pola umum untuk proyek dengan infrastruktur build yang ada, yang mungkin telah ditransfer dari kode JavaScript ke TypeScript.</p>\n<p>Teknik ini adalah pendekatan <em>hybrid</em>, menggunakan <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\">preset-typescript</a> Babel untuk menghasilkan berkas-berkas JS mu, dan kemudian menggunakan TypeScript untuk pemeriksaan tipe dan pembuatan berkas <code>.d.ts</code></p>\n<p>Dengan menggunakan dukungan Babel untuk TypeScript, anda mendapatkan kemampuan untuk bekerja pada <em>pipeline build</em> yang sudah ada dan lebih seperti memiliki JS yang lebih cepat, karena Babel tidak melakukan pemeriksaan tipe pada kodemu</p>\n<h4 id=\"pemeriksaan-tipe-dan-menghasilkan-berkas-dts\" style=\"position:relative;\"><a href=\"#pemeriksaan-tipe-dan-menghasilkan-berkas-dts\" aria-label=\"pemeriksaan tipe dan menghasilkan berkas dts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pemeriksaan Tipe dan menghasilkan berkas d.ts</h4>\n<p>Kelemahan menggunakan Babel adalah Anda tidak mendapatkan pemeriksaan tipe selama transisi dari TS ke JS. Ini berarti bahwa kesalahan tipe yang Anda lewatkan di editor-mu dapat menyusup ke dalam kode saat fase produksi.</p>\n<p>Selain itu, Babel tidak dapat membuat berkas <code>.d.ts</code> untuk TypeScript-mu yang dapat mempersulit pengerjaan proyekmu jika itu adalah sebuah pustaka.</p>\n<p>Untuk mengatasi hal tersebut, Anda perlu melakukan set up perintah untuk memeriksa tipe pada proyekmu menggunakan TSC. Ini seperti menduplikasi beberapa konfigurasi babel menjadi sesuai dengan <code>tsconfig.json</code>](/tconfig) dan memastikan bahwa <em>flags</em> ini aktif:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Memastikan bahwa berkas-berkas .d.ts dibuat oleh tsc, bukan berkas .js</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#emitDeclarationOnly'><data-lsp lsp=\"Only output d.ts files and not JavaScript files.\">emitDeclarationOnly</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Memastikan bahwa Babel secara aman dapat men-transpile berkas-berkas di proyek TypeScript</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#isolatedModules'><data-lsp lsp=\"Ensure that each file can be safely transpiled without relying on other imports.\">isolatedModules</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Informasi lebih lanjut mengenai <em>flags</em> tersebut:</p>\n<ul>\n<li><a href=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></a></li>\n<li><a href=\"/tsconfig#declaration\"><code>declaration</code></a>, <a href=\"/tsconfig#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></li>\n</ul>","headings":[{"value":"Babel vs tsc untuk TypeScript","depth":2},{"value":"Babel untuk transpiling, tsc untuk tipe","depth":2},{"value":"Pemeriksaan Tipe dan menghasilkan berkas d.ts","depth":4}],"frontmatter":{"permalink":"/id/docs/handbook/babel-with-typescript.html","title":"Menggunakan Babel dengan TypeScript","disable_toc":null,"handbook":null,"oneline":"Cara membuat proyek hybrid Babel + TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"3menggunakan-babel-dengan-typescript","slug":"/id/docs/handbook/babel-with-typescript.html","repoPath":"/packages/documentation/copy/id/tutorials/Babel with TypeScript.md","lang":"id","modifiedTime":"2020-11-23T10:39:15.627Z"}},"staticQueryHashes":[]}