{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/iterators-and-generators.html","result":{"data":{"markdownRemark":{"id":"272facbf-d95c-57d3-bf7a-49da22a2e17b","excerpt":"Iterasi Sebuah objek dapat dilakukan perulangan jika memiliki properti Symbol.iterator.\nBeberapa tipe bawaan seperti Array, Map, Set, String, Int32Array, Uintâ€¦","html":"<h2 id=\"iterasi\" style=\"position:relative;\"><a href=\"#iterasi\" aria-label=\"iterasi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterasi</h2>\n<p>Sebuah objek dapat dilakukan perulangan jika memiliki properti <a href=\"Symbols.html#symboliterator\"><code>Symbol.iterator</code></a>.\nBeberapa tipe bawaan seperti <code>Array</code>, <code>Map</code>, <code>Set</code>, <code>String</code>, <code>Int32Array</code>, <code>Uint32Array</code>, etc. sudah memiliki properti <code>Symbol.iterator</code>.\nFungsi <code>Symbol.iterator</code> pada sebuah objek, bertanggungjawab untuk mengembalikan <em>list</em> nilai-nilai untuk menjalankan iterasi.</p>\n<h2 id=\"pernyataan-forof\" style=\"position:relative;\"><a href=\"#pernyataan-forof\" aria-label=\"pernyataan forof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pernyataan <code>for..of</code></h2>\n<p><code>for..of</code> mengulang objek yang dapat diulang dengan cara memanggil properti <code>Symbol.iterator</code> pada objek tersebut.\nBerikut ini <em>loop</em> <code>for..of</code> sederhana pada sebuah <em>array</em>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">someArray </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">entry</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">someArray</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">entry</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 1, \"string\", false</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h3 id=\"pernyataan-forof-vs-forin\" style=\"position:relative;\"><a href=\"#pernyataan-forof-vs-forin\" aria-label=\"pernyataan forof vs forin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pernyataan <code>for..of</code> vs <code>for..in</code></h3>\n<p>Baik pernyataan <code>for..of</code> dan <code>for..in</code> akan mengiterasi <em>list</em>; yang membedakan antara keduanya adalah <code>for..in</code> akan mengembalikan daftar <em>keys</em> dari objek tersebut, sedangkan <code>for..of</code> mengembalikan daftar <em>values</em> properti numeric dari objek yang diiterasi.</p>\n<p>Berikut adalah contoh implementasi dari perbedaan keduanya:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">list </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">6</span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">list</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"0\", \"1\", \"2\",</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">list</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"4\", \"5\", \"6\"</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Perbedaan lainnya adalah <code>for..in</code> bekerja pada objek apapun; ini berfungsi sebagai cara untuk memeriksa properti pada objek tersebut.\nDi sisi lain, <code>for..of</code> tertarik pada nilai dari objek yang dapat diulang. Objek bawaan seperti <code>Map</code> dan<code>Set</code> mengimplementasikan properti <code>Symbol.iterator</code> yang memungkinkan akses ke nilai yang disimpan.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">pets </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Set([</span><span style=\"color: #A31515\">\"Cat\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Dog\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Hamster\"</span><span style=\"color: #000000\">]);</span>\n<span style=\"color: #1A1A1A\">pets</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"species\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"mammals\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">pet</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">pets</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">pet</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"species\"</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">pet</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">pets</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">pet</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"Cat\", \"Dog\", \"Hamster\"</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h3 id=\"pembuatan-kode\" style=\"position:relative;\"><a href=\"#pembuatan-kode\" aria-label=\"pembuatan kode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pembuatan kode</h3>\n<h4 id=\"menargetkan-es5-dan-es3\" style=\"position:relative;\"><a href=\"#menargetkan-es5-dan-es3\" aria-label=\"menargetkan es5 dan es3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menargetkan ES5 dan ES3</h4>\n<p>Ketika menargetkan ke engine ES5 atau ES3, <em>iterator</em> hanya membolehkan nilai bertipe <code>Array</code>.\nAkan terjadi galat jika <code>for..of</code> melakukan perulangan pada nilai yang bukan Array, bahkan jika nilai non <em>Array</em> tersebut memiliki properti <code>Symbol.iterator</code>.</p>\n<p>Kompilator akan menghasilkan perulangan <code>for</code> sederhana untuk <code>for..of</code>, misalnya:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">numbers </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">num</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">numbers</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">num</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>akan menghasilkan:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">numbers</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #1A1A1A\">numbers</span><span style=\"color: #000000\">.length; </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\">++) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">num</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">numbers</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">num</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h4 id=\"menargetkan-ecmascript-2015-dan-yang-lebih-tinggi\" style=\"position:relative;\"><a href=\"#menargetkan-ecmascript-2015-dan-yang-lebih-tinggi\" aria-label=\"menargetkan ecmascript 2015 dan yang lebih tinggi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menargetkan ECMAScript 2015 dan yang lebih tinggi</h4>\n<p>Ketika menargetkan ke <em>engine</em> ECMAScript 2015, kompilator akan membuat perulangan <code>for..of</code> untuk menargetkan implementasi <em>iterator</em> bawaan di mesin.</p>","headings":[{"value":"Iterasi","depth":2},{"value":"Pernyataan for..of","depth":2},{"value":"Pernyataan for..of vs for..in","depth":3},{"value":"Pembuatan kode","depth":3},{"value":"Menargetkan ES5 dan ES3","depth":4},{"value":"Menargetkan ECMAScript 2015 dan yang lebih tinggi","depth":4}],"frontmatter":{"permalink":"/id/docs/handbook/iterators-and-generators.html","title":"Iterators dan Generators","disable_toc":null,"handbook":null,"oneline":"Bagaimana Iterator dan Generator bekerja di TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2iterators-dan-generators","slug":"/id/docs/handbook/iterators-and-generators.html","repoPath":"/packages/documentation/copy/id/reference/Iterators and Generators.md","lang":"id","modifiedTime":"2020-11-23T10:39:15.623Z"}},"staticQueryHashes":[]}