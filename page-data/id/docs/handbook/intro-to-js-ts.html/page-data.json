{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/intro-to-js-ts.html","result":{"data":{"markdownRemark":{"id":"fa6aba58-293f-5af3-8eb7-09d2fee93a62","excerpt":"Sistem tipe data di TypeScript memiliki tingkat keketatan yang berbeda saat bekerja dengan basis kode: Sistem tipe data yang hanya berdasarkan pada inferensiâ€¦","html":"<p>Sistem tipe data di TypeScript memiliki tingkat keketatan yang berbeda saat bekerja dengan basis kode:</p>\n<ul>\n<li>Sistem tipe data yang hanya berdasarkan pada inferensi dengan kode JavaScript</li>\n<li>Pengetikkan secara bertahap di JavaScript <a href=\"/docs/handbook/jsdoc-supported-types.html\">melalui JSDoc</a></li>\n<li>Menggunakan <code>// @ts-check</code> di berkas JavaScript</li>\n<li>Kode TypeScript</li>\n<li>TypeScript dengan <a href=\"/tsconfig#strict\"><code>strict</code></a> diaktifkan</li>\n</ul>\n<p>Setiap langkah mewakili tahapan sistem tipe yang lebih aman, tetapi tidak setiap proyek membutuhkan tingkat verifikasi seperti itu.</p>\n<h2 id=\"typescript-dengan-javascript\" style=\"position:relative;\"><a href=\"#typescript-dengan-javascript\" aria-label=\"typescript dengan javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript dengan JavaScript</h2>\n<p>Ini ketika <em>editor</em>-mu yang menggunakan TypeScript untuk menyediakan <em>tool</em>, seperti <em>auto-complete</em>, <em>jump to symbol</em>, dan <em>refactoring</em>, misalnya penamaan ulang.\nDi <a href=\"/\">Homepage</a> tersedia daftar <em>editor</em> yang memiliki plugin TypeScript.</p>\n<h2 id=\"menyediakan-type-hints-di-js-melalui-jsdoc\" style=\"position:relative;\"><a href=\"#menyediakan-type-hints-di-js-melalui-jsdoc\" aria-label=\"menyediakan type hints di js melalui jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menyediakan Type Hints di JS melalui JSDoc</h2>\n<p>Di berkas <code>.js</code>, tipe sering kali dapat diketahui. Namun ketika tipe tidak diketahui, mereka bisa ditentukan menggunakan sintaks JSDoc.</p>\n<p>Anotasi JSDoc diletakkan sebelum mendeklarasikan suatu hal. Seperti contoh berikut:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> {number} */</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK?!</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeA7ArgWwEaIE4C+4IwAUAG4CG+4AHgNxll3gC84ADA+MMOAHkA0i3bgAZlQA2AZ0Q8+goQH4AhEA'>Try</a></div></pre>\n<p>Anda dapat menemukan daftar lengkap mengenai dukungan pola JSDoc <a href=\"/docs/handbook/jsdoc-supported-types.html\">di Tipe-tipe yang didukung JSDoc</a></p>\n<h2 id=\"ts-check\" style=\"position:relative;\"><a href=\"#ts-check\" aria-label=\"ts check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@ts-check</code></h2>\n<p>Baris terakhir dari contoh kode sebelumnya akan menimbulkan kesalahan dalam TypeScript, tetapi tidak secara bawaan dalam proyek JS.\nUntuk mengaktifkan galat dalam berkas JavaScript-mu, tambahkan: <code>// @ ts-check</code> ke baris pertama dalam berkas<code>.js</code> Anda agar TypeScript dapat memeriksa kesalahan.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @ts-check</span>\n<span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> {number} */</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var x: number'>x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Not OK</span>\n<span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcGcFoGMAWBTeBrAUCCyBOuB7XaALlACYBmc8rAKjokgE8AHZUAbwDsBXAWwBGeAL6g6wDADcAhrlAAPANwYMC0AF5QABiWhsAeQDSazaABmMgDbRke7ADkCkUMaA'>Try</a></div></pre>\n<p>Jika anda memiliki banyak berkas JavaScript yang ingin ditambahkan pemeriksaan galatnya, Anda bisa beralhir menggunakan <a href=\"/docs/handbook/tsconfig-json.html\"><code>jsconfig.json</code></a>.\nDengan begitu, Anda tidak perlu menambahkan <code>// @ts-nocheck</code> di tiap berkasnya.</p>\n<p>TypeScript mungkin memberikan galat yang Anda tidak sepakati. Pada kasus tersebut, Anda bisa membiarkan galat itu spesifik dibaris manapun dengan menambahkan <code>// @ts-ignore</code> atau <code>// @ts-expect-error</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @ts-check</span>\n<span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> {number} */</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #008000\">// @ts-expect-error</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Not OK</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcGcFoGMAWBTeBrAUMAVNikBPAB2VAG8A7AVwFsAjZAJwF9RtgMA3AQ0dAA8A3Bgz9QAXlAAGQaBCgA8gGksYKHGT8S8SLCaMA9o1ETQAM24AbaMlnyAcgciKlQA'>Try</a></div></pre>\n<p>Untuk mempelajari lebih lanjut bagaimana JavaScript diinterpretasi oleh TypeScript, Anda dapat membaca <a href=\"/docs/handbook/type-checking-javascript-files.html\">Bagaimana TS Type Memeriksa JS</a></p>","headings":[{"value":"TypeScript dengan JavaScript","depth":2},{"value":"Menyediakan Type Hints di JS melalui JSDoc","depth":2},{"value":"@ts-check","depth":2}],"frontmatter":{"permalink":"/id/docs/handbook/intro-to-js-ts.html","title":"Memanfaatkan Typescript pada Proyek JS","disable_toc":null,"handbook":null,"oneline":"Cara menambahkan pemeriksaan tipe data pada berkas JavaScript menggunakan TypeScript","beta":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"Type Checking JavaScript Files","oneline":"How to add type checking to JavaScript files using TypeScript","permalink":"/docs/handbook/type-checking-javascript-files.html"}}}},"pageContext":{"id":"6memanfaatkan-typescript-pada-proyek-js","slug":"/id/docs/handbook/intro-to-js-ts.html","repoPath":"/packages/documentation/copy/id/javascript/Intro to JS with TS.md","nextID":"4ec79134-beb5-5bdc-9b1f-1f77fbe63f8d","lang":"id","modifiedTime":"2020-11-23T10:39:15.623Z"}},"staticQueryHashes":[]}