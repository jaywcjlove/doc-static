{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/dom-manipulation.html","result":{"data":{"markdownRemark":{"id":"7c274551-1c02-5c59-8a69-ae4f7625c58d","excerpt":"Manipulasi DOM Eksplorasi ke dalam tipe HTMLElement Dalam 20+ tahun sejak standarisasi, JavaScript telah berkembang pesat. Meskipun pada tahun 2020, JavaScriptâ€¦","html":"<h2 id=\"manipulasi-dom\" style=\"position:relative;\"><a href=\"#manipulasi-dom\" aria-label=\"manipulasi dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manipulasi DOM</h2>\n<h3 id=\"eksplorasi-ke-dalam-tipe-htmlelement\" style=\"position:relative;\"><a href=\"#eksplorasi-ke-dalam-tipe-htmlelement\" aria-label=\"eksplorasi ke dalam tipe htmlelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eksplorasi ke dalam tipe <code>HTMLElement</code></h3>\n<p>Dalam 20+ tahun sejak standarisasi, JavaScript telah berkembang pesat. Meskipun pada tahun 2020, JavaScript dapat digunakan di <em>server</em>, dalam ilmu data, dan bahkan pada perangkat <em>IoT</em>, penting untuk mengingat kasus penggunaannya yang paling populer: <em>web browser</em>.</p>\n<p>Situs <em>web</em> terdiri dari dokumen HTML dan/atau XML. Dokumen-dokumen ini statis, tidak berubah. <em>Document Object Model (DOM)</em> adalah antarmuka pemrograman yang diterapkan oleh <em>browser</em> untuk membuat situs <em>web</em> statis berfungsi. API DOM dapat digunakan untuk mengubah struktur dokumen, <em>style</em>, dan konten. API ini sangat kuat sehingga <em>framework frontend</em> yang tak terhitung jumlahnya (jQuery, React, Angular, dll.) telah dikembangkan di sekitarnya untuk membuat situs <em>web</em> dinamis lebih mudah dikembangkan.</p>\n<p>TypeScript adalah <em>superset</em> dari JavaScript, dan TypeScript dilengkapi dengan definisi tipe untuk DOM API. Secara standar, definisi ini sudah tersedia dalam proyek TypeScript. Dari 20.000+ baris definisi di <em>lib.dom.d.ts</em>, satu yang menonjol di antara yang lain: <code>HTMLElement</code>. Jenis ini adalah hal penting untuk manipulasi DOM dengan TypeScript.</p>\n<blockquote>\n<p>Anda bisa mengeksplor source code <a href=\"https://github.com/microsoft/TypeScript/blob/master/lib/lib.dom.d.ts\">Definisi tipe DOM</a></p>\n</blockquote>\n<h2 id=\"contoh-dasar\" style=\"position:relative;\"><a href=\"#contoh-dasar\" aria-label=\"contoh dasar permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh Dasar</h2>\n<p>Diberikan berkas <em>index.html</em> yang disederhanakan:</p>\n<pre class=\"shiki\"><div class='code-container'><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;&lt;title&gt;TypeScript Dom Manipulation&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"app\"&gt;&lt;/div&gt;\n    &lt;!-- Assume index.js is the compiled output of index.ts --&gt;\n    &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></div></pre>\n<p>Mari kita jelajahi kode TypeScript yang menambahkan elemen <code>&#x3C;p>Hello, World&#x3C;/p></code> ke elemen <code>#app</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// 1. Pilih elemen div menggunakan properti id</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">app </span><span style=\"color: #000000\">= document.getElementById(</span><span style=\"color: #A31515\">\"app\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// 2. Buat element &lt;p&gt;&lt;/p&gt; baru secara terprogram</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">p </span><span style=\"color: #000000\">= document.createElement(</span><span style=\"color: #A31515\">\"p\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// 3. Tambahkan konten teks</span>\n<span style=\"color: #1A1A1A\">p</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">textContent</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello, World!\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// 4. Tambahkan elemen p ke elemen div</span>\n<span style=\"color: #1A1A1A\">app</span><span style=\"color: #000000\">?.appendChild(</span><span style=\"color: #1A1A1A\">p</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>Setelah menyusun dan menjalankan halaman <em>index.html</em>, HTML yang dihasilkan adalah:</p>\n<pre class=\"shiki\"><div class=\"language-id\">html</div><div class='code-container'><code><span style=\"color: #800000\">&lt;div</span><span style=\"color: #000000\"> </span><span style=\"color: #DC0000\">id</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"app\"</span><span style=\"color: #800000\">&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">Hello, World!</span><span style=\"color: #800000\">&lt;/p&gt;</span>\n<span style=\"color: #800000\">&lt;/div&gt;</span></code></div></pre>\n<h2 id=\"antarmuka-document\" style=\"position:relative;\"><a href=\"#antarmuka-document\" aria-label=\"antarmuka document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Antarmuka <code>Document</code></h2>\n<p>Baris pertama kode TypeScript menggunakan variabel global <code>document</code>. Memeriksa variabel menunjukkan bahwa ia didefinisikan oleh antarmuka <code>Dokumen</code> dari berkas <em>lib.dom.d.ts</em>. Cuplikan kode berisi panggilan ke dua <em>method</em>, <code>getElementById</code> dan <code>createElement</code>.</p>\n<h3 id=\"documentgetelementbyid\" style=\"position:relative;\"><a href=\"#documentgetelementbyid\" aria-label=\"documentgetelementbyid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Document.getElementById</code></h3>\n<p>Definisi dari <em>method</em> ini adalah sebagai berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">getElementById(</span><span style=\"color: #1A1A1A\">elementId</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\">): HTMLElement | </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Berikan string id elemen dan itu akan mengembalikan <code>HTMLElement</code> atau<code>null</code>. <em>Method</em> ini memperkenalkan salah satu jenis terpenting, <code>HTMLElement</code>. Ini berfungsi sebagai antarmuka dasar untuk setiap antarmuka elemen lainnya. Misalnya, variabel <code>p</code> dalam contoh kode berjenis <code>HTMLParagraphElement</code>. Perhatikan juga bahwa <em>method</em> ini dapat mengembalikan <code>null</code>. Ini karena <em>method</em> tidak dapat memastikan kapan elemen itu tersedia atau apakah elemen tersebut ada atau tidak. Di baris terakhir cuplikan kode, operator <em>optional chaining</em> digunakan untuk memanggil <code>appendChild</code>.</p>\n<h3 id=\"documentcreateelement\" style=\"position:relative;\"><a href=\"#documentcreateelement\" aria-label=\"documentcreateelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Document.createElement</code></h3>\n<p>Definisi untuk metode ini adalah (definisi <em>deprecated</em> telah dihilangkan):</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">createElement&lt;K extends </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> HTMLElementTagNameMap&gt;(</span><span style=\"color: #1A1A1A\">tagName</span><span style=\"color: #000000\">: K, </span><span style=\"color: #1A1A1A\">options</span><span style=\"color: #000000\">?: </span><span style=\"color: #1A1A1A\">ElementCreationOptions</span><span style=\"color: #000000\">): </span><span style=\"color: #1A1A1A\">HTMLElementTagNameMap</span><span style=\"color: #000000\">[K];</span>\n<span style=\"color: #000000\">createElement(</span><span style=\"color: #1A1A1A\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">options</span><span style=\"color: #000000\">?: </span><span style=\"color: #1A1A1A\">ElementCreationOptions</span><span style=\"color: #000000\">): HTMLElement;</span></code></div></pre>\n<p>Ini adalah definisi fungsi yang kelebihan beban. Kelebihan kedua adalah yang paling sederhana dan bekerja sangat mirip dengan method <code>getElementById</code>. Berikan setiap <code>string</code> dan ia akan mengembalikan standar HTMLElement. Definisi inilah yang memungkinkan developer membuat tag elemen HTML yang unik.</p>\n<p>Misalnya <code>document.createElement('xyz')</code> mengembalikan elemen <code>&#x3C;xyz>&#x3C;/xyz></code>, jelas bukan elemen yang ditentukan oleh spesifikasi HTML.</p>\n<blockquote>\n<p>Jika tertarik, Anda dapat berinteraksi dengan elemen <em>tag</em> kustom menggunakan <code>document.getElementsByTagName</code></p>\n</blockquote>\n<p>Untuk definisi pertama dari <code>createElement</code>, ini menggunakan beberapa pola umum lanjutan. Paling baik dipahami jika dipecah menjadi beberapa bagian, dimulai dengan ekspresi umum: <code>&#x3C;K extends keyof HTMLElementTagNameMap></code>. Ekspresi ini mendefinisikan parameter umum <code>K</code> yang <em>constrained</em> ke kunci antarmuka<code>HTMLElementTagNameMap</code>. Antarmuka peta berisi setiap nama tag HTML yang ditentukan dan antarmuka tipe yang sesuai. Berikut adalah 5 nilai yang dipetakan pertama:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> HTMLElementTagNameMap {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">: HTMLAnchorElement;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"abbr\"</span><span style=\"color: #000000\">: HTMLElement;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"address\"</span><span style=\"color: #000000\">: HTMLElement;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"applet\"</span><span style=\"color: #000000\">: HTMLAppletElement;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"area\"</span><span style=\"color: #000000\">: HTMLAreaElement;</span>\n<span style=\"color: #000000\">        ...</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Beberapa elemen tidak menunjukkan properti unik sehingga mereka hanya mengembalikan <code>HTMLElement</code>, tetapi tipe lain memiliki properti dan method unik sehingga mereka mengembalikan antarmuka spesifiknya (yang akan memperluas atau mengimplementasikan <code>HTMLElement</code>).</p>\n<p>Sekarang, untuk sisa definisi <code>createElement</code>:<code>(tagName: K, options ?: ElementCreationOptions): HTMLElementTagNameMap [K]</code>. Argumen pertama <code>tagName</code> didefinisikan sebagai parameter umum <code>K</code>. Interpreter TypeScript cukup pintar untuk <em>infer</em> parameter generik dari argumen ini. Ini berarti bahwa pengembang sebenarnya tidak harus menentukan parameter umum saat menggunakan metode ini; nilai apa pun yang diteruskan ke argumen <code>tagName</code> akan disimpulkan sebagai <code>K</code> dan karenanya dapat digunakan di seluruh definisi lainnya. Itulah yang sebenarnya terjadi; nilai kembalian <code>HTMLElementTagNameMap [K]</code> mengambil argumen <code>tagName</code> dan menggunakannya untuk mengembalikan jenis yang sesuai. Definisi ini adalah bagaimana variabel <code>p</code> dari kode sebelumnya mendapatkan jenis <code>HTMLParagraphElement</code>. Dan jika kodenya adalah <code>document.createElement ('a')</code>, maka itu akan menjadi elemen jenis <code>HTMLAnchorElement</code>.</p>\n<h2 id=\"antarmuka-node\" style=\"position:relative;\"><a href=\"#antarmuka-node\" aria-label=\"antarmuka node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Antarmuka <code>Node</code></h2>\n<p>Fungsi <code>document.getElementById</code> mengembalikan <code>HTMLElement</code>. Antarmuka <code>HTMLElement</code> memperluas antarmuka <code>Element</code>, yang memperluas antarmuka <code>Node</code>. Ekstensi prototipe ini memungkinkan semua <code>HTMLElements</code> untuk menggunakan <em>subset</em> method standar. Dalam cuplikan kode, kami menggunakan properti yang ditentukan pada antarmuka <code>Node</code> untuk menambahkan elemen<code>p</code> baru ke situs <em>web</em>.</p>\n<h3 id=\"nodeappendchild\" style=\"position:relative;\"><a href=\"#nodeappendchild\" aria-label=\"nodeappendchild permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Node.appendChild</code></h3>\n<p>Baris terakhir dari potongan kode adalah <code>app?.AppendChild (p)</code>. Bagian sebelumnya, <code>document.getElementById</code>, merinci bahwa operator <em>optional chaining</em> digunakan di sini karena <code>app</code> berpotensi menjadi <em>null</em> pada waktu proses. Method <code>appendChild</code> didefinisikan oleh:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">appendChild&lt;T extends Node&gt;(</span><span style=\"color: #1A1A1A\">newChild</span><span style=\"color: #000000\">: T): T;</span></code></div></pre>\n<p>Method ini bekerja mirip dengan metode <code>createElement</code> karena parameter umum <code>T</code> disimpulkan dari argumen <code>newChild</code>. <code>T</code> adalah <em>constrained</em> ke antarmuka dasar lain<code>Node</code>.</p>\n<h2 id=\"perbedaan-antara-children-dan-childnodes\" style=\"position:relative;\"><a href=\"#perbedaan-antara-children-dan-childnodes\" aria-label=\"perbedaan antara children dan childnodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Perbedaan antara <code>children</code> dan <code>childNodes</code></h2>\n<p>Sebelumnya, dokumen ini merinci antarmuka <code>HTMLElement</code> yang diperluas dari <code>Element</code> yang diturunkan dari <code>Node</code>. Di DOM API ada konsep elemen <em>children</em>. Misalnya dalam HTML berikut, tag <code>p</code> adalah turunan dari elemen <code>div</code></p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #800000\">&lt;div&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">Hello, World</span><span style=\"color: #800000\">&lt;/p&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">TypeScript!</span><span style=\"color: #800000\">&lt;/p&gt;</span>\n<span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\"> = document.getElementsByTagName(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// HTMLCollection(2) [p, p]</span>\n\n<span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">.childNodes;</span>\n<span style=\"color: #008000\">// NodeList(2) [p, p]</span></code></div></pre>\n<p>Setelah menangkap elemen <code>div</code>, <em>prop</em> <code>children</code> akan mengembalikan daftar <code>HTMLCollection</code> yang berisi <code>HTMLParagraphElements</code>. Properti <code>childNodes</code> akan mengembalikan daftar node <code>NodeList</code> yang serupa. Setiap <em>tag</em> <code>p</code> akan tetap berjenis <code>HTMLParagraphElements</code>, tetapi <code>NodeList</code> dapat berisi <em>HTML node</em> tambahan yang tidak bisa dilakukan oleh <em>list</em> <code>HTMLCollection</code>.</p>\n<p>Ubah html dengan menghapus salah satu <em>tag</em> <code>p</code>, tetapi pertahankan teksnya.</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #800000\">&lt;div&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">Hello, World</span><span style=\"color: #800000\">&lt;/p&gt;</span>\n<span style=\"color: #000000\">  TypeScript!</span>\n<span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\"> = document.getElementsByTagName(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// HTMLCollection(1) [p]</span>\n\n<span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">.childNodes;</span>\n<span style=\"color: #008000\">// NodeList(2) [p, text]</span></code></div></pre>\n<p>Lihat bagaimana kedua daftar berubah. <code>children</code> sekarang hanya berisi elemen <code>&#x3C;p>Hello, World&#x3C;/p></code>, dan <code>childNodes</code> berisi simpul <code>teks</code> daripada dua simpul <code>p</code>. Bagian <code>teks</code> dari <code>NodeList</code> adalah <code>Node</code> <em>literal</em> yang berisi teks <code>TypeScript!</code>. <em>List</em> <code>children</code> tidak berisi <code>Node</code>, ini karena tidak dianggap sebagai <code>HTMLElement</code>.</p>\n<h2 id=\"method-queryselector-dan-queryselectorall\" style=\"position:relative;\"><a href=\"#method-queryselector-dan-queryselectorall\" aria-label=\"method queryselector dan queryselectorall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Method</em> <code>querySelector</code> dan <code>querySelectorAll</code></h2>\n<p>Kedua <em>method</em> ini adalah <em>tool</em> yang hebat untuk mendapatkan daftar elemen dom yang sesuai dengan kumpulan <em>constraint</em> yang lebih unik. Mereka didefinisikan di <em>lib.dom.d.ts</em> sebagai:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Mengembalikan elemen pertama yang merupakan turunan dari node yang cocok dengan selector.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #000000\">querySelector&lt;K extends </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> HTMLElementTagNameMap&gt;(</span><span style=\"color: #1A1A1A\">selectors</span><span style=\"color: #000000\">: K): </span><span style=\"color: #1A1A1A\">HTMLElementTagNameMap</span><span style=\"color: #000000\">[K] | </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">querySelector&lt;K extends </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> SVGElementTagNameMap&gt;(</span><span style=\"color: #1A1A1A\">selectors</span><span style=\"color: #000000\">: K): </span><span style=\"color: #1A1A1A\">SVGElementTagNameMap</span><span style=\"color: #000000\">[K] | </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">querySelector&lt;E extends Element = Element&gt;(</span><span style=\"color: #1A1A1A\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\">): E | </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Menampilkan semua turunan elemen node yang cocok dengan selector.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #000000\">querySelectorAll&lt;K extends </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> HTMLElementTagNameMap&gt;(</span><span style=\"color: #1A1A1A\">selectors</span><span style=\"color: #000000\">: K): </span><span style=\"color: #1A1A1A\">NodeListOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">HTMLElementTagNameMap</span><span style=\"color: #000000\">[K]&gt;;</span>\n<span style=\"color: #000000\">querySelectorAll&lt;K extends </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> SVGElementTagNameMap&gt;(</span><span style=\"color: #1A1A1A\">selectors</span><span style=\"color: #000000\">: K): </span><span style=\"color: #1A1A1A\">NodeListOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">SVGElementTagNameMap</span><span style=\"color: #000000\">[K]&gt;;</span>\n<span style=\"color: #000000\">querySelectorAll&lt;E extends Element = Element&gt;(</span><span style=\"color: #1A1A1A\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1A1A1A\">NodeListOf</span><span style=\"color: #000000\">&lt;E&gt;;</span></code></div></pre>\n<p>Definisi <code>querySelectorAll</code> mirip dengan <code>getElementsByTagName</code>, kecuali ia mengembalikan tipe baru: <code>NodeListOf</code>. Jenis kembalian ini pada dasarnya adalah implementasi khusus dari elemen daftar standar JavaScript. Bisa dibilang, mengganti <code>NodeListOf&#x3C;E></code> dengan <code>E[]</code> akan menghasilkan pengalaman pengguna yang sangat mirip. <code>NodeListOf</code> hanya mengimplementasikan properti dan method berikut:<code>length</code>, <code>item (index)</code>,<code>forEach ((value, key, parent) => void)</code>, dan <em>numeric indexing</em>. Selain itu, <em>method</em> ini mengembalikan daftar <em>elements</em>, bukan <em>nodes</em>, yang dikembalikan oleh <code>NodeList</code> dari <em>method</em> <code>.childNodes</code>. Meskipun ini mungkin tampak sebagai perbedaan, perhatikan bahwa antarmuka <code>Element</code> merupakan turunan dari <code>Node</code>.</p>\n<p>Untuk melihat <em>method</em> ini beraksi, ubah kode yang ada menjadi:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #800000\">&lt;ul&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;li&gt;</span><span style=\"color: #000000\">First :)</span><span style=\"color: #800000\">&lt;/li&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;li&gt;</span><span style=\"color: #000000\">Second!</span><span style=\"color: #800000\">&lt;/li&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;li&gt;</span><span style=\"color: #000000\">Third times a charm.</span><span style=\"color: #800000\">&lt;/li&gt;</span>\n<span style=\"color: #800000\">&lt;/ul&gt;</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">first</span><span style=\"color: #000000\"> = document.querySelector(</span><span style=\"color: #A31515\">\"li\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// mengembalikan elemen li pertama</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">all</span><span style=\"color: #000000\"> = document.querySelectorAll(</span><span style=\"color: #A31515\">\"li\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// mengembalikan daftar semua elemen li</span></code></div></pre>\n<h2 id=\"tertarik-untuk-mempelajari-lebih-lanjut\" style=\"position:relative;\"><a href=\"#tertarik-untuk-mempelajari-lebih-lanjut\" aria-label=\"tertarik untuk mempelajari lebih lanjut permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tertarik untuk mempelajari lebih lanjut?</h2>\n<p>Bagian terbaik tentang definisi tipe <em>lib.dom.d.ts</em> adalah bahwa definisi tersebut mencerminkan tipe yang dijelaskan di situs dokumentasi <em>Mozilla Developer Network</em> (MDN). Misalnya, antarmuka <code>HTMLElement</code> didokumentasikan oleh <a href=\"https://developer.mozilla.org/docs/Web/API/HTMLElement\">halaman HTMLElement</a> di MDN. Halaman ini mencantumkan semua properti yang tersedia, method, dan terkadang bahkan contoh. Aspek hebat lainnya dari halaman-halaman tersebut adalah mereka menyediakan tautan ke dokumen standar yang sesuai. Berikut ini tautan ke <a href=\"https://www.w3.org/TR/html52/dom.html#htmlelement\">Rekomendasi W3C untuk HTMLElement</a>.</p>\n<p>Sumber:</p>\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/10.0/index.html\">ECMA-262 Standard</a></li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction\">Pengenalan DOM</a></li>\n</ul>","headings":[{"value":"Manipulasi DOM","depth":2},{"value":"Eksplorasi ke dalam tipe HTMLElement","depth":3},{"value":"Contoh Dasar","depth":2},{"value":"Antarmuka Document","depth":2},{"value":"Document.getElementById","depth":3},{"value":"Document.createElement","depth":3},{"value":"Antarmuka Node","depth":2},{"value":"Node.appendChild","depth":3},{"value":"Perbedaan antara children dan childNodes","depth":2},{"value":"Method querySelector dan querySelectorAll","depth":2},{"value":"Tertarik untuk mempelajari lebih lanjut?","depth":2}],"frontmatter":{"permalink":"/id/docs/handbook/dom-manipulation.html","title":"Manipulasi DOM","disable_toc":null,"handbook":null,"oneline":"Menggunakan DOM dengan TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"3manipulasi-dom","slug":"/id/docs/handbook/dom-manipulation.html","repoPath":"/packages/documentation/copy/id/tutorials/DOM Manipulation.md","lang":"id","modifiedTime":"2020-11-23T10:39:15.627Z"}},"staticQueryHashes":[]}