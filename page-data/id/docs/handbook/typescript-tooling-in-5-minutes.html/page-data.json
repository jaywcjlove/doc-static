{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/typescript-tooling-in-5-minutes.html","result":{"data":{"markdownRemark":{"id":"fdf7b084-0685-5428-9247-07a14f555edd","excerpt":"Mulai membangun aplikasi web sederhana dengan TypeScript. Memasang TypeScript Berikut adalah 2 cara agar TypeScript ada pada proyekmu: Melalui npm (package…","html":"<p>Mulai membangun aplikasi web sederhana dengan TypeScript.</p>\n<h2 id=\"memasang-typescript\" style=\"position:relative;\"><a href=\"#memasang-typescript\" aria-label=\"memasang typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memasang TypeScript</h2>\n<p>Berikut adalah 2 cara agar TypeScript ada pada proyekmu:</p>\n<ul>\n<li>Melalui npm (package manager dari Node.js)</li>\n<li>Dengan memasang <em>plugin</em> Visual Studio TypeScript</li>\n</ul>\n<p>Standar dari Visual Studio 2017 dan Visual Studio 2015 Update 3 telah menyertakan TypeScript.\nJika anda belum memasang TypeScript dengan Visual Studio, anda masih bisa <a href=\"/download\">mengunduhnya disini</a>.</p>\n<p>Untuk pengguna npm:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">&gt; npm install -g typescript</span></code></div></pre>\n<h2 id=\"membangun-berkas-typescript-pertamamu\" style=\"position:relative;\"><a href=\"#membangun-berkas-typescript-pertamamu\" aria-label=\"membangun berkas typescript pertamamu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Membangun berkas TypeScript pertamamu</h2>\n<p>Di editormu, ketik kode JavaScript berikut pada berkas <code>greeter.ts</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greeter(person: any): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: any'>person</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: any'>person</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: string'>user</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Jane User\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(property) Document.body: HTMLElement'>body</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Node.textContent: string | null'>textContent</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function greeter(person: any): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: string'>user</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koA5gE7XVbVuACkSDK7AJSgA3rVCheWBtw4AiABLVkyaABpQq0AGpQo7uMgBuWgF9atZP1AMa3UAF4DAKTKRqoAFVXVWtaABNodAZ4akgsADoAI2gw-HiBAA8sAGF2ATiPLl5+QSEXQQlLIA'>Try</a></div></pre>\n<h2 id=\"mengkompilasi-kodemu\" style=\"position:relative;\"><a href=\"#mengkompilasi-kodemu\" aria-label=\"mengkompilasi kodemu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mengkompilasi kodemu</h2>\n<p>Kita menggunakan ekstensi <code>.ts</code>, tapi kode ini hanyalah JavaScript.\nAnda dapat menyalin/menempel ini langsung dari aplikasi JavaScript yang ada.</p>\n<p>Di <em>command line</em>, jalankan TypeScript kompilator:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">tsc greeter.ts</span></code></div></pre>\n<p>Hasilnya akan menjadi berkas <code>greeter.js</code> yang berisi JavaScript yang sama dengan yang anda masukkan.\nKodenya telah berhasil menjalankannya menggunakan TypeScript di aplikasi JavaScript!</p>\n<p>Sekarang kita bisa melangkah lebih jauh tentang tool yang ditawarkan oleh TypeScript.\nTambahkan sebuah jenis anotasi <code>: string</code> ke argumen ‘person’ pada fungsi <code>greeter</code>, seperti berikut:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greeter(person: string): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: string'>person</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: string'>person</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: string'>user</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Jane User\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(property) Document.body: HTMLElement'>body</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Node.textContent: string | null'>textContent</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function greeter(person: string): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: string'>user</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1XagFABxwGcEAuRIqVGMZASkQG8AoRRDKEVJAIgAl0AG0FwANIh6IA1IkKoSYANzMAvs2aCsiEERyIAvBIBSAQzDpEAVV2oey5gBM4EEAFt0YKADoARnAcAnl7YAB5QAMII2J4GKBhYOLg6OHSKQA'>Try</a></div></pre>\n<h2 id=\"jenis-anotasi\" style=\"position:relative;\"><a href=\"#jenis-anotasi\" aria-label=\"jenis anotasi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenis Anotasi</h2>\n<p>Jenis anotasi di TypeScript adalah cara yang mudah untuk mengetahui bagaimana fungsi atau variabel tersebut yang dimaksudkan.\nDalam kasus ini, kami bermaksud agar fungsi <em>greeter</em> dipanggil dengan parameter string tunggal.\nKita dapat mencoba mengubah pemanggilan fungsi <em>greeter</em> untuk mengirimkan <em>array</em> sebagai gantinya:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greeter(person: string): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: string'>person</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: string'>person</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: number[]'>user</data-lsp> </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(property) Document.body: HTMLElement'>body</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Node.textContent: string | null'>textContent</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function greeter(person: string): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let user: number[]'>user</data-lsp></data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'number[]' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number[]' is not assignable to parameter of type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAObSSQUwAUADjIraohdCol6ASlABvPKFBMKRaHQBEACUgAbNXAA0oRaADUoLkloBuPAF88eNS1BFEMUAF5QAbQAMOgIw60AXXM8ABM4MiIAW0gSCgA6ACM4YIBPWNYADwoAYVpWGJcGJhZ2BxgRUyA'>Try</a></div></pre>\n<p><em>Compile</em> ulang, dan Anda akan melihat galat berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">error TS2345: Argument of type </span><span style=\"color: #A31515\">'number[]'</span><span style=\"color: #000000\"> is not assignable to parameter of type </span><span style=\"color: #A31515\">'string'</span><span style=\"color: #000000\">.</span></code></div></pre>\n<p>Demikian pula, coba hapus semua argumen saat pemanggilan fungsi <em>greeter</em>.\nTypeScript akan memberi tahu Anda bahwa Anda telah memanggil fungsi ini dengan jumlah <em>parameter</em> yang tidak terduga.\nDalam kedua kasus, TypeScript dapat menawarkan analisis statis berdasarkan struktur kode Anda, dan jenis anotasi yang Anda berikan.</p>\n<p>Perhatikan ketika terjadi galat, berkas <code>greeter.js</code> tetap dibuat.\nAnda bisa menggunakan TypeScript bahkan jika terjadi galat pada kodemu. Tapi pada kasus ini, TypeScript memperingatkan bahwa kodemu akan bekerja tidak sesuai dengan ekspektasi.</p>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Interfaces</em></h2>\n<p>Mari kembangkan sampel kita lebih jauh. Di sini kami menggunakan <em>interface</em> yang mendeskripsikan objek yang memiliki <em>field</em> firstName dan lastName.\nDi TypeScript, dua jenis anotasi akan kompatibel jika struktur internalnya juga kompatibel.\nIni membolehkan kita untuk mengimplementasikan sebuah <em>interface</em> hanya dengan memiliki bentuk <em>interface</em> yang dibutuhkan, tanpa klausa <code>implements</code> yang eksplisit.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Person'>Person</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greeter(person: Person): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: Person'>person</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Person'>Person</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: Person'>person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: Person'>person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;}'>user</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) firstName: string'>firstName</data-lsp>: </span><span style=\"color: #A31515\">\"Jane\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) lastName: string'>lastName</data-lsp>: </span><span style=\"color: #A31515\">\"User\"</span><span style=\"color: #000000\"> };</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(property) Document.body: HTMLElement'>body</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Node.textContent: string | null'>textContent</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function greeter(person: Person): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;}'>user</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAcnALYQBcyFUoA5gNxHIA2cF1dRszacAvgQIwAriARhgOZKygQIkKAAoADphyN05HAEp8XFWClRcAIgASEbtywAaZNeQBqZDsMgAdKTkVLQoXu7uXj7Y-rz8IWIS3GrIUhjQyAC8+CRkcYJuAFJwIBDWrrHB+dYAqmlQ7qKcBAAmWAhSdOB+AEZYzQCefpAAHmAAwjiQ4JlKKmrQGqnQRuxAA'>Try</a></div></pre>\n<h2 id=\"kelas\" style=\"position:relative;\"><a href=\"#kelas\" aria-label=\"kelas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kelas</h2>\n<p>Terakhir, mari menambahkan penggunaan kelas pada contoh yang sedang kita kerjakan.\nTypeScript mendukung fitur baru di JavaScript, seperti dukungan untuk kelas berbasiskan pemrograman objek.</p>\n<p>Disini kita mulai dengan membuat kelas <code>Student</code> dengan konstruktor dan beberapa <em>field</em> publik.\nPerhatikan bahwa kelas dan <em>interface</em> saling bersinergi, sehingga memberikan kebebasan ke programmer untuk memutuskan level abstraksi yang tepat.</p>\n<p>Juga perlu perhatikan, penggunaan <code>public</code> pada argumen di konstruktor adalah singkatan yang membolehkan kita untuk secara otomatis membuat properti dengan nama tersebut.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Student'>Student</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Student.fullName: string'>fullName</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Student.firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Student.middleInitial: string'>middleInitial</data-lsp></span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Student.lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">: string</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Student.fullName: string'>fullName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) middleInitial: string'>middleInitial</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Person'>Person</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greeter(person: Person): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: Person'>person</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Person'>Person</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: Person'>person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) person: Person'>person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: Student'>user</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Student(firstName: string, middleInitial: string, lastName: string): Student'>Student</data-lsp>(</span><span style=\"color: #A31515\">\"Jane\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"M.\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"User\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(property) Document.body: HTMLElement'>body</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Node.textContent: string | null'>textContent</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function greeter(person: Person): string'>greeter</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let user: Student'>user</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKAuBXAJgUwHb2gbwFDWgDNEQQA5MAW1QC5oJ4AnAS3QHMBufaYAe3QaNEweL0YAKbgQAOiAEYhmwIs0YMK1OoNZsANFOiyFS6JWbJkIVAEl0zeMzAgtTHfoIz5i5eHVVa9K7s3ACUOAbwABbMEAB0xKQaqNAAvCpq8EnQANTQAET5OabmljZ2Dk5FBQW5vpn+XAQAvrgtuKzwqIyEYMDJAApdEPzhBISqfpqBLOyN0HVJLjOcrbi4xOgizCNsjKionRLSQ-x0g2r8YXgEe0iM6PkAEqikvLqFuccX6PET9dRVD6GE4-BYNVa4KxYRAQLqpaDoVAAdzgSDQmHEeQAUmBEXl3nkALKxfH5ACqsMYeRCXFwyF4wEQ1EwsTkvGQAE9Yp0AB7wADC-E6mHhu32h3EMK6NKAA'>Try</a></div></pre>\n<p>Jalankan ulang perintah <code>tsc greeter.ts</code> dan anda akan melihat kode JavaScript-nya.\nKelas pada TypeScript hanyalah singkatan untuk <em>object-oriented</em> berbasiskan <em>prototipe</em> yang sama, yang sering digunakan di JavaScript.</p>\n<h2 id=\"menjalankan-aplikasi-web-typescript-mu\" style=\"position:relative;\"><a href=\"#menjalankan-aplikasi-web-typescript-mu\" aria-label=\"menjalankan aplikasi web typescript mu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menjalankan aplikasi web TypeScript-mu</h2>\n<p>Sekarang ketik kode berikut di <code>greeter.html</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">html</div><div class='code-container'><code><span style=\"color: #800000\">&lt;!</span><span style=\"color: #000000\">DOCTYPE html</span><span style=\"color: #800000\">&gt;</span>\n<span style=\"color: #800000\">&lt;html&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;head&gt;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;title&gt;</span><span style=\"color: #000000\">TypeScript Greeter</span><span style=\"color: #800000\">&lt;/title&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/head&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;body&gt;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;script</span><span style=\"color: #000000\"> </span><span style=\"color: #DC0000\">src</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"greeter.js\"</span><span style=\"color: #800000\">&gt;&lt;/script&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/body&gt;</span>\n<span style=\"color: #800000\">&lt;/html&gt;</span></code></div></pre>\n<p>Buka <code>greeter.html</code> di <em>browser</em> untuk menjalankan aplikasi web TypeScript-mu yang pertama!</p>\n<p>Opsional: Buka <code>greeter.ts</code> di Visual Studio, atau salin kode ke TypeScript <em>playground</em>.\nAnda dapat mengarahkan kursor ke <em>identifier</em> untuk melihat tipe mereka.\nPerhatikan bahwa dalam beberapa kasus, tipe ini disimpulkan secara otomatis untuk Anda.\nKetik ulang baris terakhir, dan lihat daftar penyelesaian dan bantuan <em>parameter</em> berdasarkan jenis elemen DOM.\nLetakkan kursor Anda pada referensi ke fungsi greeter, dan tekan F12 untuk masuk ke definisinya.\nPerhatikan juga bahwa Anda dapat mengklik kanan pada simbol dan menggunakan <em>refactoring</em> untuk mengganti namanya.</p>\n<p>Jenis informasi yang disediakan bekerja sama dengan <em>tool</em> untuk memudahkan pekerjaan dengan aplikasi JavaScript.\nUntuk informasi lebih lanjut tentang apa yang mungkin kita bisa lakukan dengan TypeScript, anda dapat melihat beberapa sample di situs ini.</p>\n<p><img src=\"/images/docs/greet_person.png\" alt=\"Visual Studio picture\"></p>","headings":[{"value":"Memasang TypeScript","depth":2},{"value":"Membangun berkas TypeScript pertamamu","depth":2},{"value":"Mengkompilasi kodemu","depth":2},{"value":"Jenis Anotasi","depth":2},{"value":"Interfaces","depth":2},{"value":"Kelas","depth":2},{"value":"Menjalankan aplikasi web TypeScript-mu","depth":2}],"frontmatter":{"permalink":"/id/docs/handbook/typescript-tooling-in-5-minutes.html","title":"TypeScript Tooling dalam 5 menit","disable_toc":null,"handbook":null,"oneline":"Sebuah tutorial untuk memahami cara membuat situs web kecil dengan TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"0typescript-tooling-dalam-5-menit","slug":"/id/docs/handbook/typescript-tooling-in-5-minutes.html","repoPath":"/packages/documentation/copy/id/tutorials/TypeScript Tooling in 5 minutes.md","lang":"id","modifiedTime":"2020-11-23T10:39:15.627Z"}},"staticQueryHashes":[]}