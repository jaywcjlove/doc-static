{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/functions-with-javascript/typing-functions.ts.html","result":{"pageContext":{"name":"Typing Functions","title":"Typing Functions","lang":"id","html":" Fitur penyimpulan tipe data yang dimiliki TypeScript\n dapat meningkatkan kemampuan Anda secara drastis, namun\n terdapat banyak cara lain untuk mendokumentasikan\n fungsi Anda dengan lebih rinci. \n\n Salah satu titik awal yang baik adalah parameter opsional,\n yang merupakan sebuah cara untuk memberitahu orang lain\n bahwa Anda tidak wajib untuk meneruskan parameter.\n\n<code><pre>\nlet i = 0;\nconst tambahkanIndeks = (nilai?: number) => {\n  i += nilai === undefined ? 1 : nilai;\n};\n\n// Fungsi tersebut dapat dipanggil dengan cara:\n\ntambahkanIndeks();\ntambahkanIndeks(0);\ntambahkanIndeks(3);\n\n</pre></code>\n// Anda dapat menjadikan fungsi sebagai parameter, dimana\n hal tersebut menyediakan fitur penyimpulan tipe data\n ketika Anda menulis fungsi tersebut.\n\n<code><pre>\nconst callbackDenganIndeks = (callback: (i: number) => void) => {\n  callback(i);\n};\n\n</pre></code>\n// Menyisipkan antar muka fungsi dapat menyebabkan kode program\n sulit dibaca. Menggunakan fitur alias pada tipe data akan\n memperbolehkan Anda memberi nama pada parameter fungsi yang diteruskan.\n\n<code><pre>\ntype callbackBilangan = (i: number) => void;\nconst callbackDenganIndeks2 = (callback: callbackBilangan) => {\n  callback(i);\n};\n\n// Fungsi tersebut dapat dipanggil seperti berikut:\n\ncallbackDenganIndeks(index => {\n  console.log(index);\n});\n\n</pre></code>\n// Dengan menyorot indeks di atas, Anda dapat melihat bagaimana\n TypeScript telah menyimpulkan indeks sebagai angka dengan tepat.\n\n Penyimpulan tipe data TypeScript juga dapat dijalankan ketika\n meneruskan sebuah fungsi sebagai sebuah _reference_. Untuk\n menunjukkan hal tersebut, kita akan menggunakan sebuah fungsi\n yang mengubah sebuah angka menjadi sebuah _string_:\n\n<code><pre>\nconst angkaKeString = (n: number) => {\n  return n.toString();\n};\n\n</pre></code>\n// Fungsi tersebut dapat digunakan pada `map` dalam sebuah\n _array_ untuk mengubah seluruh angka menjadi sebuah sebuah\n _string_. Jika Anda menyorot `angkaSebagaiString` di bawah ini,\n Anda dapat melihat tipe data yang diharapkan.\n<code><pre>\nconst angkaSebagaiString = [1, 4, 6, 10].map(i => angkaKeString(i));\n\n</pre></code>\n// Kita dapat menyingkat penulisan kode program dengan\n langsung meneruskan fungsi dan mendapatkan hasil yang sama\n namun dengan kode program yang lebih terfokus:\n<code><pre>\nconst angkaSebagaiStringTerse = [1, 4, 6, 10].map(angkaKeString);\n\n</pre></code>\n// Anda bisa saja memiliki fungsi yang mampu menerima banyak\n tipe data sekaligus, namun Anda hanya tertarik pada beberapa\n atribut. Kasus tersebut merupakan contoh kasus yang berguna\n untuk _indexed signatures_ pada tipe data. Tipe data di bawah\n ini mendeklarasikan bahwa fungsi ini dapat dipanggil\n menggunakan objek apapun selama objek tersebut memiliki\n atribut `nama`:\n\n<code><pre>\ninterface SeluruhObjekBernama {\n  nama: string;\n  [key: string]: any;\n}\n\nconst cetakNama = (input: SeluruhObjekBernama) => { };\n\ncetakNama({ nama: \"joey\" });\ncetakNama({ nama: \"joey\", umur: 23 });\n\n</pre></code>\n// Apabila Anda ingin mempelajari mengenai _index-signatures_\n kami merekomendasikan:\n\n https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks\n https://basarat.gitbooks.io/typescript/docs/types/index-signatures.html\n\n Anda juga dapat memperbolehkan perilaku TypeScript\n seperti ini dimanapun dengan menyetel `suppressExcessPropertyError`\n pada `tsconfig` - namun, orang lain tidak dapat mengetahui\n hal tersebut apabila API ini dimatikan.\n\n Fungsi dalam JavaScript dapat menerima berbagai parameter.\n Terdapat dua cara yang umum digunakan untuk mendeskripsikan\n hal tersebut: tipe data gabungan untuk kembalian / masukan, dan\n _function overload_.\n\n Menggunakan tipe data gabungan pada parameter Anda merupakan\n pilihan yang masuk akal apabila hanya ada satu atau dua perubahan\n dan dokumentasi kode program tidak perlu diubah apabila fungsi\n berubah.\n\n<code><pre>\nconst fungsiBooleanAtauAngka = (input: boolean | number) => { };\n\nfungsiBooleanAtauAngka(true);\nfungsiBooleanAtauAngka(23);\n\n</pre></code>\n// Namun, _function overload_ menyediakan sintaks\n yang lebih luas untuk parameter dan tipe data kembalian.\n<code><pre>\ninterface fungsiBooleanAtauAngkaAtauString {\n  /** Menerima sebuah boolean, mengembalikan sebuah boolean */\n  (input: boolean): boolean;\n  /** Menerima sebuah angka, mengembalikan sebuah angka */\n  (input: number): number;\n  /** Menerima sebuah _string_, mengembalikan sebuah _string_ */\n  (input: string): boolean;\n}\n\n</pre></code>\n// Apabila ini merupakan kali pertama Anda melihat `declare`,\n `declare` memperbolehkan Anda untuk memberi tahu TypeScript\n bahwa sesuatu memang ada walaupun benda tersebut tidak\n ada pada waktu eksekusi berkas ini. Hal tersebut berguna\n untuk memetakan kode program yang memiliki efek samping\n namun sangat berguna pada saat demonstrasi program\n yang membutuhkan banyak kode program untuk mengimplementasikannya.\n\n<code><pre>\ndeclare const fungsiBooleanAtauAngkaAtauString: fungsiBooleanAtauAngkaAtauString;\n\nconst nilaiBoolean = fungsiBooleanAtauAngkaAtauString(true);\nconst nilaiAngka = fungsiBooleanAtauAngkaAtauString(12);\nconst nilaiBoolean2 = fungsiBooleanAtauAngkaAtauString(\"string\");\n\n</pre></code>\n// Apabila Anda menyorot nilai-nilai di atas dan fungsinya, Anda\n dapat melihat dokumentasi yang tepat beserta dengan \n tipe data kembaliannya.\n\n Menggunakan _function overload_ dapat meningkatkan kemampuan\n Anda secara drastis, namun ada perkakas lain yang dapat\n digunakan untuk tipe data masukan dan kembalian yang berbeda,\n yaitu tipe data generik.\n\n Contoh ini menyediakan sebuah cara bagi Anda untuk\n menetapkan tipe data sebagai variabel sementara\n pada deklarasi tipe data. \n\n example:generic-functions\n example:function-chaining\n","redirectHref":"id/play/?#example/typing-functions"}},"staticQueryHashes":[]}