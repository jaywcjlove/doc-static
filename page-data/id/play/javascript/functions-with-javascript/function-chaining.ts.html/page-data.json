{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/functions-with-javascript/function-chaining.ts.html","result":{"pageContext":{"name":"Function Chaining","title":"Function Chaining","lang":"id","html":"\n Fungsi berantai merupakan sebuah pola pemrograman \n yang umum digunakan di JavaScript, yang dapat membuat\n kode program Anda lebih terfokus karena nilai penengah\n yang lebih sedikit dan lebih mudah dibaca karena kualitas\n penyarangan yang dimiliki fungsi berantai.\n\n Sebuah API yang sangat umum yang bekerja menggunakan\n fungsi berantai adalah jQuery. Di bawah ini merupakan\n sebuah contoh penggunaan jQuery dengan tipe data\n dari DefinitelyTyped:\n\n<code><pre>\nimport $ from \"jquery\";\n\n// Berikut merupakan sebuah contoh penggunaan API jQuery:\n\n$(\"#navigasi\").css(\"background\", \"red\").height(300).fadeIn(200);\n\n</pre></code>\n// Jika Anda menambahkan sebuah titik pada baris kode di atas,\n Anda akan melihat daftar fungsi yang panjang. Pola pemrograman ini\n mudah diimplementasikan di JavaScript. Kuncinya adalah\n memastikan bahwa Anda selalu mengembalikan objek yang sama.\n\n Berikut merupakan contoh sebuah API yang membentuk\n sebuah rantai API. Kuncinya adalah mempunya sebuah\n fungsi luar yang menyimpan keadaan internal, dan\n sebuah objek yang mengekspos API yang selalu dikembalikan.\n\n<code><pre>\nconst jumlahkanDuaBilangan = (mulai = 1) => {\n  let n = mulai;\n\n  const api = {\n    // Implementasikan seluruh fungsi pada API Anda.\n    tambah(inc: number = 1) {\n      n += inc;\n      return api;\n    },\n\n    cetak() {\n      console.log(n);\n      return api;\n    },\n  };\n  return api;\n};\n\n</pre></code>\n// Penulisan tersebut memiliki gaya API yang sama\n seperti yang sudah kita lihat pada jQuery:\n\n<code><pre>\njumlahkanDuaBilangan(1).tambah(3).tambah().cetak().tambah(1);\n\n</pre></code>\n// Berikut merupakan sebuah contoh implementasi fungsi berantai]\n menggunakan kelas:\n\n<code><pre>\nclass TambahBilangan {\n  private n: number;\n\n  constructor(mulai = 0) {\n    this.n = mulai;\n  }\n\n  public tambah(inc = 1) {\n    this.n = this.n + inc;\n    return this;\n  }\n\n  public cetak() {\n    console.log(this.n);\n    return this;\n  }\n}\n\n// Berikut merupakan cara penggunaan kelas tersebut:\n\nnew TambahBilangan(2).tambah(3).tambah().cetak().tambah(1);\n\n</pre></code>\n// Contoh-contoh pada bagian ini menggunakan fitur\n penyimpulan tipe data TypeScript untuk menyediakan\n perkakas TypeScript pada pola pemrograman JavaScript.\n\n For more examples on this:\n\n  - example:code-flow\n","redirectHref":"id/play/?esModuleInterop=true#example/function-chaining"}},"staticQueryHashes":[]}