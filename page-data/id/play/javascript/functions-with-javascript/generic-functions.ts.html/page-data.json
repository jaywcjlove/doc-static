{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/functions-with-javascript/generic-functions.ts.html","result":{"pageContext":{"name":"Generic Functions","title":"Generic Functions","lang":"id","html":" Tipe data generik menyediakan sebuah cara untuk menggunakan tipe\n data sebagai sebuah variabel dalam tipe data lain, yaitu\n meta.\n\n Kami akan berusaha membuat contoh ini sesederhana mungkin,\n Anda dapat melakukan banyak hal dengan tipe data generik dan \n kemungkinan suatu saat Anda akan melihat kode program yang\n sangat rumit yang memanfaatkan tipe data generik - namun hal\n tersebut tidak berarti bahwa tipe data generik merupakan sesuatu\n yang rumit.\n\n Mari kita mulai dengan sebuah contoh dimana kita akan\n membungkus sebuah objek input dalam sebuah _array_. Kita\n hanya akan mengamati satu variabel pada contoh ini,\n yaitu tipe data yang diteruskan:\n\n<code><pre>\nfunction bungkusDalamArray<Tipe>(input: Tipe): Tipe[] {\n  return [input];\n}\n\n</pre></code>\n// Catatan: biasanya kita melihat `Tipe` ditulis sebagai `T`.\n Hal  tersebut merupakan kebiasaan yang mirip dengan bagaimana\n orang menggunakan `i` dalam sebuah perulangan `for` untuk\n merepresentasikan indeks. `T` biasanya merepresentasikan `Tipe`,\n sehingga kami akan menuliskan dengan lengkap demi\n kejelasan kode program.\n\n Fungsi yang kita buat akan menggunakan fitur penyimpulan\n tipe data supaya dapat menjamin tipe data yang\n diteruskan pada fungsi akan selalu sama dengan tipe\n data yang dikembalikan oleh fungsi tersebut (walaupun\n tipe data tersebut akan dibungkus dalam sebuah _array_). \n\n<code><pre>\nconst arrayString = bungkusDalamArray(\"hello generics\");\nconst arrayBilangan = bungkusDalamArray(123);\n\n</pre></code>\n// Kita dapat membuktikan bahwa jaminan tersebut\n bekerja sesuai keinginan dengan memeriksa apakah\n kita dapat menetapkan sebuah _array string_ pada sebuah\n fungsi yang seharusnya merupakan sebuah _array_ objek: \n<code><pre>\nconst bukanArrayString: string[] = bungkusDalamArray({});\n\n</pre></code>\n// Anda juga dapat melewati penyimpulan tipe data generik\n dengan menambahkan tipe data:\n<code><pre>\nconst arrayStringKedua = bungkusDalamArray<string>(\"\");\n\n</pre></code>\n// `bungkusDalamArray` memperbolehkan penggunaan semua\n tipe data, namun ada beberapa masalah dimana Anda ingin\n bahwa hanya beberapa tipe data dan turunannya yang diperbolehkan.\n Untuk mengatasi masalah tersebut, Anda dapat menetapkan\n bahwa tipe data generik harus merupakan turunan dari tipe\n data tertentu.\n\n<code><pre>\ninterface Drawable {\n  gambar: () => void;\n}\n\n</pre></code>\n// Fungsi ini menerima sekumpulan objek yang memiliki\n fungsi untuk menggambar pada layar.\n<code><pre>\nfunction gambarPadaLayar<Tipe extends Drawable>(input: Tipe[]) {\n  input.forEach((i) => i.gambar());\n}\n\nconst objekDenganGambar = [{ gambar: () => { } }, { gambar: () => { } }];\ngambarPadaLayar(objekDenganGambar);\n\n</pre></code>\n// Fungsi tersebut akan gagal dipanggil\n apabila salah satu objek tidak memiliki\n fungsi `gambar`:\n\n<code><pre>\ngambarPadaLayar([{}, { gambar: () => { } }]);\n\n</pre></code>\n// Tipe data generik akan mulai terlihat rumit ketika Anda\n memiliki banyak variabel. Berikut merupakan sebuah\n contoh sebuah fungsi _caching_ yang memperbolehkan\n Anda untuk memiliki sekumpulan tipe data input dan\n _cache_.\n\n<code><pre>\ninterface CacheHost {\n  simpan: (a: any) => void;\n}\n\nfunction simpanObjekDalamCache<Tipe, Cache extends CacheHost>(obj: Tipe, cache: Cache): Cache {\n  cache.simpan(obj);\n  return cache;\n}\n\n</pre></code>\n// Contoh tersebut merupakan contoh yang sama seperti\n contoh sebelumnya, namun memiliki sebuah parameter tambahan.\n Catatan: supaya fungsi tersebut dapat dijalankan, kita harus\n menggunakan tipe data `any`. Hal tersebut dapat diatasi\n menggunakan antar muka generik.\n\n<code><pre>\ninterface CacheHostGenerik<TipeKonten> {\n  simpan: (a: TipeKonten) => void;\n}\n\n</pre></code>\n// Sekarang ketika `CacheHostGeneric` digunakan, Anda\n harus menetapkan `TipeKonten`.\n\n<code><pre>\nfunction simpanObjekBertipeDataPadaCache<Type, Cache extends CacheHostGenerik<Type>>(obj: Type, cache: Cache): Cache {\n  cache.simpan(obj);\n  return cache;\n}\n\n</pre></code>\n// Contoh-contoh di atas sudah menjelaskan sintaks tipe data generik\n secara sekilas. Namun, tipe data generik mampu memastikan bahwa\n kode program yang Anda buat lebih aman. Hal tersebut merupakan\n kompromi, bahwa Anda memiliki lebih banyak pengetahuan sekarang.\n Ketika Anda menyediakan API untuk orang lain, tipe data generik\n menyediakan sebuah cara yang fleksibel yang memperbolehkan\n orang lain untuk menggunakan tipe data mereka sendiri\n dengan dukungan fitur penyimpulan tipe data.\n\n Anda dapat melihat contoh-contoh lain tentang tipe data generik\n dengan kelas dan antar muka melalui: \n\n example:advanced-classes\n example:typescript-with-react\n https://www.typescriptlang.org/docs/handbook/generics.html\n","redirectHref":"id/play/?#example/generic-functions"}},"staticQueryHashes":[]}