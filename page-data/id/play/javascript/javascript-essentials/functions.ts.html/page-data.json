{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/javascript-essentials/functions.ts.html","result":{"pageContext":{"name":"Functions","title":"Functions","lang":"id","html":"\n Ada beberapa cara untuk mendeklarasikan fungsi di\n JavaScript. Mari kita lihat fungsi yang menambahkan dua\n angka bersama:\n\n Membuat fungsi dalam lingkup global yang disebut addOldSchool\n<code><pre>\nfunction addOldSchool(x, y) {\n  return x + y;\n}\n\n</pre></code>\n// Anda dapat memindahkan nama fungsi ke variabel\n nama juga\n<code><pre>\nconst anonymousOldSchoolFunction = function (x, y) {\n  return x + y;\n};\n\n</pre></code>\n// Anda juga dapat menggunakan singkatan panah-gemuk (_fat-arrow_) \n untuk suatu fungsi\n<code><pre>\nconst addFunction = (x, y) => {\n  return x + y;\n};\n\n</pre></code>\n// Kita akan fokus pada cara terakhir, tapi semuanya\n berlaku untuk ketiga format termasuk dua yang sebelumnya.\n\n TypeScript menyediakan sintaks tambahan yang ditambahkan ke\n definisi fungsi dan menawarkan petunjuk tentang tipe data apa\n diharapkan oleh fungsi ini.\n\n Selanjutnya adalah versi paling terbuka dari fungsi add, versi ini\n mengatakan bahwa add mengambil dua masukan dari jenis \n apa pun: dimana masukan ini bisa berupa _string_, angka atau objek \n yang telah Anda buat.\n\n<code><pre>\nconst add1 = (x: any, y: any) => {\n  return x + y;\n};\nadd1(\"Hello\", 23);\n\n</pre></code>\n// Ini adalah JavaScript yang sah (_string_ dapat ditambahkan\n seperti ini misalnya) tetapi tidak optimal untuk fungsi kita\n yang kita tahu adalah angka, jadi kita akan mengonversi x dan\n y hanya menjadi angka.\n\n<code><pre>\nconst add2 = (x: number, y: number) => {\n  return x + y;\n};\nadd2(16, 23);\nadd2(\"Hello\", 23);\n\n</pre></code>\n// Bagus. Kita mendapatkan kesalahan ketika ada selain angka\n yang diteruskan ke dalam fungsi. Jika Anda mengarahkan kursor \n ke kata add2 di atas, Anda akan melihat bahwa TypeScript \n mendeskripsikannya sebagai:\n\n const add2: (x: number, y: number) => number\n\n Di mana ia menyimpulkan bahwa ketika dua input merupakan\n nomor, maka satu-satunya jenis pengembalian yang mungkin adalah nomor.\n Ini bagus, Anda tidak perlu menulis sintaks tambahan.\n Mari kita lihat apa yang diperlukan untuk melakukan itu:\n\n<code><pre>\nconst add3 = (x: number, y: number): string => {\n  return x + y;\n};\n\n</pre></code>\n// Fungsi ini gagal karena kita memberi tahu TypeScript bahwa TypeScipt\n seharusnya menerima nilai kembali dalam bentuk _string_, tetapi \n ternyata fungsinya tidak memenuhi janji itu.\n\n<code><pre>\nconst add4 = (x: number, y: number): number => {\n  return x + y;\n};\n\n</pre></code>\n// Ini adalah versi yang sangat eksplisit dari add2 - ada\n kasus ketika Anda ingin menggunakan sintaks tipe pengembalian eksplisit\n untuk memberi diri Anda ruang untuk bekerja sebelumnya\n Anda memulai. Agak mirip seperti bagaimana test-driven development\n merekomendasikan memulai dengan tes yang gagal, tetapi dalam kasus ini\n ini dengan bentuk fungsi yang gagal.\n\n Contoh ini hanyalah dasar, Anda dapat mempelajari lebih banyak lagi\n tentang bagaimana fungsi bekerja di TypeScript di buku pegangan \n (handbook) dan di dalam bagian JavaScript Fungsional dari contoh:\n\n https://www.typescriptlang.org/docs/handbook/functions.html\n example:function-chaining\n\n Dan untuk melanjutkan tur dasar-dasar JavaScript,\n kita akan melihat bagaimana aliran kode memengaruhi tipe data TypeScript:\n example:code-flow\n","redirectHref":"id/play/?noImplicitAny=false#example/functions"}},"staticQueryHashes":[]}