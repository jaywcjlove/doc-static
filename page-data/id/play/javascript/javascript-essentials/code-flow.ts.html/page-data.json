{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/javascript-essentials/code-flow.ts.html","result":{"pageContext":{"name":"Code Flow","title":"Code Flow","lang":"id","html":"\n\n Bagaimana kode mengalir di dalam file JavaScript dapat mempengaruhi\n tipe data di seluruh program kita.\n\n<code><pre>\nconst users = [{ name: \"Ahmed\" }, { name: \"Gemma\" }, { name: \"Jon\" }];\n\n// Kita akan melihat apakah kita dapat menemukan pengguna bernama \"jon\".\nconst jon = users.find(u => u.name === \"jon\");\n\n</pre></code>\n// Dalam kasus di atas, 'find' bisa gagal. Dalam hal ini kita\n tidak memiliki objek. Ini menghasilkan sebuah tipe data:\n\n {name: string} | undefined\n\n Jika Anda mengarahkan mouse ke tiga penggunaan 'jon' berikut,\n Anda akan melihat bagaimana tipe berubah tergantung di mana kata tersebut berada:\n\n<code><pre>\nif (jon) {\n  jon;\n} else {\n  jon;\n}\n\n</pre></code>\n// Tipe '{name: string} | undefined' menggunakan fitur TypeScript\n yang disebut tipe data gabungan (_union types_). Tipe data gabungan \n adalah cara untuk nyatakan bahwa sebuah objek bisa \n menjadi salah satu dari banyak hal.\n \n Tanda pipa (|) bertindak sebagai pemisah antara tipe data yang berbeda.\n Sifat dinamis JavaScript berarti bahwa banyak fungsi\n menerima dan dan mengembalikan objek dari tipe data yang tidak terkait \n dan kita perlu untuk dapat mengungkapkan tipe data mana yang mungkin \n kita hadapi.\n\n Kita bisa menggunakan ini dalam beberapa cara. Mari kita mulai dengan melihat\n himpunan (_array_) yang nilainya memiliki tipe berbeda.\n\n<code><pre>\nconst identifiers = [\"Hello\", \"World\", 24, 19];\n\n</pre></code>\n// Kita bisa menggunakan sintaks javascript 'type x === y' untuk\n memeriksa jenis elemen pertama. Anda dapat mengarahkan kursor ke atas\n 'randomIdentifier' di bawah untuk melihat perubahannya\n lokasi berbeda\n\n<code><pre>\nconst randomIdentifier = identifiers[0];\nif (typeof randomIdentifier === \"number\") {\n  randomIdentifier;\n} else {\n  randomIdentifier;\n}\n\n</pre></code>\n// Analisis aliran kontrol ini berarti kita dapat menulis\n JavaScript polos, dan TypeScript akan mencoba memahami bagaimana file\n jenis kode akan berubah di lokasi berbeda.\n\n Untuk mempelajari lebih lanjut tentang analisis aliran kode:\n - example:type-guards\n\n Untuk melanjutkan membaca contoh-contoh lain, Anda dapat melompat ke\n beberapa tempat lain sekarang:\n\n - Modern JavaScript: example:immutability\n - Type Guards: example:type-guards\n - Functional Programming with JavaScript example:function-chaining\n","redirectHref":"id/play/?strictNullChecks=true#example/code-flow"}},"staticQueryHashes":[]}