{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html","result":{"pageContext":{"name":"Objects and Arrays","title":"Objects and Arrays","lang":"id","html":"\n Objek JavaScript merupakan kumpulan nilai-nilai yang\n dibungkus menggunakan kata kunci yang memiliki nama.\n\n<code><pre>\nconst userAccount = {\n  name: \"Kieron\",\n  id: 0,\n};\n\n</pre></code>\n// Anda dapat menggabungkan objek-objek ini untuk\n membuat model data yang lebih besar dan lebih rumit.\n\n<code><pre>\nconst pie = {\n  type: \"Apple\",\n};\n\nconst purchaseOrder = {\n  owner: userAccount,\n  item: pie,\n};\n\n</pre></code>\n// Jika Anda menggunakan tetikus untuk mengarahkan\n kursor ke beberapa kata ini (coba arahkan kursor\n ke objek purchaseOrder di atas) Anda dapat melihat\n bagaimana TypeScript menafsirkan JavaScript Anda menjadi\n tipe data berlabel.\n\n Nilai dapat diakses melalui \".\", Jadi untuk mendapatkan\n nama pengguna untuk pesanan pembelian:\n<code><pre>\nconsole.log(purchaseOrder.item.type);\n\n</pre></code>\n// Jika Anda mengarahkan kursor tetikus ke setiap bagian kode\n antara tanda (), Anda dapat melihat TypeScript menampilkan lebih banyak\n informasi tentang tiap-tiap bagian. Coba tulis ulang kode di bawah ini:\n\n Salin ini di baris berikutnya, karakter demi karakter:\n\n purchaseOrder.item.type\n\n TypeScript memberikan umpan balik ke area bermain\n tentang objek JavaScript apa saja yang tersedia di berkas ini\n dan memungkinkan Anda menghindari kesalahan ketik dan melihat tambahan\n informasi tanpa harus mencarinya di tempat lain.\n\n TypeScript juga menawarkan fitur yang sama untuk himpunan (_array_).\n Berikut adalah himpunan yang isinya hanya pesanan pembelian \n yang kita buat.\n\n<code><pre>\nconst allOrders = [purchaseOrder];\n\n</pre></code>\n// Jika Anda mengarahkan kursor ke allOrders, Anda dapat\n mengetahui bahwa itu adalah himpunan karena info _hover_ \n diakhiri dengan []. Anda dapat mengakses\n urutan pertama menggunakan tanda kurung siku dengan indeks\n (mulai dari nol).\n\n<code><pre>\nconst firstOrder = allOrders[0];\nconsole.log(firstOrder.item.type);\n\n</pre></code>\n// Cara alternatif untuk mendapatkan objek adalah dengan memencet (_popping_)\n himpunan untuk menghapus objek. Dengan melakukan ini, kita bisa \n menghapus objek dari himpunan, dan mengembalikan objek. Ini disebut\n mutasi himpunan, karena mengubah data di dalamnya.\n\n<code><pre>\nconst poppedFirstOrder = allOrders.pop();\n\n</pre></code>\n// Sekarang allOrders menjadi kosong. Mutasi data dapat bermanfaat untuk\n banyak hal, tapi satu cara untuk mengurangi kerumitan di\n basis kode Anda adalah dengan menghindari mutasi. TypeScript menawarkan cara\n untuk mendeklarasikan himpunan hanya baca (_read-only_):\n\n Membuat tipe data berdasarkan bentuk pesanan pembelian:\n<code><pre>\ntype PurchaseOrder = typeof purchaseOrder;\n\n// Membuat himpunan pesanan pembelian yang hanya bisa dibaca\nconst readonlyOrders: readonly PurchaseOrder[] = [purchaseOrder];\n\n</pre></code>\n// Ya! Agak lebih banyak kode memang. Ada empat\n hal-hal baru di sini:\n\n type PurchaseOrder - Menyatakan tipe data baru ke TypeScript.\n\n typeof - Gunakan sistem inferensi tipe data (_type inference_) untuk \n menyetel tipe data berdasarkan konstanta yang diteruskan berikutnya.\n\n purchaseOrder - Dapatkan variabel purchaseOrder dan beri tahu\n TypeScript ini adalah bentuk dari semua\n objek didalam himpunan pesanan.\n\n readonly - Objek ini tidak mendukung mutasi, sekali\n objek ini dibuat maka isi himpunan\n akan selalu sama.\n\n Sekarang jika Anda mencoba untuk keluar dari readonlyOrders, TypeScript\n akan memunculkan kesalahan.\n\n<code><pre>\nreadonlyOrders.pop();\n\n</pre></code>\n// Anda bisa menggunakan _readonly_ di semua tempat,\n sedikit lebih banyak sintaks tambahan di sana-sini, tapi sintaks\n ini memberikan lebih banyak keamanan ekstra.\n\n Anda dapat mengetahui lebih lanjut tentang readonly:\n  - https://www.typescriptlang.org/docs/handbook/interfaces.html#readonly-properties\n  - https://basarat.gitbooks.io/typescript/content/docs/types/readonly.html\n\n Dan Anda bisa terus belajar tentang JavaScript dan\n TypeScript didalam contoh tentang fungsi:\n example:functions\n\n Atau jika Anda ingin tahu lebih banyak tentang immutability:\n example:immutability\n","redirectHref":"id/play/?strict=false#example/objects-and-arrays"}},"staticQueryHashes":[]}