{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/external-apis/typescript-with-web.js.html","result":{"pageContext":{"name":"TypeScript with Web","title":"TypeScript with Web","lang":"id","html":"\n DOM (_Document Object Model_) merupakan API dasar ketika\n ingin bekerja dengan sebuah halaman web, dan TypeScript\n memiliki dukungan yang baik untuk API tersebut.\n\n Mari kita buat sebuah _popover_ untuk tampil ketika\n Anda menekan tombol \"Run\" pada _toolbar_ di atas.\n\n<code><pre>\nconst popover = document.createElement(\"div\");\npopover.id = \"example-popover\";\n\n</pre></code>\n// Perhatikan bahwa tipe data _popover_ disimpulkan dengan tepat\n menjadi sebuah HTMLDivElement karena kita memberikan elemen \"div\"\n secara spesifik.\n\n Supaya kode program dapat dijalankan kembali, kita akan\n membuat sebuah fungsi untuk menghapus _popover_ jika\n _popover_ sudah ada pada halaman web.\n\n<code><pre>\nconst hapusPopover = () => {\n  const popoverYangSudahAda = document.getElementById(popover.id);\n  if (popoverYangSudahAda && popoverYangSudahAda.parentElement) {\n    popoverYangSudahAda.parentElement.removeChild(existingPopover);\n  }\n};\n\n// Sekarang, panggil fungsi tersebut.\n\nhapusPopover();\n\n</pre></code>\n// Kita dapat mengatur _inline styles_ pada elemen\n melalui properti `.style` pada sebuah HTMLElement\n - seluruh properti tersebut memiliki definisi tipe data.\n\n<code><pre>\npopover.style.backgroundColor = \"#0078D4\";\npopover.style.color = \"white\";\npopover.style.border = \"1px solid black\";\npopover.style.position = \"fixed\";\npopover.style.bottom = \"10px\";\npopover.style.left = \"20px\";\npopover.style.width = \"200px\";\npopover.style.height = \"100px\";\npopover.style.padding = \"10px\";\n\n</pre></code>\n// Termasuk atribut CSS yang kurang dikenal atau sudah\n tidak didukung lagi.\n<code><pre>\npopover.style.webkitBorderRadius = \"4px\";\n\n</pre></code>\n// Untuk menambahkan konten pada _popover_, kita akan\n menambahkan sebuah elemen paragraf dan menggunakan\n elemen tersebut untuk menambahkan beberapa teks.\n\n<code><pre>\nconst pesan = document.createElement(\"p\");\npesan.textContent = \"Ini adalah contoh popover\";\n\n</pre></code>\n// Dan kita juga akan menambahkan sebuah tombol\n untuk menutup _popover_.\n\n<code><pre>\nconst tombolTutup = document.createElement(\"a\");\ntombolTutup.textContent = \"X\";\ntombolTutup.style.position = \"absolute\";\ntombolTutup.style.top = \"3px\";\ntombolTutup.style.right = \"8px\";\ntombolTutup.style.color = \"white\";\n\ntombolTutup.onclick = () => {\n  hapusPopover();\n};\n\n// Lalu tambahkan seluruh elemen di atas pada halaman web.\npopover.appendChild(pesan);\npopover.appendChild(tombolTutup);\ndocument.body.appendChild(popover);\n\n</pre></code>\n// Apabila Anda menekan tombol \"Run\" di atas, maka sebuah _popup_\n seharusnya muncul pada bagian kiri bawah penjelajah web,\n yang Anda dapat tutup dengan menekan \"x\" yang ada pada\n bagian kanan atas dari _popup_.\n\n Contoh ini menunjukkan bagaimana Anda dapat menggunakan\n API DOM pada JavaScript - namun juga menggunakan TypeScript\n untuk menyediakan dukungan perkakas yang baik.\n\n Ada sebuah contoh lain yang lebih luas tentang dukungan\n perkakas TypeScript dengan WebGL yang dapat dilihat di sini:\n example:typescript-with-webgl\n\n There is an extended example for TypeScript tooling with\n WebGL available here: example:typescript-with-webgl\n","redirectHref":"id/play/?#example/typescript-with-web"}},"staticQueryHashes":[]}