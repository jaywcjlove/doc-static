{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html","result":{"pageContext":{"name":"Checking Unions with Index Signatures","title":"Checking Unions with Index Signatures","lang":"id","html":"\n Pada TypeScript versi sebelumnya, fitur pemeriksaan kode tidak akan\n memastikan _field_ yang tidak dideklarasikan dalam sebuah _union_\n sesuai dengan tipe apapun yang terindeks pada _union_.\n\n Anda dapat mempelajari lebih lanjut tentang tipe yang\n terindeks melalui: example:indexed-types\n\n Sebagai contoh, tipe IdentifierCache dibawah ini menyatakan bahwa\n setiap _key_ pada objek tersebut merupakan sebuah angka:\n\n<code><pre>\ntype IdentifierCache = { [key: string]: number };\n\n</pre></code>\n// Hal tersebut menyebabkan ekspresi dibawah ini menjadi tidak valid,\n karena 'file_a' memiliki nilai sebuah _string_.\n\n<code><pre>\nconst cacheDenganString: IdentifierCache = { file_a: \"12343\" };\n\n</pre></code>\n// Namun, ketika Anda menyatakan hal tersebut dalam sebuah _union_,\n maka pemeriksaan kode tidak akan dijalankan:\n\n<code><pre>\nlet cachePengguna: IdentifierCache | { index: number };\ncachePengguna = { file_pertama: 5, file_kedua: \"abc\" };\n\n</pre></code>\n// Masalah tersebut sudah diperbaiki, dan akan ada\n sebuah pesan kesalahan mengenai 'file_kedua' dari kompilator.\n\n Perbaikan tersebut juga sudah mampu mengangani kasus dimana _key_\n memiliki tipe yang berbeda, contohnya ([key: string] dan [key: number])\n\n<code><pre>\ntype IdentifierResponseCache = { [key: number]: number };\n\nlet cacheHasil: IdentifierCache | IdentifierResponseCache;\ncacheHasil = { file_pertama: \"abc\" };\n","redirectHref":"id/play/?ts=3.8.3#example/checking-unions-with-index-signatures"}},"staticQueryHashes":[]}