{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html","result":{"pageContext":{"name":"Private Class Fields","title":"Private Class Fields","lang":"id","html":"\n TypeScript versi 3.8, menambahkan atribut `private`, dimana hal tersebut\n merupakan sebuah cara untuk mendeklarasikan sebuah atribut kelas\n yang tidak dapat diakses diluar kelas tempat atribut tersebut \n dinyatakan, termasuk oleh kelas turunannya.\n\n Sebagai contoh, kelas Orang di bawah ini tidak mengizinkan siapapun\n menggunakan objek dari kelas tersebut untuk membaca nama depan,\n nama belakang, atau prefiks\n\n<code><pre>\nclass Orang {\n  #namaDepan: string;\n  #namaBelakang: string;\n  #prefiks: string;\n\n  constructor(namaDepan: string, namaBelakang: string, prefiks: string) {\n    this.#namaDepan = namaDepan;\n    this.#namaBelakang = namaBelakang;\n    this.#prefiks = prefiks;\n  }\n\n  sapa() {\n    // Di Islandia, nama lengkap lebih umum digunakan dibandingkan\n    // bentuk [prefix] [nama belakang]\n    // https://www.w3.org/International/questions/qa-personal-names#patronymic\n    if (navigator.languages[0] === \"is\") {\n      console.log(`Góðan dag, ${this.#namaDepan} ${this.#namaBelakang}`);\n    } else {\n      console.log(`Halo, ${this.#prefiks} ${this.#namaBelakang}`);\n    }\n  }\n}\n\nlet jeremy = new Orang(\"Jeremy\", \"Bearimy\", \"Mr\");\n\n// Anda tidak dapat mengakses atribut `private` di luar kelas tersebut:\n\n// Sebagai contoh, ekspresi di bawah ini tidak valid:\nconsole.log(jeremy.#namaBelakang);\n\n// Begitu pun ekspresi di bawah ini:\nconsole.log(\"Nama belakang orang adalah:\", jeremy[\"#namaBelakang\"]);\n\n</pre></code>\n// Pertanyaan umum yang seringkali kami dapatkan adalah\n \"Mengapa Anda memilih cara ini dibandingkan kata kunci `private` pada\n sebuah atribut kelas?\" - mari kita bandingkan kedua hal tersebut\n dengan membandingkan cara kerjanya pada TypeScript sebelum versi 3.8: \n\n<code><pre>\nclass Anjing {\n  private _nama: string;\n  constructor(nama: string) {\n    this._nama = nama;\n  }\n}\n\nlet oby = new Anjing(\"Oby\");\n</pre></code>\n// Pernyataan tersebut tidak memperbolehkan Anda mengakses atribut\n nama menggunakan notasi titik.\n<code><pre>\noby._nama = \"Spot\";\n</pre></code>\n// Namun, TypeScript memperbolehkan pengaksesan atribut sebagai\n jalan keluarnya.\n<code><pre>\noby[\"_nama\"] = \"Cherny\";\n\n</pre></code>\n// Referensi TypeScript pada sebuah atribut `private` hanya tersedia\n pada tingkat tipe saja yang berarti Anda hanya dapat mempercayai\n izin akses sampai tingkat tersebut saja. Melalui atribut `private`\n yang akan menjadi bagian dari bahasa JavaScript, maka Anda dapat\n membuat jaminan yang lebih baik mengenai visibilitas pada kode\n program Anda.\n\n Kami tidak berencana untuk menghapus dukungan terhadap\n kata kunci `private` pada TypeScript, sehingga kode program\n Anda tetap dapat dijalankan, namun sekarang Anda dapat menulis\n kode program yang lebih dekat dengan bahasa JavaScript.\n\n Anda dapat mempelajari lebih lanjut tentang atribut kelas\n pada proposal tc39\n https://github.com/tc39/proposal-class-fields/\n dan catatan rilis _beta_:\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#ecmascript-private-fields\n","redirectHref":"id/play/?ts=3.8.3#example/private-class-fields"}},"staticQueryHashes":[]}