{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html","result":{"pageContext":{"name":"Variadic Tuples","title":"Variadic Tuples","lang":"id","html":"\n _Variadic tuples_ memberikan kemampuan pada _tuple_ untuk menangani\n operator _rest_ (...) untuk memberikan tipe data pada pemeriksa tipe\n data dengan cara yang mirip dengan tipe generik.\n\n _Variadic tuples_ merupakan topik yang rumit, sehingga Anda tidak perlu\n khawatir bila Anda merasa kebingungan. Contoh di bawah berdasarkan\n example:generic-functions dan example:tuples.\n\n Sebagai permulaan, di bawah ini merupakan sebuah _variadic tuple_ yang\n akan selalu memberikan prefiks pada _tuple_ lain dengan sebuah bilangan:\n\n<code><pre>\ntype AddMax<T extends unknown[]> = [max: number, ...rest: T];\n</pre></code>\n//          ^ Tipe generik digunakan untuk\n            membatasi T\n                                                ^ Operator `...` digunakan\n                                                  untuk mengetahui letak\n                                                  penggabungan\n\n Tipe data di atas dapat digunakan untuk komposisi:\n<code><pre>\ntype MaxMin = AddMax<[min: number]>\ntype MaxMinDiameter = AddMax<[min: number, diameter: number]>\n\n// Hal yang sama juga digunakan setelah penggunaan _tuple_:\ntype SuffixDIContext<T extends unknown[]> = [...first: T, context: any];\ntype DIContainer = SuffixDIContext<[param: string]>\n\n</pre></code>\n// Mekanisme ini dapat digabungkan dengan banyak parameter masukan.\n Sebagai contoh, fungsi di bawah ini menggabungkan dua buah _array_\n namun menggunakan '\\0' sebagai karakter yang menjadi tanda\n dimana _array_ dimulai dan berakhir.\n<code><pre>\nfunction joinWithNullTerminators<T extends unknown[], U extends unknown[]>(t: [...T], u: [...U]) {\n    return ['\\0', ...t, '\\0', ...u, '\\0'] as const;\n}\n\n</pre></code>\n// TypeScript dapat menyimpulkan tipe data kembalian dari sebuah\n fungsi seperti berikut:\n<code><pre>\nconst result = joinWithNullTerminators(['variadic', 'types'], [\"terminators\", 3]);\n\n</pre></code>\n//\n Perkakas ini memungkinkan kita untuk memberi tipe data\n pada sebuah fungsi seperti fungsi untuk _currying_\n yang merupakan sebuah konsep yang sering digunakan\n pada pemrograman fungsional:\n\n<code><pre>\nfunction curry<T extends unknown[], U extends unknown[], R>(f: (...args: [...T, ...U]) => R, ...a: T) {\n    return (...b: U) => f(...a, ...b);\n}\n\n</pre></code>\n// Ada 3 parameter generik:\n - T: Kumpulan masukan yang digunakan pada fungsi _curry_\n - U: Kumpulan masukan yang tidak digunakan pada fungsi\n      _curry_, dan harus diteruskan pada fungsi yang dikembalikan\n - R: Tipe kembalian dari fungsi yang diberikan\n\n<code><pre>\nconst sum = (left: number, right: number,) => left + right\n\nconst a = curry(sum, 1, 2)\nconst b = curry(sum, 1)(2)\nconst c = curry(sum)(1, 2)\n\n</pre></code>\n// Anda dapat mempelajari lebih lanjut tentang _variadic tuples_,\n beserta dengan contoh kode programnya pada:\n https://github.com/microsoft/TypeScript/pull/39094\n\n","redirectHref":"id/play/?ts=4.0.2#example/variadic-tuples"}},"staticQueryHashes":[]}