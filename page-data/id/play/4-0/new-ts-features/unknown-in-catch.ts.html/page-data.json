{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html","result":{"pageContext":{"name":"Unknown in Catch","title":"Unknown in Catch","lang":"id","html":"\n Dikarenakan JavaScript memperbolehkan untuk menggunakan\n tipe data apapun, TypeScript tidak mendukung\n deklarasi tipe data pada sebuah galat (`Error()`)\n\n<code><pre>\ntry {\n  // ..\n} catch (e) { }\n\n</pre></code>\n// Secara historis, hal tersebut menandakan bahwa `e` dalam\n blok `catch` akan dianggap sebagai `any`. Anggapan tersebut\n memberikan kebebasan untuk mengakses properti apapun.\n Pada TypeScript versi 4.0, kami telah melonggarkan \n batasan pada pernyataan tipe pada klausa `catch` sehingga\n tipe `any` dan `unknown` merupakan tipe yang valid.  \n\n Perilaku yang sama dengan `any`:\n<code><pre>\ntry {\n  // ..\n} catch (e) {\n  e.stack;\n}\n\n// Perilaku eksplisit dengan `unknown`:\n\ntry {\n  // ..\n} catch (e) {\n  // Anda tidak dapat menggunakan `e` sama sekali\n  // sampai sistem tipe data mengetahui tipe data dari `e`.\n  // Anda dapat mempelajari lebih lanjut mengenai\n  // hal tersebut melalui example:unknown-and-never.\n  e.stack;\n\n  if (e instanceof SyntaxError) {\n    e.stack;\n  }\n}\n","redirectHref":"id/play/?ts=4.0.2#example/unknown-in-catch"}},"staticQueryHashes":[]}