{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html","result":{"pageContext":{"name":"Assertion Functions","title":"Assertion Functions","lang":"id","html":"\n Karena sifat JavaScript yang fleksibel, menambahkan pemeriksaan\n tipe data merupakan ide yang bagus untuk memastikan asumsi Anda\n\n Hal-hal ini biasanya disebut _assertions_ (atau _invariants_)\n _Assertions_ merupakan sebuah fungsi kecil yang mengeluarkan pesan\n kesalahan dini ketika variabel yang diberikan tidak sesuai\n dengan apa yang Anda harapkan.\n\n Node menyediakan fungsi bawaan untuk menyelesaikan masalah ini.\n Fungsi tersebut bernama `assert` dan fungsi tersebut tersedia\n tanpa harus melakukan `import` terlebih dahulu.\n\n Sekarang, kita akan membuat fungsi `assert` kita sendiri.\n Kode program di bawah ini akan mendeklarasikan fungsi yang\n menegaskan bahwa ekspresi yang bernama `value` bernilai\n `true`.\n<code><pre>\ndeclare function assert(value: unknown): asserts value;\n\n</pre></code>\n// Sekarang, kita akan menggunakan fungsi tersebut untuk\n memeriksa tipe dari sebuah `enum`\n<code><pre>\ndeclare const mungkinAngkaAtauString: string | number;\nassert(typeof mungkinAngkaAtauString === \"string\");\n\n</pre></code>\n// Dengan TypeScript versi 3.7, fitur analisis alur kode dapat\n menggunakan fungsi-fungsi semacam ini untuk mengetahui\n maksud dari kode program. Jadi, ketika Anda menyorot\n variabel di bawah ini - Anda dapat melihat bahwa variabel\n tersebut telah dipersempit dari sebuah _string_ atau bilangan\n menjadi hanya sebuah _string_\n\n<code><pre>\nmungkinAngkaAtauString;\n\n</pre></code>\n// Anda dapat menggunakan fungsi _assertion_ untuk menjamin\n tipe di seluruh kode program Anda, contohnya TypeScript\n mengetahui bahwa fungsi ini akan mengembalikan sebuah\n bilangan tanpa perlu penambahan tipe pada parameter\n melalui deklarasi _assert_ pada baris sebelumnya\n\n<code><pre>\nfunction perkalian(x: any, y: any) {\n    assert(typeof x === \"number\");\n    assert(typeof y === \"number\");\n\n    return x * y;\n}\n\n</pre></code>\n// Fungsi _assertion_ merupakan saudara dari _Type Guards_\n Hal yang membedakan adalah _type-guards_ mempengaruhi alur\n kode seiring berjalannya fungsi.\n\n Contohnya, kita dapat menggunakan fungsi _assertion_ untuk\n mempersempit tipe dari sebuah _enum_ seiring berjalannya\n waktu.\n\n<code><pre>\ndeclare const salahSatuDariLimaBilanganPertama: 1 | 2 | 3 | 4 | 5;\n\ndeclare function adalahGanjil(param: unknown): asserts param is 1 | 3 | 5;\ndeclare function adalahDibawahEmpat(param: unknown): asserts param is 1 | 2 | 3 | 4;\n\n// Hal ini seharusnya mempersempit _enum_ menjadi: 1 | 3 | 5\n\nadalahGanjil(salahSatuDariLimaBilanganPertama);\nsalahSatuDariLimaBilanganPertama;\n\n// Hal ini akan memotong nilai _enum_ yang mungkin menjadi: 1 | 3\n\nadalahDibawahEmpat(salahSatuDariLimaBilanganPertama);\nsalahSatuDariLimaBilanganPertama;\n\n</pre></code>\n// Hal-hal diatas adalah dasar dari beberapa fitur yang dimiliki\n oleh fungsi _assertion_ pada TypeScript versi 3.7 - Anda dapat\n mengetahui lebih lanjut dengan membaca catatan rilis TypeScript\n versi 3.7:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"id/play/?#example/assertion-functions"}},"staticQueryHashes":[]}