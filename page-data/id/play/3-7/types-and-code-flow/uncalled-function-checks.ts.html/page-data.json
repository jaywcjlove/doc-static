{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html","result":{"pageContext":{"name":"Uncalled Function Checks","title":"Uncalled Function Checks","lang":"id","html":"\n Terdapat sebuah fitur pada TypeScript versi 3.7,\n yaitu pemeriksaan pada pernyataan `if` ketika\n anda secara tidak sengaja menggunakan sebuah fungsi\n dimana seharusnya anda menggunakan nilai kembalian\n dari sebuah fungsi.\n\n Hal ini hanya berlaku bila fungsi yang dimaksud ada,\n yang menyebabkan pernyataan `if` akan selalu bernilai `true`.\n\n Di bawah ini merupakan sebuah contoh antarmuka _plugin_,\n dimana ada _callback_ yang harus ada dan _callback_ pilihan.\n<code><pre>\ninterface PengaturanPlugin {\n    pluginShouldLoad?: () => void;\n    pluginIsActivated: () => void;\n}\n\ndeclare const plugin: PengaturanPlugin;\n\n</pre></code>\n// Karena _method_ `pluginShouldLoad` bisa saja tidak ada,\n maka pemeriksaan pada pernyataan `if` sah dilakukan.\n\n<code><pre>\nif (plugin.pluginShouldLoad) {\n    // Lakukan sesuatu ketika `pluginShouldLoad` ada.\n}\n\n// Pada TypeScript versi 3.6 ke bawah, hal ini bukan merupakan sebuah kesalahan.\n\nif (plugin.pluginIsActivated) {\n    // Ingin melakukan sesuatu ketika _plugin_ diaktifkan,\n    // namun tidak dengan memanggil _method_ melainkan kita gunakan\n    // sebagai properti.\n}\n\n</pre></code>\n// _Method_ `pluginIsActivated` seharusnya selalu ada, namun TypeScript\n tetap memperbolehkan pemeriksaan pada pernyataan `if`, karena _method_\n tersebut dijalankan di dalam blok `if`.\n\n<code><pre>\nif (plugin.pluginIsActivated) {\n    plugin.pluginIsActivated();\n}\n","redirectHref":"id/play/?#example/uncalled-function-checks"}},"staticQueryHashes":[]}