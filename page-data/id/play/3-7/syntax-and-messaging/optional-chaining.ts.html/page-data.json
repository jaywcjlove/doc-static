{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html","result":{"pageContext":{"name":"Optional Chaining","title":"Optional Chaining","lang":"id","html":"\n _Optional Chaining_ mencapai konsesus TC39 Tahap 3 ketika\n TypeScript 3.7 sedang dikembangkan. _Optional Chaining_\n mengizinkan Anda untuk menulis kode yang akan langsung berhenti\n menjalankan ekspresi ketika sebuah nilai null dan undefined\n ditemukan.\n\n Akses Properti\n\n Coba bayangkan bahwa ada sebuah album dimana artis dan\n biografinya mungkin tidak tertera pada data album tersebut.\n Contohnya, sebuah album kompilasi bisa saja sama sekali\n tidak memiliki seorang artis.\n\n<code><pre>\ntype ResponAPIAlbum = {\n    judul: string;\n    artis?: {\n        nama: string;\n        biografi?: string;\n        albumSebelumnya?: string[];\n    };\n};\n\ndeclare const album: ResponAPIAlbum;\n\n</pre></code>\n// Dengan _optional chaining_, Anda dapat\n menulis kode seperti berikut:\n\n<code><pre>\nconst biografiArtis = album?.artis?.biografi;\n\n// Dibandingkan dengan:\n\nconst mungkinBiografiArtis = album.artis && album.artis.biografi;\n\n</pre></code>\n// Pada kasus ini, operator ?. akan mengambil tindakan yang berbeda bila\n dibandingkan dengan operator && karena operator && akan\n bertindak berbeda pada nilai \"falsy\" (contoh: sebuah string kosong,\n 0, NaN, dan false).\n\n _Optional chaining_ hanya akan menganggap null atau undefined\n sebagai sebuah sinyal untuk berhenti dan mengembalikan nilai undefined.\n\n Akses Elemen Opsional\n\n Properti dapat diakses melalui operator., _optional chaining_\n juga dapat digunakan dengan operator [] ketika mengakses elemen\n\n<code><pre>\nconst mungkinElemenBiografiArtis = album?.[\"artis\"]?.[\"biografi\"];\n\nconst mungkinAlbumSebelumnyaYangPertama = album?.artis?.albumSebelumnya?.[0];\n\n// Pemanggilan Opsional\n\n</pre></code>\n// Ketika berurusan dengan fungsi yang mungkin tidak ada\n pada saat program berjalan (runtime), _optional chaining_ mendukung\n kasus-kasus dimana sebuah fungsi hanya akan dipanggil\n jika fungsi tersebut ada. Hal tersebut dapat menggantikan kode yang\n biasanya ditulis seperti: if (func) func()\n\n Sebagai contoh, disini terdapat sebuah pemanggilan opsional\n pada _callback_ dari sebuah permintaan API\n\n<code><pre>\nconst panggilPembaruanMetadata = (metadata: any) => Promise.resolve(metadata); // Pemanggilan API palsu\n\nconst perbaruiMetadataAlbum = async (metadata: any, callback?: () => void) => {\n    await panggilPembaruanMetadata(metadata);\n\n    callback?.();\n};\n\n  // Anda dapat membaca lebih lanjut tentang _optional chaining_\n  // pada tulisan blog TypeScript 3.7:\n  //\n  // https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"id/play/?#example/optional-chaining"}},"staticQueryHashes":[]}