{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-2-8.html","result":{"data":{"markdownRemark":{"id":"66b6b7a1-83bc-5df7-b3ae-a0c315f5c5ee","excerpt":"Conditional Types TypeScript 2.8 introduces conditional types which add the ability to express non-uniform type mappings.\nA conditional type selects one of two…","html":"<h2 id=\"conditional-types\" style=\"position:relative;\"><a href=\"#conditional-types\" aria-label=\"conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Types</h2>\n<p>TypeScript 2.8 introduces <em>conditional types</em> which add the ability to express non-uniform type mappings.\nA conditional type selects one of two possible types based on a condition expressed as a type relationship test:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0070C1\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">U</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0070C1\">X</span><span style=\"color: #000000\"> : </span><span style=\"color: #0070C1\">Y</span></div></code></div></pre>\n<p>The type above means when <code>T</code> is assignable to <code>U</code> the type is <code>X</code>, otherwise the type is <code>Y</code>.</p>\n<p>A conditional type <code>T extends U ? X : Y</code> is either <em>resolved</em> to <code>X</code> or <code>Y</code>, or <em>deferred</em> because the condition depends on one or more type variables.\nWhether to resolve or defer is determined as follows:</p>\n<ul>\n<li>First, given types <code>T'</code> and <code>U'</code> that are instantiations of <code>T</code> and <code>U</code> where all occurrences of type parameters are replaced with <code>any</code>, if <code>T'</code> is not assignable to <code>U'</code>, the conditional type is resolved to <code>Y</code>. Intuitively, if the most permissive instantiation of <code>T</code> is not assignable to the most permissive instantiation of <code>U</code>, we know that no instantiation will be and we can just resolve to <code>Y</code>.</li>\n<li>Next, for each type variable introduced by an <code>infer</code> (more later) declaration within <code>U</code> collect a set of candidate types by inferring from <code>T</code> to <code>U</code> (using the same inference algorithm as type inference for generic functions). For a given <code>infer</code> type variable <code>V</code>, if any candidates were inferred from co-variant positions, the type inferred for <code>V</code> is a union of those candidates. Otherwise, if any candidates were inferred from contra-variant positions, the type inferred for <code>V</code> is an intersection of those candidates. Otherwise, the type inferred for <code>V</code> is <code>never</code>.</li>\n<li>Then, given a type <code>T''</code> that is an instantiation of <code>T</code> where all <code>infer</code> type variables are replaced with the types inferred in the previous step, if <code>T''</code> is <em>definitely assignable</em> to <code>U</code>, the conditional type is resolved to <code>X</code>. The definitely assignable relation is the same as the regular assignable relation, except that type variable constraints are not considered. Intuitively, when a type is definitely assignable to another type, we know that it will be assignable for <em>all instantiations</em> of those types.</li>\n<li>Otherwise, the condition depends on one or more type variables and the conditional type is deferred.</li>\n</ul>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #A31515\">\"string\"</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #A31515\">\"number\"</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #A31515\">\"boolean\"</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">undefined</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #A31515\">\"undefined\"</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Function</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #A31515\">\"function\"</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T0</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"string\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"string\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T2</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"boolean\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T3</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"function\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T4</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;; </span><span style=\"color: #008000\">// \"object\"</span></div></code></div></pre>\n<h2 id=\"distributive-conditional-types\" style=\"position:relative;\"><a href=\"#distributive-conditional-types\" aria-label=\"distributive conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Distributive conditional types</h2>\n<p>Conditional types in which the checked type is a naked type parameter are called <em>distributive conditional types</em>.\nDistributive conditional types are automatically distributed over union types during instantiation.\nFor example, an instantiation of <code>T extends U ? X : Y</code> with the type argument <code>A | B | C</code> for <code>T</code> is resolved as <code>(A extends U ? X : Y) | (B extends U ? X : Y) | (C extends U ? X : Y)</code>.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T10</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">)&gt;; </span><span style=\"color: #008000\">// \"string\" | \"function\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T12</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"string\" | \"object\" | \"undefined\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T11</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TypeName</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]&gt;; </span><span style=\"color: #008000\">// \"object\"</span></div></code></div></pre>\n<p>In instantiations of a distributive conditional type <code>T extends U ? X : Y</code>, references to <code>T</code> within the conditional type are resolved to individual constituents of the union type (i.e. <code>T</code> refers to the individual constituents <em>after</em> the conditional type is distributed over the union type).\nFurthermore, references to <code>T</code> within <code>X</code> have an additional type parameter constraint <code>U</code> (i.e. <code>T</code> is considered assignable to <code>U</code> within <code>X</code>).</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">BoxedValue</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">BoxedArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #001080\">array</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[] };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Boxed</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\">BoxedArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]&gt; : </span><span style=\"color: #1C6277\">BoxedValue</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T20</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Boxed</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// BoxedValue&lt;string&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T21</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Boxed</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]&gt;; </span><span style=\"color: #008000\">// BoxedArray&lt;number&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T22</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Boxed</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]&gt;; </span><span style=\"color: #008000\">// BoxedValue&lt;string&gt; | BoxedArray&lt;number&gt;;</span></div></code></div></pre>\n<p>Notice that <code>T</code> has the additional constraint <code>any[]</code> within the true branch of <code>Boxed&#x3C;T></code> and it is therefore possible to refer to the element type of the array as <code>T[number]</code>. Also, notice how the conditional type is distributed over the union type in the last example.</p>\n<p>The distributive property of conditional types can conveniently be used to <em>filter</em> union types:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Diff</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Remove types from T that are assignable to U</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Filter</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Remove types from T that are not assignable to U</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T30</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Diff</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"b\" | \"d\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T31</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Filter</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"a\" | \"c\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T32</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Diff</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">), </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string | number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T33</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Filter</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">), </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// () =&gt; void</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">Diff</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Remove null and undefined from T</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T34</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string | number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T35</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string | string[]</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f2</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Conditional types are particularly useful when combined with mapped types:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FunctionPropertyNames</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}[</span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FunctionProperties</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">Pick</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">FunctionPropertyNames</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NonFunctionPropertyNames</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}[</span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NonFunctionProperties</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">Pick</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">NonFunctionPropertyNames</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Part</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">subparts</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Part</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">updatePart</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">newName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T40</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">FunctionPropertyNames</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Part</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"updatePart\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T41</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">NonFunctionPropertyNames</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Part</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"id\" | \"name\" | \"subparts\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T42</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">FunctionProperties</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Part</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// { updatePart(newName: string): void }</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T43</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">NonFunctionProperties</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Part</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// { id: number, name: string, subparts: Part[] }</span></div></code></div></pre>\n<p>Similar to union and intersection types, conditional types are not permitted to reference themselves recursively.\nFor example the following is an error.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\">ElementType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]&gt; : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div></code></div></pre>\n<h2 id=\"type-inference-in-conditional-types\" style=\"position:relative;\"><a href=\"#type-inference-in-conditional-types\" aria-label=\"type inference in conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type inference in conditional types</h2>\n<p>Within the <code>extends</code> clause of a conditional type, it is now possible to have <code>infer</code> declarations that introduce a type variable to be inferred.\nSuch inferred type variables may be referenced in the true branch of the conditional type.\nIt is possible to have multiple <code>infer</code> locations for the same type variable.</p>\n<p>For example, the following extracts the return type of a function type:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Conditional types can be nested to form a sequence of pattern matches that are evaluated in order:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">)[]</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T0</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T2</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T3</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T4</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;[]&gt;; </span><span style=\"color: #008000\">// Promise&lt;string&gt;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T5</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Unpacked</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;[]&gt;&gt;; </span><span style=\"color: #008000\">// string</span></div></code></div></pre>\n<p>The following example demonstrates how multiple candidates for the same type variable in co-variant positions causes a union type to be inferred:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T10</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T11</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }&gt;; </span><span style=\"color: #008000\">// string | number</span></div></code></div></pre>\n<p>Likewise, multiple candidates for the same type variable in contra-variant positions causes an intersection type to be inferred:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">; </span><span style=\"color: #795E26\">b</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T20</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">; </span><span style=\"color: #795E26\">b</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T21</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">; </span><span style=\"color: #795E26\">b</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }&gt;; </span><span style=\"color: #008000\">// string & number</span></div></code></div></pre>\n<p>When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the <em>last</em> signature (which, presumably, is the most permissive catch-all case).\nIt is not possible to perform overload resolution based on a list of argument types.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T30</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string | number</span></div></code></div></pre>\n<p>It is not possible to use <code>infer</code> declarations in constraint clauses for regular type parameters:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error, not supported</span></div></code></div></pre>\n<p>However, much the same effect can be obtained by erasing the type variables in the constraint and instead specifying a conditional type:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">AnyFunction</span><span style=\"color: #000000\"> = (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">AnyFunction</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">R</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\">R</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h2 id=\"predefined-conditional-types\" style=\"position:relative;\"><a href=\"#predefined-conditional-types\" aria-label=\"predefined conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Predefined conditional types</h2>\n<p>TypeScript 2.8 adds several predefined conditional types to <code>lib.d.ts</code>:</p>\n<ul>\n<li><code>Exclude&#x3C;T, U></code> — Exclude from <code>T</code> those types that are assignable to <code>U</code>.</li>\n<li><code>Extract&#x3C;T, U></code> — Extract from <code>T</code> those types that are assignable to <code>U</code>.</li>\n<li><code>NonNullable&#x3C;T></code> — Exclude <code>null</code> and <code>undefined</code> from <code>T</code>.</li>\n<li><code>ReturnType&#x3C;T></code> — Obtain the return type of a function type.</li>\n<li><code>InstanceType&#x3C;T></code> — Obtain the instance type of a constructor function type.</li>\n</ul>\n<h5 id=\"example-4\" style=\"position:relative;\"><a href=\"#example-4\" aria-label=\"example 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T00</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Exclude</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"b\" | \"d\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T01</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Extract</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"a\" | \"c\"</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T02</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Exclude</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">), </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string | number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T03</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Extract</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">), </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// () =&gt; void</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T04</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string | number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T05</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">NonNullable</span><span style=\"color: #000000\">&lt;(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// (() =&gt; string) | string[]</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T10</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T11</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// void</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T12</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// {}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T13</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]&gt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// number[]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T14</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">f1</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// { a: number, b: string }</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T15</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T16</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T17</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T18</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ReturnType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Error</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T20</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">InstanceType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// C</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T21</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">InstanceType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T22</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">InstanceType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T23</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">InstanceType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T24</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">InstanceType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Error</span></div></code></div></pre>\n<blockquote>\n<p>Note: The <code>Exclude</code> type is a proper implementation of the <code>Diff</code> type suggested <a href=\"https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-307871458\">here</a>. We’ve used the name <code>Exclude</code> to avoid breaking existing code that defines a <code>Diff</code>, plus we feel that name better conveys the semantics of the type. We did not include the <code>Omit&#x3C;T, K></code> type because it is trivially written as <code>Pick&#x3C;T, Exclude&#x3C;keyof T, K>></code>.</p>\n</blockquote>\n<h2 id=\"improved-control-over-mapped-type-modifiers\" style=\"position:relative;\"><a href=\"#improved-control-over-mapped-type-modifiers\" aria-label=\"improved control over mapped type modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved control over mapped type modifiers</h2>\n<p>Mapped types support adding a <code>readonly</code> or <code>?</code> modifier to a mapped property, but they did not provide support the ability to <em>remove</em> modifiers.\nThis matters in <a href=\"https://github.com/Microsoft/TypeScript/pull/12563\"><em>homomorphic mapped types</em></a> which by default preserve the modifiers of the underlying type.</p>\n<p>TypeScript 2.8 adds the ability for a mapped type to either add or remove a particular modifier.\nSpecifically, a <code>readonly</code> or <code>?</code> property modifier in a mapped type can now be prefixed with either <code>+</code> or <code>-</code> to indicate that the modifier should be added or removed.</p>\n<h4 id=\"example-5\" style=\"position:relative;\"><a href=\"#example-5\" aria-label=\"example 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h4>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MutableRequired</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { -</span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]-?: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\">] }; </span><span style=\"color: #008000\">// Remove readonly and ?</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ReadonlyPartial</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { +</span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]+?: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\">] }; </span><span style=\"color: #008000\">// Add readonly and ?</span></div></code></div></pre>\n<p>A modifier with no <code>+</code> or <code>-</code> prefix is the same as a modifier with a <code>+</code> prefix. So, the <code>ReadonlyPartial&#x3C;T></code> type above corresponds to</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ReadonlyPartial</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]?: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\">] }; </span><span style=\"color: #008000\">// Add readonly and ?</span></div></code></div></pre>\n<p>Using this ability, <code>lib.d.ts</code> now has a new <code>Required&#x3C;T></code> type.\nThis type strips <code>?</code> modifiers from all properties of <code>T</code>, thus making all properties required.</p>\n<h5 id=\"example-6\" style=\"position:relative;\"><a href=\"#example-6\" aria-label=\"example 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Required</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { [</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]-?: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\">] };</span></div></code></div></pre>\n<p>Note that in <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> mode, when a homomorphic mapped type removes a <code>?</code> modifier from a property in the underlying type it also removes <code>undefined</code> from the type of that property:</p>\n<h5 id=\"example-7\" style=\"position:relative;\"><a href=\"#example-7\" aria-label=\"example 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// Same as { a?: string | undefined }</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Required</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Same as { a: string }</span></div></code></div></pre>\n<h2 id=\"improved-keyof-with-intersection-types\" style=\"position:relative;\"><a href=\"#improved-keyof-with-intersection-types\" aria-label=\"improved keyof with intersection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved <code>keyof</code> with intersection types</h2>\n<p>With TypeScript 2.8 <code>keyof</code> applied to an intersection type is transformed to a union of <code>keyof</code> applied to each intersection constituent.\nIn other words, types of the form <code>keyof (A &#x26; B)</code> are transformed to be <code>keyof A | keyof B</code>.\nThis change should address inconsistencies with inference from <code>keyof</code> expressions.</p>\n<h5 id=\"example-8\" style=\"position:relative;\"><a href=\"#example-8\" aria-label=\"example 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T1</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"a\" | \"b\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T2</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// keyof T | \"b\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T3</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"a\" | keyof U</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T4</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// keyof T | keyof U</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T5</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">T2</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"a\" | \"b\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T6</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">T3</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"a\" | \"b\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T7</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">T4</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// \"a\" | \"b\"</span></div></code></div></pre>\n<h2 id=\"better-handling-for-namespace-patterns-in-js-files\" style=\"position:relative;\"><a href=\"#better-handling-for-namespace-patterns-in-js-files\" aria-label=\"better handling for namespace patterns in js files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better handling for namespace patterns in <code>.js</code> files</h2>\n<p>TypeScript 2.8 adds support for understanding more namespace patterns in <code>.js</code> files.\nEmpty object literals declarations on top level, just like functions and classes, are now recognized as as namespace declarations in JavaScript.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ns</span><span style=\"color: #000000\"> = {}; </span><span style=\"color: #008000\">// recognized as a declaration for a namespace `ns`</span></div><div class='line'><span style=\"color: #001080\">ns</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">constant</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// recognized as a declaration for var `constant`</span></div></code></div></pre>\n<p>Assignments at the top-level should behave the same way; in other words, a <code>var</code> or <code>const</code> declaration is not required.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">app</span><span style=\"color: #000000\"> = {}; </span><span style=\"color: #008000\">// does NOT need to be `var app = {}`</span></div><div class='line'><span style=\"color: #001080\">app</span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #001080\">app</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() {};</span></div><div class='line'><span style=\"color: #001080\">app</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h2 id=\"iifes-as-namespace-declarations\" style=\"position:relative;\"><a href=\"#iifes-as-namespace-declarations\" aria-label=\"iifes as namespace declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IIFEs as namespace declarations</h2>\n<p>An IIFE returning a function, class or empty object literal, is also recognized as a namespace:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">})();</span></div><div class='line'><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">staticProperty</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h2 id=\"defaulted-declarations\" style=\"position:relative;\"><a href=\"#defaulted-declarations\" aria-label=\"defaulted declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defaulted declarations</h2>\n<p>“Defaulted declarations” allow initializers that reference the declared name in the left side of a logical or:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">my</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">window</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">my</span><span style=\"color: #000000\"> || {};</span></div><div class='line'><span style=\"color: #001080\">my</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">app</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">my</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">app</span><span style=\"color: #000000\"> || {};</span></div></code></div></pre>\n<h2 id=\"prototype-assignment\" style=\"position:relative;\"><a href=\"#prototype-assignment\" aria-label=\"prototype assignment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prototype assignment</h2>\n<p>You can assign an object literal directly to the prototype property. Individual prototype assignments still work too:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">m</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">q</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<h2 id=\"nested-and-merged-declarations\" style=\"position:relative;\"><a href=\"#nested-and-merged-declarations\" aria-label=\"nested and merged declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested and merged declarations</h2>\n<p>Nesting works to any level now, and merges correctly across files. Previously neither was the case.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">app</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">window</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">app</span><span style=\"color: #000000\"> || {};</span></div><div class='line'><span style=\"color: #001080\">app</span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {};</span></div></code></div></pre>\n<h2 id=\"per-file-jsx-factories\" style=\"position:relative;\"><a href=\"#per-file-jsx-factories\" aria-label=\"per file jsx factories permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Per-file JSX factories</h2>\n<p>TypeScript 2.8 adds support for a per-file configurable JSX factory name using <code>@jsx dom</code> pragma.\nJSX factory can be configured for a compilation using <a href=\"/tsconfig#jsxFactory\"><code>jsxFactory</code></a> (default is <code>React.createElement</code>). With TypeScript 2.8 you can override this on a per-file-basis by adding a comment to the beginning of the file.</p>\n<h5 id=\"example-9\" style=\"position:relative;\"><a href=\"#example-9\" aria-label=\"example 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> dom */</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">dom</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./renderer\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">h</span><span style=\"color: #000000\">&gt;&lt;/</span><span style=\"color: #1C6277\">h</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>Generates:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">renderer_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./renderer\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">renderer_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">dom</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"locally-scoped-jsx-namespaces\" style=\"position:relative;\"><a href=\"#locally-scoped-jsx-namespaces\" aria-label=\"locally scoped jsx namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Locally scoped JSX namespaces</h2>\n<p>JSX type checking is driven by definitions in a JSX namespace, for instance <code>JSX.Element</code> for the type of a JSX element, and <code>JSX.IntrinsicElements</code> for built-in elements.\nBefore TypeScript 2.8 the <code>JSX</code> namespace was expected to be in the global namespace, and thus only allowing one to be defined in a project.\nStarting with TypeScript 2.8 the <code>JSX</code> namespace will be looked under the <code>jsxNamespace</code> (e.g. <code>React</code>) allowing for multiple jsx factories in one compilation.\nFor backward compatibility the global <code>JSX</code> namespace is used as a fallback if none was defined on the factory function.\nCombined with the per-file <code>@jsx</code> pragma, each file can have a different JSX factory.</p>\n<h2 id=\"new---emitdeclarationonly\" style=\"position:relative;\"><a href=\"#new---emitdeclarationonly\" aria-label=\"new   emitdeclarationonly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>--emitDeclarationOnly</code></h2>\n<p><a href=\"/tsconfig#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> allows for <em>only</em> generating declaration files; <code>.js</code>/<code>.jsx</code> output generation will be skipped with this flag. The flag is useful when the <code>.js</code> output generation is handled by a different transpiler like Babel.</p>","headings":[{"value":"Conditional Types","depth":2},{"value":"Example","depth":5},{"value":"Distributive conditional types","depth":2},{"value":"Example","depth":5},{"value":"Example","depth":5},{"value":"Example","depth":5},{"value":"Type inference in conditional types","depth":2},{"value":"Predefined conditional types","depth":2},{"value":"Example","depth":5},{"value":"Improved control over mapped type modifiers","depth":2},{"value":"Example","depth":4},{"value":"Example","depth":5},{"value":"Example","depth":5},{"value":"Improved keyof with intersection types","depth":2},{"value":"Example","depth":5},{"value":"Better handling for namespace patterns in .js files","depth":2},{"value":"IIFEs as namespace declarations","depth":2},{"value":"Defaulted declarations","depth":2},{"value":"Prototype assignment","depth":2},{"value":"Nested and merged declarations","depth":2},{"value":"Per-file JSX factories","depth":2},{"value":"Example","depth":5},{"value":"Locally scoped JSX namespaces","depth":2},{"value":"New --emitDeclarationOnly","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-8.html","title":"TypeScript 2.8","disable_toc":null,"handbook":null,"oneline":"TypeScript 2.8 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-2.8","slug":"/docs/handbook/release-notes/typescript-2-8.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 2.8.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.858Z"}},"staticQueryHashes":[]}