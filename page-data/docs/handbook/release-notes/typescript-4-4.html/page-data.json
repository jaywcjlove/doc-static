{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-4-4.html","result":{"data":{"markdownRemark":{"id":"e2e47835-afdb-50ce-a383-1e3951fadf17","excerpt":"Control Flow Analysis of Aliased Conditions and Discriminants In JavaScript, we often have to probe a value in different ways, and do something different once…","html":"<h2 id=\"control-flow-analysis-of-aliased-conditions-and-discriminants\" style=\"position:relative;\"><a href=\"#control-flow-analysis-of-aliased-conditions-and-discriminants\" aria-label=\"control flow analysis of aliased conditions and discriminants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow Analysis of Aliased Conditions and Discriminants</h2>\n<p>In JavaScript, we often have to probe a value in different ways, and do something different once we know more about its type.\nTypeScript understands these checks and calls them <em>type guards</em>.\nInstead of having to convince TypeScript of a variable’s type whenever we use it, the type-checker leverages something called <em>control flow analysis</em> to see if we’ve used a type guard before a given piece of code.</p>\n<p>For example, we can write something like</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function foo(arg: unknown): void' >foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: unknown' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: unknown' >arg</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string' style='border-bottom: solid 2px lightgrey;'>arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='meta-line'><span class='popover-prefix'>                </span><span class='popover'><div class='arrow'></div>(parameter) arg: string</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMOcAUBDATgcwFyLgDWYcA7mAJSIDeAUIojMImlAJ4AOApnC9jkQBeEYgBEAZyhYYYHGOr1GjCAglwANtwB0GuDky5tUOAFVOPLAGEME7mkqUA3A2UB6N8q9eAegH5XAF86QKA'>Try</a></div></pre>\n<p>In this example, we checked whether <code>arg</code> was a <code>string</code>.\nTypeScript recognized the <code>typeof arg === \"string\"</code> check, which it considered a type guard, and knew that <code>arg</code> was a <code>string</code> inside the body of the <code>if</code> block.\nThat let us access <code>string</code> methods like <code>toUpperCase()</code> without getting an error.</p>\n<p>However, what would happen if we moved the condition out to a constant called <code>argIsString</code>?</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// In TS 4.3 and below</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">argIsString</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">argIsString</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//              ~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Error! Property 'toUpperCase' does not exist on type 'unknown'.</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In previous versions of TypeScript, this would be an error - even though <code>argIsString</code> was assigned the value of a type guard, TypeScript simply lost that information.\nThat’s unfortunate since we might want to re-use the same check in several places.\nTo get around that, users often have to repeat themselves or use type assertions (a.k.a. casts).</p>\n<p>In TypeScript 4.4, that is no longer the case.\nThe above example works with no errors!\nWhen TypeScript sees that we are testing a constant value, it will do a little bit of extra work to see if it contains a type guard.\nIf that type guard operates on a <code>const</code>, a <code>readonly</code> property, or an un-modified parameter, then TypeScript is able to narrow that value appropriately.</p>\n<p>Different sorts of type guard conditions are preserved - not just <code>typeof</code> checks.\nFor example, checks on discriminated unions work like a charm.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Shape = {&#10;    kind: \"circle\";&#10;    radius: number;&#10;} | {&#10;    kind: \"square\";&#10;    sideLength: number;&#10;}' >Shape</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"circle\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"square\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) sideLength: number' >sideLength</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function area(shape: Shape): number' >area</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Shape = {&#10;    kind: \"circle\";&#10;    radius: number;&#10;} | {&#10;    kind: \"square\";&#10;    sideLength: number;&#10;}' >Shape</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const isCircle: boolean' >isCircle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"circle\" | \"square\"' >kind</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const isCircle: boolean' >isCircle</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We know we have a circle here!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Math.PI: number' >PI</data-lsp> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: {&#10;    kind: \"circle\";&#10;    radius: number;&#10;}' >shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) radius: number' >radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We know we&apos;re left with a square here!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: {&#10;    kind: \"square\";&#10;    sideLength: number;&#10;}' >shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) sideLength: number' >sideLength</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAygFgQ0lAvAKClAPlA3lAawEsA7AEwC4oAiAYyICdaAbCagbigYTKIFcAzlRJ8AtgCMIDKAF8M2PIVKUaAgI58EDNpwFEyEADIQSAc2BxhYydJns0aAGZ8StYEQD2JKFogIAFAKIkFTwSBAAlFYSUnjytF4CwFBEAgDCjCzQKFBB4QB0xOSoKDl0mawc8kSOUP6pGUysEXGYmAD07VAA6tAEJB4A7lCD0IgAbtAIUPRNY1IQAITymNrAfAzeALIIFvkACgCSUABUucEQ+dy8gqdnAEz2mDJQEMwC0LgrUJ09fQPDUYAcm0UFYjmSgyIFh8uQ0vigcAWyzaXAg6025wKegMxjMMJODyesjQMiAA'>Try</a></div></pre>\n<p>Analysis on discriminants in 4.4 also goes a little bit deeper - we can now extract out discriminants and TypeScript can narrow the original object.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Shape = {&#10;    kind: \"circle\";&#10;    radius: number;&#10;} | {&#10;    kind: \"square\";&#10;    sideLength: number;&#10;}' >Shape</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"circle\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"square\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) sideLength: number' >sideLength</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function area(shape: Shape): number' >area</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Shape = {&#10;    kind: \"circle\";&#10;    radius: number;&#10;} | {&#10;    kind: \"square\";&#10;    sideLength: number;&#10;}' >Shape</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Extract out the &apos;kind&apos; field first.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #0070C1\"><data-lsp lsp='const kind: \"circle\" | \"square\"' >kind</data-lsp></span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const kind: \"circle\" | \"square\"' >kind</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We know we have a circle here!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Math.PI: number' >PI</data-lsp> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: {&#10;    kind: \"circle\";&#10;    radius: number;&#10;}' >shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) radius: number' >radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We know we&apos;re left with a square here!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: {&#10;    kind: \"square\";&#10;    sideLength: number;&#10;}' >shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) sideLength: number' >sideLength</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAygFgQ0lAvAKClAPlA3lAawEsA7AEwC4oAiAYyICdaAbCagbigYTKIFcAzlRJ8AtgCMIDKAF8M2PIVKUaAgI58EDNpwFEyEADIQSAc2BxhYydJns0aAGZ8StYEQD2JKFogIAFAKIkFTwSBAAlFYSUnjyAPTxUACiAB7A3G5QHnzAUBbQAOTE5IVQjkQQzGTljALAAHTytF71iiU1MqhQQeH28kSOUP4dqCgoNPRMrNQRcZiYiVAA6tAEJB4A7lCb0IgAbtAIUFMse1IQAITymNrAfAzeALIIFg0ACgCSUABUPcEQBrcXiCX5-ABM9kwXSqAmguBuUCWq0IG22u0K2igrEceU2RAsPh6Gl8UDgF2uCy4EHuj3+4QaegMxjMhJ+EKhsjQMiAA'>Try</a></div></pre>\n<p>As another example, here’s a function that checks whether two of its inputs have contents.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomeChecks(inputA: string | undefined, inputB: string | undefined, shouldDoExtraWork: boolean): void' >doSomeChecks</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputA: string | undefined' >inputA</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputB: string | undefined' >inputB</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shouldDoExtraWork: boolean' >shouldDoExtraWork</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const mustDoWork: boolean | \"\" | undefined' >mustDoWork</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputA: string | undefined' >inputA</data-lsp></span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputB: string | undefined' >inputB</data-lsp></span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shouldDoExtraWork: boolean' >shouldDoExtraWork</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const mustDoWork: boolean | \"\" | undefined' >mustDoWork</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We can access &apos;string&apos; properties on both &apos;inputA&apos; and &apos;inputB&apos;!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const upperA: string' >upperA</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputA: string' >inputA</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const upperB: string' >upperB</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputB: string' >inputB</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKYGEAW2EA1gM4AUAUIojGAA4hQCCAXIqVAE50DmiAH0Thk2YHWzIANNVoMmAIXaceYfkJFiJ02aXxwQAG2QAROAFEAHtwCGAdThdi7AEZw4h7DbCUAlIgBvWQgETkRMEE4zBydEAF45RhZEADIUxMVU9L0DYzMrWxjiAG5ZGGBEcgiouCL-IJoaAHomxDtsRAhvRBsICGxSUkQAchU+YcR6Ljh6bC5YAcQERDcofBG6JOYJ72QN+SgFYYBCWRoQsDCQelmuZniMlgA6KDgAVRu53BtSbHJfUqNTqhKDCT5cBQPTaKF7vcHfX7-QGNFqIJ7o2QAX0omKAA'>Try</a></div></pre>\n<p>TypeScript can understand that both <code>inputA</code> and <code>inputB</code> are both present if <code>mustDoWork</code> is <code>true</code>.\nThat means we don’t have to write a non-null assertion like <code>inputA!</code> to convince TypeScript that <code>inputA</code> isn’t <code>undefined</code>.</p>\n<p>One neat feature here is that this analysis works transitively.\nTypeScript will hop through constants to understand what sorts of checks you’ve already performed.</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x: string | number | boolean): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number | boolean' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const isString: boolean' >isString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number | boolean' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const isNumber: boolean' >isNumber</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number | boolean' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const isStringOrNumber: boolean' >isStringOrNumber</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const isString: boolean' >isString</data-lsp></span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\"><data-lsp lsp='const isNumber: boolean' >isNumber</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const isStringOrNumber: boolean' >isStringOrNumber</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>(parameter) x: string | number</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: boolean' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>(parameter) x: boolean</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFADwFyIM5QE4xgDmiAPomCALYBGApnmYjXHADZ0CGYAlIgN4AoRIggJciGNgDK+QiQC8iKAE8ADnTjBEaRAv2IARLgLFDAbmGjxUSdgBy1eoyWqNWnXoOHKtBhasxMAkpWVMiAHk8Rz8XOzD5MnIpGOdLERhtFFC5YijUhj4hERE0SwB6cpEAPQB+KwBfRDo2bDoBK1KKqsQ6xsEGoA'>Try</a></div></pre>\n<p>Note that there’s a cutoff - TypeScript doesn’t go arbitrarily deep when checking these conditions, but its analysis is deep enough for most checks.</p>\n<p>This feature should make a lot of intuitive JavaScript code “just work” in TypeScript without it getting in your way.\nFor more details, <a href=\"https://github.com/microsoft/TypeScript/pull/44730\">check out the implementation on GitHub</a>!</p>\n<h2 id=\"symbol-and-template-string-pattern-index-signatures\" style=\"position:relative;\"><a href=\"#symbol-and-template-string-pattern-index-signatures\" aria-label=\"symbol and template string pattern index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol and Template String Pattern Index Signatures</h2>\n<p>TypeScript lets us describe objects where every property has to have a certain type using <em>index signatures</em>.\nThis allows us to use these objects as dictionary-like types, where we can use string keys to index into them with square brackets.</p>\n<p>For example, we can write a type with an index signature that takes <code>string</code> keys and maps to <code>boolean</code> values.\nIf we try to assign anything other than a <code>boolean</code> value, we’ll get an error.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BooleanDictionary' >BooleanDictionary</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myDict: BooleanDictionary' >myDict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BooleanDictionary' >BooleanDictionary</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Valid to assign boolean values</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myDict: BooleanDictionary' >myDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myDict: BooleanDictionary' >myDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Error, \"oops\" isn&apos;t a boolean</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myDict: BooleanDictionary' >myDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"baz\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"oops\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'boolean'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'boolean'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vRg7AKwBQAlgHYAuMAZgIYDGkoAQnHADaS1kAiJ9FEnDK1oAT1ABvIqFABtANaQxqRBWjkA5gF1UAIzaduAbiIBfIkQAmkeu1FNOFUAFsxfAalYcuvfoOFRMVMiEFAANVp2EitQCjhQWkREEk0yUAMfblAANyiAV0hEIjcPCjkAImo2Cu1QAF446ELTUv9KvVFahtA6dkRIELCAUVgEABpQCrYAB0QK0BJEMgByZ1oMw18S93aKzoAvbsbpuDmK4yA'>Try</a></div></pre>\n<p>While <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">a <code>Map</code> might be a better data structure here</a> (specifically, a <code>Map&#x3C;string, boolean></code>), JavaScript objects are often more convenient to use or just happen to be what we’re given to work with.</p>\n<p>Similarly, <code>Array&#x3C;T></code> already defines a <code>number</code> index signature that lets us insert/retrieve values of type <code>T</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2322 2375</span></div><div class='line'><span style=\"color: #008000\">// This is part of TypeScript's definition of the built-in Array type.</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Valid</span></div><div class='line'><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Error, expecting a 'string' value here</span></div><div class='line'><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Index signatures are very useful to express lots of code out in the wild;\nhowever, until now they’ve been limited to <code>string</code> and <code>number</code> keys (and <code>string</code> index signatures have an intentional quirk where they can accept <code>number</code> keys since they’ll be coerced to strings anyway).\nThat means that TypeScript didn’t allow indexing objects with <code>symbol</code> keys.\nTypeScript also couldn’t model an index signature of some <em>subset</em> of <code>string</code> keys - for example, an index signature which describes just properties whose names start with the text <code>data-</code>.</p>\n<p>TypeScript 4.4 addresses these limitations, and allows index signatures for <code>symbol</code>s and template string patterns.</p>\n<p>For example, TypeScript now allows us to declare a type that can be keyed on arbitrary <code>symbol</code>s.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colors' >Colors</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) sym: symbol' >sym</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">symbol</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const red: typeof red' >red</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const green: typeof green' >green</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const blue: typeof blue' >blue</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let colors: Colors' >colors</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colors' >Colors</data-lsp></span><span style=\"color: #000000\"> = {};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Assignment of a number is allowed</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let colors: Colors' >colors</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const red: typeof red' >red</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">255</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let redVal: number' style='border-bottom: solid 2px lightgrey;'>redVal</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let colors: Colors' >colors</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const red: typeof red' >red</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let redVal: number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let colors: Colors' >colors</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const blue: typeof blue' >blue</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"da ba dee\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vRg7AKwBQAlgHYAuMAZgIYDGkoAwnADYKKgDeRooAbUQBPALaoRogEbsAuqjIBXaTADcRAL5Ei9OGUQVQ0SABNQAXlABlMTLYAKAETGTjgJTrd+wwHNjkMgtrW3YnP0gA9089A1ApNkUmSxtpUMd4xKjtNkhDXQ4kVFYCrktuDXUiEFAAQUREEh8yUQDDOGpQWlAlFWhQEi5aNg4Ad1Mddk4BF1kgtAICdRzDFwA1IaD8qZn1atAAPQB+bS2kAQzIWctHEy6pLpMIx1UgA'>Try</a></div></pre>\n<p>Similarly, we can write an index signature with template string pattern type.\nOne use of this might be to exempt properties starting with <code>data-</code> from TypeScript’s excess property checking.\nWhen we pass an object literal to something with an expected type, TypeScript will look for excess properties that weren’t declared in the expected type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2322 2375</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">width</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">height</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">width:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">height:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"data-blah\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">OptionsWithDataProps</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Permit any property starting with 'data-'.</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #001080\">optName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`data-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">string</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">OptionsWithDataProps</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">width:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">height:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"data-blah\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Fails for a property which is not known, nor</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// starts with 'data-'</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"unknown-property\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>A final note on index signatures is that they now permit union types, as long as they’re a union of infinite-domain primitive types - specifically:</p>\n<ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>symbol</code></li>\n<li>template string patterns (e.g. <code>`hello-${string}`</code>)</li>\n</ul>\n<p>An index signature whose argument is a union of these types will de-sugar into several different index signatures.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Data</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\">optName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">symbol</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Equivalent to</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Data</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\">optName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\">optName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">symbol</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/44512\">read up on the pull request</a></p>\n<h2 id=\"defaulting-to-the-unknown-type-in-catch-variables---useunknownincatchvariables\" style=\"position:relative;\"><a href=\"#defaulting-to-the-unknown-type-in-catch-variables---useunknownincatchvariables\" aria-label=\"defaulting to the unknown type in catch variables   useunknownincatchvariables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defaulting to the <code>unknown</code> Type in Catch Variables (<code>--useUnknownInCatchVariables</code>)</h2>\n<p>In JavaScript, any type of value can be thrown with <code>throw</code> and caught in a <code>catch</code> clause.\nBecause of this, TypeScript historically typed catch clause variables as <code>any</code>, and would not allow any other type annotation:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Who knows what this might throw...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">executeSomeThirdPartyCode</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">err</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// err: any</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">error</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">err</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Allowed, because 'any'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">err</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">thisWillProbablyFail</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// Allowed, because 'any' :(</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Once TypeScript added the <code>unknown</code> type, it became clear that <code>unknown</code> was a better choice than <code>any</code> in <code>catch</code> clause variables for users who want the highest degree of correctness and type-safety, since it narrows better and forces us to test against arbitrary values.\nEventually TypeScript 4.0 allowed users to specify an explicit type annotation of <code>unknown</code> (or <code>any</code>) on each <code>catch</code> clause variable so that we could opt into stricter types on a case-by-case basis;\nhowever, for some, manually specifying <code>: unknown</code> on every <code>catch</code> clause was a chore.</p>\n<p>That’s why TypeScript 4.4 introduces a new flag called <a href=\"/tsconfig#useUnknownInCatchVariables\"><code>useUnknownInCatchVariables</code></a>.\nThis flag changes the default type of <code>catch</code> clause variables from <code>any</code> to <code>unknown</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function executeSomeThirdPartyCode(): void' >executeSomeThirdPartyCode</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// err: unknown</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error! Property &apos;message&apos; does not exist on type &apos;unknown&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.error(...data: any[]): void' >error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='var err: unknown' >err</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >message</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Object is of type 'unknown'.</span><span class=\"code\">2571</span></span><span class=\"error-behind\">Object is of type 'unknown'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Works! We can narrow &apos;err&apos; from &apos;unknown&apos; to &apos;Error&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.error(...data: any[]): void' >error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var err: Error' >err</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsBGAUACaQDGANgIbSSgBmArgHbEAuAlnA6JAB4l3OQAynAC2kACoALVtAIAFSswCeAYThEAFAEpUANzisCAbjwhQAWkvF+l83mbQloAN55QXXtYHCxUmfMVVdUhtEwBfUGJyZmJJUA0YaC0XN1AzRNRGAGsGOAB3BjxUswBRWAQAQlA5eAAHGGVQAHIxRERyAHNIJtACOEhEUFzmD1ZEEY5QZXrm7NyCpoA6VOIORDhSSEXEhATYRdb2rq0TYrAAdQQsxCrz6ijOBkp4PObEnpp4EVmGHPyGHrMODNMrwaBLVKsGjxRKgVgMcbkJiQODQ0EIZKudzuVYIjZbHbQPbQA4DI6QE6pMJ4MJAA'>Try</a></div></pre>\n<p>This flag is enabled under the <a href=\"/tsconfig#strict\"><code>strict</code></a> family of options.\nThat means that if you check your code using <a href=\"/tsconfig#strict\"><code>strict</code></a>, this option will automatically be turned on.\nYou may end up with errors in TypeScript 4.4 such as</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Property 'message' does not exist on type 'unknown'.\nProperty 'name' does not exist on type 'unknown'.\nProperty 'stack' does not exist on type 'unknown'.</span></div></code></div></pre>\n<p>In cases where we don’t want to deal with an <code>unknown</code> variable in a <code>catch</code> clause, we can always add an explicit <code>: any</code> annotation so that we can opt <em>out</em> of stricter types.</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function executeSomeThirdPartyCode(): void' >executeSomeThirdPartyCode</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: any' >err</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.error(...data: any[]): void' >error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var err: any' >err</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >message</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Works again!</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXxAA9xkMQBlHAWxABUALLGYABVgwE8BhHUACgCUALngA3HFmABuAFAB6OfAC0KsKRVKZGGB3gBvGfALE1ZSjQZNW7brxCDZAX3hgoGMPXh8QMGCKioHAL6hi54AM44ECAAdD4wODDevjE04eFQAOYgAlLwCvAA6okA1uHwWVBYqACEMo5AA'>Try</a></div></pre>\n<p>For more information, take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/41013\">the implementing pull request</a>.</p>\n<h2 id=\"exact-optional-property-types---exactoptionalpropertytypes\" style=\"position:relative;\"><a href=\"#exact-optional-property-types---exactoptionalpropertytypes\" aria-label=\"exact optional property types   exactoptionalpropertytypes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exact Optional Property Types (<code>--exactOptionalPropertyTypes</code>)</h2>\n<p>In JavaScript, reading a <em>missing</em> property on an object produces the value <code>undefined</code>.\nIt’s also possible to <em>have</em> an actual property with the value <code>undefined</code>.\nA lot of code in JavaScript tends to treat these situations the same way, and so initially TypeScript just interpreted every optional property as if a user had written <code>undefined</code> in the type.\nFor example,</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>was considered equivalent to</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>What this meant is that a user could explicitly write <code>undefined</code> in place of <code>age</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">age:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// This is okay by default.</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>So by default, TypeScript doesn’t distinguish between a present property with the value <code>undefined</code> and a missing property.\nWhile this works most of the time, not all code in JavaScript makes the same assumptions.\nFunctions and operators like <code>Object.assign</code>, <code>Object.keys</code>, object spread (<code>{ ...obj }</code>), and <code>for</code>-<code>in</code> loops behave differently depending on whether or not a property actually exists on an object.\nIn the case of our <code>Person</code> example, this could potentially lead to runtime errors if the <code>age</code> property was observed in a context where its presence was important.</p>\n<p>In TypeScript 4.4, the new flag <a href=\"/tsconfig#exactOptionalPropertyTypes\"><code>exactOptionalPropertyTypes</code></a> specifies that optional property types should be interpreted exactly as written, meaning that <code>| undefined</code> is not added to the type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// With &apos;exactOptionalPropertyTypes&apos; on:</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-err><data-lsp lsp='const p: Person' >p</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\"> = {</span></div><span class=\"error\"><span>Type '{ name: string; age: undefined; }' is not assignable to type 'Person' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.\n  Types of property 'age' are incompatible.\n    Type 'undefined' is not assignable to type 'number'.</span><span class=\"code\">2375</span></span><span class=\"error-behind\">Type '{ name: string; age: undefined; }' is not assignable to type 'Person' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.\n  Types of property 'age' are incompatible.\n    Type 'undefined' is not assignable to type 'number'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age?: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// Error! undefined isn&apos;t a number</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFAgQWnEMBcoATAMy9effgHYArEww5EFAGYJIoQhQa5QAbyahQeALaQeDRMWkBzANzbQsM5AD8PHAFc9AIwpWAvizABaAPhnRAC-X1AAdQxEAAtQAHIYBBR0bDwiUnJKWnpIBnjQXC4meFxjUFQeFU51AF5Na31DUAAiABFYHAxIfBaAGmtbZuccABNIOWlIUb7QVgBRYg4AQlAR8cmcadAMBhx4xBtdVw9iJi8LIA'>Try</a></div></pre>\n<p>This flag is <strong>not</strong> part of the <a href=\"/tsconfig#strict\"><code>strict</code></a> family and needs to be turned on explicitly if you’d like this behavior.\nIt also requires <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> to be enabled as well.\nWe’ve been making updates to DefinitelyTyped and other definitions to try to make the transition as straightforward as possible, but you may encounter some friction with this depending on how your code is structured.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/43947\">take a look at the implementing pull request here</a>.</p>\n<h2 id=\"static-blocks-in-classes\" style=\"position:relative;\"><a href=\"#static-blocks-in-classes\" aria-label=\"static blocks in classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>static</code> Blocks in Classes</h2>\n<p>TypeScript 4.4 brings support for <a href=\"https://github.com/tc39/proposal-class-static-block#ecmascript-class-static-initialization-blocks\"><code>static</code> blocks in classes</a>, an upcoming ECMAScript feature that can help you write more-complex initialization code for static members.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.count: number' >count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// This is a static block:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\"><data-lsp lsp='function someCondition(): boolean' >someCondition</data-lsp></span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.count: number' >count</data-lsp></span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwGccBbEAYT2C2zwAoBKALngCMccIQpUAoAej7wAtCLDIMIoT0hQCBeADF28AN494GwhijYw8MDjQZ4AXngAGANw91mgfAAqACyzzX8KFp1Y9LCDjAAa0ZbDQJtXVVQzQ0sRHhaIlIKVCoaVAZ6KJiczSUcADoDIwBqEutcjQBfaJqqoA'>Try</a></div></pre>\n<p>These static blocks allow you to write a sequence of statements with their own scope that can access private fields within the containing class.\nThat means that we can write initialization code with all the capabilities of writing statements, no leakage of variables, and full access to our class’s internals.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">#count</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(getter) Foo.count: number' >count</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#count</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const lastInstances: any[]' >lastInstances</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function loadLastInstances(): any[]' >loadLastInstances</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#count</span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\"><data-lsp lsp='const lastInstances: any[]' >lastInstances</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;any>.length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwhymABkoBnDASVUqnRHIAoBKALnnoE8BtAXQBQAeiHwAtBLDIMEsQMgVy8AGI4c8AN4D4O+HWxh4AYjA40GeAF54ABgDcA7boDmIC6fOtNT3brgZkGHxVHAA6EzNUDAdfAF9HX30sQy1fXwwYLm80nPhTWgtoSho6BiVrQmIyYoL6MEZWGNzfEPCPKPgAagqKalqy0IgQVGcMAAsmnPjmsCgMMDHNad142KA'>Try</a></div></pre>\n<p>Without <code>static</code> blocks, writing the code above was possible, but often involved several different types of hacks that had to compromise in some way.</p>\n<p>Note that a class can have multiple <code>static</code> blocks, and they’re run in the same order in which they’re written.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Prints:</span></div><div class='line'><span style=\"color: #008000\">//    1</span></div><div class='line'><span style=\"color: #008000\">//    2</span></div><div class='line'><span style=\"color: #008000\">//    3</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.prop: number' >prop</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.prop: number' >prop</data-lsp></span><span style=\"color: #000000\">++);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.prop: number' >prop</data-lsp></span><span style=\"color: #000000\">++);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.prop: number' >prop</data-lsp></span><span style=\"color: #000000\">++);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAUCcEsDsBcDOAuAUCUnQEZ1iwEx5agDMqAxgDYCGiioAYgPbOgDeqJi8N80FUAAdIzIaAC8OLlh58BHGSUwVmsRMyoBTAHRVmAcwAULZjpFiA1JYCUAbiWgAvo7n9BnZVlXrNu-cam5qJC1vaOLty87opeKmoa2nqGJqzBVrYOJC5OQA'>Try</a></div></pre>\n<p>We’d like to extend our thanks to <a href=\"https://github.com/Kingwl\">Wenlu Wang</a> for TypeScript’s implementation of this feature.\nFor more details, you can <a href=\"https://github.com/microsoft/TypeScript/pull/43370\">see that pull request here</a>.</p>\n<h2 id=\"tsc---help-updates-and-improvements\" style=\"position:relative;\"><a href=\"#tsc---help-updates-and-improvements\" aria-label=\"tsc   help updates and improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tsc --help</code> Updates and Improvements</h2>\n<p>TypeScript’s <code>--help</code> option has gotten a refresh!\nThanks to work in part by <a href=\"https://github.com/ShuiRuTian\">Song Gao</a>, we’ve brought in changes to <a href=\"https://github.com/microsoft/TypeScript/pull/44409\">update the descriptions of our compiler options</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/44157\">restyle the <code>--help</code> menu</a> with colors and other visual separation.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/08/tsc-help-ps-wt-4-4.png\" alt=\"The new TypeScript --help menu where the output is bucketed into several different areas\"></p>\n<p>You can read more on <a href=\"https://github.com/microsoft/TypeScript/issues/44074\">the original proposal thread</a>.</p>\n<h2 id=\"performance-improvements\" style=\"position:relative;\"><a href=\"#performance-improvements\" aria-label=\"performance improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance Improvements</h2>\n<h3 id=\"faster-declaration-emit\" style=\"position:relative;\"><a href=\"#faster-declaration-emit\" aria-label=\"faster declaration emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster Declaration Emit</h3>\n<p>TypeScript now caches whether internal symbols are accessible in different contexts, along with how specific types should be printed.\nThese changes can improve TypeScript’s general performance in code with fairly complex types, and is especially observed when emitting <code>.d.ts</code> files under the <a href=\"/tsconfig#declaration\"><code>declaration</code></a> flag.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/43973\">See more details here</a>.</p>\n<h3 id=\"faster-path-normalization\" style=\"position:relative;\"><a href=\"#faster-path-normalization\" aria-label=\"faster path normalization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster Path Normalization</h3>\n<p>TypeScript often has to do several types of “normalization” on file paths to get them into a consistent format that the compiler can use everywhere.\nThis involves things like replacing backslashes with slashes, or removing intermediate <code>/./</code> and <code>/../</code> segments of paths.\nWhen TypeScript has to operates over millions of these paths, these operations end up being a bit slow.\nIn TypeScript 4.4, paths first undergo quick checks to see whether they need any normalization in the first place.\nThese improvements together reduce project load time by 5-10% on bigger projects, and significantly more in massive projects that we’ve tested internally.</p>\n<p>For more details, you can <a href=\"https://github.com/microsoft/TypeScript/pull/44173\">view the PR for path segment normalization</a> along with <a href=\"https://github.com/microsoft/TypeScript/pull/44100\">the PR for slash normalization</a>.</p>\n<h3 id=\"faster-path-mapping\" style=\"position:relative;\"><a href=\"#faster-path-mapping\" aria-label=\"faster path mapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster Path Mapping</h3>\n<p>TypeScript now caches the way it constructs path-mappings (using the <a href=\"/tsconfig#paths\"><code>paths</code></a> option in <code>tsconfig.json</code>).\nFor projects with several hundred mappings, the reduction is significant.\nYou can see more <a href=\"https://github.com/microsoft/TypeScript/pull/44078\">on the change itself</a>.</p>\n<h3 id=\"faster-incremental-builds-with---strict\" style=\"position:relative;\"><a href=\"#faster-incremental-builds-with---strict\" aria-label=\"faster incremental builds with   strict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster Incremental Builds with <code>--strict</code></h3>\n<p>In what was effectively a bug, TypeScript would end up redoing type-checking work under <a href=\"/tsconfig#incremental\"><code>incremental</code></a> compilations if <a href=\"/tsconfig#strict\"><code>strict</code></a> was on.\nThis led to many builds being just as slow as if <a href=\"/tsconfig#incremental\"><code>incremental</code></a> was turned off.\nTypeScript 4.4 fixes this, though the change has also been back-ported to TypeScript 4.3.</p>\n<p>See more <a href=\"https://github.com/microsoft/TypeScript/pull/44394\">here</a>.</p>\n<h3 id=\"faster-source-map-generation-for-big-outputs\" style=\"position:relative;\"><a href=\"#faster-source-map-generation-for-big-outputs\" aria-label=\"faster source map generation for big outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster Source Map Generation for Big Outputs</h3>\n<p>TypeScript 4.4 adds an optimization for source map generation on extremely large output files.\nWhen building an older version of the TypeScript compiler, this results in around an 8% reduction in emit time.</p>\n<p>We’d like to extend our thanks to <a href=\"https://github.com/dmichon-msft\">David Michon</a> who provided a <a href=\"https://github.com/microsoft/TypeScript/pull/44031\">simple and clean change</a> to enable this performance win.</p>\n<h3 id=\"faster---force-builds\" style=\"position:relative;\"><a href=\"#faster---force-builds\" aria-label=\"faster   force builds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster <code>--force</code> Builds</h3>\n<p>When using <code>--build</code> mode on project references, TypeScript has to perform up-to-date checks to determine which files need to be rebuilt.\nWhen performing a <a href=\"/tsconfig#force\"><code>--force</code></a> build, however, that information is irrelevant since every project dependency will be rebuilt from scratch.\nIn TypeScript 4.4, <a href=\"/tsconfig#force\"><code>--force</code></a> builds avoid those unnecessary steps and start a full build.\nSee more about the change <a href=\"https://github.com/microsoft/TypeScript/pull/43666\">here</a>.</p>\n<h2 id=\"spelling-suggestions-for-javascript\" style=\"position:relative;\"><a href=\"#spelling-suggestions-for-javascript\" aria-label=\"spelling suggestions for javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spelling Suggestions for JavaScript</h2>\n<p>TypeScript powers the JavaScript editing experience in editors like Visual Studio and Visual Studio Code.\nMost of the time, TypeScript tries to stay out of the way in JavaScript files;\nhowever, TypeScript often has a lot of information to make confident suggestions, and ways of surfacing suggestions that aren’t <em>too</em> invasive.</p>\n<p>That’s why TypeScript now issues spelling suggestions in plain JavaScript files - ones without <code>// @ts-check</code> or in a project with <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a> turned off.\nThese are the same <em>“Did you mean…?”</em> suggestions that TypeScript files already have, and now they’re available in <em>all</em> JavaScript files in some form.</p>\n<p>These spelling suggestions can provide a subtle clue that your code is wrong.\nWe managed to find a few bugs in existing code while testing this feature!</p>\n<p>For more details on this new feature, <a href=\"https://github.com/microsoft/TypeScript/pull/44271\">take a look at the pull request</a>!</p>\n<h2 id=\"inlay-hints\" style=\"position:relative;\"><a href=\"#inlay-hints\" aria-label=\"inlay hints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inlay Hints</h2>\n<p>TypeScript 4.4 provides support for <em>inlay hints</em> which can help display useful information like parameter names and return types in your code.\nYou can think of it as a sort of friendly “ghost text”.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/08/inlayHints-4.4-rc-ghd.png\" alt=\"A preview of inlay hints in Visual Studio Code\"></p>\n<p>This feature was built by <a href=\"https://github.com/Kingwl\">Wenlu Wang</a> whose <a href=\"https://github.com/microsoft/TypeScript/pull/42089\">pull request</a> has more details.</p>\n<p>Wenlu also contributed <a href=\"https://github.com/microsoft/vscode/pull/113412\">the integration for inlay hints in Visual Studio Code</a> which has shipped as <a href=\"https://code.visualstudio.com/updates/v1_59#_typescript-44\">part of the July 2021 (1.59) release</a>.\nIf you’d like to try inlay hints out, make sure you’re using a recent <a href=\"https://code.visualstudio.com/updates/v1_59\">stable</a> or <a href=\"https://code.visualstudio.com/insiders/\">insiders</a> version of the editor.\nYou can also modify when and where inlay hints get displayed in Visual Studio Code’s settings.</p>\n<h2 id=\"auto-imports-show-true-paths-in-completion-lists\" style=\"position:relative;\"><a href=\"#auto-imports-show-true-paths-in-completion-lists\" aria-label=\"auto imports show true paths in completion lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auto-Imports Show True Paths in Completion Lists</h2>\n<p>When editors like Visual Studio Code show a completion list, completions which include auto-imports are displayed with a path to the given module;\nhowever, this path usually isn’t what TypeScript ends up placing in a module specifier.\nThe path is usually something relative to the <em>workspace</em>, meaning that if you’re importing from a package like <code>moment</code>, you’ll often see a path like <code>node_modules/moment</code>.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/08/completion-import-labels-pre-4-4.png\" alt=\"A completion list containing unwieldy paths containing &#x27;node_modules&#x27;. For example, the label for &#x27;calendarFormat&#x27; is &#x27;node_modules/moment/moment&#x27; instead of &#x27;moment&#x27;.\"></p>\n<p>These paths end up being unwieldy and often misleading, especially given that the path that actually gets inserted into your file needs to consider Node’s <code>node_modules</code> resolution, path mappings, symlinks, and re-exports.</p>\n<p>That’s why with TypeScript 4.4, the completion item label now shows the <em>actual</em> module path that will be used for the import!</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/08/completion-import-labels-4-4.png\" alt=\"A completion list containing clean paths with no intermediate &#x27;node_modules&#x27;. For example, the label for &#x27;calendarFormat&#x27; is &#x27;moment&#x27; instead of &#x27;node_modules/moment/moment&#x27;.\"></p>\n<p>Since this calculation can be expensive, completion lists containing many auto-imports may fill in the final module specifiers in batches as you type more characters. It’s possible that you’ll still sometimes see the old workspace-relative path labels; however, as your editing experience “warms up”, they should get replaced with the actual path after another keystroke or two.</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"libdts-changes-for-typescript-44\" style=\"position:relative;\"><a href=\"#libdts-changes-for-typescript-44\" aria-label=\"libdts changes for typescript 44 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes for TypeScript 4.4</h3>\n<p>As with every TypeScript version, declarations for <code>lib.d.ts</code> (especially the declarations generated for web contexts), have changed.\nYou can consult <a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1029#issuecomment-869224737\">our list of known <code>lib.dom.d.ts</code> changes</a> to understand what is impacted.</p>\n<h3 id=\"more-compliant-indirect-calls-for-imported-functions\" style=\"position:relative;\"><a href=\"#more-compliant-indirect-calls-for-imported-functions\" aria-label=\"more compliant indirect calls for imported functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More-Compliant Indirect Calls for Imported Functions</h3>\n<p>In earlier versions of TypeScript, calling an import from CommonJS, AMD, and other non-ES module systems would set the <code>this</code> value of the called function.\nSpecifically, in the following example, when calling <code>fooModule.foo()</code>, the <code>foo()</code> method will have <code>fooModule</code> set as the value of <code>this</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Imagine this is our imported module, and it has an export named 'foo'.</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fooModule</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">fooModule</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>This is not the way exported functions in ECMAScript are supposed to work when we call them.\nThat’s why TypeScript 4.4 intentionally discards the <code>this</code> value when calling imported functions, by using the following emit.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Imagine this is our imported module, and it has an export named 'foo'.</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fooModule</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Notice we're actually calling '(0, fooModule.foo)' now, which is subtly different.</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fooModule</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">)();</span></div></code></div></pre>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/44624\">read up more about the changes here</a>.</p>\n<h3 id=\"using-unknown-in-catch-variables\" style=\"position:relative;\"><a href=\"#using-unknown-in-catch-variables\" aria-label=\"using unknown in catch variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using <code>unknown</code> in Catch Variables</h3>\n<p>Users running with the <a href=\"/tsconfig#strict\"><code>strict</code></a> flag may see new errors around <code>catch</code> variables being <code>unknown</code>, especially if the existing code assumes only <code>Error</code> values have been caught.\nThis often results in error messages such as:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Property 'message' does not exist on type 'unknown'.\nProperty 'name' does not exist on type 'unknown'.\nProperty 'stack' does not exist on type 'unknown'.</span></div></code></div></pre>\n<p>To get around this, you can specifically add runtime checks to ensure that the thrown type matches your expected type.\nOtherwise, you can just use a type assertion, add an explicit <code>: any</code> to your catch variable, or turn off <a href=\"/tsconfig#useUnknownInCatchVariables\"><code>useUnknownInCatchVariables</code></a>.</p>\n<h3 id=\"broader-always-truthy-promise-checks\" style=\"position:relative;\"><a href=\"#broader-always-truthy-promise-checks\" aria-label=\"broader always truthy promise checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Broader Always-Truthy Promise Checks</h3>\n<p>In prior versions, TypeScript introduced “Always Truthy Promise checks” to catch code where an <code>await</code> may have been forgotten;\nhowever, the checks only applied to named declarations.\nThat meant that while this code would correctly receive an error…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fooResult</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">fooResult</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// &lt;- error! :D</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"true\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"false\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>…the following code would not.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// &lt;- no error :(</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"true\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"false\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript 4.4 now flags both.\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/44491\">read up on the original change</a>.</p>\n<h3 id=\"abstract-properties-do-not-allow-initializers\" style=\"position:relative;\"><a href=\"#abstract-properties-do-not-allow-initializers\" aria-label=\"abstract properties do not allow initializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract Properties Do Not Allow Initializers</h3>\n<p>The following code is now an error because abstract properties may not have initializers:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//       ~~~~</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Property 'prop' cannot have an initializer because it is marked abstract.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Instead, you may only specify a type for the property:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>","headings":[{"value":"Control Flow Analysis of Aliased Conditions and Discriminants","depth":2},{"value":"Symbol and Template String Pattern Index Signatures","depth":2},{"value":"Defaulting to the unknown Type in Catch Variables (--useUnknownInCatchVariables)","depth":2},{"value":"Exact Optional Property Types (--exactOptionalPropertyTypes)","depth":2},{"value":"static Blocks in Classes","depth":2},{"value":"tsc --help Updates and Improvements","depth":2},{"value":"Performance Improvements","depth":2},{"value":"Faster Declaration Emit","depth":3},{"value":"Faster Path Normalization","depth":3},{"value":"Faster Path Mapping","depth":3},{"value":"Faster Incremental Builds with --strict","depth":3},{"value":"Faster Source Map Generation for Big Outputs","depth":3},{"value":"Faster --force Builds","depth":3},{"value":"Spelling Suggestions for JavaScript","depth":2},{"value":"Inlay Hints","depth":2},{"value":"Auto-Imports Show True Paths in Completion Lists","depth":2},{"value":"Breaking Changes","depth":2},{"value":"lib.d.ts Changes for TypeScript 4.4","depth":3},{"value":"More-Compliant Indirect Calls for Imported Functions","depth":3},{"value":"Using unknown in Catch Variables","depth":3},{"value":"Broader Always-Truthy Promise Checks","depth":3},{"value":"Abstract Properties Do Not Allow Initializers","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-4-4.html","title":"TypeScript 4.4","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.4 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-4.4","slug":"/docs/handbook/release-notes/typescript-4-4.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 4.4.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.858Z"}},"staticQueryHashes":[]}