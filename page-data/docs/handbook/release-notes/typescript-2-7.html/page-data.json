{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-2-7.html","result":{"data":{"markdownRemark":{"id":"a0348caf-f7ba-5ee7-a13d-226ae198eef9","excerpt":"Constant-named properties TypeScript 2.7 adds support for declaring const-named properties on types including ECMAScript symbols. Example This also applies to…","html":"<h2 id=\"constant-named-properties\" style=\"position:relative;\"><a href=\"#constant-named-properties\" aria-label=\"constant named properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constant-named properties</h2>\n<p>TypeScript 2.7 adds support for declaring const-named properties on types including ECMAScript symbols.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Lib</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">SERIALIZE </span><span style=\"color: #000000\">= Symbol(</span><span style=\"color: #A31515\">\"serialize-method-key\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Serializable {</span>\n<span style=\"color: #000000\">  [SERIALIZE](</span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">: {}): string;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// consumer</span>\n\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">SERIALIZE</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">Serializable</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"lib\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> JSONSerializableItem </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> Serializable {</span>\n<span style=\"color: #000000\">  [SERIALIZE](</span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">: {}) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> JSON.stringify(</span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>This also applies to numeric and string literals.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Foo </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Foo\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Bar </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Bar\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x </span><span style=\"color: #000000\">= {</span>\n<span style=\"color: #000000\">  [</span><span style=\"color: #1A1A1A\">Foo</span><span style=\"color: #000000\">]: </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  [</span><span style=\"color: #1A1A1A\">Bar</span><span style=\"color: #000000\">]: </span><span style=\"color: #A31515\">\"hello\"</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">a </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">Foo</span><span style=\"color: #000000\">]; </span><span style=\"color: #008000\">// has type 'number'</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">b </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">Bar</span><span style=\"color: #000000\">]; </span><span style=\"color: #008000\">// has type 'string'</span></code></div></pre>\n<h2 id=\"unique-symbol\" style=\"position:relative;\"><a href=\"#unique-symbol\" aria-label=\"unique symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unique symbol</code></h2>\n<p>To enable treating symbols as unique literals a new type <code>unique symbol</code> is available.\n<code>unique symbol</code> is a subtype of <code>symbol</code>, and are produced only from calling <code>Symbol()</code> or <code>Symbol.for()</code>, or from explicit type annotations.\nThe new type is only allowed on <code>const</code> declarations and <code>readonly static</code> properties, and in order to reference a specific unique symbol, you’ll have to use the <code>typeof</code> operator.\nEach reference to a <code>unique symbol</code> implies a completely unique identity that’s tied to a given declaration.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Works</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Foo</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> unique symbol</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// Error! 'Bar' isn't a constant.</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Bar</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> unique symbol </span><span style=\"color: #000000\">= Symbol();</span>\n\n<span style=\"color: #008000\">// Works - refers to a unique symbol, but its identity is tied to 'Foo'.</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Baz</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #1A1A1A\"> Foo </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">Foo</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// Also works.</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">StaticSymbol</span><span style=\"color: #000000\">: unique symbol = Symbol();</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Because each <code>unique symbol</code> has a completely separate identity, no two <code>unique symbol</code> types are assignable or comparable to each other.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Foo </span><span style=\"color: #000000\">= Symbol();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Bar </span><span style=\"color: #000000\">= Symbol();</span>\n\n<span style=\"color: #008000\">// Error: can't compare two unique symbols.</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">Foo</span><span style=\"color: #000000\"> === </span><span style=\"color: #1A1A1A\">Bar</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"strict-class-initialization\" style=\"position:relative;\"><a href=\"#strict-class-initialization\" aria-label=\"strict class initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strict Class Initialization</h2>\n<p>TypeScript 2.7 introduces a new flag called <code>--strictPropertyInitialization</code>.\nThis flag performs checks to ensure that each instance property of a class gets initialized in the constructor body, or by a property initializer.\nFor example</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">baz</span><span style=\"color: #000000\">: boolean;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//  ~~~</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//  Error! Property 'baz' has no initializer and is not definitely assigned in the</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//         constructor.</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>In the above, if we truly meant for <code>baz</code> to potentially be <code>undefined</code>, we should have declared it with the type <code>boolean | undefined</code>.</p>\n<p>There are certain scenarios where properties can be initialized indirectly (perhaps by a helper method or dependency injection library), in which case you can use the new <em>definite assignment assertion modifiers</em> for your properties (discussed below).</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">!: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ^</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Notice this '!' modifier.</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This is the \"definite assignment assertion\"</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.initialize();</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  initialize() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Keep in mind that <code>--strictPropertyInitialization</code> will be turned on along with other <code>--strict</code> mode flags, which can impact your project.\nYou can set the <code>strictPropertyInitialization</code> setting to <code>false</code> in your <code>tsconfig.json</code>’s <code>compilerOptions</code>, or <code>--strictPropertyInitialization false</code> on the command line to turn off this checking.</p>\n<h2 id=\"definite-assignment-assertions\" style=\"position:relative;\"><a href=\"#definite-assignment-assertions\" aria-label=\"definite assignment assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definite Assignment Assertions</h2>\n<p>The definite assignment assertion is a feature that allows a <code>!</code> to be placed after instance property and variable declarations to relay to TypeScript that a variable is indeed assigned for all intents and purposes, even if TypeScript’s analyses cannot detect so.</p>\n<h5 id=\"example-4\" style=\"position:relative;\"><a href=\"#example-4\" aria-label=\"example 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">initialize();</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">//          ~   ~</span>\n<span style=\"color: #008000\">// Error! Variable 'x' is used before being assigned.</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> initialize() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>With definite assignment assertions, we can assert that <code>x</code> is really assigned by appending an <code>!</code> to its declaration:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Notice the '!'</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x!</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">initialize();</span>\n\n<span style=\"color: #008000\">// No error!</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> initialize() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>In a sense, the definite assignment assertion operator is the dual of the non-null assertion operator (in which <em>expressions</em> are post-fixed with a <code>!</code>), which we could also have used in the example.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">initialize();</span>\n\n<span style=\"color: #008000\">// No error!</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">! + </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">!);</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> initialize() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>In our example, we knew that all uses of <code>x</code> would be initialized so it makes more sense to use definite assignment assertions than non-null assertions.</p>\n<h2 id=\"fixed-length-tuples\" style=\"position:relative;\"><a href=\"#fixed-length-tuples\" aria-label=\"fixed length tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixed Length Tuples</h2>\n<p>In TypeScript 2.6 and earlier, <code>[number, string, string]</code> was considered a subtype of <code>[number, string]</code>.\nThis was motivated by TypeScript’s structural nature; the first and second elements of a <code>[number, string, string]</code> are respectively subtypes of the first and second elements of <code>[number, string]</code>.\nHowever, after examining real world usage of tuples, we noticed that most situations in which this was permitted was typically undesirable.</p>\n<p>In TypeScript 2.7, tuples of different arities are no longer assignable to each other.\nThanks to a pull request from <a href=\"https://github.com/tycho01\">Tycho Grouwstra</a>, tuple types now encode their arity into the type of their respective <code>length</code> property.\nThis is accomplished by leveraging numeric literal types, which now allow tuples to be distinct from tuples of different arities.</p>\n<p>Conceptually, you might consider the type <code>[number, string]</code> to be equivalent to the following declaration of <code>NumStrTuple</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> NumStrTuple </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> Array&lt;number | string&gt; {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">length</span><span style=\"color: #000000\">: </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// using the numeric literal type '2'</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Note that this is a breaking change for some code.\nIf you need to resort to the original behavior in which tuples only enforce a minimum length, you can use a similar declaration that does not explicitly define a <code>length</code> property, falling back to <code>number</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> MinimumNumStrTuple </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> Array&lt;number | string&gt; {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Note that this does not imply tuples represent immutable arrays, but it is an implied convention.</p>\n<h2 id=\"improved-type-inference-for-object-literals\" style=\"position:relative;\"><a href=\"#improved-type-inference-for-object-literals\" aria-label=\"improved type inference for object literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved type inference for object literals</h2>\n<p>TypeScript 2.7 improves type inference for multiple object literals occurring in the same context.\nWhen multiple object literal types contribute to a union type, we now <em>normalize</em> the object literal types such that all properties are present in each constituent of the union type.</p>\n<p>Consider:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">obj </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">test</span><span style=\"color: #000000\"> ? { text: </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> } : {}; </span><span style=\"color: #008000\">// { text: string } | { text?: undefined }</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.text; </span><span style=\"color: #008000\">// string | undefined</span></code></div></pre>\n<p>Previously type <code>{}</code> was inferred for <code>obj</code> and the second line subsequently caused an error because <code>obj</code> would appear to have no properties.\nThat obviously wasn’t ideal.</p>\n<h5 id=\"example-5\" style=\"position:relative;\"><a href=\"#example-5\" aria-label=\"example 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// let obj: { a: number, b: number } |</span>\n<span style=\"color: #008000\">//     { a: string, b?: undefined } |</span>\n<span style=\"color: #008000\">//     { a?: undefined, b?: undefined }</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">obj </span><span style=\"color: #000000\">= [{ a: </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, b: </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\"> }, { a: </span><span style=\"color: #A31515\">\"abc\"</span><span style=\"color: #000000\"> }, {}][</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string | number | undefined</span>\n<span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">b</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// number | undefined</span></code></div></pre>\n<p>Multiple object literal type inferences for the same type parameter are similarly collapsed into a single normalized union type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f&lt;T&gt;(...</span><span style=\"color: #1A1A1A\">items</span><span style=\"color: #000000\">: T[]): T;</span>\n<span style=\"color: #008000\">// let obj: { a: number, b: number } |</span>\n<span style=\"color: #008000\">//     { a: string, b?: undefined } |</span>\n<span style=\"color: #008000\">//     { a?: undefined, b?: undefined }</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">obj </span><span style=\"color: #000000\">= f({ a: </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, b: </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\"> }, { a: </span><span style=\"color: #A31515\">\"abc\"</span><span style=\"color: #000000\"> }, {});</span>\n<span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string | number | undefined</span>\n<span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">b</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// number | undefined</span></code></div></pre>\n<h2 id=\"improved-handling-of-structurally-identical-classes-and-instanceof-expressions\" style=\"position:relative;\"><a href=\"#improved-handling-of-structurally-identical-classes-and-instanceof-expressions\" aria-label=\"improved handling of structurally identical classes and instanceof expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved handling of structurally identical classes and <code>instanceof</code> expressions</h2>\n<p>TypeScript 2.7 improves the handling of structurally identical classes in union types and <code>instanceof</code> expressions:</p>\n<ul>\n<li>Structurally identical, but distinct, class types are now preserved in union types (instead of eliminating all but one).</li>\n<li>Union type subtype reduction only removes a class type if it is a subclass of <em>and</em> derives from another class type in the union.</li>\n<li>Type checking of the <code>instanceof</code> operator is now based on whether the type of the left operand <em>derives from</em> the type indicated by the right operand (as opposed to a structural subtype check).</li>\n</ul>\n<p>This means that union types and <code>instanceof</code> properly distinguish between structurally identical classes.</p>\n<h5 id=\"example-6\" style=\"position:relative;\"><a href=\"#example-6\" aria-label=\"example 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> A {}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> B </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> A {}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> A {}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> D </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> A {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> E </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> D {}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x1 </span><span style=\"color: #000000\">= !</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> A() : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> B(); </span><span style=\"color: #008000\">// A</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x2 </span><span style=\"color: #000000\">= !</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> B() : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> C(); </span><span style=\"color: #008000\">// B | C (previously B)</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x3 </span><span style=\"color: #000000\">= !</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> C() : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> D(); </span><span style=\"color: #008000\">// C | D (previously C)</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">a1 </span><span style=\"color: #000000\">= [</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> A(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> B(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> C(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> D(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> E()]; </span><span style=\"color: #008000\">// A[]</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">a2 </span><span style=\"color: #000000\">= [</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> B(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> C(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> D(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> E()]; </span><span style=\"color: #008000\">// (B | C | D)[] (previously B[])</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f1(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: B | C | D) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> B) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// B (previously B | D)</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> C) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// C</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// D (previously never)</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"type-guards-inferred-from-in-operator\" style=\"position:relative;\"><a href=\"#type-guards-inferred-from-in-operator\" aria-label=\"type guards inferred from in operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type guards inferred from <code>in</code> operator</h2>\n<p>The <code>in</code> operator now acts as a narrowing expression for types.</p>\n<p>For a <code>n in x</code> expression, where <code>n</code> is a string literal or string literal type and <code>x</code> is a union type, the “true” branch narrows to types which have an optional or required property <code>n</code>, and the “false” branch narrows to types which have an optional or missing property <code>n</code>.</p>\n<h5 id=\"example-7\" style=\"position:relative;\"><a href=\"#example-7\" aria-label=\"example 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> A {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> B {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">b</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> foo(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: A | B) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">b</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"support-for-import-d-from-cjs-from-commonjs-modules-with---esmoduleinterop\" style=\"position:relative;\"><a href=\"#support-for-import-d-from-cjs-from-commonjs-modules-with---esmoduleinterop\" aria-label=\"support for import d from cjs from commonjs modules with   esmoduleinterop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>import d from \"cjs\"</code> from CommonJS modules with <code>--esModuleInterop</code></h2>\n<p>TypeScript 2.7 updates CommonJS/AMD/UMD module emit to synthesize namespace records based on the presence of an <code>__esModule</code> indicator under <code>--esModuleInterop</code>.\nThe change brings the generated output from TypeScript closer to that generated by Babel.</p>\n<p>Previously CommonJS/AMD/UMD modules were treated in the same way as ES6 modules, resulting in a couple of problems. Namely:</p>\n<ul>\n<li>TypeScript treats a namespace import (i.e. <code>import * as foo from \"foo\"</code>) for a CommonJS/AMD/UMD module as equivalent to <code>const foo = require(\"foo\")</code>.Things are simple here, but they don’t work out if the primary object being imported is a primitive or a class or a function. ECMAScript spec stipulates that a namespace record is a plain object, and that a namespace import (<code>foo</code> in the example above) is not callable, though allowed by TypeScript</li>\n<li>Similarly a default import (i.e. <code>import d from \"foo\"</code>) for a CommonJS/AMD/UMD module as equivalent to <code>const d = require(\"foo\").default</code>.Most of the CommonJS/AMD/UMD modules available today do not have a <code>default</code> export, making this import pattern practically unusable to import non-ES modules (i.e. CommonJS/AMD/UMD). For instance <code>import fs from \"fs\"</code> or <code>import express from \"express\"</code> are not allowed.</li>\n</ul>\n<p>Under the new <code>--esModuleInterop</code> these two issues should be addressed:</p>\n<ul>\n<li>A namespace import (i.e. <code>import * as foo from \"foo\"</code>) is now correctly flagged as uncallable. Calling it will result in an error.</li>\n<li>Default imports to CommonJS/AMD/UMD are now allowed (e.g. <code>import fs from \"fs\"</code>), and should work as expected.</li>\n</ul>\n<blockquote>\n<p>Note: The new behavior is added under a flag to avoid unwarranted breaks to existing code bases. <strong>We highly recommend applying it both to new and existing projects.</strong>\nFor existing projects, namespace imports (<code>import * as express from \"express\"; express();</code>) will need to be converted to default imports (<code>import express from \"express\"; express();</code>).</p>\n</blockquote>\n<h5 id=\"example-8\" style=\"position:relative;\"><a href=\"#example-8\" aria-label=\"example 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>With <code>--esModuleInterop</code> two new helpers are generated <code>__importStar</code> and <code>__importDefault</code> for import <code>*</code> and import <code>default</code> respectively.\nFor instance input like:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Will generate:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__importStar</span><span style=\"color: #000000\"> =</span>\n<span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__importStar</span><span style=\"color: #000000\">) ||</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\"> = {};</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\"> != </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (Object.</span><span style=\"color: #1A1A1A\">hasOwnProperty</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #000000\">)) </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #000000\">] = </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__importDefault</span><span style=\"color: #000000\"> =</span>\n<span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__importDefault</span><span style=\"color: #000000\">) ||</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\"> : { default: </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">exports.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> = __importStar(require(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">));</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">bar_1</span><span style=\"color: #000000\"> = __importDefault(require(</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">));</span></code></div></pre>\n<h2 id=\"numeric-separators\" style=\"position:relative;\"><a href=\"#numeric-separators\" aria-label=\"numeric separators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numeric separators</h2>\n<p>TypeScript 2.7 brings support for <a href=\"https://github.com/tc39/proposal-numeric-separator\">ES Numeric Separators</a>.\nNumeric literals can now be separated into segments using <code>_</code>.</p>\n<h5 id=\"example-9\" style=\"position:relative;\"><a href=\"#example-9\" aria-label=\"example 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">million </span><span style=\"color: #000000\">= 1</span><span style=\"color: #1A1A1A\">_000_000</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">phone </span><span style=\"color: #000000\">= 555</span><span style=\"color: #1A1A1A\">_734_2231</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">bytes </span><span style=\"color: #000000\">= 0</span><span style=\"color: #1A1A1A\">xff_0c_00_ff</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">word </span><span style=\"color: #000000\">= 0</span><span style=\"color: #1A1A1A\">b1100_0011_1101_0001</span><span style=\"color: #000000\">;</span></code></div></pre>\n<h2 id=\"cleaner-output-in---watch-mode\" style=\"position:relative;\"><a href=\"#cleaner-output-in---watch-mode\" aria-label=\"cleaner output in   watch mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cleaner output in <code>--watch</code> mode</h2>\n<p>TypeScript’s <code>--watch</code> mode now clears the screen after a re-compilation is requested.</p>\n<h2 id=\"prettier---pretty-output\" style=\"position:relative;\"><a href=\"#prettier---pretty-output\" aria-label=\"prettier   pretty output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prettier <code>--pretty</code> output</h2>\n<p>TypeScript’s <code>--pretty</code> flag can make error messages easier to read and manage.\n<code>--pretty</code> now uses colors for file names, diagnostic codes, and line numbers.\nFile names and positions are now also formatted to allow navigation in common terminals (e.g. Visual Studio Code terminal).</p>","headings":[{"value":"Constant-named properties","depth":2},{"value":"Example","depth":5},{"value":"Example","depth":5},{"value":"unique symbol","depth":2},{"value":"Example","depth":5},{"value":"Example","depth":5},{"value":"Strict Class Initialization","depth":2},{"value":"Definite Assignment Assertions","depth":2},{"value":"Example","depth":5},{"value":"Fixed Length Tuples","depth":2},{"value":"Improved type inference for object literals","depth":2},{"value":"Example","depth":5},{"value":"Improved handling of structurally identical classes and instanceof expressions","depth":2},{"value":"Example","depth":5},{"value":"Type guards inferred from in operator","depth":2},{"value":"Example","depth":5},{"value":"Support for import d from \"cjs\" from CommonJS modules with --esModuleInterop","depth":2},{"value":"Example","depth":5},{"value":"Numeric separators","depth":2},{"value":"Example","depth":5},{"value":"Cleaner output in --watch mode","depth":2},{"value":"Prettier --pretty output","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-7.html","title":"TypeScript 2.7","disable_toc":null,"handbook":null,"oneline":"TypeScript 2.7 Release Notes","beta":null}},"prev":null,"next":null},"pageContext":{"id":"4typescript-2.7","slug":"/docs/handbook/release-notes/typescript-2-7.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 2.7.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.623Z"}},"staticQueryHashes":[]}