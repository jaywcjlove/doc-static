{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-4-6.html","result":{"data":{"markdownRemark":{"id":"d80d70fd-4514-5c52-8df6-d5c8bbaa3eaf","excerpt":"Allowing Code in Constructors Before super() In JavaScript classes it’s mandatory to call super() before referring to this.\r\nTypeScript enforces this as well…","html":"<h2 id=\"allowing-code-in-constructors-before-super\" style=\"position:relative;\"><a href=\"#allowing-code-in-constructors-before-super\" aria-label=\"allowing code in constructors before super permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Allowing Code in Constructors Before <code>super()</code></h2>\n<p>In JavaScript classes it’s mandatory to call <code>super()</code> before referring to <code>this</code>.\r\nTypeScript enforces this as well, though it was a bit too strict in <em>how</em> it ensured this.\r\nIn TypeScript, it was previously an error to contain <em>any</em> code at the beginning of a constructor if its containing class had any property initializers.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">someProperty</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// have to call 'super()' first because it needs to initialize 'someProperty'.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doSomeStuff</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This made it cheap to check that <code>super()</code> gets called before <code>this</code> is referenced, but it ended up rejecting a lot of valid code.\r\nTypeScript 4.6 is now much more lenient in that check and permits other code to run before <code>super()</code>., all while still ensuring that <code>super()</code> occurs at the top-level before any references to <code>this</code>.</p>\n<p>We’d like to extend our thanks to <a href=\"https://github.com/JoshuaKGoldberg\">Joshua Goldberg</a> for <a href=\"https://github.com/microsoft/TypeScript/pull/29374\">patiently working with us to land this change</a>!</p>\n<h2 id=\"control-flow-analysis-for-destructured-discriminated-unions\" style=\"position:relative;\"><a href=\"#control-flow-analysis-for-destructured-discriminated-unions\" aria-label=\"control flow analysis for destructured discriminated unions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow Analysis for Destructured Discriminated Unions</h2>\n<p>TypeScript is able to narrow types based on what’s called a discriminant property.\r\nFor example, in the following code snippet, TypeScript is able to narrow the type of <code>action</code> based on every time we check against the value of <code>kind</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Action</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"NumberContents\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"StringContents\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">processAction</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Action</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"NumberContents\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// `action.payload` is a number here.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"StringContents\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// `action.payload` is a string here.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This lets us work with objects that can hold different data, but a common field tells us <em>which</em> data those objects have.</p>\n<p>This is very common in TypeScript; however, depending on your preferences, you might have wanted to destructure <code>kind</code> and <code>payload</code> in the the example above.\r\nPerhaps something like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Action</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"NumberContents\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">  | { </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"StringContents\"</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">processAction</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Action</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #0070C1\">kind</span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\">payload</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"NumberContents\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"StringContents\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Previously TypeScript would error on these - once <code>kind</code> and <code>payload</code> were extracted from the same object into variables, they were considered totally independent.</p>\n<p>In TypeScript 4.6, this just works!</p>\n<p>When destructuring individual properties into a <code>const</code> declaration, or when destructuring a parameter into variables that are never assigned to, TypeScript will check for if the destructured type is a discriminated union.\r\nIf it is, TypeScript can now narrow the types of variables depending on checks of other variables\r\nSo in our example, a check on <code>kind</code> narrows the type of <code>payload</code>.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/46266\">see the pull request that implemented this analysis</a>.</p>\n<h2 id=\"improved-recursion-depth-checks\" style=\"position:relative;\"><a href=\"#improved-recursion-depth-checks\" aria-label=\"improved recursion depth checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved Recursion Depth Checks</h2>\n<p>TypeScript has some interesting challenges due to the fact that it’s built on a structural type system that also provides generics.</p>\n<p>In a structural type system, object types are compatible based on the members they have.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Source</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Target</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">check</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Source</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Target</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">source</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Type 'Source' is not assignable to type 'Target'.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//   Types of property 'prop' are incompatible.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//     Type 'string' is not assignable to type 'number'.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Notice that whether or not <code>Source</code> is compatible with <code>Target</code> has to do with whether their <em>properties</em> are assignable.\r\nIn this case, that’s just <code>prop</code>.</p>\n<p>When you introduce generics into this, there are some harder questions to answer.\r\nFor instance, is a <code>Source&#x3C;string></code> assignable to a <code>Target&#x3C;number></code> in the following case?</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Source</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Source</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Source</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Target</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Target</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Target</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">check</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Source</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Target</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">source</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In order to answer that, TypeScript needs to check whether the types of <code>prop</code> are compatible.\r\nThat leads to the another question: is a <code>Source&#x3C;Source&#x3C;string>></code> assignable to a <code>Target&#x3C;Target&#x3C;number>></code>?\r\nTo answer that, TypeScript checks whether <code>prop</code> is compatible for <em>those</em> types, and ends up checking whether <code>Source&#x3C;Source&#x3C;Source&#x3C;string>>></code> is assignable to <code>Target&#x3C;Target&#x3C;Target&#x3C;number>>></code>.\r\nKeep going for a bit, and you might notice that the type infinitely expands the more you dig in.</p>\n<p>TypeScript has a few heuristics here - if a type <em>appears</em> to be infinitely expanding after encountering a certain depth check, then it considers that the types <em>could</em> be compatible.\r\nThis is usually enough, but embarrassingly there were some false-negatives that this wouldn’t catch.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;&gt;&gt;&gt;&gt;&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;&gt;&gt;&gt;&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>A human reader can see that <code>x</code> and <code>y</code> should be incompatible in the above example.\r\nWhile the types are deeply nested, that’s just a consequence of how they were declared.\r\nThe heuristic was meant to capture cases where deeply-nested types were generated through exploring the types, not from when a developer wrote that type out themselves.</p>\n<p>TypeScript 4.6 is now able to distinguish these cases, and correctly errors on the last example.\r\nAdditionally, because the language is no longer concerned with false-positives from explicitly-written types, TypeScript can conclude that a type is infinitely expanding much earlier, and save a bunch of work in checking for type compatibility.\r\nAs a result, libraries on DefinitelyTyped like <code>redux-immutable</code>, <code>react-lazylog</code>, and <code>yup</code> saw a 50% reduction in check-time.</p>\n<p>You may already have this change because it was cherry-picked into TypeScript 4.5.3, but it is a notable feature of TypeScript 4.6 which you can read up more about <a href=\"https://github.com/microsoft/TypeScript/pull/46599\">here</a>.</p>\n<h2 id=\"indexed-access-inference-improvements\" style=\"position:relative;\"><a href=\"#indexed-access-inference-improvements\" aria-label=\"indexed access inference improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexed Access Inference Improvements</h2>\n<p>TypeScript now can correctly infer to indexed access types which immediately index into a mapped object type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeMap</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">boolean</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">UnionRecord</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeMap</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\">]: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TypeMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TypeMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}[</span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">processRecord</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeMap</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">record</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">UnionRecord</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">record</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">record</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// This call used to have issues - now works!</span></div><div class='line'><span style=\"color: #795E26\">processRecord</span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">kind:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">v:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 'val' used to implicitly have the type 'string | number | boolean',</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// but now is correctly inferred to just 'string'.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">f</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">val</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">val</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>This pattern was already supported and allowed TypeScript to understand that the call to <code>record.f(record.v)</code> is valid, but previously the call to <code>processRecord</code> would give poor inference results for <code>val</code></p>\n<p>TypeScript 4.6 improves this so that no type assertions are necessary within the call to <code>processRecord</code>.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/47109\">read up on the pull request</a>.</p>\n<h2 id=\"control-flow-analysis-for-dependent-parameters\" style=\"position:relative;\"><a href=\"#control-flow-analysis-for-dependent-parameters\" aria-label=\"control flow analysis for dependent parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow Analysis for Dependent Parameters</h2>\n<p>A signature can be declared with a rest parameter whose type is a discriminated union of tuples.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"str\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">] | [</span><span style=\"color: #A31515\">\"num\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>What this says is that the arguments to <code>func</code> depends entirely on the first argument.\r\nWhen the first argument is the string <code>\"str\"</code>, then its second argument has to be a <code>string</code>.\r\nWhen its first argument is the string <code>\"num\"</code>, its second argument has to be a <code>number</code>.</p>\n<p>In cases where TypeScript infers the type of a function from a signature like this, TypeScript can now narrow parameters that depend on each other.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Func</span><span style=\"color: #000000\"> = (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">] | [</span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Func</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toFixed</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// 'payload' narrowed to 'number'</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">payload</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// 'payload' narrowed to 'string'</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/47190\">see the change on GitHub</a>.</p>\n<h2 id=\"--target-es2022\" style=\"position:relative;\"><a href=\"#--target-es2022\" aria-label=\"  target es2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--target es2022</code></h2>\n<p>TypeScript’s <code>--target</code> option now supports <code>es2022</code>.\r\nThis means features like class fields now have a stable output target where they can be preserved.\r\nIt also means that new built-in functionality like the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>at()</code> method on <code>Array</code>s</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn</code></a>, or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error#rethrowing_an_error_with_a_cause\">the <code>cause</code> option on <code>new Error</code></a> can be used either with this new <code>--target</code> setting, or with <code>--lib es2022</code>.</p>\n<p>This functionality was <a href=\"https://github.com/microsoft/TypeScript/pull/46291\">implemented</a> by <a href=\"https://github.com/saschanaz\">Kagami Sascha Rosylight (saschanaz)</a> over several PRs, and we’re grateful for that contribution!</p>\n<h2 id=\"removed-unnecessary-arguments-in-react-jsx\" style=\"position:relative;\"><a href=\"#removed-unnecessary-arguments-in-react-jsx\" aria-label=\"removed unnecessary arguments in react jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removed Unnecessary Arguments in <code>react-jsx</code></h2>\n<p>Previously, when compiling code like the following in <code>--jsx react-jsx</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">el</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">foo</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>TypeScript would produce the following JavaScript code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_jsx</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react/jsx-runtime\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">el</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">_jsx</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\"> }, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>That last <code>void 0</code> argument is unnecessary in this emit mode, and removing it can improve bundle sizes.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">- export const el = _jsx(\"div\", { children: \"foo\" }, void 0);</span></div><div class='line'><span style=\"color: #098658\">+ export const el = _jsx(\"div\", { children: \"foo\" });</span></div></code></div></pre>\n<p>Thanks to <a href=\"https://github.com/microsoft/TypeScript/pull/47467\">a pull request</a> from <a href=\"https://github.com/a-tarasyuk\">Alexander Tarasyuk</a>, TypeScript 4.6 now drops the <code>void 0</code> argument.</p>\n<h2 id=\"jsdoc-name-suggestions\" style=\"position:relative;\"><a href=\"#jsdoc-name-suggestions\" aria-label=\"jsdoc name suggestions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDoc Name Suggestions</h2>\n<p>In JSDoc, you can document parameters using an <code>@param</code> tag.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #008000\"> The first operand</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #008000\"> The second operand</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">add</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>But what happens when these comments fall out of date?\r\nWhat if we rename <code>x</code> and <code>y</code> to <code>a</code> and <code>b</code>?</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #008000\"> {number} The first operand</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #008000\"> {number} The second operand</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">add</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Previously TypeScript would only tell you about this when performing type-checking on JavaScript files - when using either the <code>checkJs</code> option, or adding a <code>// @ts-check</code> comment to the top of your file.</p>\n<p>You can now get similar information for TypeScript files in your editor!\r\nTypeScript now provides suggestions for when parameter names don’t match between your function and its JSDoc comment.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2022/02/jsdoc-comment-suggestions-4-6.png\" alt=\"Suggestion diagnostics being shown in the editor for parameter names in JSDoc comments that don&#x27;t match an actual parameter name.\"></p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/47257\">This change</a> was provided courtesy of <a href=\"https://github.com/a-tarasyuk\">Alexander Tarasyuk</a>!</p>\n<h2 id=\"more-syntax-and-binding-errors-in-javascript\" style=\"position:relative;\"><a href=\"#more-syntax-and-binding-errors-in-javascript\" aria-label=\"more syntax and binding errors in javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More Syntax and Binding Errors in JavaScript</h2>\n<p>TypeScript has expanded its set of syntax and binding errors in JavaScript files.\r\nYou’ll see these new errors if you open JavaScript files in an editor like Visual Studio or Visual Studio Code, or if you run JavaScript code through the TypeScript compiler - even if you don’t turn on <code>checkJs</code> or add a <code>// @ts-check</code> comment to the top of your files.</p>\n<p>As one example, if you have two declarations of a <code>const</code> in the same scope of a JavaScript file, TypeScript will now issue an error on those declarations.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1234</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//    ~~~</span></div><div class='line'><span style=\"color: #008000\">// error: Cannot redeclare block-scoped variable 'foo'.</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ...</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">5678</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//    ~~~</span></div><div class='line'><span style=\"color: #008000\">// error: Cannot redeclare block-scoped variable 'foo'.</span></div></code></div></pre>\n<p>As another example, TypeScript will let you know if a modifier is being incorrectly used.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">container</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error: Modifiers cannot appear here.</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>These errors can be disabled by adding a <code>// @ts-nocheck</code> at the top of your file, but we’re interested in hearing some early feedback about how it works for your JavaScript workflow.\r\nYou can easily try it out for Visual Studio Code by installing the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">TypeScript and JavaScript Nightly Extension</a>, and read up more on the <a href=\"https://github.com/microsoft/TypeScript/pull/47067\">first</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/47075\">second</a> pull requests.</p>\n<h2 id=\"typescript-trace-analyzer\" style=\"position:relative;\"><a href=\"#typescript-trace-analyzer\" aria-label=\"typescript trace analyzer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Trace Analyzer</h2>\n<p>Occasionally, teams may encounter types that are computationally expensive to create and compare against other types.\r\n<a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#performance-tracing\">TypeScript has a <code>--generateTrace</code> flag</a> to help identify some of those expensive types, or sometimes help diagnose issues in the TypeScript compiler.\r\nWhile the information generated by <code>--generateTrace</code> can be useful (especially with some information added in TypeScript 4.6), it can often be hard to read in existing trace visualizers.</p>\n<p>We recently published a tool called <a href=\"https://www.npmjs.com/package/@typescript/analyze-trace\">@typescript/analyze-trace</a> to get a more digestible view of this information.\r\nWhile we don’t expect everyone to need <code>analyze-trace</code>, we think it can come in handy for any team that is running into <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">build performance issues with TypeScript</a>.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/typescript-analyze-trace\">see the <code>analyze-trace</code> tool’s repo</a>.</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"object-rests-drop-unspreadable-members-from-generic-objects\" style=\"position:relative;\"><a href=\"#object-rests-drop-unspreadable-members-from-generic-objects\" aria-label=\"object rests drop unspreadable members from generic objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Rests Drop Unspreadable Members from Generic Objects</h3>\n<p>Object rest expressions now drop members that appear to be unspreadable on generic objects.\r\nIn the following example…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">someProperty</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someProperty</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Used to work, is now an error!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Property 'someMethod' does not exist on type 'Omit&lt;T, \"someProperty\" | \"someMethod\"&gt;'.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>the variable <code>rest</code> used to have the type <code>Omit&#x3C;T, \"someProperty\"></code> because TypeScript would strictly analyze which other properties were destructured.\r\nThis doesn’t model how <code>...rest</code> would work in a destructuring from a non-generic type because <code>someMethod</code> would typically be dropped as well.\r\nIn TypeScript 4.6, the type of <code>rest</code> is <code>Omit&#x3C;T, \"someProperty\" | \"someMethod\"></code>.</p>\n<p>This can also come up in cases when destructuring from <code>this</code>.\r\nWhen destructuring <code>this</code> using a <code>...rest</code> element, unspreadable and non-public members are now dropped, which is consistent with destructuring instances of a class in other places.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">someProperty</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">someOtherMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someProperty</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\"> } = </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Used to work, is now an error!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Property 'someMethod' does not exist on type 'Omit&lt;T, \"someProperty\" | \"someMethod\"&gt;'.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/47078\">see the corresponding change here</a>.</p>\n<h3 id=\"javascript-files-always-receive-grammar-and-binding-errors\" style=\"position:relative;\"><a href=\"#javascript-files-always-receive-grammar-and-binding-errors\" aria-label=\"javascript files always receive grammar and binding errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Files Always Receive Grammar and Binding Errors</h3>\n<p>Previously, TypeScript would ignore most grammar errors in JavaScript apart from accidentally using TypeScript syntax in a JavaScript file.\r\nTypeScript now shows JavaScript syntax and binding errors in your file, such as using incorrect modifiers, duplicate declarations, and more.\r\nThese will typically be most apparent in Visual Studio Code or Visual Studio, but can also occur when running JavaScript code through the TypeScript compiler.</p>\n<p>You can explicitly turn these errors off by inserting a <code>// @ts-nocheck</code> comment at the top of your file.</p>\n<p>For more information, see the <a href=\"https://github.com/microsoft/TypeScript/pull/47067\">first</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/47075\">second</a> implementing pull requests for these features.</p>","headings":[{"value":"Allowing Code in Constructors Before super()","depth":2},{"value":"Control Flow Analysis for Destructured Discriminated Unions","depth":2},{"value":"Improved Recursion Depth Checks","depth":2},{"value":"Indexed Access Inference Improvements","depth":2},{"value":"Control Flow Analysis for Dependent Parameters","depth":2},{"value":"--target es2022","depth":2},{"value":"Removed Unnecessary Arguments in react-jsx","depth":2},{"value":"JSDoc Name Suggestions","depth":2},{"value":"More Syntax and Binding Errors in JavaScript","depth":2},{"value":"TypeScript Trace Analyzer","depth":2},{"value":"Breaking Changes","depth":2},{"value":"Object Rests Drop Unspreadable Members from Generic Objects","depth":3},{"value":"JavaScript Files Always Receive Grammar and Binding Errors","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-4-6.html","title":"TypeScript 4.6","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.6 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-4.6","slug":"/docs/handbook/release-notes/typescript-4-6.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 4.6.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.858Z"}},"staticQueryHashes":[]}