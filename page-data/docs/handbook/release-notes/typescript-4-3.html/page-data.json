{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-4-3.html","result":{"data":{"markdownRemark":{"id":"7dc4356d-103e-5ca0-88a2-be8f8dad5243","excerpt":"Separate Write Types on Properties In JavaScript, it’s pretty common for APIs to convert values that are passed in before storing them.\nThis often happens with…","html":"<h2 id=\"separate-write-types-on-properties\" style=\"position:relative;\"><a href=\"#separate-write-types-on-properties\" aria-label=\"separate write types on properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Separate Write Types on Properties</h2>\n<p>In JavaScript, it’s pretty common for APIs to convert values that are passed in before storing them.\nThis often happens with getters and setters too.\nFor example, let’s imagine we’ve got a class with a setter that always converts a value into a <code>number</code> before saving it in a private field.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Thing' >Thing</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(getter) Thing.size: number' >size</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(setter) Thing.size: number' >size</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: number' >value</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let num: number' >num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Number: NumberConstructor&#10;(value?: any) => number' >Number</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: number' >value</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Don&apos;t allow NaN and stuff.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #1C6277\"><data-lsp lsp='var Number: NumberConstructor' >Number</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) NumberConstructor.isFinite(number: unknown): boolean' >isFinite</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let num: number' >num</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let num: number' >num</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAqAWBLAdgc2gbwFDWgYgkQC8BTaAXmgAYBuLHaVEgF2kNIAoBKTB3AJxYBXfsmjMkEAHQFiJOrgC+DCCzZyOANzAghJHtly4Qa5EIC2FaADkLAIxL8tOvVzp9oAek-QAIgHtkAHJWHRB-AHcbMGtoMGQAEzZmIQAzVKkPRFToDgBCW3MHfilECAAxFERmEg4zcy4DD1wJMpl2MkpaZuhBFNEFI2UPVulZUit6weVFIA'>Try</a></div></pre>\n<p>How would we type this JavaScript code in TypeScript?\nWell, technically we don’t have to do anything special here - TypeScript can look at this with no explicit types and can figure out that <code>size</code> is a number.</p>\n<p>The problem is that <code>size</code> allows you to assign more than just <code>number</code>s to it.\nWe could get around this by saying that <code>size</code> has the type <code>unknown</code> or <code>any</code> like in this snippet:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">size</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>But that’s no good - <code>unknown</code> forces people reading <code>size</code> to do a type assertion, and <code>any</code> won’t catch any mistakes.\nIf we really want to model APIs that convert values, previous versions of TypeScript forced us to pick between being precise (which makes reading values easier, and writing harder) and being permissive (which makes writing values easier, and reading harder).</p>\n<p>That’s why TypeScript 4.3 allows you to specify types for reading and writing to properties.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Thing' >Thing</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(getter) Thing.size: number' >size</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(setter) Thing.size: string | number | boolean' >size</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: string | number | boolean' >value</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let num: number' >num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Number: NumberConstructor&#10;(value?: any) => number' >Number</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: string | number | boolean' >value</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Don&apos;t allow NaN and stuff.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #1C6277\"><data-lsp lsp='var Number: NumberConstructor' >Number</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) NumberConstructor.isFinite(number: unknown): boolean' >isFinite</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let num: number' >num</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#size</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let num: number' >num</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAqAWBLAdgc2gbwFDWgYgkQC8BTaAXmgAYBuLHaVEgF2kNIAoBKALmmQCuAWwBGJAE6YGucSwHjk0ZkggA6AsRJ1cAX3q4ILNpo4A3MCAEk+EZuJToAPv2FjJzkQHtPIEmGRcUri4vqyCQhTQAHKuEmYWVlx00tAA9KnQACKeyADkrBYgngDu0WBR0P4AJmzMAgBm9aopiPXQHACEMaISqogQAGIoiMwkHOFcgdjBwcr96uxklLQpMnIK2sF6KXNqGqSR4Zt6OkA'>Try</a></div></pre>\n<p>In the above example, our <code>set</code> accessor takes a broader set of types (<code>string</code>s, <code>boolean</code>s, and <code>number</code>s), but our <code>get</code> accessor always guarantees it will be a <code>number</code>.\nNow we can finally assign other types to these properties with no errors!</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let thing: Thing' >thing</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Thing(): Thing' >Thing</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Assigning other types to `thing.size` works!</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let thing: Thing' >thing</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Thing.size: string | number | boolean' >size</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let thing: Thing' >thing</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Thing.size: string | number | boolean' >size</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let thing: Thing' >thing</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Thing.size: string | number | boolean' >size</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Reading `thing.size` always produces a number!</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let mySize: number' >mySize</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let thing: Thing' >thing</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Thing.size: number' >size</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAqAWBLAdgc2gbwFDWgYgkQC8BTaAXmgAYBuLHaVEgF2kNIAoBKALmmQCuAWwBGJAE6YGucSwHjk0ZkggA6AsRJ1cAX3q4ILNpo4A3MCAEk+EZuJToAPv2FjJzkQHtPIEmGRcUri4vqyCQhTQAHKuEmYWVlx00tAA9KnQACKeyADkrBYgngDu0WBR0P4AJmzMAgBm9aopiPXQHACEMaISqogQAGIoiMwkHOFcgdjBwcr96uxklLQpMnIK2sF6KXNqGqSR4Zt6eunQALSXwALMl+dYoUpIaIckpQgO3MlnAIJQiKhkA5oJ5lBIlABPAAOJBgzE80AABnM0KpFojoMVPOIANYQDpYFGoNGaSIAIngJBARTJdCJJIOlDsVjpz2Ji0iABYAEzfDIAJT8VWByLZDJIGIsxTAEJgUPEniqAmAsMqLh64gJjyEEIAypo+OE3JF6YsaEA'>Try</a></div></pre>\n<p>When considering how two properties with the same name relate to each other, TypeScript will only use the “reading” type (e.g. the type on the <code>get</code> accessor above).\n“Writing” types are only considered when directly writing to a property.</p>\n<p>Keep in mind, this isn’t a pattern that’s limited to classes.\nYou can write getters and setters with different types in object literals.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeThing</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">size</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">size</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Number</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// Don't allow NaN and stuff.</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #1C6277\">Number</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isFinite</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">      }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In fact, we’ve added syntax to interfaces/object types to support different reading/writing types on properties.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Now valid!</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">size</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">size</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>One limitation of using different types for reading and writing properties is that the type for reading a property has to be assignable to the type that you’re writing.\nIn other words, the getter type has to be assignable to the setter.\nThis ensures some level of consistency, so that a property is always assignable to itself.</p>\n<p>For more information on this feature, take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/42425\">the implementing pull request</a>.</p>\n<h2 id=\"override-and-the---noimplicitoverride-flag\" style=\"position:relative;\"><a href=\"#override-and-the---noimplicitoverride-flag\" aria-label=\"override and the   noimplicitoverride flag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>override</code> and the <code>--noImplicitOverride</code> Flag</h2>\n<p>When extending classes in JavaScript, the language makes it super easy (pun intended) to override methods - but unfortunately, there are some mistakes that you can run into.</p>\n<p>One big one is missing renames.\nFor example, take the following classes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">show</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">hide</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SpecializedComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">show</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">hide</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>SpecializedComponent</code> subclasses <code>SomeComponent</code>, and overrides the <code>show</code> and <code>hide</code> methods.\nWhat happens if someone decides to rip out <code>show</code> and <code>hide</code> and replace them with a single method?</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\"> class SomeComponent {</span></div><div class='line'><span style=\"color: #A31515\">-    show() {</span></div><div class='line'><span style=\"color: #A31515\">-        // ...</span></div><div class='line'><span style=\"color: #A31515\">-    }</span></div><div class='line'><span style=\"color: #A31515\">-    hide() {</span></div><div class='line'><span style=\"color: #A31515\">-        // ...</span></div><div class='line'><span style=\"color: #A31515\">-    }</span></div><div class='line'><span style=\"color: #098658\">+    setVisible(value: boolean) {</span></div><div class='line'><span style=\"color: #098658\">+        // ...</span></div><div class='line'><span style=\"color: #098658\">+    }</span></div><div class='line'><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\"> class SpecializedComponent extends SomeComponent {</span></div><div class='line'><span style=\"color: #000000\">     show() {</span></div><div class='line'><span style=\"color: #000000\">         // ...</span></div><div class='line'><span style=\"color: #000000\">     }</span></div><div class='line'><span style=\"color: #000000\">     hide() {</span></div><div class='line'><span style=\"color: #000000\">         // ...</span></div><div class='line'><span style=\"color: #000000\">     }</span></div><div class='line'><span style=\"color: #000000\"> }</span></div></code></div></pre>\n<p><em>Oh no!</em>\nOur <code>SpecializedComponent</code> didn’t get updated.\nNow it’s just adding these two useless <code>show</code> and <code>hide</code> methods that probably won’t get called.</p>\n<p>Part of the issue here is that a user can’t make it clear whether they meant to add a new method, or to override an existing one.\nThat’s why TypeScript 4.3 adds the <code>override</code> keyword.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SpecializedComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">override</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">show</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">override</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">hide</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>When a method is marked with <code>override</code>, TypeScript will always make sure that a method with the same name exists in a the base class.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SomeComponent' >SomeComponent</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SomeComponent.setVisible(value: boolean): void' >setVisible</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: boolean' >value</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SpecializedComponent' >SpecializedComponent</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SomeComponent' >SomeComponent</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">override</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='(method) SpecializedComponent.show(): void' >show</data-lsp></data-err></span><span style=\"color: #000000\">() {</span></div><span class=\"error\"><span>This member cannot have an 'override' modifier because it is not declared in the base class 'SomeComponent'.</span><span class=\"code\">4113</span></span><span class=\"error-behind\">This member cannot have an 'override' modifier because it is not declared in the base class 'SomeComponent'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwPIDcBTAJyNQBMCAoECYo6IgZwC5QAWARg4GZL1kAho0agAytHgEAwhMTRIBSFlABvSqA2hGBLADVUjVACNkBABR4ByAK4FWR6NFMDIASlXrNXmgDo-njQBfSmD+IRFRRAJMK1QALwIyGSR5RWUCAA8sRTIIiWlZVKUPL2hCEnICLQALaAB3M3c1ANBgwKA'>Try</a></div></pre>\n<p>This is a big improvement, but it doesn’t help if you <em>forget</em> to write <code>override</code> on a method - and that’s a big mistake users can run into also.</p>\n<p>For example, you might accidentally “trample over” a method that exists in a base class without realizing it.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">someHelperMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Oops! We weren't trying to override here,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// we just needed to write a local helper method.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">someHelperMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>That’s why TypeScript 4.3 <em>also</em> provides a new <a href=\"/tsconfig#noImplicitOverride\"><code>noImplicitOverride</code></a> flag.\nWhen this option is turned on, it becomes an error to override any method from a superclass unless you explicitly use an <code>override</code> keyword.\nIn that last example, TypeScript would error under <a href=\"/tsconfig#noImplicitOverride\"><code>noImplicitOverride</code></a>, and give us a clue that we probably need to rename our method inside of <code>Derived</code>.</p>\n<p>We’d like to extend our thanks to our community for the implementation here.\nThe work for these items was implemented in <a href=\"https://github.com/microsoft/TypeScript/pull/39669\">a pull request</a> by <a href=\"https://github.com/Kingwl\">Wenlu Wang</a>, though an earlier pull request implementing only the <code>override</code> keyword by <a href=\"https://github.com/pcj\">Paul Cody Johnston</a> served as a basis for direction and discussion.\nWe extend our gratitude for putting in the time for these features.</p>\n<h2 id=\"template-string-type-improvements\" style=\"position:relative;\"><a href=\"#template-string-type-improvements\" aria-label=\"template string type improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template String Type Improvements</h2>\n<p>In recent versions, TypeScript introduced a new type construct: template string types.\nThese are types that either construct new string-like types by concatenating…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Color</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Quantity</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"one\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"two\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SeussFish</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">Quantity</span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Color</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> fish`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// same as</span></div><div class='line'><span style=\"color: #008000\">//   type SeussFish = \"one fish\" | \"two fish\"</span></div><div class='line'><span style=\"color: #008000\">//                  | \"red fish\" | \"blue fish\";</span></div></code></div></pre>\n<p>…or match patterns of other string-like types.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s1</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`1-2-3`</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Works!</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>The first change we made is just in when TypeScript will infer a template string type.\nWhen a template string is <em>contextually typed</em> by a string-literal-like type (i.e. when TypeScript sees we’re passing a template string to something that takes a literal type) it will try to give that expression a template type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #A31515\">`hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">string</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Previously an error, now works!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">s</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This also kicks in when inferring types, and the type parameter <code>extends string</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Previously: string</span></div><div class='line'><span style=\"color: #008000\">// Now       : `hello ${string}`</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">s</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>The second major change here is that TypeScript can now better-relate, and <em>infer between</em>, different template string types.</p>\n<p>To see this, take the following example code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s1</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`1-2-3`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s3</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-2-3`</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s3</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>When checking against a string literal type like on <code>s2</code>, TypeScript could match against the string contents and figure out that <code>s2</code> was compatible with <code>s1</code> in the first assignment;\nhowever, as soon as it saw another template string, it just gave up.\nAs a result, assignments like <code>s3</code> to <code>s1</code> just didn’t work.</p>\n<p>TypeScript now actually does the work to prove whether or not each part of a template string can successfully match.\nYou can now mix and match template strings with different substitutions and TypeScript will do a good job to figure out whether they’re really compatible.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s1</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`1-2-3`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s3</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-2-3`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s4</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`1-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-3`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s5</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`1-2-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s6</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-2-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">number</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Now *all of these* work!</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s3</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s4</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s5</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">s1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s6</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>In doing this work, we were also sure to add better inference capabilities.\nYou can see an example of these in action:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`*</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">V</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">*`</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">test</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"*hello*\"</span><span style=\"color: #000000\">);            </span><span style=\"color: #008000\">// \"hello\"</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"**hello**\"</span><span style=\"color: #000000\">);          </span><span style=\"color: #008000\">// \"*hello*\"</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x3</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`*</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">s</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">*`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">);    </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x4</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`*</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">n</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">*`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">);    </span><span style=\"color: #008000\">// `${number}`</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x5</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`*</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">b</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">*`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">);    </span><span style=\"color: #008000\">// \"true\" | \"false\"</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x6</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`*</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">t</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">*`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">);    </span><span style=\"color: #008000\">// `${T}`</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x7</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`**</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">s</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">**`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">);  </span><span style=\"color: #008000\">// `*${string}*`</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/43376\">the original pull request on leveraging contextual types</a>, along with <a href=\"https://github.com/microsoft/TypeScript/pull/43361\">the pull request that improved inference and checking between template types</a>.</p>\n<h2 id=\"ecmascript-private-class-elements\" style=\"position:relative;\"><a href=\"#ecmascript-private-class-elements\" aria-label=\"ecmascript private class elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript <code>#private</code> Class Elements</h2>\n<p>TypeScript 4.3 expands which elements in a class can be given <code>#private</code> <code>#names</code> to make them truly private at run-time.\nIn addition to properties, methods and accessors can also be given private names.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  #</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> #</span><span style=\"color: #795E26\">someValue</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">publicMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// These work.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We can access private-named members inside this class.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">#someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#someValue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Foo</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">#someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">//        ~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Property '#someMethod' is not accessible</span></div><div class='line'><span style=\"color: #008000\">// outside class 'Foo' because it has a private identifier.</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Foo</span><span style=\"color: #000000\">().</span><span style=\"color: #001080\">#someValue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//        ~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Property '#someValue' is not accessible</span></div><div class='line'><span style=\"color: #008000\">// outside class 'Foo' because it has a private identifier.</span></div></code></div></pre>\n<p>Even more broadly, static members can now also have private names.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> #</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">Foo</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">#someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Property '#someMethod' is not accessible</span></div><div class='line'><span style=\"color: #008000\">// outside class 'Foo' because it has a private identifier.</span></div></code></div></pre>\n<p>This feature was authored <a href=\"https://github.com/microsoft/TypeScript/pull/42458\">in a pull request</a> from our friends at Bloomberg - written by <a href=\"https://github.com/dragomirtitian\">Titian Cernicova-Dragomir</a>and <a href=\"https://github.com/mkubilayk\">Kubilay Kahveci</a>, with support and expertise from <a href=\"https://github.com/joeywatts\">Joey Watts</a>, <a href=\"https://github.com/robpalme\">Rob Palmer</a>, and <a href=\"https://github.com/tim-mc\">Tim McClure</a>.\nWe’d like to extend our thanks to all of them!</p>\n<h2 id=\"constructorparameters-works-on-abstract-classes\" style=\"position:relative;\"><a href=\"#constructorparameters-works-on-abstract-classes\" aria-label=\"constructorparameters works on abstract classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ConstructorParameters</code> Works on Abstract Classes</h2>\n<p>In TypeScript 4.3, the <code>ConstructorParameters</code> type helper now works on <code>abstract</code> classes.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Has the type '[a: string, b: number]'.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">CParams</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">ConstructorParameters</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>This is thanks to work done in TypeScript 4.2, where construct signatures can be marked as abstract:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyConstructorOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// or using the shorthand syntax:</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyConstructorOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/43380\">see the change in more detail on GitHub</a>.</p>\n<h2 id=\"contextual-narrowing-for-generics\" style=\"position:relative;\"><a href=\"#contextual-narrowing-for-generics\" aria-label=\"contextual narrowing for generics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contextual Narrowing for Generics</h2>\n<p>TypeScript 4.3 now includes some slightly smarter type-narrowing logic on generic values.\nThis allows TypeScript to accept more patterns, and sometimes even catch mistakes.</p>\n<p>For some motivation, let’s say we’re trying to write a function called <code>makeUnique</code>.\nIt’ll take a <code>Set</code> or an <code>Array</code> of elements, and if it’s given an <code>Array</code>, it’ll sort that <code>Array</code> remove duplicates according to some comparison function.\nAfter all that, it will return the original collection.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeUnique</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">comparer</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Early bail-out if we have a Set.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We assume the elements are already unique.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Sort the array, then remove consecutive duplicates.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sort</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">comparer</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">comparer</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) === </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">splice</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> - </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Let’s leave questions about this function’s implementation aside, and assume it arose from the requirements of a broader application.\nSomething that you might notice is that the signature doesn’t capture the original type of <code>collection</code>.\nWe can do that by adding a type parameter called <code>C</code> in place of where we’ve written <code>Set&#x3C;T> | T[]</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">- function makeUnique&lt;T&gt;(collection: Set&lt;T&gt; | T[], comparer: (x: T, y: T) =&gt; number): Set&lt;T&gt; | T[]</span></div><div class='line'><span style=\"color: #098658\">+ function makeUnique&lt;T, C extends Set&lt;T&gt; | T[]&gt;(collection: C, comparer: (x: T, y: T) =&gt; number): C</span></div></code></div></pre>\n<p>In TypeScript 4.2 and earlier, you’d end up with a bunch of errors as soon as you tried this.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeUnique</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[]&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">comparer</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Early bail-out if we have a Set.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We assume the elements are already unique.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Sort the array, then remove consecutive duplicates.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sort</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">comparer</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//         ~~~~</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error: Property 'sort' does not exist on type 'C'.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//                             ~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error: Property 'length' does not exist on type 'C'.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">comparer</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) === </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">//                    ~~~~~~</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// error: Property 'length' does not exist on type 'C'.</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">//                                       ~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// error: Element implicitly has an 'any' type because expression of type 'number'</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">//        can't be used to index type 'Set&lt;T&gt; | T[]'.</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">splice</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">j</span><span style=\"color: #000000\"> - </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//         ~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error: Property 'splice' does not exist on type 'C'.</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ew, errors!\nWhy is TypeScript being so mean to us?</p>\n<p>The issue is that when we perform our <code>collection instanceof Set</code> check, we’re expecting that to act as a type guard that narrows the type from <code>Set&#x3C;T> | T[]</code> to <code>Set&#x3C;T></code> and <code>T[]</code> depending on the branch we’re in;\nhowever, we’re not dealing with a <code>Set&#x3C;T> | T[]</code>, we’re trying to narrow the generic value <code>collection</code>, whose type is <code>C</code>.</p>\n<p>It’s a very subtle distinction, but it makes a difference.\nTypeScript can’t just grab the constraint of <code>C</code> (which is <code>Set&#x3C;T> | T[]</code>) and narrow that.\nIf TypeScript <em>did</em> try to narrow from <code>Set&#x3C;T> | T[]</code>, it would forget that <code>collection</code> is also a <code>C</code> in each branch because there’s no easy way to preserve that information.\nIf hypothetically TypeScript tried that approach, it would break the above example in a different way.\nAt the return positions, where the function expects values with the type <code>C</code>, we would instead get a <code>Set&#x3C;T></code> and a <code>T[]</code> in each branch, which TypeScript would reject.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeUnique</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">comparer</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Early bail-out if we have a Set.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We assume the elements are already unique.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//     ~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error: Type 'Set&lt;T&gt;' is not assignable to type 'C'.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//          'Set&lt;T&gt;' is assignable to the constraint of type 'C', but</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//          'C' could be instantiated with a different subtype of constraint 'Set&lt;T&gt; | T[]'.</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">collection</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//     ~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error: Type 'T[]' is not assignable to type 'C'.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//          'T[]' is assignable to the constraint of type 'C', but</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//          'C' could be instantiated with a different subtype of constraint 'Set&lt;T&gt; | T[]'.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>So how does TypeScript 4.3 change things?\nWell, basically in a few key places when writing code, all the type system really cares about is the constraint of a type.\nFor example, when we write <code>collection.length</code>, TypeScript doesn’t care about the fact that <code>collection</code> has the type <code>C</code>, it only cares about the properties available, which are determined by the constraint <code>T[] | Set&#x3C;T></code>.</p>\n<p>In cases like this, TypeScript will grab the narrowed type of the constraint because that will give you the data you care about;\nhowever, in any other case, we’ll just try to narrow the original generic type (and often end up with the original generic type).</p>\n<p>In other words, based on how you use a generic value, TypeScript will narrow it a little differently.\nThe end result is that the entire above example compiles with no type-checking errors.</p>\n<p>For more details, you can <a href=\"https://github.com/microsoft/TypeScript/pull/43183\">look at the original pull request on GitHub</a>.</p>\n<h2 id=\"always-truthy-promise-checks\" style=\"position:relative;\"><a href=\"#always-truthy-promise-checks\" aria-label=\"always truthy promise checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Always-Truthy Promise Checks</h2>\n<p>Under <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>, checking whether a <code>Promise</code> is “truthy” in a conditional will trigger an error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//  ~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Error!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// This condition will always return true since</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// this 'Promise&lt;boolean&gt;' appears to always be defined.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Did you forget to use 'await'?</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"true\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"false\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/39175\">This change</a> was contributed by <a href=\"https://github.com/Jack-Works\">Jack Works</a>, and we extend our thanks to them!</p>\n<h2 id=\"static-index-signatures\" style=\"position:relative;\"><a href=\"#static-index-signatures\" aria-label=\"static index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>static</code> Index Signatures</h2>\n<p>Index signatures allow us set more properties on a value than a type explicitly declares.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">world</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1234</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This is an index signature:</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\">propName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Foo</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Valid assigment</span></div><div class='line'><span style=\"color: #001080\">instance</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"whatever\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Has type 'string | number | undefined'.</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"something\"</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>Up until now, an index signature could only be declared on the instance side of a class.\nThanks to <a href=\"https://github.com/microsoft/TypeScript/pull/37797\">a pull request</a> from <a href=\"https://github.com/microsoft/TypeScript/pull/37797\">Wenlu Wang</a>, index signatures can now be declared as <code>static</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">world</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1234</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">propName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Valid.</span></div><div class='line'><span style=\"color: #001080\">Foo</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"whatever\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Has type 'string | number | undefined'</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Foo</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"something\"</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>The same sorts of rules apply for index signatures on the static side of a class as they do for the instance side - namely, that every other static property has to be compatible with the index signature.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//     ~~~~</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error! Property 'prop' of type 'boolean'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// is not assignable to string index type</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 'string | number | undefined'.</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">propName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"tsbuildinfo-size-improvements\" style=\"position:relative;\"><a href=\"#tsbuildinfo-size-improvements\" aria-label=\"tsbuildinfo size improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>.tsbuildinfo</code> Size Improvements</h2>\n<p>In TypeScript 4.3, <code>.tsbuildinfo</code> files that are generated as part of <a href=\"/tsconfig#incremental\"><code>incremental</code></a> builds should be significantly smaller.\nThis is thanks to several optimizations in the internal format, creating tables with numeric identifiers to be used throughout the file instead of repeating full paths and similar information.\nThis work was spear-headed by <a href=\"https://github.com/sokra\">Tobias Koppers</a> in <a href=\"https://github.com/microsoft/TypeScript/pull/43079\">their pull request</a>, serving as inspiration for <a href=\"https://github.com/microsoft/TypeScript/pull/43155\">the ensuing pull request</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/43695\">further optimizations</a>.</p>\n<p>We have seen significant reductions of <code>.tsbuildinfo</code> file sizes including</p>\n<ul>\n<li>1MB to 411 KB</li>\n<li>14.9MB to 1MB</li>\n<li>1345MB to 467MB</li>\n</ul>\n<p>Needless to say, these sorts of savings in size translate to slightly faster build times as well.</p>\n<h2 id=\"lazier-calculations-in---incremental-and---watch-compilations\" style=\"position:relative;\"><a href=\"#lazier-calculations-in---incremental-and---watch-compilations\" aria-label=\"lazier calculations in   incremental and   watch compilations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazier Calculations in <code>--incremental</code> and <code>--watch</code> Compilations</h2>\n<p>One of the issues with <a href=\"/tsconfig#incremental\"><code>incremental</code></a> and <code>--watch</code> modes are that while they make later compilations go faster, the initial compilation can be a bit slower - in some cases, significantly slower.\nThis is because these modes have to perform a bunch of book-keeping, computing information about the current project, and sometimes saving that data in a <code>.tsbuildinfo</code> file for later builds.</p>\n<p>That’s why on top of <code>.tsbuildinfo</code> size improvements, TypeScript 4.3 also ships some changes to <a href=\"/tsconfig#incremental\"><code>incremental</code></a> and <code>--watch</code> modes that make the first build of a project with these flags just as fast as an ordinary build!\nTo do this, much of the information that would ordinarily be computed up-front is instead done on an on-demand basis for later builds.\nWhile this can add some overhead to a subsequent build, TypeScript’s <a href=\"/tsconfig#incremental\"><code>incremental</code></a> and <code>--watch</code> functionality will still typically operate on a much smaller set of files, and any needed information will be saved afterwards.\nIn a sense, <a href=\"/tsconfig#incremental\"><code>incremental</code></a> and <code>--watch</code> builds will “warm up” and get faster at compiling files once you’ve updated them a few times.</p>\n<p>In a repository with 3000 files, <strong>this reduced initial build times to almost a third</strong>!</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/42960\">This work was started</a> by <a href=\"https://github.com/sokra\">Tobias Koppers</a>, whose work ensued in <a href=\"https://github.com/microsoft/TypeScript/pull/43314\">the resulting final change</a> for this functionality.\nWe’d like to extend a great thanks to Tobias for helping us find these opportunities for improvements!</p>\n<h2 id=\"import-statement-completions\" style=\"position:relative;\"><a href=\"#import-statement-completions\" aria-label=\"import statement completions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import Statement Completions</h2>\n<p>One of the biggest pain-points users run into with import and export statements in JavaScript is the order - specifically that imports are written as</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">func</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>instead of</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">func</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>This causes some pain when writing out a full import statement from scratch because auto-complete wasn’t able to work correctly.\nFor example, if you start writing something like <code>import {</code>, TypeScript has no idea what module you’re planning on importing from, so it couldn’t provide any scoped-down completions.</p>\n<p>To alleviate this, we’ve leveraged the power of auto-imports!\nAuto-imports already deal with the issue of not being able to narrow down completions from a specific module - their whole point is to provide every possible export and automatically insert an import statement at the top of your file.</p>\n<p>So when you now start writing an <code>import</code> statement that doesn’t have a path, we’ll provide you with a list of possible imports.\nWhen you commit a completion, we’ll complete the full import statement, including the path that you were going to write.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/auto-import-statement-4-3.gif\" alt=\"Import statement completions\"></p>\n<p>This work requires editors that specifically support the feature.\nYou’ll be able to try this out by using the latest <a href=\"https://code.visualstudio.com/insiders/\">Insiders versions of Visual Studio Code</a>.</p>\n<p>For more information, take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/43149\">the implementing pull request</a>!</p>\n<h2 id=\"editor-support-for-link-tags\" style=\"position:relative;\"><a href=\"#editor-support-for-link-tags\" aria-label=\"editor support for link tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editor Support for <code>@link</code> Tags</h2>\n<p>TypeScript can now understand <code>@link</code> tags, and will try to resolve declarations that they link to.\nWhat this means is that you’ll be able to hover over names within <code>@link</code> tags and get quick information, or use commands like go-to-definition or find-all-references.</p>\n<p>For example, you’ll be able to go-to-definition on <code>bar</code> in <code>@link bar</code> in the example below and a TypeScript-supported editor will jump to <code>bar</code>’s function declaration.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * To be called 70 to 80 days after </span><span style=\"color: #1C6277\">{</span><span style=\"color: #0000FF\">@link</span><span style=\"color: #1C6277\"> </span><span style=\"color: #001080\">plantCarrot</span><span style=\"color: #1C6277\">}</span><span style=\"color: #008000\">.</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">harvestCarrot</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrot</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Carrot</span><span style=\"color: #000000\">) {}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Call early in spring for best results. Added in v2.1.0.</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">seed</span><span style=\"color: #008000\"> Make sure it's a carrot seed!</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">plantCarrot</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">seed</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Seed</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// TODO: some gardening</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/link-tag-4-3.gif\" alt=\"Jumping to definition and requesting quick info on a @link tag for \"></p>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/41877\">the pull request on GitHub</a>!</p>\n<h2 id=\"go-to-definition-on-non-javascript-file-paths\" style=\"position:relative;\"><a href=\"#go-to-definition-on-non-javascript-file-paths\" aria-label=\"go to definition on non javascript file paths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Go-to-Definition on Non-JavaScript File Paths</h2>\n<p>Many loaders allow users to include assets in their applications using JavaScript imports.\nThey’ll typically be written as something like <code>import \"./styles.css\"</code> or the like.</p>\n<p>Up until now, TypeScript’s editor functionality wouldn’t even attempt to read this file, so go-to-definition would typically fail.\nAt best, go-to-definition would jump to a declaration like <code>declare module \"*.css\"</code> if it could find something along those lines.</p>\n<p>TypeScript’s language service now tries to jump to the correct file when you perform a go-to-definition on relative file paths, even if they’re not JavaScript or TypeScript files!\nTry it out with imports to CSS, SVGs, PNGs, font files, Vue files, and more.</p>\n<p>For more information, you can check out <a href=\"https://github.com/microsoft/TypeScript/pull/42539\">the implementing pull request</a>.</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>As with every TypeScript version, declarations for <code>lib.d.ts</code> (especially the declarations generated for web contexts), have changed.\nIn this release, we leveraged <a href=\"https://github.com/mdn/browser-compat-data\">Mozilla’s browser-compat-data</a> to remove APIs that no browser implements.\nWhile it is unlike that you are using them, APIs such as <code>Account</code>, <code>AssertionOptions</code>, <code>RTCStatsEventInit</code>, <code>MSGestureEvent</code>, <code>DeviceLightEvent</code>, <code>MSPointerEvent</code>, <code>ServiceWorkerMessageEvent</code>, and <code>WebAuthentication</code> have all been removed from <code>lib.d.ts</code>.\nThis is discussed <a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/991\">in some detail here</a>.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/991\">https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/991</a></p>\n<h3 id=\"usedefineforclassfields-now-defaults-to-true-on-esnext-and-eventually-on-es2022\" style=\"position:relative;\"><a href=\"#usedefineforclassfields-now-defaults-to-true-on-esnext-and-eventually-on-es2022\" aria-label=\"usedefineforclassfields now defaults to true on esnext and eventually on es2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>useDefineForClassFields</code> now defaults to true on <code>esnext</code> and eventually on <code>es2022</code></h3>\n<p>In 2021 the class fields feature was added into the JavaScript specification with behavior which differed from how TypeScript had implemented it. In preparation for this, in TypeScript 3.7, a flag was added (<a href=\"/tsconfig#useDefineForClassFields\"><code>useDefineForClassFields</code></a>) to migrate to emitted JavaScript to match the JavaScript standard behavior.</p>\n<p>Now that the feature is in JavaScript we are changing the default to <code>true</code> for ES2022 and above, including ESNext.</p>\n<h3 id=\"errors-on-always-truthy-promise-checks\" style=\"position:relative;\"><a href=\"#errors-on-always-truthy-promise-checks\" aria-label=\"errors on always truthy promise checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Errors on Always-Truthy Promise Checks</h3>\n<p>Under <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>, using a <code>Promise</code> that always appears to be defined within a condition check is now considered an error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//  ~</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This condition will always return true since</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// this 'Promise&lt;number&gt;' appears to always be defined.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Did you forget to use 'await'?</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/39175\">see the original change</a>.</p>\n<h3 id=\"union-enums-cannot-be-compared-to-arbitrary-numbers\" style=\"position:relative;\"><a href=\"#union-enums-cannot-be-compared-to-arbitrary-numbers\" aria-label=\"union enums cannot be compared to arbitrary numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Enums Cannot Be Compared to Arbitrary Numbers</h3>\n<p>Certain <code>enum</code>s are considered <em>union <code>enum</code>s</em> when their members are either automatically filled in, or trivially written.\nIn those cases, an enum can recall each value that it potentially represents.</p>\n<p>In TypeScript 4.3, if a value with a union <code>enum</code> type is compared with a numeric literal that it could never be equal to, then the type-checker will issue an error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error! This condition will always return 'false' since the types 'E' and '-1' have no overlap.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>As a workaround, you can re-write an annotation to include the appropriate literal type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Include -1 in the type, if we're really certain that -1 can come through.</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> | -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>You can also use a type-assertion on the value.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Use a type asertion on 'x' because we know we're not actually just dealing with values from 'E'.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> ((</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) === -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Alternatively, you can re-declare your enum to have a non-trivial initializer so that any number is both assignable and comparable to that enum. This may be useful if the intent is for the enum to specify a few well-known values.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// the leading + on 0 opts TypeScript out of inferring a union enum.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\"> = +</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/42472\">see the original change</a></p>","headings":[{"value":"Separate Write Types on Properties","depth":2},{"value":"override and the --noImplicitOverride Flag","depth":2},{"value":"Template String Type Improvements","depth":2},{"value":"ECMAScript #private Class Elements","depth":2},{"value":"ConstructorParameters Works on Abstract Classes","depth":2},{"value":"Contextual Narrowing for Generics","depth":2},{"value":"Always-Truthy Promise Checks","depth":2},{"value":"static Index Signatures","depth":2},{"value":".tsbuildinfo Size Improvements","depth":2},{"value":"Lazier Calculations in --incremental and --watch Compilations","depth":2},{"value":"Import Statement Completions","depth":2},{"value":"Editor Support for @link Tags","depth":2},{"value":"Go-to-Definition on Non-JavaScript File Paths","depth":2},{"value":"Breaking Changes","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"useDefineForClassFields now defaults to true on esnext and eventually on es2022","depth":3},{"value":"Errors on Always-Truthy Promise Checks","depth":3},{"value":"Union Enums Cannot Be Compared to Arbitrary Numbers","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-4-3.html","title":"TypeScript 4.3","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.3 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-4.3","slug":"/docs/handbook/release-notes/typescript-4-3.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 4.3.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.858Z"}},"staticQueryHashes":[]}