{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-4-5.html","result":{"data":{"markdownRemark":{"id":"7cbcbd9e-b2eb-5417-8e6c-ce1a612376b2","excerpt":"Supporting lib from node_modules To ensure that TypeScript and JavaScript support works well out of the box, TypeScript bundles a series of declaration files…","html":"<h3 id=\"supporting-lib-from-node_modules\" style=\"position:relative;\"><a href=\"#supporting-lib-from-node_modules\" aria-label=\"supporting lib from node_modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Supporting <code>lib</code> from <code>node_modules</code></h3>\n<p>To ensure that TypeScript and JavaScript support works well out of the box, TypeScript bundles a series of declaration files (<code>.d.ts</code> files).\nThese declaration files represent the available APIs in the JavaScript language, and the standard browser DOM APIs.\nWhile there are some reasonable defaults based on your <a href=\"/tsconfig#target\"><code>target</code></a>, you can pick and choose which declaration files your program uses by configuring the <a href=\"https://www.typescriptlang.org/tsconfig#lib\"><code>lib</code></a> setting in the <code>tsconfig.json</code>.</p>\n<p>There are two occasional downsides to including these declaration files with TypeScript though:</p>\n<ul>\n<li>When you upgrade TypeScript, you’re also forced to handle changes to TypeScript’s built-in declaration files, and this can be a challenge when the DOM APIs change as frequently as they do.</li>\n<li>It is hard to customize these files to match your needs with the needs of your project’s dependencies (e.g. if your dependencies declare that they use the DOM APIs, you might also be forced into using the DOM APIs).</li>\n</ul>\n<p>TypeScript 4.5 introduces a way to override a specific built-in <code>lib</code> in a manner similar to how <code>@types/</code> support works.\nWhen deciding which <code>lib</code> files TypeScript should include, it will first look for a scoped <code>@typescript/lib-*</code> package in <code>node_modules</code>.\nFor example, when including <code>dom</code> as an option in <code>lib</code>, TypeScript will use the types in <code>node_modules/@typescript/lib-dom</code> if available.</p>\n<p>You can then use your package manager to install a specific package to take over for a given <code>lib</code>\nFor example, today TypeScript publishes versions of the DOM APIs on <code>@types/web</code>.\nIf you wanted to lock your project to a specific version of the DOM APIs, you could add this to your <code>package.json</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"dependencies\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"@typescript/lib-dom\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"npm:@types/web\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Then from 4.5 onwards, you can update TypeScript and your dependency manager’s lockfile will ensure that it uses the exact same version of the DOM types.\nThat means you get to update your types on your own terms.</p>\n<p>We’d like to give a shout-out to <a href=\"https://github.com/saschanaz\">saschanaz</a> who has been extremely helpful and patient as we’ve been building out and experimenting with this feature.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/45771\">see the implementation of this change</a>.</p>\n<h2 id=\"the-awaited-type-and-promise-improvements\" style=\"position:relative;\"><a href=\"#the-awaited-type-and-promise-improvements\" aria-label=\"the awaited type and promise improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>Awaited</code> Type and <code>Promise</code> Improvements</h2>\n<p>TypeScript 4.5 introduces a new utility type called the <code>Awaited</code> type.\nThis type is meant to model operations like <code>await</code> in <code>async</code> functions, or the <code>.then()</code> method on <code>Promise</code>s - specifically, the way that they recursively unwrap <code>Promise</code>s.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// A = string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// B = number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;&gt;&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// C = boolean | number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;&gt;;</span></div></code></div></pre>\n<p>The <code>Awaited</code> type can be helpful for modeling existing APIs, including JavaScript built-ins like <code>Promise.all</code>, <code>Promise.race</code>, etc.\nIn fact, some of the problems around inference with <code>Promise.all</code> served as motivations for <code>Awaited</code>.\nHere’s an example that fails in TypeScript 4.4 and earlier.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MaybePromise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">PromiseLike</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">result</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">([</span><span style=\"color: #795E26\">MaybePromise</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">), </span><span style=\"color: #795E26\">MaybePromise</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">200</span><span style=\"color: #000000\">)]);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//    [number | Promise&lt;100&gt;, number | Promise&lt;200&gt;]</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// is not assignable to type</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//    [number, number]</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Now <code>Promise.all</code> leverages the combination of certain features with <code>Awaited</code> to give much better inference results, and the above example works.</p>\n<p>For more information, you <a href=\"https://github.com/microsoft/TypeScript/pull/45350\">can read about this change on GitHub</a>.</p>\n<h3 id=\"template-string-types-as-discriminants\" style=\"position:relative;\"><a href=\"#template-string-types-as-discriminants\" aria-label=\"template string types as discriminants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template String Types as Discriminants</h3>\n<p>TypeScript 4.5 now can narrow values that have template string types, and also recognizes template string types as discriminants.</p>\n<p>As an example, the following used to fail, but now successfully type-checks in TypeScript 4.5.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Success' >Success</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Success.type: `${string}Success`' >type</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">string</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Success`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Success.body: string' >body</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Error' >Error</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Error.type: `${string}Error`' >type</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">string</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Error`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handler(r: Success | Error): void' >handler</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) r: Success | Error' >r</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Success' >Success</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Error' >Error</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) r: Success | Error' >r</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) type: `${string}Success` | `${string}Error`' >type</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"HttpSuccess\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const token: string' >token</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) r: Success' style='border-bottom: solid 2px lightgrey;'>r</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Success.body: string' >body</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>                     </span><span class='popover'><div class='arrow'></div>(parameter) r: Success</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBASwHY2FAZgQwMbDgZQFdtcBnUuAbwCg464YBPMYALjgAMASS0mKZAHMAvkRLByHANy16AIwgATRuz4CkgmcOrVQkWIhRosuOAFEoUaFVl0mLdt178hwi1ajTbcALYTSmIJscGpC1Nq64NDw6IRI2DAIEEhwABaYSIoANmgAFFDsYmQUAD7mltAAlDb0iOhw+QB09ngAvO1wAEQAEjAwYEX+ndU0tbXYyXwMEADWwCmtcFCNCsoyY-QA9JsbGwB6APze2sJAA'>Try</a></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/46137\">see the change that enables this feature</a>.</p>\n<h3 id=\"module-es2022\" style=\"position:relative;\"><a href=\"#module-es2022\" aria-label=\"module es2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>module es2022</code></h3>\n<p>Thanks to <a href=\"https://github.com/saschanaz\">Kagami S. Rosylight</a>, TypeScript now supports a new <code>module</code> setting: <code>es2022</code>.\nThe main feature in <a href=\"/tsconfig#module\"><code>module es2022</code></a> is top-level <code>await</code>, meaning you can use <code>await</code> outside of <code>async</code> functions.\nThis was already supported in <code>--module esnext</code> (and now <a href=\"/tsconfig#target\"><code>--module nodenext</code></a>), but <code>es2022</code> is the first stable target for this feature.</p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/44656\">read up more on this change here</a>.</p>\n<h3 id=\"tail-recursion-elimination-on-conditional-types\" style=\"position:relative;\"><a href=\"#tail-recursion-elimination-on-conditional-types\" aria-label=\"tail recursion elimination on conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tail-Recursion Elimination on Conditional Types</h3>\n<p>TypeScript often needs to gracefully fail when it detects possibly infinite recursion, or any type expansions that can take a long time and affect your editor experience.\nAs a result, TypeScript has heuristics to make sure it doesn’t go off the rails when trying to pick apart an infinitely-deep type, or working with types that generate a lot of intermediate results.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">InfiniteBox</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #001080\">item</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">InfiniteBox</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; };</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Unpack</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">item</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\">Unpack</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// error: Type instantiation is excessively deep and possibly infinite.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Test</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Unpack</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">InfiniteBox</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;&gt;;</span></div></code></div></pre>\n<p>The above example is intentionally simple and useless, but there are plenty of types that are actually useful, and unfortunately trigger our heuristics.\nAs an example, the following <code>TrimLeft</code> type removes spaces from the beginning of a string-like type.\nIf given a string type that has a space at the beginning, it immediately feeds the remainder of the string back into <code>TrimLeft</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TrimLeft</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; =</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">` </span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">TrimLeft</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Test = \"hello\" | \"world\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Test</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TrimLeft</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"   hello\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\" world\"</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>This type can be useful, but if a string has 50 leading spaces, you’ll get an error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TrimLeft</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; =</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">` </span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">TrimLeft</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// error: Type instantiation is excessively deep and possibly infinite.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Test</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">TrimLeft</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"                                                oops\"</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>That’s unfortunate, because these kinds of types tend to be extremely useful in modeling operations on strings - for example, parsers for URL routers.\nTo make matters worse, a more useful type typically creates more type instantiations, and in turn has even more limitations on input length.</p>\n<p>But there’s a saving grace: <code>TrimLeft</code> is written in a way that is <em>tail-recursive</em> in one branch.\nWhen it calls itself again, it immediately returns the result and doesn’t do anything with it.\nBecause these types don’t need to create any intermediate results, they can be implemented more quickly and in a way that avoids triggering many of type recursion heuristics that are built into TypeScript.</p>\n<p>That’s why TypeScript 4.5 performs some tail-recursion elimination on conditional types.\nAs long as one branch of a conditional type is simply another conditional type, TypeScript can avoid intermediate instantiations.\nThere are still heuristics to ensure that these types don’t go off the rails, but they are much more generous.</p>\n<p>Keep in mind, the following type <em>won’t</em> be optimized, since it uses the result of a conditional type by adding it to a union.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">GetChars</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">&gt; =</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Char</span><span style=\"color: #0000FF\">}${</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">Char</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">GetChars</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>If you would like to make it tail-recursive, you can introduce a helper that takes an “accumulator” type parameter, just like with tail-recursive functions.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">GetChars</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">GetCharsHelper</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">GetCharsHelper</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">Acc</span><span style=\"color: #000000\">&gt; =</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Char</span><span style=\"color: #0000FF\">}${</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">GetCharsHelper</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Rest</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">Char</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">Acc</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">Acc</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>You can read up more on the implementation <a href=\"https://github.com/microsoft/TypeScript/pull/45711\">here</a>.</p>\n<h3 id=\"disabling-import-elision\" style=\"position:relative;\"><a href=\"#disabling-import-elision\" aria-label=\"disabling import elision permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disabling Import Elision</h3>\n<p>There are some cases where TypeScript can’t detect that you’re using an import.\nFor example, take the following code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Animal</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">eval</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"console.log(new Animal().isDangerous())\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>By default, TypeScript always removes this import because it appears to be unused.\nIn TypeScript 4.5, you can enable a new flag called <a href=\"/tsconfig#preserveValueImports\"><code>preserveValueImports</code></a> to prevent TypeScript from stripping out any imported values from your JavaScript outputs.\nGood reasons to use <code>eval</code> are few and far between, but something very similar to this happens in Svelte:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">&lt;!-- A .svelte File --&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;script&gt;</span></div><div class='line'><span style=\"color: #000000FF\">  </span><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000FF\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000FF\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000FF\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000FF\">;</span></div><div class='line'><span style=\"color: #800000\">&lt;/script&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #800000\">&lt;button</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">on:click</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"{someFunc}\"</span><span style=\"color: #800000\">&gt;</span><span style=\"color: #000000\">Click me!</span><span style=\"color: #800000\">&lt;/button&gt;</span></div></code></div></pre>\n<p>along with in Vue.js, using its <code>&#x3C;script setup></code> feature:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">&lt;!-- A .vue File --&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;script</span><span style=\"color: #000000FF\"> </span><span style=\"color: #EE0000\">setup</span><span style=\"color: #800000\">&gt;</span></div><div class='line'><span style=\"color: #000000FF\">  </span><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000FF\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000FF\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000FF\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000FF\">;</span></div><div class='line'><span style=\"color: #800000\">&lt;/script&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #800000\">&lt;button</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">@click</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"someFunc\"</span><span style=\"color: #800000\">&gt;</span><span style=\"color: #000000\">Click me!</span><span style=\"color: #800000\">&lt;/button&gt;</span></div></code></div></pre>\n<p>These frameworks generate some code based on markup outside of their <code>&#x3C;script></code> tags, but TypeScript <em>only</em> sees code within the <code>&#x3C;script></code> tags.\nThat means TypeScript will automatically drop the import of <code>someFunc</code>, and the above code won’t be runnable!\nWith TypeScript 4.5, you can use <a href=\"/tsconfig#preserveValueImports\"><code>preserveValueImports</code></a> to avoid these situations.</p>\n<p>Note that this flag has a special requirement when combined with <a href=\"/tsconfig#isolatedModules\">—isolatedModules`</a>: imported\ntypes <em>must</em> be marked as type-only because compilers that process single files at a time have no way of knowing whether imports are values that appear unused, or a type that must be removed in order to avoid a runtime crash.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Which of these is a value that should be preserved? tsc knows, but `ts.transpileModule`,</span></div><div class='line'><span style=\"color: #008000\">// ts-loader, esbuild, etc. don't, so `isolatedModules` gives an error.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">BaseType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//                 ^^^^^^^^</span></div><div class='line'><span style=\"color: #008000\">// Error: 'BaseType' is a type and must be imported using a type-only import</span></div><div class='line'><span style=\"color: #008000\">// when 'preserveValueImports' and 'isolatedModules' are both enabled.</span></div></code></div></pre>\n<p>That makes another TypeScript 4.5 feature, <a href=\"#type-on-import-names\"><code>type</code> modifiers on import names</a>, especially important.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/44619\">see the pull request here</a>.</p>\n<h3 id=\"type-modifiers-on-import-names\" style=\"position:relative;\"><a href=\"#type-modifiers-on-import-names\" aria-label=\"type modifiers on import names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>type</code> Modifiers on Import Names</h3>\n<p>As mentioned above, <a href=\"/tsconfig#preserveValueImports\"><code>preserveValueImports</code></a> and <a href=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></a> have special requirements so that there’s no ambiguity for build tools whether it’s safe to drop type imports.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Which of these is a value that should be preserved? tsc knows, but `ts.transpileModule`,</span></div><div class='line'><span style=\"color: #008000\">// ts-loader, esbuild, etc. don't, so `isolatedModules` issues an error.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">BaseType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//                 ^^^^^^^^</span></div><div class='line'><span style=\"color: #008000\">// Error: 'BaseType' is a type and must be imported using a type-only import</span></div><div class='line'><span style=\"color: #008000\">// when 'preserveValueImports' and 'isolatedModules' are both enabled.</span></div></code></div></pre>\n<p>When these options are combined, we need a way to signal when an import can be legitimately dropped.\nTypeScript already has something for this with <code>import type</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">BaseType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">BaseType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This works, but it would be nice to avoid two import statements for the same module.\nThat’s part of why TypeScript 4.5 allows a <code>type</code> modifier on individual named imports, so that you can mix and match as needed.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">BaseType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">BaseType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">someFunc</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In the above example, <code>BaseType</code> is always guaranteed to be erased and <code>someFunc</code> will be preserved under <a href=\"/tsconfig#preserveValueImports\"><code>preserveValueImports</code></a>, leaving us with the following code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunc</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someFunc</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/45998\">the changes on GitHub</a>.</p>\n<h3 id=\"private-field-presence-checks\" style=\"position:relative;\"><a href=\"#private-field-presence-checks\" aria-label=\"private field presence checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Private Field Presence Checks</h3>\n<p>TypeScript 4.5 supports an ECMAScript proposal for checking whether an object has a private field on it.\nYou can now write a class with a <code>#private</code> field member and see whether another object has the same field by using the <code>in</code> operator.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">#name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#name</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">equals</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">other</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">            #</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\"> && </span><span style=\"color: #008000\">// &lt;- this is new!</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#name</span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#name</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>One interesting aspect of this feature is that the check <code>#name in other</code> implies that <code>other</code> must have been constructed as a <code>Person</code>, since there’s no other way that field could be present.\nThis is actually one of the key features of the proposal, and it’s why the proposal is named “ergonomic brand checks” - because private fields often act as a “brand” to guard against objects that aren’t instances of their class.\nAs such, TypeScript is able to appropriately narrow the type of <code>other</code> on each check, until it ends up with the type <code>Person</code>.</p>\n<p>We’d like to extend a big thanks to our friends at Bloomberg <a href=\"https://github.com/microsoft/TypeScript/pull/44648\">who contributed this pull request</a>: <a href=\"https://github.com/acutmore\">Ashley Claymore</a>, <a href=\"https://github.com/dragomirtitian\">Titian Cernicova-Dragomir</a>, <a href=\"https://github.com/mkubilayk\">Kubilay Kahveci</a>, and <a href=\"https://github.com/robpalme\">Rob Palmer</a>!</p>\n<h3 id=\"import-assertions\" style=\"position:relative;\"><a href=\"#import-assertions\" aria-label=\"import assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import Assertions</h3>\n<p>TypeScript 4.5 supports an ECMAScript proposal for <em>import assertions</em>.\nThis is a syntax used by runtimes to make sure that an import has an expected format.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./something.json\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">assert</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: \"</span><span style=\"color: #001080\">json</span><span style=\"color: #000000\">\" };</span></div></code></div></pre>\n<p>The contents of these assertions are not checked by TypeScript since they’re host-specific, and are simply left alone so that browsers and runtimes can handle them (and possibly error).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// TypeScript is fine with this.</span></div><div class='line'><span style=\"color: #008000\">// But your browser? Probably not.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./something.json\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">assert</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: \"</span><span style=\"color: #001080\">fluffy</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bunny</span><span style=\"color: #000000\">\"</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>Dynamic <code>import()</code> calls can also use import assertions through a second argument.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">obj</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./something.json\"</span><span style=\"color: #000000\">, {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">assert:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"json\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>The expected type of that second argument is defined by a new type called <code>ImportCallOptions</code>, and currently only accepts an <code>assert</code> property.</p>\n<p>We’d like to thank <a href=\"https://github.com/Kingwl/\">Wenlu Wang</a> for <a href=\"https://github.com/microsoft/TypeScript/pull/40698\">implementing this feature</a>!</p>\n<h3 id=\"faster-load-time-with-realpathsyncnative\" style=\"position:relative;\"><a href=\"#faster-load-time-with-realpathsyncnative\" aria-label=\"faster load time with realpathsyncnative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster Load Time with <code>realPathSync.native</code></h3>\n<p>TypeScript now leverages a system-native implementation of the Node.js <code>realPathSync</code> function on all operating systems.</p>\n<p>Previously this function was only used on Linux, but in TypeScript 4.5 it has been adopted to operating systems that are typically case-insensitive, like Windows and MacOS.\nOn certain codebases, this change sped up project loading by 5-13% (depending on the host operating system).</p>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/44966\">the original change here</a>, along with <a href=\"https://github.com/microsoft/TypeScript/pull/44966\">the 4.5-specific changes here</a>.</p>\n<h3 id=\"snippet-completions-for-jsx-attributes\" style=\"position:relative;\"><a href=\"#snippet-completions-for-jsx-attributes\" aria-label=\"snippet completions for jsx attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snippet Completions for JSX Attributes</h3>\n<p>TypeScript 4.5 brings <em>snippet completions</em> for JSX attributes.\nWhen writing out an attribute in a JSX tag, TypeScript will already provide suggestions for those attributes;\nbut with snippet completions, they can remove a little bit of extra typing by adding an initializer and putting your cursor in the right place.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/jsx-attributes-snippets-4-5.gif\" alt=\"Snippet completions for JSX attributes. For a string property, quotes are automatically added. For a numeric properties, braces are added.\"></p>\n<p>TypeScript will typically use the type of an attribute to figure out what kind of initializer to insert, but you can customize this behavior in Visual Studio Code.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/jsx-snippet-settings-4-5.png\" alt=\"Settings in VS Code for JSX attribute completions\"></p>\n<p>Keep in mind, this feature will only work in newer versions of Visual Studio Code, so you might have to use an Insiders build to get this working.\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/45903\">read up on the original pull request</a></p>\n<h3 id=\"better-editor-support-for-unresolved-types\" style=\"position:relative;\"><a href=\"#better-editor-support-for-unresolved-types\" aria-label=\"better editor support for unresolved types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better Editor Support for Unresolved Types</h3>\n<p>In some cases, editors will leverage a lightweight “partial” semantic mode - either while the editor is waiting for the full project to load, or in contexts like <a href=\"https://docs.github.com/en/codespaces/developing-in-codespaces/web-based-editor\">GitHub’s web-based editor</a>.</p>\n<p>In older versions of TypeScript, if the language service couldn’t find a type, it would just print <code>any</code>.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/quick-info-unresolved-4-4.png\" alt=\"Hovering over a signature where Buffer isn&#x27;t found, TypeScript replaces it with any.\"></p>\n<p>In the above example, <code>Buffer</code> wasn’t found, so TypeScript replaced it with <code>any</code> in <em>quick info</em>.\nIn TypeScript 4.5, TypeScript will try its best to preserve what you wrote.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/quick-info-unresolved-4-5.png\" alt=\"Hovering over a signature where Buffer isn&#x27;t found, it continues to use the name Buffer.\"></p>\n<p>However, if you hover over <code>Buffer</code> itself, you’ll get a hint that TypeScript couldn’t find <code>Buffer</code>.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/quick-info-unresolved-on-type-4-5.png\" alt=\"TypeScript displays type Buffer = /* unresolved */ any;\"></p>\n<p>Altogether, this provides a smoother experience when TypeScript doesn’t have the full program available.\nKeep in mind, you’ll always get an error in regular scenarios to tell you when a type isn’t found.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/45976\">see the implementation here</a>.</p>\n<h3 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h3>\n<h4 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h4>\n<p>TypeScript 4.5 contains changes to its built-in declaration files which may affect your compilation;\nhowever, <a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1143\">these changes were fairly minimal</a>, and we expect most code will be unaffected.</p>\n<h4 id=\"inference-changes-from-awaited\" style=\"position:relative;\"><a href=\"#inference-changes-from-awaited\" aria-label=\"inference changes from awaited permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inference Changes from <code>Awaited</code></h4>\n<p>Because <code>Awaited</code> is now used in <code>lib.d.ts</code> and as a result of <code>await</code>, you may see certain generic types change that might cause incompatibilities;\nhowever, given many intentional design decisions around <code>Awaited</code> to avoid breakage, we expect most code will be unaffected.</p>\n<h4 id=\"compiler-options-checking-at-the-root-of-tsconfigjson\" style=\"position:relative;\"><a href=\"#compiler-options-checking-at-the-root-of-tsconfigjson\" aria-label=\"compiler options checking at the root of tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiler Options Checking at the Root of <code>tsconfig.json</code></h4>\n<p>It’s an easy mistake to accidentally forget about the <code>compilerOptions</code> section in a <code>tsconfig.json</code>.\nTo help catch this mistake, in TypeScript 4.5, it is an error to add a top-level field which matches any of the available options in <code>compilerOptions</code> <em>without</em> having also defined <code>compilerOptions</code> in that <code>tsconfig.json</code>.</p>","headings":[{"value":"Supporting lib from node_modules","depth":3},{"value":"The Awaited Type and Promise Improvements","depth":2},{"value":"Template String Types as Discriminants","depth":3},{"value":"module es2022","depth":3},{"value":"Tail-Recursion Elimination on Conditional Types","depth":3},{"value":"Disabling Import Elision","depth":3},{"value":"type Modifiers on Import Names","depth":3},{"value":"Private Field Presence Checks","depth":3},{"value":"Import Assertions","depth":3},{"value":"Faster Load Time with realPathSync.native","depth":3},{"value":"Snippet Completions for JSX Attributes","depth":3},{"value":"Better Editor Support for Unresolved Types","depth":3},{"value":"Breaking Changes","depth":3},{"value":"lib.d.ts Changes","depth":4},{"value":"Inference Changes from Awaited","depth":4},{"value":"Compiler Options Checking at the Root of tsconfig.json","depth":4}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-4-5.html","title":"TypeScript 4.5","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.5 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-4.5","slug":"/docs/handbook/release-notes/typescript-4-5.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 4.5.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.858Z"}},"staticQueryHashes":[]}