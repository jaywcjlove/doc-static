{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-4-1.html","result":{"data":{"markdownRemark":{"id":"1b27ccd2-8e32-5726-bf5c-83a3974283a6","excerpt":"Template Literal Types String literal types in TypeScript allow us to model functions and APIs that expect a set of specific strings. This is pretty nice…","html":"<h2 id=\"template-literal-types\" style=\"position:relative;\"><a href=\"#template-literal-types\" aria-label=\"template literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template Literal Types</h2>\n<p>String literal types in TypeScript allow us to model functions and APIs that expect a set of specific strings.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setVerticalAlignment(location: \"top\" | \"middle\" | \"bottom\"): void' >setVerticalAlignment</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) location: \"top\" | \"middle\" | \"bottom\"' >location</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"top\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"middle\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"bottom\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setVerticalAlignment(location: \"top\" | \"middle\" | \"bottom\"): void' >setVerticalAlignment</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;middel&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"middel\"' is not assignable to parameter of type '\"top\" | \"middle\" | \"bottom\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"middel\"' is not assignable to parameter of type '\"top\" | \"middle\" | \"bottom\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaIpBQGozVkCGANgIKdUDmJALaQSFABSc4HarVQAiCnAAO80AB9Q8oVQAmuzpDWb5AIzgUlQ+QEpQAbzyhQIUADoPeAL548DZqxUHDx8giJi4tp6upCctgDcQA'>Try</a></div></pre>\n<p>This is pretty nice because string literal types can basically spell-check our string values.</p>\n<p>We also like that string literals can be used as property names in mapped types.\nIn this sense, they’re also usable as building blocks:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"noImplicitAny\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"strictNullChecks\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"strictFunctionTypes\"</span><span style=\"color: #000000\">]?: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #008000\">// same as</span></div><div class='line'><span style=\"color: #008000\">//   type Options = {</span></div><div class='line'><span style=\"color: #008000\">//       noImplicitAny?: boolean,</span></div><div class='line'><span style=\"color: #008000\">//       strictNullChecks?: boolean,</span></div><div class='line'><span style=\"color: #008000\">//       strictFunctionTypes?: boolean</span></div><div class='line'><span style=\"color: #008000\">//   };</span></div></code></div></pre>\n<p>But there’s another place that that string literal types could be used as building blocks: building other string literal types.</p>\n<p>That’s why TypeScript 4.1 brings the template literal string type.\nIt has the same syntax as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literal strings in JavaScript</a>, but is used in type positions.\nWhen you use it with concrete literal types, it produces a new string literal type by concatenating the contents.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type World = \"world\"' >World</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"hello world\"' style='border-bottom: solid 2px lightgrey;'>Greeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type World = \"world\"' >World</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Greeting = \"hello world\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA6g9gJwDYBMoF4oCIDujVYDcAUMaJFAOIIQTACWAdgOYZQAGAFhEknFABIA3vGQoAvuxIB6aVHkA9APxA'>Try</a></div></pre>\n<p>What happens when you have unions in substitution positions?\nIt produces the set of every possible string literal that could be represented by each union member.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Color = \"red\" | \"blue\"' >Color</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Quantity = \"one\" | \"two\"' >Quantity</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"one\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"two\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type SeussFish = \"red fish\" | \"blue fish\" | \"one fish\" | \"two fish\"' >SeussFish</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Quantity = \"one\" | \"two\"' >Quantity</data-lsp></span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Color = \"red\" | \"blue\"' >Color</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> fish`</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>type SeussFish = \"one fish\" | \"two fish\" | \"red fish\" | \"blue fish\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAwg9gGzgJygXigImRAJpqAHywCMEBXCTAbgChRIoBFcgQwDtgBLUdLOdlSJZgAdzg1a9cNADKEcgGdFAMS6KAFnwAGAEgDeLDt17F4SZAF8oAM3UbtdAPROobgHoB+IA'>Try</a></div></pre>\n<p>This can be used beyond cute examples in release notes.\nFor example, several libraries for UI components have a way to specify both vertical and horizontal alignment in their APIs, often with both at once using a single string like <code>\"bottom-right\"</code>.\nBetween vertically aligning with <code>\"top\"</code>, <code>\"middle\"</code>, and <code>\"bottom\"</code>, and horizontally aligning with <code>\"left\"</code>, <code>\"center\"</code>, and <code>\"right\"</code>, there are 9 possible strings where each of the former strings is connected with each of the latter strings using a dash.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type VerticalAlignment = \"top\" | \"middle\" | \"bottom\"' >VerticalAlignment</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"top\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"middle\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"bottom\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type HorizontalAlignment = \"left\" | \"center\" | \"right\"' >HorizontalAlignment</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"center\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"right\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Takes</span></div><div class='line'><span style=\"color: #008000\">//   | \"top-left\"    | \"top-center\"    | \"top-right\"</span></div><div class='line'><span style=\"color: #008000\">//   | \"middle-left\" | \"middle-center\" | \"middle-right\"</span></div><div class='line'><span style=\"color: #008000\">//   | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void' >setAlignment</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: \"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"' >value</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type VerticalAlignment = \"top\" | \"middle\" | \"bottom\"' >VerticalAlignment</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type HorizontalAlignment = \"left\" | \"center\" | \"right\"' >HorizontalAlignment</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void' >setAlignment</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"top-left\"</span><span style=\"color: #000000\">);   </span><span style=\"color: #008000\">// works!</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void' >setAlignment</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;top-middel&quot;</data-err></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// error!</span></div><span class=\"error\"><span>Argument of type '\"top-middel\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"top-middel\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.</span><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void' >setAlignment</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;top-pot&quot;</data-err></span><span style=\"color: #000000\">);    </span><span style=\"color: #008000\">// error! but good doughnuts if you&apos;re ever in Seattle</span></div><span class=\"error\"><span>Argument of type '\"top-pot\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"top-pot\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAGowECWAxgIYA2AgkzQOYB2AtpFwVABeUACICcEqNAAfMTxoATRU0jS5ogEZwCEnqIDchUuQASCGgC84A5m069+gkaNUAzAurF0nML6OhOAAtPIzwQUAAVBgBrSERwsFBZMQkSAFp3T2TkjTT0nwE-HJTxSXTAjhDRRJyNBWVVTMgPfwaVSALfaDalDorgz1rcsW1dOB5m1tKxvS6inpmdOcrqvDxFSDomBmhyNwBXLjpaG1BESAJ7bj4BAAoAN2YDyFQAAwASAG8qaFpGVjsG5OAC+6W+5kC1lsgIctwIILeAEpUA84EowhcrkDHPcyhksqIkQYchEAO4IGKIACEeCx11xBDu+PS7UgTCJJIiMHg0Fp9Jx8OZ+RIOk5JW5sAQ1NAmgOgg4cDgilAijgByqXHliFANDcoCI6oA5HtQJAHjBdVxQABlSAMXSqIA'>Try</a></div></pre>\n<p>While there are <strong>lots</strong> of examples of this sort of API in the wild, this is still a bit of a toy example since we could write these out manually.\nIn fact, for 9 strings, this is likely fine; but when you need a ton of strings, you should consider automatically generating them ahead of time to save work on every type-check (or just use <code>string</code>, which will be much simpler to comprehend).</p>\n<p>Some of the real value comes from dynamically creating new string literals.\nFor example, imagine a <code>makeWatchedObject</code> API that takes an object and produces a mostly identical object, but with a new <code>on</code> method to detect for changes to the properties.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">person</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">makeWatchedObject</span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">firstName:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Homer\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">age:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// give-or-take</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">location:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Springfield\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">person</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">on</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`firstName was changed!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>Notice that <code>on</code> listens on the event <code>\"firstNameChanged\"</code>, not just <code>\"firstName\"</code>.\nHow would we type this?</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\" twslash=\"true\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PropEventSource</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">on</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">eventName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">&</span><span style=\"color: #000000FF\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Changed`</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">callback</span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/// Create a \"watched object\" with an 'on' method</span></div><div class='line'><span style=\"color: #008000\">/// so that you can watch for changes to properties.</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeWatchedObject</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">PropEventSource</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>With this, we can build something that errors when we give the wrong property!</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let person: {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) on(eventName: \"firstNameChanged\" | \"ageChanged\" | \"locationChanged\", callback: () => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;firstName&quot;</data-err></span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {});</span></div><span class=\"error\"><span>Argument of type '\"firstName\"' is not assignable to parameter of type '\"firstNameChanged\" | \"ageChanged\" | \"locationChanged\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"firstName\"' is not assignable to parameter of type '\"firstNameChanged\" | \"ageChanged\" | \"locationChanged\"'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let person: {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) on(eventName: \"firstNameChanged\" | \"ageChanged\" | \"locationChanged\", callback: () => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;frstNameChanged&quot;</data-err></span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {});</span></div><span class=\"error\"><span>Argument of type '\"frstNameChanged\"' is not assignable to parameter of type '\"firstNameChanged\" | \"ageChanged\" | \"locationChanged\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"frstNameChanged\"' is not assignable to parameter of type '\"firstNameChanged\" | \"ageChanged\" | \"locationChanged\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAArwkCiAbpAHYEDKcArtAMaQA8AKgD5QAXlABvPKGmg4jABSQGzAHIBDALaRUAAwAk4xAWgBLRgHNQAMlABrSETgAzUPwC+AYQAWai5AAmOgA0oFxqADbhAEZqXLao8gCUosJ0cCb+iahpGQDceG75-pBc4WrQ5E7sjFwEJnKgGmr2AOpqBFxeAQDyUQBWJQQCgvJw-aj8Wa7WlNT0TKwc3HxC+eGQBKBkSA1iTa3tnT39g-KS0k4mSATqWqgARAAScFrQ90FSoGrm2qBYaCEQKBzCYGABaBBggjNSCfcJwMJ1OQPFgkUwWS6QcL+d4FRL5PBAsHErjsAjEsGEsAweDQACEeG2iDkADo5PJ7pdrrdIO9QEkUhI3Pi8FTQDSEAymaz2ZzuZpIN5fD8cSEBSJhOJhbkgA'>Try</a></div></pre>\n<p>We can also do something special in template literal types: we can <em>infer</em> from substitution positions.\nWe can make our last example generic to infer from parts of the <code>eventName</code> string to figure out the associated property.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type PropEventSource&lt;T> = {&#10;    on&lt;K extends string &amp; keyof T>(eventName: `${K}Changed`, callback: (newValue: T[K]) => void): void;&#10;}' >PropEventSource</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\"><data-lsp lsp='(method) on&lt;K extends string &amp; keyof T>(eventName: `${K}Changed`, callback: (newValue: T[K]) => void): void' >on</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K in on&lt;K extends string &amp; keyof T>(eventName: `${K}Changed`, callback: (newValue: T[K]) => void): void' >K</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> & </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">        (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) eventName: `${K}Changed`' >eventName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K in on&lt;K extends string &amp; keyof T>(eventName: `${K}Changed`, callback: (newValue: T[K]) => void): void' >K</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Changed`</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (newValue: T[K]) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newValue: T[K]' >newValue</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K in on&lt;K extends string &amp; keyof T>(eventName: `${K}Changed`, callback: (newValue: T[K]) => void): void' >K</data-lsp></span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> ): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='function makeWatchedObject&lt;T>(obj: T): T &amp; PropEventSource&lt;T>' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in makeWatchedObject&lt;T>(obj: T): T &amp; PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: T' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in makeWatchedObject&lt;T>(obj: T): T &amp; PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in makeWatchedObject&lt;T>(obj: T): T &amp; PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='type PropEventSource&lt;T> = {&#10;    on&lt;K extends string &amp; keyof T>(eventName: `${K}Changed`, callback: (newValue: T[K]) => void): void;&#10;}' >PropEventSource</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in makeWatchedObject&lt;T>(obj: T): T &amp; PropEventSource&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='let person: {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='function makeWatchedObject&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>(obj: {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}): {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) firstName: string' >firstName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Homer\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) location: string' >location</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Springfield\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// works! &apos;newName&apos; is typed as &apos;string&apos;</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='let person: {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) on&lt;\"firstName\">(eventName: \"firstNameChanged\", callback: (newValue: string) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) newName: string' >newName</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// &apos;newName&apos; has the type of &apos;firstName&apos;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`new name is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) newName: string' >newName</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// works! &apos;newAge&apos; is typed as &apos;number&apos;</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='let person: {&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    age: number;&#10;    location: string;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) on&lt;\"age\">(eventName: \"ageChanged\", callback: (newValue: number) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"ageChanged\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) newAge: number' >newAge</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newAge: number' >newAge</data-lsp></span><span style=\"color: #000000\"> &lt; 0) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"warning! negative age\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACgTgezAUQG4QHbAMoIK5wDGEAPACoB8UAvFAN4BQUzUCGJA0lBAB7CYATAM5QhwOAEsMAcygAyKAGsIIBADMolJix0AKCOiwA5AIYBbCAC4oAAwAkdDgF8AwgAsTMiAJsAaKIQmADZBAEYmhIrWuhgQAO4AasF4VpoA2hwAugCUNFSoCBICUNnWBUUA3AxOVQwCEIRBJnDQangYhMASbFBmJsoA6ibAhG7eAPKhAFYNwOQUugjT1mSlmvKwiCiGOPhEpJS1QRDAUJBwQj20fYPDoxPTs7qMOmoSF8CmFtYARAASCAscB+vm0zBM0lSABYAEygnRBBCBLpsX7YMCSGRvCBBAQg6rZWoAeiJUDiCDgiiEAEIoAByWJxL4QOlQCQiUCQYomER0sSY6R0hjnS4YAB0bF0PzeH2Z7k8kLx-kZzLy9DBUBJ9JV5hZUA8HLGUE50HU9JlYmZQp0hDYl2OYsR0l0NkZUAwurZIgcOosYuACAAqmBzi4eRBdNknDZCQTiaTyZSadr4gBBSGs9nG8DeKA87V4MyhCBwIUitgSjBSiEQeVeJXutOQtUvFgSDQxJvQEhQAAMuVbOmYtow9ogjoQzp+cWaGCk0lpsWkwwk6DzkJ+sZ0TgJQA'>Try</a></div></pre>\n<p>Here we made <code>on</code> into a generic method.\nWhen a user calls with the string <code>\"firstNameChanged'</code>, TypeScript will try to infer the right type for <code>K</code>.\nTo do that, it will match <code>K</code> against the content prior to <code>\"Changed\"</code> and infer the string <code>\"firstName\"</code>.\nOnce TypeScript figures that out, the <code>on</code> method can fetch the type of <code>firstName</code> on the original object, which is <code>string</code> in this case.\nSimilarly, when we call with <code>\"ageChanged\"</code>, it finds the type for the property <code>age</code> which is <code>number</code>).</p>\n<p>Inference can be combined in different ways, often to deconstruct strings, and reconstruct them in different ways.\nIn fact, to help with modifying these string literal types, we’ve added a few new utility type aliases for modifying casing in letters (i.e. converting to lowercase and uppercase characters).</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EnthusiasticGreeting&lt;T extends string> = `${Uppercase&lt;T>}`' >EnthusiasticGreeting</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type EnthusiasticGreeting&lt;T extends string>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Uppercase&lt;S extends string> = intrinsic' >Uppercase</data-lsp></span><span style=\"color: #000000FF\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type EnthusiasticGreeting&lt;T extends string>' >T</data-lsp></span><span style=\"color: #000000FF\">&gt;</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type HELLO = \"HELLO\"' style='border-bottom: solid 2px lightgrey;'>HELLO</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type EnthusiasticGreeting&lt;T extends string> = `${Uppercase&lt;T>}`' >EnthusiasticGreeting</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type HELLO = \"HELLO\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogdsAFgVwM4EsCGrjoMYDiAThBLnAOYA8AKlBAB7ARwAmqUOR6lAfFAF4oAAwAkAbwCqYSETzYItXgF9hAKDWhIUABIwAMvoDyg2AhQZsuQiTI9qAIkQQANi4D2D3gG41Aej8oIIA9AH4gA'>Try</a></div></pre>\n<p>The new type aliases are <code>Uppercase</code>, <code>Lowercase</code>, <code>Capitalize</code> and <code>Uncapitalize</code>.\nThe first two transform every character in a string, and the latter two transform only the first character in a string.</p>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/40336\">see the original pull request</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/40580\">the in-progress pull request to switch to type alias helpers</a>.</p>\n<h2 id=\"key-remapping-in-mapped-types\" style=\"position:relative;\"><a href=\"#key-remapping-in-mapped-types\" aria-label=\"key remapping in mapped types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Remapping in Mapped Types</h2>\n<p>Just as a refresher, a mapped type can create new object types based on arbitrary keys</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"noImplicitAny\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"strictNullChecks\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"strictFunctionTypes\"</span><span style=\"color: #000000\">]?: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #008000\">// same as</span></div><div class='line'><span style=\"color: #008000\">//   type Options = {</span></div><div class='line'><span style=\"color: #008000\">//       noImplicitAny?: boolean,</span></div><div class='line'><span style=\"color: #008000\">//       strictNullChecks?: boolean,</span></div><div class='line'><span style=\"color: #008000\">//       strictFunctionTypes?: boolean</span></div><div class='line'><span style=\"color: #008000\">//   };</span></div></code></div></pre>\n<p>or new object types based on other object types.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/// 'Partial&lt;T&gt;' is the same as 'T', but with each property marked optional.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Partial</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]?: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>Until now, mapped types could only produce new object types with keys that you provided them; however, lots of the time you want to be able to create new keys, or filter out keys, based on the inputs.</p>\n<p>That’s why TypeScript 4.1 allows you to re-map keys in mapped types with a new <code>as</code> clause.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MappedTypeWithNewKeys</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NewKeyType</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//            ^^^^^^^^^^^^^</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//            This is the new syntax!</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>With this new <code>as</code> clause, you can leverage features like template literal types to easily create property names based off of old ones.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Getters&lt;T> = { [K in keyof T as `get${Capitalize&lt;string &amp; K>}`]: () => T[K]; }' >Getters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Getters&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Getters&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`get</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Capitalize&lt;S extends string> = intrinsic' >Capitalize</data-lsp></span><span style=\"color: #000000FF\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">&</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #000000FF\">&gt;</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">]: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Getters&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.location: string' >location</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LazyPerson = {&#10;    getName: () => string;&#10;    getAge: () => number;&#10;    getLocation: () => string;&#10;}' style='border-bottom: solid 2px lightgrey;'>LazyPerson</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Getters&lt;T> = { [K in keyof T as `get${Capitalize&lt;string &amp; K>}`]: () => T[K]; }' >Getters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type LazyPerson = {\n    getName: () =&gt; string;\n    getAge: () =&gt; number;\n    getLocation: () =&gt; string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hzAgJwM4B4AqA+KBeKA3gFBSlQDaA0lAJYB2UA1hCAPYBmUGUAhilAAMA5vAAkBAMI8wNYDwA2NAF4Q0KYEnpCoAMiiUsAXwEBdAFxQAFAEo8ODFRNFDAbiJF6iJOx4BjaAAKyCisDMRkUHQ8ALYQFuqadEJuETwiFnQArtEARsgpZPKsvjzANKHxGlpuhu6gkFAAMjxKIEGooXiw8F7o7SF0WG4A9MNkAHoA-EA'>Try</a></div></pre>\n<p>and you can even filter out keys by producing <code>never</code>.\nThat means you don’t have to use an extra <code>Omit</code> helper type in some cases.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Remove the &apos;kind&apos; property</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type RemoveKindField&lt;T> = { [K in keyof T as Exclude&lt;K, \"kind\">]: T[K]; }' >RemoveKindField</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type RemoveKindField&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type RemoveKindField&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"kind\"</span><span style=\"color: #000000\">&gt;]: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type RemoveKindField&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.kind: \"circle\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type KindlessCircle = {&#10;    radius: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>KindlessCircle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type RemoveKindField&lt;T> = { [K in keyof T as Exclude&lt;K, \"kind\">]: T[K]; }' >RemoveKindField</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type KindlessCircle = {\n    radius: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAECUFMFsHsDdKgC4AskHIDWBLAdgCYagAOATrCZGcgJ4BQdVEMCkA0vgQGI6QA2BADwAVAHygAvKADe9UAtABtdqHygskWrABmoEaACGAZ1ABRAB4BjfgFcCkIewA0oAES5CbsQF0AXPoqPvQAvgDc9PT4yNQ6hlZIAMI4ZDZIcooaXAFuVilpbhGZZIYEOLbGAXi20ABG1BEhkUxInIT8kMbGyakdUixwiG08fIJCPWliESCKAHoA-EA'>Try</a></div></pre>\n<p>For more information, take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/40336\">the original pull request over on GitHub</a>.</p>\n<h2 id=\"recursive-conditional-types\" style=\"position:relative;\"><a href=\"#recursive-conditional-types\" aria-label=\"recursive conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursive Conditional Types</h2>\n<p>In JavaScript it’s fairly common to see functions that can flatten and build up container types at arbitrary levels.\nFor example, consider the <code>.then()</code> method on instances of <code>Promise</code>.\n<code>.then(...)</code> unwraps each promise until it finds a value that’s not “promise-like”, and passes that value to a callback.\nThere’s also a relatively new <code>flat</code> method on <code>Array</code>s that can take a depth of how deep to flatten.</p>\n<p>Expressing this in TypeScript’s type system was, for all practical intents and purposes, not possible.\nWhile there were hacks to achieve this, the types ended up looking very unreasonable.</p>\n<p>That’s why TypeScript 4.1 eases some restrictions on conditional types - so that they can model these patterns.\nIn TypeScript 4.1, conditional types can now immediately reference themselves within their branches, making it easier to write recursive type aliases.</p>\n<p>For example, if we wanted to write a type to get the element types of nested arrays, we could write the following <code>deepFlatten</code> type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ReadonlyArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; ? </span><span style=\"color: #1C6277\">ElementType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">deepFlatten</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">[]&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">ElementType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"not implemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// All of these return the type 'number[]':</span></div><div class='line'><span style=\"color: #795E26\">deepFlatten</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #795E26\">deepFlatten</span><span style=\"color: #000000\">([[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]]);</span></div><div class='line'><span style=\"color: #795E26\">deepFlatten</span><span style=\"color: #000000\">([[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], [[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]], [[[</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]]]]);</span></div></code></div></pre>\n<p>Similarly, in TypeScript 4.1 we can write an <code>Awaited</code> type to deeply unwrap <code>Promise</code>s.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PromiseLike</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; ? </span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt; : </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/// Like `promise.then(...)`, but more accurate in types.</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">customThen</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">onFulfilled</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Awaited</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;&gt;;</span></div></code></div></pre>\n<p>Keep in mind that while these recursive types are powerful, but they should be used responsibly and sparingly.</p>\n<p>First off, these types can do a lot of work which means that they can increase type-checking time.\nTrying to model numbers in the Collatz conjecture or Fibonacci sequence might be fun, but don’t ship that in <code>.d.ts</code> files on npm.</p>\n<p>But apart from being computationally intensive, these types can hit an internal recursion depth limit on sufficiently-complex inputs.\nWhen that recursion limit is hit, that results in a compile-time error.\nIn general, it’s better not to use these types at all than to write something that fails on more realistic examples.</p>\n<p>See more <a href=\"https://github.com/microsoft/TypeScript/pull/40002\">at the implementation</a>.</p>\n<h2 id=\"checked-indexed-accesses---nouncheckedindexedaccess\" style=\"position:relative;\"><a href=\"#checked-indexed-accesses---nouncheckedindexedaccess\" aria-label=\"checked indexed accesses   nouncheckedindexedaccess permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checked Indexed Accesses (<code>--noUncheckedIndexedAccess</code>)</h2>\n<p>TypeScript has a feature called <em>index signatures</em>.\nThese signatures are a way to signal to the type system that users can access arbitrarily-named properties.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.path: string' >path</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.permissions: number' >permissions</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Extra properties are caught by this index signature.</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propName: string' >propName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function checkOptions(opts: Options): void' >checkOptions</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.path: string' >path</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.permissions: number' >permissions</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// These are all allowed too!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// They have the type &apos;string | number&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='string | number' >yadda</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo bar baz\"</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">()].</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgPIAczAPYgM7IDeAUMsunGABYBcyeYUoA5gNynnQC2weeO+OiACuXAEbR2HAPTTkAUQAejOOSjZ00LBAJwoKBHGHMqYZGICeyar2SgAJhEX1gzEJWH6AdBwDa6dXQAOTguCDoGJhBmAF0IxhZkAB9kEXFJYgBfYmIYYRAELFxkBCoIBABrDCL8AAoNMDw6aoE8AEoiDga8LwpqVmRZegTorswezSgePlaBobSJKByyIYAVMrwUPS2AGx3kOD3sAHcIe2tsbABCGTl1iCsqOAA3FGo3i01kAHJIxJSFtBvj4yN0vBY4PZ7HAvGBsABlEbMWptdig8a+ABEMEu5j0eIAXpiYrCEUiUWjkN1fABZShULxQOAgezYLgoklwxFRZGorJAA'>Try</a></div></pre>\n<p>In the above example, <code>Options</code> has an index signature that says any accessed property that’s not already listed should have the type <code>string | number</code>.\nThis is often convenient for optimistic code that assumes you know what you’re doing, but the truth is that most values in JavaScript do not support every potential property name.\nMost types will not, for example, have a value for a property key created by <code>Math.random()</code> like in the previous example.\nFor many users, this behavior was undesirable, and felt like it wasn’t leveraging the full strict-checking of <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>.</p>\n<p>That’s why TypeScript 4.1 ships with a new flag called <a href=\"/tsconfig#noUncheckedIndexedAccess\"><code>noUncheckedIndexedAccess</code></a>.\nUnder this new mode, every property access (like <code>foo.bar</code>) or indexed access (like <code>foo[\"bar\"]</code>) is considered potentially undefined.\nThat means that in our last example, <code>opts.yadda</code> will have the type <code>string | number | undefined</code> as opposed to just <code>string | number</code>.\nIf you need to access that property, you’ll either have to check for its existence first or use a non-null assertion operator (the postfix <code>!</code> character).</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function checkOptions(opts: Options): void' >checkOptions</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.path: string' >path</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.permissions: number' >permissions</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// These are not allowed with noUncheckedIndexedAccess</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='string | number | undefined' >yadda</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo bar baz\"</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">()].</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Checking if it&apos;s really there first.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='string | number | undefined' >yadda</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='string | number' >yadda</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Basically saying \"trust me I know what I&apos;m doing\"</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// with the &apos;!&apos; non-null assertion operator.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: Options' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='string | number | undefined' >yadda</data-lsp></span><span style=\"color: #000000\">!.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) toString(): string (+1 overload)' >toString</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaBQIIA7OAVUIGMALScga0gBMBJQhyAD0YEFzzJFEuAJaEALjABmAQz6gA8gAdRQuIUSgA3rlCgFU0ZVSJR0EQHMA3Nt0wAtkIEq1qQgFdbAIxhXrBAKLsJlK68AowyvygUtCQoORSrmaUoqAeAJ6gBg6gImzsoIhCZoT6rjEAdNYA2gqhAHJStpBGJuYAui2mhGagAD6gbp7euAC++GAAtFPkrqJTE7gSrhTKqnHUdIqragAUcEoo8kpOiACUmtb7oojlegYWoATGXWaXB7d2DoWqiA8Eg15oLhfGAACrURCxaKxYgpKQAG3hcAA7oxQMihAYBqQKBt6MxWBxuLx+IIdFcbmkpAwGFJyqI4ABlVrdHanKzkg5VABEEjgcFS0UFAC9uW16UyWWY2RzQBSqgBZfSUcrQKSsOC2NnihnMl4y4E6AgAYTx5hyEhyogA5OoYgj4RkDDBYhIhEhRJUdEJLXt3lSaVJzlodDpyD84PDIOUkdKKeUA7SJXrzGz2dYxiDQAAhKSFeKIjKIKRpc3ckyuYygJqgJigWjEZHoyj6WvW2ygBhwczcrMYrHO0DWgCE1uxhAmbkRUQE4SccrCaoZ0C9C+uCeptOHyalBpGQA'>Try</a></div></pre>\n<p>One consequence of using <a href=\"/tsconfig#noUncheckedIndexedAccess\"><code>noUncheckedIndexedAccess</code></a> is that indexing into an array is also more strictly checked, even in a bounds-checked loop.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function screamLines(strs: string[]): void' >screamLines</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) strs: string[]' >strs</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This will have issues</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) strs: string[]' >strs</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;string>.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) strs: string[]' >strs</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaBQIIA7OAVUIGMALScga0gBMBJQhyAD0YEFzzJFEuAGYBXCgBcAlnEKhE5aJACGAWwAykwvwAUicUlR7omgOYBtALoBKUAG9coUAQAqlSYlAB3SQBsfoSiUAN0hQd0QRfgdQIQRQbR9IcTDQAF5QAAYAbhSAHjl9RAA6RMITcUocyQBqapt7R0dyGUQ4RJK4E11Cs0kLIvFSAAchmABhJURIbSsrLOiAX1wFoA'>Try</a></div></pre>\n<p>If you don’t need the indexes, you can iterate over individual elements by using a <code>for</code>-<code>of</code> loop or a <code>forEach</code> call.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function screamLines(strs: string[]): void' >screamLines</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) strs: string[]' >strs</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This works fine</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const str: string' >str</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) strs: string[]' >strs</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const str: string' >str</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This works fine</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) strs: string[]' >strs</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: string' >str</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: string' >str</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  });</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIMYAsCmCDWKAmBJSWUAPbAQQQRQGdKAoAMwFdEAXAS2klEoQCcUBDALYAZVpCoAKSsx6UAXFxliA5gG0AugEpQAbxqhQIUABUkrSqADu0Hugt0xKfaDo3QEhB2mKeoaHR9KbT0DA09ISmgAGxQAOijoZSkZWOY4AAd0lB4AYX5KFAlNTQBuZwBfGmcjU3MrGzsXR2dpWVjXHgBRfmQJZJ5tAF4APl1nMK9ouISk1tSMrNz8wuKyg3LSmnKgA'>Try</a></div></pre>\n<p>This flag can be handy for catching out-of-bounds errors, but it might be noisy for a lot of code, so it is not automatically enabled by the <a href=\"/tsconfig#strict\"><code>strict</code></a> flag; however, if this feature is interesting to you, you should feel free to try it and determine whether it makes sense for your team’s codebase!</p>\n<p>You can learn more <a href=\"https://github.com/microsoft/TypeScript/pull/39560\">at the implementing pull request</a>.</p>\n<h2 id=\"paths-without-baseurl\" style=\"position:relative;\"><a href=\"#paths-without-baseurl\" aria-label=\"paths without baseurl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>paths</code> without <code>baseUrl</code></h2>\n<p>Using path-mapping is fairly common - often it’s to have nicer imports, often it’s to simulate monorepo linking behavior.</p>\n<p>Unfortunately, specifying <a href=\"/tsconfig#paths\"><code>paths</code></a> to enable path-mapping required also specifying an option called <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a>, which allows bare specifier paths to be reached relative to the <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a> too.\nThis also often caused poor paths to be used by auto-imports.</p>\n<p>In TypeScript 4.1, the <a href=\"/tsconfig#paths\"><code>paths</code></a> option can be used without <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a>.\nThis helps avoid some of these issues.</p>\n<h2 id=\"checkjs-implies-allowjs\" style=\"position:relative;\"><a href=\"#checkjs-implies-allowjs\" aria-label=\"checkjs implies allowjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>checkJs</code> Implies <code>allowJs</code></h2>\n<p>Previously if you were starting a checked JavaScript project, you had to set both <a href=\"/tsconfig#allowJs\"><code>allowJs</code></a> and <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a>.\nThis was a slightly annoying bit of friction in the experience, so <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a> now implies <a href=\"/tsconfig#allowJs\"><code>allowJs</code></a> by default.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/40275\">See more details at the pull request</a>.</p>\n<h2 id=\"react-17-jsx-factories\" style=\"position:relative;\"><a href=\"#react-17-jsx-factories\" aria-label=\"react 17 jsx factories permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 17 JSX Factories</h2>\n<p>TypeScript 4.1 supports React 17’s upcoming <code>jsx</code> and <code>jsxs</code> factory functions through two new options for the <a href=\"/tsconfig#jsx\"><code>jsx</code></a> compiler option:</p>\n<ul>\n<li><code>react-jsx</code></li>\n<li><code>react-jsxdev</code></li>\n</ul>\n<p>These options are intended for production and development compiles respectively.\nOften, the options from one can extend from the other.\nFor example, a <code>tsconfig.json</code> for production builds might look like the following:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ./src/tsconfig.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2015\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strict'><data-lsp lsp=\"Enable all strict type checking options.\">strict</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#include'><data-lsp lsp=\"Specify a list of glob patterns that match files to be included in compilation.\">include</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./**/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>and one for development builds might look like the following:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ./src/tsconfig.dev.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig.json\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsxdev\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/39199\">check out the corresponding PR</a>.</p>\n<h2 id=\"editor-support-for-the-jsdoc-see-tag\" style=\"position:relative;\"><a href=\"#editor-support-for-the-jsdoc-see-tag\" aria-label=\"editor support for the jsdoc see tag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editor Support for the JSDoc <code>@see</code> Tag</h2>\n<p>The JSDoc tag <code>@see</code> tag now has better support in editors for TypeScript and JavaScript.\nThis allows you to use functionality like go-to-definition in a dotted name following the tag.\nFor example, going to definition on <code>first</code> or <code>C</code> in the JSDoc comment just works in the following example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: first.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @filename: main.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">first</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./first\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@see</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">first.C</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">related</span><span style=\"color: #000000\">() {}</span></div></code></div></pre>\n<p>Thanks to frequent contributor <a href=\"https://github.com/Kingwl\">Wenlu Wang</a> <a href=\"https://github.com/microsoft/TypeScript/pull/39760\">for implementing this</a>!</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p><code>lib.d.ts</code> may have a set of changed APIs, potentially in part due to how the DOM types are automatically generated.\nOne specific change is that <code>Reflect.enumerate</code> has been removed, as it was removed from ES2016.</p>\n<h3 id=\"abstract-members-cant-be-marked-async\" style=\"position:relative;\"><a href=\"#abstract-members-cant-be-marked-async\" aria-label=\"abstract members cant be marked async permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>abstract</code> Members Can’t Be Marked <code>async</code></h3>\n<p>Members marked as <code>abstract</code> can no longer be marked as <code>async</code>.\nThe fix here is to remove the <code>async</code> keyword, since callers are only concerned with the return type.</p>\n<h3 id=\"anyunknown-are-propagated-in-falsy-positions\" style=\"position:relative;\"><a href=\"#anyunknown-are-propagated-in-falsy-positions\" aria-label=\"anyunknown are propagated in falsy positions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code>/<code>unknown</code> Are Propagated in Falsy Positions</h3>\n<p>Previously, for an expression like <code>foo &#x26;&#x26; somethingElse</code>, the type of <code>foo</code> was <code>any</code> or <code>unknown</code>, the type of the whole that expression would be the type of <code>somethingElse</code>.</p>\n<p>For example, previously the type for <code>x</code> here was <code>{ someProp: string }</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">somethingElse</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">someProp</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">somethingElse</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>However, in TypeScript 4.1, we are more careful about how we determine this type.\nSince nothing is known about the type on the left side of the <code>&#x26;&#x26;</code>, we propagate <code>any</code> and <code>unknown</code> outward instead of the type on the right side.</p>\n<p>The most common pattern we saw of this tended to be when checking compatibility with <code>boolean</code>s, especially in predicate functions.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isThing</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">blah</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Often the appropriate fix is to switch from <code>foo &#x26;&#x26; someExpression</code> to <code>!!foo &#x26;&#x26; someExpression</code>.</p>\n<h3 id=\"resolves-parameters-are-no-longer-optional-in-promises\" style=\"position:relative;\"><a href=\"#resolves-parameters-are-no-longer-optional-in-promises\" aria-label=\"resolves parameters are no longer optional in promises permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>resolve</code>’s Parameters Are No Longer Optional in <code>Promise</code>s</h3>\n<p>When writing code like the following</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">doSomethingAsync</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  });</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>You may get an error like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">  resolve()\n  ~~~~~~~~~\nerror TS2554: Expected 1 arguments, but got 0.\n  An argument for 'value' was not provided.</span></div></code></div></pre>\n<p>This is because <code>resolve</code> no longer has an optional parameter, so by default, it must now be passed a value.\nOften this catches legitimate bugs with using <code>Promise</code>s.\nThe typical fix is to pass it the correct argument, and sometimes to add an explicit type argument.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;((</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//     ^^^^^^^^</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">doSomethingAsync</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//      ^^^^^</span></div><div class='line'><span style=\"color: #000000\">  });</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>However, sometimes <code>resolve()</code> really does need to be called without an argument.\nIn these cases, we can give <code>Promise</code> an explicit <code>void</code> generic type argument (i.e. write it out as <code>Promise&#x3C;void></code>).\nThis leverages new functionality in TypeScript 4.1 where a potentially-<code>void</code> trailing parameter can become optional.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">&gt;((</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//     ^^^^^^</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">doSomethingAsync</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  });</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>TypeScript 4.1 ships with a quick fix to help fix this break.</p>\n<h3 id=\"conditional-spreads-create-optional-properties\" style=\"position:relative;\"><a href=\"#conditional-spreads-create-optional-properties\" aria-label=\"conditional spreads create optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Spreads Create Optional Properties</h3>\n<p>In JavaScript, object spreads (like <code>{ ...foo }</code>) don’t operate over falsy values.\nSo in code like <code>{ ...foo }</code>, <code>foo</code> will be skipped over if it’s <code>null</code> or <code>undefined</code>.</p>\n<p>Many users take advantage of this to spread in properties “conditionally”.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">location</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">owner</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">copyOwner</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    ...(</span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">owner</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">otherStuff:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// We could also use optional chaining here:</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">copyOwner</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    ...</span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\">?.</span><span style=\"color: #001080\">owner</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">otherStuff:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Here, if <code>pet</code> is defined, the properties of <code>pet.owner</code> will be spread in - otherwise, no properties will be spread into the returned object.</p>\n<p>The return type of <code>copyOwner</code> was previously a union type based on each spread:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">{ x: number } | { x: number, name: string, age: number, location: string }</span></div></code></div></pre>\n<p>This modeled exactly how the operation would occur: if <code>pet</code> was defined, all the properties from <code>Person</code> would be present; otherwise, none of them would be defined on the result.\nIt was an all-or-nothing operation.</p>\n<p>However, we’ve seen this pattern taken to the extreme, with hundreds of spreads in a single object, each spread potentially adding in hundreds or thousands of properties.\nIt turns out that for various reasons, this ends up being extremely expensive, and usually for not much benefit.</p>\n<p>In TypeScript 4.1, the returned type sometimes uses all-optional properties.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">{\n    x: number;\n    name?: string;\n    age?: number;\n    location?: string;\n}</span></div></code></div></pre>\n<p>This ends up performing better and generally displaying better too.</p>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/40778\">see the original change</a>.\nWhile this behavior is not entirely consistent right now, we expect a future release will produce cleaner and more predictable results.</p>\n<h3 id=\"unmatched-parameters-are-no-longer-related\" style=\"position:relative;\"><a href=\"#unmatched-parameters-are-no-longer-related\" aria-label=\"unmatched parameters are no longer related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unmatched parameters are no longer related</h3>\n<p>TypeScript would previously relate parameters that didn’t correspond to each other by relating them to the type <code>any</code>.\nWith <a href=\"https://github.com/microsoft/TypeScript/pull/41308\">changes in TypeScript 4.1</a>, the language now skips this process entirely.\nThis means that some cases of assignability will now fail, but it also means that some cases of overload resolution can fail as well.\nFor example, overload resolution on <code>util.promisify</code> in Node.js may select a different overload in TypeScript 4.1, sometimes causing new or different errors downstream.</p>\n<p>As a workaround, you may be best using a type assertion to squelch errors.</p>","headings":[{"value":"Template Literal Types","depth":2},{"value":"Key Remapping in Mapped Types","depth":2},{"value":"Recursive Conditional Types","depth":2},{"value":"Checked Indexed Accesses (--noUncheckedIndexedAccess)","depth":2},{"value":"paths without baseUrl","depth":2},{"value":"checkJs Implies allowJs","depth":2},{"value":"React 17 JSX Factories","depth":2},{"value":"Editor Support for the JSDoc @see Tag","depth":2},{"value":"Breaking Changes","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"abstract Members Can’t Be Marked async","depth":3},{"value":"any/unknown Are Propagated in Falsy Positions","depth":3},{"value":"resolve’s Parameters Are No Longer Optional in Promises","depth":3},{"value":"Conditional Spreads Create Optional Properties","depth":3},{"value":"Unmatched parameters are no longer related","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-4-1.html","title":"TypeScript 4.1","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.1 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-4.1","slug":"/docs/handbook/release-notes/typescript-4-1.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 4.1.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.858Z"}},"staticQueryHashes":[]}