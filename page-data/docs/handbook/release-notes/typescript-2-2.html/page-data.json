{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-2-2.html","result":{"data":{"markdownRemark":{"id":"bc096f2d-4ee5-5814-a05d-125fc9910d8f","excerpt":"Support for Mix-in classes TypeScript 2.2 adds support for the ECMAScript 2015 mixin class pattern (see MDN Mixin description and “Real” Mixins with JavaScript…","html":"<h2 id=\"support-for-mix-in-classes\" style=\"position:relative;\"><a href=\"#support-for-mix-in-classes\" aria-label=\"support for mix in classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for Mix-in classes</h2>\n<p>TypeScript 2.2 adds support for the ECMAScript 2015 mixin class pattern (see <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Classes#Mix-ins\">MDN Mixin description</a> and <a href=\"http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\">“Real” Mixins with JavaScript Classes</a> for more details) as well as rules for combining mixin construct signatures with regular construct signatures in intersection types.</p>\n<h5 id=\"first-some-terminology\" style=\"position:relative;\"><a href=\"#first-some-terminology\" aria-label=\"first some terminology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First some terminology</h5>\n<p>A <strong>mixin constructor type</strong> refers to a type that has a single construct signature with a single rest argument of type <code>any[]</code> and an object-like return type. For example, given an object-like type <code>X</code>, <code>new (...args: any[]) => X</code> is a mixin constructor type with an instance type <code>X</code>.</p>\n<p>A <strong>mixin class</strong> is a class declaration or expression that <code>extends</code> an expression of a type parameter type. The following rules apply to mixin class declarations:</p>\n<ul>\n<li>The type parameter type of the <code>extends</code> expression must be constrained to a mixin constructor type.</li>\n<li>The constructor of a mixin class (if any) must have a single rest parameter of type <code>any[]</code> and must use the spread operator to pass those parameters as arguments in a <code>super(...args)</code> call.</li>\n</ul>\n<p>Given an expression <code>Base</code> of a parametric type <code>T</code> with a constraint <code>X</code>, a mixin class <code>class C extends Base {...}</code> is processed as if <code>Base</code> had type <code>X</code> and the resulting type is the intersection <code>typeof C &#x26; T</code>.\nIn other words, a mixin class is represented as an intersection between the mixin class constructor type and the parametric base class constructor type.</p>\n<p>When obtaining the construct signatures of an intersection type that contains mixin constructor types, the mixin construct signatures are discarded and their instance types are mixed into the return types of the other construct signatures in the intersection type.\nFor example, the intersection type <code>{ new(...args: any[]) => A } &#x26; { new(s: string) => B }</code> has a single construct signature <code>new(s: string) => A &#x26; B</code>.</p>\n<h5 id=\"putting-all-of-the-above-rules-together-in-an-example\" style=\"position:relative;\"><a href=\"#putting-all-of-the-above-rules-together-in-an-example\" aria-label=\"putting all of the above rules together in an example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Putting all of the above rules together in an example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Point</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Constructor</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Tagged</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Constructor</span><span style=\"color: #000000\">&lt;{}&gt;&gt;(</span><span style=\"color: #001080\">Base</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">_tag</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">_tag</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">TaggedPoint</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">Tagged</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">Point</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">point</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TaggedPoint</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">point</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">_tag</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Customer</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Tagged</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">Person</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">accountBalance</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">customer</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Customer</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Joe\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">customer</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">_tag</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"test\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">customer</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">accountBalance</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Mixin classes can constrain the types of classes they can mix into by specifying a construct signature return type in the constraint for the type parameter.\nFor example, the following <code>WithLocation</code> function implements a subclass factory that adds a <code>getLocation</code> method to any class that satisfies the <code>Point</code> interface (i.e. that has <code>x</code> and <code>y</code> properties of type <code>number</code>).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Point</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">WithLocation</span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Constructor</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Point</span><span style=\"color: #000000\">&gt;&gt;(</span><span style=\"color: #001080\">Base</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">getLocation</span><span style=\"color: #000000\">(): [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">] {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  };</span></div></code></div></pre>\n<h2 id=\"object-type\" style=\"position:relative;\"><a href=\"#object-type\" aria-label=\"object type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>object</code> type</h2>\n<p>TypeScript did not have a type that represents the non-primitive type, i.e. any thing that is not <code>number</code>, <code>string</code>, <code>boolean</code>, <code>symbol</code>, <code>null</code>, or <code>undefined</code>. Enter the new <code>object</code> type.</p>\n<p>With <code>object</code> type, APIs like <code>Object.create</code> can be better represented. For example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">prop:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> }); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Error</span></div></code></div></pre>\n<h2 id=\"support-for-newtarget\" style=\"position:relative;\"><a href=\"#support-for-newtarget\" aria-label=\"support for newtarget permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>new.target</code></h2>\n<p>The <code>new.target</code> meta-property is new syntax introduced in ES2015.\nWhen an instance of a constructor is created via <code>new</code>, the value of <code>new.target</code> is set to be a reference to the constructor function initially used to allocate the instance.\nIf a function is called rather than constructed via <code>new</code>, <code>new.target</code> is set to <code>undefined</code>.</p>\n<p><code>new.target</code> comes in handy when <code>Object.setPrototypeOf</code> or <code>__proto__</code> needs to be set in a class constructor. One such use case is inheriting from <code>Error</code> in NodeJS v4 and higher.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">CustomError</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 'Error' breaks prototype chain here</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">setPrototypeOf</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// restore prototype chain</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This results in the generated JS</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">CustomError</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">_super</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">__extends</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">CustomError</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_super</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">CustomError</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_newTarget</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">constructor</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_this</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_super</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">apply</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 'Error' breaks prototype chain here</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">_this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__proto__</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">_newTarget</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// restore prototype chain</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_this</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">CustomError</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p><code>new.target</code> also comes in handy for writing constructable functions, for example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/* called via 'new' */</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Which translates to:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_newTarget</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">f</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">constructor</span><span style=\"color: #000000\"> : </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_newTarget</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/* called via 'new' */</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"better-checking-for-nullundefined-in-operands-of-expressions\" style=\"position:relative;\"><a href=\"#better-checking-for-nullundefined-in-operands-of-expressions\" aria-label=\"better checking for nullundefined in operands of expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better checking for <code>null</code>/<code>undefined</code> in operands of expressions</h2>\n<p>TypeScript 2.2 improves checking of nullable operands in expressions. Specifically, these are now flagged as errors:</p>\n<ul>\n<li>If either operand of a <code>+</code> operator is nullable, and neither operand is of type <code>any</code> or <code>string</code>.</li>\n<li>If either operand of a <code>-</code>, <code>*</code>, <code>**</code>, <code>/</code>, <code>%</code>, <code>&#x3C;&#x3C;</code>, <code>>></code>, <code>>>></code>, <code>&#x26;</code>, <code>|</code>, or <code>^</code> operator is nullable.</li>\n<li>If either operand of a <code>&#x3C;</code>, <code>></code>, <code>&#x3C;=</code>, <code>>=</code>, or <code>in</code> operator is nullable.</li>\n<li>If the right operand of an <code>instanceof</code> operator is nullable.</li>\n<li>If the operand of a <code>+</code>, <code>-</code>, <code>~</code>, <code>++</code>, or <code>--</code> unary operator is nullable.</li>\n</ul>\n<p>An operand is considered nullable if the type of the operand is <code>null</code> or <code>undefined</code> or a union type that includes <code>null</code> or <code>undefined</code>.\nNote that the union type case only only occurs in <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> mode because <code>null</code> and <code>undefined</code> disappear from unions in classic type checking mode.</p>\n<h2 id=\"dotted-property-for-types-with-string-index-signatures\" style=\"position:relative;\"><a href=\"#dotted-property-for-types-with-string-index-signatures\" aria-label=\"dotted property for types with string index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dotted property for types with string index signatures</h2>\n<p>Types with a string index signature can be indexed using the <code>[]</code> notation, but were not allowed to use the <code>.</code>.\nStarting with TypeScript 2.2 using either should be allowed.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">StringMap</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">map</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">StringMap</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">map</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"prop1\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">map</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop2</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>This only apply to types with an <em>explicit</em> string index signature.\nIt is still an error to access unknown properties on a type using <code>.</code> notation.</p>\n<h2 id=\"support-for-spread-operator-on-jsx-element-children\" style=\"position:relative;\"><a href=\"#support-for-spread-operator-on-jsx-element-children\" aria-label=\"support for spread operator on jsx element children permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for spread operator on JSX element children</h2>\n<p>TypeScript 2.2 adds support for using spread on a JSX element children.\nPlease see <a href=\"https://github.com/facebook/jsx/issues/57\">facebook/jsx#57</a> for more details.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Todo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">todo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;{prop.key.toString() + prop.</span><span style=\"color: #001080\">todo</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TodoList</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">todos</span><span style=\"color: #000000\"> }: </span><span style=\"color: #1C6277\">TodoListProps</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">    &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;{...</span><span style=\"color: #001080\">todos</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">todo</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">Todo</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">key</span><span style=\"color: #000000\">={</span><span style=\"color: #1C6277\">todo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">} </span><span style=\"color: #1C6277\">todo</span><span style=\"color: #000000\">={</span><span style=\"color: #1C6277\">todo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">todo</span><span style=\"color: #000000\">} /&gt;)}&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  );</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TodoListProps</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">TodoList</span><span style=\"color: #000000\"> {...</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">} /&gt;;</span></div></code></div></pre>\n<h2 id=\"new-jsx-react-native\" style=\"position:relative;\"><a href=\"#new-jsx-react-native\" aria-label=\"new jsx react native permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>jsx: react-native</code></h2>\n<p>React-native build pipeline expects all files to have a <code>.js</code> extensions even if the file contains JSX syntax.\nThe new <a href=\"/tsconfig#jsx\"><code>jsx</code></a> value <code>react-native</code> will persevere the JSX syntax in the output file, but give it a <code>.js</code> extension.</p>","headings":[{"value":"Support for Mix-in classes","depth":2},{"value":"First some terminology","depth":5},{"value":"Putting all of the above rules together in an example","depth":5},{"value":"object type","depth":2},{"value":"Support for new.target","depth":2},{"value":"Example","depth":5},{"value":"Better checking for null/undefined in operands of expressions","depth":2},{"value":"Dotted property for types with string index signatures","depth":2},{"value":"Support for spread operator on JSX element children","depth":2},{"value":"Example","depth":5},{"value":"New jsx: react-native","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-2.html","title":"TypeScript 2.2","disable_toc":null,"handbook":null,"oneline":"TypeScript 2.2 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-2.2","slug":"/docs/handbook/release-notes/typescript-2-2.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 2.2.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.854Z"}},"staticQueryHashes":[]}