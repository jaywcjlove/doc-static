{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-3-3.html","result":{"data":{"markdownRemark":{"id":"0ee701e4-e866-5bd8-8c35-27c0ae96a53a","excerpt":"Improved behavior for calling union types In prior versions of TypeScript, unions of callable types could only be invoked if they had identical parameter lists…","html":"<h2 id=\"improved-behavior-for-calling-union-types\" style=\"position:relative;\"><a href=\"#improved-behavior-for-calling-union-types\" aria-label=\"improved behavior for calling union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved behavior for calling union types</h2>\n<p>In prior versions of TypeScript, unions of callable types could <em>only</em> be invoked if they had identical parameter lists.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> Fruit = </span><span style=\"color: #A31515\">\"apple\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> Color = </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> FruitEater = (</span><span style=\"color: #1A1A1A\">fruit</span><span style=\"color: #000000\">: Fruit) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> number; </span><span style=\"color: #008000\">// eats and ranks the fruit</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> ColorConsumer = (</span><span style=\"color: #1A1A1A\">color</span><span style=\"color: #000000\">: Color) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> string; </span><span style=\"color: #008000\">// consumes and describes the colors</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> FruitEater </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> ColorConsumer</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// Cannot invoke an expression whose type lacks a call signature.</span>\n<span style=\"color: #008000\">//   Type 'FruitEater | ColorConsumer' has no compatible call signatures.ts(2349)</span>\n<span style=\"color: #000000\">f(</span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>However, in the above example, both <code>FruitEater</code>s and <code>ColorConsumer</code>s should be able to take the string <code>\"orange\"</code>, and return either a <code>number</code> or a <code>string</code>.</p>\n<p>In TypeScript 3.3, this is no longer an error.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> Fruit = </span><span style=\"color: #A31515\">\"apple\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> Color = </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> FruitEater = (</span><span style=\"color: #1A1A1A\">fruit</span><span style=\"color: #000000\">: Fruit) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> number; </span><span style=\"color: #008000\">// eats and ranks the fruit</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> ColorConsumer = (</span><span style=\"color: #1A1A1A\">color</span><span style=\"color: #000000\">: Color) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> string; </span><span style=\"color: #008000\">// consumes and describes the colors</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> FruitEater </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> ColorConsumer</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">f(</span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// It works! Returns a 'number | string'.</span>\n\n<span style=\"color: #000000\">f(</span><span style=\"color: #A31515\">\"apple\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// error - Argument of type '\"apple\"' is not assignable to parameter of type '\"orange\"'.</span>\n\n<span style=\"color: #000000\">f(</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// error - Argument of type '\"red\"' is not assignable to parameter of type '\"orange\"'.</span></code></div></pre>\n<p>In TypeScript 3.3, the parameters of these signatures are <em>intersected</em> together to create a new signature.</p>\n<p>In the example above, the parameters <code>fruit</code> and <code>color</code> are intersected together to a new parameter of type <code>Fruit &#x26; Color</code>.\n<code>Fruit &#x26; Color</code> is really the same as <code>(\"apple\" | \"orange\") &#x26; (\"red\" | \"orange\")</code> which is equivalent to <code>(\"apple\" &#x26; \"red\") | (\"apple\" &#x26; \"orange\") | (\"orange\" &#x26; \"red\") | (\"orange\" &#x26; \"orange\")</code>.\nEach of those impossible intersections reduces to <code>never</code>, and we’re left with <code>\"orange\" &#x26; \"orange\"</code> which is just <code>\"orange\"</code>.</p>\n<h2 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h2>\n<p>This new behavior only kicks in when at most one type in the union has multiple overloads, and at most one type in the union has a generic signature.\nThat means methods on <code>number[] | string[]</code> like <code>map</code> (which is generic) still won’t be callable.</p>\n<p>On the other hand, methods like <code>forEach</code> will now be callable, but under <code>noImplicitAny</code> there may be some issues.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Dog {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dog\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">dogProp</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Cat {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"cat\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">catProp</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">catOrDogArray</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> Dog[] </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> Cat[] </span><span style=\"color: #000000\">= [];</span>\n\n<span style=\"color: #1A1A1A\">catOrDogArray</span><span style=\"color: #000000\">.forEach(</span><span style=\"color: #1A1A1A\">animal</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//                ~~~~~~ error!</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Parameter 'animal' implicitly has an 'any' type.</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<p>This is still strictly more capable in TypeScript 3.3, and adding an explicit type annotation will work.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Dog {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dog\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">dogProp</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Cat {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"cat\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">catProp</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">catOrDogArray</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> Dog[] </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> Cat[] </span><span style=\"color: #000000\">= [];</span>\n<span style=\"color: #1A1A1A\">catOrDogArray</span><span style=\"color: #000000\">.forEach((</span><span style=\"color: #1A1A1A\">animal</span><span style=\"color: #000000\">: Dog | Cat) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">animal</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"dog\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">animal</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">dogProp</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">animal</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">kind</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"cat\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">animal</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">catProp</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<h2 id=\"incremental-file-watching-for-composite-projects-in---build---watch\" style=\"position:relative;\"><a href=\"#incremental-file-watching-for-composite-projects-in---build---watch\" aria-label=\"incremental file watching for composite projects in   build   watch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Incremental file watching for composite projects in <code>--build --watch</code></h2>\n<p>TypeScript 3.0 introduced a new feature for structuring builds called “composite projects”.\nPart of the goal here was to ensure users could break up large projects into smaller parts that build quickly and preserve project structure, without compromising the existing TypeScript experience.\nThanks to composite projects, TypeScript can use <code>--build</code> mode to recompile only the set of projects and dependencies.\nYou can think of this as optimizing <em>inter</em>-project builds.</p>\n<p>TypeScript 2.7 also introduced <code>--watch</code> mode builds via a new incremental “builder” API.\nIn a similar vein, the entire idea is that this mode only re-checks and re-emits changed files or files whose dependencies might impact type-checking.\nYou can think of this as optimizing <em>intra</em>-project builds.</p>\n<p>Prior to 3.3, building composite projects using <code>--build --watch</code> actually didn’t use this incremental file watching infrastructure.\nAn update in one project under <code>--build --watch</code> mode would force a full build of that project, rather than determining which files within that project were affected.</p>\n<p>In TypeScript 3.3, <code>--build</code> mode’s <code>--watch</code> flag <em>does</em> leverage incremental file watching as well.\nThat can mean signficantly faster builds under <code>--build --watch</code>.\nIn our testing, this functionality has resulted in <strong>a reduction of 50% to 75% in build times</strong> of the original <code>--build --watch</code> times.\n<a href=\"https://github.com/Microsoft/TypeScript/pull/29161\">You can read more on the original pull request for the change</a> to see specific numbers, but we believe most composite project users will see significant wins here.</p>","headings":[{"value":"Improved behavior for calling union types","depth":2},{"value":"Caveats","depth":2},{"value":"Incremental file watching for composite projects in --build --watch","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-3.html","title":"TypeScript 3.3","disable_toc":null,"handbook":null,"oneline":"TypeScript 3.3 Release Notes","beta":null}},"prev":null,"next":null},"pageContext":{"id":"4typescript-3.3","slug":"/docs/handbook/release-notes/typescript-3-3.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 3.3.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.623Z"}},"staticQueryHashes":[]}