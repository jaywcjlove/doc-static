{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-3-0.html","result":{"data":{"markdownRemark":{"id":"04062a50-c200-5e25-81d1-9fc3ccb86b81","excerpt":"Project References TypeScript 3.0 introduces a new concept of project references. Project references allow TypeScript projects to depend on other TypeScriptâ€¦","html":"<h2 id=\"project-references\" style=\"position:relative;\"><a href=\"#project-references\" aria-label=\"project references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project References</h2>\n<p>TypeScript 3.0 introduces a new concept of project references. Project references allow TypeScript projects to depend on other TypeScript projects - specifically, allowing <code>tsconfig.json</code> files to reference other <code>tsconfig.json</code> files. Specifying these dependencies makes it easier to split your code into smaller projects, since it gives TypeScript (and tools around it) a way to understand build ordering and output structure.</p>\n<p>TypeScript 3.0 also introduces a new mode for tsc, the <code>--build</code> flag, that works hand-in-hand with project references to enable faster TypeScript builds.</p>\n<p>See <a href=\"/docs/handbook/project-references.html\">Project References handbook page</a> for more documentation.</p>\n<h2 id=\"tuples-in-rest-parameters-and-spread-expressions\" style=\"position:relative;\"><a href=\"#tuples-in-rest-parameters-and-spread-expressions\" aria-label=\"tuples in rest parameters and spread expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples in rest parameters and spread expressions</h2>\n<p>TypeScript 3.0 adds support to multiple new capabilities to interact with function parameter lists as tuple types.\nTypeScript 3.0 adds support for:</p>\n<ul>\n<li><a href=\"#rest-parameters-with-tuple-types\">Expansion of rest parameters with tuple types into discrete parameters.</a></li>\n<li><a href=\"#spread-expressions-with-tuple-types\">Expansion of spread expressions with tuple types into discrete arguments.</a></li>\n<li><a href=\"#generic-rest-parameters\">Generic rest parameters and corresponding inference of tuple types.</a></li>\n<li><a href=\"#optional-elements-in-tuple-types\">Optional elements in tuple types.</a></li>\n<li><a href=\"#rest-elements-in-tuple-types\">Rest elements in tuple types.</a></li>\n</ul>\n<p>With these features it becomes possible to strongly type a number of higher-order functions that transform functions and their parameter lists.</p>\n<h2 id=\"rest-parameters-with-tuple-types\" style=\"position:relative;\"><a href=\"#rest-parameters-with-tuple-types\" aria-label=\"rest parameters with tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest parameters with tuple types</h2>\n<p>When a rest parameter has a tuple type, the tuple type is expanded into a sequence of discrete parameters.\nFor example the following two declarations are equivalent:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> foo(...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">: [number, string, boolean]): void;</span></code></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> foo(</span><span style=\"color: #1A1A1A\">args_0</span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\">args_1</span><span style=\"color: #000000\">: string, </span><span style=\"color: #1A1A1A\">args_2</span><span style=\"color: #000000\">: boolean): void;</span></code></div></pre>\n<h2 id=\"spread-expressions-with-tuple-types\" style=\"position:relative;\"><a href=\"#spread-expressions-with-tuple-types\" aria-label=\"spread expressions with tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spread expressions with tuple types</h2>\n<p>When a function call includes a spread expression of a tuple type as the last argument, the spread expression corresponds to a sequence of discrete arguments of the tuple element types.</p>\n<p>Thus, the following calls are equivalent:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> [number, string, boolean] </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">foo(</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">foo(</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">], </span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">]);</span>\n<span style=\"color: #000000\">foo(...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">);</span></code></div></pre>\n<h2 id=\"generic-rest-parameters\" style=\"position:relative;\"><a href=\"#generic-rest-parameters\" aria-label=\"generic rest parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic rest parameters</h2>\n<p>A rest parameter is permitted to have a generic type that is constrained to an array type, and type inference can infer tuple types for such generic rest parameters. This enables higher-order capturing and spreading of partial parameter lists:</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> bind&lt;T, U </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> any[], V&gt;(</span>\n<span style=\"color: #000000\">  f: (</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: T, ...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">: U) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> V,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: T</span>\n<span style=\"color: #000000\">): (...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">: U) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> V;</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f3(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">: string, </span><span style=\"color: #1A1A1A\">z</span><span style=\"color: #000000\">: boolean): void;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">f2 </span><span style=\"color: #000000\">= bind(</span><span style=\"color: #1A1A1A\">f3</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// (y: string, z: boolean) =&gt; void</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">f1 </span><span style=\"color: #000000\">= bind(</span><span style=\"color: #1A1A1A\">f2</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// (z: boolean) =&gt; void</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">f0 </span><span style=\"color: #000000\">= bind(</span><span style=\"color: #1A1A1A\">f1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// () =&gt; void</span>\n\n<span style=\"color: #000000\">f3(</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">f2(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">f1(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">f0();</span></code></div></pre>\n<p>In the declaration of <code>f2</code> above, type inference infers types <code>number</code>, <code>[string, boolean]</code> and <code>void</code> for <code>T</code>, <code>U</code> and <code>V</code> respectively.</p>\n<p>Note that when a tuple type is inferred from a sequence of parameters and later expanded into a parameter list, as is the case for <code>U</code>, the original parameter names are used in the expansion (however, the names have no semantic meaning and are not otherwise observable).</p>\n<h2 id=\"optional-elements-in-tuple-types\" style=\"position:relative;\"><a href=\"#optional-elements-in-tuple-types\" aria-label=\"optional elements in tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional elements in tuple types</h2>\n<p>Tuple types now permit a <code>?</code> postfix on element types to indicate that the element is optional:</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> [number, string?, boolean?]</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">];</span></code></div></pre>\n<p>In <code>--strictNullChecks</code> mode, a <code>?</code> modifier automatically includes <code>undefined</code> in the element type, similar to optional parameters.</p>\n<p>A tuple type permits an element to be omitted if it has a postfix <code>?</code> modifier on its type and all elements to the right of it also have <code>?</code> modifiers.</p>\n<p>When tuple types are inferred for rest parameters, optional parameters in the source become optional tuple elements in the inferred type.</p>\n<p>The <code>length</code> property of a tuple type with optional elements is a union of numeric literal types representing the possible lengths.\nFor example, the type of the <code>length</code> property in the tuple type <code>[number, string?, boolean?]</code> is <code>1 | 2 | 3</code>.</p>\n<h3 id=\"rest-elements-in-tuple-types\" style=\"position:relative;\"><a href=\"#rest-elements-in-tuple-types\" aria-label=\"rest elements in tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest elements in tuple types</h3>\n<p>The last element of a tuple type can be a rest element of the form <code>...X</code>, where <code>X</code> is an array type.\nA rest element indicates that the tuple type is open-ended and may have zero or more additional elements of the array element type.\nFor example, <code>[number, ...string[]]</code> means tuples with a <code>number</code> element followed by any number of <code>string</code> elements.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> tuple&lt;T </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> any[]&gt;(...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">: T): T {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">numbers</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number[] </span><span style=\"color: #000000\">= getArrayOfNumbers();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">t1 </span><span style=\"color: #000000\">= tuple(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// [string, number, boolean]</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">t2 </span><span style=\"color: #000000\">= tuple(</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">numbers</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// [string, ...number[]]</span></code></div></pre>\n<p>The type of the <code>length</code> property of a tuple type with a rest element is <code>number</code>.</p>\n<h2 id=\"new-unknown-top-type\" style=\"position:relative;\"><a href=\"#new-unknown-top-type\" aria-label=\"new unknown top type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>unknown</code> top type</h2>\n<p>TypeScript 3.0 introduces a new top type <code>unknown</code>.\n<code>unknown</code> is the type-safe counterpart of <code>any</code>.\nAnything is assignable to <code>unknown</code>, but <code>unknown</code> isnâ€™t assignable to anything but itself and <code>any</code> without a type assertion or a control flow based narrowing.\nLikewise, no operations are permitted on an <code>unknown</code> without first asserting or narrowing to a more specific type.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// In an intersection everything absorbs unknown</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T00 = unknown & null; </span><span style=\"color: #008000\">// null</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T01 = unknown & undefined; </span><span style=\"color: #008000\">// undefined</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T02 = unknown & null & undefined; </span><span style=\"color: #008000\">// null & undefined (which becomes never)</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T03 = unknown & string; </span><span style=\"color: #008000\">// string</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T04 = unknown & string[]; </span><span style=\"color: #008000\">// string[]</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T05 = unknown & unknown; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T06 = unknown & any; </span><span style=\"color: #008000\">// any</span>\n\n<span style=\"color: #008000\">// In a union an unknown absorbs everything</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T10 = unknown | null; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T11 = unknown | undefined; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T12 = unknown | null | undefined; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T13 = unknown | string; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T14 = unknown | string[]; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T15 = unknown | unknown; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T16 = unknown | any; </span><span style=\"color: #008000\">// any</span>\n\n<span style=\"color: #008000\">// Type variable and unknown in union and intersection</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T20&lt;T&gt; = T & {}; </span><span style=\"color: #008000\">// T & {}</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T21&lt;T&gt; = T | {}; </span><span style=\"color: #008000\">// T | {}</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T22&lt;T&gt; = T & unknown; </span><span style=\"color: #008000\">// T</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T23&lt;T&gt; = T | unknown; </span><span style=\"color: #008000\">// unknown</span>\n\n<span style=\"color: #008000\">// unknown in conditional types</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T30&lt;T&gt; = unknown extends T ? true : false; </span><span style=\"color: #008000\">// Deferred</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T31&lt;T&gt; = T extends unknown ? true : false; </span><span style=\"color: #008000\">// Deferred (so it distributes)</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T32&lt;T&gt; = never extends T ? true : false; </span><span style=\"color: #008000\">// true</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T33&lt;T&gt; = T extends never ? true : false; </span><span style=\"color: #008000\">// Deferred</span>\n\n<span style=\"color: #008000\">// keyof unknown</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T40 = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> any; </span><span style=\"color: #008000\">// string | number | symbol</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T41 = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> unknown; </span><span style=\"color: #008000\">// never</span>\n\n<span style=\"color: #008000\">// Only equality operators are allowed with unknown</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f10(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: unknown) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> == </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> !== </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  -</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  +</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// No property accesses, element accesses, or function calls</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f11(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: unknown) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">]; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  x(); </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> x(); </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// typeof, instanceof, and user defined type predicates</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> isFunction(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: unknown): x </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> Function;</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f20(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: unknown) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\"> || </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string | number</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> Error) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (isFunction(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">)) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Function</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Homomorphic mapped type over unknown</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T50&lt;T&gt; = { [P </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">keyof</span><span style=\"color: #000000\"> T]: number };</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T51 = T50&lt;any&gt;; </span><span style=\"color: #008000\">// { [x: string]: number }</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> T52 = T50&lt;unknown&gt;; </span><span style=\"color: #008000\">// {}</span>\n\n<span style=\"color: #008000\">// Anything is assignable to unknown</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f21&lt;T&gt;(</span><span style=\"color: #1A1A1A\">pAny</span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\">pNever</span><span style=\"color: #000000\">: never, </span><span style=\"color: #1A1A1A\">pT</span><span style=\"color: #000000\">: T) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> unknown</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">123</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Error();</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">pAny</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">pNever</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">pT</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// unknown assignable only to itself and any</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f22(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: unknown) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v1</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> any </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v2</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> unknown </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v3</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> object </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v4</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v5</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string[] </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v6</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> {} </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v7</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> {} </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> null </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> undefined </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Type parameter 'T extends unknown' not related to object</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f23&lt;T </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> unknown&gt;(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: T) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> object </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Anything but primitive assignable to { [x: string]: unknown }</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f24(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: { [</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: string]: unknown }) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = {};</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = { a: </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">123</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Locals of type unknown always considered initialized</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f25() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> unknown</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">y </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Spread of unknown causes result to be unknown</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f26(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: {}, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">: unknown, </span><span style=\"color: #1A1A1A\">z</span><span style=\"color: #000000\">: any) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">o1 </span><span style=\"color: #000000\">= { a: </span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// { a: number }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">o2 </span><span style=\"color: #000000\">= { a: </span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// unknown</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">o3 </span><span style=\"color: #000000\">= { a: </span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">z</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// any</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Functions with unknown return type don't need return expressions</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f27(): unknown {}</span>\n\n<span style=\"color: #008000\">// Rest type cannot be created from unknown</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f28(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: unknown) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { ...</span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\"> } = </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Class properties of type unknown don't need definite assignment</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C1 {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">: string; </span><span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">b</span><span style=\"color: #000000\">: unknown;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"support-for-defaultprops-in-jsx\" style=\"position:relative;\"><a href=\"#support-for-defaultprops-in-jsx\" aria-label=\"support for defaultprops in jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>defaultProps</code> in JSX</h2>\n<p>TypeScript 2.9 and earlier didnâ€™t leverage <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html#default-prop-values\">React <code>defaultProps</code></a> declarations inside JSX components.\nUsers would often have to declare properties optional and use non-null assertions inside of <code>render</code>, or theyâ€™d use type-assertions to fix up the type of the component before exporting it.</p>\n<p>TypeScript 3.0 adds support for a new type alias in the <code>JSX</code> namespace called <code>LibraryManagedAttributes</code>.\nThis helper type defines a transformation on the componentâ€™s <code>Props</code> type, before using to check a JSX expression targeting it; thus allowing customization like: how conflicts between provided props and inferred props are handled, how inferences are mapped, how optionality is handled, and how inferences from differing places should be combined.</p>\n<p>In short using this general type, we can model Reactâ€™s specific behavior for things like <code>defaultProps</code> and, to some extent, <code>propTypes</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Props {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Greet </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> React.Component&lt;Props&gt; {</span>\n<span style=\"color: #000000\">  render() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\"> } = </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">Hello {</span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">.toUpperCase()}!</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">defaultProps</span><span style=\"color: #000000\"> = { name: </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Type-checks! No type assertions needed!</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">el</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;Greet</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span><span style=\"color: #000000\">;</span></code></div></pre>\n<h2 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h2>\n<h3 id=\"explicit-types-on-defaultprops\" style=\"position:relative;\"><a href=\"#explicit-types-on-defaultprops\" aria-label=\"explicit types on defaultprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicit types on <code>defaultProps</code></h3>\n<p>The default-ed properties are inferred from the <code>defaultProps</code> property type. If an explicit type annotation is added, e.g. <code>static defaultProps: Partial&#x3C;Props>;</code> the compiler will not be able to identify which properties have defaults (since the type of <code>defaultProps</code> include all properties of <code>Props</code>).</p>\n<p>Use <code>static defaultProps: Pick&#x3C;Props, \"name\">;</code> as an explicit type annotation instead, or do not add a type annotation as done in the example above.</p>\n<p>For function components (formerly known as SFCs) use ES2015 default initializers:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> Greet({ </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\"> }: Props) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">Hello {</span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">.toUpperCase()}!</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h4 id=\"changes-to-typesreact\" style=\"position:relative;\"><a href=\"#changes-to-typesreact\" aria-label=\"changes to typesreact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changes to <code>@types/React</code></h4>\n<p>Corresponding changes to add <code>LibraryManagedAttributes</code> definition to the <code>JSX</code> namespace in <code>@types/React</code> are still needed.\nKeep in mind that there are some limitations.</p>\n<h2 id=\"-reference-lib--reference-directives\" style=\"position:relative;\"><a href=\"#-reference-lib--reference-directives\" aria-label=\" reference lib  reference directives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference lib=\"...\" /></code> reference directives</h2>\n<p>TypeScript adds a new triple-slash-reference directive (<code>/// &#x3C;reference lib=\"name\" /></code>), allowing a file to explicitly include an existing built-in <em>lib</em> file.</p>\n<p>Built-in <em>lib</em> files are referenced in the same fashion as the <code>\"lib\"</code> compiler option in <em>tsconfig.json</em> (e.g. use <code>lib=\"es2015\"</code> and not <code>lib=\"lib.es2015.d.ts\"</code>, etc.).</p>\n<p>For declaration file authors who relay on built-in types, e.g. DOM APIs or built-in JS run-time constructors like <code>Symbol</code> or <code>Iterable</code>, triple-slash-reference lib directives are the recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.</p>\n<h5 id=\"example-4\" style=\"position:relative;\"><a href=\"#example-4\" aria-label=\"example 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Using <code>/// &#x3C;reference lib=\"es2017.string\" /></code> to one of the files in a compilation is equivalent to compiling with <code>--lib es2017.string</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/// &lt;reference lib=\"es2017.string\" /&gt;</span>\n\n<span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">.padStart(</span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\">);</span></code></div></pre>","headings":[{"value":"Project References","depth":2},{"value":"Tuples in rest parameters and spread expressions","depth":2},{"value":"Rest parameters with tuple types","depth":2},{"value":"Spread expressions with tuple types","depth":2},{"value":"Generic rest parameters","depth":2},{"value":"Example","depth":5},{"value":"Optional elements in tuple types","depth":2},{"value":"Example","depth":5},{"value":"Rest elements in tuple types","depth":3},{"value":"Example","depth":5},{"value":"New unknown top type","depth":2},{"value":"Example","depth":5},{"value":"Support for defaultProps in JSX","depth":2},{"value":"Caveats","depth":2},{"value":"Explicit types on defaultProps","depth":3},{"value":"Changes to @types/React","depth":4},{"value":"/// <reference lib=\"...\" /> reference directives","depth":2},{"value":"Example","depth":5}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-0.html","title":"TypeScript 3.0","disable_toc":null,"handbook":null,"oneline":"TypeScript 3.0 Release Notes","beta":null}},"prev":null,"next":null},"pageContext":{"id":"4typescript-3.0","slug":"/docs/handbook/release-notes/typescript-3-0.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 3.0.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.623Z"}},"staticQueryHashes":[]}