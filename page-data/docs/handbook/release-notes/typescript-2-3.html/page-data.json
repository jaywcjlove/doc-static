{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-2-3.html","result":{"data":{"markdownRemark":{"id":"81142752-4568-588b-a2ef-c462e5d6be16","excerpt":"Generators and Iteration for ES5/ES3 First some ES2016 terminology: Iterators ES2015 introduced Iterator, which is an object that exposes three methods, next…","html":"<h2 id=\"generators-and-iteration-for-es5es3\" style=\"position:relative;\"><a href=\"#generators-and-iteration-for-es5es3\" aria-label=\"generators and iteration for es5es3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generators and Iteration for ES5/ES3</h2>\n<p><em>First some ES2016 terminology:</em></p>\n<h5 id=\"iterators\" style=\"position:relative;\"><a href=\"#iterators\" aria-label=\"iterators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterators</h5>\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-iteration\">ES2015 introduced <code>Iterator</code></a>, which is an object that exposes three methods, <code>next</code>, <code>return</code>, and <code>throw</code>, as per the following interface:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Iterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">return</span><span style=\"color: #000000\">?(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">throw</span><span style=\"color: #000000\">?(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This kind of iterator is useful for iterating over synchronously available values, such as the elements of an Array or the keys of a Map.\nAn object that supports iteration is said to be “iterable” if it has a <code>Symbol.iterator</code> method that returns an <code>Iterator</code> object.</p>\n<p>The Iterator protocol also defines the target of some of the ES2015 features like <code>for..of</code> and spread operator and the array rest in destructuring assignmnets.</p>\n<h5 id=\"generators\" style=\"position:relative;\"><a href=\"#generators\" aria-label=\"generators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generators</h5>\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-generatorfunction-objects\">ES2015 also introduced “Generators”</a>, which are functions that can be used to yield partial computation results via the <code>Iterator</code> interface and the <code>yield</code> keyword.\nGenerators can also internally delegate calls to another iterable through <code>yield *</code>. For example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function*</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h5 id=\"new---downleveliteration\" style=\"position:relative;\"><a href=\"#new---downleveliteration\" aria-label=\"new   downleveliteration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>--downlevelIteration</code></h5>\n<p>Previously generators were only supported if the target is ES6/ES2015 or later.\nMoreover, constructs that operate on the Iterator protocol, e.g. <code>for..of</code> were only supported if they operate on arrays for targets below ES6/ES2015.</p>\n<p>TypeScript 2.3 adds full support for generators and the Iterator protocol for ES3 and ES5 targets with <a href=\"/tsconfig#downlevelIteration\"><code>downlevelIteration</code></a> flag.</p>\n<p>With <a href=\"/tsconfig#downlevelIteration\"><code>downlevelIteration</code></a>, the compiler uses new type check and emit behavior that attempts to call a <code>[Symbol.iterator]()</code> method on the iterated object if it is found, and creates a synthetic array iterator over the object if it is not.</p>\n<blockquote>\n<p>Please note that this requires a native <code>Symbol.iterator</code> or <code>Symbol.iterator</code> shim at runtime for any non-array values.</p>\n</blockquote>\n<p><code>for..of</code> statements, Array Destructuring, and Spread elements in Array, Call, and New expressions support <code>Symbol.iterator</code> in ES5/E3 if available when using <a href=\"/tsconfig#downlevelIteration\"><code>downlevelIteration</code></a>, but can be used on an Array even if it does not define <code>Symbol.iterator</code> at run time or design time.</p>\n<h2 id=\"async-iteration\" style=\"position:relative;\"><a href=\"#async-iteration\" aria-label=\"async iteration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async Iteration</h2>\n<p>TypeScript 2.3 adds support for the async iterators and generators as described by the current <a href=\"https://github.com/tc39/proposal-async-iteration\">TC39 proposal</a>.</p>\n<h5 id=\"async-iterators\" style=\"position:relative;\"><a href=\"#async-iterators\" aria-label=\"async iterators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async iterators</h5>\n<p>The Async Iteration introduces an <code>AsyncIterator</code>, which is similar to <code>Iterator</code>.\nThe difference lies in the fact that the <code>next</code>, <code>return</code>, and <code>throw</code> methods of an <code>AsyncIterator</code> return a <code>Promise</code> for the iteration result, rather than the result itself.\nThis allows the caller to enlist in an asynchronous notification for the time at which the <code>AsyncIterator</code> has advanced to the point of yielding a value.\nAn <code>AsyncIterator</code> has the following shape:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">AsyncIterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">return</span><span style=\"color: #000000\">?(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">throw</span><span style=\"color: #000000\">?(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>An object that supports async iteration is said to be “iterable” if it has a <code>Symbol.asyncIterator</code> method that returns an <code>AsyncIterator</code> object.</p>\n<h5 id=\"async-generators\" style=\"position:relative;\"><a href=\"#async-generators\" aria-label=\"async generators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async Generators</h5>\n<p>The <a href=\"https://github.com/tc39/proposal-async-iteration\">Async Iteration proposal</a> introduces “Async Generators”, which are async functions that also can be used to yield partial computation results.\nAsync Generators can also delegate calls via <code>yield*</code> to either an iterable or async iterable:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function*</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sleep</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function*</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sleep</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  })();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>As with Generators, Async Generators can only be function declarations, function expressions, or methods of classes or object literals.\nArrow functions cannot be Async Generators. Async Generators require a valid, global <code>Promise</code> implementation (either native or an ES2015-compatible polyfill), in addition to a valid <code>Symbol.asyncIterator</code> reference (either a native symbol or a shim).</p>\n<h5 id=\"the-for-await-of-statement\" style=\"position:relative;\"><a href=\"#the-for-await-of-statement\" aria-label=\"the for await of statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>for-await-of</code> Statement</h5>\n<p>Finally, ES2015 introduced the <code>for..of</code> statement as a means of iterating over an iterable.\nSimilarly, the Async Iteration proposal introduces the <code>for..await..of</code> statement to iterate over an async iterable:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The <code>for..await..of</code> statement is only legal within an Async Function or Async Generator.</p>\n<h5 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h5>\n<ul>\n<li>Keep in mind that our support for async iterators relies on support for <code>Symbol.asyncIterator</code> to exist at runtime. You may need to polyfill <code>Symbol.asyncIterator</code>, which for simple purposes can be as simple as: <code>(Symbol as any).asyncIterator = Symbol.asyncIterator || Symbol.for(\"Symbol.asyncIterator\");</code></li>\n<li>You also need to include <code>esnext</code> in your <a href=\"/tsconfig#lib\"><code>lib</code></a> option, to get the <code>AsyncIterator</code> declaration if you do not already have it.</li>\n<li>Finally, if your target is ES5 or ES3, you’ll also need to set the <code>--downlevelIterators</code> flag.</li>\n</ul>\n<h2 id=\"generic-parameter-defaults\" style=\"position:relative;\"><a href=\"#generic-parameter-defaults\" aria-label=\"generic parameter defaults permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic parameter defaults</h2>\n<p>TypeScript 2.3 adds support for declaring defaults for generic type parameters.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Consider a function that creates a new <code>HTMLElement</code>, calling it with no arguments generates a <code>Div</code>; you can optionally pass a list of children as well. Previously you would have to define it as:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Container</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">element</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Container</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">element</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">[]</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Container</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">[]&gt;;</span></div></code></div></pre>\n<p>With generic parameter defaults we can reduce it to:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">create</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[]&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">element</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">U</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Container</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>A generic parameter default follows the following rules:</p>\n<ul>\n<li>A type parameter is deemed optional if it has a default.</li>\n<li>Required type parameters must not follow optional type parameters.</li>\n<li>Default types for a type parameter must satisfy the constraint for the type parameter, if it exists.</li>\n<li>When specifying type arguments, you are only required to specify type arguments for the required type parameters. Unspecified type parameters will resolve to their default types.</li>\n<li>If a default type is specified and inference cannot choose a candidate, the default type is inferred.</li>\n<li>A class or interface declaration that merges with an existing class or interface declaration may introduce a default for an existing type parameter.</li>\n<li>A class or interface declaration that merges with an existing class or interface declaration may introduce a new type parameter as long as it specifies a default.</li>\n</ul>\n<h2 id=\"new---strict-master-option\" style=\"position:relative;\"><a href=\"#new---strict-master-option\" aria-label=\"new   strict master option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>--strict</code> master option</h2>\n<p>New checks added to TypeScript are often off by default to avoid breaking existing projects.\nWhile avoiding breakage is a good thing, this strategy has the drawback of making it increasingly complex to choose the highest level of type safety, and doing so requires explicit opt-in action on every TypeScript release.\nWith the <a href=\"/tsconfig#strict\"><code>strict</code></a> option it becomes possible to choose maximum type safety with the understanding that additional errors might be reported by newer versions of the compiler as improved type checking features are added.</p>\n<p>The new <a href=\"/tsconfig#strict\"><code>strict</code></a> compiler option represents the recommended setting of a number of type checking options. Specifically, specifying <a href=\"/tsconfig#strict\"><code>strict</code></a> corresponds to specifying all of the following options (and may in the future include more options):</p>\n<ul>\n<li><a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a></li>\n<li><a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a></li>\n<li><a href=\"/tsconfig#noImplicitThis\"><code>noImplicitThis</code></a></li>\n<li><a href=\"/tsconfig#alwaysStrict\"><code>alwaysStrict</code></a></li>\n</ul>\n<p>In exact terms, the <a href=\"/tsconfig#strict\"><code>strict</code></a> option sets the <em>default</em> value for the compiler options listed above.\nThis means it is still possible to individually control the options.\nFor example,</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">--strict --noImplicitThis </span><span style=\"color: #795E26\">false</span></div></code></div></pre>\n<p>has the effect of turning on all strict options <em>except</em> the <a href=\"/tsconfig#noImplicitThis\"><code>noImplicitThis</code></a> option. Using this scheme it is possible to express configurations consisting of <em>all</em> strict options except some explicitly listed options.\nIn other words, it is now possible to default to the highest level of type safety but opt out of certain checks.</p>\n<p>Starting with TypeScript 2.3, the default <code>tsconfig.json</code> generated by <code>tsc --init</code> includes a <code>\"strict\": true</code> setting in the <code>\"compilerOptions\"</code> section.\nThus, new projects started with <code>tsc --init</code> will by default have the highest level of type safety enabled.</p>\n<h2 id=\"enhanced---init-output\" style=\"position:relative;\"><a href=\"#enhanced---init-output\" aria-label=\"enhanced   init output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enhanced <code>--init</code> output</h2>\n<p>Along with setting <a href=\"/tsconfig#strict\"><code>strict</code></a> on by default, <code>tsc --init</code> has an enhanced output. Default <code>tsconfig.json</code> files generated by <code>tsc --init</code> now include a set of the common compiler options along with their descriptions commented out.\nJust un-comment the configuration you like to set to get the desired behavior; we hope the new output simplifies the setting up new projects and keeps configuration files readable as projects grow.</p>\n<h2 id=\"errors-in-js-files-with---checkjs\" style=\"position:relative;\"><a href=\"#errors-in-js-files-with---checkjs\" aria-label=\"errors in js files with   checkjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Errors in .js files with <code>--checkJs</code></h2>\n<p>By default the TypeScript compiler does not report any errors in .js files including using <a href=\"/tsconfig#allowJs\"><code>allowJs</code></a>.\nWith TypeScript 2.3 type-checking errors can also be reported in <code>.js</code> files with <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a>.</p>\n<p>You can skip checking some files by adding <code>// @ts-nocheck</code> comment to them; conversely you can choose to check only a few <code>.js</code> files by adding <code>// @ts-check</code> comment to them without setting <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a>.\nYou can also ignore errors on specific lines by adding <code>// @ts-ignore</code> on the preceding line.</p>\n<p><code>.js</code> files are still checked to ensure that they only include standard ECMAScript features; type annotations are only allowed in <code>.ts</code> files and are flagged as errors in <code>.js</code> files.\nJSDoc comments can be used to add some type information to your JavaScript code, see <a href=\"https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript\">JSDoc Support documentation</a> for more details about the supported JSDoc constructs.</p>\n<p>See <a href=\"https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files\">Type checking JavaScript Files documentation</a> for more details.</p>","headings":[{"value":"Generators and Iteration for ES5/ES3","depth":2},{"value":"Iterators","depth":5},{"value":"Generators","depth":5},{"value":"New --downlevelIteration","depth":5},{"value":"Async Iteration","depth":2},{"value":"Async iterators","depth":5},{"value":"Async Generators","depth":5},{"value":"The for-await-of Statement","depth":5},{"value":"Caveats","depth":5},{"value":"Generic parameter defaults","depth":2},{"value":"Example","depth":5},{"value":"New --strict master option","depth":2},{"value":"Enhanced --init output","depth":2},{"value":"Errors in .js files with --checkJs","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-3.html","title":"TypeScript 2.3","disable_toc":null,"handbook":null,"oneline":"TypeScript 2.3 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-2.3","slug":"/docs/handbook/release-notes/typescript-2-3.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 2.3.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.854Z"}},"staticQueryHashes":[]}