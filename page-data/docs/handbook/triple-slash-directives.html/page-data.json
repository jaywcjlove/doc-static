{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/triple-slash-directives.html","result":{"data":{"markdownRemark":{"id":"526c2c17-a0da-5675-b6cc-d08b37fd85a6","excerpt":"Triple-slash directives are single-line comments containing a single XML tag.\nThe contents of the comment are used as compiler directives. Triple-slash…","html":"<p>Triple-slash directives are single-line comments containing a single XML tag.\nThe contents of the comment are used as compiler directives.</p>\n<p>Triple-slash directives are <strong>only</strong> valid at the top of their containing file.\nA triple-slash directive can only be preceded by single or multi-line comments, including other triple-slash directives.\nIf they are encountered following a statement or a declaration they are treated as regular single-line comments, and hold no special meaning.</p>\n<h2 id=\"-reference-path-\" style=\"position:relative;\"><a href=\"#-reference-path-\" aria-label=\" reference path  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference path=\"...\" /></code></h2>\n<p>The <code>/// &#x3C;reference path=\"...\" /></code> directive is the most common of this group.\nIt serves as a declaration of <em>dependency</em> between files.</p>\n<p>Triple-slash references instruct the compiler to include additional files in the compilation process.</p>\n<p>They also serve as a method to order the output when using <code>--out</code> or <code>--outFile</code>.\nFiles are emitted to the output file location in the same order as the input after preprocessing pass.</p>\n<h3 id=\"preprocessing-input-files\" style=\"position:relative;\"><a href=\"#preprocessing-input-files\" aria-label=\"preprocessing input files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preprocessing input files</h3>\n<p>The compiler performs a preprocessing pass on input files to resolve all triple-slash reference directives.\nDuring this process, additional files are added to the compilation.</p>\n<p>The process starts with a set of <em>root files</em>;\nthese are the file names specified on the command-line or in the <code>\"files\"</code> list in the <code>tsconfig.json</code> file.\nThese root files are preprocessed in the same order they are specified.\nBefore a file is added to the list, all triple-slash references in it are processed, and their targets included.\nTriple-slash references are resolved in a depth first manner, in the order they have been seen in the file.</p>\n<p>A triple-slash reference path is resolved relative to the containing file, if unrooted.</p>\n<h3 id=\"errors\" style=\"position:relative;\"><a href=\"#errors\" aria-label=\"errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Errors</h3>\n<p>It is an error to reference a file that does not exist.\nIt is an error for a file to have a triple-slash reference to itself.</p>\n<h3 id=\"using---noresolve\" style=\"position:relative;\"><a href=\"#using---noresolve\" aria-label=\"using   noresolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using <code>--noResolve</code></h3>\n<p>If the compiler flag <code>--noResolve</code> is specified, triple-slash references are ignored; they neither result in adding new files, nor change the order of the files provided.</p>\n<h2 id=\"-reference-types-\" style=\"position:relative;\"><a href=\"#-reference-types-\" aria-label=\" reference types  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference types=\"...\" /></code></h2>\n<p>Similar to a <code>/// &#x3C;reference path=\"...\" /></code> directive, which serves as a declaration of <em>dependency</em>, a <code>/// &#x3C;reference types=\"...\" /></code> directive declares a dependency on a package.</p>\n<p>The process of resolving these package names is similar to the process of resolving module names in an <code>import</code> statement.\nAn easy way to think of triple-slash-reference-types directives are as an <code>import</code> for declaration packages.</p>\n<p>For example, including <code>/// &#x3C;reference types=\"node\" /></code> in a declaration file declares that this file uses names declared in <code>@types/node/index.d.ts</code>;\nand thus, this package needs to be included in the compilation along with the declaration file.</p>\n<p>Use these directives only when you’re authoring a <code>d.ts</code> file by hand.</p>\n<p>For declaration files generated during compilation, the compiler will automatically add <code>/// &#x3C;reference types=\"...\" /></code> for you;\nA <code>/// &#x3C;reference types=\"...\" /></code> in a generated declaration file is added <em>if and only if</em> the resulting file uses any declarations from the referenced package.</p>\n<p>For declaring a dependency on an <code>@types</code> package in a <code>.ts</code> file, use <code>--types</code> on the command line or in your <code>tsconfig.json</code> instead.\nSee <a href=\"/docs/handbook/tsconfig-json.html#types-typeroots-and-types\">using <code>@types</code>, <code>typeRoots</code> and <code>types</code> in <code>tsconfig.json</code> files</a> for more details.</p>\n<h2 id=\"-reference-lib-\" style=\"position:relative;\"><a href=\"#-reference-lib-\" aria-label=\" reference lib  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference lib=\"...\" /></code></h2>\n<p>This directive allows a file to explicitly include an existing built-in <em>lib</em> file.</p>\n<p>Built-in <em>lib</em> files are referenced in the same fashion as the <code>\"lib\"</code> compiler option in <em>tsconfig.json</em> (e.g. use <code>lib=\"es2015\"</code> and not <code>lib=\"lib.es2015.d.ts\"</code>, etc.).</p>\n<p>For declaration file authors who rely on built-in types, e.g. DOM APIs or built-in JS run-time constructors like <code>Symbol</code> or <code>Iterable</code>, triple-slash-reference lib directives are recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.</p>\n<p>For example, adding <code>/// &#x3C;reference lib=\"es2017.string\" /></code> to one of the files in a compilation is equivalent to compiling with <code>--lib es2017.string</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/// &lt;reference lib=\"es2017.string\" /&gt;</span>\n\n<span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">.padStart(</span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\">);</span></code></div></pre>\n<h2 id=\"-reference-no-default-libtrue\" style=\"position:relative;\"><a href=\"#-reference-no-default-libtrue\" aria-label=\" reference no default libtrue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference no-default-lib=\"true\"/></code></h2>\n<p>This directive marks a file as a <em>default library</em>.\nYou will see this comment at the top of <code>lib.d.ts</code> and its different variants.</p>\n<p>This directive instructs the compiler to <em>not</em> include the default library (i.e. <code>lib.d.ts</code>) in the compilation.\nThe impact here is similar to passing <code>--noLib</code> on the command line.</p>\n<p>Also note that when passing <code>--skipDefaultLibCheck</code>, the compiler will only skip checking files with <code>/// &#x3C;reference no-default-lib=\"true\"/></code>.</p>\n<h2 id=\"-amd-module-\" style=\"position:relative;\"><a href=\"#-amd-module-\" aria-label=\" amd module  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;amd-module /></code></h2>\n<p>By default AMD modules are generated anonymous.\nThis can lead to problems when other tools are used to process the resulting modules, such as bundlers (e.g. <code>r.js</code>).</p>\n<p>The <code>amd-module</code> directive allows passing an optional module name to the compiler:</p>\n<h5 id=\"amdmodulets\" style=\"position:relative;\"><a href=\"#amdmodulets\" aria-label=\"amdmodulets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>amdModule.ts</h5>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">///</span><span style=\"color: #800000\">&lt;amd-module</span><span style=\"color: #008000\"> </span><span style=\"color: #DC0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"NamedModule\"</span><span style=\"color: #800000\">/&gt;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C {}</span></code></div></pre>\n<p>Will result in assigning the name <code>NamedModule</code> to the module as part of calling the AMD <code>define</code>:</p>\n<h5 id=\"amdmodulejs\" style=\"position:relative;\"><a href=\"#amdmodulejs\" aria-label=\"amdmodulejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>amdModule.js</h5>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #000000\">define(</span><span style=\"color: #A31515\">\"NamedModule\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">C</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> C() {}</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> C;</span>\n<span style=\"color: #000000\">  })();</span>\n<span style=\"color: #000000\">  exports.C = C;</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<h2 id=\"-amd-dependency-\" style=\"position:relative;\"><a href=\"#-amd-dependency-\" aria-label=\" amd dependency  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;amd-dependency /></code></h2>\n<blockquote>\n<p><strong>Note</strong>: this directive has been deprecated. Use <code>import \"moduleName\";</code> statements instead.</p>\n</blockquote>\n<p><code>/// &#x3C;amd-dependency path=\"x\" /></code> informs the compiler about a non-TS module dependency that needs to be injected in the resulting module’s require call.</p>\n<p>The <code>amd-dependency</code> directive can also have an optional <code>name</code> property; this allows passing an optional name for an amd-dependency:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;amd-dependency</span><span style=\"color: #008000\"> </span><span style=\"color: #DC0000\">path</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"legacy/moduleA\"</span><span style=\"color: #008000\"> </span><span style=\"color: #DC0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"moduleA\"</span><span style=\"color: #800000\">/&gt;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">moduleA</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> MyType</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\">moduleA</span><span style=\"color: #000000\">.callStuff();</span></code></div></pre>\n<p>Generated JS code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #000000\">define([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"legacy/moduleA\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">moduleA</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">moduleA</span><span style=\"color: #000000\">.callStuff();</span>\n<span style=\"color: #000000\">});</span></code></div></pre>","headings":[{"value":"/// <reference path=\"...\" />","depth":2},{"value":"Preprocessing input files","depth":3},{"value":"Errors","depth":3},{"value":"Using --noResolve","depth":3},{"value":"/// <reference types=\"...\" />","depth":2},{"value":"/// <reference lib=\"...\" />","depth":2},{"value":"/// <reference no-default-lib=\"true\"/>","depth":2},{"value":"/// <amd-module />","depth":2},{"value":"amdModule.ts","depth":5},{"value":"amdModule.js","depth":5},{"value":"/// <amd-dependency />","depth":2}],"frontmatter":{"permalink":"/docs/handbook/triple-slash-directives.html","title":"Triple-Slash Directives","disable_toc":null,"handbook":null,"oneline":"How to use triple slash directives in TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2triple-slash-directives","slug":"/docs/handbook/triple-slash-directives.html","repoPath":"/packages/documentation/copy/en/reference/Triple-Slash Directives.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.619Z"}},"staticQueryHashes":[]}