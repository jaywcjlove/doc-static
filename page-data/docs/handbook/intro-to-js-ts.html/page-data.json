{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/intro-to-js-ts.html","result":{"data":{"markdownRemark":{"id":"f0e0b2db-9995-5594-a604-80fab8e1280e","excerpt":"The type system in TypeScript has different levels of strictness when working with a codebase: A type-system based only on inference with JavaScript code…","html":"<p>The type system in TypeScript has different levels of strictness when working with a codebase:</p>\n<ul>\n<li>A type-system based only on inference with JavaScript code</li>\n<li>Incremental typing in JavaScript <a href=\"/docs/handbook/jsdoc-supported-types.html\">via JSDoc</a></li>\n<li>Using <code>// @ts-check</code> in a JavaScript file</li>\n<li>TypeScript code</li>\n<li>TypeScript with <a href=\"/tsconfig#strict\"><code>strict</code></a> enabled</li>\n</ul>\n<p>Each step represents a move towards a safer type-system, but not every project needs that level of verification.</p>\n<h2 id=\"typescript-with-javascript\" style=\"position:relative;\"><a href=\"#typescript-with-javascript\" aria-label=\"typescript with javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript with JavaScript</h2>\n<p>This is when you use an editor which uses TypeScript to provide tooling like auto-complete, jump to symbol and refactoring tools like rename.\nThe <a href=\"/\">homepage</a> has a list of editors which have TypeScript plugins.</p>\n<h2 id=\"providing-type-hints-in-js-via-jsdoc\" style=\"position:relative;\"><a href=\"#providing-type-hints-in-js-via-jsdoc\" aria-label=\"providing type hints in js via jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Providing Type Hints in JS via JSDoc</h2>\n<p>In a <code>.js</code> file, types can often be inferred. When types can’t be inferred, they can be specified using JSDoc syntax.</p>\n<p>JSDoc annotations come before a declaration will be used to set the type of that declaration. For example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> {number} */</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK?!</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeA7ArgWwEaIE4C+4IwAUAG4CG+4AHgNxll3gC84ADA+MMOAHkA0i3bgAZlQA2AZ0Q8+goQH4AhEA'>Try</a></div></pre>\n<p>You can find the full list of supported JSDoc patterns <a href=\"/docs/handbook/jsdoc-supported-types.html\">in JSDoc Supported Types</a>.</p>\n<h2 id=\"ts-check\" style=\"position:relative;\"><a href=\"#ts-check\" aria-label=\"ts check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@ts-check</code></h2>\n<p>The last line of the previous code sample would raise an error in TypeScript, but it doesn’t by default in a JS project.\nTo enable errors in your JavaScript files add: <code>// @ts-check</code> to the first line in your <code>.js</code> files to have TypeScript raise it as an error.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @ts-check</span>\n<span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> {number} */</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var x: number'>x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Not OK</span>\n<span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcGcFoGMAWBTeBrAUCCyBOuB7XaALlACYBmc8rAKjokgE8AHZUAbwDsBXAWwBGeAL6g6wDADcAhrlAAPANwYMC0AF5QABiWhsAeQDSazaABmMgDbRke7ADkCkUMaA'>Try</a></div></pre>\n<p>If you have a lot of JavaScript files you want to add errors to then you can switch to using a <a href=\"/docs/handbook/tsconfig-json.html\"><code>jsconfig.json</code></a>.\nYou can skip checking some files by adding a <code>// @ts-nocheck</code> comment to files.</p>\n<p>TypeScript may offer you errors which you disagree with, in those cases you can ignore errors on specific lines by adding <code>// @ts-ignore</code> or <code>// @ts-expect-error</code> on the preceding line.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @ts-check</span>\n<span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> {number} */</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #008000\">// @ts-expect-error</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Not OK</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcGcFoGMAWBTeBrAUMAVNikBPAB2VAG8A7AVwFsAjZAJwF9RtgMA3AQ0dAA8A3Bgz9QAXlAAGQaBCgA8gGksYKHGT8S8SLCaMA9o1ETQAM24AbaMlnyAcgciKlQA'>Try</a></div></pre>\n<p>To learn more about how JavaScript is interpreted by TypeScript read <a href=\"/docs/handbook/type-checking-javascript-files.html\">How TS Type Checks JS</a></p>","headings":[{"value":"TypeScript with JavaScript","depth":2},{"value":"Providing Type Hints in JS via JSDoc","depth":2},{"value":"@ts-check","depth":2}],"frontmatter":{"permalink":"/docs/handbook/intro-to-js-ts.html","title":"JS Projects Utilizing TypeScript","disable_toc":null,"handbook":null,"oneline":"How to add type checking to JavaScript files using TypeScript","beta":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"Type Checking JavaScript Files","oneline":"How to add type checking to JavaScript files using TypeScript","permalink":"/docs/handbook/type-checking-javascript-files.html"}}}},"pageContext":{"id":"6js-projects-utilizing-typescript","slug":"/docs/handbook/intro-to-js-ts.html","repoPath":"/packages/documentation/copy/en/javascript/Intro to JS with TS.md","nextID":"4ec79134-beb5-5bdc-9b1f-1f77fbe63f8d","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}