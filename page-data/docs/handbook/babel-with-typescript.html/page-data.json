{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/babel-with-typescript.html","result":{"data":{"markdownRemark":{"id":"e4e0f9a9-309e-5fff-b67c-8239f6d8b591","excerpt":"Babel vs tsc for TypeScript When making a modern JavaScript project, you might ask yourself what is the right way to convert files from TypeScript to JavaScript…","html":"<h2 id=\"babel-vs-tsc-for-typescript\" style=\"position:relative;\"><a href=\"#babel-vs-tsc-for-typescript\" aria-label=\"babel vs tsc for typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel vs <code>tsc</code> for TypeScript</h2>\n<p>When making a modern JavaScript project, you might ask yourself what is the right way to convert files from TypeScript to JavaScript?</p>\n<p>A lot of the time the answer is <em>“it depends”</em>, or <em>“someone may have decided for you”</em> depending on the project. If you are building your project with an existing framework like <a href=\"https://tsdx.io\">tsdx</a>, <a href=\"https://angular.io/\">Angular</a>, <a href=\"https://nestjs.com/\">NestJS</a> or any framework mentioned in the <a href=\"/docs/home\">Getting Started</a> then this decision is handled for you.</p>\n<p>However, a useful heuristic could be:</p>\n<ul>\n<li>Is your build output mostly the same as your source input files? Use <code>tsc</code></li>\n<li>Do you need a build pipeline with multiple potential outputs? Use <code>babel</code> for transpiling and <code>tsc</code> for type checking</li>\n</ul>\n<h2 id=\"babel-for-transpiling-tsc-for-types\" style=\"position:relative;\"><a href=\"#babel-for-transpiling-tsc-for-types\" aria-label=\"babel for transpiling tsc for types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel for transpiling, <code>tsc</code> for types</h2>\n<p>This is a common pattern for projects with existing build infrastructure which may have been ported from a JavaScript codebase to TypeScript.</p>\n<p>This technique is a hybrid approach, using Babel’s <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\">preset-typescript</a> to generate your JS files, and then using TypeScript to do type checking and <code>.d.ts</code> file generation.</p>\n<p>By using babel’s support for TypeScript, you get the ability to work with existing build pipelines and are more likely to have a faster JS emit time because Babel does not type check your code.</p>\n<h4 id=\"type-checking-and-dts-file-generation\" style=\"position:relative;\"><a href=\"#type-checking-and-dts-file-generation\" aria-label=\"type checking and dts file generation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Checking and d.ts file generation</h4>\n<p>The downside to using babel is that you don’t get type checking during the transition from TS to JS. This can mean that type errors which you miss in your editor could sneak through into production code.</p>\n<p>In addition to that, Babel cannot create <code>.d.ts</code> files for your TypeScript which can make it harder to work with your project if it is a library.</p>\n<p>To fix these issues, you would probably want to set up a command to type check your project using TSC. This likely means duplicating some of your babel config into a corresponding <a href=\"/tsconfig\"><code>tsconfig.json</code></a> and ensuring these flags are enabled:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Ensure that .d.ts files are created by tsc, but not .js files</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#emitDeclarationOnly'><data-lsp lsp=\"Only output d.ts files and not JavaScript files.\">emitDeclarationOnly</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Ensure that Babel can safely transpile files in the TypeScript project</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#isolatedModules'><data-lsp lsp=\"Ensure that each file can be safely transpiled without relying on other imports.\">isolatedModules</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>For more information on these flags:</p>\n<ul>\n<li><a href=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></a></li>\n<li><a href=\"/tsconfig#declaration\"><code>declaration</code></a>, <a href=\"/tsconfig#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></li>\n</ul>","headings":[{"value":"Babel vs tsc for TypeScript","depth":2},{"value":"Babel for transpiling, tsc for types","depth":2},{"value":"Type Checking and d.ts file generation","depth":4}],"frontmatter":{"permalink":"/docs/handbook/babel-with-typescript.html","title":"Using Babel with TypeScript","disable_toc":null,"handbook":null,"oneline":"How to create a hybrid Babel + TypeScript project","beta":null}},"prev":null,"next":null},"pageContext":{"id":"3using-babel-with-typescript","slug":"/docs/handbook/babel-with-typescript.html","repoPath":"/packages/documentation/copy/en/tutorials/Babel with TypeScript.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.623Z"}},"staticQueryHashes":[]}