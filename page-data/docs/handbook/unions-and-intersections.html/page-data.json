{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/unions-and-intersections.html","result":{"data":{"markdownRemark":{"id":"1929fd75-7fab-57d9-8727-b4f838f99509","excerpt":"So far, the handbook has covered types which are atomic objects.\nHowever, as you model more types you find yourself looking for tools which let you compose or…","html":"<p>So far, the handbook has covered types which are atomic objects.\nHowever, as you model more types you find yourself looking for tools which let you compose or combine existing types instead of creating them from scratch.</p>\n<p>Intersection and Union types are one of the ways in which you can compose types.</p>\n<h2 id=\"union-types\" style=\"position:relative;\"><a href=\"#union-types\" aria-label=\"union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Types</h2>\n<p>Occasionally, you’ll run into a library that expects a parameter to be either a <code>number</code> or a <code>string</code>.\nFor instance, take the following function:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Takes a string and adds \"padding\" to the left.</span>\n<span style=\"color: #008000\"> * If &apos;padding&apos; is a string, then &apos;padding&apos; is appended to the left side.</span>\n<span style=\"color: #008000\"> * If &apos;padding&apos; is a number, then that number of spaces is added to the left side.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(value: string, padding: any): string'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: string'>value</data-lsp></span><span style=\"color: #000000\">: string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: any'>padding</data-lsp></span><span style=\"color: #000000\">: any) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: any'>padding</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Array: ArrayConstructor&amp;#13;(arrayLength?: number | undefined) => any[] (+2 overloads)'>Array</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: number'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">).<data-lsp lsp='(method) Array&amp;lt;any>.join(separator?: string | undefined): string'>join</data-lsp>(</span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\">) + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: string'>value</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: any'>padding</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: string'>value</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error'>Error</data-lsp>(</span><span style=\"color: #A31515\">`Expected string or number, got &apos;</span><span style=\"color: #0000FF\">${typeof</span><span style=\"color: #A31515\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: any'>padding</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">&apos;.`</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='function padLeft(value: string, padding: any): string'>padLeft</data-lsp>(</span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// returns \"    Hello world\"</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgVBDA1gUwM6XpVAXATgSwDsBzDQgEw3PPQCIAHeao42ybAe3YAtlIAbZADNsAOigwAkkMgByRsxKzI+dJhwESAGh7JCcheRbLVGevT3lklTroHDsWfFfHRI0g0yNKVayIQBXAFsAI2RcHWxefSj4R0DQ8MgOGVRGAGM0XyorGy4ovkERJxcJYHAhAMJ07HwOfQUAGQcACgA3eH4A5AAuLDwWHUMWPvhCAE8ASkgAbygVGRbscYsUyGGSSABeHchaBLDcWmm5yDPIXGRsANx9AEFcXHhxlo3SAGpIAEZJ0QArDhEFpsY6QT4dLrIADc8wAvvN8ItlqsZG9trtaBoWKDTudLtdbusvCwwZAId0YWd4WcorgOAB3fzIRkAUUeHFwLQABiyAB4WGrWfqaUgc-zBQ46YgcRyyAAkM2RyDWb1hslEXMmMPh4CarVoAAlkPx+Fx6Rz+ORaDoACxayDAYAXK43Qh0c6QI0ms0Wq1AA'>Try</a></div></pre>\n<p>The problem with <code>padLeft</code> in the above example is that its <code>padding</code> parameter is typed as <code>any</code>.\nThat means that we can call it with an argument that’s neither a <code>number</code> nor a <code>string</code>, but TypeScript will be okay with it.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// passes at compile time, fails at runtime.</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let indentedString: string'>indentedString</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function padLeft(value: string, padding: any): string'>padLeft</data-lsp>(</span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwAcpgAZERDACgDcoJkQAueAZwxi1QHMAaQ44Jy7MoqAJ4BKZmw7cA3ACgA9EvgBaDWGQYNa5aqIsWIFvCgZ4YHAFsCWCAmzWQfRFHunz8GGicgAdAoOFpygqBggwADK7ELwALz8pORUAEQAEiAQEDjwAO44MBDAqXzsDBJyQA'>Try</a></div></pre>\n<p>In traditional object-oriented code, we might abstract over the two types by creating a hierarchy of types.\nWhile this is much more explicit, it’s also a little bit overkill.\nOne of the nice things about the original version of <code>padLeft</code> was that we were able to just pass in primitives.\nThat meant that usage was simple and concise.\nThis new approach also wouldn’t help if we were just trying to use a function that already exists elsewhere.</p>\n<p>Instead of <code>any</code>, we can use a <em>union type</em> for the <code>padding</code> parameter:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Takes a string and adds \"padding\" to the left.</span>\n<span style=\"color: #008000\"> * If &apos;padding&apos; is a string, then &apos;padding&apos; is appended to the left side.</span>\n<span style=\"color: #008000\"> * If &apos;padding&apos; is a number, then that number of spaces is added to the left side.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(value: string, padding: string | number): void'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: string'>value</data-lsp></span><span style=\"color: #000000\">: string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\">: string | number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let indentedString: void'>indentedString</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function padLeft(value: string, padding: string | number): void'>padLeft</data-lsp>(</span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\"><data-err>true</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'boolean' is not assignable to parameter of type 'string | number'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'boolean' is not assignable to parameter of type 'string | number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUMAFSF6iGgAqAhgNaSKhWiIAu0AlgHYDmjnAJo378GAIgAOVYV26jQLOPIAWkUABtIAMxYA6UuQCSm0AHJJ0nidDsGTVhx4AaZZE6nz-GVZuNx41-yQggou6loszOyBemSgRu5SnpbWtqCcAK4AtgBGMM4sKm4FVBEZOTCgcMaIkgDG9ClCgcGKBaoa2pHR+sB4mumctSzscG7mADLhABQAblRq6ZCo9jLOHjLLbDKgAD5pWbnQAJSgAN6koCCgOjd4AL54eBoRXIGcLEEAyls8oAC8oAm01EAAlIGo1IoAO4INT8UT5aCLI4AbiAA'>Try</a></div></pre>\n<p>A union type describes a value that can be one of several types.\nWe use the vertical bar (<code>|</code>) to separate each type, so <code>number | string | boolean</code> is the type of a value that can be a <code>number</code>, a <code>string</code>, or a <code>boolean</code>.</p>\n<h2 id=\"unions-with-common-fields\" style=\"position:relative;\"><a href=\"#unions-with-common-fields\" aria-label=\"unions with common fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unions with Common Fields</h2>\n<p>If we have a value that is a union type, we can only access members that are common to all types in the union.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Bird'>Bird</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Bird.fly(): void'>fly</data-lsp>(): void;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Bird.layEggs(): void'>layEggs</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Fish'>Fish</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Fish.swim(): void'>swim</data-lsp>(): void;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Fish.layEggs(): void'>layEggs</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getSmallPet(): Fish | Bird'>getSmallPet</data-lsp>(): <data-lsp lsp='interface Fish'>Fish</data-lsp> | <data-lsp lsp='interface Bird'>Bird</data-lsp>;</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let pet: Bird | Fish'>pet</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function getSmallPet(): Fish | Bird'>getSmallPet</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let pet: Bird | Fish'>pet</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) layEggs(): void'>layEggs</data-lsp>();</span>\n\n<span style=\"color: #008000\">// Only available in one of the two possible types</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let pet: Bird | Fish'>pet</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='any'>swim</data-lsp>();</data-err></span>\n<span class=\"error\"><span>Property 'swim' does not exist on type 'Bird | Fish'.\n  Property 'swim' does not exist on type 'Bird'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'swim' does not exist on type 'Bird | Fish'.\n  Property 'swim' does not exist on type 'Bird'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQuBLAOwBcYAzAQwGNJQAhA6AE1AG9dRRyAbATwAUASlQA3OAWYBuTqB6U+AUQDmyxMLETpuAL75iZaFVqgAYgUQALdrMQB3AgFsNocZJld5S1epGutMnq4zJDU8tB05ACuRNQkBHBEoMqQJADKjpQ8PAAKqS7mVqAAPgxM2rg8qaAADtUAvMmpGVm5+UIydSQAdF4qasIyuCCgAPJE-KCUopQE8gBGVaDEoIl0cOSgJJZ0JHZwtXCIiASLu3x1iLhd3fZOg0A'>Try</a></div></pre>\n<p>Union types can be a bit tricky here, but it just takes a bit of intuition to get used to.\nIf a value has the type <code>A | B</code>, we only know for <em>certain</em> that it has members that both <code>A</code> <em>and</em> <code>B</code> have.\nIn this example, <code>Bird</code> has a member named <code>fly</code>.\nWe can’t be sure whether a variable typed as <code>Bird | Fish</code> has a <code>fly</code> method.\nIf the variable is really a <code>Fish</code> at runtime, then calling <code>pet.fly()</code> will fail.</p>\n<h2 id=\"discriminating-unions\" style=\"position:relative;\"><a href=\"#discriminating-unions\" aria-label=\"discriminating unions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discriminating Unions</h2>\n<p>A common technique for working with unions is to have a single field which uses literal types which you can use to let TypeScript narrow down the possible current type. For example, we’re going to create a union of three types which have a single shared field.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> NetworkLoadingState = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">state</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"loading\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> NetworkFailedState = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">state</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"failed\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">code</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> NetworkSuccessState = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">state</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">response</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">title</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">duration</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">summary</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// Create a type which represents only one of the above types</span>\n<span style=\"color: #008000\">// but you aren't sure which it is yet.</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> NetworkState =</span>\n<span style=\"color: #000000\">  | NetworkLoadingState</span>\n<span style=\"color: #000000\">  | NetworkFailedState</span>\n<span style=\"color: #000000\">  | NetworkSuccessState;</span></code></div></pre>\n<style type=\"text/css\">\n.markdown table.tg  {\n  border-collapse:collapse;\n  width: 100%;\n  text-align: center;\n  display: table;\n}\n\n.tg th {\n  border-bottom: 1px solid black;\n  padding: 8px;\n  padding-bottom: 0;\n}\n\n.tg tbody, .tg tr {\n  width: 100%;\n}\n\n.tg .highlight {\n  background-color: #F3F3F3;\n}\n\n@media (prefers-color-scheme: dark) {\n  .tg .highlight {\n    background-color: #424242;\n  }\n}\n\n</style>\n<p>All of the above types have a field named <code>state</code>, and then they also have their own fields:</p>\n<table class='tg' width=\"100%\">\n  <tbody>\n    <tr>\n      <th><code>NetworkLoadingState</code></th>\n      <th><code>NetworkFailedState</code></th>\n      <th><code>NetworkSuccessState</code></th>\n    </tr>\n    <tr class='highlight'>\n      <td>state</td>\n      <td>state</td>\n      <td>state</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>code</td>\n      <td>response</td>\n    </tr>\n    </tbody>\n</table>\n<p>Given the <code>state</code> field is common in every type inside <code>NetworkState</code> - it is safe for your code to access without an existence check.</p>\n<p>With <code>state</code> as a literal type, you can compare the value of <code>state</code> to the equivalent string and TypeScript will know which type is currently being used.</p>\n<table class='tg' width=\"100%\">\n  <tbody>\n    <tr>\n      <th><code>NetworkLoadingState</code></th>\n      <th><code>NetworkFailedState</code></th>\n      <th><code>NetworkSuccessState</code></th>\n    </tr>\n    <tr>\n      <td><code>\"loading\"</code></td>\n      <td><code>\"failed\"</code></td>\n      <td><code>\"success\"</code></td>\n    </tr>\n    </tbody>\n</table>\n<p>In this case, you can use a <code>switch</code> statement to narrow down which type is represented at runtime:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type NetworkState = NetworkLoadingState | NetworkFailedState | NetworkSuccessState'>NetworkState</data-lsp> =</span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkLoadingState = {&amp;#13;    state: &amp;quot;loading&amp;quot;;&amp;#13;}'>NetworkLoadingState</data-lsp></span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkFailedState = {&amp;#13;    state: &amp;quot;failed&amp;quot;;&amp;#13;    code: number;&amp;#13;}'>NetworkFailedState</data-lsp></span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkSuccessState = {&amp;#13;    state: &amp;quot;success&amp;quot;;&amp;#13;    response: {&amp;#13;        title: string;&amp;#13;        duration: number;&amp;#13;        summary: string;&amp;#13;    };&amp;#13;}'>NetworkSuccessState</data-lsp>;</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function logger(state: NetworkState): string'>logger</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) state: NetworkState'>state</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type NetworkState = NetworkLoadingState | NetworkFailedState | NetworkSuccessState'>NetworkState</data-lsp>): string {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Right now TypeScript does not know which of the three</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// potential types state could be.</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Trying to access a property which isn&apos;t shared</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// across all types will raise an error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) state: NetworkState'>state</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='any'>code</data-lsp>;</data-err></span>\n<span class=\"error\"><span>Property 'code' does not exist on type 'NetworkState'.\n  Property 'code' does not exist on type 'NetworkLoadingState'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'code' does not exist on type 'NetworkState'.\n  Property 'code' does not exist on type 'NetworkLoadingState'.</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// By switching on state, TypeScript can narrow the union</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// down in code flow analysis</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) state: NetworkState'>state</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) state: &amp;quot;loading&amp;quot; | &amp;quot;failed&amp;quot; | &amp;quot;success&amp;quot;'>state</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Downloading...\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"failed\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #008000\">// The type must be NetworkFailedState here,</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #008000\">// so accessing the `code` field is safe</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`Error </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) state: NetworkFailedState'>state</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) code: number'>code</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> downloading`</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`Downloaded </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) state: NetworkSuccessState'>state</data-lsp></span><span style=\"color: #A31515\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) response: {&amp;#13;    title: string;&amp;#13;    duration: number;&amp;#13;    summary: string;&amp;#13;}'>response</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) title: string'>title</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> - </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) state: NetworkSuccessState'>state</data-lsp></span><span style=\"color: #A31515\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) response: {&amp;#13;    title: string;&amp;#13;    duration: number;&amp;#13;    summary: string;&amp;#13;}'>response</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) summary: string'>summary</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAXATwAdJQA5SfAdwQGsAZOAQwBMBLAOwHMBlfZvjIBeUAG9coUIgFDUAIgA2LDj3kBuXAF9NBEmUo16AMWbtFkVv0Ejxk6bMgKAZmYusN9gMZxWT0JwArgC2AEYwmjq4eqQUVLTQdLyBXl6QiIjWQqCiElIyNgqIKWkZnlLQ6cRwnIj+eVKg+Oz4Fqgy0Fzcmo2grIHQguw1qEFhEfb5IcHM0ITt+J08PaBRUSCgALTbXoH425sxBvH0WSL2AD5xRolMbF1nl9cJdKbmlo9SV4YvyanpmUcumcgU4XmaNVAym43BgAAoCnJnqdHABKBZLbh2KQbABK7G4AAt8AE4NRQAAVfS8LydYgk1hwdKkkl0Thk0DUQnsLyE0BwZxNQlkfCEyqQewbapCTjNZiKJr6RAOGygHyBRSsUDhAB00RxYApcy6TTgoGY-wy5tAxHgpGgRE53N5oHYiE4AHISYhCbNLJKwBb4Fb5QqiKRldRzArBm6yMxOKAYPBoPZEZAdT4-LoDaAAEKEaRR-C8k2Q9MAGkp1Np7HpaoTAVm8HJorIoOGnADfTJia4at8ZGcynJCflhEQbrTxZdCMcOvTqOxjS8zDqoCUKi68mQk0alXwA0T8gAIr3lPceDrr+UV2uyPJXO8PLvermKcLFbFgoEZNrjjcrxuB8jigMKlQVnuuaIGaFqlJOPBCmQAAGWaQMhoDOOwkCaq6yqIMwzgSm+oAHkeoDIQAorACCgAAJGI6aZoOWg9tQnAXqo3DISsUiruu8jFJaiA7lBpFUORyFnuxnGWPRjHzpUiDVLUGbNK0kCsZs8lMUpKl1Au0yzIQWg8fYWjaEAA'>Try</a></div></pre>\n<h2 id=\"union-exhaustiveness-checking\" style=\"position:relative;\"><a href=\"#union-exhaustiveness-checking\" aria-label=\"union exhaustiveness checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Exhaustiveness checking</h2>\n<p>We would like the compiler to tell us when we don’t cover all variants of the discriminated union.\nFor example, if we add <code>NetworkFromCachedState</code> to <code>NetworkState</code>, we need to update <code>logger</code> as well:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type NetworkFromCachedState = {&amp;#13;    state: &amp;quot;from_cache&amp;quot;;&amp;#13;    id: string;&amp;#13;    response: NetworkSuccessState[&amp;quot;response&amp;quot;];&amp;#13;}'>NetworkFromCachedState</data-lsp> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) state: &amp;quot;from_cache&amp;quot;'>state</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"from_cache\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) id: string'>id</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) response: {&amp;#13;    title: string;&amp;#13;    duration: number;&amp;#13;    summary: string;&amp;#13;}'>response</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type NetworkSuccessState = {&amp;#13;    state: &amp;quot;success&amp;quot;;&amp;#13;    response: {&amp;#13;        title: string;&amp;#13;        duration: number;&amp;#13;        summary: string;&amp;#13;    };&amp;#13;}'>NetworkSuccessState</data-lsp>[</span><span style=\"color: #A31515\">\"response\"</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type NetworkState = NetworkLoadingState | NetworkFailedState | NetworkSuccessState | NetworkFromCachedState'>NetworkState</data-lsp> =</span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkLoadingState = {&amp;#13;    state: &amp;quot;loading&amp;quot;;&amp;#13;}'>NetworkLoadingState</data-lsp></span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkFailedState = {&amp;#13;    state: &amp;quot;failed&amp;quot;;&amp;#13;    code: number;&amp;#13;}'>NetworkFailedState</data-lsp></span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkSuccessState = {&amp;#13;    state: &amp;quot;success&amp;quot;;&amp;#13;    response: {&amp;#13;        title: string;&amp;#13;        duration: number;&amp;#13;        summary: string;&amp;#13;    };&amp;#13;}'>NetworkSuccessState</data-lsp></span>\n<span style=\"color: #000000\">  | <data-lsp lsp='type NetworkFromCachedState = {&amp;#13;    state: &amp;quot;from_cache&amp;quot;;&amp;#13;    id: string;&amp;#13;    response: NetworkSuccessState[&amp;quot;response&amp;quot;];&amp;#13;}'>NetworkFromCachedState</data-lsp>;</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function logger(s: NetworkState): string | undefined'>logger</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkState'>s</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type NetworkState = NetworkLoadingState | NetworkFailedState | NetworkSuccessState | NetworkFromCachedState'>NetworkState</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkState'>s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) state: &amp;quot;loading&amp;quot; | &amp;quot;failed&amp;quot; | &amp;quot;success&amp;quot; | &amp;quot;from_cache&amp;quot;'>state</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading request\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"failed\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`failed with code </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkFailedState'>s</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) code: number'>code</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"got response\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsWBQAXATwAdJQA5SfAdwQGsAZOAQwBMBLAOwHMBlfZvjIBeUAG9QiAUNQAiADYsOPWaAC+AbgIkylGvQBizdvMit+gkeMnTIcgGbHTrWRtABjOKzuhOAVwBbACMYdS0iUgoqWmg6Xj93d0hERAshUFExXFAbSzlEBKSU12zQaGTiOE5EHyycnPx2fFNUKWgubi160FY-aEF2KtR-YJgu+oKAgOZoQlb8dp5xzVwVkFAAWi33P3wtje1IvRi6A3gAgGFmdwALMzSrOtyZUFl7c4B9d2u7kpz2VjzRadUrlRCVao+Y70eKJZKpWwAbVkYIhNVkAF0tCtDrpojDbBlSgAfKL6WJMNgdB4ksknIwme62WnQ2KwooIyws-GxM5wS4-JmWLS4ex+TjuRpVUCKbjcGAAChQdIJlgAlOJSohqE1bqAlQA6KTqzXdb41V6KKkqZClbrlfB9TiWpQdMqQACOfmS+D+9XNZDeTjMslt3RyDqdoAABo5GaxQDr8DcPF4yAASMSIA2ebxqaPjHIB14FOHFMPhyPQZ2ybhwfDu8FVdHLVZAA'>Try</a></div></pre>\n<p>There are two ways to do this.\nThe first is to turn on <code>--strictNullChecks</code> and specify a return type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function logger(s: NetworkState): string'>logger</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkState'>s</data-lsp></span><span style=\"color: #000000\"><data-err>: <data-lsp lsp='type NetworkState = NetworkLoadingState | NetworkFailedState | NetworkSuccessState | NetworkFromCachedState'>NetworkState</data-lsp>): string {</data-err></span>\n<span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkState'>s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) state: &amp;quot;loading&amp;quot; | &amp;quot;failed&amp;quot; | &amp;quot;success&amp;quot; | &amp;quot;from_cache&amp;quot;'>state</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading request\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"failed\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`failed with code </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkFailedState'>s</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) code: number'>code</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"got response\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsWBQAXATwAdJQA5SfAdwQGsAZOAQwBMBLAOwHMBlfZvjIBeUAG9QiAUNQAiADYsOPWaAC+AbgIkylGvQBizdvMit+gkeMnTIcgGbHTrWRtABjOKzuhOAVwBbACMYdS0iUgoqWmg6Xj93d0hERAshUFEJKUs5RASklNVNbUi9GLoDeACAYWZ3AAszNKss2wcqgH13OsairRLdaPpmjNxQUAAfKP1YpjYuPlsxyenyoxMmpfGpsuH85NStld3Yyrgans3LfpBQAFoH9z98B7vcez9Od3x2OE5QRTcbgwAAUKFWw1sAEpUFJoAtxMtENR2PgGqAwQA6bJCKGI8bjbqIMgKJQLWTIZYE0DQKh+aD-UnzHg0yAARz8yXwripHmYxNAskcGxclOp41p+Hp-wABsLnKAUfh6h4vGQACRiRCYzzeNQyrTUokkvKJA4U3kSukMwXcOD4VmIYh-Yk88ZqXBqIA'>Try</a></div></pre>\n<p>Because the <code>switch</code> is no longer exhaustive, TypeScript is aware that the function could sometimes return <code>undefined</code>.\nIf you have an explicit return type <code>string</code>, then you will get an error that the return type is actually <code>string | undefined</code>.\nHowever, this method is quite subtle and, besides, <a href=\"/tsconfig#strictNullChecks\"><code>--strictNullChecks</code></a> does not always work with old code.</p>\n<p>The second method uses the <code>never</code> type that the compiler uses to check for exhaustiveness:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function assertNever(x: never): never'>assertNever</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: never'>x</data-lsp></span><span style=\"color: #000000\">: never): never {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error'>Error</data-lsp>(</span><span style=\"color: #A31515\">\"Unexpected object: \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: never'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function logger(s: NetworkState): string'>logger</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkState'>s</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type NetworkState = NetworkLoadingState | NetworkFailedState | NetworkSuccessState | NetworkFromCachedState'>NetworkState</data-lsp>): string {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkState'>s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) state: &amp;quot;loading&amp;quot; | &amp;quot;failed&amp;quot; | &amp;quot;success&amp;quot; | &amp;quot;from_cache&amp;quot;'>state</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"loading request\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"failed\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`failed with code </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: NetworkFailedState'>s</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) code: number'>code</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"got response\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">default</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='function assertNever(x: never): never'>assertNever</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) s: NetworkFromCachedState'>s</data-lsp></data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'NetworkFromCachedState' is not assignable to parameter of type 'never'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'NetworkFromCachedState' is not assignable to parameter of type 'never'.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAHKQEDuCA1gDJwCGAJgJYB2A5gMoEWBcgF5QAb1CJBw1ACIANq0685oAL4BuQqXJVaDAGIsOCyGwFDREqTMjyAZibNs5m0AGM4be6C4BXAFsAIxgNbWIySmo6aHo+fw8PSERES2FQMUlpK3lEROTUtS0dKP1Y+kN4QIBhFg8AC3N062y7R2qAfQ96puLtUr0YhhbMvFBQAB9ogzjmdm5+O3GpmYrjU2blienykYKUtO3VvbiquFrerattEFAAWkePfwJH+7wHfy4PAg44LlALFSMAIVAAbjAABQAD1QXEgEOgAEo4QiwuIVgQGvAaH5ILiAKKwBCQuQAVXh0LIP3MoDgwQAVpAfvJQABqUDQpHadR4D5fH5-AFKHg8KEoNYjOwo2zQRYSFaIGgcAiNUCQxAAOhywiRComEx6iHIimUizkyBWBtA0Go-mgANNC14NsgAEd-CkCG4rZ4gSanJtXJbrRNbQR7QCAAaBlygZVYzzecgAEnEWq8PnUUe01qNJvySUOFt9YbtDtAch4cAIrsQJH+xp91p8Tn8CgIIdD4cjgOB0FBaOgGu5K156iAA'>Try</a></div></pre>\n<p>Here, <code>assertNever</code> checks that <code>s</code> is of type <code>never</code> — the type that’s left after all other cases have been removed.\nIf you forget a case, then <code>s</code> will have a real type and you will get a type error.\nThis method requires you to define an extra function, but it’s much more obvious when you forget it because the error message includes the missing type name.</p>\n<h2 id=\"intersection-types\" style=\"position:relative;\"><a href=\"#intersection-types\" aria-label=\"intersection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection Types</h2>\n<p>Intersection types are closely related to union types, but they are used very differently.\nAn intersection type combines multiple types into one.\nThis allows you to add together existing types to get a single type that has all the features you need.\nFor example, <code>Person &#x26; Serializable &#x26; Loggable</code> is a type which is all of <code>Person</code> <em>and</em> <code>Serializable</code> <em>and</em> <code>Loggable</code>.\nThat means an object of this type will have all members of all three types.</p>\n<p>For example, if you had networking requests with consistent error handling then you could separate out the error handling into its own type which is merged with types which correspond to a single response type.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface ErrorHandling'>ErrorHandling</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ErrorHandling.success: boolean'>success</data-lsp></span><span style=\"color: #000000\">: boolean;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ErrorHandling.error?: {&amp;#13;    message: string;&amp;#13;} | undefined'>error</data-lsp></span><span style=\"color: #000000\">?: { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) message: string'>message</data-lsp></span><span style=\"color: #000000\">: string };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface ArtworksData'>ArtworksData</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ArtworksData.artworks: {&amp;#13;    title: string;&amp;#13;}[]'>artworks</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) title: string'>title</data-lsp></span><span style=\"color: #000000\">: string }[];</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface ArtistsData'>ArtistsData</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ArtistsData.artists: {&amp;#13;    name: string;&amp;#13;}[]'>artists</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string }[];</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// These interfaces are composed to have</span>\n<span style=\"color: #008000\">// consistent error handling, and their own data.</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type ArtworksResponse = ArtworksData &amp;amp; ErrorHandling'>ArtworksResponse</data-lsp> = <data-lsp lsp='interface ArtworksData'>ArtworksData</data-lsp> &amp; <data-lsp lsp='interface ErrorHandling'>ErrorHandling</data-lsp>;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type ArtistsResponse = ArtistsData &amp;amp; ErrorHandling'>ArtistsResponse</data-lsp> = <data-lsp lsp='interface ArtistsData'>ArtistsData</data-lsp> &amp; <data-lsp lsp='interface ErrorHandling'>ErrorHandling</data-lsp>;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const handleArtistsResponse: (response: ArtistsResponse) => void'>handleArtistsResponse</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) response: ArtistsResponse'>response</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type ArtistsResponse = ArtistsData &amp;amp; ErrorHandling'>ArtistsResponse</data-lsp>) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) response: ArtistsResponse'>response</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ErrorHandling.error?: {&amp;#13;    message: string;&amp;#13;} | undefined'>error</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.error(...data: any[]): void'>error</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) response: ArtistsResponse'>response</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ErrorHandling.error?: {&amp;#13;    message: string;&amp;#13;}'>error</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) message: string'>message</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) response: ArtistsResponse'>response</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) ArtistsData.artists: {&amp;#13;    name: string;&amp;#13;}[]'>artists</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">};</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKJSgeygCTiAEwBtQBzZAbwChlkBnAVwSTroC5kAjTTIifANw1k0LFAD8HCsgC2EVnFIQOdMFDLIAvkM1UqoSLEQoAglDAB3bAGs6AEThg4lYXHNWotqcjDAwfFTUNTQBtAF0dPQNoeCRkM19Ve0dnalo3RLB2SmQQODlA9RByUIiqXSoAekrkABUAC3kUaKMWZDcUBEwZAAdMOggCH0xkergANwgqmq6QOmBVCHARDGxR-GIyABp2wh9G4ChkTAsQZAIUgDo9MABPHtN3GzoAJXk+uZQAXninz2SnMgAGRoVa4DYkYpCO4PX6ZV7vTCfZA-BILLIOQEg9BiPCESGkIRUWaqdb4iBopJvOgfAYo5AACigiM+HEpWWptIgAEoUQA+Fy0YAwRnMmlIgaXUTYXlpWjIEm8CBSsFMlmS6VQS5yBRKblCeXIZlgBhQEAGrR6WiKviXIiYUhq8WfS4ZdF0fXlARAA'>Try</a></div></pre>","headings":[{"value":"Union Types","depth":2},{"value":"Unions with Common Fields","depth":2},{"value":"Discriminating Unions","depth":2},{"value":"Union Exhaustiveness checking","depth":2},{"value":"Intersection Types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/unions-and-intersections.html","title":"Unions and Intersection Types","disable_toc":null,"handbook":"true","oneline":"How to use unions and intersection types in TypeScript","beta":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Literal Types","oneline":"Using literal types with TypeScript","permalink":"/docs/handbook/literal-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Classes","oneline":"How classes work in TypeScript","permalink":"/docs/handbook/classes.html"}}}},"pageContext":{"id":"1unions-and-intersection-types","slug":"/docs/handbook/unions-and-intersections.html","repoPath":"/packages/documentation/copy/en/handbook-v1/Unions and Intersections.md","previousID":"e5515c69-b54c-5324-83a6-e49c7b147018","nextID":"559c3106-b419-51de-8ad4-5b7d54bbb640","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}