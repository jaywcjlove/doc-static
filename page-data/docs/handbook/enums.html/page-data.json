{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/enums.html","result":{"data":{"markdownRemark":{"id":"4d11a44b-a1c8-5620-b536-156e1099dfe5","excerpt":"Enums are one of the few features TypeScript has which is not a type-level extension of JavaScript. Enums allow a developer to define a set of named constants…","html":"<p>Enums are one of the few features TypeScript has which is not a type-level extension of JavaScript.</p>\n<p>Enums allow a developer to define a set of named constants.\nUsing enums can make it easier to document intent, or create a set of distinct cases.\nTypeScript provides both numeric and string-based enums.</p>\n<h2 id=\"numeric-enums\" style=\"position:relative;\"><a href=\"#numeric-enums\" aria-label=\"numeric enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numeric enums</h2>\n<p>We’ll first start off with numeric enums, which are probably more familiar if you’re coming from other languages.\nAn enum can be defined using the <code>enum</code> keyword.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Up = 1' >Up</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Down = 2' >Down</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Left = 3' >Left</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Right = 4' >Right</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAIglgJ2AYwC5wPYigbwFBRQCqADlALxQCMANAbBgO4h2EAywAZqq1AEpwA5gAseeAL5A'>Try</a></div></pre>\n<p>Above, we have a numeric enum where <code>Up</code> is initialized with <code>1</code>.\nAll of the following members are auto-incremented from that point on.\nIn other words, <code>Direction.Up</code> has the value <code>1</code>, <code>Down</code> has <code>2</code>, <code>Left</code> has <code>3</code>, and <code>Right</code> has <code>4</code>.</p>\n<p>If we wanted, we could leave off the initializers entirely:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Up = 0' >Up</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Down = 1' >Down</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Left = 2' >Left</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Right = 3' >Right</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAIglgJ2AYwC5wPYigbwFBRQCqADgDQGwYDuIFhAMsAGar1QBKcA5gBZt4AvkA'>Try</a></div></pre>\n<p>Here, <code>Up</code> would have the value <code>0</code>, <code>Down</code> would have <code>1</code>, etc.\nThis auto-incrementing behavior is useful for cases where we might not care about the member values themselves, but do care that each value is distinct from other values in the same enum.</p>\n<p>Using an enum is simple: just access any member as a property off of the enum itself, and declare types using the name of the enum:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum UserResponse' >UserResponse</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) UserResponse.No = 0' >No</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) UserResponse.Yes = 1' >Yes</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function respond(recipient: string, message: UserResponse): void' >respond</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) recipient: string' >recipient</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) message: UserResponse' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='enum UserResponse' >UserResponse</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function respond(recipient: string, message: UserResponse): void' >respond</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Princess Caroline\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='enum UserResponse' >UserResponse</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) UserResponse.Yes = 1' >Yes</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAqgzsATgJWHADgexAqBvAKCigDlMoBeKABgBoioBNNSqARnoF8CCAzMEAGMALgEtsURGiwgAJgAopg0elGhhALihxhiUSADmtKBDRwAhgeBb4SVBmwIAlFoBumUbPwMA9D6gAdEEE3ARSDnLyAEQACnpCZlAAwuaImAA2+sBRxrYo0o7AAcxwTgDcQA'>Try</a></div></pre>\n<p>Numeric enums can be mixed in <a href=\"#computed-and-constant-members\">computed and constant members (see below)</a>.\nThe short story is, enums without initializers either need to be first, or have to come after numeric enums initialized with numeric constants or other constant enum members.\nIn other words, the following isn’t allowed:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.A' >A</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const getSomeValue: () => number' >getSomeValue</data-lsp></span><span style=\"color: #000000\">(),</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-err><data-lsp lsp='(enum member) E.B' >B</data-lsp></data-err></span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>Enum member must have initializer.</span><span class=\"code\">1061</span></span><span class=\"error-behind\">Enum member must have initializer.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwAYBsaBQBjOAO0QBdQBzSUgZTgFtIA1AQwBsBXSUAXlAAoAlLwB8oAEwBmANy4QoALRL8HUkoW5IRDvVABRUAG9coUAEFelanUatOkIQBoToAELOAvkA'>Try</a></div></pre>\n<h2 id=\"string-enums\" style=\"position:relative;\"><a href=\"#string-enums\" aria-label=\"string enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String enums</h2>\n<p>String enums are a similar concept, but have some subtle <a href=\"#enums-at-runtime\">runtime differences</a> as documented below.\nIn a string enum, each member has to be constant-initialized with a string literal, or with another string enum member.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Up = \"UP\"' >Up</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"UP\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Down = \"DOWN\"' >Down</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"DOWN\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Left = \"LEFT\"' >Left</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"LEFT\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Right = \"RIGHT\"' >Right</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"RIGHT\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAIglgJ2AYwC5wPYigbwFBRQCqADlALxQBERAClQDQGwYDu2lVMA8gOoByjZgBlgAM1QVqwgKIAxACpDCAJTgBzABaTOKgJIBxABJKmAXyA'>Try</a></div></pre>\n<p>While string enums don’t have auto-incrementing behavior, string enums have the benefit that they “serialize” well.\nIn other words, if you were debugging and had to read the runtime value of a numeric enum, the value is often opaque - it doesn’t convey any useful meaning on its own (though <a href=\"#reverse-mappings\">reverse mapping</a> can often help). String enums allow you to give a meaningful and readable value when your code runs, independent of the name of the enum member itself.</p>\n<h2 id=\"heterogeneous-enums\" style=\"position:relative;\"><a href=\"#heterogeneous-enums\" aria-label=\"heterogeneous enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heterogeneous enums</h2>\n<p>Technically enums can be mixed with string and numeric members, but it’s not clear why you would ever want to do so:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum BooleanLikeHeterogeneousEnum' >BooleanLikeHeterogeneousEnum</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) BooleanLikeHeterogeneousEnum.No = 0' >No</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) BooleanLikeHeterogeneousEnum.Yes = \"YES\"' >Yes</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"YES\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAQg9nANsAhiAMgSwNbABLAAuwATnAOajBxgDOAouNAN4BQUUAcnFALxQAGADTsoATWC0+UAERj6AZRkiAvkA'>Try</a></div></pre>\n<p>Unless you’re really trying to take advantage of JavaScript’s runtime behavior in a clever way, it’s advised that you don’t do this.</p>\n<h2 id=\"computed-and-constant-members\" style=\"position:relative;\"><a href=\"#computed-and-constant-members\" aria-label=\"computed and constant members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed and constant members</h2>\n<p>Each enum member has a value associated with it which can be either <em>constant</em> or <em>computed</em>.\nAn enum member is considered constant if:</p>\n<ul>\n<li>\n<p>It is the first member in the enum and it has no initializer, in which case it’s assigned the value <code>0</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// E.X is constant:</span></div><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.X = 0' >X</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEFEDoA1QSwM6gMYHsB2CAuBDdWAuAKAFN0BXAWwlAG8jRRoAaIgXyA'>Try</a></div></pre>\n</li>\n<li>\n<p>It does not have an initializer and the preceding enum member was a <em>numeric</em> constant.\nIn this case the value of the current enum member will be the value of the preceding enum member plus one.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// All enum members in &apos;E1&apos; and &apos;E2&apos; are constant.</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E1' >E1</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E1.X = 0' >X</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E1.Y = 1' >Y</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E1.Z = 2' >Z</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E2' >E2</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E2.A = 1' >A</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E2.B = 2' >B</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E2.C = 3' >C</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEEEBtNBTA7ArgW1M2yBGsBOBnUAS3lAHIBRARlNAEN4ATM8gJhtp1lAGMB7ePABd6ggHQAocQhSgqoAN7jQoABoAaJaACaG5QC0NAX0nTUrBZvCgAvKEq7QAIQcBhI0A'>Try</a></div></pre>\n</li>\n<li>\n<p>The enum member is initialized with a constant enum expression.\nA constant enum expression is a subset of TypeScript expressions that can be fully evaluated at compile time.\nAn expression is a constant enum expression if it is:</p>\n<ol>\n<li>a literal enum expression (basically a string literal or a numeric literal)</li>\n<li>a reference to previously defined constant enum member (which can originate from a different enum)</li>\n<li>a parenthesized constant enum expression</li>\n<li>one of the <code>+</code>, <code>-</code>, <code>~</code> unary operators applied to constant enum expression</li>\n<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&#x3C;&#x3C;</code>, <code>>></code>, <code>>>></code>, <code>&#x26;</code>, <code>|</code>, <code>^</code> binary operators with constant enum expressions as operands</li>\n</ol>\n<p>It is a compile time error for constant enum expressions to be evaluated to <code>NaN</code> or <code>Infinity</code>.</p>\n</li>\n</ul>\n<p>In all other cases enum member is considered computed.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum FileAccess' >FileAccess</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// constant members</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) FileAccess.None = 0' >None</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) FileAccess.Read = 2' >Read</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> &lt;&lt; </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) FileAccess.Write = 4' >Write</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> &lt;&lt; </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) FileAccess.ReadWrite = 6' >ReadWrite</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) FileAccess.Read = 2' >Read</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) FileAccess.Write = 4' >Write</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// computed member</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) FileAccess.G' >G</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"123\"</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) String.length: number' >length</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAYglgG2AQQMauAZ01A3gKCigHpipUB7ETAFwEMQaoJgIAjYAJ00KgDkqwADS8ASsDoATKAF4oARigAeJQpFEA6pzg1gshctUAmdVHFStOvXPPSAPlEu7TpchQgAHMLukt2XXgBxfQAieSMAZhCAOiQQAHMaAAsRAF8gA'>Try</a></div></pre>\n<h2 id=\"union-enums-and-enum-member-types\" style=\"position:relative;\"><a href=\"#union-enums-and-enum-member-types\" aria-label=\"union enums and enum member types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union enums and enum member types</h2>\n<p>There is a special subset of constant enum members that aren’t calculated: literal enum members.\nA literal enum member is a constant enum member with no initialized value, or with values that are initialized to</p>\n<ul>\n<li>any string literal (e.g. <code>\"foo\"</code>, <code>\"bar</code>, <code>\"baz\"</code>)</li>\n<li>any numeric literal (e.g. <code>1</code>, <code>100</code>)</li>\n<li>a unary minus applied to any numeric literal (e.g. <code>-1</code>, <code>-100</code>)</li>\n</ul>\n<p>When all members in an enum have literal enum values, some special semantics come into play.</p>\n<p>The first is that enum members also become types as well!\nFor example, we can say that certain members can <em>only</em> have the value of an enum member:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum ShapeKind' >ShapeKind</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) ShapeKind.Circle = 0' >Circle</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) ShapeKind.Square = 1' >Square</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.kind: ShapeKind.Circle' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='enum ShapeKind' >ShapeKind</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(enum member) ShapeKind.Circle = 0' >Circle</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Square' >Square</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Square.kind: ShapeKind.Square' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='enum ShapeKind' >ShapeKind</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(enum member) ShapeKind.Square = 1' >Square</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Square.sideLength: number' >sideLength</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let c: Circle' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) Circle.kind: ShapeKind.Circle' >kind</data-lsp></data-err>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='enum ShapeKind' >ShapeKind</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) ShapeKind.Square = 1' >Square</data-lsp></span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFCQHYCuAtqAMoAWAhgA6QDSAlvgCagDeOooAwo9AGMANpAA0XcgEdCVaGJwBfHDmYAXGADMqAyL37DdnbgGtmLVJVoMzAOj6CRAbgnQqLRoRSgixAEYxnJRV8dWgtHSkZOQ4JU1YLajomVhsyaVlIZ25ERhZIABkCAHNVClQff2hA5RFVUAFUewNQAF4YkzMEq2SWVPS5cW5Xd09UAEYABgnxBUcgA'>Try</a></div></pre>\n<p>The other change is that enum types themselves effectively become a <em>union</em> of each enum member.\nWith union enums, the type system is able to leverage the fact that it knows the exact set of values that exist in the enum itself.\nBecause of that, TypeScript can catch bugs where we might be comparing values incorrectly.\nFor example:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.Foo = 0' >Foo</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.Bar = 1' >Bar</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x: E): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: E' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: E' >x</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0070C1\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) E.Foo = 0' >Foo</data-lsp></span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: E.Foo' >x</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0070C1\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) E.Bar = 1' >Bar</data-lsp></span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>This condition will always return 'true' since the types 'E.Foo' and 'E.Bar' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This condition will always return 'true' since the types 'E.Foo' and 'E.Bar' have no overlap.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUJAHYCuAtqAKKgDeeooAYnHADR2gBCAhtGwL548AM2KEAxgBcAlnEKghACgAeqCgEoa7KUNDLQAQgC8hygDomcUAB8roJQeNnu0DbXr0Q7AXyA'>Try</a></div></pre>\n<p>In that example, we first checked whether <code>x</code> was <em>not</em> <code>E.Foo</code>.\nIf that check succeeds, then our <code>||</code> will short-circuit, and the body of the ‘if’ will run.\nHowever, if the check didn’t succeed, then <code>x</code> can <em>only</em> be <code>E.Foo</code>, so it doesn’t make sense to see whether it’s equal to <code>E.Bar</code>.</p>\n<h2 id=\"enums-at-runtime\" style=\"position:relative;\"><a href=\"#enums-at-runtime\" aria-label=\"enums at runtime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums at runtime</h2>\n<p>Enums are real objects that exist at runtime.\nFor example, the following enum</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.X = 0' >X</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.Y = 1' >Y</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.Z = 2' >Z</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAolDeAoKUAaAaZUCamUC1MBfIA'>Try</a></div></pre>\n<p>can actually be passed around to functions</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.X = 0' >X</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.Y = 1' >Y</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) E.Z = 2' >Z</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(obj: {&#10;    X: number;&#10;}): number' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    X: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) X: number' >X</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    X: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) X: number' >X</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Works, since &apos;E&apos; has a property named &apos;X&apos; which is a number.</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(obj: {&#10;    X: number;&#10;}): number' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0070C1\"><data-lsp lsp='enum E' >E</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAolDeAoKUAaAaZUCamUC1MBfRRAMzBAGMAXASwHsQoyAKBgIwCsAuBNPuAgdgAJyhEAlAiyjgNMKOacuAOlQBuRCUQB6XVADqDUQGsAzuijm61YFADkMB1AAWAQ3NR3UAA6iGXzEaAE8oEHcIYAATR1QXAHdXOipXKDovHyERUVVyVhhJDSA'>Try</a></div></pre>\n<h2 id=\"enums-at-compile-time\" style=\"position:relative;\"><a href=\"#enums-at-compile-time\" aria-label=\"enums at compile time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums at compile time</h2>\n<p>Even though Enums are real objects that exist at runtime, the <code>keyof</code> keyword works differently than you might expect for typical objects. Instead, use <code>keyof typeof</code> to get a Type that represents all Enum keys as strings.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum LogLevel' >LogLevel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) LogLevel.ERROR = 0' >ERROR</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) LogLevel.WARN = 1' >WARN</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) LogLevel.INFO = 2' >INFO</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) LogLevel.DEBUG = 3' >DEBUG</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * This is equivalent to:</span></div><div class='line'><span style=\"color: #008000\"> * type LogLevelStrings = &apos;ERROR&apos; | &apos;WARN&apos; | &apos;INFO&apos; | &apos;DEBUG&apos;;</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LogLevelStrings = \"ERROR\" | \"WARN\" | \"INFO\" | \"DEBUG\"' >LogLevelStrings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='enum LogLevel' >LogLevel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printImportant(key: LogLevelStrings, message: string): void' >printImportant</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: \"ERROR\" | \"WARN\" | \"INFO\" | \"DEBUG\"' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type LogLevelStrings = \"ERROR\" | \"WARN\" | \"INFO\" | \"DEBUG\"' >LogLevelStrings</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const num: LogLevel' >num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='enum LogLevel' >LogLevel</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: \"ERROR\" | \"WARN\" | \"INFO\" | \"DEBUG\"' >key</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const num: LogLevel' >num</data-lsp></span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #001080\"><data-lsp lsp='enum LogLevel' >LogLevel</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) LogLevel.WARN = 1' >WARN</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Log level key is:\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: \"ERROR\" | \"WARN\" | \"INFO\" | \"DEBUG\"' >key</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Log level value is:\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const num: LogLevel' >num</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Log level message is:\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printImportant(key: LogLevelStrings, message: string): void' >printImportant</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"ERROR\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"This is a message\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAMg9gcxsAbsANlA3gKClAUQCUiB5IgGjygHUBBIgOSvwElGAxUlqAEQIBCAVQDiVAL44cAegBUsvLKgAVABYBLAM5QtUYAEcw6lAEN0oAC5QLcAFyLrATwAOwWImRp0AZQsAndRAEbQBeKAByYjIicKgAHwj6JliE8PYuFIj+YRFwgG5FaRwLFzd4JFQMXwCg0KgAa2BHOAAzJ1dW9wqvApwWsBAAYwt1OBAoZxqLVghnOD8LExALAApGx1suzyr-QOCKKAhgTU0TBGBNzV2ggEpsakGxq6hwaDDy7fQAbXWAXQL8Oo2itXlAADzvDyVdAAOiSjDuuHw+EeIE0cHMMPQiBWACJylBzF4Gk0dJpbLiDusbgDkaj0ZjsQg8QSiRgoKZ0GA3FoKQdXjTqCinhjgFicfjEIToYdjqdzmS+bKTmdgIL8JJJJNAtNZvNFss8VFyJSoLi1LpdCZlfLgLiaUA'>Try</a></div></pre>\n<h3 id=\"reverse-mappings\" style=\"position:relative;\"><a href=\"#reverse-mappings\" aria-label=\"reverse mappings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reverse mappings</h3>\n<p>In addition to creating an object with property names for members, numeric enums members also get a <em>reverse mapping</em> from enum values to enum names.\nFor example, in this example:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum Enum' >Enum</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.A = 0' >A</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let a: Enum' >a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='enum Enum' >Enum</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.A = 0' >A</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let nameOfA: string' >nameOfA</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='enum Enum' >Enum</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let a: Enum' >a</data-lsp></span><span style=\"color: #000000\">]; </span><span style=\"color: #008000\">// \"A\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAou0G8BQUoEEA0SC+SkBtgAXKAQygF5Z4A6NAbgOKhFImAHkAzNS6yANqkAuvSgB6cVABEaaUA'>Try</a></div></pre>\n<p>TypeScript compiles this down to the following JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"A\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"A\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\"> = {}));</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nameOfA</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Enum</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">]; </span><span style=\"color: #008000\">// \"A\"</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMB2BXZURAogb01FAEEAaTAX00wBtt1QBDUAXmNIB01ANyt2oXJ2TYA8gDNqvfoQDanALrDQIUACJquoA'>Try</a></div></pre>\n<p>In this generated code, an enum is compiled into an object that stores both forward (<code>name</code> -> <code>value</code>) and reverse (<code>value</code> -> <code>name</code>) mappings.\nReferences to other enum members are always emitted as property accesses and never inlined.</p>\n<p>Keep in mind that string enum members <em>do not</em> get a reverse mapping generated at all.</p>\n<h3 id=\"const-enums\" style=\"position:relative;\"><a href=\"#const-enums\" aria-label=\"const enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>const</code> enums</h3>\n<p>In most cases, enums are a perfectly valid solution.\nHowever sometimes requirements are tighter.\nTo avoid paying the cost of extra generated code and additional indirection when accessing enum values, it’s possible to use <code>const</code> enums.\nConst enums are defined using the <code>const</code> modifier on our enums:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Enum' >Enum</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.A = 1' >A</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.B = 2' >B</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.A = 1' >A</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgUSag3gKBjAQRgF4YBGAGjxgCETCYAqGAJioF8g'>Try</a></div></pre>\n<p>Const enums can only use constant enum expressions and unlike regular enums they are completely removed during compilation.\nConst enum members are inlined at use sites.\nThis is possible since const enums cannot have computed members.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Up = 0' >Up</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Down = 1' >Down</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Left = 2' >Left</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Direction.Right = 3' >Right</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let directions: Direction[]' >directions</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Direction.Up = 0' >Up</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Direction.Down = 1' >Down</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Direction.Left = 2' >Left</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const enum Direction' >Direction</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Direction.Right = 3' >Right</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgEQJYCc7Ch8GAbwCgYYBVABwBoz0QB3MO8gGTgDMpWYAlDAHMAFjxIBfEiQA2cWABNsufOAgwAvDADa9TDjwEwAOmq89yw0bRMWupQfBGO3M-ZXGBIsQF0A3EA'>Try</a></div></pre>\n<p>in generated code will become</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">directions</span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Direction.Up */</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Direction.Down */</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Direction.Left */</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Direction.Right */</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VABFUAnY7dVfUAb01FAFUAHAGg7UEeAZwAyxAGbpRoAEqoA5tBmYAvpkwAbYkQAmdBk3yRQAXlABtQTXqNmeAHS9Ztow8dVhrw-fyOJaR87YycFZVUAXQBuIA'>Try</a></div></pre>\n<h4 id=\"const-enum-pitfalls\" style=\"position:relative;\"><a href=\"#const-enum-pitfalls\" aria-label=\"const enum pitfalls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Const enum pitfalls</h4>\n<p>Inlining enum values is straightforward at first, but comes with subtle implications.\nThese pitfalls pertain to <em>ambient</em> const enums only (basically const enums in <code>.d.ts</code> files) and sharing them between projects, but if you are publishing or consuming <code>.d.ts</code> files, these pitfalls likely apply to you, because <code>tsc --declaration</code> transforms <code>.ts</code> files into <code>.d.ts</code> files.</p>\n<ol>\n<li>For the reasons laid out in the <a href=\"/tsconfig#references-to-const-enum-members\"><code>isolatedModules</code> documentation</a>, that mode is fundamentally incompatible with ambient const enums.\nThis means if you publish ambient const enums, downstream consumers will not be able to use <a href=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></a> and those enum values at the same time.</li>\n<li>You can easily inline values from version A of a dependency at compile time, and import version B at runtime.\nVersion A and B’s enums can have different values, if you are not very careful, resulting in <a href=\"https://github.com/microsoft/TypeScript/issues/5219#issue-110947903\">surprising bugs</a>, like taking the wrong branches of <code>if</code> statements.\nThese bugs are especially pernicious because it is common to run automated tests at roughly the same time as projects are built, with the same dependency versions, which misses these bugs completely.</li>\n<li><a href=\"/tsconfig#importsNotUsedAsValues\"><code>importsNotUsedAsValues: \"preserve\"</code></a> will not elide imports for const enums used as values, but ambient const enums do not guarantee that runtime <code>.js</code> files exist.\nThe unresolvable imports cause errors at runtime.\nThe usual way to unambiguously elide imports, <a href=\"/docs/handbook/modules.html#importing-types\">type-only imports</a>, <a href=\"https://github.com/microsoft/TypeScript/issues/40344\">does not allow const enum values</a>, currently.</li>\n</ol>\n<p>Here are two approaches to avoiding these pitfalls:</p>\n<p>A. Do not use const enums at all.\nYou can easily <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/FAQ.md#how-can-i-ban-specific-language-feature\">ban const enums</a> with the help of a linter.\nObviously this avoids any issues with const enums, but prevents your project from inlining its own enums.\nUnlike inlining enums from other projects, inlining a project’s own enums is not problematic and has performance implications.\nB. Do not publish ambient const enums, by deconstifying them with the help of <a href=\"/tsconfig#preserveConstEnums\"><code>preserveConstEnums</code></a>.\nThis is the approach taken internally by the <a href=\"https://github.com/microsoft/TypeScript/pull/5422\">TypeScript project itself</a>.\n<a href=\"/tsconfig#preserveConstEnums\"><code>preserveConstEnums</code></a> emits the same JavaScript for const enums as plain enums.\nYou can then safely strip the <code>const</code> modifier from <code>.d.ts</code> files <a href=\"https://github.com/microsoft/TypeScript/blob/1a981d1df1810c868a66b3828497f049a944951c/Gulpfile.js#L144\">in a build step</a>.</p>\n<p>This way downstream consumers will not inline enums from your project, avoiding the pitfalls above, but a project can still inline its own enums, unlike banning const enums entirely.</p>\n<h2 id=\"ambient-enums\" style=\"position:relative;\"><a href=\"#ambient-enums\" aria-label=\"ambient enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ambient enums</h2>\n<p>Ambient enums are used to describe the shape of already existing enum types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='enum Enum' >Enum</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.A = 1' >A</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.B' >B</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Enum.C = 2' >C</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEIB2BXAtvAoqjBvAUPPAILwC88AjADSHwBCtRAwufAEy0C+QA'>Try</a></div></pre>\n<p>One important difference between ambient and non-ambient enums is that, in regular enums, members that don’t have an initializer will be considered constant if its preceding enum member is considered constant.\nBy contrast, an ambient (and non-const) enum member that does not have an initializer is <em>always</em> considered computed.</p>\n<h2 id=\"objects-vs-enums\" style=\"position:relative;\"><a href=\"#objects-vs-enums\" aria-label=\"objects vs enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects vs Enums</h2>\n<p>In modern TypeScript, you may not need an enum when an object with <code>as const</code> could suffice:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum EDirection' >EDirection</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) EDirection.Up = 0' >Up</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) EDirection.Down = 1' >Down</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) EDirection.Left = 2' >Left</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) EDirection.Right = 3' >Right</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const ODirection: {&#10;    readonly Up: 0;&#10;    readonly Down: 1;&#10;    readonly Left: 2;&#10;    readonly Right: 3;&#10;}' >ODirection</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Up: 0' >Up</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Down: 1' >Down</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Left: 2' >Left</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Right: 3' >Right</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='type const = {&#10;    readonly Up: 0;&#10;    readonly Down: 1;&#10;    readonly Left: 2;&#10;    readonly Right: 3;&#10;}' >const</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const enum EDirection' >EDirection</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) EDirection.Up = 0' style='border-bottom: solid 2px lightgrey;'>Up</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(enum member) EDirection.Up = 0</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const ODirection: {&#10;    readonly Up: 0;&#10;    readonly Down: 1;&#10;    readonly Left: 2;&#10;    readonly Right: 3;&#10;}' >ODirection</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Up: 0' style='border-bottom: solid 2px lightgrey;'>Up</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(property) Up: 0</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Using the enum as a parameter</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function walk(dir: EDirection): void' >walk</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dir: EDirection' >dir</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum EDirection' >EDirection</data-lsp></span><span style=\"color: #000000\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// It requires an extra line to pull out the values</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Direction = 0 | 1 | 2 | 3' >Direction</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const ODirection: {&#10;    readonly Up: 0;&#10;    readonly Down: 1;&#10;    readonly Left: 2;&#10;    readonly Right: 3;&#10;}' >ODirection</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const ODirection: {&#10;    readonly Up: 0;&#10;    readonly Down: 1;&#10;    readonly Left: 2;&#10;    readonly Right: 3;&#10;}' >ODirection</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function run(dir: Direction): void' >run</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dir: Direction' >dir</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Direction = 0 | 1 | 2 | 3' >Direction</data-lsp></span><span style=\"color: #000000\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function walk(dir: EDirection): void' >walk</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const enum EDirection' >EDirection</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) EDirection.Left = 2' >Left</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function run(dir: Direction): void' >run</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const ODirection: {&#10;    readonly Up: 0;&#10;    readonly Down: 1;&#10;    readonly Left: 2;&#10;    readonly Right: 3;&#10;}' >ODirection</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Right: 3' >Right</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgUQCIEsBOdhRbgwDeAUDDAKoAOANBTBiAO5gOUAycAZlBzABKWAOYALfmQC+ZMqEiwA8tjwEiYGAF5SjWgC4YABgHM2BgIwDufAwCYBw8VAMBmBlJgBDCDHnQA3LKYuPiE4AB0tIEA9NGU8QkAegD8ssohahFRZLEJeSmyuVQQWGAiMFBicPBIqN5eMDSeOJ7IcFBwOGQ8iGCZGiyeADYA1gAUACa4BsGqYWAAlKQyOXEAkrB4AI6IIT6eGnAAHlAtMEOl1VAgjYhDQzAgiLCV1QBuw4hwEGRQAJ40aoqULqLQVAFwEA8GDpObqADaIzgfyh4MBqNhIPAAF1Aj0+vMYDhepNpkwMvMliQVoNRmNZliwOFrFAFoFiWAxpj+uFHBI2UA'>Try</a></div></pre>\n<p>The biggest argument in favour of this format over TypeScript’s <code>enum</code> is that it keeps your codebase aligned with the state of JavaScript, and <a href=\"https://github.com/rbuckton/proposal-enum\">when/if</a> enums are added to JavaScript then you can move to the additional syntax.</p>","headings":[{"value":"Numeric enums","depth":2},{"value":"String enums","depth":2},{"value":"Heterogeneous enums","depth":2},{"value":"Computed and constant members","depth":2},{"value":"Union enums and enum member types","depth":2},{"value":"Enums at runtime","depth":2},{"value":"Enums at compile time","depth":2},{"value":"Reverse mappings","depth":3},{"value":"const enums","depth":3},{"value":"Const enum pitfalls","depth":4},{"value":"Ambient enums","depth":2},{"value":"Objects vs Enums","depth":2}],"frontmatter":{"permalink":"/docs/handbook/enums.html","title":"Enums","disable_toc":null,"handbook":"true","oneline":"How TypeScript enums work","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-enums","slug":"/docs/handbook/enums.html","repoPath":"/packages/documentation/copy/en/reference/Enums.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.854Z"}},"staticQueryHashes":[]}