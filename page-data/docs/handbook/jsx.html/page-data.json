{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/jsx.html","result":{"data":{"markdownRemark":{"id":"d93dde2b-e7e2-5fd7-83e5-c3fb15588006","excerpt":"JSX is an embeddable XML-like syntax.\nIt is meant to be transformed into valid JavaScript, though the semantics of that transformation are implementation…","html":"<p><a href=\"https://facebook.github.io/jsx/\">JSX</a> is an embeddable XML-like syntax.\nIt is meant to be transformed into valid JavaScript, though the semantics of that transformation are implementation-specific.\nJSX rose to popularity with the <a href=\"https://reactjs.org/\">React</a> framework, but has since seen other implementations as well.\nTypeScript supports embedding, type checking, and compiling JSX directly to JavaScript.</p>\n<h2 id=\"basic-usage\" style=\"position:relative;\"><a href=\"#basic-usage\" aria-label=\"basic usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic usage</h2>\n<p>In order to use JSX you must do two things.</p>\n<ol>\n<li>Name your files with a <code>.tsx</code> extension</li>\n<li>Enable the <a href=\"/tsconfig#jsx\"><code>jsx</code></a> option</li>\n</ol>\n<p>TypeScript ships with three JSX modes: <code>preserve</code>, <code>react</code>, and <code>react-native</code>.\nThese modes only affect the emit stage - type checking is unaffected.\nThe <code>preserve</code> mode will keep the JSX as part of the output to be further consumed by another transform step (e.g. <a href=\"https://babeljs.io/\">Babel</a>).\nAdditionally the output will have a <code>.jsx</code> file extension.\nThe <code>react</code> mode will emit <code>React.createElement</code>, does not need to go through a JSX transformation before use, and the output will have a <code>.js</code> file extension.\nThe <code>react-native</code> mode is the equivalent of <code>preserve</code> in that it keeps all JSX, but the output will instead have a <code>.js</code> file extension.</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Input</th>\n<th>Output</th>\n<th>Output File Extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>preserve</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>.jsx</code></td>\n</tr>\n<tr>\n<td><code>react</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>React.createElement(\"div\")</code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-native</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-jsx</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>_jsx(\"div\", {}, void 0);</code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-jsxdev</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>_jsxDEV(\"div\", {}, void 0, false, {...}, this);</code></td>\n<td><code>.js</code></td>\n</tr>\n</tbody>\n</table>\n<p>You can specify this mode using either the <a href=\"/tsconfig#jsx\"><code>jsx</code></a> command line flag or the corresponding option <a href=\"/tsconfig#jsx\"><code>jsx</code> in your tsconfig.json</a> file.</p>\n<blockquote>\n<p>*Note: You can specify the JSX factory function to use when targeting react JSX emit with <a href=\"/tsconfig#jsxFactory\"><code>jsxFactory</code></a> option (defaults to <code>React.createElement</code>)</p>\n</blockquote>\n<h2 id=\"the-as-operator\" style=\"position:relative;\"><a href=\"#the-as-operator\" aria-label=\"the as operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>as</code> operator</h2>\n<p>Recall how to write a type assertion:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\">foo</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>This asserts the variable <code>bar</code> to have the type <code>foo</code>.\nSince TypeScript also uses angle brackets for type assertions, combining it with JSX’s syntax would introduce certain parsing difficulties. As a result, TypeScript disallows angle bracket type assertions in <code>.tsx</code> files.</p>\n<p>Since the above syntax cannot be used in <code>.tsx</code> files, an alternate type assertion operator should be used: <code>as</code>.\nThe example can easily be rewritten with the <code>as</code> operator.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">foo</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>The <code>as</code> operator is available in both <code>.ts</code> and <code>.tsx</code> files, and is identical in behavior to the angle-bracket type assertion style.</p>\n<h2 id=\"type-checking\" style=\"position:relative;\"><a href=\"#type-checking\" aria-label=\"type checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Checking</h2>\n<p>In order to understand type checking with JSX, you must first understand the difference between intrinsic elements and value-based elements.\nGiven a JSX expression <code>&#x3C;expr /></code>, <code>expr</code> may either refer to something intrinsic to the environment (e.g. a <code>div</code> or <code>span</code> in a DOM environment) or to a custom component that you’ve created.\nThis is important for two reasons:</p>\n<ol>\n<li>For React, intrinsic elements are emitted as strings (<code>React.createElement(\"div\")</code>), whereas a component you’ve created is not (<code>React.createElement(MyComponent)</code>).</li>\n<li>The types of the attributes being passed in the JSX element should be looked up differently.\nIntrinsic element attributes should be known <em>intrinsically</em> whereas components will likely want to specify their own set of attributes.</li>\n</ol>\n<p>TypeScript uses the <a href=\"http://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components\">same convention that React does</a> for distinguishing between these.\nAn intrinsic element always begins with a lowercase letter, and a value-based element always begins with an uppercase letter.</p>\n<h2 id=\"intrinsic-elements\" style=\"position:relative;\"><a href=\"#intrinsic-elements\" aria-label=\"intrinsic elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intrinsic elements</h2>\n<p>Intrinsic elements are looked up on the special interface <code>JSX.IntrinsicElements</code>.\nBy default, if this interface is not specified, then anything goes and intrinsic elements will not be type checked.\nHowever, if this interface <em>is</em> present, then the name of the intrinsic element is looked up as a property on the <code>JSX.IntrinsicElements</code> interface.\nFor example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<p>In the above example, <code>&#x3C;foo /></code> will work fine but <code>&#x3C;bar /></code> will result in an error since it has not been specified on <code>JSX.IntrinsicElements</code>.</p>\n<blockquote>\n<p>Note: You can also specify a catch-all string indexer on <code>JSX.IntrinsicElements</code> as follows:</p>\n</blockquote>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #001080\">elemName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"value-based-elements\" style=\"position:relative;\"><a href=\"#value-based-elements\" aria-label=\"value based elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Value-based elements</h2>\n<p>Value-based elements are simply looked up by identifiers that are in scope.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./myComponent\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">SomeOtherComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<p>There are two ways to define a value-based element:</p>\n<ol>\n<li>Function Component (FC)</li>\n<li>Class Component</li>\n</ol>\n<p>Because these two types of value-based elements are indistinguishable from each other in a JSX expression, first TS tries to resolve the expression as a Function Component using overload resolution. If the process succeeds, then TS finishes resolving the expression to its declaration. If the value fails to resolve as a Function Component, TS will then try to resolve it as a class component. If that fails, TS will report an error.</p>\n<h3 id=\"function-component\" style=\"position:relative;\"><a href=\"#function-component\" aria-label=\"function component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Component</h3>\n<p>As the name suggests, the component is defined as a JavaScript function where its first argument is a <code>props</code> object.\nTS enforces that its return type must be assignable to <code>JSX.Element</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FooProp</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">X</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">Y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">AnotherComponent</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ComponentFoo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FooProp</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">AnotherComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">name</span><span style=\"color: #000000\">={</span><span style=\"color: #1C6277\">prop</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">} /&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Button</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }, </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">color</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #001080\">button</span><span style=\"color: #000000\"> /&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Because a Function Component is simply a JavaScript function, function overloads may be used here as well:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ClickableProps' >ClickableProps</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ClickableProps.children: JSX.Element | JSX.Element[]' >children</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface HomeProps' >HomeProps</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ClickableProps' >ClickableProps</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) HomeProps.home: JSX.Element' >home</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface SideProps' >SideProps</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ClickableProps' >ClickableProps</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) SideProps.side: string | JSX.Element' >side</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function MainButton(prop: HomeProps): JSX.Element (+1 overload)' >MainButton</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) prop: HomeProps' >prop</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface HomeProps' >HomeProps</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function MainButton(prop: SideProps): JSX.Element (+1 overload)' >MainButton</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) prop: SideProps' >prop</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface SideProps' >SideProps</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function MainButton(prop: HomeProps): JSX.Element (+1 overload)' >MainButton</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) prop: ClickableProps' >prop</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ClickableProps' >ClickableProps</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='namespace JSX' >JSX</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='interface JSX.Element' >Element</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFABMCmBjANgIbxagC20GArniQFIDKAGqAN5qigCWkALlvADMCOErBqksvVgF92XXvyEjQASV7xuKTjjFYJvFKzkcA2igBcoFDw2QA5gF1LBSAE8A3HNmyQoALQBOJQ8AX5o3HyCwiQAwnjaANYEAEY0AApIAA6GbBw4ABaceBjEkJYMjAB0uvo8Jg6gAD6gFdXikjyesuEKUcoAEtASGdDZoFgAHnyQGIZxiSnpWTly+UNY5Uxteh1daD2RSiT0nNgjY5PTs6DzOEmpWOcrHFrYm1U1HU1WNtx2e2gBJRIDgeJxoJBQABZAjcABCwR4EIAFJkspZBsNlgBKd7bWqeIEgsEQ6GwyAInhIyCo9GgE5nHF4z68QnA0HgyEw+GIlFo0aWW73JajFC4lpbFk8IwcXyVeVoaRAA'>Try</a></div></pre>\n<blockquote>\n<p>Note: Function Components were formerly known as Stateless Function Components (SFC). As Function Components can no longer be considered stateless in recent versions of react, the type <code>SFC</code> and its alias <code>StatelessComponent</code> were deprecated.</p>\n</blockquote>\n<h3 id=\"class-component\" style=\"position:relative;\"><a href=\"#class-component\" aria-label=\"class component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Component</h3>\n<p>It is possible to define the type of a class component.\nHowever, to do so it is best to understand two new terms: the <em>element class type</em> and the <em>element instance type</em>.</p>\n<p>Given <code>&#x3C;Expr /></code>, the <em>element class type</em> is the type of <code>Expr</code>.\nSo in the example above, if <code>MyComponent</code> was an ES6 class the class type would be that class’s constructor and statics.\nIf <code>MyComponent</code> was a factory function, the class type would be that function.</p>\n<p>Once the class type is established, the instance type is determined by the union of the return types of the class type’s construct or call signatures (whichever is present).\nSo again, in the case of an ES6 class, the instance type would be the type of an instance of that class, and in the case of a factory function, it would be the type of the value returned from the function.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// use a construct signature</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myComponent</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MyComponent</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// element class type =&gt; MyComponent</span></div><div class='line'><span style=\"color: #008000\">// element instance type =&gt; { render: () =&gt; void }</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MyFactoryFunction</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">render</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {},</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// use a call signature</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myComponent</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">MyFactoryFunction</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// element class type =&gt; MyFactoryFunction</span></div><div class='line'><span style=\"color: #008000\">// element instance type =&gt; { render: () =&gt; void }</span></div></code></div></pre>\n<p>The element instance type is interesting because it must be assignable to <code>JSX.ElementClass</code> or it will result in an error.\nBy default <code>JSX.ElementClass</code> is <code>{}</code>, but it can be augmented to limit the use of JSX to only those types that conform to the proper interface.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementClass</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">render</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MyFactoryFunction</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">render</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {} };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyFactoryFunction</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NotAValidComponent</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">NotAValidFactoryFunction</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">NotAValidComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">NotAValidFactoryFunction</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<h2 id=\"attribute-type-checking\" style=\"position:relative;\"><a href=\"#attribute-type-checking\" aria-label=\"attribute type checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attribute type checking</h2>\n<p>The first step to type checking attributes is to determine the <em>element attributes type</em>.\nThis is slightly different between intrinsic and value-based elements.</p>\n<p>For intrinsic elements, it is the type of the property on <code>JSX.IntrinsicElements</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// element attributes type for 'foo' is '{bar?: boolean}'</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> /&gt;;</span></div></code></div></pre>\n<p>For value-based elements, it is a bit more complex.\nIt is determined by the type of a property on the <em>element instance type</em> that was previously determined.\nWhich property to use is determined by <code>JSX.ElementAttributesProperty</code>.\nIt should be declared with a single property.\nThe name of that property is then used.\nAs of TypeScript 2.8, if <code>JSX.ElementAttributesProperty</code> is not provided, the type of first parameter of the class element’s constructor or Function Component’s call will be used instead.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementAttributesProperty</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// specify the property name to use</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// specify the property on the element instance type</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// element attributes type for 'MyComponent' is '{foo?: string}'</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;;</span></div></code></div></pre>\n<p>The element attribute type is used to type check the attributes in the JSX.\nOptional and required properties are supported.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">optionalProp</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">optionalProp</span><span style=\"color: #000000\">={</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error, requiredProp is missing</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">={</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// error, requiredProp should be a string</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">unknownProp</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error, unknownProp does not exist</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">some</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">unknown</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok, because 'some-unknown-prop' is not a valid identifier</span></div></code></div></pre>\n<blockquote>\n<p>Note: If an attribute name is not a valid JS identifier (like a <code>data-*</code> attribute), it is not considered to be an error if it is not found in the element attributes type.</p>\n</blockquote>\n<p>Additionally, the <code>JSX.IntrinsicAttributes</code> interface can be used to specify extra properties used by the JSX framework which are not generally used by the components’ props or arguments - for instance <code>key</code> in React. Specializing further, the generic <code>JSX.IntrinsicClassAttributes&#x3C;T></code> type may also be used to specify the same kind of extra attributes just for class components (and not Function Components). In this type, the generic parameter corresponds to the class instance type. In React, this is used to allow the <code>ref</code> attribute of type <code>Ref&#x3C;T></code>. Generally speaking, all of the properties on these interfaces should be optional, unless you intend that users of your JSX framework need to provide some attribute on every tag.</p>\n<p>The spread operator also works:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">props</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">requiredProp:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> {...</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">badProps</span><span style=\"color: #000000\"> = {};</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> {...</span><span style=\"color: #001080\">badProps</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<h2 id=\"children-type-checking\" style=\"position:relative;\"><a href=\"#children-type-checking\" aria-label=\"children type checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Children Type Checking</h2>\n<p>In TypeScript 2.3, TS introduced type checking of <em>children</em>. <em>children</em> is a special property in an <em>element attributes type</em> where child <em>JSXExpression</em>s are taken to be inserted into the attributes.\nSimilar to how TS uses <code>JSX.ElementAttributesProperty</code> to determine the name of <em>props</em>, TS uses <code>JSX.ElementChildrenAttribute</code> to determine the name of <em>children</em> within those props.\n<code>JSX.ElementChildrenAttribute</code> should be declared with a single property.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementChildrenAttribute</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">: {}; </span><span style=\"color: #008000\">// specify children name to use</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">World</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">CustomComp</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;{props.</span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">CustomComp</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  {</span><span style=\"color: #A31515\">\"This is just a JS expression...\"</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1000</span><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">CustomComp</span><span style=\"color: #000000\">&gt;</span></div></code></div></pre>\n<p>You can specify the type of <em>children</em> like any other attribute. This will override the default type from, e.g. the <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">React typings</a> if you use them.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PropsType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">React</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">PropsType</span><span style=\"color: #000000\">, {}&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">      &lt;</span><span style=\"color: #1C6277\">h2</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">        {</span><span style=\"color: #001080\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #000000\">      &lt;/</span><span style=\"color: #001080\">h2</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    )</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\">&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Error: children is of type JSX.Element not array of JSX.Element</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h2</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h2</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\">&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Error: children is of type JSX.Element not array of JSX.Element or string.</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"baz\"</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">World</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\">&gt;</span></div></code></div></pre>\n<h2 id=\"the-jsx-result-type\" style=\"position:relative;\"><a href=\"#the-jsx-result-type\" aria-label=\"the jsx result type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The JSX result type</h2>\n<p>By default the result of a JSX expression is typed as <code>any</code>.\nYou can customize the type by specifying the <code>JSX.Element</code> interface.\nHowever, it is not possible to retrieve type information about the element, attributes or children of the JSX from this interface.\nIt is a black box.</p>\n<h2 id=\"embedding-expressions\" style=\"position:relative;\"><a href=\"#embedding-expressions\" aria-label=\"embedding expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Embedding Expressions</h2>\n<p>JSX allows you to embed expressions between tags by surrounding the expressions with curly braces (<code>{ }</code>).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\"> = (</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    {[\"</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">\", \"</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">\"].</span><span style=\"color: #001080\">map</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">) =&gt; (</span></div><div class='line'><span style=\"color: #000000\">      &lt;</span><span style=\"color: #1C6277\">span</span><span style=\"color: #000000\">&gt;{i / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    ))}</span></div><div class='line'><span style=\"color: #000000\">  &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>The above code will result in an error since you cannot divide a string by a number.\nThe output, when using the <code>preserve</code> option, looks like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\"> = (</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    {[\"</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">\", \"</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">\"].</span><span style=\"color: #001080\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;{</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> / 2}&lt;/</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">    })}</span></div><div class='line'><span style=\"color: #000000\">  &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"react-integration\" style=\"position:relative;\"><a href=\"#react-integration\" aria-label=\"react integration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React integration</h2>\n<p>To use JSX with React you should use the <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">React typings</a>.\nThese typings define the <code>JSX</code> namespace appropriately for use with React.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">path</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"react.d.ts\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Props</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">React</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Props</span><span style=\"color: #000000\">, {}&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">span</span><span style=\"color: #000000\">&gt;{this.props.</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">={</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<h3 id=\"configuring-jsx\" style=\"position:relative;\"><a href=\"#configuring-jsx\" aria-label=\"configuring jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring JSX</h3>\n<p>There are multiple compiler flags which can be used to customize your JSX, which work as both a compiler flag and via inline per-file pragmas. To learn more see their tsconfig reference pages:</p>\n<ul>\n<li><a href=\"/tsconfig#jsxFactory\"><code>jsxFactory</code></a></li>\n<li><a href=\"/tsconfig#jsxFragmentFactory\"><code>jsxFragmentFactory</code></a></li>\n<li><a href=\"/tsconfig#jsxImportSource\"><code>jsxImportSource</code></a></li>\n</ul>","headings":[{"value":"Basic usage","depth":2},{"value":"The as operator","depth":2},{"value":"Type Checking","depth":2},{"value":"Intrinsic elements","depth":2},{"value":"Value-based elements","depth":2},{"value":"Function Component","depth":3},{"value":"Class Component","depth":3},{"value":"Attribute type checking","depth":2},{"value":"Children Type Checking","depth":2},{"value":"The JSX result type","depth":2},{"value":"Embedding Expressions","depth":2},{"value":"React integration","depth":2},{"value":"Configuring JSX","depth":3}],"frontmatter":{"permalink":"/docs/handbook/jsx.html","title":"JSX","disable_toc":null,"handbook":null,"oneline":"Using JSX with TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-jsx","slug":"/docs/handbook/jsx.html","repoPath":"/packages/documentation/copy/en/reference/JSX.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.854Z"}},"staticQueryHashes":[]}