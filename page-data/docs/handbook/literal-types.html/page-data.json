{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/literal-types.html","result":{"data":{"markdownRemark":{"id":"09db39e4-b30a-5630-b8e2-fc0f03d05753","excerpt":"A literal is a more concrete sub-type of a collective type.\nWhat this means is that \"Hello World\" is a string, but a string is not \"Hello World\" inside the type…","html":"<p>A literal is a more concrete sub-type of a collective type.\nWhat this means is that <code>\"Hello World\"</code> is a <code>string</code>, but a <code>string</code> is not <code>\"Hello World\"</code> inside the type system.</p>\n<p>There are three sets of literal types available in TypeScript today: strings, numbers, and booleans; by using literal types you can allow an exact value which a string, number, or boolean must have.</p>\n<h2 id=\"literal-narrowing\" style=\"position:relative;\"><a href=\"#literal-narrowing\" aria-label=\"literal narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Narrowing</h2>\n<p>When you declare a variable via <code>var</code> or <code>let</code>, you are telling the compiler that there is the chance that this variable will change its contents.\nIn contrast, using <code>const</code> to declare a variable will inform TypeScript that this object will never change.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// We&apos;re making a guarantee that this variable</span></div><div class='line'><span style=\"color: #008000\">// helloWorld will never change, by using const.</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// So, TypeScript sets the type to be \"Hello World\", not string</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const helloWorld: \"Hello World\"' >helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// On the other hand, a let can change, and so the compiler declares it a string</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let hiWorld: string' >hiWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hi World\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEHUFMHICdNAWwIYGsCWA7A5qZpsBXZWZTAF0gXIAtlzRb0BnUANxPWQCMAbSAFAhQNSL14B7cBNi8AJqADu6caEyQ2kWKADGdHJAA0obgE9QhZllw6JmZuQB0AoWADKE4wBVTAB0huOrDovgzMkOSstNR+1BImCABEABJikhAy8onGmBJh5ME4Arb2DKLiUpkKALygKWnx0rJyiQDcLsIA8piMoqB5otr6csb4-Aw6ZLr62EZ4mArM8dG6Eoi+KlqgcpA6vCSQrOgM+A6F2ALjIuhN8qC1KegZzW1AA'>Try</a></div></pre>\n<p>The process of going from an infinite number of potential cases (there is an infinite number of possible string values) to a smaller, finite number of potential case (in <code>helloWorld</code>’s case: 1) is called narrowing.</p>\n<h2 id=\"string-literal-types\" style=\"position:relative;\"><a href=\"#string-literal-types\" aria-label=\"string literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Literal Types</h2>\n<p>In practice string literal types combine nicely with union types, type guards, and type aliases.\nYou can use these features together to get enum-like behavior with strings.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\"' >Easing</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"ease-in\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"ease-out\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"ease-in-out\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class UIElement' >UIElement</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) UIElement.animate(dx: number, dy: number, easing: Easing): void' >animate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dx: number' >dx</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dy: number' >dy</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) easing: Easing' >easing</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\"' >Easing</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) easing: Easing' >easing</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"ease-in\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) easing: \"ease-out\" | \"ease-in-out\"' >easing</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"ease-out\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) easing: \"ease-in-out\"' >easing</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"ease-in-out\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// It&apos;s possible that someone could reach this</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// by ignoring your types though.</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let button: UIElement' >button</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor UIElement(): UIElement' >UIElement</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let button: UIElement' >button</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) UIElement.animate(dx: number, dy: number, easing: Easing): void' >animate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"ease-in\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let button: UIElement' >button</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) UIElement.animate(dx: number, dy: number, easing: Easing): void' >animate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&quot;uneasy&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"uneasy\"' is not assignable to parameter of type 'Easing'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"uneasy\"' is not assignable to parameter of type 'Easing'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAKICGiAlgHYDmoAvKAESQ2QC0D7oAD4cuiXnACuBAcM7c+9HpOkBuPHgDGAGxqJQAVQCSFLZAC2kegVABvPKFBV6tM1QKQAFABMAHqnoSZgBGMAA0oF5E-oEh0OGiDIyo1HRMAJS29g6gtABmoB4JTKwsbHJiCuwZdtnZIKAAdE1ZDgC+oJBaYjn5hTSJJWWi4lJVmbXtnd15BUXMpUPyDEqj1S2gk13kNbWg9YYEAOR6JHCIdEGmoAQAFm6giHAWcPTkGpJaXqDQXBo31zdaIh1g56kEiDlGPQEAMiJJoNdSJA9LdJIwbg11q0stjsXhTNYglICC9WKBXgB3AzGUwWKweNJqIkEEn0BpOFxuTwABnCvJES3oVSZxJe7OcrncHn5-PYEleNCIwqAA'>Try</a></div></pre>\n<p>You can pass any of the three allowed strings, but any other string will give the error</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Argument of type '\"uneasy\"' is not assignable to parameter of type '\"ease-in\" | \"ease-out\" | \"ease-in-out\"'</span></div></code></div></pre>\n<p>String literal types can be used in the same way to distinguish overloads:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"img\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLImageElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"input\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLInputElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ... more overloads ...</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... code goes here ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"numeric-literal-types\" style=\"position:relative;\"><a href=\"#numeric-literal-types\" aria-label=\"numeric literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numeric Literal Types</h2>\n<p>TypeScript also has numeric literal types, which act the same as the string literals above.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function rollDice(): 1 | 2 | 3 | 4 | 5 | 6' >rollDice</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.floor(x: number): number' >floor</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() * </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">) + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const result: 1 | 2 | 3 | 4 | 5 | 6' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function rollDice(): 1 | 2 | 3 | 4 | 5 | 6' >rollDice</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAJzgGzQERhApgCgEoAuRARkQB9EAmKxAZnoBZ6BWegNkQG8AoRClxQQyJPgCyAQygALAHTA0cOMkkyFyKWAAmcALZFEAKkSdCiANTkLUgM7l6dak2qtqHapwDcfAL58fBAIdlBCdiBoYQC8KOhYOASE3kA'>Try</a></div></pre>\n<p>A common case for their use is for describing config values:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface MapConfig' >MapConfig</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) MapConfig.lng: number' >lng</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) MapConfig.lat: number' >lat</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) MapConfig.tileSize: 8 | 16 | 32' >tileSize</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">16</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setupMap(config: MapConfig): void' >setupMap</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) MapConfig.lng: number' >lng</data-lsp>:</span><span style=\"color: #000000\"> -</span><span style=\"color: #098658\">73.935242</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) MapConfig.lat: number' >lat</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">40.73061</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) MapConfig.tileSize: 8 | 16 | 32' >tileSize</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">16</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIGECcFMEMAusDO57gLbwA7gMawB2ycAJuouADYD2+w1S4IwAUGbPk3OAGYBXIvkQBLWkXApYiATgCyuABT4JfUQHMAXOEU5IazQEodAN1qiyAbjbBg4ALRP8AxE4dtRJWND7xCurgGROoa4ADebOA0RNrgRAKYAEY+NtFMiDoJyalR4GLUsADKogBesDoAHOAAPuAAjABsteAAzABMNgC+bGzSsgrK4TFxDgDsrQB0AJytAKztACztADQ0SDqLAAyTE1uN9WsFxWUVDc1dRlZAA'>Try</a></div></pre>\n<h2 id=\"boolean-literal-types\" style=\"position:relative;\"><a href=\"#boolean-literal-types\" aria-label=\"boolean literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean Literal Types</h2>\n<p>TypeScript also has boolean literal types. You might use these to constrain object values whose properties are interrelated.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ValidationSuccess' >ValidationSuccess</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ValidationSuccess.isValid: true' >isValid</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ValidationSuccess.reason: null' >reason</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ValidationFailure' >ValidationFailure</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ValidationFailure.isValid: false' >isValid</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ValidationFailure.reason: string' >reason</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ValidationResult = ValidationSuccess | ValidationFailure' >ValidationResult</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ValidationSuccess' >ValidationSuccess</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ValidationFailure' >ValidationFailure</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgGpwDbACZzMAexAGUBXBJAZ0uQG8AoZZYS9LbALmTClIgG5GyKBDiUiXEKQwZBAX3r1QkWIhRsceQiABicYBlIi6Qlhs7J4GSgKEixE5JR6gA5vMVgAngAd1mTXwiACUISmkwZABeNADcIJJyKhoAH1j2LSI9AyMBIA'>Try</a></div></pre>","headings":[{"value":"Literal Narrowing","depth":2},{"value":"String Literal Types","depth":2},{"value":"Numeric Literal Types","depth":2},{"value":"Boolean Literal Types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/literal-types.html","title":"Literal Types","disable_toc":null,"handbook":"true","oneline":"Using literal types with TypeScript","preamble":null,"deprecated_by":"/docs/handbook/2/everyday-types.html#literal-types","deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"slug":"/docs/handbook/literal-types.html","repoPath":"/packages/documentation/copy/en/handbook-v1/Literal Types.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}