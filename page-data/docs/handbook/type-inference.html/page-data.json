{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/type-inference.html","result":{"data":{"markdownRemark":{"id":"1180d3b8-8ba9-5ee8-a03a-c2eabb9c97ab","excerpt":"In TypeScript, there are several places where type inference is used to provide type information when there is no explicit type annotation. For example, in this…","html":"<p>In TypeScript, there are several places where type inference is used to provide type information when there is no explicit type annotation. For example, in this code</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: number'>x</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">;</span>\n<span class='query'>//  ^ = let x: number</span></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAHhC8EGYDcAoA9GiEB6B+IA'>Try</a></div></pre>\n<p>The type of the <code>x</code> variable is inferred to be <code>number</code>.\nThis kind of inference takes place when initializing variables and members, setting parameter default values, and determining function return types.</p>\n<p>In most cases, type inference is straightforward.\nIn the following sections, we’ll explore some of the nuances in how types are inferred.</p>\n<h2 id=\"best-common-type\" style=\"position:relative;\"><a href=\"#best-common-type\" aria-label=\"best common type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best common type</h2>\n<p>When a type inference is made from several expressions, the types of those expressions are used to calculate a “best common type”. For example,</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: (number | null)[]'>x</data-lsp> </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">];</span>\n<span class='query'>//  ^ = let x: (number | null)[]</span></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAHhC8EG0AMAaCBGNA7ArsYAugNwBQA9GRBAHoD8QA'>Try</a></div></pre>\n<p>To infer the type of <code>x</code> in the example above, we must consider the type of each array element.\nHere we are given two choices for the type of the array: <code>number</code> and <code>null</code>.\nThe best common type algorithm considers each candidate type, and picks the type that is compatible with all the other candidates.</p>\n<p>Because the best common type has to be chosen from the provided candidate types, there are some cases where types share a common structure, but no one type is the super type of all candidate types. For example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let zoo: (Rhino | Elephant | Snake)[]'>zoo</data-lsp> </span><span style=\"color: #000000\">= [</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Rhino(): Rhino'>Rhino</data-lsp>(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Elephant(): Elephant'>Elephant</data-lsp>(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Snake(): Snake'>Snake</data-lsp>()];</span>\n<span class='query'>//    ^ = let zoo: (Rhino | Elephant | Snake)[]</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFCLaaSSgCCAdvALY6gDeAvkSWaAEoAW8VA9qDwAPaHioATctToNGBUKG6kAEv1hU0cAK54A3AVbFS5AKLY8AB2VVoQ0eKmUa9bEwVLSAFVjaqAay1ffUM2E1AAZSpMfzx7MUlpFzkPZUgAGTwAc0g0LFwQ1hBQAFoyxG1oMpKCCzsAL35BAF5QAG0qPAB3Ll4BAAoASgAaUE6e8ysbaCHR8cjo2KGAXQNixVAAPQB+IA'>Try</a></div></pre>\n<p>Ideally, we may want <code>zoo</code> to be inferred as an <code>Animal[]</code>, but because there is no object that is strictly of type <code>Animal</code> in the array, we make no inference about the array element type.\nTo correct this, instead explicitly provide the type when no one type is a super type of all other candidates:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let zoo: Animal[]'>zoo</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='class Animal'>Animal</data-lsp>[] </span><span style=\"color: #000000\">= [</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Rhino(): Rhino'>Rhino</data-lsp>(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Elephant(): Elephant'>Elephant</data-lsp>(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Snake(): Snake'>Snake</data-lsp>()];</span>\n<span class='query'>//    ^ = let zoo: Animal[]</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFCLaaSSgCCAdvALY6gDeAvkSWaAEoAW8VA9qDwAPaHioATctToNGBUKG6kAEv1hU0cAK54A3AVbFS5AKLY8AB2VVoQ0eKmUa9bEwVLSAFVjaqAay1ffUM2E1AAZSpMfzx7MUlpFzkPZUgAGTwAc0g0LFwQ1hBQAFoyxG1oMpKCCzsAL35+NBlXAG0AXVAAXlA2qjwAdy5eAQAKAEoAGlAB4fMrG2hJmbnI6NjJjoNixVAAPQB+IA'>Try</a></div></pre>\n<p>When no best common type is found, the resulting inference is the union array type, <code>(Rhino | Elephant | Snake)[]</code>.</p>\n<h2 id=\"contextual-typing\" style=\"position:relative;\"><a href=\"#contextual-typing\" aria-label=\"contextual typing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contextual Typing</h2>\n<p>Type inference also works in “the other direction” in some cases in TypeScript.\nThis is known as “contextual typing”. Contextual typing occurs when the type of an expression is implied by its location. For example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">window.onmousedown = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">mouseEvent</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">mouseEvent</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">button</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">//&lt;- OK</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">mouseEvent</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">kangaroo</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">//&lt;- Error!</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n<p>Here, the TypeScript type checker used the type of the <code>Window.onmousedown</code> function to infer the type of the function expression on the right hand side of the assignment.\nWhen it did so, it was able to infer the <a href=\"https://developer.mozilla.org/docs/Web/API/MouseEvent\">type</a> of the <code>mouseEvent</code> parameter, which does contain a <code>button</code> property, but not a <code>kangaroo</code> property.</p>\n<p>TypeScript is smart enough to infer types in other contexts as well:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">window.onscroll = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">uiEvent</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">uiEvent</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">button</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">//&lt;- Error!</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n<p>Based on the fact that the above function is being assigned to <code>Window.onscroll</code>, TypeScript knows that <code>uiEvent</code> is a <a href=\"https://developer.mozilla.org/docs/Web/API/UIEvent\">UIEvent</a>, and not a <a href=\"https://developer.mozilla.org/docs/Web/API/MouseEvent\">MouseEvent</a> like the previous example. <code>UIEvent</code> objects contain no <code>button</code> property, and so TypeScript will throw an error.</p>\n<p>If this function were not in a contextually typed position, the function’s argument would implicitly have type <code>any</code>, and no error would be issued (unless you are using the <code>--noImplicitAny</code> option):</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">handler </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">uiEvent</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">uiEvent</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">button</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">//&lt;- OK</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n<p>We can also explicitly give type information to the function’s argument to override any contextual type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">window.onscroll = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">uiEvent</span><span style=\"color: #000000\">: any) {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #1A1A1A\">uiEvent</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">button</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">//&lt;- Now, no error is given</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n<p>However, this code will log <code>undefined</code>, since <code>uiEvent</code> has no property called <code>button</code>.</p>\n<p>Contextual typing applies in many cases.\nCommon cases include arguments to function calls, right hand sides of assignments, type assertions, members of object and array literals, and return statements.\nThe contextual type also acts as a candidate type in best common type. For example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> createZoo(): Animal[] {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Rhino(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Elephant(), </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Snake()];</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>In this example, best common type has a set of four candidates: <code>Animal</code>, <code>Rhino</code>, <code>Elephant</code>, and <code>Snake</code>.\nOf these, <code>Animal</code> can be chosen by the best common type algorithm.</p>","headings":[{"value":"Best common type","depth":2},{"value":"Contextual Typing","depth":2}],"frontmatter":{"permalink":"/docs/handbook/type-inference.html","title":"Type Inference","disable_toc":null,"handbook":null,"oneline":"How code flow analysis works in TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2type-inference","slug":"/docs/handbook/type-inference.html","repoPath":"/packages/documentation/copy/en/reference/Type Inference.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.619Z"}},"staticQueryHashes":[]}