{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/module-resolution.html","result":{"data":{"markdownRemark":{"id":"43fdf200-011e-5d58-b908-b90dc068a825","excerpt":"This section assumes some basic knowledge about modules.\nPlease see the Modules documentation for more information. Module resolution is the process the…","html":"<blockquote>\n<p>This section assumes some basic knowledge about modules.\nPlease see the <a href=\"/docs/handbook/modules.html\">Modules</a> documentation for more information.</p>\n</blockquote>\n<p><em>Module resolution</em> is the process the compiler uses to figure out what an import refers to.\nConsider an import statement like <code>import { a } from \"moduleA\"</code>;\nin order to check any use of <code>a</code>, the compiler needs to know exactly what it represents, and will need to check its definition <code>moduleA</code>.</p>\n<p>At this point, the compiler will ask “what’s the shape of <code>moduleA</code>?”\nWhile this sounds straightforward, <code>moduleA</code> could be defined in one of your own <code>.ts</code>/<code>.tsx</code> files, or in a <code>.d.ts</code> that your code depends on.</p>\n<p>First, the compiler will try to locate a file that represents the imported module.\nTo do so the compiler follows one of two different strategies: <a href=\"#classic\">Classic</a> or <a href=\"#node\">Node</a>.\nThese strategies tell the compiler <em>where</em> to look for <code>moduleA</code>.</p>\n<p>If that didn’t work and if the module name is non-relative (and in the case of <code>\"moduleA\"</code>, it is), then the compiler will attempt to locate an <a href=\"/docs/handbook/modules.html#ambient-modules\">ambient module declaration</a>.\nWe’ll cover non-relative imports next.</p>\n<p>Finally, if the compiler could not resolve the module, it will log an error.\nIn this case, the error would be something like <code>error TS2307: Cannot find module 'moduleA'.</code></p>\n<h2 id=\"relative-vs-non-relative-module-imports\" style=\"position:relative;\"><a href=\"#relative-vs-non-relative-module-imports\" aria-label=\"relative vs non relative module imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relative vs. Non-relative module imports</h2>\n<p>Module imports are resolved differently based on whether the module reference is relative or non-relative.</p>\n<p>A <em>relative import</em> is one that starts with <code>/</code>, <code>./</code> or <code>../</code>.\nSome examples include:</p>\n<ul>\n<li><code>import Entry from \"./components/Entry\";</code></li>\n<li><code>import { DefaultHeaders } from \"../constants/http\";</code></li>\n<li><code>import \"/mod\";</code></li>\n</ul>\n<p>Any other import is considered <strong>non-relative</strong>.\nSome examples include:</p>\n<ul>\n<li><code>import * as $ from \"jquery\";</code></li>\n<li><code>import { Component } from \"@angular/core\";</code></li>\n</ul>\n<p>A relative import is resolved relative to the importing file and <em>cannot</em> resolve to an ambient module declaration.\nYou should use relative imports for your own modules that are guaranteed to maintain their relative location at runtime.</p>\n<p>A non-relative import can be resolved relative to <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a>, or through path mapping, which we’ll cover below.\nThey can also resolve to <a href=\"/docs/handbook/modules.html#ambient-modules\">ambient module declarations</a>.\nUse non-relative paths when importing any of your external dependencies.</p>\n<h2 id=\"module-resolution-strategies\" style=\"position:relative;\"><a href=\"#module-resolution-strategies\" aria-label=\"module resolution strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module Resolution Strategies</h2>\n<p>There are two possible module resolution strategies: <a href=\"#node\">Node</a> and <a href=\"#classic\">Classic</a>.\nYou can use the <a href=\"/tsconfig#moduleResolution\"><code>moduleResolution</code></a> option to specify the module resolution strategy.\nIf not specified, the default is <a href=\"#node\">Node</a> for <code>--module commonjs</code>, and <a href=\"#classic\">Classic</a> otherwise (including when <a href=\"/tsconfig#module\"><code>module</code></a> is set to <code>amd</code>, <code>system</code>, <code>umd</code>, <code>es2015</code>, <code>esnext</code>, etc.).</p>\n<blockquote>\n<p>Note: <code>node</code> module resolution is the most-commonly used in the TypeScript community and is recommended for most projects.\nIf you are having resolution problems with <code>import</code>s and <code>export</code>s in TypeScript, try setting <code>moduleResolution: \"node\"</code> to see if it fixes the issue.</p>\n</blockquote>\n<h3 id=\"classic\" style=\"position:relative;\"><a href=\"#classic\" aria-label=\"classic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classic</h3>\n<p>This used to be TypeScript’s default resolution strategy.\nNowadays, this strategy is mainly present for backward compatibility.</p>\n<p>A relative import will be resolved relative to the importing file.\nSo <code>import { b } from \"./moduleB\"</code> in source file <code>/root/src/folder/A.ts</code> would result in the following lookups:</p>\n<ol>\n<li><code>/root/src/folder/moduleB.ts</code></li>\n<li><code>/root/src/folder/moduleB.d.ts</code></li>\n</ol>\n<p>For non-relative module imports, however, the compiler walks up the directory tree starting with the directory containing the importing file, trying to locate a matching definition file.</p>\n<p>For example:</p>\n<p>A non-relative import to <code>moduleB</code> such as <code>import { b } from \"moduleB\"</code>, in a source file <code>/root/src/folder/A.ts</code>, would result in attempting the following locations for locating <code>\"moduleB\"</code>:</p>\n<ol>\n<li><code>/root/src/folder/moduleB.ts</code></li>\n<li><code>/root/src/folder/moduleB.d.ts</code></li>\n<li><code>/root/src/moduleB.ts</code></li>\n<li><code>/root/src/moduleB.d.ts</code></li>\n<li><code>/root/moduleB.ts</code></li>\n<li><code>/root/moduleB.d.ts</code></li>\n<li><code>/moduleB.ts</code></li>\n<li><code>/moduleB.d.ts</code></li>\n</ol>\n<h3 id=\"node\" style=\"position:relative;\"><a href=\"#node\" aria-label=\"node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node</h3>\n<p>This resolution strategy attempts to mimic the <a href=\"https://nodejs.org/\">Node.js</a> module resolution mechanism at runtime.\nThe full Node.js resolution algorithm is outlined in <a href=\"https://nodejs.org/api/modules.html#modules_all_together\">Node.js module documentation</a>.</p>\n<h4 id=\"how-nodejs-resolves-modules\" style=\"position:relative;\"><a href=\"#how-nodejs-resolves-modules\" aria-label=\"how nodejs resolves modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How Node.js resolves modules</h4>\n<p>To understand what steps the TS compiler will follow, it is important to shed some light on Node.js modules.\nTraditionally, imports in Node.js are performed by calling a function named <code>require</code>.\nThe behavior Node.js takes will differ depending on if <code>require</code> is given a relative path or a non-relative path.</p>\n<p>Relative paths are fairly straightforward.\nAs an example, let’s consider a file located at <code>/root/src/moduleA.js</code>, which contains the import <code>var x = require(\"./moduleB\");</code>\nNode.js resolves that import in the following order:</p>\n<ol>\n<li>\n<p>Ask the file named <code>/root/src/moduleB.js</code>, if it exists.</p>\n</li>\n<li>\n<p>Ask the folder <code>/root/src/moduleB</code> if it contains a file named <code>package.json</code> that specifies a <code>\"main\"</code> module.\nIn our example, if Node.js found the file <code>/root/src/moduleB/package.json</code> containing <code>{ \"main\": \"lib/mainModule.js\" }</code>, then Node.js will refer to <code>/root/src/moduleB/lib/mainModule.js</code>.</p>\n</li>\n<li>\n<p>Ask the folder <code>/root/src/moduleB</code> if it contains a file named <code>index.js</code>.\nThat file is implicitly considered that folder’s “main” module.</p>\n</li>\n</ol>\n<p>You can read more about this in Node.js documentation on <a href=\"https://nodejs.org/api/modules.html#modules_file_modules\">file modules</a> and <a href=\"https://nodejs.org/api/modules.html#modules_folders_as_modules\">folder modules</a>.</p>\n<p>However, resolution for a <a href=\"#relative-vs-non-relative-module-imports\">non-relative module name</a> is performed differently.\nNode will look for your modules in special folders named <code>node_modules</code>.\nA <code>node_modules</code> folder can be on the same level as the current file, or higher up in the directory chain.\nNode will walk up the directory chain, looking through each <code>node_modules</code> until it finds the module you tried to load.</p>\n<p>Following up our example above, consider if <code>/root/src/moduleA.js</code> instead used a non-relative path and had the import <code>var x = require(\"moduleB\");</code>.\nNode would then try to resolve <code>moduleB</code> to each of the locations until one worked.</p>\n<ol>\n<li><code>/root/src/node_modules/moduleB.js</code></li>\n<li><code>/root/src/node_modules/moduleB/package.json</code> (if it specifies a <code>\"main\"</code> property)</li>\n<li><code>/root/src/node_modules/moduleB/index.js</code>\n<br /><br /></li>\n<li><code>/root/node_modules/moduleB.js</code></li>\n<li><code>/root/node_modules/moduleB/package.json</code> (if it specifies a <code>\"main\"</code> property)</li>\n<li><code>/root/node_modules/moduleB/index.js</code>\n<br /><br /></li>\n<li><code>/node_modules/moduleB.js</code></li>\n<li><code>/node_modules/moduleB/package.json</code> (if it specifies a <code>\"main\"</code> property)</li>\n<li><code>/node_modules/moduleB/index.js</code></li>\n</ol>\n<p>Notice that Node.js jumped up a directory in steps (4) and (7).</p>\n<p>You can read more about the process in Node.js documentation on <a href=\"https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\">loading modules from <code>node_modules</code></a>.</p>\n<h4 id=\"how-typescript-resolves-modules\" style=\"position:relative;\"><a href=\"#how-typescript-resolves-modules\" aria-label=\"how typescript resolves modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How TypeScript resolves modules</h4>\n<p>TypeScript will mimic the Node.js run-time resolution strategy in order to locate definition files for modules at compile-time.\nTo accomplish this, TypeScript overlays the TypeScript source file extensions (<code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code>) over Node’s resolution logic.\nTypeScript will also use a field in <code>package.json</code> named <code>types</code> to mirror the purpose of <code>\"main\"</code> - the compiler will use it to find the “main” definition file to consult.</p>\n<p>For example, an import statement like <code>import { b } from \"./moduleB\"</code> in <code>/root/src/moduleA.ts</code> would result in attempting the following locations for locating <code>\"./moduleB\"</code>:</p>\n<ol>\n<li><code>/root/src/moduleB.ts</code></li>\n<li><code>/root/src/moduleB.tsx</code></li>\n<li><code>/root/src/moduleB.d.ts</code></li>\n<li><code>/root/src/moduleB/package.json</code> (if it specifies a <code>types</code> property)</li>\n<li><code>/root/src/moduleB/index.ts</code></li>\n<li><code>/root/src/moduleB/index.tsx</code></li>\n<li><code>/root/src/moduleB/index.d.ts</code></li>\n</ol>\n<p>Recall that Node.js looked for a file named <code>moduleB.js</code>, then an applicable <code>package.json</code>, and then for an <code>index.js</code>.</p>\n<p>Similarly, a non-relative import will follow the Node.js resolution logic, first looking up a file, then looking up an applicable folder.\nSo <code>import { b } from \"moduleB\"</code> in source file <code>/root/src/moduleA.ts</code> would result in the following lookups:</p>\n<ol>\n<li><code>/root/src/node_modules/moduleB.ts</code></li>\n<li><code>/root/src/node_modules/moduleB.tsx</code></li>\n<li><code>/root/src/node_modules/moduleB.d.ts</code></li>\n<li><code>/root/src/node_modules/moduleB/package.json</code> (if it specifies a <code>types</code> property)</li>\n<li><code>/root/src/node_modules/@types/moduleB.d.ts</code></li>\n<li><code>/root/src/node_modules/moduleB/index.ts</code></li>\n<li><code>/root/src/node_modules/moduleB/index.tsx</code></li>\n<li><code>/root/src/node_modules/moduleB/index.d.ts</code>\n<br /><br /></li>\n<li><code>/root/node_modules/moduleB.ts</code></li>\n<li><code>/root/node_modules/moduleB.tsx</code></li>\n<li><code>/root/node_modules/moduleB.d.ts</code></li>\n<li><code>/root/node_modules/moduleB/package.json</code> (if it specifies a <code>types</code> property)</li>\n<li><code>/root/node_modules/@types/moduleB.d.ts</code></li>\n<li><code>/root/node_modules/moduleB/index.ts</code></li>\n<li><code>/root/node_modules/moduleB/index.tsx</code></li>\n<li><code>/root/node_modules/moduleB/index.d.ts</code>\n<br /><br /></li>\n<li><code>/node_modules/moduleB.ts</code></li>\n<li><code>/node_modules/moduleB.tsx</code></li>\n<li><code>/node_modules/moduleB.d.ts</code></li>\n<li><code>/node_modules/moduleB/package.json</code> (if it specifies a <code>types</code> property)</li>\n<li><code>/node_modules/@types/moduleB.d.ts</code></li>\n<li><code>/node_modules/moduleB/index.ts</code></li>\n<li><code>/node_modules/moduleB/index.tsx</code></li>\n<li><code>/node_modules/moduleB/index.d.ts</code></li>\n</ol>\n<p>Don’t be intimidated by the number of steps here - TypeScript is still only jumping up directories twice at steps (9) and (17).\nThis is really no more complex than what Node.js itself is doing.</p>\n<h2 id=\"additional-module-resolution-flags\" style=\"position:relative;\"><a href=\"#additional-module-resolution-flags\" aria-label=\"additional module resolution flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional module resolution flags</h2>\n<p>A project source layout sometimes does not match that of the output.\nUsually a set of build steps result in generating the final output.\nThese include compiling <code>.ts</code> files into <code>.js</code>, and copying dependencies from different source locations to a single output location.\nThe net result is that modules at runtime may have different names than the source files containing their definitions.\nOr module paths in the final output may not match their corresponding source file paths at compile time.</p>\n<p>The TypeScript compiler has a set of additional flags to <em>inform</em> the compiler of transformations that are expected to happen to the sources to generate the final output.</p>\n<p>It is important to note that the compiler will <em>not</em> perform any of these transformations;\nit just uses these pieces of information to guide the process of resolving a module import to its definition file.</p>\n<h3 id=\"base-url\" style=\"position:relative;\"><a href=\"#base-url\" aria-label=\"base url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Base URL</h3>\n<p>Using a <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a> is a common practice in applications using AMD module loaders where modules are “deployed” to a single folder at run-time.\nThe sources of these modules can live in different directories, but a build script will put them all together.</p>\n<p>Setting <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a> informs the compiler where to find modules.\nAll module imports with non-relative names are assumed to be relative to the <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a>.</p>\n<p>Value of <em>baseUrl</em> is determined as either:</p>\n<ul>\n<li>value of <em>baseUrl</em> command line argument (if given path is relative, it is computed based on current directory)</li>\n<li>value of <em>baseUrl</em> property in ‘tsconfig.json’ (if given path is relative, it is computed based on the location of ‘tsconfig.json’)</li>\n</ul>\n<p>Note that relative module imports are not impacted by setting the baseUrl, as they are always resolved relative to their importing files.</p>\n<p>You can find more documentation on baseUrl in <a href=\"http://requirejs.org/docs/api.html#config-baseUrl\">RequireJS</a> and <a href=\"https://github.com/systemjs/systemjs/blob/main/docs/api.md\">SystemJS</a> documentation.</p>\n<h3 id=\"path-mapping\" style=\"position:relative;\"><a href=\"#path-mapping\" aria-label=\"path mapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path mapping</h3>\n<p>Sometimes modules are not directly located under <em>baseUrl</em>.\nFor instance, an import to a module <code>\"jquery\"</code> would be translated at runtime to <code>\"node_modules/jquery/dist/jquery.slim.min.js\"</code>.\nLoaders use a mapping configuration to map module names to files at run-time, see <a href=\"http://requirejs.org/docs/api.html#config-paths\">RequireJs documentation</a> and <a href=\"https://github.com/systemjs/systemjs/blob/main/docs/import-maps.md\">SystemJS documentation</a>.</p>\n<p>The TypeScript compiler supports the declaration of such mappings using <a href=\"/tsconfig#paths\"><code>paths</code></a> property in <code>tsconfig.json</code> files.\nHere is an example for how to specify the <a href=\"/tsconfig#paths\"><code>paths</code></a> property for <code>jquery</code>.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// This must be specified if \"paths\" is.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node_modules/jquery/dist/jquery\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// This mapping is relative to \"baseUrl\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Please notice that <a href=\"/tsconfig#paths\"><code>paths</code></a> are resolved relative to <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a>.\nWhen setting <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a> to a value other than <code>\".\"</code>, i.e. the directory of <code>tsconfig.json</code>, the mappings must be changed accordingly.\nSay, you set <code>\"baseUrl\": \"./src\"</code> in the above example, then jquery should be mapped to <code>\"../node_modules/jquery/dist/jquery\"</code>.</p>\n<p>Using <a href=\"/tsconfig#paths\"><code>paths</code></a> also allows for more sophisticated mappings including multiple fall back locations.\nConsider a project configuration where only some modules are available in one location, and the rest are in another.\nA build step would put them all together in one place.\nThe project layout may look like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code>projectRoot\n├── folder1\n│   ├── file1.ts (imports 'folder1/file2' and 'folder2/file3')\n│   └── file2.ts\n├── generated\n│   ├── folder1\n│   └── folder2\n│       └── file3.ts\n└── tsconfig.json</code></div></pre><!-- Note from shiki-twoslash: the language tree was not set up for Shiki to use, and so there is no code highlighting --!>\n<p>The corresponding <code>tsconfig.json</code> would look like:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This tells the compiler for any module import that matches the pattern <code>\"*\"</code> (i.e. all values), to look in two locations:</p>\n<ol>\n<li><code>\"*\"</code>: meaning the same name unchanged, so map <code>&#x3C;moduleName></code> => <code>&#x3C;baseUrl>/&#x3C;moduleName></code></li>\n<li><code>\"generated/*\"</code> meaning the module name with an appended prefix “generated”, so map <code>&#x3C;moduleName></code> => <code>&#x3C;baseUrl>/generated/&#x3C;moduleName></code></li>\n</ol>\n<p>Following this logic, the compiler will attempt to resolve the two imports as such:</p>\n<p>import ‘folder1/file2’:</p>\n<ol>\n<li>pattern ’*’ is matched and wildcard captures the whole module name</li>\n<li>try first substitution in the list: ’*’ -> <code>folder1/file2</code></li>\n<li>result of substitution is non-relative name - combine it with <em>baseUrl</em> -> <code>projectRoot/folder1/file2.ts</code>.</li>\n<li>File exists. Done.</li>\n</ol>\n<p>import ‘folder2/file3’:</p>\n<ol>\n<li>pattern ’*’ is matched and wildcard captures the whole module name</li>\n<li>try first substitution in the list: ’*’ -> <code>folder2/file3</code></li>\n<li>result of substitution is non-relative name - combine it with <em>baseUrl</em> -> <code>projectRoot/folder2/file3.ts</code>.</li>\n<li>File does not exist, move to the second substitution</li>\n<li>second substitution ‘generated/*’ -> <code>generated/folder2/file3</code></li>\n<li>result of substitution is non-relative name - combine it with <em>baseUrl</em> -> <code>projectRoot/generated/folder2/file3.ts</code>.</li>\n<li>File exists. Done.</li>\n</ol>\n<h3 id=\"virtual-directories-with-rootdirs\" style=\"position:relative;\"><a href=\"#virtual-directories-with-rootdirs\" aria-label=\"virtual directories with rootdirs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual Directories with <code>rootDirs</code></h3>\n<p>Sometimes the project sources from multiple directories at compile time are all combined to generate a single output directory.\nThis can be viewed as a set of source directories create a “virtual” directory.</p>\n<p>Using <code>rootDirs</code>, you can inform the compiler of the <em>roots</em> making up this “virtual” directory;\nand thus the compiler can resolve relative modules imports within these “virtual” directories <em>as if</em> they were merged together in one directory.</p>\n<p>For example consider this project structure:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code> src\n └── views\n     └── view1.ts (imports './template1')\n     └── view2.ts\n\n generated\n └── templates\n         └── views\n             └── template1.ts (imports './view2')</code></div></pre><!-- Note from shiki-twoslash: the language tree was not set up for Shiki to use, and so there is no code highlighting --!>\n<p>Files in <code>src/views</code> are user code for some UI controls.\nFiles in <code>generated/templates</code> are UI template binding code auto-generated by a template generator as part of the build.\nA build step will copy the files in <code>/src/views</code> and <code>/generated/templates/views</code> to the same directory in the output.\nAt run-time, a view can expect its template to exist next to it, and thus should import it using a relative name as <code>\"./template\"</code>.</p>\n<p>To specify this relationship to the compiler, use <a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a>.\n<a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a> specify a list of <em>roots</em> whose contents are expected to merge at run-time.\nSo following our example, the <code>tsconfig.json</code> file should look like:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Every time the compiler sees a relative module import in a subfolder of one of the <a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a>, it will attempt to look for this import in each of the entries of <a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a>.</p>\n<p>The flexibility of <a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a> is not limited to specifying a list of physical source directories that are logically merged. The supplied array may include any number of ad hoc, arbitrary directory names, regardless of whether they exist or not. This allows the compiler to capture sophisticated bundling and runtime features such as conditional inclusion and project specific loader plugins in a type safe way.</p>\n<p>Consider an internationalization scenario where a build tool automatically generates locale specific bundles by interpolating a special path token, say <code>#{locale}</code>, as part of a relative module path such as <code>./#{locale}/messages</code>. In this hypothetical setup the tool enumerates supported locales, mapping the abstracted path into <code>./zh/messages</code>, <code>./de/messages</code>, and so forth.</p>\n<p>Assume that each of these modules exports an array of strings. For example <code>./zh/messages</code> might contain:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> [</span><span style=\"color: #A31515\">\"您好吗\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"很高兴认识你\"</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>By leveraging <a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a> we can inform the compiler of this mapping and thereby allow it to safely resolve <code>./#{locale}/messages</code>, even though the directory will never exist. For example, with the following <code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/zh\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"src/de\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"src/#{locale}\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The compiler will now resolve <code>import messages from './#{locale}/messages'</code> to <code>import messages from './zh/messages'</code> for tooling purposes, allowing development in a locale agnostic manner without compromising design time support.</p>\n<h2 id=\"tracing-module-resolution\" style=\"position:relative;\"><a href=\"#tracing-module-resolution\" aria-label=\"tracing module resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tracing module resolution</h2>\n<p>As discussed earlier, the compiler can visit files outside the current folder when resolving a module.\nThis can be hard when diagnosing why a module is not resolved, or is resolved to an incorrect definition.\nEnabling the compiler module resolution tracing using <a href=\"/tsconfig#traceResolution\"><code>traceResolution</code></a> provides insight in what happened during the module resolution process.</p>\n<p>Let’s say we have a sample application that uses the <code>typescript</code> module.\n<code>app.ts</code> has an import like <code>import * as ts from \"typescript\"</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code>│   tsconfig.json\n├───node_modules\n│   └───typescript\n│       └───lib\n│               typescript.d.ts\n└───src\n        app.ts</code></div></pre><!-- Note from shiki-twoslash: the language tree was not set up for Shiki to use, and so there is no code highlighting --!>\n<p>Invoking the compiler with <a href=\"/tsconfig#traceResolution\"><code>traceResolution</code></a></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">shell</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">tsc --traceResolution</span></div></code></div></pre>\n<p>Results in an output such as:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">txt</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">======== Resolving module 'typescript' from 'src/app.ts'. ========\nModule resolution kind is not specified, using 'NodeJs'.\nLoading module 'typescript' from 'node_modules' folder.\nFile 'src/node_modules/typescript.ts' does not exist.\nFile 'src/node_modules/typescript.tsx' does not exist.\nFile 'src/node_modules/typescript.d.ts' does not exist.\nFile 'src/node_modules/typescript/package.json' does not exist.\nFile 'node_modules/typescript.ts' does not exist.\nFile 'node_modules/typescript.tsx' does not exist.\nFile 'node_modules/typescript.d.ts' does not exist.\nFound 'package.json' at 'node_modules/typescript/package.json'.\n'package.json' has 'types' field './lib/typescript.d.ts' that references 'node_modules/typescript/lib/typescript.d.ts'.\nFile 'node_modules/typescript/lib/typescript.d.ts' exist - use it as a module resolution result.\n======== Module name 'typescript' was successfully resolved to 'node_modules/typescript/lib/typescript.d.ts'. ========</span></div></code></div></pre>\n<h4 id=\"things-to-look-out-for\" style=\"position:relative;\"><a href=\"#things-to-look-out-for\" aria-label=\"things to look out for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Things to look out for</h4>\n<ul>\n<li>Name and location of the import</li>\n</ul>\n<blockquote>\n<p>======== Resolving module <strong>‘typescript’</strong> from <strong>‘src/app.ts’</strong>. ========</p>\n</blockquote>\n<ul>\n<li>The strategy the compiler is following</li>\n</ul>\n<blockquote>\n<p>Module resolution kind is not specified, using <strong>‘NodeJs’</strong>.</p>\n</blockquote>\n<ul>\n<li>Loading of types from npm packages</li>\n</ul>\n<blockquote>\n<p>‘package.json’ has <strong>‘types’</strong> field ‘./lib/typescript.d.ts’ that references ‘node_modules/typescript/lib/typescript.d.ts’.</p>\n</blockquote>\n<ul>\n<li>Final result</li>\n</ul>\n<blockquote>\n<p>======== Module name ‘typescript’ was <strong>successfully resolved</strong> to ‘node_modules/typescript/lib/typescript.d.ts’. ========</p>\n</blockquote>\n<h2 id=\"using---noresolve\" style=\"position:relative;\"><a href=\"#using---noresolve\" aria-label=\"using   noresolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using <code>--noResolve</code></h2>\n<p>Normally the compiler will attempt to resolve all module imports before it starts the compilation process.\nEvery time it successfully resolves an <code>import</code> to a file, the file is added to the set of files the compiler will process later on.</p>\n<p>The <a href=\"/tsconfig#noResolve\"><code>noResolve</code></a> compiler options instructs the compiler not to “add” any files to the compilation that were not passed on the command line.\nIt will still try to resolve the module to files, but if the file is not specified, it will not be included.</p>\n<p>For instance:</p>\n<h4 id=\"appts\" style=\"position:relative;\"><a href=\"#appts\" aria-label=\"appts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.ts</h4>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">A</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"moduleA\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK, 'moduleA' passed on the command-line</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">B</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"moduleB\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error TS2307: Cannot find module 'moduleB'.</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">shell</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">tsc app.ts moduleA.ts --noResolve</span></div></code></div></pre>\n<p>Compiling <code>app.ts</code> using <a href=\"/tsconfig#noResolve\"><code>noResolve</code></a> should result in:</p>\n<ul>\n<li>Correctly finding <code>moduleA</code> as it was passed on the command-line.</li>\n<li>Error for not finding <code>moduleB</code> as it was not passed.</li>\n</ul>\n<h2 id=\"common-questions\" style=\"position:relative;\"><a href=\"#common-questions\" aria-label=\"common questions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Questions</h2>\n<h3 id=\"why-does-a-module-in-the-exclude-list-still-get-picked-up-by-the-compiler\" style=\"position:relative;\"><a href=\"#why-does-a-module-in-the-exclude-list-still-get-picked-up-by-the-compiler\" aria-label=\"why does a module in the exclude list still get picked up by the compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why does a module in the exclude list still get picked up by the compiler?</h3>\n<p><code>tsconfig.json</code> turns a folder into a “project”.\nWithout specifying any <code>“exclude”</code> or <code>“files”</code> entries, all files in the folder containing the <code>tsconfig.json</code> and all its sub-directories are included in your compilation.\nIf you want to exclude some of the files use <code>“exclude”</code>, if you would rather specify all the files instead of letting the compiler look them up, use <code>“files”</code>.</p>\n<p>That was <code>tsconfig.json</code> automatic inclusion.\nThat does not embed module resolution as discussed above.\nIf the compiler identified a file as a target of a module import, it will be included in the compilation regardless if it was excluded in the previous steps.</p>\n<p>So to exclude a file from the compilation, you need to exclude it and <strong>all</strong> files that have an <code>import</code> or <code>/// &#x3C;reference path=\"...\" /></code> directive to it.</p>","headings":[{"value":"Relative vs. Non-relative module imports","depth":2},{"value":"Module Resolution Strategies","depth":2},{"value":"Classic","depth":3},{"value":"Node","depth":3},{"value":"How Node.js resolves modules","depth":4},{"value":"How TypeScript resolves modules","depth":4},{"value":"Additional module resolution flags","depth":2},{"value":"Base URL","depth":3},{"value":"Path mapping","depth":3},{"value":"Virtual Directories with rootDirs","depth":3},{"value":"Tracing module resolution","depth":2},{"value":"Things to look out for","depth":4},{"value":"Using --noResolve","depth":2},{"value":"app.ts","depth":4},{"value":"Common Questions","depth":2},{"value":"Why does a module in the exclude list still get picked up by the compiler?","depth":3}],"frontmatter":{"permalink":"/docs/handbook/module-resolution.html","title":"Module Resolution","disable_toc":null,"handbook":null,"oneline":"How TypeScript resolves modules in JavaScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-module-resolution","slug":"/docs/handbook/module-resolution.html","repoPath":"/packages/documentation/copy/en/reference/Module Resolution.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.854Z"}},"staticQueryHashes":[]}