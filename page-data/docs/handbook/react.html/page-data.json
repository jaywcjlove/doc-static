{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/react.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/react-&-webpack.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/ja/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/tsconfig"},{"path":"/en/tsconfig"},{"path":"/play"},{"path":"/en/play"},{"path":"/ja/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/es/play"},{"path":"/fa/play"},{"path":"/play/3-7/fixits/big-number-literals.ts"},{"path":"/play/3-7/fixits/const-to-let.ts"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/play/javascript/external-apis/typescript-with-web.js"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/play/javascript/helping-with-javascript/errors.ts"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/play/javascript/javascript-essentials/functions.ts"},{"path":"/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/play/javascript/modern-javascript/async-await.ts"},{"path":"/play/javascript/modern-javascript/immutability.ts"},{"path":"/play/javascript/modern-javascript/import-export.ts"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/play/javascript/working-with-classes/classes-101.ts"},{"path":"/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/play/javascript/external-apis/typescript-with-node.js"},{"path":"/play/javascript/working-with-classes/mixins.ts"},{"path":"/play/javascript/working-with-classes/this.ts"},{"path":"/play/playground/config/javascript-playgrounds.js"},{"path":"/play/playground/config/new-compiler-defaults.ts"},{"path":"/play/playground/language/automatic-type-acquisition.ts"},{"path":"/play/playground/language/fixits.ts"},{"path":"/play/playground/tooling/mobile-support.ts"},{"path":"/play/playground/tooling/sharable-urls.ts"},{"path":"/play/playground/tooling/typescript-versions.ts"},{"path":"/play/typescript/language/soundness.ts"},{"path":"/play/typescript/language/structural-typing.ts"},{"path":"/play/typescript/language/type-guards.ts"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/play/typescript/language-extensions/enums.ts"},{"path":"/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/play/typescript/meta-types/conditional-types.ts"},{"path":"/play/typescript/meta-types/discriminate-types.ts"},{"path":"/play/typescript/meta-types/indexed-types.ts"},{"path":"/play/typescript/meta-types/mapped-types.ts"},{"path":"/play/typescript/primitives/any.ts"},{"path":"/play/typescript/primitives/literals.ts"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/play/typescript/primitives/unknown-and-never.ts"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/play/typescript/type-primitives/nullable-types.ts"},{"path":"/play/typescript/type-primitives/tuples.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/es/play/typescript/primitives/any.ts"},{"path":"/es/play/typescript/primitives/literals.ts"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts"},{"path":"/es/play/typescript/type-primitives/tuples.ts"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts"},{"path":"/ja/play/3-7/fixits/const-to-let.ts"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/ja/play/typescript/language-extensions/enums.ts"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/ja/play/typescript/primitives/any.ts"},{"path":"/ja/play/typescript/primitives/literals.ts"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts"},{"path":"/ja/play/typescript/type-primitives/tuples.ts"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts"},{"path":"/zh/play/javascript/working-with-classes/this.ts"},{"path":"/zh/play/playground/config/javascript-playgrounds.js"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts"},{"path":"/zh/play/playground/language/fixits.ts"},{"path":"/zh/play/playground/tooling/mobile-support.ts"},{"path":"/zh/play/playground/tooling/sharable-urls.ts"},{"path":"/zh/play/playground/tooling/typescript-versions.ts"},{"path":"/zh/play/typescript/language/soundness.ts"},{"path":"/zh/play/typescript/language/structural-typing.ts"},{"path":"/zh/play/typescript/language/type-guards.ts"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/zh/play/typescript/language-extensions/enums.ts"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts"},{"path":"/zh/play/typescript/primitives/any.ts"},{"path":"/zh/play/typescript/primitives/literals.ts"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts"},{"path":"/zh/play/typescript/type-primitives/tuples.ts"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/community"},{"path":"/es/community"},{"path":"/ja/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/ja/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/ja/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/ja/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/ja/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/home"},{"path":"/es/docs/home"},{"path":"/ja/docs/home"},{"path":"/vo/docs/home"},{"path":"/zh/docs/home"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]},"markdownRemark":{"id":"1c2cbf0b-7367-58d3-8315-b38ff6be7e4f","excerpt":"This quick start guide will teach you how to wire up TypeScript with React.\nBy the end, you’ll have a project with React and TypeScript linting with TSLint…","html":"<p>This quick start guide will teach you how to wire up TypeScript with <a href=\"https://reactjs.org/\">React</a>.\nBy the end, you’ll have</p>\n<ul>\n<li>a project with React and TypeScript</li>\n<li>linting with <a href=\"https://github.com/palantir/tslint\">TSLint</a></li>\n<li>testing with <a href=\"https://facebook.github.io/jest/\">Jest</a> and <a href=\"http://airbnb.io/enzyme/\">Enzyme</a>, and</li>\n<li>state management with <a href=\"https://github.com/reactjs/react-redux\">Redux</a></li>\n</ul>\n<p>We’ll use the <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> tool to quickly get set up.</p>\n<p>We assume that you’re already using <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://www.npmjs.com/\">npm</a>.\nYou may also want to get a sense of <a href=\"https://reactjs.org/docs/hello-world.html\">the basics with React</a>.</p>\n<h1 id=\"install-create-react-app\" style=\"position:relative;\"><a href=\"#install-create-react-app\" aria-label=\"install create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install create-react-app</h1>\n<p>We’re going to use the create-react-app because it sets some useful tools and canonical defaults for React projects.\nThis is just a command-line utility to scaffold out new React projects.</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">npm install -g create-react-app</span></code></div></pre>\n<h1 id=\"create-our-new-project\" style=\"position:relative;\"><a href=\"#create-our-new-project\" aria-label=\"create our new project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create our new project</h1>\n<p>We’ll create a new project called <code>my-app</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">create-react-app my-app --scripts-version=react-scripts-ts</span></code></div></pre>\n<p><a href=\"https://www.npmjs.com/package/react-scripts-ts\">react-scripts-ts</a> is a set of adjustments to take the standard create-react-app project pipeline and bring TypeScript into the mix.</p>\n<p>At this point, your project layout should look like the following:</p>\n<pre><code>my-app/\n├─ .gitignore\n├─ node_modules/\n├─ public/\n├─ src/\n│  └─ ...\n├─ package.json\n├─ tsconfig.json\n└─ tslint.json\n</code></pre>\n<p>Of note:</p>\n<ul>\n<li><code>tsconfig.json</code> contains TypeScript-specific options for our project.</li>\n<li><code>tslint.json</code> stores the settings that our linter, <a href=\"https://github.com/palantir/tslint\">TSLint</a>, will use.</li>\n<li><code>package.json</code> contains our dependencies, as well as some shortcuts for commands we’d like to run for testing, previewing, and deploying our app.</li>\n<li><code>public</code> contains static assets like the HTML page we’re planning to deploy to, or images. You can delete any file in this folder apart from <code>index.html</code>.</li>\n<li><code>src</code> contains our TypeScript and CSS code. <code>index.tsx</code> is the entry-point for our file, and is mandatory.</li>\n</ul>\n<h1 id=\"running-the-project\" style=\"position:relative;\"><a href=\"#running-the-project\" aria-label=\"running the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running the project</h1>\n<p>Running the project is as simple as running</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm run start</span></code></div></pre>\n<p>This runs the <code>start</code> script specified in our <code>package.json</code>, and will spawn off a server which reloads the page as we save our files.\nTypically the server runs at <code>http://localhost:3000</code>, but should be automatically opened for you.</p>\n<p>This tightens the iteration loop by allowing us to quickly preview changes.</p>\n<h1 id=\"testing-the-project\" style=\"position:relative;\"><a href=\"#testing-the-project\" aria-label=\"testing the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing the project</h1>\n<p>Testing is also just a command away:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm run </span><span style=\"color: #795E26\">test</span></code></div></pre>\n<p>This command runs Jest, an incredibly useful testing utility, against all files whose extensions end in <code>.test.ts</code> or <code>.spec.ts</code>.\nLike with the <code>npm run start</code> command, Jest will automatically run as soon as it detects changes.\nIf you’d like, you can run <code>npm run start</code> and <code>npm run test</code> side by side so that you can preview changes and test them simultaneously.</p>\n<h1 id=\"creating-a-production-build\" style=\"position:relative;\"><a href=\"#creating-a-production-build\" aria-label=\"creating a production build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a production build</h1>\n<p>When running the project with <code>npm run start</code>, we didn’t end up with an optimized build.\nTypically, we want the code we ship to users to be as fast and small as possible.\nCertain optimizations like minification can accomplish this, but often take more time.\nWe call builds like this “production” builds (as opposed to development builds).</p>\n<p>To run a production build, just run</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm run build</span></code></div></pre>\n<p>This will create an optimized JS and CSS build in <code>./build/static/js</code> and <code>./build/static/css</code> respectively.</p>\n<p>You won’t need to run a production build most of the time,\nbut it is useful if you need to measure things like the final size of your app.</p>\n<h1 id=\"creating-a-component\" style=\"position:relative;\"><a href=\"#creating-a-component\" aria-label=\"creating a component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a component</h1>\n<p>We’re going to write a <code>Hello</code> component.\nThe component will take the name of whatever we want to greet (which we’ll call <code>name</code>), and optionally the number of exclamation marks to trail with (<code>enthusiasmLevel</code>).</p>\n<p>When we write something like <code>&#x3C;Hello name=\"Daniel\" enthusiasmLevel={3} /></code>, the component should render to something like <code>&#x3C;div>Hello Daniel!!!&#x3C;/div></code>.\nIf <code>enthusiasmLevel</code> isn’t specified, the component should default to showing one exclamation mark.\nIf <code>enthusiasmLevel</code> is <code>0</code> or negative, it should throw an error.</p>\n<p>We’ll write a <code>Hello.tsx</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// src/components/Hello.tsx</span>\n\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Props</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">?: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Hello</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> }: </span><span style=\"color: #267F99\">Props</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"You could be a little more enthusiastic. :D\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">className</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">      &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">className</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"greeting\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> {name + </span><span style=\"color: #795E26\">getExclamationMarks</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">)}</span>\n<span style=\"color: #000000\">      &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  );</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// helpers</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getExclamationMarks</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">numChars</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Array</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">numChars</span><span style=\"color: #000000\"> + </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">join</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Notice that we defined a type named <code>Props</code> that specifies the properties our component will take.\n<code>name</code> is a required <code>string</code>, and <code>enthusiasmLevel</code> is an optional <code>number</code> (which you can tell from the <code>?</code> that we wrote out after its name).</p>\n<p>We also wrote <code>Hello</code> as a function component.\nTo be specific, <code>Hello</code> is a function that takes a <code>Props</code> object, and destructures it.\nIf <code>enthusiasmLevel</code> isn’t given in our <code>Props</code> object, it will default to <code>1</code>.</p>\n<p>Writing functions is one of two primary <a href=\"(https://reactjs.org/docs/components-and-props.html#functional-and-class-components)\">ways React allows us to make components</a>.\nIf we wanted, we <em>could</em> have written it out as a class as follows:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">React</span><span style=\"color: #000000\">.Component&lt;</span><span style=\"color: #267F99\">Props</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\">object</span><span style=\"color: #000000\">&gt; {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> } = </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"You could be a little more enthusiastic. :D\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">      &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">className</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">        &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">className</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"greeting\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> {name + </span><span style=\"color: #795E26\">getExclamationMarks</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">)}</span>\n<span style=\"color: #000000\">        &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">      &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    );</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Classes are useful <a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">when our component instances have some state</a>.\nBut we don’t really need to think about state in this example - in fact, we specified it as <code>object</code> in <code>React.Component&#x3C;Props, object></code>, so writing a function component tends to be shorter.\nLocal component state is more useful at the presentational level when creating generic UI elements that can be shared between libraries.\nFor our application’s lifecycle, we will revisit how applications manage general state with Redux in a bit.</p>\n<p>Now that we’ve written our component, let’s dive into <code>index.tsx</code> and replace our render of <code>&#x3C;App /></code> with a render of <code>&#x3C;Hello ... /></code>.</p>\n<p>First we’ll import it at the top of the file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./components/Hello\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>and then change up our <code>render</code> call:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #001080\">ReactDOM</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">={10} /&gt;,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getElementById</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"root\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">HTMLElement</span>\n<span style=\"color: #000000\">);</span></code></div></pre>\n<h2 id=\"type-assertions\" style=\"position:relative;\"><a href=\"#type-assertions\" aria-label=\"type assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type assertions</h2>\n<p>One final thing we’ll point out in this section is the line <code>document.getElementById('root') as HTMLElement</code>.\nThis syntax is called a <em>type assertion</em>, sometimes also called a <em>cast</em>.\nThis is a useful way of telling TypeScript what the real type of an expression is when you know better than the type checker.</p>\n<p>The reason we need to do so in this case is that <code>getElementById</code>’s return type is <code>HTMLElement | null</code>.\nPut simply, <code>getElementById</code> returns <code>null</code> when it can’t find an element with a given <code>id</code>.\nWe’re assuming that <code>getElementById</code> will actually succeed, so we need convince TypeScript of that using the <code>as</code> syntax.</p>\n<p>TypeScript also has a trailing “bang” syntax (<code>!</code>), which removes <code>null</code> and <code>undefined</code> from the prior expression.\nSo we <em>could</em> have written <code>document.getElementById('root')!</code>, but in this case we wanted to be a bit more explicit.</p>\n<h1 id=\"adding-style-\" style=\"position:relative;\"><a href=\"#adding-style-\" aria-label=\"adding style  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding style 😎</h1>\n<p>Styling a component with our setup is easy.\nTo style our <code>Hello</code> component, we can create a CSS file at <code>src/components/Hello.css</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">css</div><div class='code-container'><code><span style=\"color: #800000\">.hello </span><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">text-align</span><span style=\"color: #000000\">: </span><span style=\"color: #0451A5\">center</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">margin</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">20px</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">font-size</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">48px</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">font-family</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Segoe UI\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0451A5\">Tahoma</span><span style=\"color: #000000\">, Geneva, </span><span style=\"color: #0451A5\">Verdana</span><span style=\"color: #000000\">, </span><span style=\"color: #0451A5\">sans-serif</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #800000\">.hello button </span><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">margin-left</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">25px</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">margin-right</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">25px</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">font-size</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">40px</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #FF0000\">min-width</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">50px</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>The tools that create-react-app uses (namely, Webpack and various loaders) allow us to just import the stylesheets we’re interested in.\nWhen our build runs, any imported <code>.css</code> files will be concatenated into an output file.\nSo in <code>src/components/Hello.tsx</code>, we’ll add the following import.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./Hello.css\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<h1 id=\"writing-tests-with-jest\" style=\"position:relative;\"><a href=\"#writing-tests-with-jest\" aria-label=\"writing tests with jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing tests with Jest</h1>\n<p>We had a certain set of assumptions about our <code>Hello</code> component.\nLet’s reiterate what they were:</p>\n<blockquote>\n<ul>\n<li>When we write something like <code>&#x3C;Hello name=\"Daniel\" enthusiasmLevel={3} /></code>, the component should render to something like <code>&#x3C;div>Hello Daniel!!!&#x3C;/div></code>.</li>\n<li>If <code>enthusiasmLevel</code> isn’t specified, the component should default to showing one exclamation mark.</li>\n<li>If <code>enthusiasmLevel</code> is <code>0</code> or negative, it should throw an error.</li>\n</ul>\n</blockquote>\n<p>We can use these requirements to write a few tests for our components.</p>\n<p>But first, let’s install Enzyme.\n<a href=\"http://airbnb.io/enzyme/\">Enzyme</a> is a common tool in the React ecosystem that makes it easier to write tests for how components will behave.\nBy default, our application includes a library called jsdom to allow us to simulate the DOM and test its runtime behavior without a browser.\nEnzyme is similar, but builds on jsdom and makes it easier to make certain queries about our components.</p>\n<p>Let’s install it as a development-time dependency.</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm install -D enzyme @types/enzyme react-addons-test-utils</span></code></div></pre>\n<p>Notice we installed packages <code>enzyme</code> as well as <code>@types/enzyme</code>.\nThe <code>enzyme</code> package refers to the package containing JavaScript code that actually gets run, while <code>@types/enzyme</code> is a package that contains declaration files (<code>.d.ts</code> files) so that TypeScript can understand how you can use Enzyme.\nYou can learn more about <code>@types</code> packages <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\">here</a>.</p>\n<p>We also had to install <code>react-addons-test-utils</code>.\nThis is something <code>enzyme</code> expects to be installed.</p>\n<p>Now that we’ve got Enzyme set up, let’s start writing our test!\nLet’s create a file named <code>src/components/Hello.test.tsx</code>, adjacent to our <code>Hello.tsx</code> file from earlier.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// src/components/Hello.test.tsx</span>\n\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">enzyme</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"enzyme\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./Hello\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #795E26\">it</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"renders the correct text when no enthusiasm level is given\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">enzyme</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">shallow</span><span style=\"color: #000000\">(&lt;</span><span style=\"color: #267F99\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\"> /&gt;);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">expect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\".greeting\"</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">text</span><span style=\"color: #000000\">()).</span><span style=\"color: #795E26\">toEqual</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello Daniel!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">});</span>\n\n<span style=\"color: #795E26\">it</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"renders the correct text with an explicit enthusiasm of 1\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">enzyme</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">shallow</span><span style=\"color: #000000\">(&lt;</span><span style=\"color: #267F99\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">enthusiasmLevel</span><span style=\"color: #000000\">={1} /&gt;);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">expect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\".greeting\"</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">text</span><span style=\"color: #000000\">()).</span><span style=\"color: #795E26\">toEqual</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello Daniel!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">});</span>\n\n<span style=\"color: #795E26\">it</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"renders the correct text with an explicit enthusiasm level of 5\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">enzyme</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">shallow</span><span style=\"color: #000000\">(&lt;</span><span style=\"color: #267F99\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">enthusiasmLevel</span><span style=\"color: #000000\">={5} /&gt;);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">expect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\".greeting\"</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">text</span><span style=\"color: #000000\">()).</span><span style=\"color: #795E26\">toEqual</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello Daniel!!!!!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">});</span>\n\n<span style=\"color: #795E26\">it</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"throws when the enthusiasm level is 0\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">expect</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">enzyme</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">shallow</span><span style=\"color: #000000\">(&lt;</span><span style=\"color: #267F99\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">enthusiasmLevel</span><span style=\"color: #000000\">={0} /&gt;);</span>\n<span style=\"color: #000000\">  }).</span><span style=\"color: #795E26\">toThrow</span><span style=\"color: #000000\">();</span>\n<span style=\"color: #000000\">});</span>\n\n<span style=\"color: #795E26\">it</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"throws when the enthusiasm level is negative\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">expect</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">enzyme</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">shallow</span><span style=\"color: #000000\">(&lt;</span><span style=\"color: #267F99\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">enthusiasmLevel</span><span style=\"color: #000000\">={-1} /&gt;);</span>\n<span style=\"color: #000000\">  }).</span><span style=\"color: #795E26\">toThrow</span><span style=\"color: #000000\">();</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<p>These tests are extremely basic, but you should be able to get the gist of things.</p>\n<h1 id=\"adding-state-management\" style=\"position:relative;\"><a href=\"#adding-state-management\" aria-label=\"adding state management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding state management</h1>\n<p>At this point, if all you’re using React for is fetching data once and displaying it, you can consider yourself done.\nBut if you’re developing an app that’s more interactive, then you may need to add state management.</p>\n<h2 id=\"state-management-in-general\" style=\"position:relative;\"><a href=\"#state-management-in-general\" aria-label=\"state management in general permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State management in general</h2>\n<p>On its own, React is a useful library for creating composable views.\nHowever, React doesn’t come with any facility for synchronizing data between your application.\nAs far as a React component is concerned, data flows down through its children through the props you specify on each element.</p>\n<p>Because React on its own does not provide built-in support for state management, the React community uses libraries like Redux and MobX.</p>\n<p><a href=\"http://redux.js.org\">Redux</a> relies on synchronizing data through a centralized and immutable store of data, and updates to that data will trigger a re-render of our application.\nState is updated in an immutable fashion by sending explicit action messages which must be handled by functions called reducers.\nBecause of the explicit nature, it is often easier to reason about how an action will affect the state of your program.</p>\n<p><a href=\"https://mobx.js.org/\">MobX</a> relies on functional reactive patterns where state is wrapped through observables and passed through as props.\nKeeping state fully synchronized for any observers is done by simply marking state as observable.\nAs a nice bonus, the library is already written in TypeScript.</p>\n<p>There are various merits and tradeoffs to both.\nGenerally Redux tends to see more widespread usage, so for the purposes of this tutorial, we’ll focus on adding Redux;\nhowever, you should feel encouraged to explore both.</p>\n<p>The following section may have a steep learning curve.\nWe strongly suggest you <a href=\"http://redux.js.org/\">familiarize yourself with Redux through its documentation</a>.</p>\n<h2 id=\"setting-the-stage-for-actions\" style=\"position:relative;\"><a href=\"#setting-the-stage-for-actions\" aria-label=\"setting the stage for actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting the stage for actions</h2>\n<p>It doesn’t make sense to add Redux unless the state of our application changes.\nWe need a source of actions that will trigger changes to take place.\nThis can be a timer, or something in the UI like a button.</p>\n<p>For our purposes, we’re going to add two buttons to control the enthusiasm level for our <code>Hello</code> component.</p>\n<h2 id=\"installing-redux\" style=\"position:relative;\"><a href=\"#installing-redux\" aria-label=\"installing redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Redux</h2>\n<p>To add Redux, we’ll first install <code>redux</code> and <code>react-redux</code>, as well as their types, as a dependency.</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm install -S redux react-redux @types/react-redux</span></code></div></pre>\n<p>In this case we didn’t need to install <code>@types/redux</code> because Redux already comes with its own definition files (<code>.d.ts</code> files).</p>\n<h2 id=\"defining-our-apps-state\" style=\"position:relative;\"><a href=\"#defining-our-apps-state\" aria-label=\"defining our apps state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining our app’s state</h2>\n<p>We need to define the shape of the state which Redux will store.\nFor this, we can create a file called <code>src/types/index.tsx</code> which will contain definitions for types that we might use throughout the program.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// src/types/index.tsx</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">StoreState</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">languageName</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Our intention is that <code>languageName</code> will be the programming language this app was written in (i.e. TypeScript or JavaScript) and <code>enthusiasmLevel</code> will vary.\nWhen we write our first container, we’ll understand why we intentionally made our state slightly different from our props.</p>\n<h2 id=\"adding-actions\" style=\"position:relative;\"><a href=\"#adding-actions\" aria-label=\"adding actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding actions</h2>\n<p>Let’s start off by creating a set of message types that our app can respond to in <code>src/constants/index.tsx</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// src/constants/index.tsx</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">INCREMENT_ENTHUSIASM</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"INCREMENT_ENTHUSIASM\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">INCREMENT_ENTHUSIASM</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">INCREMENT_ENTHUSIASM</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">DECREMENT_ENTHUSIASM</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"DECREMENT_ENTHUSIASM\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">DECREMENT_ENTHUSIASM</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">DECREMENT_ENTHUSIASM</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>This <code>const</code>/<code>type</code> pattern allows us to use TypeScript’s string literal types in an easily accessible and refactorable way.</p>\n<p>Next, we’ll create a set of actions and functions that can create these actions in <code>src/actions/index.tsx</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../constants\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">IncrementEnthusiasm</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">constants</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">INCREMENT_ENTHUSIASM</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">DecrementEnthusiasm</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">constants</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">DECREMENT_ENTHUSIASM</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">EnthusiasmAction</span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">IncrementEnthusiasm</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">DecrementEnthusiasm</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">incrementEnthusiasm</span><span style=\"color: #000000\">():</span><span style=\"color: #267F99\"> IncrementEnthusiasm </span><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">type:</span><span style=\"color: #000000\"> constants.INCREMENT_ENTHUSIASM</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">decrementEnthusiasm</span><span style=\"color: #000000\">():</span><span style=\"color: #267F99\"> DecrementEnthusiasm </span><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">type:</span><span style=\"color: #000000\"> constants.DECREMENT_ENTHUSIASM</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>We’ve created two types that describe what increment actions and decrement actions should look like.\nWe also created a type (<code>EnthusiasmAction</code>) to describe cases where an action could be an increment or a decrement.\nFinally, we made two functions that actually manufacture the actions which we can use instead of writing out bulky object literals.</p>\n<p>There’s clearly boilerplate here, so you should feel free to look into libraries like <a href=\"https://www.npmjs.com/package/redux-actions\">redux-actions</a> once you’ve got the hang of things.</p>\n<h2 id=\"adding-a-reducer\" style=\"position:relative;\"><a href=\"#adding-a-reducer\" aria-label=\"adding a reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a reducer</h2>\n<p>We’re ready to write our first reducer!\nReducers are just functions that generate changes by creating modified copies of our application’s state, but that have <em>no side effects</em>.\nIn other words, they’re what we call <em>[pure functions](<a href=\"https://wikipedia.org/wiki/Pure\">https://wikipedia.org/wiki/Pure</a></em>function)_.</p>\n<p>Our reducer will go under <code>src/reducers/index.tsx</code>.\nIts function will be to ensure that increments raise the enthusiasm level by 1, and that decrements reduce the enthusiasm level by 1, but that the level never falls below 1.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// src/reducers/index.tsx</span>\n\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">EnthusiasmAction</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../actions\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">StoreState</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../types/index\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">INCREMENT_ENTHUSIASM</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">DECREMENT_ENTHUSIASM</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../constants/index\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">enthusiasm</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">StoreState</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">EnthusiasmAction</span>\n<span style=\"color: #000000\">):</span><span style=\"color: #267F99\"> StoreState </span><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">action</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> INCREMENT_ENTHUSIASM:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { ...</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">enthusiasmLevel:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> + </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> DECREMENT_ENTHUSIASM:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        ...</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">enthusiasmLevel:</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> - </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">      };</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Notice that we’re using the <em>object spread</em> (<code>...state</code>) which allows us to create a shallow copy of our state, while replacing the <code>enthusiasmLevel</code>.\nIt’s important that the <code>enthusiasmLevel</code> property come last, since otherwise it would be overridden by the property in our old state.</p>\n<p>You may want to write a few tests for your reducer.\nSince reducers are pure functions, they can be passed arbitrary data.\nFor every input, reducers can tested by checking their newly produced state.\nConsider looking into Jest’s <a href=\"https://facebook.github.io/jest/docs/en/expect.html#toequalvalue\">toEqual</a> method to accomplish this.</p>\n<h2 id=\"making-a-container\" style=\"position:relative;\"><a href=\"#making-a-container\" aria-label=\"making a container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making a container</h2>\n<p>When writing with Redux, we will often write components as well as containers.\nComponents are often data-agnostic, and work mostly at a presentational level.\n<em>Containers</em> typically wrap components and feed them any data that is necessary to display and modify state.\nYou can read more about this concept on <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">Dan Abramov’s article <em>Presentational and Container Components</em></a>.</p>\n<p>First let’s update <code>src/components/Hello.tsx</code> so that it can modify state.\nWe’ll add two optional callback properties to <code>Props</code> named <code>onIncrement</code> and <code>onDecrement</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Props</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">?: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">onIncrement</span><span style=\"color: #000000\">?: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">onDecrement</span><span style=\"color: #000000\">?: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Then we’ll bind those callbacks to two new buttons that we’ll add into our component.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Hello</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">onIncrement</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">onDecrement</span><span style=\"color: #000000\"> }: </span><span style=\"color: #267F99\">Props</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"You could be a little more enthusiastic. :D\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">className</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">      &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">className</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"greeting\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> {name + </span><span style=\"color: #795E26\">getExclamationMarks</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">)}</span>\n<span style=\"color: #000000\">      &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">      &lt;</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">        &lt;</span><span style=\"color: #001080\">button</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">onClick</span><span style=\"color: #000000\">={</span><span style=\"color: #001080\">onDecrement</span><span style=\"color: #000000\">}&gt;-&lt;/</span><span style=\"color: #001080\">button</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">        &lt;</span><span style=\"color: #001080\">button</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">onClick</span><span style=\"color: #000000\">={</span><span style=\"color: #001080\">onIncrement</span><span style=\"color: #000000\">}&gt;+&lt;/</span><span style=\"color: #001080\">button</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">      &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  );</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>In general, it’d be a good idea to write a few tests for <code>onIncrement</code> and <code>onDecrement</code> being triggered when their respective buttons are clicked.\nGive it a shot to get the hang of writing tests for your components.</p>\n<p>Now that our component is updated, we’re ready to wrap it into a container.\nLet’s create a file named <code>src/containers/Hello.tsx</code> and start off with the following imports.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../components/Hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">actions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../actions/\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">StoreState</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../types/index\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">connect</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Dispatch</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react-redux\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>The real two key pieces here are the original <code>Hello</code> component as well as the <code>connect</code> function from react-redux.\n<code>connect</code> will be able to actually take our original <code>Hello</code> component and turn it into a container using two functions:</p>\n<ul>\n<li><code>mapStateToProps</code> which massages the data from the current store to part of the shape that our component needs.</li>\n<li><code>mapDispatchToProps</code> which uses creates callback props to pump actions to our store using a given <code>dispatch</code> function.</li>\n</ul>\n<p>If we recall, our application state consists of two properties: <code>languageName</code> and <code>enthusiasmLevel</code>.\nOur <code>Hello</code> component, on the other hand, expected a <code>name</code> and an <code>enthusiasmLevel</code>.\n<code>mapStateToProps</code> will get the relevant data from the store, and adjust it if necessary, for our component’s props.\nLet’s go ahead and write that.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">mapStateToProps</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">languageName</span><span style=\"color: #000000\"> }: </span><span style=\"color: #267F99\">StoreState</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">languageName</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Note that <code>mapStateToProps</code> only creates 2 out of 4 of the properties a <code>Hello</code> component expects.\nNamely, we still want to pass in the <code>onIncrement</code> and <code>onDecrement</code> callbacks.\n<code>mapDispatchToProps</code> is a function that takes a dispatcher function.\nThis dispatcher function can pass actions into our store to make updates, so we can create a pair of callbacks that will call the dispatcher as necessary.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">mapDispatchToProps</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">dispatch</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">Dispatch</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">actions</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">EnthusiasmAction</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">onIncrement:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">dispatch</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">actions</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">incrementEnthusiasm</span><span style=\"color: #000000\">()),</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">onDecrement:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">dispatch</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">actions</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decrementEnthusiasm</span><span style=\"color: #000000\">())</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Finally, we’re ready to call <code>connect</code>.\n<code>connect</code> will first take <code>mapStateToProps</code> and <code>mapDispatchToProps</code>, and then return another function that we can use to wrap our component.\nOur resulting container is defined with the following line of code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">connect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mapStateToProps</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mapDispatchToProps</span><span style=\"color: #000000\">)(</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>When we’re finished, our file should look like this:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// src/containers/Hello.tsx</span>\n\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../components/Hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">actions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../actions/\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">StoreState</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"../types/index\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">connect</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Dispatch</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react-redux\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">mapStateToProps</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">languageName</span><span style=\"color: #000000\"> }: </span><span style=\"color: #267F99\">StoreState</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">enthusiasmLevel</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">languageName</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">mapDispatchToProps</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">dispatch</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">Dispatch</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">actions</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">EnthusiasmAction</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">onIncrement:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">dispatch</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">actions</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">incrementEnthusiasm</span><span style=\"color: #000000\">()),</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">onDecrement:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">dispatch</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">actions</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decrementEnthusiasm</span><span style=\"color: #000000\">())</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">connect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mapStateToProps</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mapDispatchToProps</span><span style=\"color: #000000\">)(</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">);</span></code></div></pre>\n<h2 id=\"creating-a-store\" style=\"position:relative;\"><a href=\"#creating-a-store\" aria-label=\"creating a store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a store</h2>\n<p>Let’s go back to <code>src/index.tsx</code>.\nTo put this all together, we need to create a store with an initial state, and set it up with all of our reducers.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">createStore</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"redux\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">enthusiasm</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./reducers/index\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">StoreState</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./types/index\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">store</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">createStore</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">StoreState</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">enthusiasm</span><span style=\"color: #000000\">, {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">enthusiasmLevel:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">languageName:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"TypeScript\"</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<p><code>store</code> is, as you might’ve guessed, our central store for our application’s global state.</p>\n<p>Next, we’re going to swap our use of <code>./src/components/Hello</code> with <code>./src/containers/Hello</code> and use react-redux’s <code>Provider</code> to wire up our props with our container.\nWe’ll import each:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./containers/Hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Provider</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react-redux\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>and pass our <code>store</code> through to the <code>Provider</code>’s attributes:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #001080\">ReactDOM</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #001080\">Provider</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">store</span><span style=\"color: #000000\">={</span><span style=\"color: #001080\">store</span><span style=\"color: #000000\">}&gt;</span>\n<span style=\"color: #000000\">    &lt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> /&gt;</span>\n<span style=\"color: #000000\">  &lt;/</span><span style=\"color: #001080\">Provider</span><span style=\"color: #000000\">&gt;,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getElementById</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"root\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">HTMLElement</span>\n<span style=\"color: #000000\">);</span></code></div></pre>\n<p>Notice that <code>Hello</code> no longer needs props, since we used our <code>connect</code> function to adapt our application’s state for our wrapped <code>Hello</code> component’s props.</p>\n<h1 id=\"ejecting\" style=\"position:relative;\"><a href=\"#ejecting\" aria-label=\"ejecting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ejecting</h1>\n<p>If at any point, you feel like there are certain customizations that the create-react-app setup has made difficult, you can always opt-out and get the various configuration options you need.\nFor example, if you’d like to add a Webpack plugin, it might be necessary to take advantage of the “eject” functionality that create-react-app provides.</p>\n<p>Simply run</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm run eject</span></code></div></pre>\n<p>and you should be good to go!</p>\n<p>As a heads up, you may want to commit all your work before running an eject.\nYou cannot undo an eject command, so opting out is permanent unless you can recover from a commit prior to running an eject.</p>\n<h1 id=\"next-steps\" style=\"position:relative;\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next steps</h1>\n<p>create-react-app comes with a lot of great stuff.\nMuch of it is documented in the default <code>README.md</code> that was generated for our project, so give that a quick read.</p>\n<p>If you still want to learn more about Redux, you can <a href=\"http://redux.js.org/\">check out the official website</a> for documentation.\nThe same goes <a href=\"https://mobx.js.org/\">for MobX</a>.</p>\n<p>If you want to eject at some point, you may need to know a little bit more about Webpack.\nYou can check out our <a href=\"./React%20&#x26;%20Webpack.md\">React &#x26; Webpack walkthrough here</a>.</p>\n<p>At some point you might need routing.\nThere are several solutions, but <a href=\"https://github.com/ReactTraining/react-router\">react-router</a> is probably the most popular for Redux projects, and is often used in conjunction with <a href=\"https://github.com/reactjs/react-router-redux\">react-router-redux</a>.</p>","headings":[{"value":"Install create-react-app","depth":1},{"value":"Create our new project","depth":1},{"value":"Running the project","depth":1},{"value":"Testing the project","depth":1},{"value":"Creating a production build","depth":1},{"value":"Creating a component","depth":1},{"value":"Type assertions","depth":2},{"value":"Adding style 😎","depth":1},{"value":"Writing tests with Jest","depth":1},{"value":"Adding state management","depth":1},{"value":"State management in general","depth":2},{"value":"Setting the stage for actions","depth":2},{"value":"Installing Redux","depth":2},{"value":"Defining our app’s state","depth":2},{"value":"Adding actions","depth":2},{"value":"Adding a reducer","depth":2},{"value":"Making a container","depth":2},{"value":"Creating a store","depth":2},{"value":"Ejecting","depth":1},{"value":"Next steps","depth":1}],"frontmatter":{"permalink":"/docs/handbook/react.html","title":"React","disable_toc":null,"oneline":"Using React with TypeScript"}},"prev":null,"next":null},"pageContext":{"slug":"/docs/handbook/react.html","repoPath":"/packages/handbook-v1/en/tutorials/React.md","isOldHandbook":true,"lang":"en","modifiedTime":"2020-05-31T17:57:33.338Z"}}}