{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/do-s-and-don-ts.html","result":{"data":{"markdownRemark":{"id":"5350557d-2a16-5913-b501-a7b19093353a","excerpt":"General Types Number, String, Boolean, Symbol and Object ❌ Don’t ever use the types Number, String, Boolean, Symbol, or Object\nThese types refer to non…","html":"<h2 id=\"general-types\" style=\"position:relative;\"><a href=\"#general-types\" aria-label=\"general types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>General Types</h2>\n<h2 id=\"number-string-boolean-symbol-and-object\" style=\"position:relative;\"><a href=\"#number-string-boolean-symbol-and-object\" aria-label=\"number string boolean symbol and object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Symbol</code> and <code>Object</code></h2>\n<p>❌ <strong>Don’t</strong> ever use the types <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Symbol</code>, or <code>Object</code>\nThese types refer to non-primitive boxed objects that are almost never used appropriately in JavaScript code.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">String</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">String</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>✅ <strong>Do</strong> use the types <code>number</code>, <code>string</code>, <code>boolean</code>, and <code>symbol</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Instead of <code>Object</code>, use the non-primitive <code>object</code> type (<a href=\"../release-notes/typescript-2-2.html#object-type\">added in TypeScript 2.2</a>).</p>\n<h2 id=\"generics\" style=\"position:relative;\"><a href=\"#generics\" aria-label=\"generics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generics</h2>\n<p>❌ <strong>Don’t</strong> ever have a generic type which doesn’t use its type parameter.\nSee more details in <a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-type-inference-work-on-this-interface-interface-foot--\">TypeScript FAQ page</a>.</p>\n<h2 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>any</h2>\n<p>❌ <strong>Don’t</strong> use <code>any</code> as a type unless you are in the process of migrating a JavaScript project to TypeScript. The compiler <em>effectively</em> treats <code>any</code> as “please turn off type checking for this thing”. It is similar to putting an <code>@ts-ignore</code> comment around every usage of the variable. This can be very helpful when you are first migrating a JavaScript project to TypeScript as you can set the type for stuff you haven’t migrated yet as <code>any</code>, but in a full TypeScript project you are disabling type checking for any parts of your program that use it.</p>\n<p>In cases where you don’t know what type you want to accept, or when you want to accept anything because you will be blindly passing it through without interacting with it, you can use <a href=\"/play/#example/unknown-and-never\"><code>unknown</code></a>.</p>\n<!-- TODO: More -->\n<h2 id=\"callback-types\" style=\"position:relative;\"><a href=\"#callback-types\" aria-label=\"callback types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback Types</h2>\n<h2 id=\"return-types-of-callbacks\" style=\"position:relative;\"><a href=\"#return-types-of-callbacks\" aria-label=\"return types of callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return Types of Callbacks</h2>\n<!-- TODO: Reword; these examples make no sense in the context of a declaration file -->\n<p>❌ <strong>Don’t</strong> use the return type <code>any</code> for callbacks whose value will be ignored:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>✅ <strong>Do</strong> use the return type <code>void</code> for callbacks whose value will be ignored:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>❔ <strong>Why:</strong> Using <code>void</code> is safer because it prevents you from accidentally using the return value of <code>x</code> in an unchecked way:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// oops! meant to do something else</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// error, but would be OK if the return type had been 'any'</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"optional-parameters-in-callbacks\" style=\"position:relative;\"><a href=\"#optional-parameters-in-callbacks\" aria-label=\"optional parameters in callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters in Callbacks</h2>\n<p>❌ <strong>Don’t</strong> use optional parameters in callbacks unless you really mean it:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Fetcher</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">getObject</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">done</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">elapsedTime</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This has a very specific meaning: the <code>done</code> callback might be invoked with 1 argument or might be invoked with 2 arguments.\nThe author probably intended to say that the callback might not care about the <code>elapsedTime</code> parameter,\nbut there’s no need to make the parameter optional to accomplish this —\nit’s always legal to provide a callback that accepts fewer arguments.</p>\n<p>✅ <strong>Do</strong> write callback parameters as non-optional:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Fetcher</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">getObject</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">done</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">elapsedTime</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"overloads-and-callbacks\" style=\"position:relative;\"><a href=\"#overloads-and-callbacks\" aria-label=\"overloads and callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overloads and Callbacks</h2>\n<p>❌ <strong>Don’t</strong> write separate overloads that differ only on callback arity:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">beforeAll</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">action</span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">timeout</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">beforeAll</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">action</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">DoneFn</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">timeout</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>✅ <strong>Do</strong> write a single overload using the maximum arity:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">beforeAll</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">action</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">DoneFn</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">timeout</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>❔ <strong>Why:</strong> It’s always legal for a callback to disregard a parameter, so there’s no need for the shorter overload.\nProviding a shorter callback first allows incorrectly-typed functions to be passed in because they match the first overload.</p>\n<h2 id=\"function-overloads\" style=\"position:relative;\"><a href=\"#function-overloads\" aria-label=\"function overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Overloads</h2>\n<h2 id=\"ordering\" style=\"position:relative;\"><a href=\"#ordering\" aria-label=\"ordering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ordering</h2>\n<p>❌ <strong>Don’t</strong> put more general overloads before more specific overloads:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myElem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myElem</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// x: unknown, wat?</span></div></code></div></pre>\n<p>✅ <strong>Do</strong> sort overloads by putting the more general signatures after more specific signatures:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myElem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myElem</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// x: string, :)</span></div></code></div></pre>\n<p>❔ <strong>Why:</strong> TypeScript chooses the <em>first matching overload</em> when resolving function calls.\nWhen an earlier overload is “more general” than a later one, the later one is effectively hidden and cannot be called.</p>\n<h2 id=\"use-optional-parameters\" style=\"position:relative;\"><a href=\"#use-optional-parameters\" aria-label=\"use optional parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Optional Parameters</h2>\n<p>❌ <strong>Don’t</strong> write several overloads that differ only in trailing parameters:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Example</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">diff</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">one</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">diff</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">one</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">two</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">diff</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">one</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">two</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">three</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>✅ <strong>Do</strong> use optional parameters whenever possible:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Example</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">diff</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">one</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">two</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">three</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Note that this collapsing should only occur when all overloads have the same return type.</p>\n<p>❔ <strong>Why:</strong> This is important for two reasons.</p>\n<p>TypeScript resolves signature compatibility by seeing if any signature of the target can be invoked with the arguments of the source,\n<em>and extraneous arguments are allowed</em>.\nThis code, for example, exposes a bug only when the signature is correctly written using optional parameters:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">x</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {}</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Example</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// When written with overloads, OK -- used first overload</span></div><div class='line'><span style=\"color: #008000\">// When written with optionals, correctly an error</span></div><div class='line'><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">diff</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>The second reason is when a consumer uses the “strict null checking” feature of TypeScript.\nBecause unspecified parameters appear as <code>undefined</code> in JavaScript, it’s usually fine to pass an explicit <code>undefined</code> to a function with optional arguments.\nThis code, for example, should be OK under strict nulls:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Example</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// When written with overloads, incorrectly an error because of passing 'undefined' to 'string'</span></div><div class='line'><span style=\"color: #008000\">// When written with optionals, correctly OK</span></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">diff</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"something\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"hour\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"use-union-types\" style=\"position:relative;\"><a href=\"#use-union-types\" aria-label=\"use union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Union Types</h2>\n<p>❌ <strong>Don’t</strong> write overloads that differ by type in only one argument position:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* WRONG */</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Moment</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">utcOffset</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">utcOffset</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Moment</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">utcOffset</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Moment</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>✅ <strong>Do</strong> use union types whenever possible:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* OK */</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Moment</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">utcOffset</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">utcOffset</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Moment</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Note that we didn’t make <code>b</code> optional here because the return types of the signatures differ.</p>\n<p>❔ <strong>Why:</strong> This is important for people who are “passing through” a value to your function:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// When written with separate overloads, incorrectly an error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// When written with union types, correctly OK</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">moment</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">utcOffset</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>","headings":[{"value":"General Types","depth":2},{"value":"Number, String, Boolean, Symbol and Object","depth":2},{"value":"Generics","depth":2},{"value":"any","depth":2},{"value":"Callback Types","depth":2},{"value":"Return Types of Callbacks","depth":2},{"value":"Optional Parameters in Callbacks","depth":2},{"value":"Overloads and Callbacks","depth":2},{"value":"Function Overloads","depth":2},{"value":"Ordering","depth":2},{"value":"Use Optional Parameters","depth":2},{"value":"Use Union Types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/declaration-files/do-s-and-don-ts.html","title":"Do's and Don'ts","disable_toc":null,"handbook":null,"oneline":"Recommendations for writing d.ts files","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"Deep Dive","oneline":"How do d.ts files work, a deep dive","permalink":"/docs/handbook/declaration-files/deep-dive.html"}}}},"pageContext":{"id":"5-do's-and-don'ts","slug":"/docs/handbook/declaration-files/do-s-and-don-ts.html","repoPath":"/packages/documentation/copy/en/declaration-files/Do's and Don'ts.md","nextID":"1c6fbcda-4d89-5395-9ad4-e83eff746bde","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}