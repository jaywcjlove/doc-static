{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/templates/global-d-ts.html","result":{"data":{"markdownRemark":{"id":"22ef77e0-477d-5180-b5f9-0f88e0044746","excerpt":"Global Libraries A global library is one that can be accessed from the global scope (i.e. without using any form of import).\nMany libraries simply expose one or…","html":"<h2 id=\"global-libraries\" style=\"position:relative;\"><a href=\"#global-libraries\" aria-label=\"global libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Libraries</h2>\n<!-- \nTODO:\n\n1. mention that global nearly always means 'browser'\n2. if you have a global library that you suspect is UMD, look for instructions on\n   a. how to import it\n   b. -OR- how to make it work with webpack\n3. Make the page follow the structure of documentation,usage,source example.\n\n-->\n<p>A <em>global</em> library is one that can be accessed from the global scope (i.e. without using any form of <code>import</code>).\nMany libraries simply expose one or more global variables for use.\nFor example, if you were using <a href=\"https://jquery.com/\">jQuery</a>, the <code>$</code> variable can be used by simply referring to it:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">$(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<p>You’ll usually see guidance in the documentation of a global library of how to use the library in an HTML script tag:</p>\n<pre class=\"shiki\"><div class=\"language-id\">html</div><div class='code-container'><code><span style=\"color: #800000\">&lt;script</span><span style=\"color: #000000\"> </span><span style=\"color: #DC0000\">src</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"http://a.great.cdn.for/someLib.js\"</span><span style=\"color: #800000\">&gt;&lt;/script&gt;</span></code></div></pre>\n<p>Today, most popular globally-accessible libraries are actually written as UMD libraries (see below).\nUMD library documentation is hard to distinguish from global library documentation.\nBefore writing a global declaration file, make sure the library isn’t actually UMD.</p>\n<h2 id=\"identifying-a-global-library-from-code\" style=\"position:relative;\"><a href=\"#identifying-a-global-library-from-code\" aria-label=\"identifying a global library from code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Identifying a Global Library from Code</h2>\n<p>Global library code is usually extremely simple.\nA global “Hello, world” library might look like this:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> createGreeting(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>or like this:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #000000\">window.createGreeting = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n<p>When looking at the code of a global library, you’ll usually see:</p>\n<ul>\n<li>Top-level <code>var</code> statements or <code>function</code> declarations</li>\n<li>One or more assignments to <code>window.someName</code></li>\n<li>Assumptions that DOM primitives like <code>document</code> or <code>window</code> exist</li>\n</ul>\n<p>You <em>won’t</em> see:</p>\n<ul>\n<li>Checks for, or usage of, module loaders like <code>require</code> or <code>define</code></li>\n<li>CommonJS/Node.js-style imports of the form <code>var fs = require(\"fs\");</code></li>\n<li>Calls to <code>define(...)</code></li>\n<li>Documentation describing how to <code>require</code> or import the library</li>\n</ul>\n<h2 id=\"examples-of-global-libraries\" style=\"position:relative;\"><a href=\"#examples-of-global-libraries\" aria-label=\"examples of global libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples of Global Libraries</h2>\n<p>Because it’s usually easy to turn a global library into a UMD library, very few popular libraries are still written in the global style.\nHowever, libraries that are small and require the DOM (or have <em>no</em> dependencies) may still be global.</p>\n<h2 id=\"global-library-template\" style=\"position:relative;\"><a href=\"#global-library-template\" aria-label=\"global library template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Library Template</h2>\n<p>You can see an example DTS below:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span>\n<span style=\"color: #008000\">// Project: [~THE PROJECT NAME~]</span>\n<span style=\"color: #008000\">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span>\n\n<span style=\"color: #008000\">/*~ If this library is callable (e.g. can be invoked as myLib(3)),</span>\n<span style=\"color: #008000\"> *~ include those call signatures here.</span>\n<span style=\"color: #008000\"> *~ Otherwise, delete this section.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> myLib(</span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">: string): string;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> myLib(</span><span style=\"color: #1A1A1A\">a</span><span style=\"color: #000000\">: number): number;</span>\n\n<span style=\"color: #008000\">/*~ If you want the name of this library to be a valid type name,</span>\n<span style=\"color: #008000\"> *~ you can do so here.</span>\n<span style=\"color: #008000\"> *~</span>\n<span style=\"color: #008000\"> *~ For example, this allows us to write 'var x: myLib';</span>\n<span style=\"color: #008000\"> *~ Be sure this actually makes sense! If it doesn't, just</span>\n<span style=\"color: #008000\"> *~ delete this declaration and add types inside the namespace below.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> myLib {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">length</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">extras</span><span style=\"color: #000000\">?: string[];</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">/*~ If your library has properties exposed on a global variable,</span>\n<span style=\"color: #008000\"> *~ place them here.</span>\n<span style=\"color: #008000\"> *~ You should also place types (interfaces and type alias) here.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> myLib {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ We can write 'myLib.timeout = 50;'</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">timeout</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ We can access 'myLib.version', but not change it</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">version</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ There's some class we can create via 'let c = new myLib.Cat(42)'</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ Or reference e.g. 'function f(c: myLib.Cat) { ... }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Cat {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">: number);</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can read 'c.age' from a 'Cat' instance</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">age</span><span style=\"color: #000000\">: number;</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can invoke 'c.purr()' from a 'Cat' instance</span>\n<span style=\"color: #000000\">    purr(): void;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ We can declare a variable as</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~   'var s: myLib.CatSettings = { weight: 5, name: \"Maru\" };'</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> CatSettings {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">weight</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">tailLength</span><span style=\"color: #000000\">?: number;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ We can write 'const v: myLib.VetID = 42;'</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~  or 'const v: myLib.VetID = \"bob\";'</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> VetID = string | number;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//~ We can invoke 'myLib.checkCat(c)' or 'myLib.checkCat(c, v);'</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> checkCat(</span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\">: Cat, </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">?: VetID);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>","headings":[{"value":"Global Libraries","depth":2},{"value":"Identifying a Global Library from Code","depth":2},{"value":"Examples of Global Libraries","depth":2},{"value":"Global Library Template","depth":2}],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/global-d-ts.html","title":"Global .d.ts","disable_toc":null,"handbook":null,"oneline":null,"beta":null}},"prev":null,"next":null},"pageContext":{"id":"5global-.d.ts","slug":"/docs/handbook/declaration-files/templates/global-d-ts.html","repoPath":"/packages/documentation/copy/en/declaration-files/templates/global.d.ts.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.611Z"}},"staticQueryHashes":[]}