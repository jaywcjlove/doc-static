{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html","result":{"data":{"markdownRemark":{"id":"ff9c9adf-91e5-5195-9e87-38221481583c","excerpt":"For example, when you want to work with JavaScript code which looks like: To handle both importing via UMD and modules:","html":"<p>For example, when you want to work with JavaScript code which looks like:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">greeter</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"super-greeter\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">greeter(</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">greeter(</span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>To handle both importing via UMD and modules:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span>\n<span style=\"color: #008000\">// Project: [~THE PROJECT NAME~]</span>\n<span style=\"color: #008000\">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span>\n\n<span style=\"color: #008000\">/*~ This is the module template file for function modules.</span>\n<span style=\"color: #008000\"> *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.</span>\n<span style=\"color: #008000\"> *~ For example, if you were writing a file for \"super-greeter\", this</span>\n<span style=\"color: #008000\"> *~ file should be 'super-greeter/index.d.ts'</span>\n<span style=\"color: #008000\"> */</span>\n\n<span style=\"color: #008000\">// Note that ES6 modules cannot directly export class objects.</span>\n<span style=\"color: #008000\">// This file should be imported using the CommonJS-style:</span>\n<span style=\"color: #008000\">//   import x = require('[~THE MODULE~]');</span>\n<span style=\"color: #008000\">//</span>\n<span style=\"color: #008000\">// Alternatively, if --allowSyntheticDefaultImports or</span>\n<span style=\"color: #008000\">// --esModuleInterop is turned on, this file can also be</span>\n<span style=\"color: #008000\">// imported as a default import:</span>\n<span style=\"color: #008000\">//   import x from '[~THE MODULE~]';</span>\n<span style=\"color: #008000\">//</span>\n<span style=\"color: #008000\">// Refer to the TypeScript documentation at</span>\n<span style=\"color: #008000\">// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require</span>\n<span style=\"color: #008000\">// to understand common workarounds for this limitation of ES6 modules.</span>\n\n<span style=\"color: #008000\">/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when</span>\n<span style=\"color: #008000\"> *~ loaded outside a module loader environment, declare that global here.</span>\n<span style=\"color: #008000\"> *~ Otherwise, delete this declaration.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> myFuncLib;</span>\n\n<span style=\"color: #008000\">/*~ This declaration specifies that the function</span>\n<span style=\"color: #008000\"> *~ is the exported object from the file</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">Greeter</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">/*~ This example shows how to have multiple overloads for your function */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> Greeter(</span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string): Greeter.NamedReturnType;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> Greeter(</span><span style=\"color: #1A1A1A\">length</span><span style=\"color: #000000\">: number): Greeter.LengthReturnType;</span>\n\n<span style=\"color: #008000\">/*~ If you want to expose types from your module as well, you can</span>\n<span style=\"color: #008000\"> *~ place them in this block. Often you will want to describe the</span>\n<span style=\"color: #008000\"> *~ shape of the return type of the function; that type should</span>\n<span style=\"color: #008000\"> *~ be declared in here, as this example shows.</span>\n<span style=\"color: #008000\"> *~</span>\n<span style=\"color: #008000\"> *~ Note that if you decide to include this namespace, the module can be</span>\n<span style=\"color: #008000\"> *~ incorrectly imported as a namespace object, unless</span>\n<span style=\"color: #008000\"> *~ --esModuleInterop is turned on:</span>\n<span style=\"color: #008000\"> *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> Greeter {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> LengthReturnType {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">width</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">height</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> NamedReturnType {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">firstName</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">lastName</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">/*~ If the module also has properties, declare them here. For example,</span>\n<span style=\"color: #008000\">   *~ this declaration says that this code is legal:</span>\n<span style=\"color: #008000\">   *~   import f = require('super-greeter');</span>\n<span style=\"color: #008000\">   *~   console.log(f.defaultName);</span>\n<span style=\"color: #008000\">   */</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">defaultName</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">defaultLength</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/module-function-d-ts.html","title":"Module: Function","disable_toc":null,"handbook":null,"oneline":null,"beta":null}},"prev":null,"next":null},"pageContext":{"id":"5module:-function","slug":"/docs/handbook/declaration-files/templates/module-function-d-ts.html","repoPath":"/packages/documentation/copy/en/declaration-files/templates/module-function.d.ts.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.611Z"}},"staticQueryHashes":[]}