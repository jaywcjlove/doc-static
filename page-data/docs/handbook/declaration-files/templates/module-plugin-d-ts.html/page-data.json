{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html","result":{"data":{"markdownRemark":{"id":"f341f279-595e-5737-b7b4-4517035514de","excerpt":"For example, when you want to work with JavaScript code which extends another library. The definition for “super-greeter”: We can extend the existing module…","html":"<p>For example, when you want to work with JavaScript code which extends another library.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">greeter</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"super-greeter\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// Normal Greeter API</span>\n<span style=\"color: #000000\">greeter(</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">greeter(</span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// Now we extend the object with a new function at runtime</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hyper-super-greeter\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\">greeter</span><span style=\"color: #000000\">.hyperGreet();</span></code></div></pre>\n<p>The definition for “super-greeter”:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/*~ This example shows how to have multiple overloads for your function */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> GreeterFunction {</span>\n<span style=\"color: #000000\">  (</span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string): void</span>\n<span style=\"color: #000000\">  (</span><span style=\"color: #1A1A1A\">time</span><span style=\"color: #000000\">: number): void</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">/*~ This example shows how to export a function specified by an interface */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">greeter</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> GreeterFunction</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>We can extend the existing module like the following:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span>\n<span style=\"color: #008000\">// Project: [~THE PROJECT NAME~]</span>\n<span style=\"color: #008000\">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span>\n\n<span style=\"color: #008000\">/*~ This is the module plugin template file. You should rename it to index.d.ts</span>\n<span style=\"color: #008000\"> *~ and place it in a folder with the same name as the module.</span>\n<span style=\"color: #008000\"> *~ For example, if you were writing a file for \"super-greeter\", this</span>\n<span style=\"color: #008000\"> *~ file should be 'super-greeter/index.d.ts'</span>\n<span style=\"color: #008000\"> */</span>\n\n<span style=\"color: #008000\">/*~ On this line, import the module which this module adds to */</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">greeter</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"super-greeter\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">/*~ Here, declare the same module as the one you imported above</span>\n<span style=\"color: #008000\"> *~ then we expand the existing declaration of the greeter function</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"super-greeter\"</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> GreeterFunction {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** Greets even better! */</span>\n<span style=\"color: #000000\">    hyperGreet(): void;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>This uses <a href=\"/docs/handbook/declaration-merging.html\">declaration merging</a></p>\n<h2 id=\"the-impact-of-es6-on-module-plugins\" style=\"position:relative;\"><a href=\"#the-impact-of-es6-on-module-plugins\" aria-label=\"the impact of es6 on module plugins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Impact of ES6 on Module Plugins</h2>\n<p>Some plugins add or modify top-level exports on existing modules.\nWhile this is legal in CommonJS and other loaders, ES6 modules are considered immutable and this pattern will not be possible.\nBecause TypeScript is loader-agnostic, there is no compile-time enforcement of this policy, but developers intending to transition to an ES6 module loader should be aware of this.</p>","headings":[{"value":"The Impact of ES6 on Module Plugins","depth":2}],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html","title":"Module: Plugin","disable_toc":null,"handbook":null,"oneline":null,"beta":null}},"prev":null,"next":null},"pageContext":{"id":"5module:-plugin","slug":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html","repoPath":"/packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.611Z"}},"staticQueryHashes":[]}