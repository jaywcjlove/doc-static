{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/mapped-types.html","result":{"data":{"markdownRemark":{"id":"1b91322b-8fe9-51ca-b580-6d43949e39c9","excerpt":"When you don’t want to repeat yourself, sometimes a type needs to be based on another type. Mapped types build on the syntax for index signatures, which are…","html":"<p>When you don’t want to repeat yourself, sometimes a type needs to be based on another type.</p>\n<p>Mapped types build on the syntax for index signatures, which are used to declare the types of properties which have not been declared ahead of time:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type OnlyBoolsAndHorses = {&#10;    [key: string]: boolean | Horse;&#10;}' >OnlyBoolsAndHorses</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='type Horse = {}' >Horse</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const conforms: OnlyBoolsAndHorses' >conforms</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type OnlyBoolsAndHorses = {&#10;    [key: string]: boolean | Horse;&#10;}' >OnlyBoolsAndHorses</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) del: true' >del</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) rodney: false' >rodney</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAEg9gJwM7QLxQN4F8DcAoAegKgFoyBjAV2DJL1EigHkA7AGxACE442kBBFgBN4yCEijoMeKFADaAawggAXFCTAEASxYBzALpqARjzYQAhiygAfWIhT5cePOTgsNUVywBmiALZIaqwc3LwCwqIoElIyUEIQbGqalBAANLEIcEIsymre5nxpeLhAA'>Try</a></div></pre>\n<p>A mapped type is a generic type which uses a union of <code>PropertyKey</code>s (frequently created <a href=\"/docs/handbook/2/indexed-access-types.html\">via a <code>keyof</code></a>) to iterate through keys to create a type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type OptionsFlags&lt;Type> = { [Property in keyof Type]: boolean; }' >OptionsFlags</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OptionsFlags&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OptionsFlags&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8mwEsD2A7AzgMQDYEMDmaAPACrgQB8UAvFAN4BQUUA2gAoBOSk7oUCKUANYQQSAGZRSkALoAuKACMkSLBBwoA3PQC+GoA'>Try</a></div></pre>\n<p>In this example, <code>OptionsFlags</code> will take all the properties from the type <code>Type</code> and change their values to be a boolean.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type FeatureFlags = {&#10;    darkMode: () => void;&#10;    newUserProfile: () => void;&#10;}' >FeatureFlags</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) darkMode: () => void' >darkMode</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) newUserProfile: () => void' >newUserProfile</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type FeatureOptions = {&#10;    darkMode: boolean;&#10;    newUserProfile: boolean;&#10;}' style='border-bottom: solid 2px lightgrey;'>FeatureOptions</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type OptionsFlags&lt;Type> = { [Property in keyof Type]: boolean; }' >OptionsFlags</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type FeatureFlags = {&#10;    darkMode: () => void;&#10;    newUserProfile: () => void;&#10;}' >FeatureFlags</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type FeatureOptions = {\n    darkMode: boolean;\n    newUserProfile: boolean;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8mwEsD2A7AzgMQDYEMDmaAPACrgQB8UAvFAN4BQUUA2gAoBOSk7oUCKUANYQQSAGZRSkALoAuKACMkSLBBwoA3PQC+WgPR6oAWhMBjAK7ATR+qEhQMa4OfYRs+NNTqMoAExzsggCySL4Q8gAUAJTUlABuSAi+WkwoEADuAKpoEOwc4giqkTFU8YnJOlq2ZA5OLhBwiKieNI3I6O4EhI44zq6daOT6hkwAegD8QA'>Try</a></div></pre>\n<h3 id=\"mapping-modifiers\" style=\"position:relative;\"><a href=\"#mapping-modifiers\" aria-label=\"mapping modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapping Modifiers</h3>\n<p>There are two additional modifiers which can be applied during mapping: <code>readonly</code> and <code>?</code> which affect mutability and optionality respectively.</p>\n<p>You can remove or add these modifiers by prefixing with <code>-</code> or <code>+</code>. If you don’t add a prefix, then <code>+</code> is assumed.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Removes &apos;readonly&apos; attributes from a type&apos;s properties</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type CreateMutable&lt;Type> = { -readonly [Property in keyof Type]: Type[Property]; }' >CreateMutable</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type CreateMutable&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  -</span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type CreateMutable&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type CreateMutable&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LockedAccount = {&#10;    readonly id: string;&#10;    readonly name: string;&#10;}' >LockedAccount</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) id: string' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type UnlockedAccount = {&#10;    id: string;&#10;    name: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>UnlockedAccount</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type CreateMutable&lt;Type> = { -readonly [Property in keyof Type]: Type[Property]; }' >CreateMutable</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type LockedAccount = {&#10;    readonly id: string;&#10;    readonly name: string;&#10;}' >LockedAccount</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type UnlockedAccount = {\n    id: string;\n    name: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAECUFMFsHsDdIGdQHIBOkCGATWA7AGwE9VQsAXC9ASwCMBXC5UAM3VmnNAuIAdIqFHw4D0FGsgBQvAaADCmSpACyTLHUKQAPABV+kAHygAvKADeU0KAC0SvEWKgA2gAVRkcU5r5QAa0hiWFZQfQEAXQAuUIM3Dy9wgG4pAF9kmQNQABlYAGMAnABBXNzYBnwKUwsrUHsCElAaHGikah8Ac2TrOsdQfCxoSBa2-E7U9NlIUABVIjyC4tLyyrNFbGY1Cg0tbRz8yCKSsorDZJBrUAA9AH4gA'>Try</a></div></pre>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Removes &apos;optional&apos; attributes from a type&apos;s properties</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Concrete&lt;Type> = { [Property in keyof Type]-?: Type[Property]; }' >Concrete</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Concrete&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Concrete&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">]-?: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Concrete&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MaybeUser = {&#10;    id: string;&#10;    name?: string | undefined;&#10;    age?: number | undefined;&#10;}' >MaybeUser</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) id: string' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name?: string | undefined' >name</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age?: number | undefined' >age</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type User = {&#10;    id: string;&#10;    name: string;&#10;    age: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>User</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Concrete&lt;Type> = { [Property in keyof Type]-?: Type[Property]; }' >Concrete</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type MaybeUser = {&#10;    id: string;&#10;    name?: string | undefined;&#10;    age?: number | undefined;&#10;}' >MaybeUser</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type User = {\n    id: string;\n    name: string;\n    age: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAECUFMFsHsDdIGdQHJYAcAuBLWA7AQwBtVRCssAnHAIwFctlQAzK2ac0LATw0lQoM7flVzIAUL36gAwgQDGVSEwA8AFT6QAfKAC8oAN4TQoANoAFEZDE9QOfKADWkHrBahN-ALoBaAPwAXJ5alta23gDcEgC+0VJaoACyhDy0kACqSDb6Rib2ACbBSNQOAObRpkTQkEGgJTT4FfmEZbXB+PTQ6VTRcRIJMlk5BvL4SiqQqilpmdlU2tEgpqAAev5AA'>Try</a></div></pre>\n<h2 id=\"key-remapping-via-as\" style=\"position:relative;\"><a href=\"#key-remapping-via-as\" aria-label=\"key remapping via as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Remapping via <code>as</code></h2>\n<p>In TypeScript 4.1 and onwards, you can re-map keys in mapped types with an <code>as</code> clause in a mapped type:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MappedTypeWithNewProperties</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Type</span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\">Properties</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NewKeyType</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">Type</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Properties</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>You can leverage features like <a href=\"/docs/handbook/2/template-literal-types.html\">template literal types</a> to create new property names from prior ones:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Getters&lt;Type> = { [Property in keyof Type as `get${Capitalize&lt;string &amp; Property>}`]: () => Type[Property]; }' >Getters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Getters&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Getters&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`get</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Capitalize&lt;S extends string> = intrinsic' >Capitalize</data-lsp></span><span style=\"color: #000000FF\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">&</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000FF\">&gt;</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">]: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Getters&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.location: string' >location</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LazyPerson = {&#10;    getName: () => string;&#10;    getAge: () => number;&#10;    getLocation: () => string;&#10;}' style='border-bottom: solid 2px lightgrey;'>LazyPerson</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Getters&lt;Type> = { [Property in keyof Type as `get${Capitalize&lt;string &amp; Property>}`]: () => Type[Property]; }' >Getters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type LazyPerson = {\n    getName: () =&gt; string;\n    getAge: () =&gt; number;\n    getLocation: () =&gt; string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hzAgJwM4B4Aq4ID4oF4oBvAKCnKgG0AFJAe0iVCgEsA7KAawhDoDMoWSFACGKKAAMA5vAAkRAMIiwLYCIA2LAF4Q0KYEnZSoAMii0GyUDgC+EgLoAuKAAoAlATxCINeo1D2JDYA3CQk7IhIfCIAxtDUyCh0HKQUUGwiALYQzvqGbFKhaSIyzmwArpkARshFFOp0MSLALMm5BkahNmGgwgAyIlogCajJBLDwkegjSWw4oQD0CxQAegD8QA'>Try</a></div></pre>\n<p>You can filter out keys by producing <code>never</code> via a conditional type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Remove the &apos;kind&apos; property</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type RemoveKindField&lt;Type> = { [Property in keyof Type as Exclude&lt;Property, \"kind\">]: Type[Property]; }' >RemoveKindField</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type RemoveKindField&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type RemoveKindField&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"kind\"</span><span style=\"color: #000000\">&gt;]: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type RemoveKindField&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.kind: \"circle\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type KindlessCircle = {&#10;    radius: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>KindlessCircle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type RemoveKindField&lt;Type> = { [Property in keyof Type as Exclude&lt;Property, \"kind\">]: Type[Property]; }' >RemoveKindField</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type KindlessCircle = {\n    radius: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAECUFMFsHsDdKgC4AskHIDWBLAdgCYagAOATrCZGcgJ4BQdVEMCkA0vgQGI6QA2BADwAVWlQB8oALygA3vVBLQAbQAKFKjVqh8oLJFqwAZqDHMAhgGdQAUQAeAY34BXApCEbK1OgBpQAES4hAESALoAXGbikOqaPrRh9AC+ANz09PjI1MYWjkgAwjhkzkgKyvpcUQGOxaUB6RVkFgQ4LlZReC7QAEbU6ckZTEichPyQVlZFJeMyLHCIozx8gkLTpRLpIMoAegD8QA'>Try</a></div></pre>\n<p>You can map over arbitrary unions, not just unions of <code>string | number | symbol</code>, but unions of any type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EventConfig&lt;Events extends { kind: string; }> = { [E in Events as E[\"kind\"]]: (event: E) => void; }' >EventConfig</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Events in type EventConfig&lt;Events extends { kind: string; }>' >Events</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: string' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) E' >E</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Events in type EventConfig&lt;Events extends { kind: string; }>' >Events</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) E' >E</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"kind\"</span><span style=\"color: #000000\">]]: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) event: E extends Events' >event</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) E' >E</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type SquareEvent = {&#10;    kind: \"square\";&#10;    x: number;&#10;    y: number;&#10;}' >SquareEvent</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"square\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type CircleEvent = {&#10;    kind: \"circle\";&#10;    radius: number;&#10;}' >CircleEvent</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) kind: \"circle\"' >kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Config = {&#10;    square: (event: SquareEvent) => void;&#10;    circle: (event: CircleEvent) => void;&#10;}' style='border-bottom: solid 2px lightgrey;'>Config</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type EventConfig&lt;Events extends { kind: string; }> = { [E in Events as E[\"kind\"]]: (event: E) => void; }' >EventConfig</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type SquareEvent = {&#10;    kind: \"square\";&#10;    x: number;&#10;    y: number;&#10;}' >SquareEvent</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='type CircleEvent = {&#10;    kind: \"circle\";&#10;    radius: number;&#10;}' >CircleEvent</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type Config = {\n    square: (event: SquareEvent) =&gt; void;\n    circle: (event: CircleEvent) =&gt; void;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogbhAdsAwge0QMwJYHMA88SwAzlBAB7BIAmZA3lANbaI0BcUJwATq7lAC+APigBeKPQBQUWVADaMKK1gJkZAIZkY8gEQs2ugLpHOACghrgnGAEpxouGmw0A3FMFSpoSFADKAI4Arho8EETI4pLMrBxQuiTBoRC6ADRQFJyIQQC2AEYQPOkgWbkFPELuPtAo2DwAxgA24VZRjAZxuvV1TSnpPBo02EEkpfmFlV7VUOhYeFERqBg4BIEhYYtQAD4zPc2LwlIA9EdyAHoA-EA'>Try</a></div></pre>\n<h3 id=\"further-exploration\" style=\"position:relative;\"><a href=\"#further-exploration\" aria-label=\"further exploration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further Exploration</h3>\n<p>Mapped types work well with other features in this type manipulation section, for example here is <a href=\"/docs/handbook/2/conditional-types.html\">a mapped type using a conditional type</a> which returns either a <code>true</code> or <code>false</code> depending on whether an object has the property <code>pii</code> set to the literal <code>true</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ExtractPII&lt;Type> = { [Property in keyof Type]: Type[Property] extends {&#10;    pii: true;&#10;} ? true : false; }' >ExtractPII</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ExtractPII&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ExtractPII&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ExtractPII&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Property' >Property</data-lsp></span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) pii: true' >pii</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DBFields = {&#10;    id: {&#10;        format: \"incrementing\";&#10;    };&#10;    name: {&#10;        type: string;&#10;        pii: true;&#10;    };&#10;}' >DBFields</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) id: {&#10;    format: \"incrementing\";&#10;}' >id</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) format: \"incrementing\"' >format</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"incrementing\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: {&#10;    type: string;&#10;    pii: true;&#10;}' >name</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string' >type</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) pii: true' >pii</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ObjectsNeedingGDPRDeletion = {&#10;    id: false;&#10;    name: true;&#10;}' style='border-bottom: solid 2px lightgrey;'>ObjectsNeedingGDPRDeletion</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ExtractPII&lt;Type> = { [Property in keyof Type]: Type[Property] extends {&#10;    pii: true;&#10;} ? true : false; }' >ExtractPII</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type DBFields = {&#10;    id: {&#10;        format: \"incrementing\";&#10;    };&#10;    name: {&#10;        type: string;&#10;        pii: true;&#10;    };&#10;}' >DBFields</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>                 </span><span class='popover'><div class='arrow'></div>type ObjectsNeedingGDPRDeletion = {\n    id: false;\n    name: true;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogHsATgQwMbAAoEksB4Aq4EAfFALxQDeAUFFANoaID2kioUAlgHZQDWEEMwBmUQpAC6ALjFFGLNqAlQICCNwAmAZypQwnTjKQBXaAF8oAfignoM4cgA2WiAG5qZ99VCQoAEQAhADFOCEdtcipaLg0ZSihhZkQAW2RgGQAiHlRECGT1YB4AcwyoT2juZHy4myIZLSRi1z0DI0RTMvdy7yIoAHkAIwArCHQtADkICA1igHE-DAAlPzCIQuZeCngkNEwcXECQsO1idwB6M7ooAD1LIA'>Try</a></div></pre>","headings":[{"value":"Mapping Modifiers","depth":3},{"value":"Key Remapping via as","depth":2},{"value":"Further Exploration","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/mapped-types.html","title":"Mapped Types","disable_toc":null,"handbook":null,"oneline":"Generating types by re-using an existing type.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Conditional Types","oneline":"Create types which act like if statements in the type system.","permalink":"/docs/handbook/2/conditional-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Template Literal Types","oneline":"Generating mapping types which change properties via template literal strings.","permalink":"/docs/handbook/2/template-literal-types.html"}}}},"pageContext":{"id":"1-mapped-types","slug":"/docs/handbook/2/mapped-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md","previousID":"0ae8eb34-a050-5a85-a6ed-be4aa29fd63d","nextID":"a2a04e00-9af7-51cf-8533-fe6f6f280e09","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}