{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/template-literal-types.html","result":{"data":{"markdownRemark":{"id":"db17d10d-ead4-5988-94f4-47250a0f08fb","excerpt":"Template literal types build on string literal types, and have the ability to expand into many strings via unions. They have the same syntax as template literal…","html":"<p>Template literal types build on <a href=\"/docs/handbook/2/everyday-types.html#literal-types\">string literal types</a>, and have the ability to expand into many strings via unions.</p>\n<p>They have the same syntax as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literal strings in JavaScript</a>, but are used in type positions.\nWhen used with concrete literal types, a template literal produces a new string literal type by concatenating the contents.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type World = \"world\"' >World</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"hello world\"' style='border-bottom: solid 2px lightgrey;'>Greeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type World = \"world\"' >World</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Greeting = \"hello world\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA6g9gJwDYBMoF4oCIDujVYDcAUMaJFAOIIQTACWAdgOYZQAGAFhEknFABIA3vGQoAvuxIB6aVHkA9APxA'>Try</a></div></pre>\n<p>When a union is used in the interpolated position, the type is the set of every possible string literal that could be represented by each union member:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailLocaleIDs = \"welcome_email\" | \"email_heading\"' >EmailLocaleIDs</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"welcome_email\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"email_heading\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\"' >FooterLocaleIDs</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"footer_title\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"footer_sendoff\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type AllLocaleIDs = \"welcome_email_id\" | \"email_heading_id\" | \"footer_title_id\" | \"footer_sendoff_id\"' style='border-bottom: solid 2px lightgrey;'>AllLocaleIDs</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailLocaleIDs = \"welcome_email\" | \"email_heading\"' >EmailLocaleIDs</data-lsp></span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\"' >FooterLocaleIDs</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">_id`</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>type AllLocaleIDs = \"welcome_email_id\" | \"email_heading_id\" | \"footer_title_id\" | \"footer_sendoff_id\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogtgQwJYBsAyB7AxglECSAIgM5QC8UARAO4QpYZwQD6EiqlUAPlW8iswAWEBABMkAOwDmlANwAoUJCgAxDBmAQATphx4ipCpQBm6zVubAkwPJx4mz25sQgTRGY8bnzF4aAEEUdGxcAhJyKAADABIAb3h+XVCDblVHHRD9EgBfZiRRSIUAeiKoMoA9AH4gA'>Try</a></div></pre>\n<p>For each interpolated position in the template literal, the unions are cross multiplied:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type AllLocaleIDs = \"welcome_email_id\" | \"email_heading_id\" | \"footer_title_id\" | \"footer_sendoff_id\"' >AllLocaleIDs</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailLocaleIDs = \"welcome_email\" | \"email_heading\"' >EmailLocaleIDs</data-lsp></span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\"' >FooterLocaleIDs</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">_id`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Lang = \"en\" | \"ja\" | \"pt\"' >Lang</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"en\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"ja\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"pt\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LocaleMessageIDs = \"en_welcome_email_id\" | \"en_email_heading_id\" | \"en_footer_title_id\" | \"en_footer_sendoff_id\" | \"ja_welcome_email_id\" | \"ja_email_heading_id\" | \"ja_footer_title_id\" | \"ja_footer_sendoff_id\" | \"pt_welcome_email_id\" | \"pt_email_heading_id\" | \"pt_footer_title_id\" | \"pt_footer_sendoff_id\"' style='border-bottom: solid 2px lightgrey;'>LocaleMessageIDs</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Lang = \"en\" | \"ja\" | \"pt\"' >Lang</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">_</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type AllLocaleIDs = \"welcome_email_id\" | \"email_heading_id\" | \"footer_title_id\" | \"footer_sendoff_id\"' >AllLocaleIDs</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>type LocaleMessageIDs = \"en_welcome_email_id\" | \"en_email_heading_id\" | \"en_footer_title_id\" | \"en_footer_sendoff_id\" | \"ja_welcome_email_id\" | \"ja_email_heading_id\" | \"ja_footer_title_id\" | \"ja_footer_sendoff_id\" | \"pt_welcome_email_id\" | \"pt_email_heading_id\" | \"pt_footer_title_id\" | \"pt_footer_sendoff_id\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogtgQwJYBsAyB7AxglECSAIgM5QC8UARAO4QpYZwQD6EiqlUAPlW8iswAWEBABMkAOwDmlANwAoUJCgAxDBmAQATphx4ipCpQBm6zVubAkwPJx4mz25sQgTRGY8bnyA9D6gAtEFYAK7AQQGK4NAAgijo2LgEJORQAAYAJADe8Py6SQbcqo46ifokAL7MSKJpCkrQaAjSqZSudlQAVggdlGDA3lHK+XgAshDExAhSyYbp2U3SVdlxCXqzFXW+-lBQAHoA-EA'>Try</a></div></pre>\n<p>We generally recommend that people use ahead-of-time generation for large string unions, but this is useful in smaller cases.</p>\n<h3 id=\"string-unions-in-types\" style=\"position:relative;\"><a href=\"#string-unions-in-types\" aria-label=\"string unions in types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Unions in Types</h3>\n<p>The power in template literals comes when defining a new string based on information inside a type.</p>\n<p>Consider the case where a function (<code>makeWatchedObject</code>) adds a new function\ncalled <code>on()</code> to a passed object.  In JavaScript, its call might look like:\n<code>makeWatchedObject(baseObject)</code>. We can imagine the base object as looking\nlike:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const passedObject: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}' >passedObject</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) firstName: string' >firstName</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) lastName: string' >lastName</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAGNqRQF1AA4CGKKApgCYDyARgFZkb4C8oA3mqKAGYCWquAHJEAtmQBcoAEQBlItH7kpAGk6gANiSGiJ0gErYikFWqIBzXQCYAbKoC+AbiA'>Try</a></div></pre>\n<p>The <code>on</code> function that will be added to the base object expects two arguments, an <code>eventName</code> (a <code>string</code>) and a <code>callBack</code> (a <code>function</code>).</p>\n<p>The <code>eventName</code> should be of the form <code>attributeInThePassedObject + \"Changed\"</code>; thus, <code>firstNameChanged</code> as derived from the attribute <code>firstName</code> in the base object.</p>\n<p>The <code>callBack</code> function, when called:</p>\n<ul>\n<li>Should be passed a value of the type associated with the name <code>attributeInThePassedObject</code>; thus, since <code>firstName</code> is typed as <code>string</code>, the callback for the <code>firstNameChanged</code> event expects a <code>string</code> to be passed to it at call time. Similarly events associated with <code>age</code> should expect to be called with a <code>number</code> argument</li>\n<li>Should have <code>void</code> return type (for simplicity of demonstration)</li>\n</ul>\n<p>The naive function signature of <code>on()</code> might thus be: <code>on(eventName: string, callBack: (newValue: any) => void)</code>. However, in the preceding description, we identified important type constraints that we’d like to document in our code. Template Literal types let us bring these constraints into our code.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const person: any' >person</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeWatchedObject(obj: any): any' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) firstName: string' >firstName</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) lastName: string' >lastName</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// makeWatchedObject has added `on` to the anonymous Object</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const person: any' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newValue: any' >newValue</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`firstName was changed to </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newValue: any' >newValue</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFABMCmBjANgIbxagBmArpDgC4CW0koAtgQNZYDqB1OAFlhgDyAIwBWuagApoYgFygCkAJ4BKeYqUBuNCFABaAznLUDetDgYpqoAA5ZUDUAF5mbTtz4CR4mpIDeaKBktKjUAHIETFjyAEQAygTQIShYMQA0gaCEVhFRsQBKDIrpmQQA5tGgAEwAbBkAviraOmAs7Fw8-EJiEqC8BCgKGNgYoAAGDGOg1NDT-AowykzQ5IPeEmhodg6QAHQMkjGkyeGRWADC-ZAVGOmgkpBYAO4AagR45FgqzgB8oAFBCyQFDQPBYXZ4aBlSRjY6hXIkJ4DUB8RQ3aazAAkfker3en3qAEIxk00I1NEA'>Try</a></div></pre>\n<p>Notice that <code>on</code> listens on the event <code>\"firstNameChanged\"</code>, not just <code>\"firstName\"</code>. Our naive specification of <code>on()</code> could be made more robust if we were to ensure that the set of eligible event names was constrained by the union of attribute names in the watched object with “Changed” added at the end. While we are comfortable with doing such a calculation in JavaScript i.e. <code>Object.keys(passedObject).map(x => `${x}Changed`)</code>, template literals <em>inside the type system</em> provide a similar approach to string manipulation:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type PropEventSource&lt;Type> = {&#10;    on(eventName: `${string &amp; keyof Type}Changed`, callback: (newValue: any) => void): void;&#10;}' >PropEventSource</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(method) on(eventName: `${string &amp; keyof Type}Changed`, callback: (newValue: any) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) eventName: `${string &amp; keyof Type}Changed`' >eventName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">&</span><span style=\"color: #000000FF\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Changed`</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (newValue: any) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newValue: any' >newValue</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/// Create a \"watched object\" with an &apos;on&apos; method</span></div><div class='line'><span style=\"color: #008000\">/// so that you can watch for changes to properties.</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='type PropEventSource&lt;Type> = {&#10;    on(eventName: `${string &amp; keyof Type}Changed`, callback: (newValue: any) => void): void;&#10;}' >PropEventSource</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACgTgezAUQG4QHbAMoIK5wDGEAPACrgQB8UAvFAN4BQUrUCGAFBOlgHIBDALYQAXFAAGAEgYBnYHACWGAOZQAZFADWEEAgBmUCpAC+AYQAWA1RAAmEgDRRCAgDauARgMJbxnDBAA7gBqbnhiUNYgAJR0NKgIirbR4glJANxMJplMAPT5UGZwEALA0AJQAESBpYQWduweAFYQhMCVUIGKwBaRGFAA5BwDUCI9CLZ5BbIIUD2lUHp4ztadtb36CHDOVjayc7NgiJBwwIoQsgB0TLatrgLFUPp4GG2KHKMCOgDq63YA8s1WsByJQqJwEM1xMYICkjJQNLBjmhMDh8ERSDCqOkgA'>Try</a></div></pre>\n<p>With this, we can build something that errors when given the wrong property:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeWatchedObject&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>(obj: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}): {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) firstName: string' >firstName</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) lastName: string' >lastName</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) on(eventName: \"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\", callback: (newValue: any) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Prevent easy human error (using the key instead of the event name)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) on(eventName: \"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\", callback: (newValue: any) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;firstName&quot;</data-err></span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {});</span></div><span class=\"error\"><span>Argument of type '\"firstName\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"firstName\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// It&apos;s typo-resistant</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) on(eventName: \"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\", callback: (newValue: any) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;frstNameChanged&quot;</data-err></span><span style=\"color: #000000\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {});</span></div><span class=\"error\"><span>Argument of type '\"frstNameChanged\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"frstNameChanged\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAArwkCiAbpAHYEDKcArtAMaQA8AKqUgA+UAF5QAbzyhZoOIwAUkBswByAQwC2kVAAMAJJMQFoAS0YBzUADJQAa0hE4AM1CCyAXwDCACw1WkAAmegA0oFwaADZRAEYaXPaoioyQAO4AatHsuqABRACU4qJ0cGZBBail5QDceJ51eEGQXFEa0OQu7IxcBGYKoFoajgDqGgRcvsEA8rEAVi0EAsKKcPOo-JXutpTU9EysHNx8-MJ1IKAAtNdc7ATXl3hcCiagZEgDEkOj45Mz84tFNJZC4zEgCJodKgAEQsDRlJCQaGhGSgNomSG5aEAJQUAWRqI0llyaAAbPUCo13ogFAA6BSKaGg8GYvwBYlBZGgRRFMSiSSeSl4PAXKgqA6gSAaRBEUC+dhDRiS2AIbnsRAWawEKYOJygCwmKVBeRubXkcXMUCMbSQAp4al0hlMsEYm1cnnFKSCxoXACSBAA5IhQMQSHBLh0NSYAgR7TAaYx6UomSybWzApzwh6+V7KUA'>Try</a></div></pre>\n<h3 id=\"inference-with-template-literals\" style=\"position:relative;\"><a href=\"#inference-with-template-literals\" aria-label=\"inference with template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inference with Template Literals</h3>\n<p>Notice that we did not benefit from all the information provided in the original passed object. Given change of a <code>firstName</code> (i.e. a <code>firstNameChanged</code> event),  we should expect that the callback will receive an argument of type <code>string</code>. Similarly, the callback for a change to <code>age</code> should receive a <code>number</code> argument. We’re naively using <code>any</code> to type the <code>callBack</code>’s argument. Again, template literal types make it possible to ensure an attribute’s data type will be the same type as that attribute’s callback’s first argument.</p>\n<p>The key insight that makes this possible is this: we can use a function with a generic such that:</p>\n<ol>\n<li>The literal used in the first argument is captured as a literal type</li>\n<li>That literal type can be validated as being in the union of valid attributes in the generic</li>\n<li>The type of the validated attribute can be looked up in the generic’s structure using Indexed Access</li>\n<li>This typing information can <em>then</em> be applied to ensure the argument to the\ncallback function is of the same type</li>\n</ol>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type PropEventSource&lt;Type> = {&#10;    on&lt;Key extends string &amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void;&#10;}' >PropEventSource</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\"><data-lsp lsp='(method) on&lt;Key extends string &amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void' >on</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Key in on&lt;Key extends string &amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void' >Key</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> & </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">        (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) eventName: `${Key}Changed`' >eventName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Key in on&lt;Key extends string &amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void' >Key</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Changed`</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (newValue: Type[Key]) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newValue: Type[Key]' >newValue</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Key in on&lt;Key extends string &amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void' >Key</data-lsp></span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> ): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='function makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='type PropEventSource&lt;Type> = {&#10;    on&lt;Key extends string &amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void;&#10;}' >PropEventSource</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in makeWatchedObject&lt;Type>(obj: Type): Type &amp; PropEventSource&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='function makeWatchedObject&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>(obj: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}): {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >makeWatchedObject</data-lsp></span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) firstName: string' >firstName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) lastName: string' >lastName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">26</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) on&lt;\"firstName\">(eventName: \"firstNameChanged\", callback: (newValue: string) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) newName: string' style='border-bottom: solid 2px lightgrey;'>newName</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='meta-line'><span class='popover-prefix'>                                </span><span class='popover'><div class='arrow'></div>(parameter) newName: string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`new name is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) newName: string' >newName</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='const person: {&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;} &amp; PropEventSource&lt;{&#10;    firstName: string;&#10;    lastName: string;&#10;    age: number;&#10;}>' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(method) on&lt;\"age\">(eventName: \"ageChanged\", callback: (newValue: number) => void): void' >on</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"ageChanged\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) newAge: number' style='border-bottom: solid 2px lightgrey;'>newAge</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='meta-line'><span class='popover-prefix'>                          </span><span class='popover'><div class='arrow'></div>(parameter) newAge: number</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newAge: number' >newAge</data-lsp></span><span style=\"color: #000000\"> &lt; 0) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.warn(...data: any[]): void' >warn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"warning! negative age\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACgTgezAUQG4QHbAMoIK5wDGEAPACrgQB8UAvFAN4BQUrUCGJA0hCFBAA9gmACYBnKGOBwAlhgDmUAGRQA1rwQAzKBUhUWbQwAoI6LADkAhgFsIALigADACQMeIAL4BhABaWFECKOADRQhJYANhEARpaEqg5GGBAA7gBqkXj2OpQA2u4AugCUdDSoCDIiUEUO5ZUA3EwejUwiEIQRlnDQmngYhMAyHFDWluoA6pbAhD6BAPLRAFbtwOSUVEYISw66EDU5kMqwiChmOPhEpLtULYQcUlCQcGLD9KMTUzPzSytGzKyaGTPYBWWwOABE2EsFWeEHBwQMnSkoOy4IAShx-PCDJZ5NkAEwANiaRRaTxeGAAdBwjODAcCUb5-HiRPCoMkUijSowDKwAPR8wxC4Ui1gAPQA-LywvcEBEIJSIgh5EZHBz2TZoDIJK4OSjKcAEABVMBPLyWMQQIxFDyOUkkskQZ4cakYWm4iBMgKs0IcgCCeO5-zYAtFYagkulMm0SVSAegJCgAAYSsHhXcMC95ZSUl03eDc3AMHJ5ABCdkQeRTGToKAe8H2wweElAA'>Try</a></div></pre>\n<p>Here we made <code>on</code> into a generic method.</p>\n<p>When a user calls with the string <code>\"firstNameChanged\"</code>, TypeScript will try to infer the right type for <code>Key</code>.\nTo do that, it will match <code>Key</code> against the content prior to <code>\"Changed\"</code> and infer the string <code>\"firstName\"</code>.\nOnce TypeScript figures that out, the <code>on</code> method can fetch the type of <code>firstName</code> on the original object, which is <code>string</code> in this case.\nSimilarly, when called with <code>\"ageChanged\"</code>, TypeScript finds the type for the property <code>age</code> which is <code>number</code>.</p>\n<p>Inference can be combined in different ways, often to deconstruct strings, and reconstruct them in different ways.</p>\n<h2 id=\"intrinsic-string-manipulation-types\" style=\"position:relative;\"><a href=\"#intrinsic-string-manipulation-types\" aria-label=\"intrinsic string manipulation types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intrinsic String Manipulation Types</h2>\n<p>To help with string manipulation, TypeScript includes a set of types which can be used in string manipulation. These types come built-in to the compiler for performance and can’t be found in the <code>.d.ts</code> files included with TypeScript.</p>\n<h3 id=\"uppercasestringtype\" style=\"position:relative;\"><a href=\"#uppercasestringtype\" aria-label=\"uppercasestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Uppercase&#x3C;StringType></code></h3>\n<p>Converts each character in the string to the uppercase version.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"Hello, world\"' >Greeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello, world\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ShoutyGreeting = \"HELLO, WORLD\"' style='border-bottom: solid 2px lightgrey;'>ShoutyGreeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Uppercase&lt;S extends string> = intrinsic' >Uppercase</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"Hello, world\"' >Greeting</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type ShoutyGreeting = \"HELLO, WORLD\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ASCIICacheKey&lt;Str extends string> = `ID-${Uppercase&lt;Str>}`' >ASCIICacheKey</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in type ASCIICacheKey&lt;Str extends string>' >Str</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #A31515\">`ID-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Uppercase&lt;S extends string> = intrinsic' >Uppercase</data-lsp></span><span style=\"color: #000000FF\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in type ASCIICacheKey&lt;Str extends string>' >Str</data-lsp></span><span style=\"color: #000000FF\">&gt;</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MainID = \"ID-MY_APP\"' style='border-bottom: solid 2px lightgrey;'>MainID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ASCIICacheKey&lt;Str extends string> = `ID-${Uppercase&lt;Str>}`' >ASCIICacheKey</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"my_app\"</span><span style=\"color: #000000\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type MainID = \"ID-MY_APP\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gThCwCWA7A5lAvFARACQgBsiB7AGigHdS4iATXAKFEigGUALUgV1HkQoM2KAFUwkOAGMAhgGcIAHgFI06AHxMA9Fqh6AegH4mLcNACC7AMIBJG1ZlTOEANIQQi9sDhQIAD2AIVHo5KDlvNXURAAMbABEAWgASAG9xSVkFT291AF9o0zYAWRk0eJFLW3tHZzcPXABbEAB9GQlcTR09KCMgA'>Try</a></div></pre>\n<h3 id=\"lowercasestringtype\" style=\"position:relative;\"><a href=\"#lowercasestringtype\" aria-label=\"lowercasestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Lowercase&#x3C;StringType></code></h3>\n<p>Converts each character in the string to the lowercase equivalent.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"Hello, world\"' >Greeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello, world\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type QuietGreeting = \"hello, world\"' style='border-bottom: solid 2px lightgrey;'>QuietGreeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Lowercase&lt;S extends string> = intrinsic' >Lowercase</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"Hello, world\"' >Greeting</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>type QuietGreeting = \"hello, world\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ASCIICacheKey&lt;Str extends string> = `id-${Lowercase&lt;Str>}`' >ASCIICacheKey</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in type ASCIICacheKey&lt;Str extends string>' >Str</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #A31515\">`id-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1C6277\"><data-lsp lsp='type Lowercase&lt;S extends string> = intrinsic' >Lowercase</data-lsp></span><span style=\"color: #000000FF\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in type ASCIICacheKey&lt;Str extends string>' >Str</data-lsp></span><span style=\"color: #000000FF\">&gt;</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MainID = \"id-my_app\"' style='border-bottom: solid 2px lightgrey;'>MainID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ASCIICacheKey&lt;Str extends string> = `id-${Lowercase&lt;Str>}`' >ASCIICacheKey</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"MY_APP\"</span><span style=\"color: #000000\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type MainID = \"id-my_app\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gThCwCWA7A5lAvFARACQgBsiB7AGigHdS4iATXAKFEigEUBXZJeRFDNigAZUlQhwAxgEMAzhAA8fJGnQA+JgHpNUXQD0A-ExbhoAQQDKAYQCSNq9MkALCAGkIIBReBwoEAB7AEKj0slCyPqpqQgAGyPQAtAAkAN6i4lJyit5wagC+MSZsALLSaDYAIkKWtvaOLu6euMUAmgD6ZgAKnbga2rpQhkA'>Try</a></div></pre>\n<h3 id=\"capitalizestringtype\" style=\"position:relative;\"><a href=\"#capitalizestringtype\" aria-label=\"capitalizestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Capitalize&#x3C;StringType></code></h3>\n<p>Converts the first character in the string to an uppercase equivalent.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LowercaseGreeting = \"hello, world\"' >LowercaseGreeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello, world\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Greeting = \"Hello, world\"' style='border-bottom: solid 2px lightgrey;'>Greeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Capitalize&lt;S extends string> = intrinsic' >Capitalize</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type LowercaseGreeting = \"hello, world\"' >LowercaseGreeting</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Greeting = \"Hello, world\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAMg9gdwgJwMYEMDOEDiyITACWAdgOZQC8UARABYQA2jcANFAnMowCY0DcAKFCQoeAsXJUoAYXRgiwdIyIAvCAB54SNFlz5CpMgD4hAejNQrAPQD8QA'>Try</a></div></pre>\n<h3 id=\"uncapitalizestringtype\" style=\"position:relative;\"><a href=\"#uncapitalizestringtype\" aria-label=\"uncapitalizestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Uncapitalize&#x3C;StringType></code></h3>\n<p>Converts the first character in the string to a lowercase equivalent.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type UppercaseGreeting = \"HELLO WORLD\"' >UppercaseGreeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"HELLO WORLD\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type UncomfortableGreeting = \"hELLO WORLD\"' style='border-bottom: solid 2px lightgrey;'>UncomfortableGreeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Uncapitalize&lt;S extends string> = intrinsic' >Uncapitalize</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type UppercaseGreeting = \"HELLO WORLD\"' >UppercaseGreeting</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type UncomfortableGreeting = \"hELLO WORLD\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAqmkCcDGBDAzhA4giFgEsA7AcygF4oAiACQFEAZegeSgHUmAlegEUoG4AUKEixCSAPYBbAGbiEwFACMANlhx4ipCjDEow+BcvwAvCAB44iVBmy4CJAHyCA9M6juAegH4gA'>Try</a></div></pre>\n<details>\n    <summary>Technical details on the intrinsic string manipulation types</summary>\n    <p>The code, as of TypeScript 4.1, for these intrinsic functions uses the JavaScript string runtime functions directly for manipulation and are not locale aware.</p>\n    <code><pre>\nfunction applyStringMapping(symbol: Symbol, str: string) {\n    switch (intrinsicTypeKinds.get(symbol.escapedName as string)) {\n        case IntrinsicTypeKind.Uppercase: return str.toUpperCase();\n        case IntrinsicTypeKind.Lowercase: return str.toLowerCase();\n        case IntrinsicTypeKind.Capitalize: return str.charAt(0).toUpperCase() + str.slice(1);\n        case IntrinsicTypeKind.Uncapitalize: return str.charAt(0).toLowerCase() + str.slice(1);\n    }\n    return str;\n}</pre></code>\n</details>","headings":[{"value":"String Unions in Types","depth":3},{"value":"Inference with Template Literals","depth":3},{"value":"Intrinsic String Manipulation Types","depth":2},{"value":"Uppercase<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Lowercase<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Capitalize<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Uncapitalize<StringType>","depth":3},{"value":"Example","depth":5}],"frontmatter":{"permalink":"/docs/handbook/2/template-literal-types.html","title":"Template Literal Types","disable_toc":null,"handbook":null,"oneline":"Generating mapping types which change properties via template literal strings.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Mapped Types","oneline":"Generating types by re-using an existing type.","permalink":"/docs/handbook/2/mapped-types.html"}}},"next":null},"pageContext":{"id":"1-template-literal-types","slug":"/docs/handbook/2/template-literal-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md","previousID":"bf6cd4f5-7e48-53ba-9fd8-f45a2baba506","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}