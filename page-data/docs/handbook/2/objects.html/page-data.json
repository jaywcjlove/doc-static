{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/objects.html","result":{"data":{"markdownRemark":{"id":"f73553ac-3947-5cc9-aa47-10a5a8d2b154","excerpt":"In JavaScript, the fundamental way that we group and pass around data is through objects.\nIn TypeScript, we represent those through object types. As we’ve seen…","html":"<p>In JavaScript, the fundamental way that we group and pass around data is through objects.\nIn TypeScript, we represent those through <em>object types</em>.</p>\n<p>As we’ve seen, they can be anonymous:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: {&#10;    name: string;&#10;    age: number;&#10;}): string' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: {&#10;    name: string;&#10;    age: number;&#10;}' >person</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: {&#10;    name: string;&#10;    age: number;&#10;}' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQAd2oDOCAXIgN6JgCGAtumYVKjGMgNyLXINUi0AjAogC+ASgoAoRIgD0smYqXLlAPXUbNW7TtXTEGKCFRIARAAl0AGytxEpxAGpE+IggB0Neu0kigA'>Try</a></div></pre>\n<p>or they can be named by using either an interface</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: Person): string' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: Person' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: Person' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyA9CcRcgHo21HIhwC2EAXMhmFKAOYDc9ODzYMArkwBG0AQF8CBGKJAIwwHMh5QIEMAAoADphzt0UbCACU+elrCiouAEQAJCABs3WZI+QBqZIZmOAB0jCyyQA'>Try</a></div></pre>\n<p>or a type alias.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    name: string;&#10;    age: number;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: Person): string' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: Person' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    name: string;&#10;    age: number;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: Person' >person</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbwFBSgHpCoA9ci-KVAQwFsIAuKRYeAS1QHMBuKmrk2oBXOgCMEfAL59cAM2GoAxsHZooXeBAjAAFJCRpmcQ6gCUOKluDD46AEQAJCABsXyKPagBqKAZSoAHS0DNJAA'>Try</a></div></pre>\n<p>In all three examples above, we’ve written functions that take objects that contain the property <code>name</code> (which must be a <code>string</code>) and <code>age</code> (which must be a <code>number</code>).</p>\n<h2 id=\"property-modifiers\" style=\"position:relative;\"><a href=\"#property-modifiers\" aria-label=\"property modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property Modifiers</h2>\n<p>Each property in an object type can specify a couple of things: the type, whether the property is optional, and whether the property can be written to.</p>\n<h3 id=\"optional-properties\" style=\"position:relative;\"><a href=\"#optional-properties\" aria-label=\"optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Properties</h3>\n<p>Much of the time, we’ll find ourselves dealing with objects that <em>might</em> have a property set.\nIn those cases, we can mark those properties as <em>optional</em> by adding a question mark (<code>?</code>) to the end of their names.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PaintOptions' >PaintOptions</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Shape' >Shape</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.xPos?: number | undefined' >xPos</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.yPos?: number | undefined' >yPos</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PaintOptions' >PaintOptions</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getShape(): Shape' >getShape</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.xPos?: number | undefined' >xPos</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.yPos?: number | undefined' >yPos</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.xPos?: number | undefined' >xPos</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.yPos?: number | undefined' >yPos</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8C+AUACYQIA2cUKMAriAmMAPYjIDmEYG2EAFAEoAXGkw4A3IUIB6acgC0ihLTCL5hUJFiIUABTiaA8liasAzslyFkyM2IgieE68gAeu5mYD8IkLQC2AEbQkjayNgB6LgCeHt6+AcFQocjhyFFEhHQMpmxYBuBO-MwmZiL6RiYsIGYCli7hAHTNhJkI5mC29sgAvBxcRYKS+ZqDuF28yPgCwwXc9nzjdrwANG5xIgCMAAzbUzOEI4ULS-ZrsZ5bu-uzoycTOGvul8g72+cbr9fT4kA'>Try</a></div></pre>\n<p>In this example, both <code>xPos</code> and <code>yPos</code> are considered optional.\nWe can choose to provide either of them, so every call above to <code>paintShape</code> is valid.\nAll optionality really says is that if the property <em>is</em> set, it better have a specific type.</p>\n<p>We can also read from those properties - but when we do under <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>, TypeScript will tell us they’re potentially <code>undefined</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PaintOptions' >PaintOptions</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let xPos: number | undefined' >xPos</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.xPos?: number | undefined' style='border-bottom: solid 2px lightgrey;'>xPos</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>                   </span><span class='popover'><div class='arrow'></div>(property) PaintOptions.xPos?: number | undefined</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let yPos: number | undefined' >yPos</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.yPos?: number | undefined' style='border-bottom: solid 2px lightgrey;'>yPos</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>                   </span><span class='popover'><div class='arrow'></div>(property) PaintOptions.yPos?: number | undefined</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8C+AUACYQIA2cUKMAriAmMAPYjIDmEYG2EAFAEoAXGkw4A3IUKhIsRCgAKcGQHksTVgGdkuQsmSaxEETwl7kADwXNNAfhEhaAWwBG0SfoCe1uw+duoSSJCAHoQ5ABaKIRaMCiIwjoGDTYsZXBTfmZ1TRElVXUWEE0BHXNyLksfZABeZGywTQA6KxsPZDD9Lu6egD1bcsrvG1r6nKbhzXbOntn9fvNOpuXCfCA'>Try</a></div></pre>\n<p>In JavaScript, even if the property has never been set, we can still access it - it’s just going to give us the value <code>undefined</code>.\nWe can just handle <code>undefined</code> specially.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function paintShape(opts: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PaintOptions' >PaintOptions</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let xPos: number' style='border-bottom: solid 2px lightgrey;'>xPos</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.xPos?: number | undefined' >xPos</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.xPos?: number' >xPos</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let xPos: number</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let yPos: number' style='border-bottom: solid 2px lightgrey;'>yPos</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.yPos?: number | undefined' >yPos</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) opts: PaintOptions' >opts</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PaintOptions.yPos?: number' >yPos</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let yPos: number</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8C+AUACYQIA2cUKMAriAmMAPYjIDmEYG2EAFAEoAXGkw4A3IUKhIsRCgAKcGQHksTVgGdkuQsmSaxEETwl7kADwXNNAfhEhaAWwBG0SfoCe1uw+duoSSJCAHoQ5ABaKIRaMCiIwjoGDTYsZXBTfmZ1TRElVXUWEE0BHXNyLksfZABeZGywTQA6Kxtamrr6UhhQCGJkW2QABmQRBubWzQ9kMP0APVtyyu82uvGmle0OzpBu3v7BkbGcjZ9p2eQF81mm28J8IA'>Try</a></div></pre>\n<p>Note that this pattern of setting defaults for unspecified values is so common that JavaScript has syntax to support it.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function paintShape({ shape, xPos, yPos }: PaintOptions): void' >paintShape</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) shape: Shape' >shape</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) xPos: number' >xPos</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) yPos: number' >yPos</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> }: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PaintOptions' >PaintOptions</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"x coordinate at\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) xPos: number' style='border-bottom: solid 2px lightgrey;'>xPos</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>                                  </span><span class='popover'><div class='arrow'></div>(parameter) xPos: number</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"y coordinate at\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) yPos: number' style='border-bottom: solid 2px lightgrey;'>yPos</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>                                  </span><span class='popover'><div class='arrow'></div>(parameter) yPos: number</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8C+AUACYQIA2cUKMAriAmMAPYjIDmEYG2EAFAEoAXGkw4A3IUKhIsRCgAKcGQHksTVgGdkuQsmSaxEETwl7kADwXNNAfhEhaAWwBG0SfoCe1uw+duoSSJCAHoQ5ABaKIRaMCiIwjoGDTYsZXBTflwDIwAaSx9kAF5kAAZ87xtisuR8ESVVdRYQTQEdcwQtZnIIADpyZnY+ACILZE7mKGJQOEhkWeH8qxsBD2Qw-U2t7Z3d-QA9Ww6unv7Bkc9x5knpkFmUBYqfVfMNvfeP5EPX8N6-wnwQA'>Try</a></div></pre>\n<p>Here we used <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">a destructuring pattern</a> for <code>paintShape</code>’s parameter, and provided <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values\">default values</a> for <code>xPos</code> and <code>yPos</code>.\nNow <code>xPos</code> and <code>yPos</code> are both definitely present within the body of <code>paintShape</code>, but optional for any callers to <code>paintShape</code>.</p>\n<blockquote>\n<p>Note that there is currently no way to place type annotations within destructuring patterns.\nThis is because the following syntax already means something different in JavaScript.</p>\n</blockquote>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function draw({ shape, xPos }: {&#10;    shape: any;&#10;    xPos?: number | undefined;&#10;}): void' >draw</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) shape: any' >shape</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) Shape: any' >Shape</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) xPos?: number | undefined' >xPos</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) number: number' >number</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*...*/</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function render(x: unknown): any' >render</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >shape</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Cannot find name 'shape'. Did you mean 'Shape'?</span><span class=\"code\">2552</span></span><span class=\"error-behind\">Cannot find name 'shape'. Did you mean 'Shape'?</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function render(x: unknown): any' >render</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >xPos</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Cannot find name 'xPos'.</span><span class=\"code\">2304</span></span><span class=\"error-behind\">Cannot find name 'xPos'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAgTUBOT0TlxATAKzeeicAzAAYALLVSQszcumqgAygAsyieQG8AvrQAm1dMjJN5JAK6R0WVNEihjkPUwAUAD2LmA1jADukAJQA3PRgALRh6KZYYSG0ZhZWNqA6TGTeTuqglCpqxMqq1AA0oC4ACtAcoJCm8ABGzKAAvKAAjMLCoMAAVAB0vZ1gmn6g6rSgdtQOzE5Z+YGj45POpeVzmkA'>Try</a></div></pre>\n<p>In an object destructuring pattern, <code>shape: Shape</code> means “grab the property <code>shape</code> and redefine it locally as a variable named <code>Shape</code>.\nLikewise <code>xPos: number</code> creates a variable named <code>number</code> whose value is based on the parameter’s <code>xPos</code>.</p>\n<p>Using <a href=\"/docs/handbook/2/mapped-types.html#mapping-modifiers\">mapping modifiers</a>, you can remove <code>optional</code> attributes.</p>\n<h3 id=\"readonly-properties\" style=\"position:relative;\"><a href=\"#readonly-properties\" aria-label=\"readonly properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code> Properties</h3>\n<p>Properties can also be marked as <code>readonly</code> for TypeScript.\nWhile it won’t change any behavior at runtime, a property marked as <code>readonly</code> can’t be written to during type-checking.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface SomeType' >SomeType</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) SomeType.prop: string' >prop</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(obj: SomeType): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: SomeType' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface SomeType' >SomeType</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We can read from &apos;obj.prop&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`prop has the value &apos;</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: SomeType' >obj</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) SomeType.prop: string' >prop</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">&apos;.`</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// But we can&apos;t re-assign it.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: SomeType' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) SomeType.prop: any' >prop</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Cannot assign to 'prop' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to 'prop' because it is a read-only property.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUAJYB2ALjAGYCGAxpKAMpwC2kAKgJ4AOdA3nqKGiRKAEzhEANu1Cd4nVIhLRiAcwDceAL5485AK5FqJAuNBjGLEgAtVACjgAjAFaoLbLpACUoPgJCgAdTpqSiJBYRFQcngmUAByRycAOlk4Tjik-lBqcUQ4CUgkiTgVWwADVM5QK0pEUGs6ADdKCT06OIASHkSUuU0Mss8NLP8AIT0SUAB3YNC4yaEAWlrEAhUwghJMgR7K0ABeUAAiK0gJYqONTSA'>Try</a></div></pre>\n<p>Using the <code>readonly</code> modifier doesn’t necessarily imply that a value is totally immutable - or in other words, that its internal contents can’t be changed.\nIt just means the property itself can’t be re-written to.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Home' >Home</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) Home.resident: {&#10;    name: string;&#10;    age: number;&#10;}' >resident</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function visitForBirthday(home: Home): void' >visitForBirthday</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) home: Home' >home</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Home' >Home</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We can read and update properties from &apos;home.resident&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Happy birthday </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) home: Home' >home</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Home.resident: {&#10;    name: string;&#10;    age: number;&#10;}' >resident</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) home: Home' >home</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Home.resident: {&#10;    name: string;&#10;    age: number;&#10;}' >resident</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function evict(home: Home): void' >evict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) home: Home' >home</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Home' >Home</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// But we can&apos;t write to the &apos;resident&apos; property itself on a &apos;Home&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) home: Home' >home</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) Home.resident: any' >resident</data-lsp></data-err></span><span style=\"color: #000000\"> = {</span></div><span class=\"error\"><span>Cannot assign to 'resident' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to 'resident' because it is a read-only property.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Victor the Evictor\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUAJYB2ALjAGYCGAxpKABJwC2dA3nqKNJJQCZxEANgE8ukRAV6RSqVqCKUWqRCWjEA5gG5QldZFREArkwBGMUAF9NeC3jzlDRaiQIDQANwISSAMQQAhAmgSAAteSmEAChDmfQZYgEpQdk4QUAB1OmpKIjE+HSJeUEMAB3CyUBL4EpgXcVByeCZQAHIYlgA6bgkpUhaOjlBqAUQ4QUgOwTh1SIADekoSktETINDw0QASVnaJ7slpEg6FFgsAQlmE605drvED0g7dSABqF+tbe0dnV1zIT2c0ViqEYLCSKVAaX8hhIoAA7lkci1YXC1BUSHBQKE6C19r0SC1KtVaqICCREJBBORQG5KK1QZB+oNbnjDqAALzJQacE5xABEADUCM4EFiQnQAKIAjHQPkAGm5Oj0qCwaAVnCsNiAA'>Try</a></div></pre>\n<p>It’s important to manage expectations of what <code>readonly</code> implies.\nIt’s useful to signal intent during development time for TypeScript on how an object should be used.\nTypeScript doesn’t factor in whether properties on two types are <code>readonly</code> when checking whether those types are compatible, so <code>readonly</code> properties can also change via aliasing.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ReadonlyPerson' >ReadonlyPerson</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) ReadonlyPerson.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) ReadonlyPerson.age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let writablePerson: Person' >writablePerson</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Person' >Person</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Person McPersonface\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// works</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let readonlyPerson: ReadonlyPerson' >readonlyPerson</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ReadonlyPerson' >ReadonlyPerson</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let writablePerson: Person' >writablePerson</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let readonlyPerson: ReadonlyPerson' >readonlyPerson</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ReadonlyPerson.age: number' >age</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// prints &apos;42&apos;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let writablePerson: Person' >writablePerson</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp></span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let readonlyPerson: ReadonlyPerson' >readonlyPerson</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ReadonlyPerson.age: number' >age</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// prints &apos;43&apos;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4ECoSLEQoAShDgATHABsAnuijZchYlFkKQKkuU616IZqx3ylyth2oge-KEJGKIYZAHd6YOLzdqGtSBOMgAvPispBTUAEQhuACyCAnwSLEANKzsnAAsAExZgiwEAPSlXlhQANYYBG4elnoqCdQyVvqqmKER3sC+-hAJJQg42G4AdIpYDAAUTdYJEzkAlEzI5cgADqZgGMgA5AUHBH0DAd0gyxwA1DcsoyDjEFMz87qLl9cQaxsVO2J9kcAMwHIA'>Try</a></div></pre>\n<p>Using <a href=\"/docs/handbook/2/mapped-types.html#mapping-modifiers\">mapping modifiers</a>, you can remove <code>readonly</code> attributes.</p>\n<h3 id=\"index-signatures\" style=\"position:relative;\"><a href=\"#index-signatures\" aria-label=\"index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index Signatures</h3>\n<p>Sometimes you don’t know all the names of a type’s properties ahead of time, but you do know the shape of the values.</p>\n<p>In those cases you can use an index signature to describe the types of possible values, for example:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringArray' >StringArray</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: number' >index</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myArray: StringArray' >myArray</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringArray' >StringArray</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getStringArray(): StringArray' >getStringArray</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const secondItem: string' style='border-bottom: solid 2px lightgrey;'>secondItem</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const myArray: StringArray' >myArray</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const secondItem: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwHMQMBlDGLVAgQRhigE8AKASgC54yKrb6GBuAFAB6YfAC0ksMgyTxgyhhAxEUMAi6UadRvADeg+PADalUAA8OqZAFsARsoC6HAM7ktQgL6DBYPG-gbBl5GDk0eHQZ4AF5CYnDtPlYhP1QAl3A8YABJJRsYwODI4wBGRyFRIyqAPQB+IA'>Try</a></div></pre>\n<p>Above, we have a <code>StringArray</code> interface which has an index signature.\nThis index signature states that when a <code>StringArray</code> is indexed with a <code>number</code>, it will return a <code>string</code>.</p>\n<p>Only some types are allowed for index signature properties: <code>string</code>, <code>number</code>, <code>symbol</code>, template string patterns, and union types consisting only of these.</p>\n<details>\n    <summary>It is possible to support both types of indexers...</summary>\n    <p>It is possible to support both types of indexers, but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer. This is because when indexing with a <code>number</code>, JavaScript will actually convert that to a <code>string</code> before indexing into an object. That means that indexing with <code>100</code> (a <code>number</code>) is the same thing as indexing with <code>\"100\"</code> (a <code>string</code>), so the two need to be consistent.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Animal.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dog.breed: string' >breed</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Error: indexing with a numeric string might get you a completely separate type of Animal!</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NotOkay' >NotOkay</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'number' index type 'Animal' is not assignable to 'string' index type 'Dog'.</span><span class=\"code\">2413</span></span><span class=\"error-behind\">'number' index type 'Animal' is not assignable to 'string' index type 'Dog'.</span><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCMBmAUCBIgC7QCWAxsQArwAOMxAngJIB2ZxZAhgDZkAvblzhtUAMz6JIeMm2IxJFSKACCHALZ9QAbzyhQbbhsioS5NgHMA3HgC+eWfMXdloACJxLoSAA8FbAAmiGqa2noGAEbQkJCBZqRyNvaOhACisAiocoF+SaAA7pwAFqDchgCuJuQUoOb5GmSWxcSglpCtTHAVZaAUcBp0vB2QvEx1kHTc0MIqzAygcOKhZFq8AIROCtBKKgBycMQA8gDW3OMRoADavqhsVZEwALqo6qt8tgY3CRaWLx5eWx2IA'>Try</a></div></pre>\n</details>\n<p>While string index signatures are a powerful way to describe the “dictionary” pattern, they also enforce that all properties match their return type.\nThis is because a string index declares that <code>obj.property</code> is also available as <code>obj[\"property\"]</code>.\nIn the following example, <code>name</code>’s type does not match the string index’s type, and the type checker gives an error:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NumberDictionary' >NumberDictionary</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: string' >index</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NumberDictionary.length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) NumberDictionary.name: string' >name</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'name' of type 'string' is not assignable to 'string' index type 'number'.</span><span class=\"code\">2411</span></span><span class=\"error-behind\">Property 'name' of type 'string' is not assignable to 'string' index type 'number'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCMWBQIIZ4lVMdcBLAOwBcYAzAQwGNJQA5AVwFsAjGACIVmNCnCqNoAT1ABvXKFABtagBNIAD1SIa0agHMAuqio9+0ANy4FoADaQq+mgAsTZmBdAE4AaxsTuSG1dAysAXyA'>Try</a></div></pre>\n<p>However, properties of different types are acceptable if the index signature is a union of the property types:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NumberOrStringDictionary' >NumberOrStringDictionary</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: string' >index</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NumberOrStringDictionary.length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok, length is a number</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NumberOrStringDictionary.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok, name is a string</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgHIFcC2AjaB5KAZTClAHMARYBMYAexDigE9kBvAKGWQG1QATCAA8AXMgDOJcgF0xILLijIAPhKkgyAbi7IANhA1gAFnIXRNyAPSXkdANYAaPQbLHkwccjjJ5OaDsZMCDFJUg0La1tHHzgg909vUPIOAF8gA'>Try</a></div></pre>\n<p>Finally, you can make index signatures <code>readonly</code> in order to prevent assignment to their indices:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ReadonlyStringArray' >ReadonlyStringArray</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: number' >index</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myArray: ReadonlyStringArray' >myArray</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ReadonlyStringArray' >ReadonlyStringArray</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getReadOnlyStringArray(): ReadonlyStringArray' >getReadOnlyStringArray</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myArray: ReadonlyStringArray' >myArray</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"Mallory\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Index signature in type 'ReadonlyStringArray' only permits reading.</span><span class=\"code\">2542</span></span><span class=\"error-behind\">Index signature in type 'ReadonlyStringArray' only permits reading.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwHMQMAlEKYAeVQgE8BlDGLVAgQRhiloAoBKAFzwyFPHUbNWHLrQDcAKAD0i+AFp1YZBnWqlKgAIhOOGAGchAJgCsAFgvyWGI4ihgEI4GIZMW7Tt3gAb3l4eDhRGlp4AG0WUAAPIVRkAFsAIyMAXSFTH1YFAF95eQhieBTaaW4hDy8JXyqogF5CYg9qcTy-GX4FCsboi0z4FoAiAFkoCAgTWlHZIA'>Try</a></div></pre>\n<p>You can’t set <code>myArray[2]</code> because the index signature is <code>readonly</code>.</p>\n<h2 id=\"extending-types\" style=\"position:relative;\"><a href=\"#extending-types\" aria-label=\"extending types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending Types</h2>\n<p>It’s pretty common to have types that might be more specific versions of other types.\nFor example, we might have a <code>BasicAddress</code> type that describes the fields necessary for sending letters and packages in the U.S.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BasicAddress' >BasicAddress</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.name?: string | undefined' >name</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.street: string' >street</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.city: string' >city</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.country: string' >country</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.postalCode: string' >postalCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEJwM7AQQQCZ5QQYbIDeAUMsiHALYQD8AXMhmFKAOYDcVbHCBDCt2nEL34JgYAJ6iO3PtQQB7AK7go8geMnUADqvZwANgGFVeCAr18AvkA'>Try</a></div></pre>\n<p>In some situations that’s enough, but addresses often have a unit number associated with them if the building at an address has multiple units.\nWe can then describe an <code>AddressWithUnit</code>.</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface AddressWithUnit' >AddressWithUnit</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.name?: string | undefined' >name</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.unit: string' >unit</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.street: string' >street</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.city: string' >city</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.country: string' >country</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.postalCode: string' >postalCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIIBN1QgZxwdWDAAsBVEI5AbwChlkQ4BbCAfgC5kcwpQBzANx1kAVwphO3XiEE0A9HIB6ylapXCpECBK49+Q+giIBPSXpkHkCAPZiep3dNn0ADte5wANgGFr6CGZOQgC+QA'>Try</a></div></pre>\n<p>This does the job, but the downside here is that we had to repeat all the other fields from <code>BasicAddress</code> when our changes were purely additive.\nInstead, we can extend the original <code>BasicAddress</code> type and just add the new fields that are unique to <code>AddressWithUnit</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BasicAddress' >BasicAddress</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.name?: string | undefined' >name</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.street: string' >street</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.city: string' >city</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.country: string' >country</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BasicAddress.postalCode: string' >postalCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface AddressWithUnit' >AddressWithUnit</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BasicAddress' >BasicAddress</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) AddressWithUnit.unit: string' >unit</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEJwM7AQQQCZ5QQYbIDeAUMsiHALYQD8AXMhmFKAOYDcVbHCBDCt2nEL34JgYAJ6iO3PtQQB7AK7go8geMnUADqvZwANgGFVeCAr18AvhQqhIsRCnyFiGAOoyAFgCqIDLIEAAekCB4pOhYuAREJOT8mjK2ShT2QA'>Try</a></div></pre>\n<p>The <code>extends</code> keyword on an <code>interface</code> allows us to effectively copy members from other named types, and add whatever new members we want.\nThis can be useful for cutting down the amount of type declaration boilerplate we have to write, and for signaling intent that several different declarations of the same property might be related.\nFor example, <code>AddressWithUnit</code> didn’t need to repeat the <code>street</code> property, and because <code>street</code> originates from <code>BasicAddress</code>, a reader will know that those two types are related in some way.</p>\n<p><code>interface</code>s can also extend from multiple types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colorful' >Colorful</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Colorful.color: string' >color</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ColorfulCircle' >ColorfulCircle</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colorful' >Colorful</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const cc: ColorfulCircle' >cc</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ColorfulCircle' >ColorfulCircle</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Colorful.color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMIHsA27YFdPIDeAUMsgljgFzIDOYUoA5gNzEC+xxoksiKqYFASYUJMlDgATYLlo0QuALYAjaG07dw0eEjSU8mQcNHIIAD0ggptfdkMAaNEJFjNFEPXIIaGezHxjV2QAXiJScgMaACIoCClohwjJGTkaABYAJiT2FiA'>Try</a></div></pre>\n<h2 id=\"intersection-types\" style=\"position:relative;\"><a href=\"#intersection-types\" aria-label=\"intersection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection Types</h2>\n<p><code>interface</code>s allowed us to build up new types from other types by extending them.\nTypeScript provides another construct called <em>intersection types</em> that is mainly used to combine existing object types.</p>\n<p>An intersection type is defined using the <code>&#x26;</code> operator.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colorful' >Colorful</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Colorful.color: string' >color</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ColorfulCircle = Colorful &amp; Circle' >ColorfulCircle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colorful' >Colorful</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMIHsA27YFdPIDeAUMsgljgFzIDOYUoA5gNzEC+xoksiKqwKAkwoSZKHAAmwXLRohcAWwBG0Np2JgAngAd+lPJgFCRyALxoDMfMgBkaQcIgsgA'>Try</a></div></pre>\n<p>Here, we’ve intersected <code>Colorful</code> and <code>Circle</code> to produce a new type that has all the members of <code>Colorful</code> <em>and</em> <code>Circle</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function draw(circle: Colorful &amp; Circle): void' >draw</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) circle: Colorful &amp; Circle' >circle</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Colorful' >Colorful</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Circle' >Circle</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Color was </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) circle: Colorful &amp; Circle' >circle</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Colorful.color: string' >color</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Radius was </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) circle: Colorful &amp; Circle' >circle</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// okay</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function draw(circle: Colorful &amp; Circle): void' >draw</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) Colorful.color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) Circle.radius: number' >radius</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\"> });</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// oops</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function draw(circle: Colorful &amp; Circle): void' >draw</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) Colorful.color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) raidus: number' >raidus</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\"> });</span></div><span class=\"error\"><span>Argument of type '{ color: string; raidus: number; }' is not assignable to parameter of type 'Colorful & Circle'.\n  Object literal may only specify known properties, but 'raidus' does not exist in type 'Colorful & Circle'. Did you mean to write 'radius'?</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '{ color: string; raidus: number; }' is not assignable to parameter of type 'Colorful & Circle'.\n  Object literal may only specify known properties, but 'raidus' does not exist in type 'Colorful & Circle'. Did you mean to write 'radius'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAMJwA2C5Ark6AN56ijXMEqRCWjEA5gG48AX0KkKNOvQLRqTOjz7RKAEwJsUoImwC2AIxjS5IUAFoH1NiQd287ItRIE4RULp0AdwAKalV1SFRGFmh2TgAyBnCNAEpuXn5fRGZIADoWcWCAA2iEUEDKRFAAEi4wtQ1cgRiZIpTpPgEibMaC4oAlPQMqiqra+ojcnX1DVvbZPDxbOABrSgBPPADKEK5MmNQAInMmNkhDgBpQaeHULDRQGXmlsDg4AAdELaDgveahUCHaCQXSXa6UAi6Qx3B5PSRAA'>Try</a></div></pre>\n<h2 id=\"interfaces-vs-intersections\" style=\"position:relative;\"><a href=\"#interfaces-vs-intersections\" aria-label=\"interfaces vs intersections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces vs. Intersections</h2>\n<p>We just looked at two ways to combine types which are similar, but are actually subtly different.\nWith interfaces, we could use an <code>extends</code> clause to extend from other types, and we were able to do something similar with intersections and name the result with a type alias.\nThe principle difference between the two is how conflicts are handled, and that difference is typically one of the main reasons why you’d pick one over the other between an interface and a type alias of an intersection type.</p>\n<!--\nFor example, two types can declare the same property in an interface.\n\nTODO -->\n<h2 id=\"generic-object-types\" style=\"position:relative;\"><a href=\"#generic-object-types\" aria-label=\"generic object types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Object Types</h2>\n<p>Let’s imagine a <code>Box</code> type that can contain any value - <code>string</code>s, <code>number</code>s, <code>Giraffe</code>s, whatever.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box' >Box</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box.contents: any' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeyDeAoZZBdcCcAZwC5k4QBPAbjwF8g'>Try</a></div></pre>\n<p>Right now, the <code>contents</code> property is typed as <code>any</code>, which works, but can lead to accidents down the line.</p>\n<p>We could instead use <code>unknown</code>, but that would mean that in cases where we already know the type of <code>contents</code>, we’d need to do precautionary checks, or use error-prone type assertions.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box' >Box</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box.contents: unknown' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: Box' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box' >Box</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box.contents: unknown' >contents</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello world\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// we could check &apos;x.contents&apos;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: Box' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Box.contents: unknown' >contents</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let x: Box' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Box.contents: string' >contents</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// or we could use a type assertion</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='let x: Box' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Box.contents: unknown' >contents</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeyDeAoZZBdcCcAZwC5kBXEAaxHQHcQBuPAXzzwBsIwyTNQzYAvLgJESkCtQBEACwi9e6ZM3RReAE3kAaLhzwB6ExpTEauosoT1kAckwA6YqQqO8wGMgAUYACeAA4Q6L6u7rJg5Mhi8cjy5GBQoADm8gCUkoTu5Oj8LmppfpEyZDEuYOgAMizQAMJw5BB+mZkc3KbmWhbS1jq0LchwyEGhI+QtUGDAJHh5BRBF6CWlbuUUk8jJqSBpmVW19VBNLW0dQA'>Try</a></div></pre>\n<p>One type safe approach would be to instead scaffold out different <code>Box</code> types for every type of <code>contents</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NumberBox' >NumberBox</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NumberBox.contents: number' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringBox' >StringBox</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) StringBox.contents: string' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BooleanBox' >BooleanBox</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BooleanBox.contents: boolean' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAEsA7AFxgDMBDAY0lADkBXAWwCMYAhOAD1AG8dRQlOMUjEUoAk1bQA3DgC+OfCOgVqoAMpFohAOYdufAUJFjUibXrmLlJVVRoc4AG0jkCB3v0HCSZ0MxwLm4E1kA'>Try</a></div></pre>\n<p>But that means we’ll have to create different functions, or overloads of functions, to operate on these types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setContents(box: StringBox, newContents: string): void (+2 overloads)' >setContents</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: StringBox' >box</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringBox' >StringBox</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: string' >newContents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setContents(box: NumberBox, newContents: number): void (+2 overloads)' >setContents</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: NumberBox' >box</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NumberBox' >NumberBox</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: number' >newContents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setContents(box: BooleanBox, newContents: boolean): void (+2 overloads)' >setContents</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: BooleanBox' >box</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface BooleanBox' >BooleanBox</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: boolean' >newContents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setContents(box: StringBox, newContents: string): void (+2 overloads)' >setContents</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: {&#10;    contents: any;&#10;}' >box</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) contents: any' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> }, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: any' >newContents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: {&#10;    contents: any;&#10;}' >box</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) contents: any' >contents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: any' >newContents</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgHIFcC2AjaAhAewA9kBvAKGWQQPAnAGcAuZELXKAbnIF9zzQkWIhQBlMFFABzQiQpUadRiwYTp3PgLrCkyQgQA2EOCFllK1WpGXJsBQ8ZAbyAehfIAtF4TowXj+Qw6CAIYMC0yAwQYADCVvRgDAAUdkQs4pIgMsQANKwQAO5xSokqalkAlCwAbgTAACbcQSFhEVGx8YwpxCwYOPi5+UWdpazs0FXItQ1NwaHhIJHRxdaJ3Wl69kYmsnkghSsJzLZbjpPTjYFzrYvth12pLKSWJccmAJ7IPHsHI28g7wq5ioqQAdIpVgxkABeIb3RIaIA'>Try</a></div></pre>\n<p>That’s a lot of boilerplate. Moreover, we might later need to introduce new types and overloads.\nThis is frustrating, since our box types and overloads are all effectively the same.</p>\n<p>Instead, we can make a <em>generic</em> <code>Box</code> type which declares a <em>type parameter</em>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;Type>.contents: Type' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeAeAKgTwAcIA+ZAbwChlkF1wJwBnALmQOIG5KBfIA'>Try</a></div></pre>\n<p>You might read this as “A <code>Box</code> of <code>Type</code> is something whose <code>contents</code> have type <code>Type</code>”.\nLater on, when we refer to <code>Box</code>, we have to give a <em>type argument</em> in place of <code>Type</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let box: Box&lt;string>' >box</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeAeAKgTwAcIA+ZAbwChlkF1wJwBnALmQOIG5KBfSgen7IAtKIQBXMKOGUANhDDIARljYYcTMFFABzEpyA'>Try</a></div></pre>\n<p>Think of <code>Box</code> as a template for a real type, where <code>Type</code> is a placeholder that will get replaced with some other type.\nWhen TypeScript sees <code>Box&#x3C;string></code>, it will replace every instance of <code>Type</code> in <code>Box&#x3C;Type></code> with <code>string</code>, and end up working with something like <code>{ contents: string }</code>.\nIn other words, <code>Box&#x3C;string></code> and our earlier <code>StringBox</code> work identically.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;Type>.contents: Type' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringBox' >StringBox</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) StringBox.contents: string' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let boxA: Box&lt;string>' >boxA</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;string>.contents: string' >contents</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let boxA: Box&lt;string>' >boxA</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;string>.contents: string' style='border-bottom: solid 2px lightgrey;'>contents</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>(property) Box&lt;string&gt;.contents: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let boxB: StringBox' >boxB</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringBox' >StringBox</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) StringBox.contents: string' >contents</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let boxB: StringBox' >boxB</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) StringBox.contents: string' style='border-bottom: solid 2px lightgrey;'>contents</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>(property) StringBox.contents: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeAeAKgTwAcIA+ZAbwChlkF1wJwBnALmQOIG5KBfS0SLEQoAymCigA5hkwVqtepGZsm4qdz6UANhDDIARlgCCbGdlUSQksgF4KChsuQAiABYQtW9M+Q9uhzCMAOjpHMCZuAHpImmQAPQB+Sm1dAyxUNjFLaSxkO3IHJXC2ZwB3dCgtABMfP0oA1BDFRnComJpEoA'>Try</a></div></pre>\n<p><code>Box</code> is reusable in that <code>Type</code> can be substituted with anything. That means that when we need a box for a new type, we don’t need to declare a new <code>Box</code> type at all (though we certainly could if we wanted to).</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;Type>.contents: Type' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Apple' >Apple</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ....</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Same as &apos;{ contents: Apple }&apos;.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type AppleBox = Box&lt;Apple>' >AppleBox</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Apple' >Apple</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeAeAKgTwAcIA+ZAbwChlkF1wJwBnALmQOIG5KBfSy0JFiIUAQUKEANiio0A9HOQA6FUt78FyAMpwAtijhNkAcnK16kZm3FSUPY2rBExE6RkzIAvGizYb0kk4gA'>Try</a></div></pre>\n<p>This also means that we can avoid overloads entirely by instead using <a href=\"/docs/handbook/2/functions.html#generic-functions\">generic functions</a>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setContents&lt;Type>(box: Box&lt;Type>, newContents: Type): void' >setContents</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in setContents&lt;Type>(box: Box&lt;Type>, newContents: Type): void' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: Box&lt;Type>' >box</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in setContents&lt;Type>(box: Box&lt;Type>, newContents: Type): void' >Type</data-lsp></span><span style=\"color: #000000\">&gt;, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: Type' >newContents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in setContents&lt;Type>(box: Box&lt;Type>, newContents: Type): void' >Type</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) box: Box&lt;Type>' >box</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;Type>.contents: Type' >contents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) newContents: Type' >newContents</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeAeAKgTwAcIA+ZAbwChlkF1wJwBnALmQOIG5KBfSygPQDkAWjEIArmDEjKMCSARhg9ZEwhgAwvUjM8RUgAoARljYYcHUgBpkICAHdtDZmysBKCtWSnMAOjoXMCZkAF47R2ddYO4eIA'>Try</a></div></pre>\n<p>It is worth noting that type aliases can also be generic. We could have defined our new <code>Box&#x3C;Type></code> interface, which was:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Box&lt;Type>' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Box&lt;Type>.contents: Type' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgEIHsAeAeAKgTwAcIA+ZAbwChlkF1wJwBnALmQOIG5KBfIA'>Try</a></div></pre>\n<p>by using a type alias instead:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Box&lt;Type> = {&#10;    contents: Type;&#10;}' >Box</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) contents: Type' >contents</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Box&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAQg9gDwDwBVwQHxQLxQN4BQUUAxnAHbASUDOAXFGpANwEC+zQA'>Try</a></div></pre>\n<p>Since type aliases, unlike interfaces, can describe more than just object types, we can also use them to write other kinds of generic helper types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type OrNull&lt;Type> = Type | null' >OrNull</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OrNull&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OrNull&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type OneOrMany&lt;Type> = Type | Type[]' >OneOrMany</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OneOrMany&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OneOrMany&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OneOrMany&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type OneOrManyOrNull&lt;Type> = OneOrMany&lt;Type> | null' style='border-bottom: solid 2px lightgrey;'>OneOrManyOrNull</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OneOrManyOrNull&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='type OrNull&lt;Type> = Type | null' >OrNull</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type OneOrMany&lt;Type> = Type | Type[]' >OneOrMany</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type OneOrManyOrNull&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt;&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type OneOrManyOrNull&lt;Type&gt; = OneOrMany&lt;Type&gt; | null</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type OneOrManyOrNullStrings = OneOrMany&lt;string> | null' style='border-bottom: solid 2px lightgrey;'>OneOrManyOrNullStrings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type OneOrManyOrNull&lt;Type> = OneOrMany&lt;Type> | null' >OneOrManyOrNull</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>type OneOrManyOrNullStrings = OneOrMany&lt;string&gt; | null</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsGBQAXATwAdJQB5aAOQFcAbOgHgBUTIA+UAXlFdNAA+oAHb06AblwE2FYZEoBZAIbDCLNpx58yQ7QG0AupOn9ycxSsKVaDdaU0VqYxmfnRlqux3aSQofwB6APxSRKbm7pbWYgDK+NAAlsIA5ojcsm4eVk62iPFJyT64foFBQA'>Try</a></div></pre>\n<p>We’ll circle back to type aliases in just a little bit.</p>\n<h3 id=\"the-array-type\" style=\"position:relative;\"><a href=\"#the-array-type\" aria-label=\"the array type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>Array</code> Type</h3>\n<p>Generic object types are often some sort of container type that work independently of the type of elements they contain.\nIt’s ideal for data structures to work this way so that they’re re-usable across different data types.</p>\n<p>It turns out we’ve been working with a type just like that throughout this handbook: the <code>Array</code> type.\nWhenever we write out types like <code>number[]</code> or <code>string[]</code>, that’s really just a shorthand for <code>Array&#x3C;number></code> and <code>Array&#x3C;string></code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(value: Array&lt;string>): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: string[]' >value</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myArray: string[]' >myArray</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] = [</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// either of these work!</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(value: Array&lt;string>): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let myArray: string[]' >myArray</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(value: Array&lt;string>): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Array: ArrayConstructor&#10;new &lt;string>(...items: string[]) => string[] (+2 overloads)' >Array</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAG4CGANiNgFyICCATsxQJ4A8AzlM4UQB8ASkQBvAFCJEAehmIAdEokBfCRKq5EmdizbsGvfsQDaAXUQBeRCYBEebFSpxbAGkS2A7nGZVktswBudTlEbBh8bGZEOGBESO5sRG9mAGsAQglUDBx8ARIdPQ5hYOysXAJiEjBsTyZWDhJ7R2c3DxS-W2ESoA'>Try</a></div></pre>\n<p>Much like the <code>Box</code> type above, <code>Array</code> itself is a generic type.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;Type>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Array&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * Gets or sets the length of the array.</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;Type>.length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * Removes the last element from an array and returns it.</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.pop(): Type | undefined' >pop</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Array&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * Appends new elements to an array, and returns the new length of the array.</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.push(...items: Type[]): number' >push</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) items: Type[]' >items</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Array&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsBkEsBGAuUAXATgVwKYCh5I0cMAzAQwGMdQA5LAW0RNAG8BfAoki60AZUyEA5m06FiZKjQBC0aABsc5SGK6TeNfgE8mitSFABaE5SxoTR9T2mgAghgzltAHgAq2gA44AfGzygoMAAVMEBgcGgAOI4aADOoNAYoHGxCWgAFjRKkMKZiaToWaDkjs4AdOGgwcDhOXkZqJCMzBgA3HjhIWGB1aAASjgM0ABuOOnFCuRxaKA4Sgw4RKCkGNAMJaqlTtqbACagGLFYGJAJ8GiVvTXhntCeABQAlKge3qAAPqBYkHs4pIQcHsOl1QlVInZPN5fglIDgAO5zBZLeLoaCbEplbQAGn2h2OpwmNDhiPq+WghUyNG2FXBtUCniwcQyD3KbIuQziry8OAA2gBdF6gZpMEggwKGNmVdhAA'>Try</a></div></pre>\n<p>Modern JavaScript also provides other data structures which are generic, like <code>Map&#x3C;K, V></code>, <code>Set&#x3C;T></code>, and <code>Promise&#x3C;T></code>.\nAll this really means is that because of how <code>Map</code>, <code>Set</code>, and <code>Promise</code> behave, they can work with any sets of types.</p>\n<h3 id=\"the-readonlyarray-type\" style=\"position:relative;\"><a href=\"#the-readonlyarray-type\" aria-label=\"the readonlyarray type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>ReadonlyArray</code> Type</h3>\n<p>The <code>ReadonlyArray</code> is a special type that describes arrays that shouldn’t be changed.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doStuff(values: ReadonlyArray&lt;string>): void' >doStuff</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ReadonlyArray&lt;T>' >ReadonlyArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We can read from &apos;values&apos;...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const copy: string[]' >copy</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ReadonlyArray&lt;string>.slice(start?: number | undefined, end?: number | undefined): string[]' >slice</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`The first value is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000FF\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000FF\">]</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...but we can&apos;t mutate &apos;values&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >push</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'push' does not exist on type 'readonly string[]'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'push' does not exist on type 'readonly string[]'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAzAVwDsBjAFwEs5jQATOAZXMP3wAoA3AQwBtDIKUACVI3BsV4BPAIKxuUgDyJy0SsQDmAPgCUoAN65QoEKADqkUKW61oYuqHzwAtqADkPfoLcA6P0asaFUCABylQAF5QTwFEH0ReSlJIdh0AbgDSILheSB9eOA12AAMAFQALS3xKJHJovgFQSkRQABJ9GMEAbQAGAF0AX2L03ADTPx8AI0I6gHdLa2I3OucZ7nJLDwbvHwDOuJDCRHL2ACJK3gKAQlORgaA'>Try</a></div></pre>\n<p>Much like the <code>readonly</code> modifier for properties, it’s mainly a tool we can use for intent.\nWhen we see a function that returns <code>ReadonlyArray</code>s, it tells us we’re not meant to change the contents at all, and when we see a function that consumes <code>ReadonlyArray</code>s, it tells us that we can pass any array into that function without worrying that it will change its contents.</p>\n<p>Unlike <code>Array</code>, there isn’t a <code>ReadonlyArray</code> constructor that we can use.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >ReadonlyArray</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>'ReadonlyArray' only refers to a type, but is being used as a value here.</span><span class=\"code\">2693</span></span><span class=\"error-behind\">'ReadonlyArray' only refers to a type, but is being used as a value here.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYCcBmAUAHaQDuoASpAIYAmcBANgJ4CCsljAFAETSTVcAaUFwDmvSAUHCARvQCukLgEoA3EA'>Try</a></div></pre>\n<p>Instead, we can assign regular <code>Array</code>s to <code>ReadonlyArray</code>s.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const roArray: readonly string[]' >roArray</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ReadonlyArray&lt;T>' >ReadonlyArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBATiAgnOBDAngLhgJQKaoAm4ANusmugDzRwCWYA5gHwwC8MA2gERx6HcANDG6M+eMEJEAjEgFc83ALoBuIA'>Try</a></div></pre>\n<p>Just as TypeScript provides a shorthand syntax for <code>Array&#x3C;Type></code> with <code>Type[]</code>, it also provides a shorthand syntax for <code>ReadonlyArray&#x3C;Type></code> with <code>readonly Type[]</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doStuff(values: readonly string[]): void' >doStuff</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We can read from &apos;values&apos;...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const copy: string[]' >copy</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ReadonlyArray&lt;string>.slice(start?: number | undefined, end?: number | undefined): string[]' >slice</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`The first value is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000FF\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000FF\">]</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...but we can&apos;t mutate &apos;values&apos;.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) values: readonly string[]' >values</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >push</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'push' does not exist on type 'readonly string[]'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'push' does not exist on type 'readonly string[]'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAzAVwDsBjAFwEs5jQATOAZXMP3wAoA3AQwBtDIKUNEjcGxXgE9QictErEA5gG0AugEpQAb1yhQIPYaPGToAHoXLV6xd36wAdUihS3WiLGh88ALagA5Dz8gv4AdOF2pDSyLnAADtIAvKBBAoihiLyUpJDs6gDckdFwvJChvHCK7AAGACoAFs74lEjkKXwCoJSIoAAkWqmCygAMqgC+1QW4dgbhoQBGhG0A7s6uxP5tPkvc5M6BHSGhdoPpcYSI9ewARI28FQCE11NjQA'>Try</a></div></pre>\n<p>One last thing to note is that unlike the <code>readonly</code> property modifier, assignability isn’t bidirectional between regular <code>Array</code>s and <code>ReadonlyArray</code>s.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: readonly string[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] = [];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let y: string[]' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] = [];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let x: readonly string[]' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let y: string[]' >y</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-err><data-lsp lsp='let y: string[]' >y</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let x: readonly string[]' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>The type 'readonly string[]' is 'readonly' and cannot be assigned to the mutable type 'string[]'.</span><span class=\"code\">4104</span></span><span class=\"error-behind\">The type 'readonly string[]' is 'readonly' and cannot be assigned to the mutable type 'string[]'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYAMaBQAbSAF1AA9VpIBDAEzgDt8BPURI6AS3oHMBtAXVABeUAIDcBYqCao2nHgOGj+E3KSVMJLEaTFA'>Try</a></div></pre>\n<h3 id=\"tuple-types\" style=\"position:relative;\"><a href=\"#tuple-types\" aria-label=\"tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple Types</h3>\n<p>A <em>tuple type</em> is another sort of <code>Array</code> type that knows exactly how many elements it contains, and exactly which types it contains at specific positions.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringNumberPair = [string, number]' >StringNumberPair</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBLAdgcwHIFcC2AjC8ACgIaLxQC8UA2gM4IqoA0UyO+8AugNwBQA9PyjCRoseKgA9aTNlzJQA'>Try</a></div></pre>\n<p>Here, <code>StringNumberPair</code> is a tuple type of <code>string</code> and <code>number</code>.\nLike <code>ReadonlyArray</code>, it has no representation at runtime, but is significant to TypeScript.\nTo the type system, <code>StringNumberPair</code> describes arrays whose <code>0</code> index contains a <code>string</code> and whose <code>1</code> index contains a <code>number</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(pair: [string, number]): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: string' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const a: string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const b: number' style='border-bottom: solid 2px lightgrey;'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const b: number</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(pair: [string, number]): void' >doSomething</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAA4CGMATgFyIDaAzlNYUQDSJgiYBG2agF0AlIgDeAKESIICFogqIAvIko0GABiEBuaYgD0BmTIB6Afn1ywCvirVVqDAIy79Rk4gvvjAOn+SAL6SkqgYOPjsJAwARHjYADYJcDFcACwATKI6QA'>Try</a></div></pre>\n<p>If we try to index past the number of elements, we’ll get an error.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(pair: [string, number]): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: undefined' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\"><data-err>2</data-err></span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Tuple type '[string, number]' of length '2' has no element at index '2'.</span><span class=\"code\">2493</span></span><span class=\"error-behind\">Tuple type '[string, number]' of length '2' has no element at index '2'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCcBmAUAGYCuAdgMYAuAlnCaACZwDKcAtpBQBZUkDmAFAAcAhlWioA2ogrQevADSgSRVgCMYAXQCUoAN55QoEKAB0ZvAdBla0q6AC8oEWIloNAbjwBfIA'>Try</a></div></pre>\n<p>We can also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">destructure tuples</a> using JavaScript’s array destructuring.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(stringHash: [string, number]): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) stringHash: [string, number]' >stringHash</data-lsp></span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [</span><span style=\"color: #0070C1\"><data-lsp lsp='const inputString: string' >inputString</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const hash: number' >hash</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) stringHash: [string, number]' >stringHash</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const inputString: string' style='border-bottom: solid 2px lightgrey;'>inputString</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>                  </span><span class='popover'><div class='arrow'></div>const inputString: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const hash: number' style='border-bottom: solid 2px lightgrey;'>hash</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>const hash: number</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAM5QBOhRAEgIZl4BciA2hdcQDSJgiYARtkoBdAJSIA3gChEiCAgrtCABxBQ0VGrzyM8oxAF5EnGgyYBuGXIVK4AG2wA6B3FJqNWrkXHX5APQB8iGhiAB6APw28opgZI4ubqR6TH62QWFhUTIAvkA'>Try</a></div></pre>\n<blockquote>\n<p>Tuple types are useful in heavily convention-based APIs, where each element’s meaning is “obvious”.\nThis gives us flexibility in whatever we want to name our variables when we destructure them.\nIn the above example, we were able to name elements <code>0</code> and <code>1</code> to whatever we wanted.</p>\n<p>However, since not every user holds the same view of what’s obvious, it may be worth reconsidering whether using objects with descriptive property names may be better for your API.</p>\n</blockquote>\n<p>Other than those length checks, simple tuple types like these are equivalent to types which are versions of <code>Array</code>s that declare properties for specific indexes, and that declare <code>length</code> with a numeric literal type.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface StringNumberPair' >StringNumberPair</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// specialized properties</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) StringNumberPair.length: 2' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Other &apos;Array&lt;string | number&gt;&apos; members...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) StringNumberPair.slice(start?: number, end?: number): Array&lt;string | number>' >slice</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) start: number | undefined' >start</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) end: number | undefined' >end</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMpiqA5gOQK4C2ARtAApzBTIDeAUMsgPSPIDOADhAsHADbAAvCABNk7KAHtOUMMAit6yXhBBYwACwBcyAEwBuRQAZtrDNgMMAjNpCESUA4ubIA8hujIA5AEEoUOACeADymmKrIAD7ItsTQAHyeyAQQsVCsAHSZiqz8SAAUpnAyAPw2dtAANMgqwqXR5VAAlNq+-sGh2JH1qXEGAL5AA'>Try</a></div></pre>\n<p>Another thing you may be interested in is that tuples can have optional properties by writing out a question mark (<code>?</code> after an element’s type).\nOptional tuple elements can only come at the end, and also affect the type of <code>length</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Either2dOr3d = [number, number, (number | undefined)?]' >Either2dOr3d</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">?];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setCoordinate(coord: Either2dOr3d): void' >setCoordinate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) coord: Either2dOr3d' >coord</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Either2dOr3d = [number, number, (number | undefined)?]' >Either2dOr3d</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [</span><span style=\"color: #0070C1\"><data-lsp lsp='const x: number' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const y: number' >y</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const z: number | undefined' style='border-bottom: solid 2px lightgrey;'>z</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) coord: Either2dOr3d' >coord</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>const z: number | undefined</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Provided coordinates had </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) coord: Either2dOr3d' >coord</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: 2 | 3' style='border-bottom: solid 2px lightgrey;'>length</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> dimensions`</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>                                                  </span><span class='popover'><div class='arrow'></div>(property) length: 2 | 3</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAoglsAFhATgJgCYHkUGYNQC8UA2gHYCuAtgEaoA0UltDT1dKA-ALoDcAUPwBmFMgGNgcAPZkoAZwjAAwlKkoMcMgENgEABRjV6gFywEydNjwYAlFADe-KFENk5wUgA9GIRgC9uIhcjDAFnAHpw52iY5wA9TkFnVzkpABsIADo0qQBzPQADAAUUKQA3OAwIAkM1DW1dOShELQIAEnta9WyIMlykAF8oDSpeuWk3ApswqEjY+YXFpaWE-gGgA'>Try</a></div></pre>\n<p>Tuples can also have rest elements, which have to be an array/tuple type.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringNumberBooleans = [string, number, ...boolean[]]' >StringNumberBooleans</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringBooleansNumber = [string, ...boolean[], number]' >StringBooleansNumber</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[], </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type BooleansStringNumber = [...boolean[], string, number]' >BooleansStringNumber</data-lsp></span><span style=\"color: #000000\"> = [...</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[], </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBLAdgcwHIFcC2AjC8AQgPbEA2EAhsgM5QC8UA2jQiqgDRTI77xcA6IblIVqTALoSA3AChQkWGzQlyVWljwEGzVkjSDho9ZK48t8GfPDRVY2nH0Ze2xkyECRa8RK572Zi6W0kA'>Try</a></div></pre>\n<ul>\n<li><code>StringNumberBooleans</code> describes a tuple whose first two elements are <code>string</code> and <code>number</code> respectively, but which may have any number of <code>boolean</code>s following.</li>\n<li><code>StringBooleansNumber</code> describes a tuple whose first element is <code>string</code> and then any number of <code>boolean</code>s and ending with a <code>number</code>.</li>\n<li><code>BooleansStringNumber</code> describes a tuple whose starting elements are any number of <code>boolean</code>s and ending with a <code>string</code> then a <code>number</code>.</li>\n</ul>\n<p>A tuple with a rest element has no set “length” - it only has a set of well-known elements in different positions.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: StringNumberBooleans' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringNumberBooleans = [string, number, ...boolean[]]' >StringNumberBooleans</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const b: StringNumberBooleans' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringNumberBooleans = [string, number, ...boolean[]]' >StringNumberBooleans</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"beautiful\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: StringNumberBooleans' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringNumberBooleans = [string, number, ...boolean[]]' >StringNumberBooleans</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBLAdgcwHIFcC2AjC8AQgPbEA2EAhsgM5QC8UA2jQiqgDRTI77xcA6IblIVqTALoSA3ACgA9PKgBaVQGNMwVctlritYFEoAuWGzRY8BEuSq0GzAEQALCGTLFHXAIwzd+1ihcUzgkC15rUTs6RiZHfEpNRAAzTDIvKAAmLgRMCD89Ayg1EPMMCKIo6hinAHdieDIAEwyAZhz4PK5kyjIaCA6uqB6+gahc-OkgA'>Try</a></div></pre>\n<p>Why might optional and rest elements be useful?\nWell, it allows TypeScript to correspond tuples with parameter lists.\nTuples types can be used in <a href=\"/docs/handbook/2/functions.html#rest-parameters-and-arguments\">rest parameters and arguments</a>, so that the following:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function readButtonInput(args_0: string, args_1: number, ...args_2: boolean[]): void' >readButtonInput</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: [string, number, ...boolean[]]' >args</data-lsp></span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [</span><span style=\"color: #0070C1\"><data-lsp lsp='const name: string' >name</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const version: number' >version</data-lsp></span><span style=\"color: #000000\">, ...</span><span style=\"color: #0070C1\"><data-lsp lsp='const input: boolean[]' >input</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: [string, number, ...boolean[]]' >args</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAJwKYEMAmAhEUoICSYADngBQB016yA5gM4BciA2g1MjGHQDSJgQAWwBGqZP2qURcOABsMYVgF1lASkQBvAFCJEEBBzZh0Q1PwBu4hvDCTq3MlGWIAvIlqMA3LsQB6P0QpbQBfIA'>Try</a></div></pre>\n<p>is basically equivalent to:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function readButtonInput(name: string, version: number, ...input: boolean[]): void' >readButtonInput</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) version: number' >version</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) input: boolean[]' >input</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAJwKYEMAmAhEUoICSYADngBRjoC2qAXIgM5TIxgDmANIgG6rKN4YBmBDUARv24A6WWzJQG4uHAA2GMAG0AugEpEAbwBQiRAHoziWdKMBfIA'>Try</a></div></pre>\n<p>This is handy when you want to take a variable number of arguments with a rest parameter, and you need a minimum number of elements, but you don’t want to introduce intermediate variables.</p>\n<!--\nTODO do we need this example?\n\nFor example, imagine we need to write a function that adds up `number`s based on arguments that get passed in.\n\n```ts twoslash\nfunction sum(...args: number[]) {\n    // ...\n}\n```\n\nWe might feel like it makes little sense to take any fewer than 2 elements, so we want to require callers to provide at least 2 arguments.\nA first attempt might be\n\n```ts twoslash\nfunction foo(a: number, b: number, ...args: number[]) {\n    args.unshift(a, b);\n\n    let result = 0;\n    for (const value of args) {\n        result += value;\n    }\n    return result;\n}\n```\n\n-->\n<h3 id=\"readonly-tuple-types\" style=\"position:relative;\"><a href=\"#readonly-tuple-types\" aria-label=\"readonly tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code> Tuple Types</h3>\n<p>One final note about tuple types - tuples types have <code>readonly</code> variants, and can be specified by sticking a <code>readonly</code> modifier in front of them - just like with array shorthand syntax.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(pair: readonly [string, number]): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: readonly [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAA4CGMATgFyLXYWpgA2AnogNoDOU1hIgBpEYEJgBG2agF0AlIgDeAKESIA9OrXaduvdoB6R4ydNmTqjVoB0t5QF8gA'>Try</a></div></pre>\n<p>As you might expect, writing to any property of a <code>readonly</code> tuple isn’t allowed in TypeScript.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(pair: readonly [string, number]): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: readonly [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pair: readonly [string, number]' >pair</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\"><data-err>0</data-err></span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Cannot assign to '0' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to '0' because it is a read-only property.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUAGYCuAdgMYAuAlnCaACZwDKcAtpBQBZUkDmAFAAcAhlWipokYYxIAbAJ6gA2ogrQevADSgSRVgCMYAXQCUoAN55QoEWKU4joALygARJ0izZcAISuA3HgAvkA'>Try</a></div></pre>\n<p>Tuples tend to be created and left un-modified in most code, so annotating types as <code>readonly</code> tuples when possible is a good default.\nThis is also important given that array literals with <code>const</code> assertions will be inferred with <code>readonly</code> tuple types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let point: readonly [3, 4]' >point</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='type const = readonly [3, 4]' >const</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function distanceFromOrigin([x, y]: [number, number]): number' >distanceFromOrigin</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">]: [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.sqrt(x: number): number' >sqrt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function distanceFromOrigin([x, y]: [number, number]): number' >distanceFromOrigin</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='let point: readonly [3, 4]' >point</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'readonly [3, 4]' is not assignable to parameter of type '[number, number]'.\n  The type 'readonly [3, 4]' is 'readonly' and cannot be assigned to the mutable type '[number, number]'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'readonly [3, 4]' is not assignable to parameter of type '[number, number]'.\n  The type 'readonly [3, 4]' is 'readonly' and cannot be assigned to the mutable type '[number, number]'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUADaQAuoADnAJYB2pAvKANoYA0oWAuqAIaKgDGcaomIBuPHgBmAV2r9ilIaAAmlEdzmQAYvAC2AeWiUA5jQAUjAB5sAnh1SNq03QCMYbJ65gcAlKADeeKCg0CTS0NSgALLcxAAWAHSIAI7QxGaWoABUWeigANSgNtm5aD7iAL4SquqaOnAGRqbUZhQ0xOVAA'>Try</a></div></pre>\n<p>Here, <code>distanceFromOrigin</code> never modifies its elements, but expects a mutable tuple.\nSince <code>point</code>’s type was inferred as <code>readonly [3, 4]</code>, it won’t be compatible with <code>[number, number]</code> since that type can’t guarantee <code>point</code>’s elements won’t be mutated.</p>\n<!-- ## Other Kinds of Object Members\n\nMost of the declarations in object types:\n\n### Method Syntax\n\n### Call Signatures\n\n### Construct Signatures\n\n### Index Signatures -->","headings":[{"value":"Property Modifiers","depth":2},{"value":"Optional Properties","depth":3},{"value":"readonly Properties","depth":3},{"value":"Index Signatures","depth":3},{"value":"Extending Types","depth":2},{"value":"Intersection Types","depth":2},{"value":"Interfaces vs. Intersections","depth":2},{"value":"Generic Object Types","depth":2},{"value":"The Array Type","depth":3},{"value":"The ReadonlyArray Type","depth":3},{"value":"Tuple Types","depth":3},{"value":"readonly Tuple Types","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/objects.html","title":"Object Types","disable_toc":null,"handbook":null,"oneline":"How TypeScript describes the shapes of JavaScript objects.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"More on Functions","oneline":"Learn about how Functions work in TypeScript.","permalink":"/docs/handbook/2/functions.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Creating Types from Types","oneline":"An overview of the ways in which you can create more types from existing types.","permalink":"/docs/handbook/2/types-from-types.html"}}}},"pageContext":{"id":"1-object-types","slug":"/docs/handbook/2/objects.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Object Types.md","previousID":"6b628cea-3a43-5445-9a5b-fcfe3df5c71b","nextID":"6b3635d4-943b-5d23-b29c-bd7d782569f6","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}