{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/understanding-errors.html","result":{"data":{"markdownRemark":{"id":"b6439bcb-0d0f-56f2-939d-ed957e0e78df","excerpt":"Understanding Errors Whenever TypeScript finds an error, it tries to explain what went wrong in as much detail as possible.\nBecause its type system is…","html":"<h1 id=\"understanding-errors\" style=\"position:relative;\"><a href=\"#understanding-errors\" aria-label=\"understanding errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding Errors</h1>\n<p>Whenever TypeScript finds an error, it tries to explain what went wrong in as much detail as possible.\nBecause its type system is structural, this often means providing somewhat lengthy descriptions of where it found a problem.</p>\n<h2 id=\"terminology\" style=\"position:relative;\"><a href=\"#terminology\" aria-label=\"terminology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terminology</h2>\n<p>There is some terminology you’ll frequently see in error messages that is helpful to understand.</p>\n<h4 id=\"assignable-to\" style=\"position:relative;\"><a href=\"#assignable-to\" aria-label=\"assignable to permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>assignable to</em></h4>\n<p>TypeScript considers a type <em>assignable to</em> another type if one is an acceptable substitute for the other.\nIn other words, a <code>Cat</code> is <em>assignable to</em> an <code>Animal</code> because a <code>Cat</code> is an acceptable substitute for an <code>Animal</code>.</p>\n<p>As its name implies, this relationship is used to check the validity of an assignment <code>t = s;</code> by examining the types of <code>t</code> and <code>s</code>.\nIt’s also used to check most other places where two types interact.\nFor example, when calling a function, each argument’s type must be <em>assignable to</em> parameter’s declared type.</p>\n<p>Informally, if you see <code>T is not assignable to S</code>, you can think of that as TypeScript saying ”<em><code>T</code> and <code>S</code> are not compatible”</em>.\nHowever, note that this is a <em>directional</em> relationship: <code>S</code> being assignable to <code>T</code> does not imply that <code>T</code> is assignable to <code>S</code>.</p>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<p>Let’s look at some example error messages and understand what’s going on.</p>\n<h3 id=\"error-elaborations\" style=\"position:relative;\"><a href=\"#error-elaborations\" aria-label=\"error elaborations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Elaborations</h3>\n<p>Each error starts with a leading message, sometimes followed by more sub-messages.\nYou can think of each sub-message as answering a “why?” question about the message above it.\nLet’s work through some examples to see how they work in practice.</p>\n<p>Here’s an example that produces an error message longer than the example itself:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let a: {&amp;#13;    m: number[];&amp;#13;}'>a</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> { <data-lsp lsp='(property) m: number[]'>m</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number[] }</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let b: {&amp;#13;    m: string[];&amp;#13;}'>b</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) m: string[]'>m</data-lsp>: [</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">] };</span>\n<span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let a: {&amp;#13;    m: number[];&amp;#13;}'>a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let b: {&amp;#13;    m: string[];&amp;#13;}'>b</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '{ m: string[]; }' is not assignable to type '{ m: number[]; }'.\n  Types of property 'm' are incompatible.\n    Type 'string[]' is not assignable to type 'number[]'.\n      Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ m: string[]; }' is not assignable to type '{ m: number[]; }'.\n  Types of property 'm' are incompatible.\n    Type 'string[]' is not assignable to type 'number[]'.\n      Type 'string' is not assignable to type 'number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAQ1QG9QBbVAOwFcqAjGAbQF1QBfAbnyNBNQAXlCUaoVgCIpnXjhIjBPIA'>Try</a></div></pre>\n<p>TypeScript found an error when checking the last line.\nIts logic for issuing an error follows from its logic for determining if the assignment is OK:</p>\n<ol>\n<li>Is <code>b</code>’s type assignable to <code>a</code>’s? No. Why?</li>\n<li>Because the type of the <code>m</code> property is incompatible. Why?</li>\n<li>Because <code>b</code>’s <code>m</code> property (<code>string[]</code>) is not assignable to <code>a</code>’s <code>m</code> property (<code>number[]</code>). Why?</li>\n<li>Because one array’s element type (<code>string</code>) is not assignable to the other (<code>number</code>)</li>\n</ol>\n<h3 id=\"extra-properties\" style=\"position:relative;\"><a href=\"#extra-properties\" aria-label=\"extra properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extra Properties</h3>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type A = {&amp;#13;    m: number;&amp;#13;}'>A</data-lsp> = { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) m: number'>m</data-lsp></span><span style=\"color: #000000\">: number };</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: A'>a</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type A = {&amp;#13;    m: number;&amp;#13;}'>A</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) m: number'>m</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">, <data-lsp lsp='(property) n: string'>n</data-lsp>: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\"> };</span>\n<span class=\"error\"><span>Type '{ m: number; n: string; }' is not assignable to type 'A'.\n  Object literal may only specify known properties, and 'n' does not exist in type 'A'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ m: number; n: string; }' is not assignable to type 'A'.\n  Object literal may only specify known properties, and 'n' does not exist in type 'A'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAEFQBeUAb1AFtUA7AV3oCMZQBfAbhwDGcJojygAhqgrU6jUAEYADABpQTVACINPXkA'>Try</a></div></pre>\n<h3 id=\"union-assignments\" style=\"position:relative;\"><a href=\"#union-assignments\" aria-label=\"union assignments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Assignments</h3>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Thing = &amp;quot;none&amp;quot; | {&amp;#13;    name: string;&amp;#13;}'>Thing</data-lsp> = </span><span style=\"color: #A31515\">\"none\"</span><span style=\"color: #000000\"> | { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string };</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: Thing'>a</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Thing = &amp;quot;none&amp;quot; | {&amp;#13;    name: string;&amp;#13;}'>Thing</data-lsp> </span><span style=\"color: #000000\"><data-err>= { <data-lsp lsp='(property) name: string'>name</data-lsp>: </data-err></span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> };</span>\n<span class=\"error\"><span>Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lABUALASwDsBzUAXlACIa4bIXQAfUAb1A0AhgFtIqRHmi0GAXwDcOHAGMOU0MNSVZTAULETQABlCKgA'>Try</a></div></pre>","headings":[{"value":"Understanding Errors","depth":1},{"value":"Terminology","depth":2},{"value":"assignable to","depth":4},{"value":"Examples","depth":2},{"value":"Error Elaborations","depth":3},{"value":"Extra Properties","depth":3},{"value":"Union Assignments","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/understanding-errors.html","title":"Understanding Errors","disable_toc":null,"handbook":null,"oneline":"Step one in learning TypeScript: The basics types.","beta":true}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Type Declarations","oneline":"Step one in learning TypeScript: The basics types.","permalink":"/docs/handbook/2/type-declarations.html"}}},"next":null},"pageContext":{"id":"8understanding-errors","slug":"/docs/handbook/2/understanding-errors.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Understanding Errors.md","previousID":"56f33c4e-be3f-5dbe-b172-629351bbf4dd","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}