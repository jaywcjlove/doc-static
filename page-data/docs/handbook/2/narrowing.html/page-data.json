{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/narrowing.html","result":{"data":{"markdownRemark":{"id":"0075d7de-eab2-5a05-ba8b-7a7862de18b2","excerpt":"Imagine we have a function called padLeft. If padding is a number, it will treat that as the number of spaces we want to prepend to input.\nIf padding is a…","html":"<p>Imagine we have a function called <code>padLeft</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(padding: number | string, input: string): string'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\">: number | string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">: string): string {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error'>Error</data-lsp>(</span><span style=\"color: #A31515\">\"Not implemented yet!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwIYBMAyBTYUAUa66MYA5gFyJggC2ARtgE6IA+iAzlE6WQDSJSyEFCpce5AJRjuvRAG8AUIkRQAFkzgB3ath0BRJpqb4ARADk4UQbWQAbbLWxgo2dIgCe2KAEJTkgG5FAF8gA'>Try</a></div></pre>\n<p>If <code>padding</code> is a <code>number</code>, it will treat that as the number of spaces we want to prepend to <code>input</code>.\nIf <code>padding</code> is a <code>string</code>, it should just prepend <code>padding</code> to <code>input</code>.\nLet’s try to implement the logic for when <code>padLeft</code> is passed a <code>number</code> for <code>padding</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(padding: number | string, input: string): string'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\">: number | string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Array: ArrayConstructor&amp;#13;new &amp;lt;any>(...items: any[]) => any[] (+2 overloads)'>Array</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">).<data-lsp lsp='(method) Array&amp;lt;any>.join(separator?: string | undefined): string'>join</data-lsp>(</span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\">) + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Operator '+' cannot be applied to types 'string | number' and 'number'.</span><span class=\"code\">2365</span></span><span class=\"error-behind\">Operator '+' cannot be applied to types 'string | number' and 'number'.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsBWAUAGYCuAdgMYAuAlnCaAA4CGAJgDKQEUAUTzzVJAOaoSRALYAjGKAA+oRBWgDBAGlAD6RCqgVKhASlABvPKFDRIFItDolIAd1ABBWIwCePFvyGgA1KABGfQA6ACs4AS4AIlAow38NLQBuPABfIA'>Try</a></div></pre>\n<p>Uh-oh, we’re getting an error on <code>padding + 1</code>.\nTypeScript is warning us that adding a <code>number</code> to a <code>number | string</code> might not give us what we want, and it’s right.\nIn other words, we haven’t explicitly checked if <code>padding</code> is a <code>number</code> first, nor are we handling the case where it’s a <code>string</code>, so let’s do exactly that.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(padding: number | string, input: string): string'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\">: number | string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Array: ArrayConstructor&amp;#13;new (arrayLength?: number | undefined) => any[] (+2 overloads)'>Array</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: number'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">).<data-lsp lsp='(method) Array&amp;lt;any>.join(separator?: string | undefined): string'>join</data-lsp>(</span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\">) + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwIYBMAyBTYUAUa66MYA5gFyJggC2ARtgE6IA+iAzlE6WQDSJSyEFCpce5AJSIA3gChEg4InxQAnsmxxlREuUQBeI4gBENBsxPT5ixU2xQQTJGGwB3RAEEmTVGsIYemSIANSIAIySAHQAVnCk+Cam0mFCIgDcCogAvln2js4ogbyhgmDCUJnZQA'>Try</a></div></pre>\n<p>If this mostly looks like uninteresting JavaScript code, that’s sort of the point.\nApart from the annotations we put in place, this TypeScript code looks like JavaScript.\nThe idea is that TypeScript’s type system aims to make it as easy as possible to write typical JavaScript code without bending over backwards to get type safety.</p>\n<p>While it might not look like much, there’s actually a lot going under the covers here.\nMuch like how TypeScript analyzes runtime values using static types, it overlays type analysis on JavaScript’s runtime control flow constructs like <code>if/else</code>, conditional ternaries, loops, truthiness checks, etc., which can all affect those types.</p>\n<p>Within our <code>if</code> check, TypeScript sees <code>typeof padding === \"number\"</code> and understands that as a special form of code called a <em>type guard</em>.\nTypeScript follows possible paths of execution that our programs can take to analyze the most specific possible type of a value at a given position.\nIt looks at these special checks (called <em>type guards</em>) and assignments, and the process of refining types to more specific types than declared is called <em>narrowing</em>.\nIn many editors we can observe these types as they change, and we’ll even do so in our examples.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(padding: number | string, input: string): string'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\">: number | string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Array: ArrayConstructor&amp;#13;new (arrayLength?: number | undefined) => any[] (+2 overloads)'>Array</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: number'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">).<data-lsp lsp='(method) Array&amp;lt;any>.join(separator?: string | undefined): string'>join</data-lsp>(</span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\">) + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class='query'>//                   ^ = (parameter) padding: number</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class='query'>  //     ^ = (parameter) padding: string</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwIYBMAyBTYUAUa66MYA5gFyJggC2ARtgE6IA+iAzlE6WQDSJSyEFCpce5AJSIA3gChEg4InxQAnsmxxlREuUQBeI4gBENBsxPT5ixU2xQQTJGGwB3RAEEmTVGsIYemSIANSIAIySAHQAVnCk+Cam0mFCIgDcCrYA9Nm2+QW2AHoA-FkAvln2js4ogbyhgmDCUJmKuQWlcuVAA'>Try</a></div></pre>\n<p>There are a couple of different constructs TypeScript understands for narrowing.</p>\n<h2 id=\"typeof-type-guards\" style=\"position:relative;\"><a href=\"#typeof-type-guards\" aria-label=\"typeof type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>typeof</code> type guards</h2>\n<p>As we’ve seen, JavaScript supports a <code>typeof</code> operator which can give very basic information about the type of values we have at runtime.\nTypeScript expects this to return a certain set of strings:</p>\n<ul>\n<li><code>\"string\"</code></li>\n<li><code>\"number\"</code></li>\n<li><code>\"bigint\"</code></li>\n<li><code>\"boolean\"</code></li>\n<li><code>\"symbol\"</code></li>\n<li><code>\"undefined\"</code></li>\n<li><code>\"object\"</code></li>\n<li><code>\"function\"</code></li>\n</ul>\n<p>Like we saw with <code>padLeft</code>, this operator comes up pretty often in a number of JavaScript libraries, and TypeScript can understand it to narrow types in different branches.</p>\n<p>In TypeScript, checking against the value returned by <code>typeof</code> is a type guard.\nBecause TypeScript encodes how <code>typeof</code> operates on different values, it knows about some of its quirks in JavaScript.\nFor example, notice that in the list above, <code>typeof</code> doesn’t return the string <code>null</code>.\nCheck out the following example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printAll(strs: string | string[] | null): void'>printAll</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\">: string | string[] | null) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) strs: string[] | null'>strs</data-lsp></data-err></span><span style=\"color: #000000\">) {</span>\n<span class=\"error\"><span>Object is possibly 'null'.</span><span class=\"code\">2531</span></span><span class=\"error-behind\">Object is possibly 'null'.</span><span style=\"color: #000000\">      <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do nothing</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMBGAUAGYCuAdgMYAuAlnCaAA7RUkUCCANuwBSIVKq8mJAOagAPqEHNhAbQC640CSKcAlKADeeUKCoFQXCgE96kOPsGJQAXlugARHABGAK0iV76rTp0EEBslpeSVBzST5EL20fHUCSRDh2SAA6djhhHlUAbmidAF9ovNBIdkRIXX1DEzMLCJs7eykRT01c0DiEpNT0ngjswuLS8u8fEFAAEzglOAoAC2lCvDygA'>Try</a></div></pre>\n<p>In the <code>printAll</code> function, we try to check if <code>strs</code> is an object to see if it’s an array type (now might be a good time to reinforce that arrays are object types in JavaScript).\nBut it turns out that in JavaScript, <code>typeof null</code> is actually <code>\"object\"</code>!\nThis is one of those unfortunate accidents of history.</p>\n<p>Users with enough experience might not be surprised, but not everyone has run into this in JavaScript; luckily, TypeScript lets us know that <code>strs</code> was only narrowed down to <code>string[] | null</code> instead of just <code>string[]</code>.</p>\n<p>This might be a good segue into what we’ll call “truthiness” checking.</p>\n<h1 id=\"truthiness-narrowing\" style=\"position:relative;\"><a href=\"#truthiness-narrowing\" aria-label=\"truthiness narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Truthiness narrowing</h1>\n<p>Truthiness might not be a word you’ll find in the dictionary, but it’s very much something you’ll hear about in JavaScript.</p>\n<p>In JavaScript, we can use any expression in conditionals, <code>&#x26;&#x26;</code>s, <code>||</code>s, <code>if</code> statements, and Boolean negations (<code>!</code>), and more.\nAs an example, <code>if</code> statements don’t expect their condition to always have the type <code>boolean</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getUsersOnlineMessage(numUsersOnline: number): string'>getUsersOnlineMessage</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) numUsersOnline: number'>numUsersOnline</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) numUsersOnline: number'>numUsersOnline</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`There are </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) numUsersOnline: number'>numUsersOnline</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> online now!`</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Nobody&apos;s here. :(\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQKoGdUCcsDyYANjGKgLKpZYCGaAFGCALbZ6ElmoBcizLAEZ4AlIgDeAKESIYwRE1bt8RUuTFSZM3OhC4kAAwAqACzypEtHYgAk4gcs5rUAX0QJn-OAHcAhAYBuaUQXYJ0oPSQAIgA5OEE4ABMATwByLEQzHQA6RB4GKKCXIA'>Try</a></div></pre>\n<p>In JavaScript, constructs like<code>if</code> first “coerce” their conditions to <code>boolean</code>s to make sense of them, and then choose their branches depending on whether the result is <code>true</code> or <code>false</code>.\nValues like</p>\n<ul>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>\"\"</code> (the empty string)</li>\n<li><code>0n</code> (the <code>bigint</code> version of zero)</li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n</ul>\n<p>all coerce to <code>false</code>, and other values get coerced <code>true</code>.\nYou can always coerce values to <code>boolean</code>s by running them through the <code>Boolean</code> function, or by using the shorter double-Boolean negation.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// both of these result in &apos;true&apos;</span>\n<span style=\"color: #000000\"><data-lsp lsp='var Boolean: BooleanConstructor&amp;#13;&amp;lt;string>(value?: string | undefined) => boolean'>Boolean</data-lsp>(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">!!</span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAECMHsBcAtUgM1HApgZ1aAThgrgDbSgCWAdqAOTTZ6qUBQAQpJAagIZkAUARLKgIFIvAJQBuBgEIpvAO6RsBACa9xQA'>Try</a></div></pre>\n<p>It’s fairly popular to leverage this behavior, especially for guarding against values like <code>null</code> or <code>undefined</code>.\nAs an example, let’s try using it for our <code>printAll</code> function.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printAll(strs: string | string[] | null): void'>printAll</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\">: string | string[] | null) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[]'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string[]'>strs</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | null'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAggGxwCgGcpVCAuRY9MAc0QB9KSMaBtAXQcTBDwEpEAbwBQiRDGCIiJQogBkcxFACeyAKZxJVWQF49iAERwARgCs10AwJFixwOKikQExSok1NS10bbHOwhHA4agB0OHA0RHwA3D5iAL4+8YhqOIRq4pL4Kuoe2oh6OoZULFZCcYj+gcFhEdJesQnC8UA'>Try</a></div></pre>\n<p>You’ll notice that we’ve gotten rid of the error above by checking if <code>strs</code> is truthy.\nThis at least prevents us from dreaded errors when we run our code like:</p>\n<pre class=\"shiki\"><div class='code-container'><code>TypeError: null is not iterable</code></div></pre>\n<p>Keep in mind though that truthiness checking on primitives can often be error prone.\nAs an example, consider a different attempt at writing <code>printAll</code></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printAll(strs: string | string[] | null): void'>printAll</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\">: string | string[] | null) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// !!!!!!!!!!!!!!!!</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//  DON&apos;T DO THIS!</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">//   KEEP READING</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// !!!!!!!!!!!!!!!!</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[]'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string[]'>strs</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">      }</span>\n<span style=\"color: #000000\">    } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAggGxwCgGcpVCAuRY9MAc0QB9KSMaBtAXQcTBDwEpEAbwBQiRAHpxiAISy58hdNESpiACIB5AHIByACrqNiPQAkAkgGUlYyWMQBpAKKOACogBKjrGrNaA4sq2isFyyjDAiEQkhAIidojhkVAAnsgApnARVISIALz5iABEcABGAFZp0IWxyvHAcKiREAjElIiZTKQ18fHNYIRwOGkAdDhwNER8ANy1dgC+s3OIaTiEaQkR+CnpHdl5BYVULNVCs2J9A0Oj41FdM-ELYgtzQA'>Try</a></div></pre>\n<p>We wrapped the entire body of the function in a truthy check, but this has a subtle downside: we may no longer be handling the empty string case correctly.</p>\n<p>TypeScript doesn’t hurt us here at all, but this is behavior worth noting if you’re less familiar with JavaScript.\nTypeScript can often help you catch bugs early on, but if you choose to do <em>nothing</em> with a value, there’s only so much that it can do without being overly prescriptive.\nIf you want, you can make sure you handle situations like these with a linter.</p>\n<p>One last word on narrowing by truthiness is that Boolean negations with <code>!</code> filter out from negated branches.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function multiplyAll(values: number[] | undefined, factor: number): number[] | undefined'>multiplyAll</data-lsp>(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) values: number[] | undefined'>values</data-lsp></span><span style=\"color: #000000\">: number[] | undefined,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) factor: number'>factor</data-lsp></span><span style=\"color: #000000\">: number</span>\n<span style=\"color: #000000\">): number[] | undefined {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) values: number[] | undefined'>values</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) values: undefined'>values</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) values: number[]'>values</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Array&amp;lt;number>.map&amp;lt;number>(callbackfn: (value: number, index: number, array: number[]) => number, thisArg?: any): number[]'>map</data-lsp>((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) factor: number'>factor</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWxAG1gBzQTwIJpoAUAUIogG4CGaIApgM4BciYIyARnQE4DaAuogA+icABM6wGGDpiANGUTAq0ONxZtOPEgEoN7Ln0Ejxk6bMQBvRTGCIiAQmq1GOq4vLc6UENyTP6BgBuRQBfRDo0Bjp3ck9vX38aQIA6ZCpMIiIADzcAXgA+RGzEAColFSg1HRDyUJJQoA'>Try</a></div></pre>\n<h2 id=\"equality-narrowing\" style=\"position:relative;\"><a href=\"#equality-narrowing\" aria-label=\"equality narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equality narrowing</h2>\n<p>TypeScript also uses <code>switch</code> statements and equality checks like <code>===</code>, <code>!==</code>, <code>==</code>, and <code>!=</code> to narrow types.\nFor example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function foo(left: string | number, right: string | boolean): void'>foo</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) left: string | number'>left</data-lsp></span><span style=\"color: #000000\">: string | number, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) right: string | boolean'>right</data-lsp></span><span style=\"color: #000000\">: string | boolean) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) left: string | number'>left</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) right: string | boolean'>right</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We can now call any &apos;string&apos; method on &apos;x&apos; or &apos;y&apos;.</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) left: string'>left</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>();</span>\n<span class='query'>//     ^ = (parameter) left: string</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) right: string'>right</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp>();</span>\n<span class='query'>//     ^ = (parameter) right: string</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) left: string | number'>left</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>  //            ^ = (parameter) left: string | number</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) right: string | boolean'>right</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>    //          ^ = (parameter) right: string | boolean</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMOcAUAbApsKAuRAZygCcYwBzRAH0TBAFsAjLEgGkTIoAt8jTyVWk1TYAhmACUiAN4AoRIhjBEmHFEQBebZxg8o0+YsUB6E4gDqWRBAl04AdxtiMGRBICeiAOTEylb0QGLChuOAATRAQfAA9AuBIfD28AOgVjbFwUqDgAVQAHfNYAYTFCLDRJAG5003MAPQB+Wt19bLgAGUcSsorqlrNEJvSAX0QsDHLZFogEQjhsFIw4CjVcfuNEQc2d4c3ZsHnF5dWuXg3jbZ3jPcQRuRGgA'>Try</a></div></pre>\n<p>When we checked that <code>x</code> and <code>y</code> are both equal in the above example, TypeScript knew their types also had to be equal.\nSince <code>string</code> is the only common type that both <code>x</code> and <code>y</code> could take on, TypeScript knows that <code>x</code> and <code>y</code> must be a <code>string</code> in the first branch.</p>\n<p>Checking against specific literal values (as opposed to variables) works also.\nIn our section about truthiness narrowing, we wrote a <code>printAll</code> function which was error-prone because it accidentally didn’t handle empty strings properly.\nInstead we could have done a specific check to block out <code>null</code>s, and TypeScript still correctly removes <code>null</code> from the type of <code>strs</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printAll(strs: string | string[] | null): void'>printAll</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\">: string | string[] | null) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[] | null'>strs</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string | string[]'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string[]'>strs</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span class='query'>//                    ^ = (parameter) strs: string[]</span>\n<span style=\"color: #000000\">        <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const s: string'>s</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">      }</span>\n<span style=\"color: #000000\">    } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) strs: string'>strs</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>    //            ^ = (parameter) strs: string</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAggGxwCgGcpVCAuRY9MAc0QB9KSMaBtAXQcTBDwEpEAbwBQiRDGCIiJQogCEAXgXdeOASLFiJUqAE9kAUziSqspcoBEcAEYArA9AvrRmscDiopEBMUqJjTKTOrq4A9KEhkYgAegD8LpHeYIRwOAYAdDhwNER8ANwJmgC+hUWIBjiEBuKS+HqGAaaI5ogWVCxOQoViSSlpmdnSQQWR4VGacaUuJUVAA'>Try</a></div></pre>\n<p>JavaScript’s looser equality checks with <code>==</code> and <code>!=</code> also get narrowed correctly.\nIf you’re unfamiliar, checking whether something <code>== null</code> actually not only checks whether it is specifically the value <code>null</code> - it also checks whether it’s potentially <code>undefined</code>.\nThe same applies to <code>== undefined</code>: it checks whether a value is either <code>null</code> or <code>undefined</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Container'>Container</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Container.value: number | null | undefined'>value</data-lsp></span><span style=\"color: #000000\">: number | null | undefined;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function multiplyValue(container: Container, factor: number): void'>multiplyValue</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) container: Container'>container</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Container'>Container</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) factor: number'>factor</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Remove both &apos;null&apos; and &apos;undefined&apos; from the type.</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) container: Container'>container</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Container.value: number | null | undefined'>value</data-lsp> != </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) container: Container'>container</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Container.value: number'>value</data-lsp>);</span>\n<span class='query'>//                        ^ = (property) Container.value: number</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Now we can safely multiply &apos;container.value&apos;.</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) container: Container'>container</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Container.value: number | null | undefined'>value</data-lsp> *= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) factor: number'>factor</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMIHtx1NZBvAKGWQDc4AbAVwgC5kRKBbAI1wB97LzzkPKQAJhBg4BAbgIBfAgRj8EYYJmSMuigA7kAngDUK1ABQJMYbCGh0MWHFAA0yeAvRQ6DFtACU+IsgD0v5AAlCEZ0EhRmdDAAC2QAcgZuOOQ4QXj+IRFzAWSYKHRGZBiUMC11CAA6H2AYZCMTM2gKsioUAEIAXk5uL0JiYmMQAGd0ckrydABzeutzKGb9CA8Jfr8A1Y3N1YA9AH4ZVf9kADl0AHdkM5QEVOQhuBgIbRU1YE0teMHTGwXWuKrVl9GvMWtRkAAqLqOMDOFbIaSSIA'>Try</a></div></pre>\n<h2 id=\"instanceof-narrowing\" style=\"position:relative;\"><a href=\"#instanceof-narrowing\" aria-label=\"instanceof narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>instanceof</code> narrowing</h2>\n<p>JavaScript has an operator for checking whether or not a value is an “instance” of another value.\nMore specifically, in JavaScript <code>x instanceof Foo</code> checks whether the <em>prototype chain</em> of <code>x</code> contains <code>Foo.prototype</code>.\nWhile we won’t dive deep here, and you’ll see more of this when we get into classes, they can still be useful for most values that can be constructed with <code>new</code>.\nAs you might have guessed, <code>instanceof</code> is also a type guard, and TypeScript narrows in branches guarded by <code>instanceof</code>s.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function logValue(x: Date | string): void'>logValue</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | Date'>x</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Date'>Date</data-lsp> | string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | Date'>x</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> <data-lsp lsp='var Date: DateConstructor'>Date</data-lsp>) {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: Date'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Date.toUTCString(): string'>toUTCString</data-lsp>());</span>\n<span class='query'>//              ^ = (parameter) x: Date</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>());</span>\n<span class='query'>  //            ^ = (parameter) x: string</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGzgcwGoENkgKYAUAHgFyIAiWUeiAPogM5QBOMYaAlIgN4BQiiGMETFBYJlkh44wytS58BAiAgZxkeAHSo0xTVDgBVACoBhAMos2ujhwDc-JQHonSt0oB6AfkcBfRHjIDDSKSiri6lo6egaGAA5xeMymWMEEtg5uLu7u3n68vkA'>Try</a></div></pre>\n<h2 id=\"assignments\" style=\"position:relative;\"><a href=\"#assignments\" aria-label=\"assignments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignments</h2>\n<p>As we mentioned earlier, when we assign to any variable, TypeScript looks at the right side of the assignment and narrows the left side appropriately.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(method) Math.random(): number'>random</data-lsp>() &lt; </span><span style=\"color: #09835A\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"hello world!\"</span><span style=\"color: #000000\">;</span>\n<span class='query'>//  ^ = let x: string | number</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: number'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//          ^ = let x: number</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"goodbye!\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//          ^ = let x: string</span></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAHhC8EFkCGYAWA6ATkgdgEwHsBbACgEoIAeCABnQFYIB+CARhogC4IAiVEYMAIQA7gUzA8AQh4BuAFAB6RRAgA9JvJjxWC+QGMCOAM4FQ6IQHMSUMguWrHT9Zu29LBAngBGATxAyeoYmZiAWBNa29irOThpAA'>Try</a></div></pre>\n<p>Notice that each of these assignments is valid.\nEven though the observed type of <code>x</code> changed to <code>number</code> after our first assignment, we were still able to assign a <code>string</code> to <code>x</code>.\nThis is because the <em>declared type</em> of <code>x</code> - the type that <code>x</code> started with - is <code>string | number</code>, and assignability is always checked against the declared type.</p>\n<p>If we’d assigned a <code>boolean</code> to <code>x</code>, we’d have seen an error since that wasn’t part of the declared type.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(method) Math.random(): number'>random</data-lsp>() &lt; </span><span style=\"color: #09835A\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"hello world!\"</span><span style=\"color: #000000\">;</span>\n<span class='query'>//  ^ = let x: string | number</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: number'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//          ^ = let x: number</span>\n<span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let x: string | number'>x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type 'boolean' is not assignable to type 'string | number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'string | number'.</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//          ^ = let x: string | number</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAD1AF5QBZAQ0IAsA6aGgOwBM4BbACgEpQAHlAAGRgFZQAflABGEaFQAiepDx44oAO4I87AIRKA3DhChQAPSk4ylWSZwBjOK0RwCjDQHMeJPibNzIOCrGwpQQmgAV0gHZ1d3SE84Hz8AsGDMqyA'>Try</a></div></pre>\n<h2 id=\"control-flow-analysis\" style=\"position:relative;\"><a href=\"#control-flow-analysis\" aria-label=\"control flow analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control flow analysis</h2>\n<p>Up until this point, we’ve gone through some basic examples of how TypeScript narrows within specific branches.\nBut there’s a bit more going on than just walking up from every variable and looking for type guards in <code>if</code>s, <code>while</code>s, conditionals, etc.\nFor example</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function padLeft(padding: number | string, input: string): string'>padLeft</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\">: number | string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string | number'>padding</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='var Array: ArrayConstructor&amp;#13;new (arrayLength?: number | undefined) => any[] (+2 overloads)'>Array</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: number'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">).<data-lsp lsp='(method) Array&amp;lt;any>.join(separator?: string | undefined): string'>join</data-lsp>(</span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\">) + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) padding: string'>padding</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) input: string'>input</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwIYBMAyBTYUAUa66MYA5gFyJggC2ARtgE6IA+iAzlE6WQDSJSyEFCpce5AJSIA3gChEg4InxQAnsmxxlREuUQBeI4gBENBsxPT5ixU2xQQTJGGwB3RAEEmTVGsIYemSIANSIAIySAHQAVnCk+Cam0mFCIgDcCogAvln2js4ogbyhgmDCUJnZQA'>Try</a></div></pre>\n<p><code>padLeft</code> returns from within its first <code>if</code> block.\nTypeScript was able to analyze this code and see that the rest of the body (<code>return padding + input;</code>) is <em>unreachable</em> in the case where <code>padding</code> is a <code>number</code>.\nAs a result, it was able to remove <code>number</code> from the type of <code>padding</code> (narrowing from <code>string | number</code> to <code>string</code>) for the rest of the function.</p>\n<p>This analysis of code based on reachability is called <em>control flow analysis</em>, and TypeScript uses this flow analysis to narrow types as it encounters type guards and assignments.\nWhen a variable is analyzed, control flow can split off and re-merge over and over again, and that variable can be observed to have a different type at each point.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function foo(): string | number'>foo</data-lsp>() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number | boolean'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> number </span><span style=\"color: #000000\">|</span><span style=\"color: #1A1A1A\"> boolean</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number | boolean'>x</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(method) Math.random(): number'>random</data-lsp>() &lt; </span><span style=\"color: #09835A\">0.5</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: boolean'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//            ^ = let x: boolean</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (<data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(method) Math.random(): number'>random</data-lsp>() &lt; </span><span style=\"color: #09835A\">0.5</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number | boolean'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//              ^ = let x: string</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number | boolean'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: number'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class='query'>//              ^ = let x: number</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: string | number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class='query'>//       ^ = let x: string | number</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMOcAUBKRBvAUIxAGwFMpEAPALkQGcoAnGMAc0QB9EwQBbAI2PrtEvVCQCGYANy58FRAF5EAWTFQAFgDp6EgCZxumRAB5EABg0BWabIgIacEhsJxmachmkEA9F4J--iAB6APwyBDDAiGgq6lq6+oYm5hZYeP7kCogARGrEhM5Znn62YPaOzq7uRd6+Af4hsgC+iHk0xDiyBBmKAIymptWIJWXETi5uHp2IPnX1oQSNYYj0pCD0SORFM3O4jUA'>Try</a></div></pre>\n<h1 id=\"discriminated-unions\" style=\"position:relative;\"><a href=\"#discriminated-unions\" aria-label=\"discriminated unions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discriminated unions</h1>\n<p>Most of the examples we’ve looked at so far have focused around narrowing single variables with simple types like <code>string</code>, <code>boolean</code>, and <code>number</code>.\nWhile this is common, most of the time in JavaScript we’ll be dealing with slightly more complex structures.</p>\n<p>For some motivation, let’s imagine we’re trying to encode shapes like circles and squares.\nCircles keep track of their radii and squares keep track of their side lengths.\nWe’ll use a field called <code>kind</code> to tell which shape we’re dealing with.\nHere’s a first attempt at defining <code>Shape</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Shape'>Shape</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.radius?: number | undefined'>radius</data-lsp></span><span style=\"color: #000000\">?: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.sideLength?: number | undefined'>sideLength</data-lsp></span><span style=\"color: #000000\">?: number;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8BQyyA1qACYBcyARAsFAgDYTXIA+NAzgI4CucUFgG5CyKHDLBenAPxUQvALYAjaCKKdgZCABkIIAOZh0c5ApVr8AXyA'>Try</a></div></pre>\n<p>Notice we’re using a union of string literal types: <code>\"circle\"</code> and <code>\"square\"</code> to tell us whether we should treat the shape as a circle or square respectively.\nBy using <code>\"circle\" | \"square\"</code> instead of <code>string</code>, we can avoid misspelling issues.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function handleShape(shape: Shape): void'>handleShape</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Shape'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// oops!</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"rect\"</span><span style=\"color: #000000\">) {</span>\n<span class=\"error\"><span>This condition will always return 'false' since the types '\"circle\" | \"square\"' and '\"rect\"' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This condition will always return 'false' since the types '\"circle\" | \"square\"' and '\"rect\"' have no overlap.</span><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUAJYB2ALjAGYCGAxpKAMoAWlADnQN56igDWxAJqgBE1AtGoAbSENAAfUEMQBHAK6Vo0gNxdQ0SvwIrEAflREVAWwBGMbd0QF+kADKQiAcxKNToc9dt4AL54eCCgALSR1CokkeF45CpE1CQEcESgzET8UkyskAAUiMxsqHlsAJSgnNxhcHAsiACEOgTkoEUlkAB0fNmgALxDChopQlU13KBh3bM6wYFAA'>Try</a></div></pre>\n<p>We can write a <code>getArea</code> function that applies the right logic based on if it’s dealing with a circle or square.\nWe’ll first try dealing with circles.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Shape'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.radius?: number | undefined'>radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaBQBLAOwBcYAzAQwGNJQBlACwoAdaBvXUUAayIBNUAIir5oVADaRBoAD6hBiAI4BXCtCkBuTqGgU++ZYgD8qQsoC2AIxhauifH0gAZSIQDmxBidBmrN3AC+uLggoAC0EVTKxBFhuGTKhFTE+HCEoG6QxACC6hQAFIhMrKiMLJAAlKAcXOrEytDpALIUngB0AAoAkqAAVKBF5W26+oZ9-WhaAUA'>Try</a></div></pre>\n<!-- TODO -->\n<p>Under <code>strictNullChecks</code> that gives us an error - which is appropriate since <code>radius</code> might not be defined.\nBut what if we perform the appropriate checks on the <code>kind</code> property?</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number | undefined'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Shape'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.radius?: number | undefined'>radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaBQBLAOwBcYAzAQwGNJQBlACwoAdaBvXUUAayIBNUAIir5oVADaRBoAD6hBiAI4BXCtCkBuTqGgU++ZYgD8qQsoC2AIxhauifH0gAZSIQDmxBidBmrN3AC+uLggoAC0EVTKxBFhuGTKhFTE+HCEoG6QxACC6hQAFIhMrKiMLJAAlKAcXPhkoIXFkAB0vIR8oAC83fIiYpKCVTVcOlnK0OkAshSezQAKAJKgAFSgReXNuvqGK6totqBBAUA'>Try</a></div></pre>\n<p>Hmm, TypeScript still doesn’t know what to do here.\nWe’ve hit a point where we know more about our values than the type checker does.\nWe could try to use a non-null assertion (a <code>!</code> after <code>shape.radius</code>) to say that <code>radius</code> is definitely present.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number | undefined'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Shape'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Shape.radius?: number | undefined'>radius</data-lsp></span><span style=\"color: #000000\">! ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8BQyyA1qACYBcyARAsFAgDYTXIA+NAzgI4CucUFgG5CyKHDLBenAPxUQvALYAjaCKKdgZCABkIIAOZh0c5ApVr8AX3z4A9HeQBaFwl5gXT-DF4gEYYAB7EGQDCDAAQUE4AApOTBwqDGwIAEpkAiJgGGQ4hIgAOlIQMmQAXgqaOgZmanTMojFw3igQgFk4YwKABQBJZAAqZHiUgvFJaQBCQaGAJnVkGysgA'>Try</a></div></pre>\n<p>But this doesn’t feel ideal.\nWe had to shout a bit at the type-checker with those non-null assertions (<code>!</code>) to convince it that <code>shape.radius</code> was defined, but those assertions are error-prone if we start to move code around.\nAdditionally, outside of <code>strictNullChecks</code> we’re able to accidentally access any of those fields anyway (since optional properties are just assumed to always be present when reading them).\nWe can definitely do better.</p>\n<p>The problem with this encoding of <code>Shape</code> is that the type-checker doesn’t have any way to know whether or not <code>radius</code> or <code>sideLength</code> are present based on the <code>kind</code> property.\nWe need to communicate what <em>we</em> know to the type checker.\nWith that in mind, let’s take another swing at defining <code>Shape</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Circle'>Circle</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.kind: &amp;quot;circle&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.radius: number'>radius</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Square'>Square</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Square.kind: &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Square.sideLength: number'>sideLength</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Shape = Circle | Square'>Shape</data-lsp> = <data-lsp lsp='interface Circle'>Circle</data-lsp> | <data-lsp lsp='interface Square'>Square</data-lsp>;</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMLCggNig3gKGWQGtQATALmQCIENsJqBuQ5KOM4AVwGcqQuAWwBG0FgF98+UJFiIUAZQCOXOFDytSISjR4q1jFkR7AyEADIQQAczAALfkNFQJUsAE8ADortxvyAF40ehxkAB9kZVV1JiA'>Try</a></div></pre>\n<p>Here, we’ve properly separated <code>Shape</code> out into two types with different values for the <code>kind</code> property, but <code>radius</code> and <code>sideLength</code> are declared as required properties in their respective types.</p>\n<p>Let’s see what happens here when we try to access the <code>radius</code> of a <code>Shape</code>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type Shape = Circle | Square'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='any'>radius</data-lsp></data-err></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Property 'radius' does not exist on type 'Shape'.\n  Property 'radius' does not exist on type 'Square'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'radius' does not exist on type 'Shape'.\n  Property 'radius' does not exist on type 'Square'.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQBhfaKgG1oG9dRQBrIgE1QAiKoxaRBAbk6hoFPvgCuKUIQUBbAEYwpAX1wES5arQDKARwUVo7ab0IDQgxBavipXRPj6QAMpEIA5sQAFqiqmtq4erjEAJ4ADqbBFImgALz0oqygAD6g5pbWUrggoAC0FVQKxBVluGQKhFTE+HCEoAGQxACC1hQAFIjJiagmw5AAlKAcXNbECtDtALIUIQB0AAoAkqAAVKBDKZBrsvJKe-toukA'>Try</a></div></pre>\n<p>Like with our first definition of <code>Shape</code>, this is still an error.\nWhen <code>radius</code> was optional, we got an error (only in <code>strictNullChecks</code>) because TypeScript couldn’t tell whether the property was present.\nNow that <code>Shape</code> is a union, TypeScript is telling us that <code>shape</code> might be a <code>Square</code>, and <code>Square</code>s don’t have <code>radius</code> defined on them!\nBoth interpretations are correct, but only does our new encoding of <code>Shape</code> still cause an error outside of <code>strictNullChecks</code>.</p>\n<p>But what if we tried checking the <code>kind</code> property again?</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number | undefined'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type Shape = Circle | Square'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Circle'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.radius: number'>radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span class='query'>//                   ^ = (parameter) shape: Circle</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMLCggNig3gKGWQGtQATALmQCIENsJqBuQ5KOM4AVwGcqQuAWwBG0FgF98+UJFiIUAZQCOXOFDytSISjR4q1jFkR7AyEADIQQAczAALfkNFQJUsAE8ADortxvyAF40ehxkAB9kZVV1FnwAejjkAFoUhC4wFKT8GC4QBDBgAHsQZGsIMABBdTgACh5fbyoFBogASmQCImAYZDqWgDotMkCAoNoQxnbOojZyrigSgFk4e36ABQBJZAAqZHq-CH72Tl4d3YAmIxmEmdu7mYA9AH5WSXEgA'>Try</a></div></pre>\n<p>That got rid of the error!\nWhen every type in a union contains a common property with literal types, TypeScript considers that to be a <em>discriminated union</em>, and can narrow out the members of the union.</p>\n<p>In this case, <code>kind</code> was that common property (which is what’s considered a <em>discriminant</em> property of <code>Shape</code>).\nChecking whether the <code>kind</code> property was <code>\"circle\"</code> got rid of every type in <code>Shape</code> that didn’t have a <code>kind</code> property with the type <code>\"circle\"</code>.\nThat narrowed <code>shape</code> down to the type <code>Circle</code>.</p>\n<p>The same checking works with <code>switch</code> statements as well.\nNow we can try to write our complete <code>getArea</code> without any pesky <code>!</code> non-null assertions.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type Shape = Circle | Square'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Circle'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.radius: number'>radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span class='query'>//                     ^ = (parameter) shape: Circle</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Square'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Square.sideLength: number'>sideLength</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span class='query'>//           ^ = (parameter) shape: Square</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMLCggNig3gKGWQGtQATALmQCIENsJqBuQ5KOM4AVwGcqQuAWwBG0FgF98+UJFiIUAZQCOXOFDytSISjR4q1jFkR7AyEADIQQAczAALfkNFQJUsAE8ADortxvyAF40ehxkAB9kZVV1FnwAejjkAFoUhC4wFKT8GC4QBDBgAHsQZGsIMABBdTgACh5fbyoFBogASmQCYwB3YDAEO2Q6loA6LTJ2zqJkBDgeFFoQxgpWKbZyrigSgFk4e2GABQBJZAAqZHq-CGH2Tl5Ts4AmIymE1bf3ogA9AH4V6dn5npoks-kR1GANiULt5hiYzJYbPZ7sgnn9Xu8fqxJOIgA'>Try</a></div></pre>\n<p>The important thing here was the encoding of <code>Shape</code>.\nCommunicating the right information to TypeScript - that <code>Circle</code> and <code>Square</code> were really two separate types with specific <code>kind</code> fields - was crucial.\nDoing that let us write type-safe TypeScript code that looks no different than the JavaScript we would’ve written otherwise.\nFrom there, the type system was able to do the “right” thing and figure out the types in each branch of our <code>switch</code> statement.</p>\n<blockquote>\n<p>As an aside, try playing around with the above example and remove some of the return keywords.\nYou’ll see that type-checking can help avoid bugs when accidentally falling through different clauses in a <code>switch</code> statement.</p>\n</blockquote>\n<p>Discriminated unions are useful for more than just talking about circles and squares.\nThey’re good for representing any sort of messaging scheme in JavaScript, like when sending messages over the network (client/server communication), or encoding mutations in a state management framework.</p>\n<h1 id=\"the-never-type\" style=\"position:relative;\"><a href=\"#the-never-type\" aria-label=\"the never type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>never</code> type</h1>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getArea(shape: Shape): number'>getArea</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type Shape = Circle | Square'>Shape</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Shape'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) kind: &amp;quot;circle&amp;quot; | &amp;quot;square&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(property) Math.PI: number'>PI</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Circle'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.radius: number'>radius</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) shape: Square'>shape</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Square.sideLength: number'>sideLength</data-lsp></span><span style=\"color: #000000\"> ** </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMLCggNig3gKGWQGtQATALmQCIENsJqBuQ5KOM4AVwGcqQuAWwBG0FgF98+UJFiIUAZQCOXOFDytSISjR4q1jFkR7AyEADIQQAczAALfkNFQJUsAE8ADortxvyAF40ehxkAB9kZVV1FnwAejjkAFoUhC4wFKT8GC4QBDBgAHsQZGsIMABBdTgACh5fbyoFBogASmQCYwB3YDAEO2Q6loA6LTJ2zqJkBDgeFFoQxgpWKbZyrigSgFk4e2GABQBJZAAqZHq-CGH2Tl5Ts4AmIymZud19dWpl1aJ1MA2ShdvMMTGZLDZ7PdkE9WJJxEA'>Try</a></div></pre>\n<!-- TODO -->\n<h1 id=\"exhaustiveness-checking\" style=\"position:relative;\"><a href=\"#exhaustiveness-checking\" aria-label=\"exhaustiveness checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exhaustiveness checking</h1>\n<!-- TODO -->\n<!--\nAs another example, consider a `setVisible` function, that takes an `HTMLElement` and either takes a `boolean` to set whether or not the element is visible on the page, or a `number` to adjust the element's opacity (i.e. how non-transparent it is).\n\n```ts twoslash\n\n```\n-->","headings":[{"value":"typeof type guards","depth":2},{"value":"Truthiness narrowing","depth":1},{"value":"Equality narrowing","depth":2},{"value":"instanceof narrowing","depth":2},{"value":"Assignments","depth":2},{"value":"Control flow analysis","depth":2},{"value":"Discriminated unions","depth":1},{"value":"The never type","depth":1},{"value":"Exhaustiveness checking","depth":1}],"frontmatter":{"permalink":"/docs/handbook/2/narrowing.html","title":"Narrowing","disable_toc":null,"handbook":null,"oneline":"Step one in learning TypeScript: The basics types.","beta":true}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Object Types","oneline":"Step one in learning TypeScript: The basics types.","permalink":"/docs/handbook/2/objects.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"More on Functions","oneline":"Learn about how Functions work in TypeScript.","permalink":"/docs/handbook/2/functions.html"}}}},"pageContext":{"id":"8narrowing","slug":"/docs/handbook/2/narrowing.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Narrowing.md","previousID":"a0841346-823e-522d-bef3-f25968cb7f82","nextID":"6b628cea-3a43-5445-9a5b-fcfe3df5c71b","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}