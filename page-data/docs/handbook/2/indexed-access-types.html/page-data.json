{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/indexed-access-types.html","result":{"data":{"markdownRemark":{"id":"a27261df-d54a-5de1-b04a-2bf33af95c71","excerpt":"We can use an indexed access type to look up a specific property on another type: The indexing type is itself a type, so we can use unions, keyof, or other…","html":"<p>We can use an <em>indexed access type</em> to look up a specific property on another type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) alive: boolean' >alive</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = number' style='border-bottom: solid 2px lightgrey;'>Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Age = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUKEhQAgkUywEKVAG0ARIQi6AuvID0pqJYB6AfiA'>Try</a></div></pre>\n<p>The indexing type is itself a type, so we can use unions, <code>keyof</code>, or other types entirely:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I1 = string | number' style='border-bottom: solid 2px lightgrey;'>I1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type I1 = string | number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I2 = string | number | boolean' style='border-bottom: solid 2px lightgrey;'>I2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type I2 = string | number | boolean</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type AliveOrName = \"name\" | \"alive\"' >AliveOrName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"alive\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I3 = string | boolean' style='border-bottom: solid 2px lightgrey;'>I3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='type AliveOrName = \"name\" | \"alive\"' >AliveOrName</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type I3 = string | boolean</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUAHoFUALRqAxuWBqVc0JCgBJAIyZYCFKgDaAIkIQbUAD5QbqJg4C68pVD8A9AH45PXBoQwAmMzgkNCsAawgQZAAzc1jUb0VlAODQgwBBAWEAeXgAOQ8zO2KHZ1d3Zht5fXCAZmiLOKKhCDLK5izfXKA'>Try</a></div></pre>\n<p>You’ll even see an error if you try to index a property that doesn’t exist:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I1 = any' >I1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\"><data-err>&quot;alve&quot;</data-err></span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Property 'alve' does not exist on type 'Person'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'alve' does not exist on type 'Person'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAXATwAdJQAFGROAO1AF5QBvUAQwHNJUaBXAWwBGMANygarPl1CJ80AJY12o1gBs5ANykC4cFZFZ0AvsNwhQAWksBjHvkvmCJMgEkAjAwpVaAbQBEqzV8AXWEgA'>Try</a></div></pre>\n<p>Another example of indexing with an arbitrary type is using <code>number</code> to get the type of an array’s elements.\nWe can combine this with <code>typeof</code> to conveniently capture the element type of an array literal:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const MyArray: {&#10;    name: string;&#10;    age: number;&#10;}[]' >MyArray</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Eve\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">38</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    name: string;&#10;    age: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>Person</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const MyArray: {&#10;    name: string;&#10;    age: number;&#10;}[]' >MyArray</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type Person = {\n    name: string;\n    age: number;\n}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = number' style='border-bottom: solid 2px lightgrey;'>Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const MyArray: {&#10;    name: string;&#10;    age: number;&#10;}[]' >MyArray</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">][</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Age = number</span></div><div class='line'><span style=\"color: #008000\">// Or</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age2 = number' style='border-bottom: solid 2px lightgrey;'>Age2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    name: string;&#10;    age: number;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Age2 = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAsgTwIICcUEMEwLwwNoBQMMA3jGOgLYCmAXDAERIA2AlsNQwDQzoDmdGAEYArDAC+XIqXJVBDAEIgARt14D6AJgDMEqcTIUa9BgFEAbpx79B2gBx6CAXQDcBAlAQAHajAAK1CgQ4Dgwnj4gAGbwyGiYeGAArpTKga4EAPQZxDAAegD8Ht6+SAKh4dRRMagYCAnJqShOeAw2DOlZOQWZ2QDyKEU+MKXUmqEBQeAtbR3ZxAVAA'>Try</a></div></pre>\n<p>You can only use types when indexing, meaning you can’t use a <code>const</code> to make a variable reference:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const key: \"age\"' >key</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = key' >Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-err><data-err><data-lsp lsp='type key = /*unresolved*/ any' >key</data-lsp></data-err></data-err></span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Type 'key' cannot be used as an index type.</br>'key' refers to a value, but is being used as a type here. Did you mean 'typeof key'?</span><span class=\"code\">2538<br/>2749</span></span><span class=\"error-behind\">Type 'key' cannot be used as an index type.</br>'key' refers to a value, but is being used as a type here. Did you mean 'typeof key'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMAOdB2AFgE4AoAFwE8AHSUABRkTgDtQBeUAb1AEMBzSKhYBXALYAjGAG5QLXmKGhE5aAEsW-WbwA2agG5KJcODsi82AX2mkQoALSOAxiPKP7pJ6xWgA1pEoOUAAiAUhgmypaUABBQSDGJFYAbX9KAF1pIA'>Try</a></div></pre>\n<p>However, you can use a type alias for a similar style of refactor:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type key = \"age\"' >key</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = number' >Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='type key = \"age\"' >key</data-lsp></span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUAHoFUALRqAxuWBqVc0JCgBrCCExQARIQjn5+6AEEiZuEjQBtYyAC6dIA'>Try</a></div></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/2/indexed-access-types.html","title":"Indexed Access Types","disable_toc":null,"handbook":null,"oneline":"Using Type['a'] syntax to access a subset of a type.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Typeof Type Operator","oneline":"Using the typeof operator in type contexts.","permalink":"/docs/handbook/2/typeof-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Conditional Types","oneline":"Create types which act like if statements in the type system.","permalink":"/docs/handbook/2/conditional-types.html"}}}},"pageContext":{"id":"1-indexed-access-types","slug":"/docs/handbook/2/indexed-access-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md","previousID":"caa2feec-d7f0-5e81-9670-1f808cf7421f","nextID":"0ae8eb34-a050-5a85-a6ed-be4aa29fd63d","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}