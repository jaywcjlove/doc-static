{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/indexed-access-types.html","result":{"data":{"markdownRemark":{"id":"a27261df-d54a-5de1-b04a-2bf33af95c71","excerpt":"We can use an indexed access type to look up a specific property on another type: The indexing type is itself a type, so we can use unions, keyof, or other…","html":"<p>We can use an <em>indexed access type</em> to look up a specific property on another type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp> = { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #000000\">: number; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) alive: boolean'>alive</data-lsp></span><span style=\"color: #000000\">: boolean };</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type A = number'>A</data-lsp> = <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp>[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span>\n<span class='query'>//   ^ = type A = number</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUKEhQAgplgIUqANoAiQhB0BdeQHoTUCwD0A-EA'>Try</a></div></pre>\n<p>The indexing type is itself a type, so we can use unions, <code>keyof</code>, or other types entirely:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type I1 = string | number'>I1</data-lsp> = <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp>[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">];</span>\n<span class='query'>//   ^ = type I1 = string | number</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type I2 = string | number | boolean'>I2</data-lsp> = <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp>[</span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp>];</span>\n<span class='query'>//   ^ = type I2 = string | number | boolean</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type AliveOrName = &amp;quot;name&amp;quot; | &amp;quot;alive&amp;quot;'>AliveOrName</data-lsp> = </span><span style=\"color: #A31515\">\"alive\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type I3 = string | boolean'>I3</data-lsp> = <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp>[<data-lsp lsp='type AliveOrName = &amp;quot;name&amp;quot; | &amp;quot;alive&amp;quot;'>AliveOrName</data-lsp>];</span>\n<span class='query'>//   ^ = type I3 = string | boolean</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUAHoFUALRqAxuWBqVc0JCgBJAIyZYCFKgDaAIkIQbUAD5QbqJg4C68pVD8A9AH45PXBoQwAmMzgkNCsAawgQZAAzc1jUb0VlAODQgwBBAWEAeXgAOQ8zO2KHZ1d3Zht5fXCAZmiLOKKhCDLK5izfXKA'>Try</a></div></pre>\n<p>You’ll even see an error if you try to index a property that doesn’t exist:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type I1 = any'>I1</data-lsp> = <data-lsp lsp='type Person = {&amp;#13;    age: number;&amp;#13;    name: string;&amp;#13;    alive: boolean;&amp;#13;}'>Person</data-lsp>[</span><span style=\"color: #A31515\"><data-err>&quot;alve&quot;</data-err></span><span style=\"color: #000000\">];</span>\n<span class=\"error\"><span>Property 'alve' does not exist on type 'Person'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'alve' does not exist on type 'Person'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAXATwAdJQAFGROAO1AF5QBvUAQwHNJUaBXAWwBGMANygarPl1CJ80AJY12o1gBs5ANykC4cFZFZ0AvsNwhQAWksBjHvkvmCJMgEkAjAwpVaAbQBEqzV8AXWEgA'>Try</a></div></pre>\n<p>Another example of indexing with an arbitrary type is using <code>number</code> to get the type of an array’s elements.\nWe can combine this with <code>typeof</code> to conveniently capture the element type of an array literal:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const MyArray: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>MyArray</data-lsp> </span><span style=\"color: #000000\">= [</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">15</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">23</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Eve\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">38</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type T = {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>T</data-lsp> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> <data-lsp lsp='const MyArray: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>MyArray</data-lsp>[number];</span>\n<span class='query'>//   ^ = type T = {\n//       name: string;\n//       age: number;\n//   }</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAsgTwIICcUEMEwLwwNoBQMMA3jGOgLYCmAXDAERIA2AlsNQwDQzoDmdGAEYArDAC+XIqXJVBDAEIgARt14D6AJgDMEqcTIUa9BgFEAbpx79B2gBx6CAXQDcBAlAQAHajAAqODCePiAAZvDIaJh4YACulMrUKK4EAPSpxDAAegD8QA'>Try</a></div></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/2/indexed-access-types.html","title":"Indexed Access Types","disable_toc":null,"handbook":null,"oneline":"Step one in learning TypeScript: The basics types.","beta":true}},"prev":null,"next":null},"pageContext":{"id":"8keyof-type-operator","slug":"/docs/handbook/2/indexed-access-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Keyof Type Operator.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}