{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/classes.html","result":{"data":{"markdownRemark":{"id":"b96acc15-1002-571c-bbdf-2085829687c8","excerpt":"Background reading: Classes (MDN) TypeScript offers full support for the class keyword introduced in ES2015.\nAs with other JavaScript language features…","html":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">Background reading: Classes (MDN)</a></p>\n</blockquote>\n<p>TypeScript offers full support for the <code>class</code> keyword introduced in ES2015.\nAs with other JavaScript language features, TypeScript adds type annotations and other syntax to allow you to express relationships between classes and other types.</p>\n<h2 id=\"class-members\" style=\"position:relative;\"><a href=\"#class-members\" aria-label=\"class members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Members</h2>\n<p>Here’s the most basic class - an empty one:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point'>Point</data-lsp> {}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAKD2BLAdgF2gbwL5A'>Try</a></div></pre>\n<p>This class isn’t very useful yet, so let’s start adding some members.</p>\n<h3 id=\"fields\" style=\"position:relative;\"><a href=\"#fields\" aria-label=\"fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields</h3>\n<p>A field declaration creates a public writeable property on a class:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point'>Point</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.y: number'>y</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Point(): Point'>Point</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.x: number'>x</data-lsp> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.y: number'>y</data-lsp> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0AKsD2AHApraBPASQDt5p4BDAG3gC8Lz1iAuUAM2smwChEqLIkUCnTxi0UAG9uoUAA9WxAK4BbAEa4A3DND5FqjbG0BfbryYxQmCQF5QxbAHdho8QAoAlNusA6OaDsABm9oH3wA0GCgA'>Try</a></div></pre>\n<p>As with other locations, the type annotation is optional, but will be an implict <code>any</code> if not specified.</p>\n<p>Fields can also have <em>initializers</em>; these will run automatically when the class is instantiated:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point'>Point</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Point(): Point'>Point</data-lsp>();</span>\n<span style=\"color: #008000\">// Prints 0, 0</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) Point.x: number'>x</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(property) Point.y: number'>y</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAKD2BLAdgF2gbwFDWgD2gF5oAGAbh2gE8jSKBfLLYeZCdAB3WOQFMB3OEjQAKAJQUA9JLgAnFKhgkANKWasI8ELwB0IeAHMRAAwAkGLjrz1V5y1XrGJQA'>Try</a></div></pre>\n<p>Just like with <code>const</code>, <code>let</code>, and <code>var</code>, the initializer of a class property will be used to infer its type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Point(): Point'>Point</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.x: number'>x</data-lsp> = </span><span style=\"color: #A31515\">\"0\"</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAAU4BLAOwBdQBvHUUAD1AF5QAGAbhagAnl14CAvjhCgAtHLwBXOnJn44NRAwAODbjUgB3CtXoAKAJQCdAOg7cARD3t8gA'>Try</a></div></pre>\n<h4 id=\"--strictpropertyinitialization\" style=\"position:relative;\"><a href=\"#--strictpropertyinitialization\" aria-label=\"  strictpropertyinitialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--strictPropertyInitialization</code></h4>\n<p>The <code>strictPropertyInitialization</code> setting controls whether class fields need to be initialized in the constructor.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class BadGreeter'>BadGreeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(property) BadGreeter.name: string'>name</data-lsp></data-err></span><span style=\"color: #000000\">: string;</span>\n<span class=\"error\"><span>Property 'name' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'name' has no initializer and is not definitely assigned in the constructor.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAEIkAmA4tJJAC4ygDeeooAdiQLaRUiZtACWPAOYBuPAF8gA'>Try</a></div></pre>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class GoodGreeter'>GoodGreeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GoodGreeter.name: string'>name</data-lsp></span><span style=\"color: #000000\">: string;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) GoodGreeter.name: string'>name</data-lsp> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiD28AmsBOBTdAXdroG8AoaaAOzAFt0AuaCLVAS1IHMBuQ46YeU+1AK7As8VAAoAlAS4ksAC0YQAdOSrQAvNABEc9CBDwtHEgF9CJoA'>Try</a></div></pre>\n<p>Note that the field needs to be initialized <em>in the constructor itself</em>.\nTypeScript does not analyze methods you invoke from the constructor to detect initializations, because a derived class might override those methods and fail to initialize the members.</p>\n<p>If you intend to definitely initialize a field through means other than the constructor (for example, maybe an external library is filling in part of your class for you), you can use the <em>definite assignment assertion operator</em>, <code>!</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class OKGreeter'>OKGreeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Not initialized, but no error</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) OKGreeter.name: string'>name</data-lsp></span><span style=\"color: #000000\">!: string;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDyDSBxATgU1QF1c6BvAUNNAPTHQByA9htAJYB2tGtYItAXqgCYA00ARgFca9StGzJKyQtHpgAtqgCEALmgQMyBgHMA3PgC+QA'>Try</a></div></pre>\n<h3 id=\"readonly\" style=\"position:relative;\"><a href=\"#readonly\" aria-label=\"readonly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code></h3>\n<p>Fields may be prefixed with the <code>readonly</code> modifier.\nThis prevents assignments to the field outside of the constructor.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Greeter'>Greeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Greeter.name: string'>name</data-lsp></span><span style=\"color: #000000\">: string = </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) otherName: string | undefined'>otherName</data-lsp></span><span style=\"color: #000000\">?: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) otherName: string | undefined'>otherName</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Greeter.name: string'>name</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) otherName: string'>otherName</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Greeter.err(): void'>err</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) Greeter.name: string'>name</data-lsp> = </data-err></span><span style=\"color: #A31515\">\"not ok\"</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Cannot assign to 'name' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to 'name' because it is a read-only property.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const g: Greeter'>g</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Greeter(otherName?: string | undefined): Greeter'>Greeter</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const g: Greeter'>g</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) Greeter.name: string'>name</data-lsp> = </data-err></span><span style=\"color: #A31515\">\"also not ok\"</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Cannot assign to 'name' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to 'name' because it is a read-only property.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGd2cAoAYwBsBDRRUAcWkkgBcZQBvQ0Ue8gEzgDtSAT1D9yAW0ipEjaAEt+Ac1ABeUACIA7glI91AbkIdQxATOgBXYowQAKOIwAWMAHITIAfmmyFigJRsxpxyAGag9k6u7qAAhCpqFvw8kCEKkDwB7JzZoE5yiAB0YpKqoA7O0G6ShjkAvsb1xjDQtplBuY75RdFq6vwOZQDWBg2E9ab8MqDKavyQmrT0TDCthordJb3kpIhwogNww-pAA'>Try</a></div></pre>\n<h3 id=\"constructors\" style=\"position:relative;\"><a href=\"#constructors\" aria-label=\"constructors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructors</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\">Background Reading: Constructor (MDN)</a></p>\n<p>Class constructors are very similar to functions.\nYou can add parameters with type annotations, default values, and overloads:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point'>Point</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.y: number'>y</data-lsp></span><span style=\"color: #000000\">: number;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Normal signature with defaults</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.x: number'>x</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.y: number'>y</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: number'>y</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAKD2BLAdgF2gbwFDWgDwC5pkBXAWwCMBTAJwG4doBPI0y2hxgei+gDl4NMmBDQIiAObIwqEjSrQA7olQALaABMqAMzAkQqCI2DxkEVDRLBUggBR5oAXmgAGADTMnrgJSZGuNUQIADoHZzwGXADVIOCmLyZI6ABfLGSgA'>Try</a></div></pre>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point'>Point</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Overloads</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: string'>y</data-lsp></span><span style=\"color: #000000\">: string);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">: string);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) xs: any'>xs</data-lsp></span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: any'>y</data-lsp></span><span style=\"color: #000000\">?: any) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// TBD</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAKD2BLAdgF2gbwFDWgej2gHkA3AUwCcR4wATCHaYeZCVCgV2FXgoAoAHgC5oyDgFsARpQA00AJ4i2FFAHMAlAG5GzVuy49+EJezVadLZQd6Dj0MMnlz5AfhEP56zI1wFoAFQAhABFGAF8sMKA'>Try</a></div></pre>\n<p>There are just a few differences between class constructor signatures and function signatures:</p>\n<ul>\n<li>Constructors can’t have type parameters - these belong on the outer class declaration, which we’ll learn about later</li>\n<li>Constructors can’t have return type annotations - the class instance type is always what’s returned</li>\n</ul>\n<h4 id=\"super-calls\" style=\"position:relative;\"><a href=\"#super-calls\" aria-label=\"super calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Super Calls</h4>\n<p>Just as in JavaScript, if you have a base class, you’ll need to call <code>super();</code> in your constructor body before using any <code>this.</code> members:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.k: number'>k</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Prints a wrong value in ES5; throws exception in ES6</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.k: number'>k</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>'super' must be called before accessing 'this' in the constructor of a derived class.</span><span class=\"code\">17009</span></span><span class=\"error-behind\">'super' must be called before accessing 'this' in the constructor of a derived class.</span><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwHYAMWCcAoAYwBsBDRRUAIXMlAG99RQBrUAXlABYBufAX3xEyFUABEYASwBukACahIADwAukAHZzKNRHUbNCcdYhXQAroRUIAFAEoGTZqBCgACtEnqVlUqADu8OoA5qDSpMRmdJ6gAKIAygCsPKAqABbwfpTKhJAADiqSRqDR8QBsjgZGiHDEkAB0xHBB1mmSiHUstnxOoIhmuTB23aCC-EA'>Try</a></div></pre>\n<p>Forgetting to call <code>super</code> is an easy mistake to make in JavaScript, but TypeScript will tell you when it’s necessary.</p>\n<h3 id=\"methods\" style=\"position:relative;\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h3>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Background Reading: Method definitions (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>A function property on a class is called a <em>method</em>.\nMethods can use all the same type annotations as functions and constructors:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point'>Point</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Point.scale(n: number): void'>scale</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\">: number): void {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.x: number'>x</data-lsp> *= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.y: number'>y</data-lsp> *= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAKD2BLAdgF2gbwFDWgD2gF5oBGABgG4doBPI0yraiYMEAUwApkAuaZAK4BbAEbsATgEo+ANyQATTNVyoAFoggA6AgCpiyKrhXqtdPf0PQAvlitA'>Try</a></div></pre>\n<p>Other than the standard type annotations, TypeScript doesn’t add anything else new to methods.</p>\n<p>Note that inside a method body, it is still mandatory to access fields and other methods via <code>this.</code>.\nAn unqualified name in a method body will always refer to something in the enclosing scope:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: number'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class C'>C</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) C.x: string'>x</data-lsp></span><span style=\"color: #000000\">: string = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='(method) C.m(): void'>m</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// This is trying to modify &apos;x&apos; from line 1, not the class property</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let x: number'>x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAD1QDsBXAWwCMZQBeUABgG4ccBjPAQ0USgAwqADeOUKVSJC0AJbkA5k1AAiABaQ8eOKo4TQ1ABQBKMQckhQAFXVzB90LICeC5YTiG4AEzkAzZ1AAchIg0D94alA8BUhQAEYAGlByOGJCTVAefkEAB3hcmEJnC1IVVQB3BDxvPQMAXxx6oA'>Try</a></div></pre>\n<h3 id=\"getters--setters\" style=\"position:relative;\"><a href=\"#getters--setters\" aria-label=\"getters  setters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getters / Setters</h3>\n<p>Classes can also have <em>accessors</em>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class C'>C</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) C._length: number'>_length</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> <data-lsp lsp='(property) C.length: number'>length</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) C._length: number'>_length</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> <data-lsp lsp='(property) C.length: number'>length</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: number'>value</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) C._length: number'>_length</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: number'>value</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDC0G8BQ1oH0QFMB2BzALgBbQC80ADANwrS6b7RZ5EAUAlIjagE70Cu3bNCIBLCADoMOAoWqoAvjQj1G01gDcwIPpg7JUqURKnNiZTdsxzoi+UA'>Try</a></div></pre>\n<blockquote>\n<p>Note that a field-backed get/set pair with no extra logic is very rarely useful in JavaScript.\nIt’s fine to expose public fields if you don’t need to add additional logic during the get/set operations.</p>\n</blockquote>\n<p>TypeScript has some special inference rules for accessors:</p>\n<ul>\n<li>If no <code>set</code> exists, the property is automatically <code>readonly</code></li>\n<li>The type of the setter parameter is inferred from the return type of the getter</li>\n<li>If the setter parameter has a type annotation, it must match the return type of the getter</li>\n<li>Getters and setters must have the same [[Member Visibility]]</li>\n</ul>\n<p>It is not possible to have accessors with different types for getting and setting.</p>\n<p>If you have a getter without a setter, the field is automatically <code>readonly</code></p>\n<h3 id=\"index-signatures\" style=\"position:relative;\"><a href=\"#index-signatures\" aria-label=\"index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index Signatures</h3>\n<p>Classes can declare index signatures; these work the same as [[Index Signatures]] for other object types:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyClass'>MyClass</data-lsp> {</span>\n<span style=\"color: #000000\">  [</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">: string]: boolean | ((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">: string) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> boolean);</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) MyClass.check(s: string): boolean'>check</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> boolean;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECyCeBhcVoG8BQ1oG0IC5oIAXAJwEsA7AcwF1CAjAeyZAFMxLoAfaACj4EiZKtQCU0ALwA+aM1YdKYgNxZowABZtgAa0GESFGhMzZspNsQCupLsQ3kIeWtEhyW7TquwBfDD6A'>Try</a></div></pre>\n<p>Because the index signature type needs to also capture the types of methods, it’s not easy to usefully use these types.\nGenerally it’s better to store indexed data in another place instead of on the class instance itself.</p>\n<h2 id=\"class-heritage\" style=\"position:relative;\"><a href=\"#class-heritage\" aria-label=\"class heritage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Heritage</h2>\n<p>Like other langauges with object-oriented features, classes in JavaScript can inherit from base classes.</p>\n<h3 id=\"implements-clauses\" style=\"position:relative;\"><a href=\"#implements-clauses\" aria-label=\"implements clauses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>implements</code> Clauses</h3>\n<p>You can use an <code>implements</code> clause to check that a class satisfies a particular <code>interface</code>.\nAn error will be issued if a class fails to correctly implement it:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Pingable'>Pingable</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Pingable.ping(): void'>ping</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Sonar'>Sonar</data-lsp> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> <data-lsp lsp='interface Pingable'>Pingable</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Sonar.ping(): void'>ping</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"ping!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"><data-err> <data-lsp lsp='class Ball'>Ball</data-lsp> </data-err></span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> <data-lsp lsp='interface Pingable'>Pingable</data-lsp> {</span>\n<span class=\"error\"><span>Class 'Ball' incorrectly implements interface 'Pingable'.\n  Property 'ping' is missing in type 'Ball' but required in type 'Pingable'.</span><span class=\"code\">2420</span></span><span class=\"error-behind\">Class 'Ball' incorrectly implements interface 'Pingable'.\n  Property 'ping' is missing in type 'Ball' but required in type 'Pingable'.</span><span style=\"color: #000000\">  <data-lsp lsp='(method) Ball.pong(): void'>pong</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"pong!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBY0AYBQBLAOwBcYAzAQwGNJQAFIgcwoCMAbWgb11FAAcmACgCUqAG5x8AEwDcuAL65cVNhUSJQAZTiEK0UPgC2fDocgkNDQs3Zce-IcNDdevKjsRwOAOjZxGggBEAtYAhIHCcryKisqq6qAAQhRsbAbGpubElkysHM72fDoBTi6u7oSePn4BwcXhkfYxQA'>Try</a></div></pre>\n<p>Classes may also implement multiple interfaces, e.g. <code>class C implements A, B {</code>.</p>\n<h4 id=\"cautions\" style=\"position:relative;\"><a href=\"#cautions\" aria-label=\"cautions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cautions</h4>\n<p>It’s important to understand that an <code>implements</code> clause is only a check that the class can be treated as the interface type.\nIt doesn’t change the type of the class or its methods <em>at all</em>.\nA common source of error is to assume that an <code>implements</code> clause will change the class type - it doesn’t!</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Checkable'>Checkable</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Checkable.check(name: string): boolean'>check</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string): boolean;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class NameChecker'>NameChecker</data-lsp> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> <data-lsp lsp='interface Checkable'>Checkable</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) NameChecker.check(s: any): boolean'>check</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) s: any'>s</data-lsp></data-err></span><span style=\"color: #000000\">) {</span>\n<span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Notice no error here</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='any'>toLowercse</data-lsp>() === </span><span style=\"color: #A31515\">\"ok\"</span><span style=\"color: #000000\">;</span>\n<span class='query'>//             ^ = any</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQBLAOwBcYAzAQwGNJQBhAC0ioGsKAjAG1oG9dRQVJqwAUhCgFtIqRMWhEA5gEpU7OHG4VCAblwBfXLiqcKiRKABykyI2YsYofBIAO3KSXO3WHbqD4ChOxFEJT9+AVAQSzhifBpQQjhQGHhoUCZoSHCBTOIAV2hCUEQAOmI4ABk4AHcYKkRIEVCAXlbQACI4FnbdCMiwPr6APQB+cIM9IA'>Try</a></div></pre>\n<p>In this example, we perhaps expected that <code>s</code>’s type would be influenced by the <code>name: string</code> parameter of <code>check</code>.\nIt is not - <code>implements</code> clauses don’t change how the class body is checked or its type inferred.</p>\n<p>Similarly, implementing an interface with an optional property doesn’t create that property:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface A'>A</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) A.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) A.y?: number | undefined'>y</data-lsp></span><span style=\"color: #000000\">?: number;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class C'>C</data-lsp> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> <data-lsp lsp='interface A'>A</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) C.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: C'>c</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor C(): C'>C</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const c: C'>c</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='any'>y</data-lsp> = </data-err></span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Property 'y' does not exist on type 'C'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'y' does not exist on type 'C'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQBBUAb11FAA9VCBXAWwCMYAbhagAngH5OvAdGEBfXFQA2FRIlABhUPh4AHJZB6QS6hs1ZtQAXlAAGeYriFExUFWuhCkAO6aAFACUwlQAdKIeAIz2QA'>Try</a></div></pre>\n<h3 id=\"extends-clauses\" style=\"position:relative;\"><a href=\"#extends-clauses\" aria-label=\"extends clauses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>extends</code> Clauses</h3>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends\">Background Reading: extends keyword (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>Classes may <code>extend</code> from a base class.\nA derived class has all the properties and methods of its base class, and also define additional members.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Animal'>Animal</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Animal.move(): void'>move</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Moving along!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Dog'>Dog</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Animal'>Animal</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Dog.woof(times: number): void'>woof</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) times: number'>times</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let i: number'>i</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let i: number'>i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) times: number'>times</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let i: number'>i</data-lsp></span><span style=\"color: #000000\">++) {</span>\n<span style=\"color: #000000\">      <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"woof!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Dog'>d</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Dog(): Dog'>Dog</data-lsp>();</span>\n<span style=\"color: #008000\">// Base class method</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Dog'>d</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Animal.move(): void'>move</data-lsp>();</span>\n<span style=\"color: #008000\">// Derived class method</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Dog'>d</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Dog.woof(times: number): void'>woof</data-lsp>(</span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCB2BLAtmE0DeAoa1kHsA3AUwAoBKTHXaYfeCfEYgOhHwHNSAiAWSMTwO0NPQ4BCbuQDc1AL5YFWUJBgARTtGIAPAC7F4AExgIUaKrgDu+fADNSulMQgAuaPACuyAEbEATpTYNNC2+H7QpMy60IjQALzQAAzSMdAAPNCOyM4piADUeYHUwXQMTKzsXNzWdpIyxdAKuApKpRDRhvHuxJbQGlz1APSD0ABCkMS04FB4xLoAFviGWIYsBCQUssN9-ogknSoz2QtLKyw19gDMMkA'>Try</a></div></pre>\n<h4 id=\"overriding-methods\" style=\"position:relative;\"><a href=\"#overriding-methods\" aria-label=\"overriding methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overriding Methods</h4>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\">Background reading: super keyword (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>A derived class can also override a base class field or property.\nYou can use the <code>super.</code> syntax to access base class methods.\nNote that because JavaScript classes are a simple lookup object, there is no notion of a “super field”.</p>\n<p>TypeScript enforces that a derived class is always a subtype of its base class.</p>\n<p>For example, here’s a legal way to override a method:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Base.greet(): void'>greet</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, world!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Derived.greet(name?: string | undefined): void'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string | undefined'>name</data-lsp></span><span style=\"color: #000000\">?: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string | undefined'>name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.greet(): void'>greet</data-lsp>();</span>\n<span style=\"color: #000000\">    } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">      <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">`Hello, </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Derived(): Derived'>Derived</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Derived.greet(name?: string | undefined): void'>greet</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Derived.greet(name?: string | undefined): void'>greet</data-lsp>(</span><span style=\"color: #A31515\">\"reader\"</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8BQ1oHMBOCEBcAKAShXQ2mAHsA7CKkBAOhCs0ICIAJBEVgGmgB3KthAATAIQdiAbnIBfVEtShIMACIJsASwBuCcdAQAPfAhriY8CEjQYceIjTABbBAH4AXNAj5dNJik9hQ6AGbQhC7u0AC88dAArpYIYTo0hsHkFL6JAA7aTI4EJPI5CsYgtmQ5GNR0DMys7AAGPHxUggAkyNHM+FQAqnkF2ADCiCQKLXLZ0EoYSir1ftBGsdAZQtBaugbipajiRbgls8fFRBy4YOLaMrJAA'>Try</a></div></pre>\n<p>It’s important that a derived class follow its base class contract.\nRemember that it’s very common (and always legal!) to refer to a derived class instance through a base class reference:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Alias the derived instance through a base class reference</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Base'>b</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='class Base'>Base</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Base'>d</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// No problem</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Base'>b</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.greet(): void'>greet</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8BQ1oHMBOCEBcAKAShXQ2mAHsA7CKkBAOhCs0ICIAJBEVgGmgB3KthAATAIQdiAbnIBfVEvEJQYXJVoR80cQC44ieQHoT0ALRXgAV3xWLqM9ACCIAJaRo+ABZJV2O4Abgji0O50+GA0wEi+2FQ2mD7QYNAARoiU4FDQuABmCLgxCKjUkRmG8BBIALx6puYAclTQAA4J6YwAtqjpTDh4RHJAA'>Try</a></div></pre>\n<p>What if <code>Derived</code> didn’t follow <code>Base</code>’s contract?</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Base.greet(): void'>greet</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, world!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Make this parameter required</span>\n<span style=\"color: #000000\"><data-err>  <data-lsp lsp='(method) Derived.greet(name: string): void'>greet</data-lsp>(</data-err></span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span class=\"error\"><span>Property 'greet' in type 'Derived' is not assignable to the same property in base type 'Base'.\n  Type '(name: string) =&gt; void' is not assignable to type '() =&gt; void'.</span><span class=\"code\">2416</span></span><span class=\"error-behind\">Property 'greet' in type 'Derived' is not assignable to the same property in base type 'Base'.\n  Type '(name: string) =&gt; void' is not assignable to type '() =&gt; void'.</span><span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">`Hello, </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #A31515\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCMA2AUAMYA2AhooqAEJmSgDeeooA5tJJAC4AUAlPY01AE4AO0RwikAHRE4zLgCIAEpCKyANKADuCIgBMAhAp4BuAQF88lwqXKgAIjACWAN0h7QkAB4dIIvRTUiLQMTCCgALIkANa0HAAWThQADiTQJAC2nDCgbACOAK5ObHoCrOzcIpmQqIgc0E4izHyhgsJiEtKy8gAGKmpwmgAkdFVZUhxwAKrJyTAAwjS85j2mFlZAA'>Try</a></div></pre>\n<p>If we compiled this code despite the error, this sample would then crash:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Base'>b</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='class Base'>Base</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Derived(): Derived'>Derived</data-lsp>();</span>\n<span style=\"color: #008000\">// Crashes because \"name\" will be undefined</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Base'>b</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.greet(): void'>greet</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEkoGdnwEIoQbwFD3gHM4QAXACgEoAueANwHsBLYAblwF9dQk5FpU8ACIgYTOiGDwQAD1IgAdsDSZkOLgHoN8ALR6wAV1J6duMAwXJS8AEa1VCALzwFIAO7DR4yVXZb4AMIwKAAWIGg24FAGavAARApQALYgcfBuTBAQtggGSiAAZkyuwLg2AHTEIGS+QA'>Try</a></div></pre>\n<h4 id=\"initialization-order\" style=\"position:relative;\"><a href=\"#initialization-order\" aria-label=\"initialization order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialization Order</h4>\n<p>The order that JavaScript classes initialize can be surprising in some cases.\nLet’s consider this code:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"base\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"My name is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Base.name: string'>name</data-lsp>);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"derived\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Prints \"base\", not \"derived\"</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Derived(): Derived'>Derived</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8BQ1oDswFskF5oAiAI0SIG51pgB7TCAFwCcBXYR25gCgEoVqGOg1ogEAOhC0A5tyIBZAJ5ZcSAJYwi0ANTRGACw3jseXlQwBfVFdShIMACIJmagG4IAJtAQAPRgkwPGHgIJDQMEwJiD2c3T0prVFQAemToAAUXTEZNMlCiABosWkZo2PcPIlt6JmgvQkwEAHdoJxcKvgogA'>Try</a></div></pre>\n<p>What happened here?</p>\n<p>The order of class initialization, as defined by JavaScript, is:</p>\n<ul>\n<li>The base class fields are initialized</li>\n<li>The base class constructor runs</li>\n<li>The derived class fields are initialized</li>\n<li>The derived class constructor runs</li>\n</ul>\n<p>This means that the base class constructor saw its own value for <code>name</code> during its own constructor, because the derived class field initializations hadn’t run yet.</p>\n<h4 id=\"inheriting-built-in-types\" style=\"position:relative;\"><a href=\"#inheriting-built-in-types\" aria-label=\"inheriting built in types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheriting Built-in Types</h4>\n<blockquote>\n<p>Note: If you don’t plan to inherit from built-in types like <code>Array</code>, <code>Error</code>, <code>Map</code>, etc., you may skip this section</p>\n</blockquote>\n<p>In ES2015, constructors which return an object implicitly substitute the value of <code>this</code> for any callers of <code>super(...)</code>.\nIt is necessary for generated constructor code to capture any potential return value of <code>super(...)</code> and replace it with <code>this</code>.</p>\n<p>As a result, subclassing <code>Error</code>, <code>Array</code>, and others may no longer work as expected.\nThis is due to the fact that constructor functions for <code>Error</code>, <code>Array</code>, and the like use ECMAScript 6’s <code>new.target</code> to adjust the prototype chain;\nhowever, there is no way to ensure a value for <code>new.target</code> when invoking a constructor in ECMAScript 5.\nOther downlevel compilers generally have the same limitation by default.</p>\n<p>For a subclass like the following:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class FooError'>FooError</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='var Error: ErrorConstructor'>Error</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) m: string'>m</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) m: string'>m</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) FooError.sayHello(): string'>sayHello</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Error.message: string'>message</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiD28CiAnF8XQKYA8AuWAdgCYyrqYDeAUNNMPIRHigK7B4YAUAtgFzRmKAJaEA5gEpoNOnQisADlhS8JAblrQAvpohgAngAksIEPC5SZslFjysUhaACIAFibPPoAamh4XwiAA6HiwoMDEsDTodLSA'>Try</a></div></pre>\n<p>you may find that:</p>\n<ul>\n<li>methods may be <code>undefined</code> on objects returned by constructing these subclasses, so calling <code>sayHello</code> will result in an error.</li>\n<li><code>instanceof</code> will be broken between instances of the subclass and their instances, so <code>(new FooError()) instanceof FooError</code> will return <code>false</code>.</li>\n</ul>\n<p>As a recommendation, you can manually adjust the prototype immediately after any <code>super(...)</code> calls.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class FooError'>FooError</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='var Error: ErrorConstructor'>Error</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) m: string'>m</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) m: string'>m</data-lsp></span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Set the prototype explicitly.</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var Object: ObjectConstructor'>Object</data-lsp>.<data-lsp lsp='(method) ObjectConstructor.setPrototypeOf(o: any, proto: object | null): any'>setPrototypeOf</data-lsp>(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, <data-lsp lsp='class FooError'>FooError</data-lsp>.<data-lsp lsp='(property) FooError.prototype: FooError'>prototype</data-lsp>);</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='(method) FooError.sayHello(): string'>sayHello</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Error.message: string'>message</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiD28CiAnF8XQKYA8AuWAdgCYyrqYDeAUNNMPIRHigK7B4YAUAtgFzRmKAJaEA5gEpoNOnQisADlhS8JAbmq1ZAem3QAyljzQ8ACyzQF6TngCeS7DgUhhwYXhC2AdFroB5ACMAKywOLwgjAAVreDslPwAzLjNhCAAaOERyDC8rWNj7LHUtAF9NOTBbAAksEBB4LikZWRQjVhRCaAAiczr4bugAahNTVK8eLCgwMSwNOjKSoA'>Try</a></div></pre>\n<p>However, any subclass of <code>FooError</code> will have to manually set the prototype as well.\nFor runtimes that don’t support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>, you may instead be able to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>__proto__</code></a>.</p>\n<p>Unfortunately, <a href=\"https://msdn.microsoft.com/en-us/library/s4esdbwz(v=vs.94).aspx\">these workarounds will not work on Internet Explorer 10 and prior</a>.\nOne can manually copy methods from the prototype onto the instance itself (i.e. <code>FooError.prototype</code> onto <code>this</code>), but the prototype chain itself cannot be fixed.</p>\n<h2 id=\"member-visibility\" style=\"position:relative;\"><a href=\"#member-visibility\" aria-label=\"member visibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Member Visibility</h2>\n<p>You can use TypeScript to control whether certain methods or properties are visible to code outside the class.</p>\n<h3 id=\"public\" style=\"position:relative;\"><a href=\"#public\" aria-label=\"public permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>public</code></h3>\n<p>The default visibility of class members is <code>public</code>.\nA <code>public</code> member can be accessed by anywhere:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Greeter'>Greeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> <data-lsp lsp='(method) Greeter.greet(): void'>greet</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"hi!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const g: Greeter'>g</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Greeter(): Greeter'>Greeter</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const g: Greeter'>g</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Greeter.greet(): void'>greet</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBTRAXR9oG8BQ1oAcBXAIxAEthoBzJVACgEotc9pgB7AOwnZEQDoQ7KnQBEACzIBCUQwDcLAL7ZlHbimrQAvNE6IA7nFpp4jBVX41kKM0A'>Try</a></div></pre>\n<p>Because <code>public</code> is already the default visibility modifier, you don’t ever <em>need</em> to write it on a class member, but might choose to do so for style/readability reasons.</p>\n<h3 id=\"protected\" style=\"position:relative;\"><a href=\"#protected\" aria-label=\"protected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>protected</code></h3>\n<p><code>protected</code> members are only visible to subclasses of the class they’re declared in.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Greeter'>Greeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> <data-lsp lsp='(method) Greeter.greet(): void'>greet</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(method) Greeter.getName(): string'>getName</data-lsp>());</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> <data-lsp lsp='(method) Greeter.getName(): string'>getName</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class SpecialGreeter'>SpecialGreeter</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Greeter'>Greeter</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> <data-lsp lsp='(method) SpecialGreeter.howdy(): void'>howdy</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// OK to access protected member here</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Howdy, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(method) Greeter.getName(): string'>getName</data-lsp>());</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const g: SpecialGreeter'>g</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor SpecialGreeter(): SpecialGreeter'>SpecialGreeter</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const g: SpecialGreeter'>g</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Greeter.greet(): void'>greet</data-lsp>(); </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const g: SpecialGreeter'>g</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(method) Greeter.getName(): string'>getName</data-lsp>();</data-err></span>\n<span class=\"error\"><span>Property 'getName' is protected and only accessible within class 'Greeter' and its subclasses.</span><span class=\"code\">2445</span></span><span class=\"error-behind\">Property 'getName' is protected and only accessible within class 'Greeter' and its subclasses.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYMFYBQBjAGwENFFQBxaSSAFxlAG9dRQAHAVwCNCBLfUAHNqdABQBKJi1ah8cAHaI4hSADpCcQaIBEACUiENAGlDbQAalC0AFr0SrBdAHLEAtpAniA3NIC+0tnh6fHoAEyFnNw9JZhlQaloOaHlTW20fVn9-AhIyUABlNkh8XmJCKhp6aFBIAA96eVDyCroGWPZuPgFrOAB3UIBPCSk4kFAAeQBpKzhQYnx8SDzAuGCw0HdXLgZrGEhpVjlFZTUNLT0+wZMzSxs7B0j3TwyZMbj3j8+ZAD1fv---n5cP4johaEJQABeUDySC9ApFEplFpVCQ+QQOES0NGgMZTXAYxy0FxPbxAA'>Try</a></div></pre>\n<h4 id=\"exposure-of-protected-members\" style=\"position:relative;\"><a href=\"#exposure-of-protected-members\" aria-label=\"exposure of protected members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exposure of <code>protected</code> members</h4>\n<p>Derived classes need to follow their base class contracts, but may choose to expose a more general type with more capabilities.\nThis includes making <code>protected</code> members <code>public</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.m: number'>m</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// No modifier, so default is &apos;public&apos;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived.m: number'>m</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">15</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Derived(): Derived'>Derived</data-lsp>();</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived.m: number'>m</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8BQ1oAcBOB7ALgsIQCbQC20AvNAIwAMA3KgL6qiQwAiC2AlgDcEZBAA9CAOxIx4EJGgwB6RdAByuCrhJ8AZn14AaaBA0kEOsAFcQ+aHxgByTJYBGIPsAfoK1OgFZmNmBcCQhbMhoJBAB3aB5+IRIACgBKZmDQ3BAEADoQXABzJJIc8jToZWgAeQBpIA'>Try</a></div></pre>\n<p>Note that <code>Derived</code> was already able to freely read and write <code>m</code>, so this doesn’t meaningfully alter the “security” of this situation.\nThe main thing to note here is that in the derived class, we need to be careful to repeat the <code>protected</code> modifier if this exposure isn’t intentional.</p>\n<h4 id=\"cross-hierarchy-protected-access\" style=\"position:relative;\"><a href=\"#cross-hierarchy-protected-access\" aria-label=\"cross hierarchy protected access permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross-hierarchy <code>protected</code> access</h4>\n<p>Different OOP languages disagree about whether it’s legal to access a <code>protected</code> member through a base class reference:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived1'>Derived1</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived1.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number = </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived2'>Derived2</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Derived2.f1(other: Derived2): void'>f1</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: Derived2'>other</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='class Derived2'>Derived2</data-lsp>) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: Derived2'>other</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Base.x: number'>x</data-lsp> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Derived2.f2(other: Base): void'>f2</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: Base'>other</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='class Base'>Base</data-lsp>) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: Base'>other</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) Base.x: number'>x</data-lsp> = </data-err></span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Property 'x' is protected and only accessible through an instance of class 'Derived2'.</span><span class=\"code\">2446</span></span><span class=\"error-behind\">Property 'x' is protected and only accessible through an instance of class 'Derived2'.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYMDYBQBjAGwENFFQAhUyUAb11FAAd4AXSfdgE1AA9UAdgFcAtgCMYoALygAjAG5cAXwIkyoACIwAlgDdIXWaEi92AruSqIa9RizjtOBvoNETo00AFZFKoqXItaD0DNGNTSHNLajoGUAAzWQAKBwALGFQgkK40AEpYxkY0mAA6Xk9ZAAZFRhVGeLQU1nToVCtIfNtC4ugyiuq4lSUgA'>Try</a></div></pre>\n<p>Java, for example, considers this to be legal.\nOn the other hand, C# and C++ chose that this code should be illegal.</p>\n<p>TypeScript sides with C# and C++ here, because accessing <code>x</code> in <code>Derived2</code> should only be legal from <code>Derived2</code>’s subclasses, and <code>Derived1</code> isn’t one of them.\nMoreover, if accessing <code>x</code> through a <code>Derived2</code> reference is illegal (which it certainly should be!), then accessing it through a base class reference should never improve the situation.</p>\n<p>See also <a href=\"https://blogs.msdn.microsoft.com/ericlippert/2005/11/09/why-cant-i-access-a-protected-member-from-a-derived-class/\">Why Can’t I Access A Protected Member From A Derived Class?</a> which explains more of C#‘s reasoning.</p>\n<h3 id=\"private\" style=\"position:relative;\"><a href=\"#private\" aria-label=\"private permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>private</code></h3>\n<p><code>private</code> is like <code>protected</code>, but doesn’t allow access to the member even from subclasses:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Base'>b</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Base(): Base'>Base</data-lsp>();</span>\n<span style=\"color: #008000\">// Can&apos;t access from outside the class</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Base'>b</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) Base.x: number'>x</data-lsp>);</data-err></span>\n<span class=\"error\"><span>Property 'x' is private and only accessible within class 'Base'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'x' is private and only accessible within class 'Base'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUAMYA2AhooqAEJmSgDeeooADtAJYBuJALrQB6gAvKAAMAbjwBfQnAB2ibqABGQ0LMgB3KjQAUASgkhQAYRKyA5IpIECkcqABm8ALag4AV26I2AE1rcAC1piMkQZeTgiSAA6IjgAcx0laL4DIA'>Try</a></div></pre>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Derived.showX(): void'>showX</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Can&apos;t access in subclasses</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) Base.x: number'>x</data-lsp>);</data-err></span>\n<span class=\"error\"><span>Property 'x' is private and only accessible within class 'Base'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'x' is private and only accessible within class 'Base'.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUAMYA2AhooqAEJmSgDeeooADtAJYBuJALrQB6gAvKAAMAbjwBfPCFABaBQQCu3BXMKlyoACIxOkACahIfXgDsDFaoloMmiABZwA7gA0AFAEp6jJqFkAwiRmAOTcoCQEBJBabGagiEoARsRkNoi+TARwZohwRJAAdERwAObu3A5siIV8nhJM0pJAA'>Try</a></div></pre>\n<p>Because <code>private</code> members aren’t visible to derived classes, a derived class can’t increase its visibility:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"><data-err> <data-lsp lsp='class Derived'>Derived</data-lsp> </data-err></span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span class=\"error\"><span>Class 'Derived' incorrectly extends base class 'Base'.\n  Property 'x' is private in type 'Base' but not in type 'Derived'.</span><span class=\"code\">2415</span></span><span class=\"error-behind\">Class 'Derived' incorrectly extends base class 'Base'.\n  Property 'x' is private in type 'Base' but not in type 'Derived'.</span><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCMBWAUAMYA2AhooqAEJmSgDeeooADtAJYBuJALrQB6gAvKAAMAbjwBfQqXKgAIjE6QAJqEh9eAOxUVqiWgyYDhWCZKA'>Try</a></div></pre>\n<h4 id=\"cross-instance-private-access\" style=\"position:relative;\"><a href=\"#cross-instance-private-access\" aria-label=\"cross instance private access permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross-instance <code>private</code> access</h4>\n<p>Different OOP languages disagree about whether different instances of the same class may access each others’ <code>private</code> members.\nWhile languages like Java, C#, C++, Swift, and PHP allow this, Ruby does not.</p>\n<p>TypeScript does allow cross-instance <code>private</code> access:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class A'>A</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) A.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> <data-lsp lsp='(method) A.sameAs(other: A): boolean'>sameAs</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: A'>other</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='class A'>A</data-lsp>) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// No error</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: A'>other</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) A.x: number'>x</data-lsp> === </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) A.x: number'>x</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECC0G8BQ1oAcBOBLAbmALgKbQAe0AvNAIwAMA3EiugK4BGIWw0EYAtobAgAKAPb4AFoQwAuOAEpETVAHpl0AHIjoUjCIxLoGQvmYYAdtDGSMAOjLkH0CVgh2GqAL5IPQA'>Try</a></div></pre>\n<h4 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h4>\n<p>Like other aspects of TypeScript’s type system, <code>private</code> and <code>protected</code> are only enforced during type checking.\nThis means that JavaScript runtime constructs like <code>in</code> or simple property lookup can still access a <code>private</code> or <code>protected</code> member:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MySafe'>MySafe</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MySafe.secretKey: number'>secretKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">12345</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECyCeBlMAzAptA3gKGtADgE4CWAbmAC4YRrCFoUDSa80AvNAIwBMAzACwBWANzYAvkA'>Try</a></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// In a JavaScript file...</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> MySafe();</span>\n<span style=\"color: #008000\">// Will print 12345</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">secretKey</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>If you need to protect values in your class from malicious actors, you should use mechanisms that offer hard runtime privacy, such as closures, weak maps, or [[private fields]].</p>\n<h2 id=\"static-members\" style=\"position:relative;\"><a href=\"#static-members\" aria-label=\"static members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Members</h2>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\">Background Reading: Static Members (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>Classes may have <code>static</code> members.\nThese members aren’t associated with a particular instance of the class.\nThey can be accessed through the class constructor object itself:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyClass'>MyClass</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MyClass.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> <data-lsp lsp='(method) MyClass.printX(): void'>printX</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class MyClass'>MyClass</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) MyClass.x: number'>x</data-lsp>);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class MyClass'>MyClass</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) MyClass.x: number'>x</data-lsp>);</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='class MyClass'>MyClass</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) MyClass.printX(): void'>printX</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECyCeBhcVoG8BQ1oQC5lwEthoAPaAXmgAYBuLHfIkgBwCdCA7XADQAoAlOgbZgAe04QxIAKYA6EGIDmfBMkgQ5pAfWwBfDAfGTp8xSrUpN2+pY1z2XXoNpA'>Try</a></div></pre>\n<p>Static members can also use the same <code>public</code>, <code>protected</code>, and <code>private</code> visibility modifiers:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyClass'>MyClass</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MyClass.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class MyClass'>MyClass</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) MyClass.x: number'>x</data-lsp>);</data-err></span>\n<span class=\"error\"><span>Property 'x' is private and only accessible within class 'MyClass'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'x' is private and only accessible within class 'MyClass'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUAMYA2AhooqALICeAwqeaAN56igAO0AlgG4kAukUIn4CuBUAA9QAXlAAGANx4AvoTgA7RHCKQAdETgBzABQ16ZRHskBKRUA'>Try</a></div></pre>\n<p>Static members are also inherited:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> <data-lsp lsp='(method) Base.getGreeting(): string'>getGreeting</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived.myGreeting: string'>myGreeting</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Derived'>Derived</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.getGreeting(): string'>getGreeting</data-lsp>();</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8BQ1oQC5iwS2GgHMEsBxAJwVLwDsiAKAShXQ2iqwFcLboAiABIIQIAPbQA7mIogAJvwDcbAL6o1oSDAAiCCngBuCOdAQAPLAlpyY8CEjQYAtgE9K1fPWgBeaLv1GcgB0JORUNPTMyipAA'>Try</a></div></pre>\n<h3 id=\"special-static-names\" style=\"position:relative;\"><a href=\"#special-static-names\" aria-label=\"special static names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Static Names</h3>\n<p>It’s generally not safe/possible to overwrite properties from the <code>Function</code> prototype.\nBecause classes are themselves functions that can be invoked with <code>new</code>, certain <code>static</code> names can’t be used.\nFunction properties like <code>name</code>, <code>length</code>, and <code>call</code> aren’t valid to define as <code>static</code> members:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class S'>S</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(property) S.name: string'>name</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"S!\"</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Static property 'name' conflicts with built-in property 'Function.name' of constructor function 'S'.</span><span class=\"code\">2699</span></span><span class=\"error-behind\">Static property 'name' conflicts with built-in property 'Function.name' of constructor function 'S'.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYCcWBQBjAGwENFFQBlUAb11FEQBdjGBLfUAO2IFtJQAvKABEFAITCA3LgC+QA'>Try</a></div></pre>\n<h3 id=\"why-no-static-classes\" style=\"position:relative;\"><a href=\"#why-no-static-classes\" aria-label=\"why no static classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why No Static Classes?</h3>\n<p>TypeScript (and JavaScript) don’t have a construct called <code>static class</code> the same way C# and Java do.</p>\n<p>Those constructs <em>only</em> exist because those languages force all data and functions to be inside a class; because that restriction doesn’t exist in TypeScript, there’s no need for them.\nA class with only a single instance is typically just represented as a normal <em>object</em> in JavaScript/TypeScript.</p>\n<p>For example, we don’t need a “static class” syntax in TypeScript because a regular object (or even top-level function) will do the job just as well:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Unnecessary \"static\" class</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyStaticClass'>MyStaticClass</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> <data-lsp lsp='(method) MyStaticClass.doSomething(): void'>doSomething</data-lsp>() {}</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Preferred (alternative 1)</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function doSomething(): void'>doSomething</data-lsp>() {}</span>\n\n<span style=\"color: #008000\">// Preferred (alternative 2)</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const MyHelperObject: {&amp;#13;    dosomething(): void;&amp;#13;}'>MyHelperObject</data-lsp> </span><span style=\"color: #000000\">= {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) dosomething(): void'>dosomething</data-lsp>() {},</span>\n<span style=\"color: #000000\">};</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEFUDtIUwYxgZ0QQwE4E9QCJEBcU8BLObUOAGxWQChLrFQBZDAZQOLgGErlQBvGqFD5CJUABMA9qykBbGHgAWRSAHMAFAEoBAXxr6aIUAAU0MAGYw05iaA0oKea5DEA3GKACMWmhYCukHDEUpCSMvKKKuraejRGYGaW1rb2js5orsQeoABMvnCh+MwYABIwFAAO1gDyAEYAVvB4oAC8AkLhiJHKqpo6-LoANAYA3EA'>Try</a></div></pre>\n<h2 id=\"generic-classes\" style=\"position:relative;\"><a href=\"#generic-classes\" aria-label=\"generic classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Classes</h2>\n<p>Classes, much like interfaces, can be generic.\nWhen a generic class is instantiated with <code>new</code>, its type parameters are inferred the same way as in a function call:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Box&amp;lt;T>'>Box</data-lsp>&lt;<data-lsp lsp='(type parameter) T in Box&amp;lt;T>'>T</data-lsp>> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box&amp;lt;T>.contents: T'>contents</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in Box&amp;lt;T>'>T</data-lsp>;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: T'>value</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in Box&amp;lt;T>'>T</data-lsp>) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box&amp;lt;T>.contents: T'>contents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: T'>value</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: Box&amp;lt;string>'>b</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Box&amp;lt;string>(value: string): Box&amp;lt;string>'>Box</data-lsp>(</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">);</span>\n<span class='query'>//    ^ = const b: Box<string></span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCD2APAPAFQHzQN4ChrWHgDsAXAU1IgC5pUBuPA4iEgJwFdgT5WAKANzAh2ZGqgCU2RvhIALAJYQAdIVIUSMALzRBwsg3wBfHMZyqW0AEbRtRMgHc4SXgCJZZECHgBCF+IYA9AH4+AB6APxAA'>Try</a></div></pre>\n<p>Classes can use generic constraints and defaults the same way as interfaces.</p>\n<h3 id=\"type-parameters-in-static-members\" style=\"position:relative;\"><a href=\"#type-parameters-in-static-members\" aria-label=\"type parameters in static members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Parameters in Static Members</h3>\n<p>This code isn’t legal, and it may not be obvious why:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Box&amp;lt;T>'>Box</data-lsp>&lt;<data-lsp lsp='(type parameter) T in Box&amp;lt;T>'>T</data-lsp>> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box&amp;lt;T>.defaultValue: any'>defaultValue</data-lsp></span><span style=\"color: #000000\"><data-err>: <data-lsp lsp='any'>T</data-lsp>;</data-err></span>\n<span class=\"error\"><span>Static members cannot reference class type parameters.</span><span class=\"code\">2302</span></span><span class=\"error-behind\">Static members cannot reference class type parameters.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMaBQBjAGwENFFQAhOADwB4AVAPlAG9dRREAXYrgS3ygAJpABmxAK6EuANWKEJkVPQDcuAL5A'>Try</a></div></pre>\n<p>Remember that types are always fully erased!\nAt runtime, there’s only <em>one</em> <code>Box.defaultValue</code> property slot.\nThis means that setting <code>Box&#x3C;string>.defaultValue</code> (if that were possible) would <em>also</em> change <code>Box&#x3C;number>.defaultValue</code> - not good.\nThe <code>static</code> members of a generic class can never refer to the class’s type parameters.</p>\n<h2 id=\"this-at-runtime-in-classes\" style=\"position:relative;\"><a href=\"#this-at-runtime-in-classes\" aria-label=\"this at runtime in classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> at Runtime in Classes</h2>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">Background Reading: <code>this</code> keyword (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>It’s important to remember that TypeScript doesn’t change the runtime behavior of JavaScript, and that JavaScript is somewhat famous for having some peculiar runtime behaviors.</p>\n<p>JavaScript’s handling of <code>this</code> is indeed unusual:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyClass'>MyClass</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MyClass.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"MyClass\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) MyClass.getName(): string'>getName</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) MyClass.name: string'>name</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor MyClass(): MyClass'>MyClass</data-lsp>();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    name: string;&amp;#13;    getName: () => string;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">= {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"obj\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(property) getName: () => string'>getName</data-lsp>: </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(method) MyClass.getName(): string'>getName</data-lsp></span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// Prints \"obj\", not \"MyClass\"</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    name: string;&amp;#13;    getName: () => string;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) getName: () => string'>getName</data-lsp>());</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECyCeBhcVoG8BQ1oDswFsBTaAXmgCIFlIJyBuLaAc0IBcA5AwgCgEp1G2AE5sArkJzRWACwCWEAHR4iDbAF8MG4AHscEVtGClchAO5wkKCHwY69B7QCMAVsczZlhAFwUnz8gA0jCwcXD7ACiGcREFqDBgA9AnQAApCsjisMOR+gbjaBpSWNOQYdhDaIIQKINpM3H6RbNE8vLx0QA'>Try</a></div></pre>\n<p>Long story short, by default, the value of <code>this</code> inside a function depends on <em>how the function was called</em>.\nIn this example, because the function was called through the <code>obj</code> reference, its value of <code>this</code> was <code>obj</code> rather than the class instance.</p>\n<p>This is rarely what you want to happen!\nTypeScript provides some ways to mitigate or prevent this kind of error.</p>\n<h3 id=\"arrow-functions\" style=\"position:relative;\"><a href=\"#arrow-functions\" aria-label=\"arrow functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrow Functions</h3>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Background Reading: Arrow functions (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>If you have a function that will often be called in a way that loses its <code>this</code> context, it can make sense to use an arrow function property instead of a method definition:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyClass'>MyClass</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MyClass.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"MyClass\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(property) MyClass.getName: () => string'>getName</data-lsp> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) MyClass.name: string'>name</data-lsp>;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor MyClass(): MyClass'>MyClass</data-lsp>();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const g: () => string'>g</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MyClass.getName: () => string'>getName</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// Prints \"MyClass\" instead of crashing</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(<data-lsp lsp='const g: () => string'>g</data-lsp>());</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECyCeBhcVoG8BQ1oDswFsBTaAXmgCIFlIJyBuLaAc0IBcA5A4sgCgEpSAPnSNsAJzYBXMTmisAFgEsIAOjxEG2AL4MtGYAHscEVtGClchAO5wkKCPwaHjppheAqWHLgwD0v6AAFMUUcVhhKOxpyaFCTQjAAE2gDADMzMUglHCZ9IwgDEEIVEAMmHnK+PjogA'>Try</a></div></pre>\n<p>This has some trade-offs:</p>\n<ul>\n<li>The <code>this</code> value is guaranteed to be correct at runtime, even for code not checked with TypeScript</li>\n<li>This will use more memory, because each class instance will have its own copy of each function defined this way</li>\n<li>You can’t use <code>super.getName</code> in a derived class, because there’s no entry in the prototype chain to fetch the base class method from</li>\n</ul>\n<h3 id=\"this-parameters\" style=\"position:relative;\"><a href=\"#this-parameters\" aria-label=\"this parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> parameters</h3>\n<p>In a method or function definition, an initial parameter named <code>this</code> has special meaning in TypeScript.\nThese parameters are erased during compilation:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// TypeScript input with &apos;this&apos; parameter</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(this: SomeType, x: number): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) this: any'>this</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type SomeType = any'>SomeType</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">/* ... */</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgCgB6YqAWkoGMBXYS8ks1SGKgJwEsxgpOcwdKAHdOwABZQA5BM4BnKVDBZ2WJMAjtCAMxo4qwTnBxRtOABSy5ALliIUaADRQAHrZw0EAI00BKKADehFBQxABUUAB00VBhxIQAvkA'>Try</a></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// JavaScript output</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">/* ... */</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>TypeScript checks that calling a function with a <code>this</code> parameter is done so with a correct context.\nInstead of using an arrow function, we can add a <code>this</code> parameter to method definitions to statically enforce that the method is called correctly:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class MyClass'>MyClass</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) MyClass.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"MyClass\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) MyClass.getName(this: MyClass): string'>getName</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) this: MyClass'>this</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='class MyClass'>MyClass</data-lsp>) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) MyClass.name: string'>name</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor MyClass(): MyClass'>MyClass</data-lsp>();</span>\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) MyClass.getName(this: MyClass): string'>getName</data-lsp>();</span>\n\n<span style=\"color: #008000\">// Error, would crash</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const g: (this: MyClass) => string'>g</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const c: MyClass'>c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(method) MyClass.getName(this: MyClass): string'>getName</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\"><data-err><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(<data-lsp lsp='const g: (this: MyClass) => string'>g</data-lsp>());</data-err></span>\n<span class=\"error\"><span>The 'this' context of type 'void' is not assignable to method's 'this' of type 'MyClass'.</span><span class=\"code\">2684</span></span><span class=\"error-behind\">The 'this' context of type 'void' is not assignable to method's 'this' of type 'MyClass'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcAWAUAMYA2AhooqALICeAwqeaAN56igB2JAtpKALygARDXplEggNytQAc0gAXAHLdIACnkALAJYoqdBogCUzaW2gKArtHahNOgHSceUtgF887gnHaJ5oAvwckADueqLkqoZSIKAA8gDShPZySiqRUngxAKKwCAA0oMFwFkQAJv7QZBqE3r6ygQTJCsrONT5wRJD2RHAyqn2GUUA'>Try</a></div></pre>\n<p>This method takes the opposite trade-offs of the arrow function approach:</p>\n<ul>\n<li>JavaScript callers might still use the class method incorrectly without realizing it</li>\n<li>Only one function per class definition gets allocated, rather than one per class instance</li>\n<li>Base method definitions can still be called via <code>super.</code></li>\n</ul>\n<h2 id=\"this-types\" style=\"position:relative;\"><a href=\"#this-types\" aria-label=\"this types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> Types</h2>\n<p>In classes, a special type called <code>this</code> refers <em>dynamically</em> to the type of the current class.\nLet’s see how this is useful:</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Box'>Box</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box.contents: string'>contents</data-lsp></span><span style=\"color: #000000\">: string = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Box.set(value: string): this'>set</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: string'>value</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span class='query'>//  ^ = (method) Box.set(value: string): this</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box.contents: string'>contents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: string'>value</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCD2APaBvAUNax4DsAuApvhAFzQR4BOAljgObQC80ARCwNwbkF4AUAbmBABXAmQo16ASlRoA9HMwA9APxdMeABbUIAOmz4ieGM0EiCnTJko9hlHNC07L0AL5pXQA'>Try</a></div></pre>\n<p>Here, TypeScript inferred the return type of <code>set</code> to be <code>this</code>, rather than <code>Box</code>.\nNow let’s make a subclass of <code>Box</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class ClearableBox'>ClearableBox</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Box'>Box</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) ClearableBox.clear(): void'>clear</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box.contents: string'>contents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: ClearableBox'>a</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor ClearableBox(): ClearableBox'>ClearableBox</data-lsp>();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: ClearableBox'>b</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: ClearableBox'>a</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Box.set(value: string): ClearableBox'>set</data-lsp>(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span>\n<span class='query'>//    ^ = const b: ClearableBox</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCD2APaBvAUNax4DsAuApvhAFzQR4BOAljgObQC80ARCwNwbkF4AUAbmBABXAmQo16ASlRdMeABbUIAOmz4ieGM0EiCnTJko9hlHNEXKD0AL5o7AegfQAtG+DC8bl2lCQYAMIgBGCUYABGwQjIBIiEOAAmMNGymKAhlLwy6IYWSqrq8VpMrBxcdna+uBTQYCU4BADu0EEZEVFIWZzqNeElYCoQPLwsCgQgIPAsUpxOuQB6APxAA'>Try</a></div></pre>\n<p>You can also use <code>this</code> in a parameter type annotation:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Box'>Box</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box.content: string'>content</data-lsp></span><span style=\"color: #000000\">: string = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Box.sameAs(other: this): boolean'>sameAs</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: this'>other</data-lsp></span><span style=\"color: #000000\">: this) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: this'>other</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Box.content: string'>content</data-lsp> === </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Box.content: string'>content</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCD2APaBvAUNax4DsAuApvgFzQR4BOAljgObQC80ARMwNwZlgC2BAghAAU8PAAsCFUmKoQAlKk6YKBPAFcKOaCPEUAdNnxE8jBk2kR9uQvg6YAvmjtA'>Try</a></div></pre>\n<p>This is different from writing <code>other: Box</code> — if you have a derived class, its <code>sameAs</code> method will now only accept other instances of that same derived class:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Box'>Box</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Box.content: string'>content</data-lsp></span><span style=\"color: #000000\">: string = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Box.sameAs(other: this): boolean'>sameAs</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: this'>other</data-lsp></span><span style=\"color: #000000\">: this) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) other: this'>other</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Box.content: string'>content</data-lsp> === </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Box.content: string'>content</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class DerivedBox'>DerivedBox</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Box'>Box</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) DerivedBox.otherContent: string'>otherContent</data-lsp></span><span style=\"color: #000000\">: string = </span><span style=\"color: #A31515\">\"?\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const base: Box'>base</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Box(): Box'>Box</data-lsp>();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const derived: DerivedBox'>derived</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor DerivedBox(): DerivedBox'>DerivedBox</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const derived: DerivedBox'>derived</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Box.sameAs(other: DerivedBox): boolean'>sameAs</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='const base: Box'>base</data-lsp></data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'Box' is not assignable to parameter of type 'DerivedBox'.\n  Property 'otherContent' is missing in type 'Box' but required in type 'DerivedBox'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'Box' is not assignable to parameter of type 'DerivedBox'.\n  Property 'otherContent' is missing in type 'Box' but required in type 'DerivedBox'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAMYA2AhooqAEJwAeoA3nqKAXAHYAuknqiH0ASzYBzUAF5QAIkkBuJqEQkAtpACCiABRwOACxipdAxAEoG85tEgcArtDahte6ADpWnbh3FiJhxK-ZcnHLMAL54YYSk5KAAIjACAG6QACbUdJA0gckUaWbMjjAAwgEevPxCohKSAPyy4XiE7HygAEZkkOKgbJAA7lS0GsZybs3J8UnJnd19cYITaYNyY3Mpzooq6hptiJBDQA'>Try</a></div></pre>\n<h2 id=\"parameter-properties\" style=\"position:relative;\"><a href=\"#parameter-properties\" aria-label=\"parameter properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Properties</h2>\n<p>TypeScript offers special syntax for turning a constructor parameter into a class property with the same name and value.\nThese are called <em>parameter properties</em> and are created by prefixing a constructor argument with one of the visibility modifiers <code>public</code>, <code>private</code>, <code>protected</code>, or <code>readonly</code>.\nThe resulting field gets those modifier(s):</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class A'>A</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) A.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) A.y: number'>y</data-lsp></span><span style=\"color: #000000\">: number,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) A.z: number'>z</data-lsp></span><span style=\"color: #000000\">: number</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// No body necessary</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: A'>a</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor A(x: number, y: number, z: number): A'>A</data-lsp>(</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: A'>a</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) A.x: number'>x</data-lsp>);</span>\n<span class='query'>//            ^ = (property) A.x: number</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: A'>a</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='(property) A.z: number'>z</data-lsp>);</data-err></span>\n<span class=\"error\"><span>Property 'z' is private and only accessible within class 'A'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'z' is private and only accessible within class 'A'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUAMYA2AhooqAIKgDeeooBcAdogC7QCuBbCAFPQagADpwBGRAJYFQ0SCQAmLIgE9QAD1TNOAWzEwANIIbD4bSD0gLQKrbv3QjQkdEkA3EudAAvO3piCAJS0xqAgoABycKBicApqzBaQ5CTQKoIAvnhZTKxsoCSgALygiQDuVHw4Bug1GIEA3IQsiHBEkAB0RHAA5nwkHeqNeOHOYwwAegD8zaxtnd19A96NQA'>Try</a></div></pre>\n<h2 id=\"class-expressions\" style=\"position:relative;\"><a href=\"#class-expressions\" aria-label=\"class expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Expressions</h2>\n<blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class\">Background reading: Class expressions (MDN)</a></p>\n</blockquote>\n</blockquote>\n<p>Class expressions are very similar to class declarations.\nThe only real difference is that class expressions don’t need a name, though we can refer to them via whatever identifier they ended up bound to:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const someClass: typeof someClass'>someClass</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\">&lt;<data-lsp lsp='(type parameter) T in someClass&amp;lt;T>'>T</data-lsp>> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) someClass&amp;lt;T>.content: T'>content</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in someClass&amp;lt;T>'>T</data-lsp>;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: T'>value</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in someClass&amp;lt;T>'>T</data-lsp>) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) someClass&amp;lt;T>.content: T'>content</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) value: T'>value</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const m: someClass&amp;lt;string>'>m</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='const someClass: new &amp;lt;string>(value: string) => someClass&amp;lt;string>'>someClass</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, world\"</span><span style=\"color: #000000\">);</span>\n<span class='query'>//    ^ = const m: someClass<string></span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBBIFsCmBhANgQwhGBeGwm2APACoB8MA3gFAwHhRJhQBcMpA3HQ5FAE4BXYFBD8AFADcMaQUnakAlNR70oACwCWEAHSgWzWPmmyk3egF8aF7jX3QYCPDDBIA7nESoiEcQCIACSQ0NBAAGhg3MTQAEz9FbgB6RPp6AD0AfiA'>Try</a></div></pre>\n<h2 id=\"abstract-classes-and-members\" style=\"position:relative;\"><a href=\"#abstract-classes-and-members\" aria-label=\"abstract classes and members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>abstract</code> Classes and Members</h2>\n<p>Classes, methods, and fields in TypeScript may be <em>abstract</em>.</p>\n<p>An <em>abstract method</em> or <em>abstract field</em> is one that hasn’t had an implementation provided.\nThese members must exist inside an <em>abstract class</em>, which cannot be directly instantiated.</p>\n<p>The role of abstract classes is to serve as a base class for subclasses which do implement all the abstract members.\nWhen a class doesn’t have any abstract members, it is said to be <em>concrete</em>.</p>\n<p>Let’s look at an example</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">abstract</span><span style=\"color: #000000\"> <data-lsp lsp='(method) Base.getName(): string'>getName</data-lsp>(): string;</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Base.printName(): void'>printName</data-lsp>() {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.getName(): string'>getName</data-lsp>());</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const b: any'>b</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Base(): Base'>Base</data-lsp>();</span>\n<span class=\"error\"><span>Cannot create an instance of an abstract class.</span><span class=\"code\">2511</span></span><span class=\"error-behind\">Cannot create an instance of an abstract class.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYCMWBQBDAI0QBdp8BjE0CgG30UVACEHJQBvXUUI08qqADmkEgDl8AW0gAKAJSp+ASwB2QgNy5uoAA7RV4qbLmdtPCnBWI4tSADpacITIBEACUi1HAGlAvQANSgJAAWSoh2IobS8nKaPAC+uEm4FlbUhKAAvKAqkADuLGzy6kA'>Try</a></div></pre>\n<p>We can’t instantiate <code>Base</code> with <code>new</code> because it’s abstract.\nInstead, we need to make a derived class and implement the abstract members:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Derived.getName(): string'>getName</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Derived(): Derived'>Derived</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const d: Derived'>d</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.printName(): void'>printName</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/IYIwzgLgTsDGEAJYBthjAgQmgpgg3gFAIKiQzwIDmOEAcsALY4AUAlAFwLkCWAdlQDcxBAAco-ek1ZsCAX0IKA9EoQBaDbACuEDWsIo0GACI4JANxwATBDgAeEHHysZsYPERI0pzdgREkULRaUHwIAEQA7gD2UMhW4cIkCgoG0XyQCDYAvAh8OJEIphbW7MJWAHTikgy+bIJAA'>Try</a></div></pre>\n<p>Notice that if we forget to implement the base class’s abstract members, we’ll get an error:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"><data-err> <data-lsp lsp='class Derived'>Derived</data-lsp> </data-err></span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span class=\"error\"><span>Non-abstract class 'Derived' does not implement inherited abstract member 'getName' from class 'Base'.</span><span class=\"code\">2515</span></span><span class=\"error-behind\">Non-abstract class 'Derived' does not implement inherited abstract member 'getName' from class 'Base'.</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// forgot to do anything</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYCMGBQBDAI0QBdp8BjE0CgG30UVACEHJQBvXUUI08qqADmkEgDl8AW0gAKAJSp+ASwB2QgNzdQAB2irxU2XM4BfXGZCgAtDYoBXEjau46DJgBEYSgG6QAJqCQAB4kkCp+TKyI7Fw8lgBmCEJw1CRwoH7p+CoAniQAFqpC5kA'>Try</a></div></pre>\n<h3 id=\"abstract-construct-signatures\" style=\"position:relative;\"><a href=\"#abstract-construct-signatures\" aria-label=\"abstract construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract Construct Signatures</h3>\n<p>Sometimes you want to accept some class constructor function that produces an instance of a class which derives from some abstract class.</p>\n<p>For example, you might want to write this code:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greet(ctor: typeof Base): void'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ctor: typeof Base'>ctor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const instance: any'>instance</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='(parameter) ctor: new () => Base'>ctor</data-lsp>();</span>\n<span class=\"error\"><span>Cannot create an instance of an abstract class.</span><span class=\"code\">2511</span></span><span class=\"error-behind\">Cannot create an instance of an abstract class.</span><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const instance: any'>instance</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='any'>printName</data-lsp>();</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYCMWBQBDAI0QBdp8BjE0CgG30UVACEHJQBvXUUI08qqADmkEgDl8AW0gAKAJSp+ASwB2QgNzdQAB2irxU2XM4BfXGboMmAERhKAbpAAmoSAA8SkFU6atE7Lh4RA2l5Ti0eaFEAV2gVUAAiBM0eMzMQUABabIpokmzM3AAzaJUqJTh4oSjRGSoEVBIAT21IOCKWNmNAmkrSUFVSfDL2AF5QFUgAdxoSBHkUgZUhkYA6XX0JULlNEyA'>Try</a></div></pre>\n<p>TypeScript is correctly telling you that you’re trying to instantiate an abstract class.\nAfter all, given the definition of <code>greet</code>, it’s perfectly legal to write this code, which would end up constructing an abstract class:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Bad!</span>\n<span style=\"color: #000000\"><data-lsp lsp='const greet: any'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const Base: any'>Base</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3gcziDAXPFCgJ4A08AQlGiESaQNwBQA9G-ALQ9gCuGHl3acawAIQtcIfAAoadAJRMgA'>Try</a></div></pre>\n<p>Instead, you want to write a function that accepts something with a construct signature:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greet(ctor: new () => Base): void'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ctor: new () => Base'>ctor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const instance: Base'>instance</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='(parameter) ctor: new () => Base'>ctor</data-lsp>();</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const instance: Base'>instance</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Base.printName(): void'>printName</data-lsp>();</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='function greet(ctor: new () => Base): void'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Derived'>Derived</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='function greet(ctor: new () => Base): void'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='class Base'>Base</data-lsp></data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'typeof Base' is not assignable to parameter of type 'new () =&gt; Base'.\n  Cannot assign an abstract constructor type to a non-abstract constructor type.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'typeof Base' is not assignable to parameter of type 'new () =&gt; Base'.\n  Cannot assign an abstract constructor type to a non-abstract constructor type.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAIYBGiALtAQMamiUA2BiioAQo5KAN56ijFkVqoAOaRSAOQIBbSAAoAlKgEBLAHbCA3D1AAHaGonS58rgF885+o2YARGMoBukACahIAD1KRVz5m0Qc3LyihjIKXNq80GIArtCqoABEiVq85uYgoAC0OZQxpDlZeABmMarUynAJwtFistQIqKqQAO6g4QC8AHys7CZBtFVkoGpkBOUcHaDNbQ3QCqkjqmMTAHR6BpJh8lrmNZB1dvpOzjt4+3X+kDtAA'>Try</a></div></pre>\n<p>Now TypeScript correctly tells you about which class constructor functions can be invoked - <code>Derived</code> can because it’s concrete, but <code>Base</code> cannot.</p>\n<h2 id=\"relationships-between-classes\" style=\"position:relative;\"><a href=\"#relationships-between-classes\" aria-label=\"relationships between classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relationships Between Classes</h2>\n<p>In most cases, classes in TypeScript are compared structurally, the same as other types.</p>\n<p>For example, these two classes can be used in place of each other because they’re identical:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point1'>Point1</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point1.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point1.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Point2'>Point2</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point2.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point2.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const p: Point1'>p</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='class Point1'>Point1</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Point2(): Point2'>Point2</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAKD2BLAdgFwIzQN4ChrQA9oBeaABgG49oBPE8qgXxx1EhgRVQCZtqjSlanUFMWAenHQA8gGlW8ZBFTQADgC44SNJlLIApgHctXbgAoAlBSA'>Try</a></div></pre>\n<p>Similarly, subtype relationships between classes exist even if there’s no explicit inheritance:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Person'>Person</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.name: string'>name</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.age: number'>age</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Employee'>Employee</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Employee.name: string'>name</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Employee.age: number'>age</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Employee.salary: number'>salary</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const p: Person'>p</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='class Person'>Person</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Employee(): Employee'>Employee</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFCLaaSSgAKeskA9gHagDeBoo9mAtnmjAvQHMA3K1CYBPdgFdOAI2oiAvgSIkyoAKKcADtloBPPHmaiO3XnHiCRbcZPoz5sG6Eg5MsfWgdyFBZQQgoADyANJEDDCg2mhUNAygALzseADumjp6hngAFACUQkA'>Try</a></div></pre>\n<p>This sounds straightforward, but there are a few cases that seem stranger than others.</p>\n<p>Empty classes have no members.\nIn a structural type system, a type with no members is generally a supertype of anything else.\nSo if you write an empty class (don’t!), anything can be used in place of it:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Empty'>Empty</data-lsp> {}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(x: Empty): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: Empty'>x</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='class Empty'>Empty</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// can&apos;t do anything with &apos;x&apos;, so I won&apos;t</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// All OK!</span>\n<span style=\"color: #000000\"><data-lsp lsp='function fn(x: Empty): void'>fn</data-lsp>(<data-lsp lsp='var window: Window &amp;amp; typeof globalThis'>window</data-lsp>);</span>\n<span style=\"color: #000000\"><data-lsp lsp='function fn(x: Empty): void'>fn</data-lsp>({});</span>\n<span style=\"color: #000000\"><data-lsp lsp='function fn(x: Empty): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: Empty): void'>fn</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECiC2AHALgT2gbwL4CgcDMBXAO2GQEsB7Y6fYgCgA8AuOJNASkx2mgHo+0YGGIByZNAAmlaCNTIAFuWIBzaAHdyi6KMaiANNAgyAkhuricuHAOgBBECGgB5ANIBCAg03Fp6jgDcXvTYgcF0gUA'>Try</a></div></pre>","headings":[{"value":"Class Members","depth":2},{"value":"Fields","depth":3},{"value":"--strictPropertyInitialization","depth":4},{"value":"readonly","depth":3},{"value":"Constructors","depth":3},{"value":"Super Calls","depth":4},{"value":"Methods","depth":3},{"value":"Getters / Setters","depth":3},{"value":"Index Signatures","depth":3},{"value":"Class Heritage","depth":2},{"value":"implements Clauses","depth":3},{"value":"Cautions","depth":4},{"value":"extends Clauses","depth":3},{"value":"Overriding Methods","depth":4},{"value":"Initialization Order","depth":4},{"value":"Inheriting Built-in Types","depth":4},{"value":"Member Visibility","depth":2},{"value":"public","depth":3},{"value":"protected","depth":3},{"value":"Exposure of protected members","depth":4},{"value":"Cross-hierarchy protected access","depth":4},{"value":"private","depth":3},{"value":"Cross-instance private access","depth":4},{"value":"Caveats","depth":4},{"value":"Static Members","depth":2},{"value":"Special Static Names","depth":3},{"value":"Why No Static Classes?","depth":3},{"value":"Generic Classes","depth":2},{"value":"Type Parameters in Static Members","depth":3},{"value":"this at Runtime in Classes","depth":2},{"value":"Arrow Functions","depth":3},{"value":"this parameters","depth":3},{"value":"this Types","depth":2},{"value":"Parameter Properties","depth":2},{"value":"Class Expressions","depth":2},{"value":"abstract Classes and Members","depth":2},{"value":"Abstract Construct Signatures","depth":3},{"value":"Relationships Between Classes","depth":2}],"frontmatter":{"permalink":"/docs/handbook/2/classes.html","title":"Classes","disable_toc":null,"handbook":null,"oneline":"How classes work in TypeScript","beta":true}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"More on Functions","oneline":"Learn about how Functions work in TypeScript.","permalink":"/docs/handbook/2/functions.html"}}},"next":null},"pageContext":{"id":"8classes","slug":"/docs/handbook/2/classes.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Classes.md","previousID":"6b628cea-3a43-5445-9a5b-fcfe3df5c71b","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}