{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/types-from-types.html","result":{"data":{"markdownRemark":{"id":"293b74a3-2913-5f84-be4b-8a1269e0c69e","excerpt":"TypeScript’s type system is very powerful because it allows expressing types in terms of other types. The simplest form of this idea is generics, we actually…","html":"<p>TypeScript’s type system is very powerful because it allows expressing types <em>in terms of other types</em>.</p>\n<p>The simplest form of this idea is generics, we actually have a wide variety of <em>type operators</em> available to us.\nIt’s also possible to express types in terms of <em>values</em> that we already have.</p>\n<p>By combining various type operators, we can express complex operations and values in a succinct, maintainable way.\nIn this section we’ll cover ways to express a type in terms of an existing type or value.</p>\n<p>-</p>","headings":[],"frontmatter":{"permalink":"/docs/handbook/2/types-from-types.html","title":"Creating Types from Types","disable_toc":null,"handbook":null,"oneline":"Step one in learning TypeScript: The basics types.","beta":true}},"prev":null,"next":null},"pageContext":{"id":"8creating-types-from-types","slug":"/docs/handbook/2/types-from-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md","lang":"en","modifiedTime":"2020-11-23T10:39:15.615Z"}},"staticQueryHashes":[]}