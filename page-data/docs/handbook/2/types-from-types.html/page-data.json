{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/types-from-types.html","result":{"data":{"markdownRemark":{"id":"293b74a3-2913-5f84-be4b-8a1269e0c69e","excerpt":"TypeScript’s type system is very powerful because it allows expressing types in terms of other types. The simplest form of this idea is generics, we actually…","html":"<p>TypeScript’s type system is very powerful because it allows expressing types <em>in terms of other types</em>.</p>\n<p>The simplest form of this idea is generics, we actually have a wide variety of <em>type operators</em> available to use.\nIt’s also possible to express types in terms of <em>values</em> that we already have.</p>\n<p>By combining various type operators, we can express complex operations and values in a succinct, maintainable way.\nIn this section we’ll cover ways to express a new type in terms of an existing type or value.</p>\n<ul>\n<li><a href=\"/docs/handbook/2/generics.html\">Generics</a> - Types which take parameters</li>\n<li><a href=\"/docs/handbook/2/keyof-types.html\">Keyof Type Operator</a> - Using the <code>keyof</code> operator to create new types</li>\n<li><a href=\"/docs/handbook/2/typeof-types.html\">Typeof Type Operator</a> - Using the <code>typeof</code> operator to create new types</li>\n<li><a href=\"/docs/handbook/2/indexed-access-types.html\">Indexed Access Types</a> - Using <code>Type['a']</code> syntax to access a subset of a type</li>\n<li><a href=\"/docs/handbook/2/conditional-types.html\">Conditional Types</a> - Types which act like if statements in the type system</li>\n<li><a href=\"/docs/handbook/2/mapped-types.html\">Mapped Types</a> - Creating types by mapping each property in an existing type</li>\n<li><a href=\"/docs/handbook/2/template-literal-types.html\">Template Literal Types</a> - Mapped types which change properties via template literal strings</li>\n</ul>","headings":[],"frontmatter":{"permalink":"/docs/handbook/2/types-from-types.html","title":"Creating Types from Types","disable_toc":null,"handbook":null,"oneline":"An overview of the ways in which you can create more types from existing types.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"Generics","oneline":"Types which take parameters","permalink":"/docs/handbook/2/generics.html"}}}},"pageContext":{"id":"1-creating-types-from-types","slug":"/docs/handbook/2/types-from-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md","nextID":"1bbcd50e-0cbd-587c-a328-5ce339f02e41","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}