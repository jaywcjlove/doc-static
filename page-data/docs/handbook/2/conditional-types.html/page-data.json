{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/conditional-types.html","result":{"data":{"markdownRemark":{"id":"e45c0c12-e056-5fe6-8ca6-a2ad64b906a3","excerpt":"At the heart of most useful programs, we have to make decisions based on input.\nJavaScript programs are no different, but given the fact that values can be…","html":"<p>At the heart of most useful programs, we have to make decisions based on input.\nJavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs.\n<em>Conditional types</em> help describe the relation between the types of inputs and outputs.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Animal.live(): void' >live</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.woof(): void' >woof</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example1 = number' style='border-bottom: solid 2px lightgrey;'>Example1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example1 = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example2 = string' style='border-bottom: solid 2px lightgrey;'>Example2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example2 = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlkdgA3CACgEoAuZcge2ABMBuQgX0NElkQoAIkwDmyCAA9IIVgGc0GbHiIkA7kyYxaDZm049CYAJ4AHFAFFJcTKZwQAjMgC8yEeKkz5irLmQB+ZBAAV0wAI2hkBjkwKFBRTgB6RJJkAD1-QiMzS2tbewAmF2QAJQhRK1MJaQhZBXRfPECQ8Mjo2PiklJIMoA'>Try</a></div></pre>\n<p>Conditional types take a form that looks a little like conditional expressions (<code>condition ? trueExpression : falseExpression</code>) in JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type SomeType = any' >SomeType</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='type OtherType = any' >OtherType</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\"><data-lsp lsp='type TrueType = any' >TrueType</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='type FalseType = any' >FalseType</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgChRIoB5YACwgCdVTNcDi0pkaBXFVxvIk6ADEsAGwDO3Btj4tSMYBwBmiqOkJQoAek1QAtPoDGHYPt3rYiSdAgAPYBBwATMeSq160APxtOVqAC4oYXErfCA'>Try</a></div></pre>\n<p>When the type on the left of the <code>extends</code> is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).</p>\n<p>From the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not <code>Dog extends Animal</code> and pick <code>number</code> or <code>string</code>!\nBut the power of conditional types comes from using them with generics.</p>\n<p>For example, let’s take the following <code>createLabel</code> function:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) IdLabel.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* some fields */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NameLabel.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* other fields */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(name: string): NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(nameOrId: string | number): IdLabel | NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbJIw6IBGGA8QyBFAg4SA0CAApKGnomaABKGgwQ-Ck3Dy8fPwCgiETQ3X4DI1M45FV1XAJk909vX39A4PL8XL0AeSgMAuMQMwAfWkZmYoTG5D7S7MbK1JqM+onNZv42ju5C7tH+6KghrBGxvUTiMmRrKB4Ad2QAIndgBgAHfAh+cAh0K+cgA'>Try</a></div></pre>\n<p>These overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things:</p>\n<ol>\n<li>If a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome.</li>\n<li>We have to create three overloads: one for each case when we’re <em>sure</em> of the type (one for <code>string</code> and one for <code>number</code>), and one for the most general case (taking a <code>string | number</code>). For every new type <code>createLabel</code> can handle, the number of overloads grows exponentially.</li>\n</ol>\n<p>Instead, we can encode that logic in a conditional type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbNatkAWk8I6YT+5JgAJ4ADip6APJQGAA8ACrIEAAekCAitIzMyAA+3EamAHzIALzI8UkpafRM0GTIAPxoWLgEtTSq6s34EkA'>Try</a></div></pre>\n<p>We can then use that conditional type to simplify our overloads down to a single function with no overloads.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >createLabel</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) idOrName: T extends string | number' >idOrName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let a: NameLabel' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"typescript\">(idOrName: \"typescript\"): NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let a: NameLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let b: IdLabel' style='border-bottom: solid 2px lightgrey;'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;2.8>(idOrName: 2.8): IdLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2.8</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let b: IdLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let c: IdLabel | NameLabel' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"hello\" | 42>(idOrName: \"hello\" | 42): IdLabel | NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>let c: NameLabel | IdLabel</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbLABPAA4q9AeSgYAPAAqyBAAHpAgIrSMzMgAPtxGpgB8yAC8yMFhEVH0TNBkyAD8aFi4BIU0qurl+FKsrMgAtC0IdGAtTSQwdCAIYMA8IMgIUBBwkBoEQSHhEJGiebEJhsYgJskAFJS+1fqZAJRVPn7oQanayNZQPADuyABEvcAM7vgQ-OAQ6A-OJCTvMDIODpEZjCYQKb4TYPNyeLijYDuMAPA71RrIAB6RX+gOQOFBo3Gk1qmwATAA6AAcaJIDXI2NxECBCEJ4JJmk2AFkJlYKVA4JE+JsDsVHjZ8PgeA9kDQACxk2n0rFFIA'>Try</a></div></pre>\n<h3 id=\"conditional-type-constraints\" style=\"position:relative;\"><a href=\"#conditional-type-constraints\" aria-label=\"conditional type constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Type Constraints</h3>\n<p>Often, the checks in a conditional type will provide us with some new information.\nJust like with narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against.</p>\n<p>For example, let’s take the following:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Type '\"message\"' cannot be used to index type 'T'.</span><span class=\"code\">2536</span></span><span class=\"error-behind\">Type '\"message\"' cannot be used to index type 'T'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMA2AUAC4CeADpKALKSKICGA5pAPIBmAPACoB8oAvKBwDaAIgC21Oo2EBdANxA'>Try</a></div></pre>\n<p>In this example, TypeScript errors because <code>T</code> isn’t known to have a property called <code>message</code>.\nWe could constrain <code>T</code>, and TypeScript would no longer complain:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> }&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCpQgA9gIA7AE3igG8oBbBZNALigFdSBrUgewHdSUAL4A+KAF4ouANoAiBolQRZAXQDcAKA0BLUiQBOmJAGNoAUTpJtAGxoao9Rktbxg+3Sk1CtoSFAtW1nCKaADCPHpkwFSSwUwYOAE2IpoA9KkOUAB6APxAA'>Try</a></div></pre>\n<p>However, what if we wanted <code>MessageOf</code> to take any type, and default to something like <code>never</code> if a <code>message</code> property isn’t available?\nWe can do this by moving the constraint out and introducing a conditional type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): void' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DogMessageContents = never' style='border-bottom: solid 2px lightgrey;'>DogMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>type DogMessageContents = never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCoD4oBeKXKCAD2AgDsATeKAbygFsFk0AuKAVxoDWNAPYB3GlAC+UAPykA2gCJ2iVBEUBdKDxoQAbhABOAbgBQpgJY1qhzEgDG0AKKskFgDbNTUNhzU94YEMrFDNJcysbO0coABFhFC8fACMkQwEACgBKHj1hCzow81BIKBc3dzhVNABhYWtaYEYSKs4MHHKPfDMAeh6fKAA9GWLwaHiUVrU6hutm2D80LGwJ7tM+geGgA'>Try</a></div></pre>\n<p>Within the true branch, TypeScript knows that <code>T</code> <em>will</em> have a <code>message</code> property.</p>\n<p>As another example, we could also write a type called <code>Flatten</code> that flattens array types to their element types, but leaves them alone otherwise:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Extracts out the element type.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Leaves the type alone.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QKogDaAulAPyEOoCuAtgEYQATiwBchANwAoSQHoZUAKJlBCAMbAaAey7AowABbQIcCDzS7QkAHSTL0AMrBB+WImRp0VJwEtUAc2ZsKTkoUIA9VmkQgBkIBAA3CBoDaDtaOE1UCBs0gDleF3gkcnRufiEg2Xlw1iA'>Try</a></div></pre>\n<p>When <code>Flatten</code> is given an array type, it uses an indexed access with <code>number</code> to fetch out <code>string[]</code>’s element type.\nOtherwise, it just returns the type it was given.</p>\n<h3 id=\"inferring-within-conditional-types\" style=\"position:relative;\"><a href=\"#inferring-within-conditional-types\" aria-label=\"inferring within conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inferring Within Conditional Types</h3>\n<p>We just found ourselves using conditional types to apply constraints and then extract out types.\nThis ends up being such a common operation that conditional types make it easier.</p>\n<p>Conditional types provide us with a way to infer from types we compare against in the true branch using the <code>infer</code> keyword.\nFor example, we could have inferred the element type in <code>Flatten</code> instead of fetching it out “manually” with an indexed access type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;Type> = Type extends (infer Item)[] ? Item : Type' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\">&gt; ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFXBAfFAXim0iggA8VUATAZygEEAnJhEdAS1QDMImoAkigC2+APyCRUAFzEcAbiA'>Try</a></div></pre>\n<p>Here, we used the <code>infer</code> keyword to declaratively introduce a new generic type variable named <code>Item</code> instead of specifying how to retrieve the element type of <code>T</code> within the true branch.\nThis frees us from having to think about how to dig through and probing apart the structure of the types we’re interested in.</p>\n<p>We can write some useful helper type aliases using the <code>infer</code> keyword.\nFor example, for simple cases, we can extract the return type out from function types:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: never[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Bools = boolean[]' style='border-bottom: solid 2px lightgrey;'>Bools</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: boolean' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: boolean' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Bools = boolean[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwCV4FcBOA7AKuCAebkAfFALxQHQQAewE6AJgM5QAUAdBwIaoDmjAXFHQQAbhFQBtALoBKUsQCW6AGbioSYGnQAoKFAD86lBl1RBwsagDc27aEhQAcsgC2pWPA1aKuFnJLE6K4ARuKENgD0EXpQAHr6tvbQAMrAqO5wiMZYOL5UgoxpSjz+xIWoxeHaUTHxiThQAEIA9s0ANsxkmV4YPiycgsGtbRCc6AA0UMGDw6PopVOzY9JVNXrxQA'>Try</a></div></pre>\n<p>When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the <em>last</em> signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload resolution based on a list of argument types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: number): string (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string | number): string | number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = string | number' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwGcMYtUBzAeRgDlkBbACgA8AuQ40sgSjdXoCMQMANwAoUJFgIU6bHnYlyVWo1bw+dQTB4LOYidDhI0mXPiKLKNeszYXO8AD7qBQnffJOXmoWNEYATwAHBAAVAEZ4AF54ACUQDGQYVFDgkAAeQJCcRF0lazoAPjEAehL4CoA9AH4gA'>Try</a></div></pre>\n<h2 id=\"distributive-conditional-types\" style=\"position:relative;\"><a href=\"#distributive-conditional-types\" aria-label=\"distributive conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Distributive Conditional Types</h2>\n<p>When conditional types act on a generic type, they become <em>distributive</em> when given a union type.\nFor example, take the following:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcQA'>Try</a></div></pre>\n<p>If we plug a union type into <code>ToArray</code>, then the conditional type will be applied to each member of that union.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = string[] | number[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = string[] | number[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKEmhIUAMrAkyJAHkkAOQCuAWxWFYiFOgx0lASyoBzKAB9BugEZjcUgPRuoXgHqsgA'>Try</a></div></pre>\n<p>What happens here is that <code>StrArrOrNumArr </code> distributes on:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmUAHyjdcAIwjwA3EA'>Try</a></div></pre>\n<p>and maps over each member type of the union, to what is effectively:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKFCQoAZWBJkSAPJIAcgFcAtssKSoUAPRGoAWgsBjTcAtmDsRCnQY6igJZUA5vgA+j5RcqHQAjMVxxIA'>Try</a></div></pre>\n<p>which leaves us with:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">[];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmA2gF0oAHyjdcAIwjwhAbiA'>Try</a></div></pre>\n<p>Typically, distributivity is the desired behavior.\nTo avoid that behavior, you can surround each side of the <code>extends</code> keyword with square brackets.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// &apos;StrArrOrNumArr&apos; is no longer a union.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = (string | number)[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = (string | number)[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgHJwHYBECWAzsADwzgQB8UAvFANrmQC6UEAHsBNgCaEOpsIVgH5YFeqwBcUbBABuEJAG4AUKoD0GqAHIAysCTIkAeSQYArgFtjOqEVlwoAGxwBzJVFRQL2fDgA6VVBIKAMjFDNLGxRaWEQUdCw8IlJiJHxsNygAH1lrACMlSjUtKHKAPREgA'>Try</a></div></pre>","headings":[{"value":"Conditional Type Constraints","depth":3},{"value":"Inferring Within Conditional Types","depth":3},{"value":"Distributive Conditional Types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/2/conditional-types.html","title":"Conditional Types","disable_toc":null,"handbook":null,"oneline":"Create types which act like if statements in the type system.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Indexed Access Types","oneline":"Using Type['a'] syntax to access a subset of a type.","permalink":"/docs/handbook/2/indexed-access-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Mapped Types","oneline":"Generating types by re-using an existing type.","permalink":"/docs/handbook/2/mapped-types.html"}}}},"pageContext":{"id":"1-conditional-types","slug":"/docs/handbook/2/conditional-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md","previousID":"d23658bc-b275-552b-9d19-538c0d5fa9a2","nextID":"bf6cd4f5-7e48-53ba-9fd8-f45a2baba506","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}