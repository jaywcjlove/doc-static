{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/conditional-types.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/pt/docs/handbook/tsconfig-json.html"},{"path":"/pt/docs/handbook/Decorators.html"},{"path":"/pt/docs/handbook/module-resolution.html"},{"path":"/pt/docs/handbook/namespaces.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/2/conditional-types.html"},{"path":"/docs/handbook/2/indexed-access-types.html"},{"path":"/docs/handbook/2/typeof-types.html"},{"path":"/docs/handbook/2/types-from-types.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/pt/docs/handbook/symbols.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/zh/tsconfig"},{"path":"/play"},{"path":"/fa/play"},{"path":"/id/play"},{"path":"/ja/play"},{"path":"/zh/play"},{"path":"/es/play"},{"path":"/ko/play"},{"path":"/pt/play"},{"path":"/vo/play"},{"path":"/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/play/3-7/fixits/const-to-let.ts.html"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/play/javascript/working-with-classes/this.ts.html"},{"path":"/play/playground/config/javascript-playgrounds.js.html"},{"path":"/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/play/playground/language/fixits.ts.html"},{"path":"/play/typescript/language/soundness.ts.html"},{"path":"/play/typescript/language/structural-typing.ts.html"},{"path":"/play/typescript/language/type-guards.ts.html"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/play/playground/tooling/mobile-support.ts.html"},{"path":"/play/playground/tooling/sharable-urls.ts.html"},{"path":"/play/playground/tooling/typescript-versions.ts.html"},{"path":"/play/typescript/language-extensions/enums.ts.html"},{"path":"/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/play/typescript/primitives/any.ts.html"},{"path":"/play/typescript/primitives/literals.ts.html"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/play/typescript/type-primitives/tuples.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/es/play/typescript/language/soundness.ts.html"},{"path":"/es/play/typescript/language/structural-typing.ts.html"},{"path":"/es/play/typescript/language/type-guards.ts.html"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/es/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/es/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/es/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/es/play/typescript/primitives/any.ts.html"},{"path":"/es/play/typescript/primitives/literals.ts.html"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/es/play/typescript/type-primitives/tuples.ts.html"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/id/play/3-7/fixits/const-to-let.ts.html"},{"path":"/id/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/recursive-type-reference.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/id/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/id/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/id/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/id/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/id/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/id/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/id/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/id/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/id/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/id/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/id/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/id/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ja/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/ja/play/typescript/language-extensions/enums.ts.html"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ja/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/ja/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/ja/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/ja/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/ja/play/typescript/primitives/any.ts.html"},{"path":"/ja/play/typescript/primitives/literals.ts.html"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/tuples.ts.html"},{"path":"/ko/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ko/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ko/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ko/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/ko/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/ko/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/ko/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/ko/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/ko/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/ko/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/ko/play/typescript/language-extensions/enums.ts.html"},{"path":"/ko/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ko/play/typescript/primitives/any.ts.html"},{"path":"/ko/play/typescript/primitives/literals.ts.html"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/pt/play/3-7/fixits/const-to-let.ts.html"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/pt/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/pt/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/pt/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/pt/play/javascript/working-with-classes/this.ts.html"},{"path":"/pt/play/playground/config/javascript-playgrounds.js.html"},{"path":"/pt/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/pt/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/pt/play/playground/language/fixits.ts.html"},{"path":"/pt/play/playground/tooling/mobile-support.ts.html"},{"path":"/pt/play/playground/tooling/sharable-urls.ts.html"},{"path":"/pt/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/enums.ts.html"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/pt/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/pt/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/pt/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/pt/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/pt/play/typescript/primitives/any.ts.html"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/language/structural-typing.ts.html"},{"path":"/pt/play/typescript/language/type-guards.ts.html"},{"path":"/pt/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/pt/play/typescript/primitives/literals.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/zh/play/javascript/working-with-classes/this.ts.html"},{"path":"/zh/play/playground/config/javascript-playgrounds.js.html"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/zh/play/playground/language/fixits.ts.html"},{"path":"/zh/play/playground/tooling/mobile-support.ts.html"},{"path":"/zh/play/playground/tooling/sharable-urls.ts.html"},{"path":"/zh/play/playground/tooling/typescript-versions.ts.html"},{"path":"/zh/play/typescript/language/soundness.ts.html"},{"path":"/zh/play/typescript/language/structural-typing.ts.html"},{"path":"/zh/play/typescript/language/type-guards.ts.html"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/zh/play/typescript/language-extensions/enums.ts.html"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/zh/play/typescript/primitives/any.ts.html"},{"path":"/zh/play/typescript/primitives/literals.ts.html"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pl/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pl/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pl/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pl/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pl/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pl/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pl/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pl/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pl/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pl/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/upcoming/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"}]},"markdownRemark":{"id":"e45c0c12-e056-5fe6-8ca6-a2ad64b906a3","excerpt":"At the heart of most useful programs, we have to make decisions based on input.\nJavaScript programs are no different, but given the fact that values can be…","html":"<p>At the heart of most useful programs, we have to make decisions based on input.\nJavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs.\n<em>Conditional types</em> help describe the relation between the types of inputs and outputs.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Animal'>Animal</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Animal.live(): void'>live</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Dog'>Dog</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='interface Animal'>Animal</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Dog.woof(): void'>woof</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Foo = number'>Foo</data-lsp> = <data-lsp lsp='interface Dog'>Dog</data-lsp> extends <data-lsp lsp='interface Animal'>Animal</data-lsp> ? number : string;</span>\n<span class='query'>//   ^ = type Foo = number</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Bar = string'>Bar</data-lsp> = <data-lsp lsp='interface RegExp'>RegExp</data-lsp> extends <data-lsp lsp='interface Animal'>Animal</data-lsp> ? number : string;</span>\n<span class='query'>//   ^ = type Bar = string</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlkdgA3CACgEoAuZcge2ABMBuQgX0NElkQoAIkwDmyCAA9IIVgGc0GbHiIkA7kyYxaDZm049CYAJ4AHFADFNyALzIR4qTPmKsuZAH5kIAK6YARtDIDHJgUKCinAD0USTIAHoehEZmKABCcFC2yABKEKIAopKmEtIQsgrobnhevgFBIWER0bEkiUA'>Try</a></div></pre>\n<p>Conditional types take a form that looks a little like conditional expresions (<code>cond ? trueExpression : falseExpression</code>) in JavaScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='type SomeType = any'>SomeType</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='type OtherType = any'>OtherType</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\"><data-lsp lsp='type TrueType = any'>TrueType</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #1A1A1A\"><data-lsp lsp='type FalseType = any'>FalseType</data-lsp></span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgChRIoB5YACwgCdVTNcDi0pkaBXFVxvIk6ADEsAGwDO3Btj4tSMYBwBmiqOkJQoAek1QAtPoDGHYPt3rYiSdAgAPYBBwATMeSq160APxtOVqAC4oYXErfCA'>Try</a></div></pre>\n<p>When the type on the left of the <code>extends</code> is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).</p>\n<p>From the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not <code>Dog extends Animal</code> and pick <code>number</code> or <code>string</code>!\nBut the power of conditional types comes from using them with generics.</p>\n<p>For example, let’s take the following <code>createLabel</code> function:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface IdLabel'>IdLabel</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) IdLabel.id: number'>id</data-lsp></span><span style=\"color: #000000\">: number </span><span style=\"color: #008000\">/* some fields */</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface NameLabel'>NameLabel</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) NameLabel.name: string'>name</data-lsp></span><span style=\"color: #000000\">: string </span><span style=\"color: #008000\">/* other fields */</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)'>createLabel</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: number'>id</data-lsp></span><span style=\"color: #000000\">: number): <data-lsp lsp='interface IdLabel'>IdLabel</data-lsp>;</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function createLabel(name: string): NameLabel (+2 overloads)'>createLabel</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string): <data-lsp lsp='interface NameLabel'>NameLabel</data-lsp>;</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function createLabel(nameOrId: string | number): IdLabel | NameLabel (+2 overloads)'>createLabel</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) nameOrId: string | number'>nameOrId</data-lsp></span><span style=\"color: #000000\">: string | number): <data-lsp lsp='interface IdLabel'>IdLabel</data-lsp> | <data-lsp lsp='interface NameLabel'>NameLabel</data-lsp>;</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)'>createLabel</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) nameOrId: string | number'>nameOrId</data-lsp></span><span style=\"color: #000000\">: string | number): <data-lsp lsp='interface IdLabel'>IdLabel</data-lsp> | <data-lsp lsp='interface NameLabel'>NameLabel</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbJIw6IBGGA8QyBFAg4SA0CAApKGnomaABKGgwQ-Ck3Dy8fPwCgiETQ3X4DI1M45FV1XAJk909vX39A4PL8XL0AeSgMAuMQMwAfWkZmYoTG5D7S7MbK1JqM+onNZv42ju5C7tH+6KghrBGxvUTiMmRrKB4Ad2QAIndgBgAHfAh+cAh0K+cgA'>Try</a></div></pre>\n<p>These overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things:</p>\n<ol>\n<li>If a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome.</li>\n<li>We have to create three overloads: one for each case when we’re <em>sure</em> of the type (one for <code>string</code> and one for <code>number</code>), and one for the most general case (taking a <code>string | number</code>). For every new type <code>createLabel</code> can handle, the number of overloads grows exponentially.</li>\n</ol>\n<p>Instead, we can encode that logic in a conditional type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type NameOrId&amp;lt;T extends string | number> = T extends number ? IdLabel : NameLabel'>NameOrId</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type NameOrId&amp;lt;T extends string | number>'>T</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> number | string> = <data-lsp lsp='(type parameter) T in type NameOrId&amp;lt;T extends string | number>'>T</data-lsp> extends number</span>\n<span style=\"color: #000000\">  ? <data-lsp lsp='interface IdLabel'>IdLabel</data-lsp></span>\n<span style=\"color: #000000\">  : <data-lsp lsp='interface NameLabel'>NameLabel</data-lsp>;</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbNatkAWk8I6YT+5JgAJ4ADip6APJQGAA8ACrIEAAekCAitIzMyAA+3EamAHzIALzI8UkpafRM0GTIAPxoWLgEtTSq6s34EkA'>Try</a></div></pre>\n<p>We can then use that conditional type to simplify out overloads down to a single function with no overloads.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>'>createLabel</data-lsp>&lt;<data-lsp lsp='(type parameter) T in createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>'>T</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> number | string&gt;(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) idOrName: T extends string | number'>idOrName</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>'>T</data-lsp>): <data-lsp lsp='type NameOrId&amp;lt;T extends string | number> = T extends number ? IdLabel : NameLabel'>NameOrId</data-lsp>&lt;<data-lsp lsp='(type parameter) T in createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>'>T</data-lsp>> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let a: NameLabel'>a</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function createLabel&amp;lt;&amp;quot;typescript&amp;quot;>(idOrName: &amp;quot;typescript&amp;quot;): NameLabel'>createLabel</data-lsp>(</span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">);</span>\n<span class='query'>//  ^ = let a: NameLabel</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let b: IdLabel'>b</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function createLabel&amp;lt;2.8>(idOrName: 2.8): IdLabel'>createLabel</data-lsp>(</span><span style=\"color: #09835A\">2.8</span><span style=\"color: #000000\">);</span>\n<span class='query'>//  ^ = let b: IdLabel</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let c: IdLabel | NameLabel'>c</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function createLabel&amp;lt;&amp;quot;hello&amp;quot; | 42>(idOrName: &amp;quot;hello&amp;quot; | 42): IdLabel | NameLabel'>createLabel</data-lsp>(<data-lsp lsp='var Math: Math'>Math</data-lsp>.<data-lsp lsp='(method) Math.random(): number'>random</data-lsp>() ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">);</span>\n<span class='query'>//  ^ = let c: NameLabel | IdLabel</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbLABPAA4q9AeSgYAPAAqyBAAHpAgIrSMzMgAPtxGpgB8yAC8yMFhEVH0TNBkyAD8aFi4BIU0qurl+FKsrMgAtC0IdGAtTSQwdCAIYMA8IMgIUBBwkBoEQSHhEJGiebEJhsYgJskAFJS+1fqZAJRVPn7oQanayNZQPADuyABEvcAM7vgQ-OAQ6A-OJCTvMDIODpEZjCYQKb4TYPNyeLijYDuMAPA71RrIAB6RX+gOQOFBo3Gk1qmwATAA6AAcaJIDXI2NxECBCEJ4JJmk2AFkJlYKVA4JE+JsDsVHjZ8PgeA9kDQACxk2n0rFFIA'>Try</a></div></pre>\n<h3 id=\"conditional-type-constraints\" style=\"position:relative;\"><a href=\"#conditional-type-constraints\" aria-label=\"conditional type constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Type Constraints</h3>\n<p>Often, the checks in a conditional type will provide us with some new information.\nJust like with narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constraint generics by the type we check against.</p>\n<p>For example, let’s take the following:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type MessageOf&amp;lt;T> = T[&amp;quot;message&amp;quot;]'>MessageOf</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T>'>T</data-lsp>[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span>\n<span class=\"error\"><span>Type '\"message\"' cannot be used to index type 'T'.</span><span class=\"code\">2536</span></span><span class=\"error-behind\">Type '\"message\"' cannot be used to index type 'T'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMA2AUAC4CeADpKALKSKICGA5pAPIBmAPACoB8oAvKBwDaAIgC21Oo2EBdANxA'>Try</a></div></pre>\n<p>In this example, TypeScript errors because <code>T</code> isn’t known to have a property called <code>message</code>.\nWe could constrain <code>T</code>, and TypeScript would no longer complain:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type MessageOf&amp;lt;T extends { message: unknown; }> = T[&amp;quot;message&amp;quot;]'>MessageOf</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T extends { message: unknown; }>'>T</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) message: unknown'>message</data-lsp></span><span style=\"color: #000000\">: unknown }> = <data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T extends { message: unknown; }>'>T</data-lsp>[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Email'>Email</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Email.message: string'>message</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Dog'>Dog</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Dog.bark(): void'>bark</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type EmailMessageContents = string'>EmailMessageContents</data-lsp> = <data-lsp lsp='type MessageOf&amp;lt;T extends { message: unknown; }> = T[&amp;quot;message&amp;quot;]'>MessageOf</data-lsp>&lt;<data-lsp lsp='interface Email'>Email</data-lsp>>;</span>\n<span class='query'>//   ^ = type EmailMessageContents = string</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCpQgA9gIA7AE3igG8oBbBZNALigFdSBrUgewHdSUAL4A+KAF4ouANoAiBolQRZAXQDcAKA0BLUiQBOmJAGNoAUTpJtAGxoao9Rktbxg+3Sk1Ctug0dNQACI8KHYOAEZI+pwAFACUrABuPNrkXlqgkFAWVtZwimgAwjx6ZMBUkvlMGDg5NiKaAPSNDlAAegD8QA'>Try</a></div></pre>\n<p>However, what if we wanted <code>MessageOf</code> to take any type, and default to something like <code>never</code> if a <code>message</code> property isn’t available?\nWe can do this by moving the constraint out and introducing a conditional type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type MessageOf&amp;lt;T> = T extends {&amp;#13;    message: unknown;&amp;#13;} ? T[&amp;quot;message&amp;quot;] : never'>MessageOf</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T>'>T</data-lsp> extends { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) message: unknown'>message</data-lsp></span><span style=\"color: #000000\">: unknown } ? <data-lsp lsp='(type parameter) T in type MessageOf&amp;lt;T>'>T</data-lsp>[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">] : never;</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Email'>Email</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Email.message: string'>message</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Dog'>Dog</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Dog.bark(): void'>bark</data-lsp>(): void;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type EmailMessageContents = string'>EmailMessageContents</data-lsp> = <data-lsp lsp='type MessageOf&amp;lt;T> = T extends {&amp;#13;    message: unknown;&amp;#13;} ? T[&amp;quot;message&amp;quot;] : never'>MessageOf</data-lsp>&lt;<data-lsp lsp='interface Email'>Email</data-lsp>>;</span>\n<span class='query'>//   ^ = type EmailMessageContents = string</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type DogMessageContents = never'>DogMessageContents</data-lsp> = <data-lsp lsp='type MessageOf&amp;lt;T> = T extends {&amp;#13;    message: unknown;&amp;#13;} ? T[&amp;quot;message&amp;quot;] : never'>MessageOf</data-lsp>&lt;<data-lsp lsp='interface Dog'>Dog</data-lsp>>;</span>\n<span class='query'>//   ^ = type DogMessageContents = never</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCoD4oBeKXKCAD2AgDsATeKAbygFsFk0AuKAVxoDWNAPYB3GlAC+UAPykA2gCJ2iVBEUBdKDxoQAbhABOAbgBQpgJY1qhzEgDG0AKKskFgDbNTUNhzU94YEMrFDNJcysbO0coABFhFC8fACMkQwEACgBKHj1hCzow81BIKBc3dzhVNABhYWtaYEYSKs4MHHKPfDMAeh6fKAA9GWLwaHiUVrU6hutm2D80LGwJ7tM+geGgA'>Try</a></div></pre>\n<p>Within the true branch, TypeScript knows that <code>T</code> <em>will</em> have a <code>message</code> property.</p>\n<p>As another example, we could also write a type called <code>Flatten</code> that flattens array types to their element types, but leaves them alone otherwise:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Flatten&amp;lt;T> = T extends any[] ? T[number] : T'>Flatten</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp> extends any[] ? <data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp>[number] : <data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp>;</span>\n\n<span style=\"color: #008000\">// Extracts out the element type.</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Str = string'>Str</data-lsp> = <data-lsp lsp='type Flatten&amp;lt;T> = T extends any[] ? T[number] : T'>Flatten</data-lsp>&lt;string[]>;</span>\n<span class='query'>//   ^ = type Str = string</span>\n\n<span style=\"color: #008000\">// Leaves the type alone.</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Num = number'>Num</data-lsp> = <data-lsp lsp='type Flatten&amp;lt;T> = T extends any[] ? T[number] : T'>Flatten</data-lsp>&lt;number>;</span>\n<span class='query'>//   ^ = type Num = number</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QKogDaAulAPyEOoCuAtgEYQATiwBchANwAoSQHoZUAKJlBCAMbAaAey7AowABbQIcCDzS7QkAHSTL0AMrBB+WImRp0VJwEtUAc2ZsKTkoUIA9VmkQgBkIBAA3CBoDaDtaOE1UCBs0gDleF3gkcnRufiEg2Xlw1iA'>Try</a></div></pre>\n<p>When <code>Flatten</code> is given an array type, it uses an indexed access with <code>number</code> to fetch out <code>string[]</code>’s element type.\nOtherwise, it just returns the type it was given.</p>\n<h3 id=\"inferring-within-conditional-types\" style=\"position:relative;\"><a href=\"#inferring-within-conditional-types\" aria-label=\"inferring within conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inferring Within Conditional Types</h3>\n<p>We just found ourselves using conditional types to apply constraints and then extract out types.\nThis ends up being such a common operation that conditional types make it easier.</p>\n<p>Conditional types provide us with a way to infer from types we compare against in the true branch using the <code>infer</code> keyword.\nFor example, we could have inferred the element type in <code>Flatten</code> instead of fetching it out “manually” with an indexed access type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Flatten&amp;lt;T> = T extends (infer U)[] ? U : T'>Flatten</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp> extends <data-lsp lsp='interface Array&amp;lt;T>'>Array</data-lsp>&lt;infer <data-lsp lsp='(type parameter) U'>U</data-lsp>> ? <data-lsp lsp='(type parameter) U'>U</data-lsp> : <data-lsp lsp='(type parameter) T in type Flatten&amp;lt;T>'>T</data-lsp>;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QCCATvQiOgJaoBmE9UAqrgH4+UAFyEA3EA'>Try</a></div></pre>\n<p>Here, we used the <code>infer</code> keyword declaratively introduced a new generic type variable named <code>U</code> instead of specifying how to retrieve the element type of <code>T</code>.\nWithin the true branch\nThis frees us from having to think about how to dig through and probing apart the structure of the types we’re interested.</p>\n<p>We can write some useful helper type aliases using the <code>infer</code> keyword.\nFor example, for simple cases, we can extract the return type out from function types:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type GetReturnType&amp;lt;T> = T extends (...args: never[]) => infer U ? U : never'>GetReturnType</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type GetReturnType&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type GetReturnType&amp;lt;T>'>T</data-lsp> extends (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: never[]'>args</data-lsp></span><span style=\"color: #000000\">: never[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> infer <data-lsp lsp='(type parameter) U'>U</data-lsp> ? <data-lsp lsp='(type parameter) U'>U</data-lsp> : never;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Foo = number'>Foo</data-lsp> = <data-lsp lsp='type GetReturnType&amp;lt;T> = T extends (...args: never[]) => infer U ? U : never'>GetReturnType</data-lsp>&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> number&gt;;</span>\n<span class='query'>//   ^ = type Foo = number</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Bar = string'>Bar</data-lsp> = <data-lsp lsp='type GetReturnType&amp;lt;T> = T extends (...args: never[]) => infer U ? U : never'>GetReturnType</data-lsp>&lt;(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: string) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> string&gt;;</span>\n<span class='query'>//   ^ = type Bar = string</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Baz = boolean[]'>Baz</data-lsp> = <data-lsp lsp='type GetReturnType&amp;lt;T> = T extends (...args: never[]) => infer U ? U : never'>GetReturnType</data-lsp>&lt;(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: boolean'>a</data-lsp></span><span style=\"color: #000000\">: boolean, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: boolean'>b</data-lsp></span><span style=\"color: #000000\">: boolean) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> boolean[]&gt;;</span>\n<span class='query'>//   ^ = type Baz = boolean[]</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwCV4FcBOA7AKuCAeTAfFALxSZQQAewE6AJgM5QAUAdOwIaoDmDAXFHQQAbhFQBtALoBKEkQCW6AGZioAVSgB+dVAFDRqANwAoY6EhQAYgHtrJWPCTA0WHLmaziRdMgC2AIzECEwB6EKgIgD1NU3NoACEuezhEFAxsSHdKAQZgVEVuTyJc-PRuYOMwiKho2JwoRIAvZMc010zmDgF-WwAbCA50ABoof26+gfQi0YnBqQqqqM0gA'>Try</a></div></pre>\n<h2 id=\"distributive-conditional-types\" style=\"position:relative;\"><a href=\"#distributive-conditional-types\" aria-label=\"distributive conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Distributive Conditional Types</h2>\n<p>When conditional types act on a generic type, they become <em>distributive</em> when given a union type.\nFor example, take the following:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Foo&amp;lt;T> = T extends any ? T[] : never'>Foo</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp> extends any ? <data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>[] : never;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nAPAFQHxQLxWVCAPYCAOwBMBnKAQyJCgH5sBtAXSgC4oiIA3CAJwDcQA'>Try</a></div></pre>\n<p>If we plug a union type into <code>Foo</code>, then the conditional type will be applied to each member of that union.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Foo&amp;lt;T> = T extends any ? T[] : never'>Foo</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>> = <data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp> extends any ? <data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>[] : never;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Bar = string[] | number[]'>Bar</data-lsp> = <data-lsp lsp='type Foo&amp;lt;T> = T extends any ? T[] : never'>Foo</data-lsp>&lt;string | number>;</span>\n<span class='query'>//   ^ = type Bar = string[] | number[]</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nAPAFQHxQLxWVCAPYCAOwBMBnKAQyJCgH5sBtAXSgC4oiIA3CAJwDcAKCGhIUAEKU+mWAkRlgfAJZEA5lAA+nAK4BbAEb9UwgPSmolgHp0gA'>Try</a></div></pre>\n<p>What happens here is that <code>Foo</code> distributes on</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1A1A1A\">number</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAQgNgQwBZQLwCgpQPTagWkIGMBXYQ-TKAZ2ACcBLAOwHMoAfKJkgWwCMIdANxA'>Try</a></div></pre>\n<p>and maps over each member type of the union, to what is effectively</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='type Foo&amp;lt;T> = T extends any ? T[] : never'>Foo</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1A1A1A\"><data-lsp lsp='type Foo&amp;lt;T> = T extends any ? T[] : never'>Foo</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">number</span><span style=\"color: #000000\">&gt;;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nAPAFQHxQLxWVCAPYCAOwBMBnKAQyJCgH5sBtAXSgC4oiIA3CAJwDcAKFCQoAIQA2lABaYhUKAHolUALQaAxgFdgGtQtgJEZYHwCWRAOboAPkaRFtAWwBG-VAKA'>Try</a></div></pre>\n<p>which leaves us with</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1A1A1A\">number</span><span style=\"color: #000000\">[];</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAQgNgQwBZQLwCgpQPTagWkIGMBXYQ-TKAZ2ACcBLAOwHMBtAXSgB8omSAtgCMIdTgG4gA'>Try</a></div></pre>\n<p>Typically, distributivity is the desired behavior.\nTo avoid that behavior, you can surround each side of the <code>extends</code> keyword with square brackets.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Foo&amp;lt;T> = T[]'>Foo</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>> = [<data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>] extends [any] ? <data-lsp lsp='(type parameter) T in type Foo&amp;lt;T>'>T</data-lsp>[] : never;</span>\n\n<span style=\"color: #008000\">// &apos;Bar&apos; is no longer a union.</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Bar = (string | number)[]'>Bar</data-lsp> = <data-lsp lsp='type Foo&amp;lt;T> = T[]'>Foo</data-lsp>&lt;string | number>;</span>\n<span class='query'>//   ^ = type Bar = (string | number)[]</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nAPAFQHxQLxQNrILpQQAewEAdgCYDOOAhmSAQPxTLYEBcUZEAbhACcA3ACgRAenFQA5ACFaA6VACWNMnCgAbOGQDmgqLSgBXMsp0A6EaEhR5AzLASIqwAcr1QAPt2MBbACNBVFFJKHCAPSYgA'>Try</a></div></pre>","headings":[{"value":"Conditional Type Constraints","depth":3},{"value":"Inferring Within Conditional Types","depth":3},{"value":"Distributive Conditional Types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/2/conditional-types.html","title":"Conditional Types","disable_toc":null,"oneline":"Step one in learning TypeScript: The basics types.","beta":true}},"prev":null,"next":null},"pageContext":{"id":"8conditional-types","slug":"/docs/handbook/2/conditional-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md","lang":"en","modifiedTime":"2020-10-29T11:50:57.706Z"}},"staticQueryHashes":[]}