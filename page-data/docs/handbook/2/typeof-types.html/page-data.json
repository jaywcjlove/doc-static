{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/typeof-types.html","result":{"data":{"markdownRemark":{"id":"7f4dc0a7-3395-5591-a83e-45d86b3fb72d","excerpt":"The typeof type operator JavaScript already has a typeof operator you can use in an expression context: TypeScript adds a typeof operator you can use in a type…","html":"<h2 id=\"the-typeof-type-operator\" style=\"position:relative;\"><a href=\"#the-typeof-type-operator\" aria-label=\"the typeof type operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>typeof</code> type operator</h2>\n<p>JavaScript already has a <code>typeof</code> operator you can use in an <em>expression</em> context:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Prints \"string\"</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAUCcEsDsBcDOoBEj41gcxQKAMYD2sihANgKYB0ZhWAFPAJ4AOFhAZqgBIVm2gA7oUhkAJigCUAbiA'>Try</a></div></pre>\n<p>TypeScript adds a <code>typeof</code> operator you can use in a <em>type</em> context to refer to the <em>type</em> of a variable or property:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let s: string' >s</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let n: string' style='border-bottom: solid 2px lightgrey;'>n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let s: string' >s</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let n: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAzhC8ECIAWJjAPYINwChSQDsAuCMATwAcR0AzaXAegYggD0B+IA'>Try</a></div></pre>\n<p>This isn’t very useful for basic types, but combined with other type operators, you can use <code>typeof</code> to conveniently express many patterns.\nFor an example, let’s start by looking at the predefined type <code>ReturnType&#x3C;T></code>.\nIt takes a <em>function type</em> and produces its return type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Predicate = (x: unknown) => boolean' >Predicate</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: unknown' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type K = boolean' style='border-bottom: solid 2px lightgrey;'>K</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type Predicate = (x: unknown) => boolean' >Predicate</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type K = boolean</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACgThAJgSwMYENjQLxQBQAeAXFAK4B2A1uQPYDu5AlFNgHxQBGNNANhOuQDcAKFCQoAaRZQAShGCk45ACrgIAHnhI0mCKxEB6A1BMA9APxA'>Try</a></div></pre>\n<p>If we try to use <code>ReturnType</code> on a function name, we see an instructive error:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(): {&#10;    x: number;&#10;    y: number;&#10;}' >f</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type P = any' >P</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err><data-lsp lsp='type f = /*unresolved*/ any' >f</data-lsp></data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>'f' refers to a value, but is being used as a type here. Did you mean 'typeof f'?</span><span class=\"code\">2749</span></span><span class=\"error-behind\">'f' refers to a value, but is being used as a type here. Did you mean 'typeof f'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYAsBOAUAGYCuAdgMYAuAlnCaAQBQCUoA3nqKNJBUdHa1AAPVAEYADABpQAT1QBmUAF8A3HiV4KMgA6RQABVABeUACUefEgBUdkADwEAfCqA'>Try</a></div></pre>\n<p>Remember that <em>values</em> and <em>types</em> aren’t the same thing.\nTo refer to the <em>type</em> that the <em>value <code>f</code></em> has, we use <code>typeof</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(): {&#10;    x: number;&#10;    y: number;&#10;}' >f</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type P = {&#10;    x: number;&#10;    y: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>P</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function f(): {&#10;    x: number;&#10;    y: number;&#10;}' >f</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type P = {\n    x: number;\n    y: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFASkQbwFCMQJwFMoR8lNEAPALkQEYAGAGkQE9aBmRAXwG5tu2KKwAOhRAAVEAXkQAlYqTAAVUYQA8wsXGDIAfPwD0hvIgB6AfiA'>Try</a></div></pre>\n<h3 id=\"limitations\" style=\"position:relative;\"><a href=\"#limitations\" aria-label=\"limitations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Limitations</h3>\n<p>TypeScript intentionally limits the sorts of expressions you can use <code>typeof</code> on.</p>\n<p>Specifically, it’s only legal to use <code>typeof</code> on identifiers (i.e. variable names) or their properties.\nThis helps avoid the confusing trap of writing code you think is executing, but isn’t:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Meant to use = ReturnType&lt;typeof msgbox&gt;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let shouldContinue: () => boolean' >shouldContinue</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const msgbox: () => boolean' >msgbox</data-lsp></span><span style=\"color: #000000\"><data-err>(</data-err></span><span style=\"color: #A31515\">\"Are you sure you want to continue?\"</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>',' expected.</span><span class=\"code\">1005</span></span><span class=\"error-behind\">',' expected.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwAYMFYBQATSAYwBsBDaSUIuAO0QBdQBbRAcwCM4APVACgCUoALwA+UFzglIZWgG5cIUAwCeAByqtOPEaFkqFSgLQmiAVwYmjisAFkZtJgzigziKsNAAlSAzPRaABV1SAAeVQ04ADMWdi5uUVxpJkQACzgzEnwAYToGAEtaM0hUCMho2O1uPgAiAEFKUBUM0ER-KmazUAB3WScXGkdC4oB+GoE5IA'>Try</a></div></pre>","headings":[{"value":"The typeof type operator","depth":2},{"value":"Limitations","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/typeof-types.html","title":"Typeof Type Operator","disable_toc":null,"handbook":null,"oneline":"Using the typeof operator in type contexts.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Keyof Type Operator","oneline":"Using the keyof operator in type contexts.","permalink":"/docs/handbook/2/keyof-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Indexed Access Types","oneline":"Using Type['a'] syntax to access a subset of a type.","permalink":"/docs/handbook/2/indexed-access-types.html"}}}},"pageContext":{"id":"1-typeof-type-operator","slug":"/docs/handbook/2/typeof-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md","previousID":"1e48cb47-956b-50c3-b9b9-88d8d8b63284","nextID":"d23658bc-b275-552b-9d19-538c0d5fa9a2","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}