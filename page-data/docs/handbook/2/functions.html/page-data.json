{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/functions.html","result":{"data":{"markdownRemark":{"id":"a44637f5-bb8c-5222-9f51-86cd0a8798ab","excerpt":"Functions are the basic building block of any application, whether they’re local functions, imported from another module, or methods on a class.\r\nThey’re also…","html":"<p>Functions are the basic building block of any application, whether they’re local functions, imported from another module, or methods on a class.\r\nThey’re also values, and just like other values, TypeScript has many ways to describe how functions can be called.\r\nLet’s learn about how to write types that describe functions.</p>\n<h2 id=\"function-type-expressions\" style=\"position:relative;\"><a href=\"#function-type-expressions\" aria-label=\"function type expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Type Expressions</h2>\n<p>The simplest way to describe a function is with a <em>function type expression</em>.\r\nThese types are syntactically similar to arrow functions:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greeter(fn: (a: string) => void): void' >greeter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) fn: (a: string) => void' >fn</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) fn: (a: string) => void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, World\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printToConsole(s: string): void' >printToConsole</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greeter(fn: (a: string) => void): void' >greeter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='function printToConsole(s: string): void' >printToConsole</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1XagFMMALkVwENiBnKVGMZASkQF4A+RANzhgBNGBvALAAoRIgK4ARAAl0AG1lwANIgDqcVLO4T6AbmEBfYcNCRYCRAAcaYKABU4AYQQU4s9LgqVqtBokEjECGdXdAA6BWQPXQMjITRMbDwrWjtHYLddIA'>Try</a></div></pre>\n<p>The syntax <code>(a: string) => void</code> means “a function with one parameter, named <code>a</code>, of type string, that doesn’t have a return value”.\r\nJust like with function declarations, if a parameter type isn’t specified, it’s implicitly <code>any</code>.</p>\n<blockquote>\n<p>Note that the parameter name is <strong>required</strong>. The function type <code>(string) => void</code> means “a function with a parameter named <code>string</code> of type <code>any</code>“!</p>\n</blockquote>\n<p>Of course, we can use a type alias to name a function type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GreetFunction = (a: string) => void' >GreetFunction</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greeter(fn: GreetFunction): void' >greeter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fn: GreetFunction' >fn</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type GreetFunction = (a: string) => void' >GreetFunction</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gThCwBiBXAdgY2ASwPbpQC8UAFAIYBcUAzsHDugOYCUxAfFAG544AmAbgCwAKABmGbPkJMESCHFJj01eIhSTcBNgG9RUKAHpDUAHTnRAXyA'>Try</a></div></pre>\n<h2 id=\"call-signatures\" style=\"position:relative;\"><a href=\"#call-signatures\" aria-label=\"call signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call Signatures</h2>\n<p>In JavaScript, functions can have properties in addition to being callable.\r\nHowever, the function type expression syntax doesn’t allow for declaring properties.\r\nIf we want to describe something callable with properties, we can write a <em>call signature</em> in an object type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DescribableFunction = {&#10;    (someArg: number): boolean;&#10;    description: string;&#10;}' >DescribableFunction</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) description: string' >description</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) someArg: number' >someArg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(fn: DescribableFunction): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fn: DescribableFunction' >fn</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type DescribableFunction = {&#10;    (someArg: number): boolean;&#10;    description: string;&#10;}' >DescribableFunction</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fn: DescribableFunction' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) description: string' >description</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" returned \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) fn: (someArg: number) => boolean' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIhDOBjATgSwEYEN0BsIDEBXAO0WFQHtioBeKAbwFgAoKKAEwRVTHKoC4o8YGmIBzANws2ACngUAthACCyMYOKEF6CMgCUg9BQp5MxKcwC+FgGYkylauwoBlRRGAALVOJk3ignBIaFi4BPZ8xHoM0lCIVPJ4AHQ4FGJ+xEmcwTyRUADUUABEUMgehMjEEOzFBVD+MgBsenoWlkA'>Try</a></div></pre>\n<p>Note that the syntax is slightly different compared to a function type expression - use <code>:</code> between the parameter list and the return type rather than <code>=></code>.</p>\n<h2 id=\"construct-signatures\" style=\"position:relative;\"><a href=\"#construct-signatures\" aria-label=\"construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construct Signatures</h2>\n<p>JavaScript functions can also be invoked with the <code>new</code> operator.\r\nTypeScript refers to these as <em>constructors</em> because they usually create a new object.\r\nYou can write a <em>construct signature</em> by adding the <code>new</code> keyword in front of a call signature:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type SomeConstructor = new (s: string) => SomeObject' >SomeConstructor</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type SomeObject = any' >SomeObject</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(ctor: SomeConstructor): any' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ctor: SomeConstructor' >ctor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type SomeConstructor = new (s: string) => any' >SomeConstructor</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) ctor: new (s: string) => any' >ctor</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgeQEYCsIGNhQLxQCGAdiANwCwAUAPQ1QC0TWArsEw9aJLIhAMJxiAZ2AAnFjjhj8UAN7UoUYhADuUABTCAXFFFiAlsQDmASl3wkaTDkpUAvnYBmLYjgNCoT4hqliLfIIi4pLA0qbyilBiEMAsYsTKalB+GgBEABYQADbZcGmmdvZAA'>Try</a></div></pre>\n<p>Some objects, like JavaScript’s <code>Date</code> object, can be called with or without <code>new</code>.\r\nYou can combine call and construct signatures in the same type arbitrarily:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface CallOrConstruct' >CallOrConstruct</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number | undefined' >n</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJwDYYPJVQexAGcwoBXBMZAbwFgAoZZECAd2QAoiAuZEqUAHMAlLwAicSAG4GTDiAD8vEGQC2AI2ijmazVBn0AvkA'>Try</a></div></pre>\n<h2 id=\"generic-functions\" style=\"position:relative;\"><a href=\"#generic-functions\" aria-label=\"generic functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Functions</h2>\n<p>It’s common to write a function where the types of the input relate to the type of the output, or where the types of two inputs are related in some way.\r\nLet’s consider for a moment a function that returns the first element of an array:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement(arr: any[]): any' >firstElement</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAnAzlAogGwKYC2eYUAFAIaqoBci5YAngNoC6AlIgN4CwAUIolR4oIVEkqomABhYBuPgF8gA'>Try</a></div></pre>\n<p>This function does its job, but unfortunately has the return type <code>any</code>.\r\nIt’d be better if the function returned the type of the array element.</p>\n<p>In TypeScript, <em>generics</em> are used when we want to describe a correspondence between two values.\r\nWe do this by declaring a <em>type parameter</em> in the function signature:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;Type>(arr: Type[]): Type | undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement&lt;Type>(arr: Type[]): Type | undefined' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement&lt;Type>(arr: Type[]): Type | undefined' >Type</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement&lt;Type>(arr: Type[]): Type | undefined' >Type</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAnAzlAogGwKYC2eYUAPACoCeADngHwAUAhqqgFyJW0DaAugJQcueRAB9E4ACZ4UYPJMQBvALAAoRIlR4oIVEhapuABl4BuNQF8gA'>Try</a></div></pre>\n<p>By adding a type parameter <code>Type</code> to this function and using it in two places, we’ve created a link between the input of the function (the array) and the output (the return value).\r\nNow when we call it, a more specific type comes out:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// s is of type &apos;string&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const s: string | undefined' >s</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;string>(arr: string[]): string | undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// n is of type &apos;number&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: number | undefined' >n</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;number>(arr: number[]): number | undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// u is of type undefined</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const u: undefined' >u</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;never>(arr: never[]): undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">([]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtVKxgGcMBRCEAWxFQwB4AVATwAcQA+AClhgC55mbANoBdAJT9BCAD7w0oRFlQhgAbgCwAKAD02+AFpDYZBkP6tu+EXhZrORPAysEAchIwlAcxdaweElbwALwExGQU1LScQgBEUDEANPAxAEaJyWAx4ho6evi28PaOzvAuqMiUKSAwPpp+qAH4IYph5FQ0GNEAjEkATEkAzNkWesg2dg5ObHKoCkoqvv4YcsGhJG2RnaJiqkA'>Try</a></div></pre>\n<h3 id=\"inference\" style=\"position:relative;\"><a href=\"#inference\" aria-label=\"inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inference</h3>\n<p>Note that we didn’t have to specify <code>Type</code> in this sample.\r\nThe type was <em>inferred</em> - chosen automatically - by TypeScript.</p>\n<p>We can use multiple type parameters as well.\r\nFor example, a standalone version of <code>map</code> would look like this:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >map</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Input</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Output in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Output</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Input[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Input</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) func: (arg: Input) => Output' >func</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Input' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Input</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Output in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Output</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Output in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Output</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Input[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Input>.map&lt;Output>(callbackfn: (value: Input, index: number, array: Input[]) => Output, thisArg?: any): Output[]' >map</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: (arg: Input) => Output' >func</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Parameter &apos;n&apos; is of type &apos;string&apos;</span></div><div class='line'><span style=\"color: #008000\">// &apos;parsed&apos; is of type &apos;number[]&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const parsed: number[]' >parsed</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;string, number>(arr: string[], func: (arg: string) => number): number[]' >map</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"2\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"3\"</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: string' >n</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: string' >n</data-lsp></span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAcCcFMBdYJbUgWgQcwHYHsYFgAoAMwFdMBjRbTUAWwENwAeASU3BNgBpQB5TjrAB8ACnqRIALlBtBAbQC6PUhWljI6abM4BKUAF4hfAbun9Y8haADehUKBiwSkGuMgA6BuBEryOgNyEAL6EhCCgAAri9LRwyKAA5JgJoAgAzqDYRKCwAJ7g0IlpsJAImOgJYWAJ4OJp0AAmKemZ2XkFiZgktABGyIqVBOTUxRB1jQZ0jCJyAEQAjLM8swBMS6CzAMyzSqAimHqGY5D1bLD7OgFAA'>Try</a></div></pre>\n<p>Note that in this example, TypeScript could infer both the type of the <code>Input</code> type parameter (from the given <code>string</code> array), as well as the <code>Output</code> type parameter based on the return value of the function expression (<code>number</code>).</p>\n<h3 id=\"constraints\" style=\"position:relative;\"><a href=\"#constraints\" aria-label=\"constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constraints</h3>\n<p>We’ve written some generic functions that can work on <em>any</em> kind of value.\r\nSometimes we want to relate two values, but can only operate on a certain subset of values.\r\nIn this case, we can use a <em>constraint</em> to limit the kinds of types that a type parameter can accept.</p>\n<p>Let’s write a function that returns the longer of two values.\r\nTo do this, we need a <code>length</code> property that’s a number.\r\nWe <em>constrain</em> the type parameter to that type by writing an <code>extends</code> clause:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >longest</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: Type extends { length: number; }' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: Type extends { length: number; }' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: Type extends { length: number; }' >a</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: Type extends { length: number; }' >b</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: Type extends { length: number; }' >a</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: Type extends { length: number; }' >b</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// longerArray is of type &apos;number[]&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const longerArray: number[]' >longerArray</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;number[]>(a: number[], b: number[]): number[]' >longest</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">], [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// longerString is of type &apos;alice&apos; | &apos;bob&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const longerString: \"alice\" | \"bob\"' >longerString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;\"alice\" | \"bob\">(a: \"alice\" | \"bob\", b: \"alice\" | \"bob\"): \"alice\" | \"bob\"' >longest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"bob\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// Error! Numbers don&apos;t have a &apos;length&apos; property</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const notOK: {&#10;    length: number;&#10;}' >notOK</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;{&#10;    length: number;&#10;}>(a: {&#10;    length: number;&#10;}, b: {&#10;    length: number;&#10;}): {&#10;    length: number;&#10;}' >longest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>10</data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type '{ length: number; }'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type '{ length: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWdG00BYAKADMBXAOwGMAXASzitABtmBzSROgHgBUAngAdIoSAA86kKgBNEoAN5sZHOgAtUVCgFsARjFABfAHwAKAIaohogDSg91kZACUS0qFAMyoSwDpWVQ1QEwBeBwCg9TdFD09QaEg6CmgWCwBuOKNxVkQxWJJ4hKSUlj1MwuNSI1JSEDZOGABBWAtBLwU4HzpnUABybX0YAG0AXT7SGmYeBqouaBboNtBw9jnuOjNhgEZ7NFH7Hb37DFGXCvq1+YBlOmgGOY7QLtAe0X6LVgYaSD7QAB9+no4HoJiQplQZlcYLd7o9Vo0eGYAESfb6QZH2ZHAvTI851MAAUVgCAAhKAAHK6AxIUCyZh9OigdQWABuYgs-UCcw0f2E8FE0B6k2mTKocDoAHkANIrWZcJHbAAM9mVSvOQA'>Try</a></div></pre>\n<p>There are a few interesting things to note in this example.\r\nWe allowed TypeScript to <em>infer</em> the return type of <code>longest</code>.\r\nReturn type inference also works on generic functions.</p>\n<p>Because we constrained <code>Type</code> to <code>{ length: number }</code>, we were allowed to access the <code>.length</code> property of the <code>a</code> and <code>b</code> parameters.\r\nWithout the type constraint, we wouldn’t be able to access those properties because the values might have been some other type without a length property.</p>\n<p>The types of <code>longerArray</code> and <code>longerString</code> were inferred based on the arguments.\r\nRemember, generics are all about relating two or more values with the same type!</p>\n<p>Finally, just as we’d like, the call to <code>longest(10, 100)</code> is rejected because the <code>number</code> type doesn’t have a <code>.length</code> property.</p>\n<h3 id=\"working-with-constrained-values\" style=\"position:relative;\"><a href=\"#working-with-constrained-values\" aria-label=\"working with constrained values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Constrained Values</h3>\n<p>Here’s a common error when working with generic constraints:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >minimumLength</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type extends { length: number; }' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >Type</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) minimum: number' >minimum</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type extends { length: number; }' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) minimum: number' >minimum</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type extends { length: number; }' >obj</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) minimum: number' >minimum</data-lsp></span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>Type '{ length: number; }' is not assignable to type 'Type'.\n  '{ length: number; }' is assignable to the constraint of type 'Type', but 'Type' could be instantiated with a different subtype of constraint '{ length: number; }'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ length: number; }' is not assignable to type 'Type'.\n  '{ length: number; }' is assignable to the constraint of type 'Type', but 'Type' could be instantiated with a different subtype of constraint '{ length: number; }'.</span><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oLACgAzAVwDsBjAFwEs4TQBbKkq+o+gGUhIHMKALADwAVAJ4AHSKEgAPClwAmiUAG9QAGy68+qEmwBGMUAF8AfAAp8oUHD0ArVKIkAaSwyYs2O-THwBKB+KSyq5UBKBmNrYAdBo8-KAmALxuzKz0viquVtCQFETQdJEA3K5GUmqIQVmgOXkFKuqa-KiMqWzGJXhWRvhGQA'>Try</a></div></pre>\n<p>It might look like this function is OK - <code>Type</code> is constrained to <code>{ length: number }</code>, and the function either returns <code>Type</code> or a value matching that constraint.\r\nThe problem is that the function promises to return the <em>same</em> kind of object as was passed in, not just <em>some</em> object matching the constraint.\r\nIf this code were legal, you could write code that definitely wouldn’t work:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// &apos;arr&apos; gets value { length: 6 }</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr: number[]' >arr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function minimumLength&lt;number[]>(obj: number[], minimum: number): number[]' >minimumLength</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// and crashes here because arrays have</span></div><div class='line'><span style=\"color: #008000\">// a &apos;slice&apos; method, but not the returned object!</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const arr: number[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.slice(start?: number | undefined, end?: number | undefined): number[]' >slice</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFstUsDkCAZEVAcwwAsAeAFQE8AHBEADw2uADO8AN7wI1OvQBc8VOQBGIGPAC+APgAUAWABQ8eDnkArGW04AaXfqIkyBGXIKKYugJSmOIANy6A9L-gAWmCwZAxgwL8AgHJYGGj4GhAMIQA3KAhkBFFxWgYZADZVXTA8AQx4OPgAXkJiUnIqPPoNAG0ARnN4ACYugGYAXS6C1x8df0rUYHgwGCgBehAhRbh4RTAoZAEEOKhWZahUkCjK+GiBCCwwEASCZPocYC75MNkcCoYEOAxkGFQQaaGIzgDAAQhKZRw4gAdBAcDQNHFoRcriANAAGVyjIA'>Try</a></div></pre>\n<h3 id=\"specifying-type-arguments\" style=\"position:relative;\"><a href=\"#specifying-type-arguments\" aria-label=\"specifying type arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying Type Arguments</h3>\n<p>TypeScript can usually infer the intended type arguments in a generic call, but not always.\r\nFor example, let’s say you wrote a function to combine two arrays:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >combine</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr1: Type[]' >arr1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr2: Type[]' >arr2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr1: Type[]' >arr1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.concat(...items: ConcatArray&lt;Type>[]): Type[] (+1 overload)' >concat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr2: Type[]' >arr2</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBOBbARjMBTAPAFQE8AHbAPgAoBDAJxoEYAuRI0gbQF0AaRWmgJmatsnAJRCSIjogDeAWABQiRDWxQQNJH3oA6FJCpRqdfqIDcigL5A'>Try</a></div></pre>\n<p>Normally it would be an error to call this function with mismatched arrays:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr: number[]' >arr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function combine&lt;number>(arr1: number[], arr2: number[]): number[]' >combine</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], [</span><span style=\"color: #A31515\"><data-err>&quot;hello&quot;</data-err></span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oLACgATSAYwBsBDaSUAMwFcA7YgFwEs4HRi4BbAI1YNIAHgAqATwAOkAHwAKStACMqCdIDaAXQA0oRWlVTIWgJSGNmgNz4QoALQPidZg7v5uDRMz2xQAXi5eASE5dSVdNF0MHVB1ACIAC0hSUjg4zRNLIA'>Try</a></div></pre>\n<p>If you intended to do this, however, you could manually specify <code>Type</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr: (string | number)[]' >arr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function combine&lt;string | number>(arr1: (string | number)[], arr2: (string | number)[]): (string | number)[]' >combine</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], [</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXzBwFsAjLVEAHgBUBPABxAD4AKWGARgC547GBtALoAaeOwBMPPiCEBKKQxmCA3AFgAUAHpN8ALT6wyDPt0bCqAM4YxMGPAC8BYmQqUrMcgHN4AH3ipkUhAYVn4OUXFRAGYReH4AIgALEAgIHHjBWWUgA'>Try</a></div></pre>\n<h3 id=\"guidelines-for-writing-good-generic-functions\" style=\"position:relative;\"><a href=\"#guidelines-for-writing-good-generic-functions\" aria-label=\"guidelines for writing good generic functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Guidelines for Writing Good Generic Functions</h3>\n<p>Writing generic functions is fun, and it can be easy to get carried away with type parameters.\r\nHaving too many type parameters or using constraints where they aren’t needed can make inference less successful, frustrating callers of your function.</p>\n<h4 id=\"push-type-parameters-down\" style=\"position:relative;\"><a href=\"#push-type-parameters-down\" aria-label=\"push type parameters down permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Push Type Parameters Down</h4>\n<p>Here are two ways of writing a function that appear similar:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement1&lt;Type>(arr: Type[]): Type' >firstElement1</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement1&lt;Type>(arr: Type[]): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement1&lt;Type>(arr: Type[]): Type' >Type</data-lsp></span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement2&lt;Type extends any[]>(arr: Type): any' >firstElement2</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement2&lt;Type extends any[]>(arr: Type): any' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type extends any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement2&lt;Type extends any[]>(arr: Type): any' >Type</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type extends any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// a: number (good)</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement1&lt;number>(arr: number[]): number' >firstElement1</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// b: any (bad)</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const b: any' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement2&lt;number[]>(arr: number[]): any' >firstElement2</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAnAzlAogGwKYC2eYUAjADwAqAngA54B8AFAIaqoBciN9A2gLoBKRAG8AsAChEiVHighUSNql4AGfgG5JAX0mTQkWAmRpMuQsSgAmKnTyI8ADyjEAJukQsw1Ac2VcePGFxKRk5BSV2NU0dPQkAenjPLjAQAgAjPFREJgBzODhXQUkIBExPRABeEwxsfCISUiZeUgAaRCt2gGYhLQSk9K4vahz0liKSsqhEdKqas3rLK2a2ju7eoA'>Try</a></div></pre>\n<p>These might seem identical at first glance, but <code>firstElement1</code> is a much better way to write this function.\r\nIts inferred return type is <code>Type</code>, but <code>firstElement2</code>’s inferred return type is <code>any</code> because TypeScript has to resolve the <code>arr[0]</code> expression using the constraint type, rather than “waiting” to resolve the element during a call.</p>\n<blockquote>\n<p><strong>Rule</strong>: When possible, use the type parameter itself rather than constraining it</p>\n</blockquote>\n<h4 id=\"use-fewer-type-parameters\" style=\"position:relative;\"><a href=\"#use-fewer-type-parameters\" aria-label=\"use fewer type parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Fewer Type Parameters</h4>\n<p>Here’s another pair of similar functions:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >filter1</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) func: (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.filter(predicate: (value: Type, index: number, array: Type[]) => unknown, thisArg?: any): Type[] (+1 overload)' >filter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >filter2</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Func in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Func</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: Func extends (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Func in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Func</data-lsp></span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.filter(predicate: (value: Type, index: number, array: Type[]) => unknown, thisArg?: any): Type[] (+1 overload)' >filter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: Func extends (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAbKBTATgRgDwAqAngA4YB8AFAIZZYBcixZA2gLoA0y4EjNWAc0bMMASkQBecogBGcOKgzUwo4aQztEAbwCwAKESIsGKCCxJaWAHQp02SqEiiA3PoC++-Y+jwktzFgATITqXABiPIgYAB6YYAAmAM6I-EJM6uJSsvKKylT6hpZqrJwF3JCMEZD6qukl2mXGpuaIljZoAQ48Lu5AA'>Try</a></div></pre>\n<p>We’ve created a type parameter <code>Func</code> that <em>doesn’t relate two values</em>.\r\nThat’s always a red flag, because it means callers wanting to specify type arguments have to manually specify an extra type argument for no reason.\r\n<code>Func</code> doesn’t do anything but make the function harder to read and reason about!</p>\n<blockquote>\n<p><strong>Rule</strong>: Always use as few type parameters as possible</p>\n</blockquote>\n<h4 id=\"type-parameters-should-appear-twice\" style=\"position:relative;\"><a href=\"#type-parameters-should-appear-twice\" aria-label=\"type parameters should appear twice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Parameters Should Appear Twice</h4>\n<p>Sometimes we forget that a function might not need to be generic:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet&lt;Str extends string>(s: Str): void' >greet</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in greet&lt;Str extends string>(s: Str): void' >Str</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Str extends string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in greet&lt;Str extends string>(s: Str): void' >Str</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Str extends string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet&lt;\"world\">(s: \"world\"): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QDwGUqqLoAeU6YAJgM6JUExjIB8AFFQFyL6oCUiA3gFgAUIkQQEVOABt0AOmlxkLAEQAJdNMUAaRCsQBqWjwDcIgL4iRaTFFUB3OKmkUVpoA'>Try</a></div></pre>\n<p>We could just as easily have written a simpler version:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(s: string): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQGcBciuUqMYyAlIgN4CwAUIohArnADboB07cy2AIgAS6drwA0iAYgDURCgG4GAXyA'>Try</a></div></pre>\n<p>Remember, type parameters are for <em>relating the types of multiple values</em>.\r\nIf a type parameter is only used once in the function signature, it’s not relating anything.</p>\n<blockquote>\n<p><strong>Rule</strong>: If a type parameter only appears in one location, strongly reconsider if you actually need it</p>\n</blockquote>\n<h2 id=\"optional-parameters\" style=\"position:relative;\"><a href=\"#optional-parameters\" aria-label=\"optional parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters</h2>\n<p>Functions in JavaScript often take a variable number of arguments.\r\nFor example, the <code>toFixed</code> method of <code>number</code> takes an optional digit count:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(n: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">()); </span><span style=\"color: #008000\">// 0 arguments</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)); </span><span style=\"color: #008000\">// 1 argument</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFGAXIsIC2AjAUwCcBKRAbwFgAoRRCBAZzgBsCA6FuAczXajgAxGAA8CAExQkSAbkQB6eYgAMiAIZFuuAmCiMadBmGZtOPPgOFjJAZmlzFiAIzrN23TQC+QA'>Try</a></div></pre>\n<p>We can model this in TypeScript by marking the parameter as <em>optional</em> with <code>?</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | undefined' >x</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFADwPwC5FhAWwCMBTAJwEpEBvAWAChFEB6JxAOg-oF97VyBuZqwDyAaV4oAjAAYBQxGKA'>Try</a></div></pre>\n<p>Although the parameter is specified as type <code>number</code>, the <code>x</code> parameter will actually have the type <code>number | undefined</code> because unspecified parameters in JavaScript get the value <code>undefined</code>.</p>\n<p>You can also provide a parameter <em>default</em>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFAD0QXkQRgAwCUiA3gLABQiiA9NYgHSMUC+QA'>Try</a></div></pre>\n<p>Now in the body of <code>f</code>, <code>x</code> will have type <code>number</code> because any <code>undefined</code> argument will be replaced with <code>10</code>.\r\nNote that when a parameter is optional, callers can always pass <code>undefined</code>, as this simply simulates a “missing” argument:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | undefined' >x</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// cut</span></div><div class='line'><span style=\"color: #008000\">// All OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtVIAoAPAfgC55VkBbAIxBgEoKA3HLYAbgFgAoAen7wwyDH0HwAghAjwA8gGk+iAox68VARgAMa5QTShEWVCGBqgA'>Try</a></div></pre>\n<h3 id=\"optional-parameters-in-callbacks\" style=\"position:relative;\"><a href=\"#optional-parameters-in-callbacks\" aria-label=\"optional parameters in callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters in Callbacks</h3>\n<p>Once you’ve learned about optional parameters and function type expressions, it’s very easy to make the following mistakes when writing functions that invoke callbacks:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: number | undefined' >index</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;any>.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">], </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwJ4DE4CcCiBDCACwAo8ssAuRPMVAbQF0AaRCPAG3YCMCBrK0lgDmVGqhYwwAEwCmADwD8VMCGRcZWAJSIAvAD5EANzgwp2gN4BYAFCJEwbImLsZURDF2IADAG53iAB5qcgA6FzAhKEI-GABqWIsbOzs2Th4IXkEsOhhmd00fJMQAXxtioA'>Try</a></div></pre>\n<p>What people usually intend when writing <code>index?</code> as an optional parameter is that they want both of these calls to be legal:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAE0gGMAbAQ2klADMBXAOxIBcBLOR0AWwE8AxBAFEKJABYAKAqFBVoqCo14BtALoAaaaBIUyZAEaiA1qglUA5gqXrQbRsQAeAflSN63fTACUoALwA+UAA3ODZCAi9UELCAbgIQUABaZJJ6FmTEgj5BaBFxCWUARhs0GywNUDMfAO1ORDgySAA6MjhzKq84-GzhUUkikrKKsxs2asCSOobm1vaKUa9OoA'>Try</a></div></pre>\n<p>What this <em>actually</em> means is that <em><code>callback</code> might get invoked with one argument</em>.\r\nIn other words, the function definition says that the implementation might look like this:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: number | undefined' >index</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;any>.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// I don&apos;t feel like providing the index today</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAMwFcA7AYwBcBLOU0AWwE8AxBAUQENyALACk6xUnUkwDaAXQA0ocpwA28gEbcA1qgHQA5sNEzqpACaQAHgH5UpYgyUwAlKAC8APlAA3ONUMOA3gVCghAigfPKQlKDUTqAADADckaAAPKCC0AB0YaRalDwJ1ADUBb7+AaAgoACSoIZ0AOQRhJCQ8qDy1KqQoAAO8G5eBlqguV0GxibDcIacTKUBcooq5Kqa0GLUEnZxpQC+BDtAA'>Try</a></div></pre>\n<p>In turn, TypeScript will enforce this meaning and issue errors that aren’t really possible:</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAE0gGMAbAQ2klADMBXAOxIBcBLOR0AWwE8AxBAFEKJABYAKAqFBVoqCo14BtALoAaaaBIUyZAEaiA1qglUA5gqXrQbRsQAeAflSN63fTACUoALwA+UAA3ODZCAi9UELCAbgIQUABaZJJ6FmTEgj5BaBFxCWUARhs0GywNUDMbNh8A0ABvLRJORDgySAA6MjhzCTYOljh+NgdIQgkvLzj8AF8poA'>Try</a></div></pre>\n<p>In JavaScript, if you call a function with more arguments than there are parameters, the extra arguments are simply ignored.\r\nTypeScript behaves the same way.\r\nFunctions with fewer parameters (of the same types) can always take the place of functions with more parameters.</p>\n<blockquote>\n<p>When writing a function type for a callback, <em>never</em> write an optional parameter unless you intend to <em>call</em> the function without passing that argument</p>\n</blockquote>\n<h2 id=\"function-overloads\" style=\"position:relative;\"><a href=\"#function-overloads\" aria-label=\"function overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Overloads</h2>\n<p>Some JavaScript functions can be called in a variety of argument counts and types.\r\nFor example, you might write a function to produce a <code>Date</code> that takes either a timestamp (one argument) or a month/day/year specification (three arguments).</p>\n<p>In TypeScript, we can specify a function that can be called in different ways by writing <em>overload signatures</em>.\r\nTo do this, write some number of function signatures (usually two or more), followed by the body of the function:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) timestamp: number' >timestamp</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(m: number, d: number, y: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) m: number' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number' >d</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) mOrTimestamp: number' >mOrTimestamp</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number | undefined' >d</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number | undefined' >y</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number | undefined' >d</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number | undefined' >y</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;new (year: number, month: number, date?: number | undefined, hours?: number | undefined, minutes?: number | undefined, seconds?: number | undefined, ms?: number | undefined) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) mOrTimestamp: number' >mOrTimestamp</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number' >d</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) mOrTimestamp: number' >mOrTimestamp</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d1: Date' >d1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">12345678</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d2: Date' >d2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(m: number, d: number, y: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d3: Date' >d3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span><span class=\"code\">2575</span></span><span class=\"error-behind\">No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsGCwAoAMwFcA7AYwBcBLOU0AWwEMBrSAEScsgAoaHIiSkwYAHVKWIMARjACUqTtwDcBEhRp1GrDl14MJU2dAA0oACaGZMMwE8rxhaCWRVRMlVr1mbFzwYA8tAAKtQCQiLioJLWphYA-A42oLaJ0UbyinqgAN4EoKDUhKA85qAAhAC8laBk5pCE1KSQZQBkrSkV1bWk9Y3N5nK5+QWg0JCUxND0zQDuzno8tmaBIWGCwmJmg24FAL6gkAA2iJDD+KNjE1MzkPN+q6Hhm6Jyu6B7BJ-45HRCFgBGUA1Hy6bg8AFoADMABYMAA2LAADjeBF+pH+5jQwO0vkWGDMBNAGFRPz+lAsUJxoL8ALMULeQA'>Try</a></div></pre>\n<p>In this example, we wrote two overloads: one accepting one argument, and another accepting three arguments.\r\nThese first two signatures are called the <em>overload signatures</em>.</p>\n<p>Then, we wrote a function implementation with a compatible signature.\r\nFunctions have an <em>implementation</em> signature, but this signature can’t be called directly.\r\nEven though we wrote a function with two optional parameters after the required one, it can’t be called with two parameters!</p>\n<h3 id=\"overload-signatures-and-the-implementation-signature\" style=\"position:relative;\"><a href=\"#overload-signatures-and-the-implementation-signature\" aria-label=\"overload signatures and the implementation signature permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overload Signatures and the Implementation Signature</h3>\n<p>This is a common source of confusion.\r\nOften people will write code like this and not understand why there is an error:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// Expected to be able to call with zero arguments</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>Expected 1 arguments, but got 0.</span><span class=\"code\">2554</span></span><span class=\"error-behind\">Expected 1 arguments, but got 0.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMBYCwAoAMwFcA7AYwBcBLOU0Q0gCgA9VFLprSBzASlQA3ONQAmAbgIkKNOg2Z9QAbwKhQIUADptBAL4ENAURYAHSFUijQlOKABGkUAEM7AG0c3Q5J69egA7tSUABagAF4wtk7QPMQAtpCklIhSCuJAA'>Try</a></div></pre>\n<p>Again, the signature used to write the function body can’t be “seen” from the outside.</p>\n<blockquote>\n<p>The signature of the <em>implementation</em> is not visible from the outside.\r\nWhen writing an overloaded function, you should always have <em>two</em> or more signatures above the implementation of the function.</p>\n</blockquote>\n<p>The implementation signature must also be <em>compatible</em> with the overload signatures.\r\nFor example, these functions have errors because the implementation signature doesn’t match the overloads in a correct way:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: boolean): void (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: boolean' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Argument type isn&apos;t right</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='function fn(x: string): void (+1 overload)' >fn</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>This overload signature is not compatible with its implementation signature.</span><span class=\"code\">2394</span></span><span class=\"error-behind\">This overload signature is not compatible with its implementation signature.</span><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: boolean): void (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: boolean' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCcAWAsAFABmArgHYDGALgJZxmhFkAUAHqgEZxwA2kAhmQCUqAG5waAEwDchEKACC0AOYkAtpDJVQVAJ4AHSKBqIyAcm3QaygBZVCpSrXqMW7UIipWyykaHFSssTk1HQMTGyc3HyCQqAA3gC+QA'>Try</a></div></pre>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): string (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Return type isn&apos;t right</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='function fn(x: number): boolean (+1 overload)' >fn</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>This overload signature is not compatible with its implementation signature.</span><span class=\"code\">2394</span></span><span class=\"error-behind\">This overload signature is not compatible with its implementation signature.</span><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): string (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"oops\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCcAWAsAFABmArgHYDGALgJZxmhFkAUAHqoldDWQOYCUHLj14BuQiFAAlSFRLQGVAJ4AHSKBqIyAciqhuvABZVCpSrXqMW7UGRIBbAEYxBoR3DgAbSAEMy44nJqOgYmNiFuPlAAH1sHZ2h+UABvQlB9WXkGACIPFURsgIBfIA'>Try</a></div></pre>\n<h3 id=\"writing-good-overloads\" style=\"position:relative;\"><a href=\"#writing-good-overloads\" aria-label=\"writing good overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Good Overloads</h3>\n<p>Like generics, there are a few guidelines you should follow when using function overloads.\r\nFollowing these principles will make your function easier to call, easier to understand, and easier to implement.</p>\n<p>Let’s consider a function that returns the length of a string or an array:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(arr: any[]): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: any' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: any' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGwKZgBQGcBcitQBOMYA5gJR5ggC2ARqoQNwCwAUKJLAiuhgIaFCefmACeAbQC6lRNXqNWHcNHhI0mAB4jx5RAG92iRIVRQQhJJoB0G0lAAWSgL5A'>Try</a></div></pre>\n<p>This function is fine; we can invoke it with strings or arrays.\r\nHowever, we can’t invoke it with a value that might be a string <em>or</em> an array, because TypeScript can only resolve a function call to a single overload:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function len(arr: any[]): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &gt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>No overload matches this call.\n  Overload 1 of 2, '(s: string): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'string'.\n      Type 'number[]' is not assignable to type 'string'.\n  Overload 2 of 2, '(arr: any[]): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'any[]'.\n      Type 'string' is not assignable to type 'any[]'.</span><span class=\"code\">2769</span></span><span class=\"error-behind\">No overload matches this call.\n  Overload 1 of 2, '(s: string): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'string'.\n      Type 'number[]' is not assignable to type 'string'.\n  Overload 2 of 2, '(arr: any[]): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'any[]'.\n      Type 'string' is not assignable to type 'any[]'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYBsBOAsAFAAmkAxgDYCG0koAZgK4B2pALgJZxOjmRMAUKUIlbR2TAOYBKVEwYBbAEYwA3IRIVqtRiw5cefftWipKTAJ4BtALozQcpasIhQAWnekGrd68K8BAEQBUiqgLgDyANJ+hpYADLahEdEE-vwAspSsABYAdNBmRHDy-FKgAHygcbkArKAA-KAB2ZDk5HABoKjxiUA'>Try</a></div></pre>\n<p>Because both overloads have the same argument count and same return type, we can instead write a non-overloaded version of the function:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(x: any[] | string): number' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | any[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | any[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGwKZgBQA8BciCGYAngNoC6iAPogM5QBOMYA5gJSIDeAsAFCKL1UUEPSRYAdGhZQAFgG5eAXyA'>Try</a></div></pre>\n<p>This is much better!\r\nCallers can invoke this with either sort of value, and as an added bonus, we don’t have to figure out a correct implementation signature.</p>\n<blockquote>\n<p>Always prefer parameters with union types instead of overloads when possible</p>\n</blockquote>\n<h3 id=\"declaring-this-in-a-function\" style=\"position:relative;\"><a href=\"#declaring-this-in-a-function\" aria-label=\"declaring this in a function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaring <code>this</code> in a Function</h3>\n<p>TypeScript will infer what the <code>this</code> should be in a function via code flow analysis, for example in the following:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: {&#10;    id: number;&#10;    admin: boolean;&#10;    becomeAdmin: () => void;&#10;}' >user</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">,</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) admin: boolean' >admin</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) becomeAdmin: () => void' >becomeAdmin</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) admin: boolean' >admin</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBArhApgJxgXhgbwLACgYwCWAJgFwwCMATAMwA0eeBAhsQLaFjkBmzANkgb4YAI0Sg2iAILtOPOGGBRC4GAAoAlFiYEYUABaEIAOlYcw6PcjiIA3DoC+Qh7aA'>Try</a></div></pre>\n<p>TypeScript understands that the function <code>user.becomeAdmin</code> has a corresponding <code>this</code> which is the outer object <code>user</code>. <code>this</code>, <em>heh</em>, can be enough for a lot of cases, but there are a lot of cases where you need more control over what object <code>this</code> represents. The JavaScript specification states that you cannot have a parameter called <code>this</code>, and so TypeScript uses that syntax space to let you declare the type for <code>this</code> in the function body.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface DB' >DB</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) filter: (this: User) => boolean' >filter</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: User' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const getDB: () => DB' >getDB</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const admins: User[]' >admins</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: User' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) User.admin: boolean' >admin</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGdrIN4FgBQyywAJgFzIgCuAtgEbQDcBRcJNoFdA9twDYQ4IZvgC+BEhAR84UFAm4h0YZAHMIYACIAhCgAoAlMgC8APmQ6RAeivIAtA4RUwDuwVCRYiFDpwtkMMB8nhjQ6HqBwdD6YAAWwOgUoVBGZsg8-IIgBkmYUADaALoi4vgECkoqJHQmaho6hiIVyshsHEq11QB0kSF54TBUIAhgwIrIenEJudBGeITIcmBUUCDIU+hdbaAlBoxAA'>Try</a></div></pre>\n<p>This pattern is common with callback-style APIs, where another object typically controls when your function is called. Note that you need to use <code>function</code> and not arrow functions to get this behavior:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface DB' >DB</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) filter: (this: User) => boolean' >filter</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: User' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const getDB: () => DB' >getDB</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const admins: User[]' >admins</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >admin</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>The containing arrow function captures the global value of 'this'.</br>Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.</span><span class=\"code\">7041<br/>7017</span></span><span class=\"error-behind\">The containing arrow function captures the global value of 'this'.</br>Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYAsBGdGc0BYAKAEsA7AFxgDMBDAY0lAFVEZQBvU0UMgCaoKAVwC2AIxgBuXv0QBBAWMqoJcOABtI9CrJIBfUgMiNN9aC0ZwKiKqADmkKgBEAQqgAUASlABeAD5Qd30QUABaSMYRKkjw0koaaAZmYLduOVoyTST2GERPLJyYLyoACzIUNg5oX0DQdS0dCm9UPOgAbQBdfSMSUmtbewEJf0dndx99QbtQemVKRDGRgDoi3JqCn38g8sqV+ZUW6SA'>Try</a></div></pre>\n<h2 id=\"other-types-to-know-about\" style=\"position:relative;\"><a href=\"#other-types-to-know-about\" aria-label=\"other types to know about permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Types to Know About</h2>\n<p>There are some additional types you’ll want to recognize that appear often when working with function types.\r\nLike all types, you can use them everywhere, but these are especially relevant in the context of functions.</p>\n<h3 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code></h3>\n<p><code>void</code> represents the return value of functions which don’t return a value.\r\nIt’s the inferred type any time a function doesn’t have any <code>return</code> statements, or doesn’t return any explicit value from those return statements:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// The inferred return type is void</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function noop(): void' >noop</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEBUAsFNQSwHYDNoCdXQCagwFwK6oKi4CeADrHAM6gBuA9nJgLABQS+CAxrnA8QQMG5ABQBKUAG92oHNAJEA3OwC+QA'>Try</a></div></pre>\n<p>In JavaScript, a function that doesn’t return any value will implicitly return the value <code>undefined</code>.\r\nHowever, <code>void</code> and <code>undefined</code> are not the same thing in TypeScript.\r\nThere are further details at the end of this chapter.</p>\n<blockquote>\n<p><code>void</code> is not the same as <code>undefined</code>.</p>\n</blockquote>\n<h3 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>object</code></h3>\n<p>The special type <code>object</code> refers to any value that isn’t a primitive (<code>string</code>, <code>number</code>, <code>bigint</code>, <code>boolean</code>, <code>symbol</code>, <code>null</code>, or <code>undefined</code>).\r\nThis is different from the <em>empty object type</em> <code>{ }</code>, and also different from the global type <code>Object</code>.\r\nIt’s very likely you will never use <code>Object</code>.</p>\n<blockquote>\n<p><code>object</code> is not <code>Object</code>. <strong>Always</strong> use <code>object</code>!</p>\n</blockquote>\n<p>Note that in JavaScript, function values are objects: They have properties, have <code>Object.prototype</code> in their prototype chain, are <code>instanceof Object</code>, you can call <code>Object.keys</code> on them, and so on.\r\nFor this reason, function types are considered to be <code>object</code>s in TypeScript.</p>\n<h3 id=\"unknown\" style=\"position:relative;\"><a href=\"#unknown\" aria-label=\"unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unknown</code></h3>\n<p>The <code>unknown</code> type represents <em>any</em> value.\r\nThis is similar to the <code>any</code> type, but is safer because it’s not legal to do anything with an <code>unknown</code> value:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f1(a: any): void' >f1</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >b</data-lsp></span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f2(a: unknown): void' >f2</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: unknown' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: unknown' >a</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >b</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>Object is of type 'unknown'.</span><span class=\"code\">2571</span></span><span class=\"error-behind\">Object is of type 'unknown'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsBGAsAFABmArgHYDGALgJZxmhE4AUAhqq2QJ4CUoA3oVChWAOgBGzHgG5QIUAHkA0oQC+hUpVr1GaNqnIBrMnADuZPoILCxkmWqA'>Try</a></div></pre>\n<p>This is useful when describing function types because you can describe functions that accept any value without having <code>any</code> values in your function body.</p>\n<p>Conversely, you can describe a function that returns a value of unknown type:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function safeParse(s: string): unknown' >safeParse</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var JSON: JSON' >JSON</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) JSON.parse(text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined): any' >parse</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Need to be careful with &apos;obj&apos;!</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: unknown' >obj</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function safeParse(s: string): unknown' >safeParse</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const someRandomString: string' >someRandomString</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3mpBbEASlCsHgMoYwCWKA5gFzaU20DcAsAFAD038AtILABXDIP5cAZsJRgMVVNiiSQABVhoQACjSNM1OgEpGMgNYokAdxTwA3l3jw4GYTBsApMgHkAcgDoABw1tNEMOTgBfLi5eeB8QEGB4DCR4ACMEMFgQaQh4SyoMAAt4AHIkNIArUoBCLmR0LArK+ABeJRV1GE0dPEJiUlwKA1owoA'>Try</a></div></pre>\n<h3 id=\"never\" style=\"position:relative;\"><a href=\"#never\" aria-label=\"never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>never</code></h3>\n<p>Some functions <em>never</em> return a value:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fail(msg: string): never' >fail</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) msg: string' >msg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) msg: string' >msg</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAhjANgCgLYGcDmAXIrlAE4xj4CUxYApgG71mIDeAsAFCKJQAWZOAHdEDUQFEyQsjgLUA3NwC+QA'>Try</a></div></pre>\n<p>The <code>never</code> type represents values which are <em>never</em> observed.\r\nIn a return type, this means that the function throws an exception or terminates execution of the program.</p>\n<p><code>never</code> also appears when TypeScript determines there’s nothing left in a union.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string | number): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do something</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do something else</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: never' >x</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// has type &apos;never&apos;!</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMMAKAHgLkQZygJxjAHNEAfRMEAWwCMBTfASkQG8BYAKEURmEVRQAngAd6cfukQBeWYgBEeQiXksO3HogD0WxABM4uONXpQAFkWJceAX0T0ANjnq9+g0eMky58qnUaqbNaaOvqGOMamFiT2TvTBdo7OQRo86ADc2rpmAIY4iMJiiADkYPQAbozFAIQJXDZAA'>Try</a></div></pre>\n<h3 id=\"function\" style=\"position:relative;\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Function</code></h3>\n<p>The global type <code>Function</code> describes properties like <code>bind</code>, <code>call</code>, <code>apply</code>, and others present on all function values in JavaScript.\r\nIt also has the special property that values of type <code>Function</code> can always be called; these calls return <code>any</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(f: Function): any' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) f: Function' >f</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Function' >Function</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) f: Function' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFMAFyIBi408YAlIgN4CwAUIogE64jdJgJAIwAaRACZxAZgYBuDgF8gA'>Try</a></div></pre>\n<p>This is an <em>untyped function call</em> and is generally best avoided because of the unsafe <code>any</code> return type.</p>\n<p>If you need to accept an arbitrary function but don’t intend to call it, the type <code>() => void</code> is generally safer.</p>\n<h2 id=\"rest-parameters-and-arguments\" style=\"position:relative;\"><a href=\"#rest-parameters-and-arguments\" aria-label=\"rest parameters and arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Parameters and Arguments</h2>\n<blockquote class='bg-reading'>\r\n   <p>Background Reading:<br />\r\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters'>Rest Parameters</a><br/>\r\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax'>Spread Syntax</a><br/>\r\n   </p>\r\n</blockquote>\n<h3 id=\"rest-parameters\" style=\"position:relative;\"><a href=\"#rest-parameters\" aria-label=\"rest parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Parameters</h3>\n<p>In addition to using optional parameters or overloads to make functions that can accept a variety of fixed argument counts, we can also define functions that take an <em>unbounded</em> number of arguments using <em>rest parameters</em>.</p>\n<p>A rest parameter appears after all other parameters, and uses the <code>...</code> syntax:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function multiply(n: number, ...m: number[]): number[]' >multiply</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) m: number[]' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) m: number[]' >m</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.map&lt;number>(callbackfn: (value: number, index: number, array: number[]) => number, thisArg?: any): number[]' >map</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// &apos;a&apos; gets value [10, 20, 30, 40]</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number[]' >a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function multiply(n: number, ...m: number[]): number[]' >multiply</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWxAG1gBzQTwBRgBciYIyARgKYBOANIgHRPLGkU0DaAugJSIDeAWABQiRNUpQQ1JMgbIAhpjx4AHnwC8APhKIAVInUBuEQF8RAeguIA5ApuIA5pIDOiAG4K0ISog4BGAAZ6ACZgxABmcIAWQK4RCAQXKEQFRA0UdCxcPCD6f1D6CPponiMgA'>Try</a></div></pre>\n<p>In TypeScript, the type annotation on these parameters is implicitly <code>any[]</code> instead of <code>any</code>, and any type annotation given must be of the form <code>Array&#x3C;T></code>or <code>T[]</code>, or a tuple type (which we’ll learn about later).</p>\n<h3 id=\"rest-arguments\" style=\"position:relative;\"><a href=\"#rest-arguments\" aria-label=\"rest arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Arguments</h3>\n<p>Conversely, we can <em>provide</em> a variable number of arguments from an array using the spread syntax.\r\nFor example, the <code>push</code> method of arrays takes any number of arguments:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr1: number[]' >arr1</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr2: number[]' >arr2</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const arr1: number[]' >arr1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='const arr2: number[]' >arr2</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhgJwQRhgXhgbWQGhgJjwGYBdAbgFgAoUSWRBfdLAFjwFY8A2c6h5AHQAHAK4QAFgAoBMhvgCUZIA'>Try</a></div></pre>\n<p>Note that in general, TypeScript does not assume that arrays are immutable.\r\nThis can lead to some surprising behavior:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Inferred type is number[] -- \"an array with zero or more numbers\",</span></div><div class='line'><span style=\"color: #008000\">// not specifically two numbers</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const args: number[]' >args</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const angle: number' >angle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.atan2(y: number, x: number): number' >atan2</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='const args: number[]' >args</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>A spread argument must either have a tuple type or be passed to a rest parameter.</span><span class=\"code\">2556</span></span><span class=\"error-behind\">A spread argument must either have a tuple type or be passed to a rest parameter.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMDYCwAoEUASQDsAzGaSAE1ABcBPAB0lAEtFRSBXAWwBGMANoBdUAFoJoAEQBDUqDmw5jUAHd29ABagAXjDigEoPgja9BMRDIA0BIqTj1QiVgGN25du7kAbPzV6dSNLISQCdzhSRBdlAHMuAF5QYQAOW1AMUQBuSOjYpVJ4vzYUgFk5HQA6KoU0AApq5oTEAEocoA'>Try</a></div></pre>\n<p>The best fix for this situation depends a bit on your code, but in general a <code>const</code> context is the most straightforward solution:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Inferred as 2-length tuple</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const args: readonly [8, 5]' >args</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='type const = readonly [8, 5]' >const</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const angle: number' >angle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.atan2(y: number, x: number): number' >atan2</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='const args: readonly [8, 5]' >args</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEEkDsDMFMCd6wCagIYGdQCYC0AbWSAcwBcALUUgVwAdCBYAKAGMB7SDU9eYrAXlABtABwAaUAFYAuuiztOpANzMQoAPIBpZgq7oShUIICyaCgDozaSNgAU5h2l4YAlEqA'>Try</a></div></pre>\n<p>Using rest arguments may require turning on <a href=\"/tsconfig#downlevelIteration\"><code>downlevelIteration</code></a> when targeting older runtimes.</p>\n<!-- TODO link to downlevel iteration -->\n<h2 id=\"parameter-destructuring\" style=\"position:relative;\"><a href=\"#parameter-destructuring\" aria-label=\"parameter destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Destructuring</h2>\n<blockquote class='bg-reading'>\r\n   <p>Background Reading:<br />\r\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment'>Destructuring Assignment</a><br/>\r\n   </p>\r\n</blockquote>\n<p>You can use parameter destructuring to conveniently unpack objects provided as an argument into one or more local variables in the function body.\r\nIn JavaScript, it looks like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\"> });</span></div></code></div></pre>\n<p>The type annotation for the object goes after the destructuring syntax:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sum({ a, b, c }: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;}): void' >sum</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\"> }: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) c: number' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAZxAWwBQG9EEMA0iARoRIgL4BciOu1Y6RApgE4Dcx9jrHEXazFhQCUNALAAoRIggJkcADZMAdArgBzDLkQBqYrpnC2k8kA'>Try</a></div></pre>\n<p>This can look a bit verbose, but you can use a named type here as well:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Same as prior example</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ABC = {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;}' >ABC</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) c: number' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sum({ a, b, c }: ABC): void' >sum</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\"> }: </span><span style=\"color: #1C6277\"><data-lsp lsp='type ABC = {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;}' >ABC</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEGUEMFsFNUgZ1ABwE4EsD2bSwB4woA2sAsAFAAuAnivAIIBCAwqALygDeCAXKADsArtABGsNAG5Qo-sLETpAYzkjxuAL6TKAMyEClVbANCIRACh6QANDNtLQG-sxYBKbpVCglWAYiykAHTEWADm5pCgANQy0d6u2hQaQA'>Try</a></div></pre>\n<h2 id=\"assignability-of-functions\" style=\"position:relative;\"><a href=\"#assignability-of-functions\" aria-label=\"assignability of functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignability of Functions</h2>\n<h3 id=\"return-type-void\" style=\"position:relative;\"><a href=\"#return-type-void\" aria-label=\"return type void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return type <code>void</code></h3>\n<p>The <code>void</code> return type for functions can produce some unusual, but expected behavior.</p>\n<p>Contextual typing with a return type of <code>void</code> does <strong>not</strong> force functions to <strong>not</strong> return something. Another way to say this is a contextual function type with a <code>void</code> return type (<code>type vf = () => void</code>), when implemented, can return <em>any</em> other value, but it will be ignored.</p>\n<p>Thus, the following implementations of the type <code>() => void</code> are valid:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f1: voidFunc' >f1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f2: voidFunc' >f2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f3: voidFunc' >f3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAbg9gSwCYDECuA7AxlAvFACgEo8A+WRJAbgFgAoerODAZ2CgDMBGALguXTY8hErnIBvelCgAnCMDQyMUYDLQRadAL6bGzNpwBMfeAMw58xMirUb6e1uw4BmE5UEXO54AmYioknTScgpKNuqaOkA'>Try</a></div></pre>\n<p>And when the return value of one of these functions is assigned to another variable, it will retain the type of <code>void</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const v1: void' >v1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const f1: () => void' >f1</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const v2: void' >v2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const f2: () => void' >f2</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const v3: void' >v3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const f3: () => void' >f3</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAbg9gSwCYDECuA7AxlAvFACgEo8A+WRJAbgFgAoerODAZ2CgDMBGALguXTY8hErnIBvelCgAnCMDQyMUYDLQRadAL6bGzNpwBMfeAMw58xMirUb6e1uw4BmE5UEXO54AmYioknTScgpKNuqaOvQA9NFQALSJWGjAifEOBjBcwtzEunRMjrCGOYZ59gX67DDOOc55QA'>Try</a></div></pre>\n<p>This behavior exists so that the following code is valid even though <code>Array.prototype.push</code> returns a number and the <code>Array.prototype.forEach</code> method expects a function with a return type of <code>void</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const src: number[]' >src</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dst: number[]' >dst</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const src: number[]' >src</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.forEach(callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) el: number' >el</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dst: number[]' >dst</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) el: number' >el</data-lsp></span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBBBOwYF4YG0CMAaGAmHAzALoDcAsAFCiSwAm0K6ADKZZQsAHQBmI8AogENgACwAUYgKYAbAJQoAfDHpROABwCuEcTNmySQA'>Try</a></div></pre>\n<p>There is one other special case to be aware of, when a literal function definition has a <code>void</code> return type, that function must <strong>not</strong> return anything.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f2(): void' >f2</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f3: () => void' >f3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMATACgJQC5EDc4wAmiA3gLABQiiA9DYgAJQDOAtAKYAeADu9BwCcBcAZWoD2UEAKRQBIdgG5KAX0qUICZlGQBmRAF5k4aPCSYc+IqTG16TNl1792QkbYlSZiOQuUUVRSA'>Try</a></div></pre>\n<p>For more on <code>void</code> please refer to these other documentation entries:</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#void\">v1 handbook</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#void\">v2 handbook</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-functions-returning-non-void-assignable-to-function-returning-void\">FAQ - “Why are functions returning non-void assignable to function returning void?”</a></li>\n</ul>","headings":[{"value":"Function Type Expressions","depth":2},{"value":"Call Signatures","depth":2},{"value":"Construct Signatures","depth":2},{"value":"Generic Functions","depth":2},{"value":"Inference","depth":3},{"value":"Constraints","depth":3},{"value":"Working with Constrained Values","depth":3},{"value":"Specifying Type Arguments","depth":3},{"value":"Guidelines for Writing Good Generic Functions","depth":3},{"value":"Push Type Parameters Down","depth":4},{"value":"Use Fewer Type Parameters","depth":4},{"value":"Type Parameters Should Appear Twice","depth":4},{"value":"Optional Parameters","depth":2},{"value":"Optional Parameters in Callbacks","depth":3},{"value":"Function Overloads","depth":2},{"value":"Overload Signatures and the Implementation Signature","depth":3},{"value":"Writing Good Overloads","depth":3},{"value":"Declaring this in a Function","depth":3},{"value":"Other Types to Know About","depth":2},{"value":"void","depth":3},{"value":"object","depth":3},{"value":"unknown","depth":3},{"value":"never","depth":3},{"value":"Function","depth":3},{"value":"Rest Parameters and Arguments","depth":2},{"value":"Rest Parameters","depth":3},{"value":"Rest Arguments","depth":3},{"value":"Parameter Destructuring","depth":2},{"value":"Assignability of Functions","depth":2},{"value":"Return type void","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/functions.html","title":"More on Functions","disable_toc":null,"handbook":null,"oneline":"Learn about how Functions work in TypeScript.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Narrowing","oneline":"Understand how TypeScript uses JavaScript knowledge to reduce the amount of type syntax in your projects.","permalink":"/docs/handbook/2/narrowing.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Object Types","oneline":"How TypeScript describes the shapes of JavaScript objects.","permalink":"/docs/handbook/2/objects.html"}}}},"pageContext":{"id":"1-more-on-functions","slug":"/docs/handbook/2/functions.html","repoPath":"/packages/documentation/copy/en/handbook-v2/More on Functions.md","previousID":"f89ff230-961f-5a3e-8344-16d0f7f8b69b","nextID":"a0841346-823e-522d-bef3-f25968cb7f82","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}