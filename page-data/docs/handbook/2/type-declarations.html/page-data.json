{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/type-declarations.html","result":{"data":{"markdownRemark":{"id":"121a3fdd-5500-5801-8121-cc6356b8aab9","excerpt":"Throughout the sections you’ve read so far, we’ve been demonstrating basic TypeScript concepts using the built-in functions present in all JavaScript runtimes…","html":"<p>Throughout the sections you’ve read so far, we’ve been demonstrating basic TypeScript concepts using the built-in functions present in all JavaScript runtimes.\r\nHowever, almost all JavaScript today includes many libraries to accomplish common tasks.\r\nHaving types for the parts of your application that <em>aren’t</em> your code will greatly improve your TypeScript experience.\r\nWhere do these types come from?</p>\n<h2 id=\"what-do-type-declarations-look-like\" style=\"position:relative;\"><a href=\"#what-do-type-declarations-look-like\" aria-label=\"what do type declarations look like permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Do Type Declarations Look Like?</h2>\n<p>Let’s say you write some code like this:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const k: number' >k</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.max(...values: number[]): number' >max</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const j: any' >j</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >mix</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'mix' does not exist on type 'Math'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'mix' does not exist on type 'Math'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4CwAoAYzgDtEAXUAa1AF5QBZAQ3IAsA6AWyYA8AKAKwAaUADYAlAG4CxMpQBWdRiw6cAlvwDsIgBxSgA'>Try</a></div></pre>\n<p>How did TypeScript know that <code>max</code> was present but not <code>mix</code>, even though <code>Math</code>’s implementation wasn’t part of your code?</p>\n<p>The answer is that there are <em>declaration files</em> describing these built-in objects.\r\nA declaration file provides a way to <em>declare</em> the existence of some types or values without actually providing implementations for those values.</p>\n<h2 id=\"dts-files\" style=\"position:relative;\"><a href=\"#dts-files\" aria-label=\"dts files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>.d.ts</code> files</h2>\n<p>TypeScript has two main kinds of files.\r\n<code>.ts</code> files are <em>implementation</em> files that contain types and executable code.\r\nThese are the files that produce <code>.js</code> outputs, and are where you’d normally write your code.</p>\n<p><code>.d.ts</code> files are <em>declaration</em> files that contain <em>only</em> type information.\r\nThese files don’t produce <code>.js</code> outputs; they are only used for typechecking.\r\nWe’ll learn more about how to write our own declaration files later.</p>\n<h2 id=\"built-in-type-definitions\" style=\"position:relative;\"><a href=\"#built-in-type-definitions\" aria-label=\"built in type definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in Type Definitions</h2>\n<p>TypeScript includes declaration files for all of the standardized built-in APIs available in JavaScript runtimes.\r\nThis includes things like methods and properties of built-in types like <code>string</code> or <code>function</code>, top-level names like <code>Math</code> and <code>Object</code>, and their associated types.\r\nBy default, TypeScript also includes types for things available when running inside the browser, such as <code>window</code> and <code>document</code>; these are collectively referred to as the DOM APIs.</p>\n<p>TypeScript names these declaration files with the pattern <code>lib.[something].d.ts</code>.\r\nIf you navigate into a file with that name, you can know that you’re dealing with some built-in part of the platform, not user code.</p>\n<h3 id=\"target-setting\" style=\"position:relative;\"><a href=\"#target-setting\" aria-label=\"target setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>target</code> setting</h3>\n<p>The methods, properties, and functions available to you actually vary based on the <em>version</em> of JavaScript your code is running on.\r\nFor example, the <code>startsWith</code> method of strings is available only starting with the version of JavaScript referred as <em>ECMAScript 6</em>.</p>\n<p>Being aware of what version of JavaScript your code ultimately runs on is important because you don’t want to use APIs that are from a newer version than the platform you deploy to.\r\nThis is one function of the <a href=\"/tsconfig#target\"><code>target</code></a> compiler setting.</p>\n<p>TypeScript helps with this problem by varying which <code>lib</code> files are included by default based on your <a href=\"/tsconfig#target\"><code>target</code></a> setting.\r\nFor example, if <a href=\"/tsconfig#target\"><code>target</code></a> is <code>ES5</code>, you will see an error if trying to use the <code>startsWith</code> method, because that method is only available in <code>ES6</code> or later.</p>\n<h3 id=\"lib-setting\" style=\"position:relative;\"><a href=\"#lib-setting\" aria-label=\"lib setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib</code> setting</h3>\n<p>The <a href=\"/tsconfig#lib\"><code>lib</code></a> setting allows more fine-grained control of which built-in declaration files are considered available in your program.\r\nSee the documentation page on <a href=\"/tsconfig#lib\"><code>lib</code></a> for more information.</p>\n<h2 id=\"external-definitions\" style=\"position:relative;\"><a href=\"#external-definitions\" aria-label=\"external definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>External Definitions</h2>\n<p>For non-built-in APIs, there are a variety of ways you can get declaration files.\r\nHow you do this depends on exactly which library you’re getting types for.</p>\n<h3 id=\"bundled-types\" style=\"position:relative;\"><a href=\"#bundled-types\" aria-label=\"bundled types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bundled Types</h3>\n<p>If a library you’re using is published as an npm package, it may include type declaration files as part of its distribution already.\r\nYou can read the project’s documentation to find out, or simply try importing the package and see if TypeScript is able to automatically resolve the types for you.</p>\n<p>If you’re a package author considering bundling type definitions with your package, you can read our guide on <a href=\"/docs/handbook/declaration-files/publishing.html#including-declarations-in-your-npm-package\">bundling type definitions</a>.</p>\n<h3 id=\"definitelytyped--types\" style=\"position:relative;\"><a href=\"#definitelytyped--types\" aria-label=\"definitelytyped  types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DefinitelyTyped / <code>@types</code></h3>\n<p>The <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/\">DefinitelyTyped repository</a> is a centralized repo storing declaration files for thousands of libraries.\r\nThe vast majority of commonly-used libraries have declaration files available on DefinitelyTyped.</p>\n<p>Definitions on DefinitelyTyped are also automatically published to npm under the <code>@types</code> scope.\r\nThe name of the types package is always the same as the name of the underlying package itself.\r\nFor example, if you installed the <code>react</code> npm package, you can install its corresponding types by running</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm install --save-dev @types/react</span></div></code></div></pre>\n<p>TypeScript automatically finds type definitions under <code>node_modules/@types</code>, so there’s no other step needed to get these types available in your program.</p>\n<h3 id=\"your-own-definitions\" style=\"position:relative;\"><a href=\"#your-own-definitions\" aria-label=\"your own definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your Own Definitions</h3>\n<p>In the uncommon event that a library didn’t bundle its own types and didn’t have a definition on DefinitelyTyped, you can write a declaration file yourself.\r\nSee the appendix <a href=\"/docs/handbook/declaration-files/introduction.html\">Writing Declaration Files</a> for a guide.</p>\n<p>If you want to silence warnings about a particular module without writing a declaration file, you can also quick declare the module as type <code>any</code> by putting an empty declaration for it in a <code>.d.ts</code> file in your project.\r\nFor example, if you wanted to use a module named <code>some-untyped-module</code> without having definitions for it, you would write:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-untyped-module\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBAiAzsxIAtGgHYAuAngA4jCErqZYDcQA'>Try</a></div></pre>","headings":[{"value":"What Do Type Declarations Look Like?","depth":2},{"value":".d.ts files","depth":2},{"value":"Built-in Type Definitions","depth":2},{"value":"target setting","depth":3},{"value":"lib setting","depth":3},{"value":"External Definitions","depth":2},{"value":"Bundled Types","depth":3},{"value":"DefinitelyTyped / @types","depth":3},{"value":"Your Own Definitions","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/type-declarations.html","title":"Type Declarations","disable_toc":null,"handbook":null,"oneline":"How TypeScript provides types for un-typed JavaScript.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"slug":"/docs/handbook/2/type-declarations.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Declarations.md","lang":"en","modifiedTime":"2023-02-21T11:32:56.850Z"}},"staticQueryHashes":[]}