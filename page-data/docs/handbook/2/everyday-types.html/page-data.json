{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/everyday-types.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/pt/docs/handbook/tsconfig-json.html"},{"path":"/pt/docs/handbook/Decorators.html"},{"path":"/pt/docs/handbook/module-resolution.html"},{"path":"/pt/docs/handbook/namespaces.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/2/conditional-types.html"},{"path":"/docs/handbook/2/indexed-access-types.html"},{"path":"/docs/handbook/2/typeof-types.html"},{"path":"/docs/handbook/2/types-from-types.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/pt/docs/handbook/symbols.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/zh/tsconfig"},{"path":"/play"},{"path":"/fa/play"},{"path":"/id/play"},{"path":"/ja/play"},{"path":"/zh/play"},{"path":"/es/play"},{"path":"/ko/play"},{"path":"/pt/play"},{"path":"/vo/play"},{"path":"/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/play/3-7/fixits/const-to-let.ts.html"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/play/javascript/working-with-classes/this.ts.html"},{"path":"/play/playground/config/javascript-playgrounds.js.html"},{"path":"/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/play/playground/language/fixits.ts.html"},{"path":"/play/typescript/language/soundness.ts.html"},{"path":"/play/typescript/language/structural-typing.ts.html"},{"path":"/play/typescript/language/type-guards.ts.html"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/play/playground/tooling/mobile-support.ts.html"},{"path":"/play/playground/tooling/sharable-urls.ts.html"},{"path":"/play/playground/tooling/typescript-versions.ts.html"},{"path":"/play/typescript/language-extensions/enums.ts.html"},{"path":"/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/play/typescript/primitives/any.ts.html"},{"path":"/play/typescript/primitives/literals.ts.html"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/play/typescript/type-primitives/tuples.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/es/play/typescript/language/soundness.ts.html"},{"path":"/es/play/typescript/language/structural-typing.ts.html"},{"path":"/es/play/typescript/language/type-guards.ts.html"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/es/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/es/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/es/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/es/play/typescript/primitives/any.ts.html"},{"path":"/es/play/typescript/primitives/literals.ts.html"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/es/play/typescript/type-primitives/tuples.ts.html"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/id/play/3-7/fixits/const-to-let.ts.html"},{"path":"/id/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/recursive-type-reference.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/id/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/id/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/id/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/id/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/id/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/id/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/id/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/id/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/id/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/id/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/id/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/id/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ja/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/ja/play/typescript/language-extensions/enums.ts.html"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ja/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/ja/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/ja/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/ja/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/ja/play/typescript/primitives/any.ts.html"},{"path":"/ja/play/typescript/primitives/literals.ts.html"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/tuples.ts.html"},{"path":"/ko/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ko/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ko/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ko/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/ko/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/ko/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/ko/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/ko/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/ko/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/ko/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/ko/play/typescript/language-extensions/enums.ts.html"},{"path":"/ko/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ko/play/typescript/primitives/any.ts.html"},{"path":"/ko/play/typescript/primitives/literals.ts.html"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/pt/play/3-7/fixits/const-to-let.ts.html"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/pt/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/pt/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/pt/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/pt/play/javascript/working-with-classes/this.ts.html"},{"path":"/pt/play/playground/config/javascript-playgrounds.js.html"},{"path":"/pt/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/pt/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/pt/play/playground/language/fixits.ts.html"},{"path":"/pt/play/playground/tooling/mobile-support.ts.html"},{"path":"/pt/play/playground/tooling/sharable-urls.ts.html"},{"path":"/pt/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/enums.ts.html"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/pt/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/pt/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/pt/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/pt/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/pt/play/typescript/primitives/any.ts.html"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/language/structural-typing.ts.html"},{"path":"/pt/play/typescript/language/type-guards.ts.html"},{"path":"/pt/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/pt/play/typescript/primitives/literals.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/zh/play/javascript/working-with-classes/this.ts.html"},{"path":"/zh/play/playground/config/javascript-playgrounds.js.html"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/zh/play/playground/language/fixits.ts.html"},{"path":"/zh/play/playground/tooling/mobile-support.ts.html"},{"path":"/zh/play/playground/tooling/sharable-urls.ts.html"},{"path":"/zh/play/playground/tooling/typescript-versions.ts.html"},{"path":"/zh/play/typescript/language/soundness.ts.html"},{"path":"/zh/play/typescript/language/structural-typing.ts.html"},{"path":"/zh/play/typescript/language/type-guards.ts.html"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/zh/play/typescript/language-extensions/enums.ts.html"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/zh/play/typescript/primitives/any.ts.html"},{"path":"/zh/play/typescript/primitives/literals.ts.html"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pl/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pl/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pl/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pl/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pl/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pl/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pl/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pl/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pl/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pl/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/upcoming/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"}]},"markdownRemark":{"id":"2684e6ff-92df-5687-bb88-bd037cfe28d7","excerpt":"In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corresponding ways to describe those types…","html":"<!-- Extremely WIP, do not review -->\n<p>In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corresponding ways to describe those types in TypeScript.\nThis isn’t an exhaustive list, and future chapters will describe more ways to name and use other types.</p>\n<p>Types can also appear in many more <em>places</em> than just type annotations.\nAs we learn about the types themselves, we’ll also learn about the places where we can refer to these types to form new constructs.</p>\n<p>We’ll start by reviewing the most basic and common types you might encounter when writing JavaScript or TypeScript code.\nThese will later form the core “building blocks” of more complex types.</p>\n<h2 id=\"the-primitives-string-number-and-boolean\" style=\"position:relative;\"><a href=\"#the-primitives-string-number-and-boolean\" aria-label=\"the primitives string number and boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The primitives: <code>string</code>, <code>number</code>, and <code>boolean</code></h2>\n<p>JavaScript has three very commonly used <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive</a> kinds of values: <code>string</code>, <code>number</code>, and <code>boolean</code>.\nEach has a corresponding type in TypeScript.\nAs you might expect, these are the same names you’d see if you used the JavaScript <code>typeof</code> operator on a value of those types:</p>\n<ul>\n<li><code>string</code> represents string values like <code>\"Hello, world\"</code></li>\n<li><code>number</code> is for numbers like <code>42</code>. JavaScript does not have a special runtime value for integers, so there’s no equivalent to <code>int</code> or <code>float</code> - everything is simply <code>number</code></li>\n<li><code>boolean</code> is for the two values <code>true</code> and <code>false</code></li>\n</ul>\n<blockquote>\n<p>The type names <code>String</code>, <code>Number</code>, and <code>Boolean</code> (starting with capital letters) are legal, but refer to some special built-in types that shouldn’t appear in your code. <em>Always</em> use <code>string</code>, <code>number</code>, or <code>boolean</code>.</p>\n</blockquote>\n<h2 id=\"arrays\" style=\"position:relative;\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays</h2>\n<p>To specify the type of an array like <code>[1, 2, 3]</code>, you can use the syntax <code>number[]</code>; this syntax works for any type (e.g. <code>string[]</code> is an array of strings, and so on).\nYou may also see this written as <code>Array&#x3C;number></code>, which means the same thing.\nWe’ll learn more about the syntax <code>T&#x3C;U></code> when we cover <em>generics</em>.</p>\n<blockquote>\n<p>Note that <code>[number]</code> is a different thing; refer to the section on <em>tuple types</em>.</p>\n</blockquote>\n<h2 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code></h2>\n<p>TypeScript also has a special type, <code>any</code>, that you can use whenever you don’t want a particular value to cause typechecking errors.</p>\n<p>When a value is of type <code>any</code>, you can access any properties of it (which will in turn be of type <code>any</code>), call it like a function, assign it to (or from) a value of any type, or pretty much anything else that’s syntactically legal:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let obj: any'>obj</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> any </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #008000\">// None of these lines of code are errors</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let obj: any'>obj</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='any'>foo</data-lsp>();</span>\n<span style=\"color: #000000\"><data-lsp lsp='let obj: any'>obj</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let obj: any'>obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>bar</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let obj: any'>obj</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n: number'>n</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let obj: any'>obj</data-lsp></span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBA9gRgVgLggQwHYE8IF4IG8IAeSADBAL4DcAUAPQ0QByUqI0AZhGABYgDOrwAJYte7CAGMoAE1bIATqxBy5UObyqw4AOjZQoACgCU1TUZPwtMedggBGYsXNwbAIh7BgUF9UmpekVCRUAFcAWxglG00KIA'>Try</a></div></pre>\n<p>The <code>any</code> type is useful when you don’t want to write out a long type just to convince TypeScript that a particular line of code is okay.</p>\n<h3 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h3>\n<p>When a type isn’t specified and can’t be inferred from context, TypeScript will typically default to <code>any</code>.\nBecause <code>any</code> values don’t benefit from type-checking, it’s usually desirable to avoid these situations.\nThe compiler flag <code>noImplicitAny</code> will cause any <em>implicit</em> <code>any</code> to be flagged as an error.</p>\n<h2 id=\"type-annotations-on-variables\" style=\"position:relative;\"><a href=\"#type-annotations-on-variables\" aria-label=\"type annotations on variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Annotations on Variables</h2>\n<p>When you declare a variable using <code>const</code>, <code>var</code>, or <code>let</code>, you can optionally add a type annotation to explicitly specify the type of the variable:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let myName: string'>myName</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngcgQyiAXBAzmATgSwHYDmEAvBAEQCCwOAxiGQNwBQA9CxB5xwHq9+8QAKjAAOICAjx4A9mARgc0vEA'>Try</a></div></pre>\n<blockquote>\n<p>TypeScript doesn’t use “types on the left”-style declarations like <code>int x = 0;</code>\nType annotations will always go <em>after</em> the thing being typed.</p>\n</blockquote>\n<p>In most cases, though, this isn’t needed.\nWherever possible, TypeScript tries to automatically <em>infer</em> the types in your code.\nFor example, the type of a variable is inferred based on the type of its initializer:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// No type annotation needed -- &apos;myName&apos; inferred as type &apos;string&apos;</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let myName: string'>myName</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEDkHtQFwTwA4FNQEMB27I1TAlpOqOkkgCbmgC0VoA5ALZzioNJ2h7oBmSATn0qoAzrEQo6wmHy4BzOgCgANkhigmLNqAC8oAEQBBJXgDGSPQG4gA'>Try</a></div></pre>\n<p>For the most part you don’t need to explicitly learn the rules of inference.\nIf you’re starting out, try using fewer type annotations than you think - you might be surprised how few you need for TypeScript to fully understand what’s going on.</p>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<p>Functions are the primary means of passing data around in JavaScript.\nTypeScript allows you to specify the types of both the input and output values of functions.</p>\n<h3 id=\"parameter-type-annotations\" style=\"position:relative;\"><a href=\"#parameter-type-annotations\" aria-label=\"parameter type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Type Annotations</h3>\n<p>When you declare a function, you can add type annotations after each parameter to declare what kinds of parameters the function accepts.\nParameter type annotations go after the parameter name:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Parameter type annotation</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function greet(name: string): void'>greet</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>() + </span><span style=\"color: #A31515\">\"!!\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAUEMCdIWwKYBcHVEgngBwaSA7fAeyUiQEsj8AoAMwFd8BjCq0Ac2gWQAp94EALlABnJNHL52ASlABvaqFAglqtetUA9bTu2LQTKiKIAbBADoTRdjwBEACQQmrAGlC3QAalD9E5pEQAqlg40ADCkCIIPLLetgCE8bbSANzUAL5AA'>Try</a></div></pre>\n<p>When a parameter has a type annotation, calls to that function will be validated:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Would be a runtime error if executed!</span>\n<span style=\"color: #000000\"><data-lsp lsp='function greet(name: string): void'>greet</data-lsp>(</span><span style=\"color: #09835A\"><data-err>42</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUACaQDGANgIbSSgBmArgHbEAuAlnA6AOZWTMAUDcgFtIqRM2isGXAJSoAbnFYEA3HhCgAtDuJ1mOrRrAB1OHVIFQAI2rlQ0Rm1GgY8aKFY1XADxL7IAgBCPB5IPn4sNFlVIA'>Try</a></div></pre>\n<h3 id=\"return-type-annotations\" style=\"position:relative;\"><a href=\"#return-type-annotations\" aria-label=\"return type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return Type Annotations</h3>\n<p>You can also add return type annotations.\nReturn type annotations appear after the parameter list:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getFavoriteNumber(): number'>getFavoriteNumber</data-lsp>(): number {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">26</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQGIEMBucBOMUqAciALYBGq+AFAJQBciYF1+iA3gFCKID0-PsJGixIgHpTpU3onzoQ+JACYAbAG5uAXyA'>Try</a></div></pre>\n<p>Much like variable type annotations, you usually don’t need a return type annotation because TypeScript will infer the function’s return type based on its <code>return</code> statements.\nThe type annotation in the above example doesn’t change anything.\nSome codebases will explicitly specify a return type for documentation purposes, to prevent accidental changes, or just for personal preference.</p>\n<h3 id=\"function-expressions\" style=\"position:relative;\"><a href=\"#function-expressions\" aria-label=\"function expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Expressions</h3>\n<p>Function expressions are a little bit different from function declarations.\nWhen a function expression appears in a place where TypeScript can determine how it’s going to be called, the parameters of that function are automatically given types.</p>\n<p>Here’s an example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// No type annotations here, but TypeScript can spot the bug</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const names: string[]'>names</data-lsp> </span><span style=\"color: #000000\">= [</span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Eve\"</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const names: string[]'>names</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Array&amp;lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void'>forEach</data-lsp>(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='any'>toUppercase</data-lsp>());</data-err></span>\n<span class=\"error\"><span>Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><span style=\"color: #000000\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMEYBQJQA5OUAFwE8AHSUAQwDt65TbSBLOexUACxkgA0oAEYBXUqAAqVSAGUAxtDaUJ8hqESVmZPiNEBzXPM6IJ9WgFtI3ALygA2gCIAggBs28yI6GOAQnGFvUEcAUQA3LwBdAG5ccytEADoAMwQQ2nkeAApk0Xp5dk5QLMQASlAAb1xQUGMuOFdIRNc4fRLE0jgAVUpqaDVESCzS0tiAX1GgA'>Try</a></div></pre>\n<p>Even though the parameter <code>s</code> didn’t have a type annotation, TypeScript used the types of the <code>forEach</code> function, along with the inferred type of the array, to determine the type <code>s</code> will have.</p>\n<p>This process is called <em>contextual typing</em> because the <em>context</em> that the function occurred in informed what type it should have.\nSimilar to the inference rules, you don’t need to explicitly learn how this happens, but understanding that it <em>does</em> happen can help you notice when type annotations aren’t needed.\nLater, we’ll see more examples of how the context that a value occurs in can affect its type.</p>\n<h2 id=\"object-types\" style=\"position:relative;\"><a href=\"#object-types\" aria-label=\"object types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Types</h2>\n<p>Apart from primitives, the most common sort of type you’ll encounter is an <em>object type</em>.\nThis refers to any JavaScript value with properties, which is almost all of them!\nTo define an object type, we simply list its properties and their types.</p>\n<p>For example, here’s a function that takes a point-like object:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// The parameter&apos;s type annotation is an object type</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printCoord(pt: {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}): void'>printCoord</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>pt</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) y: number'>y</data-lsp></span><span style=\"color: #000000\">: number }) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"The coordinate&apos;s x value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) x: number'>x</data-lsp>);</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"The coordinate&apos;s y value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) y: number'>y</data-lsp>);</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printCoord(pt: {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}): void'>printCoord</data-lsp>({ <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">, <data-lsp lsp='(property) y: number'>y</data-lsp>: </span><span style=\"color: #09835A\">7</span><span style=\"color: #000000\"> });</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEBUAsFNQBwIYCcEFtoBdpIOQGdQMBPOWBAO3IHsMEMBLK80egi0KgIwCtoBjDIRLQAUADMAruQGNmcJPXIYAwlSpIAJgAo4GAFygA3qAAeB8hNSdsAblBFzl60lABfAJRGRoUCB-+AwKCfAD0w8IjIqPDvUD4mPCoAG2gAOiSqAHMtACIoWHj1DUU6aHxTUAA3BCSJWFZQHNAAangMVJN3G1j48kSU9Kzc-Li1TRKscqIqmrqWAibW3VSiLpFXEXlFFTHtYzNQAGYAGnsDAHY3LqA'>Try</a></div></pre>\n<p>Here, we annotated the parameter with a type with two properties - <code>x</code> and <code>y</code> - which are both of type <code>number</code>.\nYou can use <code>,</code> or <code>;</code> to separate the properties, and the last separator is optional either way.</p>\n<p>The type part of each property is also optional.\nIf you don’t specify a type, it will be assumed to be <code>any</code>.</p>\n<h3 id=\"optional-properties\" style=\"position:relative;\"><a href=\"#optional-properties\" aria-label=\"optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Properties</h3>\n<p>Object types can also specify that some or all of their properties are <em>optional</em>.\nTo do this, add a <code>?</code> after the property name:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printName(obj: {&amp;#13;    first: string;&amp;#13;    last?: string;&amp;#13;}): void'>printName</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: {&amp;#13;    first: string;&amp;#13;    last?: string | undefined;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) first: string'>first</data-lsp></span><span style=\"color: #000000\">: string; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) last?: string | undefined'>last</data-lsp></span><span style=\"color: #000000\">?: string }) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// Both OK</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printName(obj: {&amp;#13;    first: string;&amp;#13;    last?: string;&amp;#13;}): void'>printName</data-lsp>({ <data-lsp lsp='(property) first: string'>first</data-lsp>: </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printName(obj: {&amp;#13;    first: string;&amp;#13;    last?: string;&amp;#13;}): void'>printName</data-lsp>({ <data-lsp lsp='(property) first: string'>first</data-lsp>: </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) last?: string | undefined'>last</data-lsp>: </span><span style=\"color: #A31515\">\"Alisson\"</span><span style=\"color: #000000\"> });</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAcgQwLYCmAFHAEYBWAXIgN6LAyoDOU1L6YA5gNyIA2OFgH42UDp0QBfAJS0AUIkQB6JYgB0GuZLkrEAIThQAFogDyAaTloM2fMToNmrRACIDpF1OncrHW4SIHRhZqFwBBPhgIAhcAGn5BZ3DIpiYETxluIA'>Try</a></div></pre>\n<p>In JavaScript, if you access a property that doesn’t exist, you’ll get the value <code>undefined</code> rather than a runtime error.\nBecause of this, when you <em>read</em> from an optional property, you’ll have to check for <code>undefined</code> before using it.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printName(obj: {&amp;#13;    first: string;&amp;#13;    last?: string;&amp;#13;}): void'>printName</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: {&amp;#13;    first: string;&amp;#13;    last?: string | undefined;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) first: string'>first</data-lsp></span><span style=\"color: #000000\">: string; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) last?: string | undefined'>last</data-lsp></span><span style=\"color: #000000\">?: string }) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error - might crash if &apos;obj.last&apos; wasn&apos;t provided!</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: {&amp;#13;    first: string;&amp;#13;    last?: string | undefined;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) last?: string | undefined'>last</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>());</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: {&amp;#13;    first: string;&amp;#13;    last?: string | undefined;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) last?: string | undefined'>last</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// OK</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: {&amp;#13;    first: string;&amp;#13;    last?: string | undefined;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) last?: string'>last</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>());</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaBQAzAVwDsBjAFwEs5jQAHaS48gOQEMBbSACjgCMAVqgDeofJSTlUico2IBzANygANmxkB+abKbzQAXwCUoYblCgQoAKKwEoALSgOleQAtyoUtHWvQlfKAA5PwCAHRqMoGgAO7qxIEeDHAAbpQAJpBpAIRmnjSIcCqQ4XDyvILh6uSh5HAAqnR0MADC6jyGhoq5-qDlYREeWQC8Q6AkGeLEmcam5uaWAPIA0rnmpPmFxSqlfZUyNfWNLW3cHV3m+rj6QA'>Try</a></div></pre>\n<h2 id=\"union-types\" style=\"position:relative;\"><a href=\"#union-types\" aria-label=\"union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Types</h2>\n<p>TypeScript’s type system allows you to build new types out of existing ones using a large variety of operators.\nNow that we know how to write a few types, it’s time to start <em>combining</em> them in interesting ways.</p>\n<h3 id=\"defining-a-union-type\" style=\"position:relative;\"><a href=\"#defining-a-union-type\" aria-label=\"defining a union type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining a Union Type</h3>\n<p>The first way to combine types you might see is a <em>union</em> type.\nA union type is type formed from two or more other types, representing values that may be <em>any one</em> of those types.\nWe refer to each of these types as the union’s <em>members</em>.</p>\n<p>Let’s write a function that can operate on strings or numbers:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printId(id: number | string): void'>printId</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string | number'>id</data-lsp></span><span style=\"color: #000000\">: number | string) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Your ID is: \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string | number'>id</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printId(id: number | string): void'>printId</data-lsp>(</span><span style=\"color: #09835A\">101</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printId(id: number | string): void'>printId</data-lsp>(</span><span style=\"color: #A31515\">\"202\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">// Error</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printId(id: number | string): void'>printId</data-lsp>([</span><span style=\"color: #09835A\"><data-err>1</data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\"><data-err>2</data-err></span><span style=\"color: #000000\">]);</span>\n<span class=\"error\"><span>Type 'number' is not assignable to type 'string'.</br>Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322<br/>2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'string'.</br>Type 'number' is not assignable to type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNAAdoKiyBJAEwAoLXUiCBbAEYxQAH1CIyDIgHMAlKADeOUKBLVEcADaQAdJrjT2AIgCacAtFDMAIqAopQR0AGo7rWQG4cAXxwhQAPIA0jj0jCwcAIwADJGefmDBoVIRxmjRaEbx-gCisAjJ4WzsANqRADToALqeQA'>Try</a></div></pre>\n<h3 id=\"working-with-union-types\" style=\"position:relative;\"><a href=\"#working-with-union-types\" aria-label=\"working with union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Union Types</h3>\n<p>It’s easy to <em>provide</em> a value matching a union type - simply provide a type matching any of the union’s members.\nIf you <em>have</em> a value of a union type, how do you work with it?</p>\n<p>TypeScript will only allow you to do things with the union if that thing is valid for <em>every</em> member of the union.\nFor example, if you have the union <code>string | number</code>, you can’t use methods that are only available on <code>string</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printId(id: number | string): void'>printId</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string | number'>id</data-lsp></span><span style=\"color: #000000\">: number | string) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string | number'>id</data-lsp></span><span style=\"color: #000000\"><data-err>.<data-lsp lsp='any'>toUpperCase</data-lsp>());</data-err></span>\n<span class=\"error\"><span>Property 'toUpperCase' does not exist on type 'string | number'.\n  Property 'toUpperCase' does not exist on type 'number'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'toUpperCase' does not exist on type 'string | number'.\n  Property 'toUpperCase' does not exist on type 'number'.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAzAVwDsBjAFwEs5jQAHaS48gSQBMAKSt1YwgWwBGMUAB9Qico2IBzAJSgA3rlChSNRHAA2kAHRa4Mrm13k4AVTp0YAYQCGiSBzlyA3LgC+QA'>Try</a></div></pre>\n<p>The solution is to <em>narrow</em> the union with code, the same as you would in JavaScript without type annotations.\n<em>Narrowing</em> occurs when TypeScript can deduce a more specific type for a value based on the structure of the code.</p>\n<p>For example, TypeScript knows that only a <code>string</code> value will have a <code>typeof</code> value <code>\"string\"</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printId(id: number | string): void'>printId</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string | number'>id</data-lsp></span><span style=\"color: #000000\">: number | string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string | number'>id</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// In this branch, id is of type &apos;string&apos;</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: string'>id</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>());</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Here, id is of type &apos;number&apos;</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) id: number'>id</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAkgEwBQw4BciYIAtgEYCmqiAPogM5TpgDmAlIgN4BQiRDGCI8UAJ7JqcEYUQBeRYgBELNu2Xd+gwQHpdiLEigALGE0SVUAQ0gmANEJxCLMxBKmIA5GozsvAjoQCExwADbUAHRhcOwEOJFQcACqyFKoAMLWTNR4nJwA3IEAvojUYTm8gXoGABK01I5y5ohuHtTeZFS0ATqIwWChEdGx8YUlfMVAA'>Try</a></div></pre>\n<p>Another example is to use a function like <code>Array.isArray</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function welcomePeople(x: string[] | string): void'>welcomePeople</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | string[]'>x</data-lsp></span><span style=\"color: #000000\">: string[] | string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (<data-lsp lsp='var Array: ArrayConstructor'>Array</data-lsp>.<data-lsp lsp='(method) ArrayConstructor.isArray&amp;lt;string | string[]>(arg: string | {} | string[]): arg is any[] | readonly any[]'>isArray</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | string[]'>x</data-lsp></span><span style=\"color: #000000\">)) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Here: &apos;x&apos; is &apos;string[]&apos;</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string[]'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Array&amp;lt;string>.join(separator?: string | undefined): string'>join</data-lsp>(</span><span style=\"color: #A31515\">\" and \"</span><span style=\"color: #000000\">));</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Here: &apos;x&apos; is &apos;string&apos;</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Welcome lone traveler \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwKYBsJwLaoAqpwAO6qAFAB4BciAzlAE4xgDmA2gLqIA+djzLAJSIA3gChEiGMERkAggwYBDAJ4A6GLQXKVlQcPGTJAemOIAEqgaoaAcgq2ptRLfpNWnWxKNYwtOKRq6HAsZABElujBADSIYYgA1IgUagBWcMzhiEpgACZx+gDc3gC+iBi0qKLeJmaW1nYOTi5uAl5GiL7+gcGhYQDqGFi4iMFgVYxKAG4YVnGJyYLFkiViJUA'>Try</a></div></pre>\n<p>Notice that in the <code>else</code> branch, we don’t need to do anything special - if <code>x</code> wasn’t a <code>string[]</code>, then it must have been a <code>string</code>.</p>\n<p>Sometimes you’ll have a union where all the members have something in common.\nFor example, both arrays and strings have a <code>slice</code> method.\nIf every member in a union has a property in common, you can use that property without narrowing:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Return type is inferred as number[] | string</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function getFirstThree(x: number[] | string): string | number[]'>getFirstThree</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | number[]'>x</data-lsp></span><span style=\"color: #000000\">: number[] | string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | number[]'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) slice(start?: number | undefined, end?: number | undefined): string | number[]'>slice</data-lsp>(</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAECUFMBcFcCcB2poE8AOlQEsDOPEAzSeeSAE1AEN9FYBbAIxIG0BdUAH1F2nm0QBzAFCFYiAMbRsAe2SCYAMWzxeAFQAWZSAAoAHgC5QdJqw7de-IQEpQAb2GhQZOElB6AdLgA22CboAGABpQAGZrAG5hAF8gA'>Try</a></div></pre>\n<blockquote>\n<p>It might be confusing that a <em>union</em> of types appears to have the <em>intersection</em> of those types’ properties.\nThis is not an accident - the name <em>union</em> comes from type theory.\nThe <em>union</em> <code>number | string</code> is composed by taking the union <em>of the values</em> from each type.\nNotice that given two sets with corresponding facts about each set, only the <em>intersection</em> of those facts applies to the <em>union</em> of the sets themselves.\nFor example, if we had a room of tall people wearing hats, and another room of Spanish speakers wearings hats, after combining those rooms, the only thing we know about <em>every</em> person is that they must be wearing a hat.</p>\n</blockquote>\n<h2 id=\"type-aliases\" style=\"position:relative;\"><a href=\"#type-aliases\" aria-label=\"type aliases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Aliases</h2>\n<p>We’ve been using object types and union types by writing them directly in type annotations.\nThis is convenient, but it’s common to want to use the same type more than once and refer to it by a single name.</p>\n<p>A <em>type alias</em> is exactly that - a <em>name</em> for any <em>type</em>.\nThe syntax for a type alias is:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) y: number'>y</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// Exactly the same as the earlier example</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printCoord(pt: Point): void'>printCoord</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp>) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"The coordinate&apos;s x value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) x: number'>x</data-lsp>);</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"The coordinate&apos;s y value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) y: number'>y</data-lsp>);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='function printCoord(pt: Point): void'>printCoord</data-lsp>({ <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\">, <data-lsp lsp='(property) y: number'>y</data-lsp>: </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\"> });</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACg9gSwHbCgXigbwFBSgDwC4okBXAWwCMIAnAblyhGLKtoYF8HsB6HqAKL4AhgGNgAGxBRgAC2gBnYeWjCFM+VAjCaEhLS0jyYCRGwAzUknEI4SKGBrJgAYThwaAEwAUYYMXhnAEosRlE7BThTADoJOABzbwAiABVNcI9PZGFgCABydXwoADdhCVJoBHUkqABqB2Bo-CCGPHCkSJi4xNT09y9s3IKmErKKqCqoGvq-aJAW7A5sbEdnN0zvTAJiAEYABj2AGiZdg6gOFqA'>Try</a></div></pre>\n<p>You can actually use a type alias to give a name to any type at all, not just an object type.\nFor example, a type alias can name a union type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type ID = string | number'>ID</data-lsp> = number | string;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAkgIlAvFAdgVwLYCMICcoA+UAzsLgJYoDmA3EA'>Try</a></div></pre>\n<p>Note that aliases are <em>only</em> aliases - you cannot use type aliases to create different/distinct “versions” of the same type.\nWhen you use the alias, it’s exactly as if you had written the aliased type.\nIn other words, this code might <em>look</em> illegal, but is OK according to TypeScript because both types are aliases for the same type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Age = number'>Age</data-lsp> = number;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Weight = number'>Weight</data-lsp> = number;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const myAge: number'>myAge</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Age = number'>Age</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">73</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// *not* an error</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const myWeight: number'>myWeight</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Weight = number'>Weight</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const myAge: number'>myAge</data-lsp></span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAgg5tAvFAdgVwLYCMICcDcAUKJFAOoQCWcAFsFMutnkYQMYD2KAzvRiPAgAuWAgZQA7AGYiAellQAVCg7BFUAIYooeXB1zsuvKPwrU6Is7XrJ+g-EA'>Try</a></div></pre>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces</h2>\n<p>An <em>interface declaration</em> is another way to name an object type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Point'>Point</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.x: number'>x</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Point.y: number'>y</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printCoord(pt: Point): void'>printCoord</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Point'>Point</data-lsp>) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"The coordinate&apos;s x value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.x: number'>x</data-lsp>);</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"The coordinate&apos;s y value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) pt: Point'>pt</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Point.y: number'>y</data-lsp>);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='function printCoord(pt: Point): void'>printCoord</data-lsp>({ <data-lsp lsp='(property) Point.x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\">, <data-lsp lsp='(property) Point.y: number'>y</data-lsp>: </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\"> });</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwFDLIAeAXMiAK4C2ARtANwHICeZltDeAvnnjBSARhg6EMgAOULAGF06KABMAFOLBkMWAJS4mCUQGd0AGwgA6I+gDmSgEQAVABYo98haDiQA5PuLIAbnBGFCjAPjbIANQSYKZEmoyEeiCGJuZWto7OcoruXj7M-oHByKHI4VGqpszx3LySMtnKOMRkAIwADO0ANCxtnchc8UA'>Try</a></div></pre>\n<p>Just like when we used a type alias above, the example works just as if we had used an anonymous object type.\nTypeScript is only concerned with the <em>structure</em> of the value we passed to <code>printCoord</code> - it only cares that it has the expected properties.\nBeing concerned only with the structure and capabilities of types is why we call TypeScript a <em>structurally typed</em> type system.</p>\n<h3 id=\"differences-between-type-aliases-and-interfaces\" style=\"position:relative;\"><a href=\"#differences-between-type-aliases-and-interfaces\" aria-label=\"differences between type aliases and interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Differences Between Type Aliases and Interfaces</h3>\n<p>Type aliases and interfaces are very similar, and in many cases you can choose between them freely.\nHere are the most relevant differences between the two that you should be aware of.\nYou’ll learn more about these concepts in later chapters, so don’t worry if you don’t understand all of these right away.</p>\n<ul>\n<li>Type aliases may not participate <a href=\"/play?#code/PTAEEEDtQS0gXApgJwGYEMDGjSfdAIx2UQFoB7AB0UkQBMAoEUfO0Wgd1ADd0AbAK6IAzizp16ALgYM4SNFhwBZdAFtV-UAG8GoPaADmNAcMmhh8ZHAMMAvjLkoM2UCvWad+0ARL0A-GYWVpA29gyY5JAWLJAwGnxmbvGgALzauvpGkCZmAEQAjABMAMwALLkANBl6zABi6DB8okR4Jjg+iPSgABboovDk3jjo5pbW1d6+dGb5djLwAJ7UoABKiJTwjThpnpnGpqPBoTLMAJrkArj4kOTwYmycPOhW6AR8IrDQ8N04wmo4HHQCwYi2Waw2W1S6S8HX8gTGITsQA\">in declaration merging, but interfaces can</a>.</li>\n<li>Interfaces may only be used to <a href=\"/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA\">declare the shapes of object, not re-name primitives</a>.</li>\n<li>Interface names will <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA\"><em>always</em> appear in their original form</a> in error messages, but <em>only</em> when they are used by name.</li>\n<li>Type alias names <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWZWhfYAjABMAMwALA+gbsVjoADqgjKESytQPxCHghAByXigYgBfr8LAsYj8aQMUASbDQcRSExCeCwFiIQh+AKfAYyBiQFgOPyIaikSGLQo0Zj-aazaY+dSaXjLDgAGXgAC9CKhDqAALxJaw2Ib2RzOISuDycLw+ImBYKQflCkWRRD2LXCw6JCxS1JCdJZHJ5RAFIbFJU8ADKC3WzEcnVZaGYE1ABpFnFOmsFhsil2uoHuzwArO9SmAAEIsSFrZB-GgAjjA5gtVN8VCEc1o1C4Q4AGlR2AwO1EsBQoAAbvB-gJ4HhPgB5aDwem-Ph1TCV3AEEirTp4ELtRbTPD4vwKjOfAuioSQHuDXBcnmgACC+eCONFEs73YAPGGZVT5cRyyhiHh7AAON7lsG3vBggB8XGV3l8-nVISOgghxoLq9i7io-AHsayRWGaFrlFauq2rg9qaIGQHwCBqChtKdgRo8TxRjeyB3o+7xAA\"><em>may</em> appear in error messages</a>, sometimes in place of the equivalent anonymous type (which may or may not be desirable).</li>\n</ul>\n<p>For the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration.</p>\n<h2 id=\"type-assertions\" style=\"position:relative;\"><a href=\"#type-assertions\" aria-label=\"type assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Assertions</h2>\n<p>Sometimes you will have information about the type of a value that TypeScript can’t know about.</p>\n<p>For example, if you’re using <code>document.getElementById</code>, TypeScript only knows that this will return <em>some</em> kind of <code>HTMLElement</code>, but you might know that your page will always have an <code>HTMLCanvasElement</code> with a given ID.</p>\n<p>In this situation, you can use a <em>type assertion</em> to specify a more specific type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const myCanvas: HTMLCanvasElement'>myCanvas</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null'>getElementById</data-lsp>(</span><span style=\"color: #A31515\">\"main_canvas\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> <data-lsp lsp='interface HTMLCanvasElement'>HTMLCanvasElement</data-lsp>;</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgTwMIEMwDcURgXhgExGAFc4BTMKAOgHMyoBRAGzPMoCEEBJfACgCI4KAJZgA+sDSYI-AJQwsMABIAVALIAZVBizNWFKAG4gA'>Try</a></div></pre>\n<p>Like a type annotation, type assertions are removed by the compiler and won’t affect the runtime behavior of your code.</p>\n<p>You can also use the angle-bracket syntax (except if the code is in a <code>.tsx</code> file), which is equivalent:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const myCanvas: HTMLCanvasElement'>myCanvas</data-lsp> </span><span style=\"color: #000000\">= &lt;<data-lsp lsp='interface HTMLCanvasElement'>HTMLCanvasElement</data-lsp>><data-lsp lsp='var document: Document'>document</data-lsp>.<data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null'>getElementById</data-lsp>(</span><span style=\"color: #A31515\">\"main_canvas\"</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgTwMIEMwDcURgXhgHgAkAVAWQBlUMsBRAGwFM4GwoA+AExGAFdnWAdAHMGUekxZQAQggCSHABQAiOCgCWYAPrA0mCEoCUAbiA'>Try</a></div></pre>\n<blockquote>\n<p>Reminder: Because they are removed at compile-time, there is no runtime checking associated with a type assertion.\nThere won’t be an exception or <code>null</code> generated if the type assertion is wrong.</p>\n</blockquote>\n<p>TypeScript only allows type assertions which convert to a <em>more specific</em> or <em>less specific</em> version of a type.\nThis rule prevents “impossible” coercions like:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const x: number'>x</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> number;</span>\n<span class=\"error\"><span>Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span><span class=\"code\">2352</span></span><span class=\"error-behind\">Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsaBQBjOAO0QBdQAPUAXlACIALSAG2bjtAENFQiBXALYAjGAG4gA'>Try</a></div></pre>\n<p>Sometimes this rule can be too conservative and will disallow more complex coercions that might be valid.\nIf this happens, you can use two assertions, first to <code>any</code> (or <code>unknown</code>, which we’ll introduce later), then to the desired type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: T'>a</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const expr: any'>expr</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> any) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> <data-lsp lsp='type T = {&amp;#13;    a: 1;&amp;#13;    b: 2;&amp;#13;    c: 3;&amp;#13;}'>T</data-lsp>;</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iAHgBxgC54oUBPAbgCgMy8EAVeAXngG8TiBGC+AI2IAmXmGIBmeAF9qAehnwAtErABXDEoVVk6LFBbwAFLgIk0JcgEpT8BhSA'>Try</a></div></pre>\n<h2 id=\"literal-types\" style=\"position:relative;\"><a href=\"#literal-types\" aria-label=\"literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Types</h2>\n<p>In addition to the general types <code>string</code> and <code>number</code>, we can refer to <em>specific</em> strings and numbers in type positions.</p>\n<p>By themselves, literal types aren’t very valuable:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let x: &amp;quot;hello&amp;quot;'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #1A1A1A\"> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let x: &amp;quot;hello&amp;quot;'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let x: &amp;quot;hello&amp;quot;'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// ...</span>\n<span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let x: &amp;quot;hello&amp;quot;'>x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"howdy\"</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '\"howdy\"' is not assignable to type '\"hello\"'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '\"howdy\"' is not assignable to type '\"hello\"'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAD1QCIALSPPOc0AXlCprvIG4cRQB5AaRwkmLarXpceAoSNbjO3MADoVM5lTgB3ACYBPTkA'>Try</a></div></pre>\n<p>It’s not much use to have a variable that can only have one value!</p>\n<p>But by <em>combining</em> literals into unions, you can express a much more useful thing - for example, functions that only accept a certain set of known values:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function printText(s: string, alignment: &amp;quot;left&amp;quot; | &amp;quot;right&amp;quot; | &amp;quot;center&amp;quot;): void'>printText</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: string'>s</data-lsp></span><span style=\"color: #000000\">: string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) alignment: &amp;quot;left&amp;quot; | &amp;quot;right&amp;quot; | &amp;quot;center&amp;quot;'>alignment</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"right\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"center\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printText(s: string, alignment: &amp;quot;left&amp;quot; | &amp;quot;right&amp;quot; | &amp;quot;center&amp;quot;): void'>printText</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, world\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='function printText(s: string, alignment: &amp;quot;left&amp;quot; | &amp;quot;right&amp;quot; | &amp;quot;center&amp;quot;): void'>printText</data-lsp>(</span><span style=\"color: #A31515\">\"G&apos;day, mate\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&quot;centre&quot;</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAA7RUkUAqkAHhQBQqiIUmJAOYAaUAEMANlWEkAtpBaoARFMgEKK0AB9QKpsIAWW3frJKKMFQEpQAbzyhQIUADoPeAL55GzNpw8KgASkFJScOIA7ghSACYq4moaWjYA3L5CAVzcKgDiAORxEgCe4vISVonmltCQtmlAA'>Try</a></div></pre>\n<p>Numeric literal types work the same way:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function compare(a: string, b: string): -1 | 0 | 1'>compare</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: string'>a</data-lsp></span><span style=\"color: #000000\">: string, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: string'>b</data-lsp></span><span style=\"color: #000000\">: string): -</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> | </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: string'>a</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: string'>b</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> : </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: string'>a</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: string'>b</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> : -</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBOBbADgQwE4FMAUmAXIgM5TYxgDmANIgEYnmU0CUJAtAIyIA+iAAz9EvAN4AoRIjxQQ2JJkQBeVY0QB+IYhJKAfOq28u3ANwSAvkA'>Try</a></div></pre>\n<p>Of course, you can combine these with non-literal types:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='interface Options'>Options</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Options.width: number'>width</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function configure(x: Options | &amp;quot;auto&amp;quot;): void'>configure</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: Options | &amp;quot;auto&amp;quot;'>x</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface Options'>Options</data-lsp> | </span><span style=\"color: #A31515\">\"auto\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='function configure(x: Options | &amp;quot;auto&amp;quot;): void'>configure</data-lsp>({ <data-lsp lsp='(property) Options.width: number'>width</data-lsp>: </span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\"><data-lsp lsp='function configure(x: Options | &amp;quot;auto&amp;quot;): void'>configure</data-lsp>(</span><span style=\"color: #A31515\">\"auto\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='function configure(x: Options | &amp;quot;auto&amp;quot;): void'>configure</data-lsp>(</span><span style=\"color: #A31515\"><data-err>&quot;automatic&quot;</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAPIAOJBcRioA3nqKAO4EAJiQAWqIgFcAtgCMYAbjwBfPOQlFqLNqGptyBAOYTokABQAPVEy3tQAH1AAiShJJxHASi49QIUADpA5TxdIn0jE1NOfiFRVABGAAZE0CUPRVDw4zNnV3d0kL1DbNNctylKFmpPeSA'>Try</a></div></pre>\n<p>There’s one more kind of literal type: boolean literals.\nThere are only two boolean literal types, and as you might guess, they are the types <code>true</code> and <code>false</code>.\nThe type <code>boolean</code> itself is actually just an alias for the union <code>true | false</code>.</p>\n<h3 id=\"literal-inference\" style=\"position:relative;\"><a href=\"#literal-inference\" aria-label=\"literal inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Inference</h3>\n<p>When you initialize a variable with an object, TypeScript assumes that the properties of that object might change values later.\nFor example, if you wrote code like this:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    counter: number;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) counter: number'>counter</data-lsp>: </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const someCondition: boolean'>someCondition</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    counter: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) counter: number'>counter</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3mpBbEAwqsAJYYmoBc8ARkkhCFCgNwBQA9B-ALR9gBXDHx5tk6LEhoAreAF54Ab0RIBKDCBjUADPAC+7EgDN4AChz4iKUuVQBKJW3jwp0gHTI1GmPPgBGdj0gA'>Try</a></div></pre>\n<p>TypeScript doesn’t assume the assignment of <code>1</code> to a field that previously had <code>0</code> to be an error.\nAnother way of saying this is that <code>obj.counter</code> must have the type <code>number</code>, not <code>0</code>, because types are used to determine both <em>reading</em> and <em>writing</em> behavior.</p>\n<p>The same applies to strings:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const req: {&amp;#13;    url: string;&amp;#13;    method: string;&amp;#13;}'>req</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) url: string'>url</data-lsp>: </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) method: string'>method</data-lsp>: </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\"><data-lsp lsp='function handleRequest(url: string, method: &amp;quot;GET&amp;quot; | &amp;quot;POST&amp;quot;): void'>handleRequest</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const req: {&amp;#13;    url: string;&amp;#13;    method: string;&amp;#13;}'>req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) url: string'>url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const req: {&amp;#13;    url: string;&amp;#13;    method: string;&amp;#13;}'>req</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) method: string'>method</data-lsp>);</span>\n<span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUACaQDGANgIbSSgBmArgHbEAuAlnA6ABbkMGmQASpACOdSImYAKOtFKpJ0VgwDmAGlABbSMy5wCqAEQBxAKIAVQ6AA+oQwAUA8gGVLASlQA3OKwIBuPBBQAFpQ4jpmUOC8Yg5JUCoRUABeUABvUFl5Oy5mZgAHFBBIAA9yTXyBADpYzUMNbV19IzNLUABfAJ4+AWExCWlEqqyNIca9Ajc-IA'>Try</a></div></pre>\n<!-- TODO: Use and explain const contexts -->\n<p>Because it’d be legal to assign a string like <code>\"GUESS\"</code> TO <code>req.method</code>, TypeScript considers this code to have an error.\nYou can change this inference by adding a type assertion in either location:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const req: {&amp;#13;    url: string;&amp;#13;    method: &amp;quot;GET&amp;quot;;&amp;#13;}'>req</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) url: string'>url</data-lsp>: </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) method: &amp;quot;GET&amp;quot;'>method</data-lsp>: </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #008000\">/* or */</span>\n<span style=\"color: #000000\"><data-lsp lsp='function handleRequest(url: string, method: &amp;quot;GET&amp;quot; | &amp;quot;POST&amp;quot;): void'>handleRequest</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const req: {&amp;#13;    url: string;&amp;#13;    method: &amp;quot;GET&amp;quot;;&amp;#13;}'>req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) url: string'>url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const req: {&amp;#13;    url: string;&amp;#13;    method: &amp;quot;GET&amp;quot;;&amp;#13;}'>req</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) method: &amp;quot;GET&amp;quot;'>method</data-lsp> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwAspVgIQAlEAR2RAGcMAKZGCALngZi1QHMAaeAFsQGAjmAcARAHEAogBUp8AD7wpABQDyAZSUBKDgDccWYAG4AUAHpr8ALSOwyDI-uWweBvDhV4AXngAb3gWdnUCDAwABzo2WxAADyghaLIAOk8hKUERMQlpeSV4KDp1IuUAXytrACp4HBh4WutLIhIyShp6Jl90sME+vPFgErLZRSl9cyA'>Try</a></div></pre>\n<p>The first change means “I intend for <code>req.method</code> to always have the <em>literal type</em> <code>\"GET\"</code>”, preventing the possible assignment of <code>\"GUESS\"</code> to that field.\nThe second change means “I know for other reasons that <code>req.method</code> has the value <code>\"GET\"</code>“.</p>\n<h2 id=\"null-and-undefined\" style=\"position:relative;\"><a href=\"#null-and-undefined\" aria-label=\"null and undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>null</code> and <code>undefined</code></h2>\n<p>JavaScript has two primitive values used to signal absent or uninitialized value: <code>null</code> and <code>undefined</code>.</p>\n<p>TypeScript has two corresponding <em>types</em> by the same names. How these types behave depends on whether you have the <code>strictNullChecks</code> option on.</p>\n<h3 id=\"strictnullchecks-off\" style=\"position:relative;\"><a href=\"#strictnullchecks-off\" aria-label=\"strictnullchecks off permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> off</h3>\n<p>With <code>strictNullChecks</code> <em>off</em>, values that might be <code>null</code> or <code>undefined</code> can still be accessed normally, and the values <code>null</code> and <code>undefined</code> can be assigned to a property of any type.\nThis is similar to how languages without null checks (e.g. C#, Java) behave.\nThe lack of checking for these values tends to be a major source of bugs; we always recommend people turn <code>strictNullChecks</code> on if it’s practical to do so in their codebase.</p>\n<h3 id=\"strictnullchecks-on\" style=\"position:relative;\"><a href=\"#strictnullchecks-on\" aria-label=\"strictnullchecks on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> on</h3>\n<p>With <code>strictNullChecks</code> <em>on</em>, when a value is <code>null</code> or <code>undefined</code>, you will need to test for those values before using methods or properties on that value.\nJust like checking for <code>undefined</code> before using an optional property, we can use <em>narrowing</em> to check for values that might be <code>null</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function doSomething(x: string | null): void'>doSomething</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | null'>x</data-lsp></span><span style=\"color: #000000\">: string | null) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | null'>x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do nothing</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>());</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAB4BciAzlAE6FGIA+iYIANhwJSIDeAKESIYwROUQBeaW049+Q4YgD0ylHDZx8jRQF9E2DtWwKliCAmpwO2AHQc4pAEQAJQw4A0iJ4gDUiMlsoOABVAAcw7DoAYQBDYxJubgBuPQFdIA'>Try</a></div></pre>\n<h3 id=\"non-null-assertion-operator-postfix-\" style=\"position:relative;\"><a href=\"#non-null-assertion-operator-postfix-\" aria-label=\"non null assertion operator postfix  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-null Assertion Operator (Postfix <code>!</code>)</h3>\n<p>TypeScript also has a special syntax for removing <code>null</code> and <code>undefined</code> from a type without doing any explicit checking.\nWriting <code>!</code> after any expression is effectively a type assertion that the value isn’t <code>null</code> or <code>undefined</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function liveDangerously(x?: number | null | undefined): void'>liveDangerously</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number | null | undefined'>x</data-lsp></span><span style=\"color: #000000\">?: number | null) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// No error</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number | null | undefined'>x</data-lsp></span><span style=\"color: #000000\">!.<data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string'>toFixed</data-lsp>());</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgNwKYBECGYDmGATnCAM7ICeAFAB4D8AXImCALYBGxiAPiyMmQBKRAG8AUIkQB6aYgBycRMRJFJiCAjJxkGAHTI4+OgEI9UOADEYtDABNqQoQG5xAXyA'>Try</a></div></pre>\n<p>Just like other type assertions, this doesn’t change the runtime behavior of your code, so it’s important to only use <code>!</code> when you know that the value <em>can’t</em> be <code>null</code> or <code>undefined</code>.</p>\n<h3 id=\"less-common-primitives\" style=\"position:relative;\"><a href=\"#less-common-primitives\" aria-label=\"less common primitives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Less Common Primitives</h3>\n<p>It’s worth mentioning the rest of the primitives in JavaScript which are represented in the type system.\nThough we will not go into depth here.</p>\n<h5 id=\"bigint\" style=\"position:relative;\"><a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>bigint</code></h5>\n<p>There is a primitive in JavaScript used for very large integers, <code>BitInt</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Creating a bigint via the BigInt function</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> bigint </span><span style=\"color: #000000\">= BigInt(</span><span style=\"color: #09835A\">100</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// Creating a BigInt via the literal syntax</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> bigint </span><span style=\"color: #000000\">= 100</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>You can learn more about BitInt in <a href=\"/docs/handbook/release-notes/typescript-3-2.html#bigint\">the TypeScript 3.2 release notes</a>.</p>\n<h5 id=\"symbol\" style=\"position:relative;\"><a href=\"#symbol\" aria-label=\"symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>symbol</code></h5>\n<p>There is a primitive in JavaScript used to create a globally unique reference via the function <code>Symbol()</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const firstName: typeof firstName'>firstName</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='var Symbol: SymbolConstructor&amp;#13;(description?: string | number | undefined) => symbol'>Symbol</data-lsp>(</span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const secondName: typeof secondName'>secondName</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='var Symbol: SymbolConstructor&amp;#13;(description?: string | number | undefined) => symbol'>Symbol</data-lsp>(</span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const firstName: typeof firstName'>firstName</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const secondName: typeof secondName'>secondName</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span class=\"error\"><span>This condition will always return 'false' since the types 'typeof firstName' and 'typeof secondName' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This condition will always return 'false' since the types 'typeof firstName' and 'typeof secondName' have no overlap.</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Can&apos;t ever happen</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUAMZwB2iALqAGYCWSZAcgIYC2koAvKAMoCezARnAA2ACgBExFpDEBKANyES5UIkhFiAEyasO3PoNESpshXmqVQImnW1t29lWpJapM0AG88oUCFABhRmIAcgpIADcYUAALRgAHWMhiPABfIA'>Try</a></div></pre>\n<p>You can learn more about them in <a href=\"/docs/handbook/symbols.html\">Symbols handbook reference page</a>.</p>","headings":[{"value":"The primitives: string, number, and boolean","depth":2},{"value":"Arrays","depth":2},{"value":"any","depth":2},{"value":"noImplicitAny","depth":3},{"value":"Type Annotations on Variables","depth":2},{"value":"Functions","depth":2},{"value":"Parameter Type Annotations","depth":3},{"value":"Return Type Annotations","depth":3},{"value":"Function Expressions","depth":3},{"value":"Object Types","depth":2},{"value":"Optional Properties","depth":3},{"value":"Union Types","depth":2},{"value":"Defining a Union Type","depth":3},{"value":"Working with Union Types","depth":3},{"value":"Type Aliases","depth":2},{"value":"Interfaces","depth":2},{"value":"Differences Between Type Aliases and Interfaces","depth":3},{"value":"Type Assertions","depth":2},{"value":"Literal Types","depth":2},{"value":"Literal Inference","depth":3},{"value":"null and undefined","depth":2},{"value":"strictNullChecks off","depth":3},{"value":"strictNullChecks on","depth":3},{"value":"Non-null Assertion Operator (Postfix !)","depth":3},{"value":"Less Common Primitives","depth":3},{"value":"bigint","depth":5},{"value":"symbol","depth":5}],"frontmatter":{"permalink":"/docs/handbook/2/everyday-types.html","title":"Everyday Types","disable_toc":null,"oneline":"Step one in learning TypeScript: The basics types.","beta":true}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"The Basics","oneline":"Step one in learning TypeScript: The basic types.","permalink":"/docs/handbook/2/basic-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Object Types","oneline":"Step one in learning TypeScript: The basics types.","permalink":"/docs/handbook/2/objects.html"}}}},"pageContext":{"id":"8everyday-types","slug":"/docs/handbook/2/everyday-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Everyday Types.md","previousID":"71887800-617c-5166-923f-972307926774","nextID":"a0841346-823e-522d-bef3-f25968cb7f82","lang":"en","modifiedTime":"2020-10-29T11:50:57.702Z"}},"staticQueryHashes":[]}