{"componentChunkName":"component---src-templates-docs-js","path":"/docs/testing.html","result":{"data":{"markdownRemark":{"html":"<p>你可以用像测试其他 JavaScript 代码类似的方式测试 React 组件。</p>\n<p>现在有许多种测试 React 组件的方法。大体上可以被分为两类：</p>\n<ul>\n<li><strong>渲染组件树</strong> 在一个简化的测试环境中渲染组件树并对它们的输出做断言检查。</li>\n<li><strong>运行完整应用</strong> 在一个真实的浏览器环境中运行整个应用（也被称为“端到端（end-to-end）”测试）。</li>\n</ul>\n<p>本章节主要专注于第一种情况下的测试策略。虽然完整的端到端测试在防止对重要工作流的多次回归方面很有价值，但对 React 组件来说这类测试并不怎么需要关注，因此不在本章节的讨论范围之内。</p>\n<h3 id=\"tradeoffs\"><a href=\"#tradeoffs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>权衡 </h3>\n<p>当挑选测试工具的时候，有些细节值得我们权衡考虑：</p>\n<ul>\n<li><strong>迭代速度 vs 真实环境：</strong> 一些工具在做出改动和看到结果之间提供了非常快速的反馈循环，但没有精确的模拟浏览器的行为。另一些工具，也许使用了真实的浏览器环境，但却降低了迭代速度，而且在持续集成服务器中不太可靠。</li>\n<li><strong>mock 到什么程度：</strong> 对组件来说，“单元测试”和“集成测试”之间的差别可能会很模糊。如果你在测试一个表单，用例是否应该也测试表单里的按钮呢？一个按钮组件又需不需要有他自己的测试套件？重构按钮组件是否应该影响表单的测试用例？</li>\n</ul>\n<p>不同的团队或产品可能会得出不同的答案。</p>\n<h3 id=\"tools\"><a href=\"#tools\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>推荐的工具 </h3>\n<p><strong><a href=\"https://facebook.github.io/jest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a></strong> 是一个 JavaScript 测试运行器。它允许你使用 <a href=\"/docs/testing-environments.html#mocking-a-rendering-surface\"><code class=\"gatsby-code-text\">jsdom</code></a> 操作 DOM 。尽管 jsdom 只是对浏览器工作表现的一个近似模拟，对测试 React 组件来说它通常也已经够用了。Jest 有着十分优秀的迭代速度，同时还提供了若干强大的功能，比如它可以模拟 <a href=\"/docs/testing-environments.html#mocking-modules\">modules</a> 和 <a href=\"/docs/testing-environments.html#mocking-timers\">timers</a> 让你更精细的控制代码如何执行。</p>\n<p><strong><a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 测试库</a></strong>是一组能让你不依赖 React 组件具体实现对他们进行测试的辅助工具。它让重构工作变得轻而易举，还会推动你拥抱有关无障碍的最佳实践。虽然它不能让你省略子元素来浅（shallowly）渲染一个组件，但像 Jest 这样的测试运行器可以通过 <a href=\"/docs/testing-recipes.html#mocking-modules\">mocking</a> 让你做到。</p>\n<h3 id=\"learn-more\"><a href=\"#learn-more\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>了解更多 </h3>\n<p>这一章节被划分成了两页内容：</p>\n<ul>\n<li><a href=\"/docs/testing-recipes.html\">技巧</a>：为 React 组件编写测试时的常见模式。</li>\n<li><a href=\"/docs/testing-environments.html\">环境</a>：为 React 组件搭建测试环境的时候有哪些要考虑的东西。</li>\n</ul>","frontmatter":{"title":"测试概览","next":"testing-recipes.html","prev":null},"fields":{"path":"content/docs/testing.md","slug":"docs/testing.html"}}},"pageContext":{"slug":"docs/testing.html"}},"staticQueryHashes":[]}