{"componentChunkName":"component---src-templates-blog-js","path":"/blog/2019/10/22/react-release-channels.html","result":{"data":{"markdownRemark":{"html":"<p>为了与 React 生态系统的合作伙伴共享即将发生的变化，我们正式建立了预发布的渠道。我们希望通过这一过程有助于我们胸有成竹地对 React 进行更改，并为开发人员提供尝试试验阶段功能的机会。</p>\n<blockquote>\n<p>此文章与从事框架，库或开发工具的开发人员息息相关。而主要使用 React 来构建应用程序的开发者无需担心此预发布渠道。</p>\n</blockquote>\n<p>React 依靠强大的开源社区收集错误报告，pull request 以及 <a href=\"https://github.com/reactjs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC</a>。为了鼓励大家反馈，我们打算共享一些特殊的 React 版本，其中可能包括未发布的功能。</p>\n<p>由于 React 的实际来源是<a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github 公有库</a>，因此你始终可以通过此仓库构建一个包含最新修改的 React 副本。但是，对于开发者来说，使用 npm 安装 React 会更加容易，因此我们会时常发布预发布版本到 npm registry 中。最新的示例是 16.7 Alpha 版，其中包括 Hook API 的早期版本。</p>\n<p>我们期望开发者更容易地测试 React 的预发布版本，因此我们将通过三个单独的发布渠道来规范我们的流程。</p>\n<h2 id=\"release-channels\"><a href=\"#release-channels\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发布渠道 </h2>\n<blockquote>\n<p>本文中的相关信息可以查阅<a href=\"/docs/release-channels.html\">发布渠道</a>章节。每次我们的发布流程发生变化，我们都会更新该流程。</p>\n</blockquote>\n<p>React 的每个发布渠道都是针对不同的用例进行设计地：</p>\n<ul>\n<li><a href=\"#latest-channel\"><strong>最新</strong></a>版本用于稳定的 semver React 版本。此版本可通过 npm 安装获取。此渠道为目前大家已经在用的方式。<strong>其主要用于所有面向用户的 React 应用程序。</strong></li>\n<li><a href=\"#next-channel\"><strong>Next</strong></a> 版本主要用于追踪 React 源码仓库的 master 分支。我们会将其视为下一个次要版本发布的候选版本。使用它可以进行 React 与第三方项目间的集成测试。</li>\n<li><a href=\"#experimental-channel\"><strong>实验阶段</strong></a>版本包含稳定版本中不提供的实验阶段的 API 与功能。同时它也追踪了 master 分支，但启用了附加新功能的标志。使用此渠道可以尝试即将发布的功能。</li>\n</ul>\n<p>所有版本都将发布到 npm，但只要最新版本遵循<a href=\"/docs/faq-versioning.html\">语义版本控制</a>。预发布版本（应用于 Next 版本和实验渠道的版本）会根据其内容的哈希值生成版本，例如，Next 的版本为 <code class=\"gatsby-code-text\">0.0.0-1022ee0ec</code>，实验版为 <code class=\"gatsby-code-text\">0.0.0-experimental-1022ee0ec</code>。</p>\n<p><strong>最新版是面向用户应用程序的唯一官方支持发布渠道</strong>。提供 Next 和实验版本的目的是用于测试，我们并不保证功能在这两个版本中不发生变化。因为它们并不遵循用于最新版发布的 semver 协议。</p>\n<p>通过将预发布版发布到与稳定版同一注册表中，我们可以利用许多支持 npm 工作流的工具，诸如 <a href=\"https://unpkg.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unpkg</a> 和 <a href=\"https://codesandbox.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeSandbox</a>。 </p>\n<h3 id=\"latest-channel\"><a href=\"#latest-channel\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最新版渠道 </h3>\n<p>最新版是用于稳定 React 版本的渠道。它对应是 npm 中 <code class=\"gatsby-code-text\">latest</code> 标签。此版本是所有交付给真实用户的 React 应用程序的推荐版本。</p>\n<p><strong>如果你不确定使用哪个版本，则选择最新版本。</strong>如果你是 React 开发者，那这就是你正确的选择。</p>\n<p>你可以希望最新版的更新足够稳定。版本遵循语义版本控制方案。你可以在<a href=\"/docs/faq-versioning.html\">版本政策</a>中详细了解我们对稳定性和增量迁移的承诺。</p>\n<h3 id=\"next-channel\"><a href=\"#next-channel\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next 版渠道 </h3>\n<p>Next 属于预发布渠道，用于追踪 React 仓库的 master 分支。我们在 Next 渠道中使用预发布版本作为最新版发布渠道的候选版本。你可以将 Next 视为最新版的超集，它的更新频率更高。</p>\n<p>最新的 Next 发布版与最新的最新发布版之间的更改程度，大致与两个 semver 次版本之间的更改程度相同。但是，<strong>Next 发布渠道不遵循语义版本控制</strong>。你可能希望在 Next 渠道中的后续发布版本之间偶尔有重大更改。</p>\n<p><strong>不要在面向用户的应用程序中使用预发布版本。</strong></p>\n<p>Next 渠道中的发行版本在 npm 中携带 <code class=\"gatsby-code-text\">next</code> 标签发布。版本会根据构建内容的哈希值生成，例如 <code class=\"gatsby-code-text\">0.0.0-1022ee0ec</code>。</p>\n<h4 id=\"using-the-next-channel-for-integration-testing\"><a href=\"#using-the-next-channel-for-integration-testing\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 Next 渠道版本进行集成测试 </h4>\n<p>Next 渠道旨在支持 React 与其他项目直接的集成测试。</p>\n<p>React 中的所有更改在发布之前都需进行大量的内部测试。但是，在整个 React 生态系统中使用了无数的环境与配置，因此我们不可能针对每一项进行测试。</p>\n<p>如果你是 React 第三方框架，库，开发者工具或类似基础设施项目的作者，则可以通过定期针对最新版本运行的测试用例，帮助我们一起维持 React 稳定，为你的用户和整个 React 社区保驾护航。如果你对此有兴趣，请按照下列步骤进行操作：</p>\n<ul>\n<li>在你喜欢的持续集成平台上设置 cron job。<a href=\"https://circleci.com/docs/2.0/triggers/#scheduled-builds\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CircleCI</a> 和 <a href=\"https://docs.travis-ci.com/user/cron-jobs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a> 均支持 cron job。</li>\n<li>\n<p>在 cron job 中，使用 npm 的 <code class=\"gatsby-code-text\">next</code> 标签将 React 版本更新至 Next 渠道中的最新版本。使用 npm cli：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">npm update react@next react-dom@next</code></pre></div>\n<p>或者使用 yarn：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">yarn upgrade react@next react-dom@next</code></pre></div>\n</li>\n<li>针对更新的 packages 执行测试用例。</li>\n<li>如果均通过，那么恭喜你！你的项目可以与下个小版本的 React 一起使用。</li>\n<li>如果发生意外中断，请通过<a href=\"https://github.com/facebook/react/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">提交 issus</a> 告知我们。</li>\n</ul>\n<p>Next.js 使用了此工作流。你可以将它们 <a href=\"https://github.com/zeit/next.js/blob/c0a1c0f93966fe33edd93fb53e5fafb0dcd80a9e/.circleci/config.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CircleCI 配置</a> 作为示例进行参考。</p>\n<h3 id=\"experimental-channel\"><a href=\"#experimental-channel\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实验阶段渠道 </h3>\n<p>与 Next 相似，实验阶段通道是一个预发布通道，用于追踪 React 仓库 master 分支。但不同于 Next 的是，实验阶段的发布版本包含尚未准备好广泛推广的功能及 API。</p>\n<p>通常，对 Next 更新时也会对实验版本进行更新。它们基于相同的源，但是构建时会使用不同的功能标记。</p>\n<p>实验阶段发布的版本可能与 Next 和最新版本的发布均不相同。<strong>不要在面向用户的应用程序中使用实验阶段版本。</strong> 你应该能够想象到实验渠道中发布的版本会频繁进行破坏性更新。</p>\n<p>实验版本会在 npm 上会以 <code class=\"gatsby-code-text\">experimental</code> 标签的形式发布。版本会根据构建内容的哈希值生成，例如，<code class=\"gatsby-code-text\">0.0.0-experimental-1022ee0ec</code>。</p>\n<h4 id=\"what-goes-into-an-experimental-release\"><a href=\"#what-goes-into-an-experimental-release\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实验阶段发布包含哪些内容？ </h4>\n<p>实验阶段功能并未打算公开发布，在最终确定之前可能会发生巨大变化。有些实验功能可能永远不会完成 —— 我们进行实验的目的是为了测试变更提案的可行性。</p>\n<p>例如，如果我们在宣布发布 Hook 时，其已经存在在实验渠道中，我们会在最新版本发布 Hook 之前几周，将其发布到实验渠道中。</p>\n<p>你可能会发现针对实验阶段进行集成测试很有必要。但是，请注意，实验阶段版本的稳定性是不如 Next 版本的。<strong>我们并不保证实验版本之间的稳定性。</strong></p>\n<h4 id=\"how-can-i-learn-more-about-experimental-features\"><a href=\"#how-can-i-learn-more-about-experimental-features\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何了解有关实验功能的更多信息？</h4>\n<p>实验性的功能可能会有文档，也可能不会有文档。通常，在实验渠道的内容发布到 Next 或 Stable 中之前，才会编写文档。</p>\n<p>如果找不到文档，则可能会附有 <a href=\"https://github.com/reactjs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC</a> 说明。</p>\n<p>当我们准备发布新的实验内容时，我们会发布到 React 博客中，但这并不意味着我们将公开发布每个实验内容。</p>\n<p>欲查看完整的变更列表，你可以参考 Github 公有库中的<a href=\"https://github.com/facebook/react/commits/master\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">历史记录</a>。</p>","excerpt":"为了与 React 生态系统的合作伙伴共享即将发生的变化，我们正式建立了预发布的渠道。我们希望通过这一过程有助于我们胸有成竹地对 React 进行更改，并为开发人员提供尝试试验阶段功能的机会。 此文章与从事框架，库或开发工具的开发人员息息相关。而主要使用 React 来构建应用程序的开发者无需担心此预发布渠道。 React 依靠强大的开源社区收集错误报告，pull request 以及 RFC。为了鼓励大家反馈，我们打算共享一些特殊的 React 版本，其中可能包括未发布的功能。 由于 React 的实际来源是Github 公有库，因此你始终可以通过此仓库构建一个包含最新修改的 React 副本。但是，对于开发者来说，使用 npm 安装 React 会更加容易，因此我们会时常发布预发布版本到 npm registry 中。最新的示例是 16.7 Alpha 版，其中包括 Hook API 的早期版本。 我们期望开发者更容易地测试 React…","frontmatter":{"title":"使用 React 预发布版为新功能打基础","next":null,"prev":null,"author":[{"frontmatter":{"name":"Andrew Clark","url":"https://twitter.com/acdlite"}}]},"fields":{"date":"October 22, 2019","path":"content/blog/2019-10-22-react-release-channels.md","slug":"/blog/2019/10/22/react-release-channels.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"React 18 发布计划"},"fields":{"slug":"/blog/2021/06/08/the-plan-for-react-18.html"}}},{"node":{"frontmatter":{"title":"介绍 Zero-Bundle-Size 的 React 服务端组件"},"fields":{"slug":"/blog/2020/12/21/data-fetching-with-react-server-components.html"}}},{"node":{"frontmatter":{"title":"React v17.0"},"fields":{"slug":"/blog/2020/10/20/react-v17.html"}}},{"node":{"frontmatter":{"title":"介绍全新的 JSX 转换"},"fields":{"slug":"/blog/2020/09/22/introducing-the-new-jsx-transform.html"}}},{"node":{"frontmatter":{"title":"React v17.0 RC 版本发布：没有新特性"},"fields":{"slug":"/blog/2020/08/10/react-v17-rc.html"}}},{"node":{"frontmatter":{"title":"React v16.13.0"},"fields":{"slug":"/blog/2020/02/26/react-v16.13.0.html"}}},{"node":{"frontmatter":{"title":"Building Great User Experiences with Concurrent Mode and Suspense"},"fields":{"slug":"/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html"}}},{"node":{"frontmatter":{"title":"使用 React 预发布版为新功能打基础"},"fields":{"slug":"/blog/2019/10/22/react-release-channels.html"}}},{"node":{"frontmatter":{"title":"全新的 React DevTools 简介"},"fields":{"slug":"/blog/2019/08/15/new-react-devtools.html"}}},{"node":{"frontmatter":{"title":"React v16.9.0 发布及 Roadmap 最新进展"},"fields":{"slug":"/blog/2019/08/08/react-v16.9.0.html"}}}]}},"pageContext":{"slug":"/blog/2019/10/22/react-release-channels.html"}},"staticQueryHashes":[]}