{"componentChunkName":"component---src-templates-blog-js","path":"/blog/2013/08/19/use-react-and-jsx-in-python-applications.html","result":{"data":{"markdownRemark":{"html":"<p>今天我们很高兴能发布 <a href=\"https://github.com/facebook/react-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyReact</a> 的初始版本，它可以让你在 Python 应用程序中更简单的使用 React 与 JSX。它被设计为一个将 JSX 文件转换为 JavaScript 的 API，同时提供最新 React 源文件的访问。</p>\n<h2 id=\"usage\"><a href=\"#usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 </h2>\n<p>通过我们提供的 <code class=\"gatsby-code-text\">jsx</code> 模块转换多个 JSX 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"gatsby-code-python\"><code class=\"gatsby-code-python\"><span class=\"token keyword\">from</span> react <span class=\"token keyword\">import</span> jsx\n\n<span class=\"token comment\"># 使用 JSXTransformer 类来操作多个路径。</span>\ntransformer <span class=\"token operator\">=</span> jsx<span class=\"token punctuation\">.</span>JSXTransformer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> jsx_path<span class=\"token punctuation\">,</span> js_path <span class=\"token keyword\">in</span> my_paths<span class=\"token punctuation\">:</span>\n    transformer<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>jsx_path<span class=\"token punctuation\">,</span> js_path<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对于单个文件，你可以使用一个快捷方法.</span>\njsx<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/input/file.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/output/file.js'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>对于指向 React 文件的完整目录，可以使用 <code class=\"gatsby-code-text\">source</code> 模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"gatsby-code-python\"><code class=\"gatsby-code-python\"><span class=\"token keyword\">from</span> react <span class=\"token keyword\">import</span> source\n\n<span class=\"token comment\"># 如果指定文件不存在， path_for 会抛出 IOError 异常</span>\nreact_js <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>path_for<span class=\"token punctuation\">(</span><span class=\"token string\">'react.min.js'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"django\"><a href=\"#django\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django </h2>\n<p>PyReact 包括一个与 <a href=\"https://github.com/cyberdelia/django-pipeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">django-pipeline</a> 同时使用的 JSX 编译器。将它加入你项目的管道设置，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"gatsby-code-python\"><code class=\"gatsby-code-python\">PIPELINE_COMPILERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'react.utils.pipeline.JSXCompiler'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"installation\"><a href=\"#installation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 </h2>\n<p>PyReact 托管于 PyPI, 并可以使用 <code class=\"gatsby-code-text\">pip</code> 安装:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">$ pip install PyReact</code></pre></div>\n<p>或者，将其加入你的 <code class=\"gatsby-code-text\">requirements</code> 文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">PyReact==0.1.1</code></pre></div>\n<p><strong>关于依赖</strong>: PyReact 使用 <a href=\"https://github.com/doloopwhile/PyExecJS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyExecJS</a> 以执行打包过的 React 代码, 而这要求你的机器已经装有 JS 运行时环境。我们没有 明确指定上述的运行时环境 —— Mac OS X 自带一个。当然，如果你在使用其他平台，我们推荐使用 <a href=\"https://code.google.com/p/pyv8/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyV8</a>。</p>\n<p>鉴于这是初始版本，我们只在 Python 2.7 平台进行过测试。如果你希望在未来得到关于 Python 3 版本的支持，或者发现任何值得改进的地方，我们欢迎你的<a href=\"https://github.com/facebook/react-python/blob/main/CONTRIBUTING.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">贡献</a>！</p>","excerpt":"今天我们很高兴能发布 PyReact 的初始版本，它可以让你在 Python 应用程序中更简单的使用 React 与 JSX。它被设计为一个将 JSX 文件转换为 JavaScript 的 API，同时提供最新 React 源文件的访问。 使用  通过我们提供的  模块转换多个 JSX 文件： 对于指向 React 文件的完整目录，可以使用  模块： Django  PyReact 包括一个与 django-pipeline 同时使用的 JSX 编译器。将它加入你项目的管道设置，如下： 安装  PyReact 托管于 PyPI, 并可以使用  安装: 或者，将其加入你的  文件: 关于依赖: PyReact 使用 PyExecJS 以执行打包过的 React 代码, 而这要求你的机器已经装有 JS 运行时环境。我们没有 明确指定上述的运行时环境 —— Mac OS X 自带一个。当然，如果你在使用其他平台，我们推荐使用 PyV8。 鉴于这是初始版本，我们只在 Python 2.7 平台进行过测试。如果你希望在未来得到关于 Python…","frontmatter":{"title":"在 Python 应用程序中使用 React 与 JSX","next":null,"prev":null,"author":[{"frontmatter":{"name":"Kunal Mehta","url":"https://github.com/kmeht"}}]},"fields":{"date":"August 19, 2013","path":"content/blog/2013-08-19-use-react-and-jsx-in-python-applications.md","slug":"/blog/2013/08/19/use-react-and-jsx-in-python-applications.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"React 18 发布计划"},"fields":{"slug":"/blog/2021/06/08/the-plan-for-react-18.html"}}},{"node":{"frontmatter":{"title":"介绍 Zero-Bundle-Size 的 React 服务端组件"},"fields":{"slug":"/blog/2020/12/21/data-fetching-with-react-server-components.html"}}},{"node":{"frontmatter":{"title":"React v17.0"},"fields":{"slug":"/blog/2020/10/20/react-v17.html"}}},{"node":{"frontmatter":{"title":"介绍全新的 JSX 转换"},"fields":{"slug":"/blog/2020/09/22/introducing-the-new-jsx-transform.html"}}},{"node":{"frontmatter":{"title":"React v17.0 RC 版本发布：没有新特性"},"fields":{"slug":"/blog/2020/08/10/react-v17-rc.html"}}},{"node":{"frontmatter":{"title":"React v16.13.0"},"fields":{"slug":"/blog/2020/02/26/react-v16.13.0.html"}}},{"node":{"frontmatter":{"title":"Building Great User Experiences with Concurrent Mode and Suspense"},"fields":{"slug":"/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html"}}},{"node":{"frontmatter":{"title":"使用 React 预发布版为新功能打基础"},"fields":{"slug":"/blog/2019/10/22/react-release-channels.html"}}},{"node":{"frontmatter":{"title":"全新的 React DevTools 简介"},"fields":{"slug":"/blog/2019/08/15/new-react-devtools.html"}}},{"node":{"frontmatter":{"title":"React v16.9.0 发布及 Roadmap 最新进展"},"fields":{"slug":"/blog/2019/08/08/react-v16.9.0.html"}}}]}},"pageContext":{"slug":"/blog/2013/08/19/use-react-and-jsx-in-python-applications.html"}},"staticQueryHashes":[]}