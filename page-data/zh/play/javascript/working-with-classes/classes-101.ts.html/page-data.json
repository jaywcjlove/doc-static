{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/javascript/working-with-classes/classes-101.ts.html","result":{"pageContext":{"name":"Classes 101","title":"Classes 101","lang":"zh","html":"\n 类（class）是一种始终用构造函数来创建的 JavaScript 对象。这些类的行为\n 很像对象，并且具有与 Java、C#、Swift 类似的继承结构。\n\n 下面是一个类的示例：\n\n<code><pre>\nclass Vendor {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  greet() {\n    return \"Hello, welcome to \" + this.name;\n  }\n}\n\n</pre></code>\n// 您可以通过 new 关键字创建一个实例，您可以通过该对象调用方法\n 和访问属性。\n\n<code><pre>\nconst shop = new Vendor(\"Ye Olde Shop\");\nconsole.log(shop.greet());\n\n// 您可以继承一个对象。这是一个可以有多种名字的食品推车：\n\nclass FoodTruck extends Vendor {\n  cuisine: string;\n\n  constructor(name: string, cuisine: string) {\n    super(name);\n    this.cuisine = cuisine;\n  }\n\n  greet() {\n    return \"Hi, welcome to food truck \" + this.name + \". We serve \" + this.cuisine + \" food.\";\n  }\n}\n\n</pre></code>\n// 由于我们标记创建新的 FoodTruck 需要两个参数，TypeScript 将\n 在您只传递一个参数时报错：\n\n<code><pre>\nconst nameOnlyTruck = new FoodTruck(\"Salome's Adobo\");\n\n// 如果您正确地传递两个参数，将可以创建一个 FoodTruck 的新实例：\n\nconst truck = new FoodTruck(\"Dave's Doritos\", \"junk\");\nconsole.log(truck.greet());\n","redirectHref":"zh/play/?#example/classes-101"}},"staticQueryHashes":[]}