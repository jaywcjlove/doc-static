{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/javascript/external-apis/typescript-with-node.js.html","result":{"pageContext":{"name":"TypeScript with Node","title":"TypeScript with Node","lang":"zh","html":"\n Node.js 是一个非常受欢迎的基于 v8（Chrome 的 JavaScript 引擎）\n 的 JavaScript 运行时。你可以用它来构建服务器，前端客户端以及他们\n 之间的任何内容。\n\n https://nodejs.org/\n\n Node.js 带有一组扩展 JavaScript 运行时的核心库，他们包括路径处理：\n\n<code><pre>\nimport { join } from \"path\";\nconst myPath = join(\"~\", \"downloads\", \"todo_list.json\");\n\n// 操作文件：\n\nimport { readFileSync } from \"fs\";\nconst todoListText = readFileSync(myPath, \"utf8\");\n\n</pre></code>\n// 您可以使用 JSDoc 风格的类型来将类型逐步添加到您的 JavaScript 项目中。\n 我们将基于 JSON 的结构作为列表项构建一个 TODO 列表：\n\n<code><pre>\n/**\n * @typedef {Object} TODO 一个 TODO 元素\n * @property {string} title TODO 元素所展示的名字\n * @property {string} body TODO 元素的描述\n * @property {boolean} done TODO 元素是否已完成\n */\n\n</pre></code>\n// 将 JSON.parse 的返回结果赋值给它。\n 要了解更多关于此的信息，可以查看：example:jsdoc-support\n\n<code><pre>\n/** @type {TODO[]} TODO 的列表 */\nconst todoList = JSON.parse(todoListText);\n\n// 以及其它实用库：\nimport { spawnSync } from \"child_process\";\ntodoList\n  .filter(todo => !todo.done)\n  .forEach(todo => {\n    // 使用 ghi 客户端对每个未完成的 todo 列表项创建 issue。\n\n    // 注意，当您高亮下面的 “todo.title” 时，您会在 JS 中获得\n    // 正确的自动完成功能和文档。\n    spawnSync(`ghi open --message \"${todo.title}\\n${todo.body}\"`);\n  });\n\n</pre></code>\n// TypeScript 通过 DefinitelyTyped 为所有内置模块提供了最新的\n 类型定义——这意味着您可以编写具有很高类型覆盖率的 node 程序。\n\n","redirectHref":"zh/play/?#example/typescript-with-node"}},"staticQueryHashes":[]}