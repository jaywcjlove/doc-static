{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html","result":{"pageContext":{"name":"Function Chaining","title":"Function Chaining","lang":"zh","html":"\n 在 JavaScript 中，链式函数是很常见的 API 模式。由于他们\n 具有嵌套特性，所以可以让您的代码减少中间值，并且增加可读性。\n\n jQuery 拥有一个常见的、可以链式使用的 API，这是\n jQuery 与 DefinitelyTyped 中的类型一起使用的示例：\n\n<code><pre>\nimport $ from \"jquery\";\n\n// 这是使用 jQuery API 的示例：\n\n$(\"#navigation\").css(\"background\", \"red\").height(300).fadeIn(200);\n\n</pre></code>\n// 如果您在上面的行中增加了一个点（.），则会看到一长串函数。\n 这种模式很容易在 JavaScript 中复现。关键是要确保\n 返回相同的对象。\n\n 这是创建链式 API 的一个示例。关键是要有一个跟踪内部状态的\n 外部函数，以及一个最终返回的暴露 API 的对象。\n\n<code><pre>\nconst addTwoNumbers = (start = 1) => {\n  let n = start;\n\n  const api = {\n    // 实现您 API 中的所有函数\n    add(inc: number = 1) {\n      n += inc;\n      return api;\n    },\n\n    print() {\n      console.log(n);\n      return api;\n    },\n  };\n  return api;\n};\n\n// 允许我们使用与 jQuery 中相同的 API 风格：\n\naddTwoNumbers(1).add(3).add().print().add(1);\n\n// 这是一个使用类时的链式调用示例：\n\nclass AddNumbers {\n  private n: number;\n\n  constructor(start = 0) {\n    this.n = start;\n  }\n\n  public add(inc = 1) {\n    this.n = this.n + inc;\n    return this;\n  }\n\n  public print() {\n    console.log(this.n);\n    return this;\n  }\n}\n\n// 下面的代码可以按预期工作：\n\nnew AddNumbers(2).add(3).add().print().add(1);\n\n</pre></code>\n// 本例是使用 TypeScript 的类型推导来为 JavaScript 的模式\n 提供帮助的一种方法。\n\n 更多的例子可以查看：\n\n  - example:code-flow\n","redirectHref":"zh/play/?esModuleInterop=true#example/function-chaining"}},"staticQueryHashes":[]}