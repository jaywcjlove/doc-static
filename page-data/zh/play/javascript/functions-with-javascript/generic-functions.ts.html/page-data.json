{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html","result":{"pageContext":{"name":"Generic Functions","title":"Generic Functions","lang":"zh","html":" 泛型提供了在类型中以变量的形式使用类型的元方法，\n\n 我们将努力使本例保持简洁，您可以使用泛型做很多事，并且您可能有时\n 会看到一些非常复杂的使用泛型的代码——但这并不意味着泛型很复杂。\n\n 让我们从将 input 对象包装在数组中的示例开始，在这种情况下，我们\n 只关心一个类型变量，即传入的类型。\n\n<code><pre>\nfunction wrapInArray<Type>(input: Type): Type[] {\n  return [input];\n}\n\n</pre></code>\n// 注：通常将 Type 称为 T，在文化上，这是一种类似于人们在 for 循环中使用\n i 来表示索引。T 通常表示 Type，因此为了清楚起见，我们将使用全名。\n\n 我们的函数将使用推导来确保传入的类型与传出的类型相同（即使它被包含在数组中）。\n\n<code><pre>\nconst stringArray = wrapInArray(\"hello generics\");\nconst numberArray = wrapInArray(123);\n\n</pre></code>\n// 我们可以通过检查是否可以将字符串数组赋值诶应为对象数组的函数\n 来验证其是否正常工作。\n<code><pre>\nconst notStringArray: string[] = wrapInArray({});\n\n// 您还可以通过自行添加类型来跳过泛型类型推导：\nconst stringArray2 = wrapInArray<string>(\"\");\n\n</pre></code>\n// wrapInArray 允许使用任何类型，但在某些情况下，您只允许某些类型的\n 子集。在这种情况下，您可以指定类型必须扩展特定类型。\n\n<code><pre>\ninterface Drawable {\n  draw: () => void;\n}\n\n// 这个函数接收一组对象，这些对象具有用于在屏幕上绘制的功能：\nfunction renderToScreen<Type extends Drawable>(input: Type[]) {\n  input.forEach((i) => i.draw());\n}\n\nconst objectsWithDraw = [{ draw: () => {} }, { draw: () => {} }];\nrenderToScreen(objectsWithDraw);\n\n// 如果没有 draw，它会报错：\n\nrenderToScreen([{}, { draw: () => {} }]);\n\n</pre></code>\n// 当您有多个变量时，泛型看起来可能会很复杂。这是一个缓存函数的示例，\n 可以让您拥有不同的输入类型和缓存。\n\n<code><pre>\ninterface CacheHost {\n  save: (a: any) => void;\n}\n\nfunction addObjectToCache<Type, Cache extends CacheHost>(obj: Type, cache: Cache): Cache {\n  cache.save(obj);\n  return cache;\n}\n\n</pre></code>\n// 这和上面相同，但有一个额外的参数。\n 注：尽管如此，我们必须使用 any。这可以使用泛型接口来解决。\n\n<code><pre>\ninterface CacheHostGeneric<ContentType> {\n  save: (a: ContentType) => void;\n}\n\n// 在使用 CacheHostGeneric 时，您必须告诉它 ContentType 是什么。\n\nfunction addTypedObjectToCache<Type, Cache extends CacheHostGeneric<Type>>(obj: Type, cache: Cache): Cache {\n  cache.save(obj);\n  return cache;\n}\n\n</pre></code>\n// 单从语法而言，这很快就变复杂了。但是这提供了额外的安全性。这是取舍，您\n 现在有更多相关的知识要做。在为其他人提供 API 时，泛型提供了一种灵活的\n 方法，让他们通过完整的类型推导使用自己的类型。\n\n 更多关于泛型、类和函数的示例可以查看：\n\n example:advanced-classes\n example:typescript-with-react\n https://www.typescriptlang.org/docs/handbook/generics.html\n","redirectHref":"zh/play/?#example/generic-functions"}},"staticQueryHashes":[]}