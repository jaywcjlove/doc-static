{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/javascript/modern-javascript/immutability.ts.html","result":{"pageContext":{"name":"Immutability","title":"Immutability","lang":"zh","html":" JavaScript 是有一门多种方式声明您的对象不可变的语言。最常见的方式是\n const ——表示某些值不会变。\n\n<code><pre>\nconst helloWorld = \"Hello World\";\n\n</pre></code>\n// 您不可以更改 helloWorld，TypeScript 将会在您试图修改时报错，\n 因为您同样不能再运行时这样做。\n\n<code><pre>\nhelloWorld = \"Hi world\";\n\n</pre></code>\n// 为什么要关心不变性？很大一部分原因是为了减少代码复杂度。如果您\n 可以减少可变事物的数量，那么需要跟踪的东西也会随之变少。\n\n 使用 const 是很好的第一步，但是使用 object 时这样会失效。\n\n<code><pre>\nconst myConstantObject = {\n  msg: \"Hello World\",\n};\n\n</pre></code>\n// myConstantObject 并不是一个常量，因为我们仍然可以更改对象的某些\n 部分。例如我们可以更改 msg：\n\n<code><pre>\nmyConstantObject.msg = \"Hi World\";\n\n</pre></code>\n// const 代表该引用的值不变，但对象本身可能在内部发生变化。\n 我们可以改用 Object.freeze 来实现。\n\n<code><pre>\nconst myDefinitelyConstantObject = Object.freeze({\n  msg: \"Hello World\",\n});\n\n</pre></code>\n// 当一个对象被 “冻结”，之后您将不能改变其内部。TypeScript 将\n 对这些情况抛出错误：\n\n<code><pre>\nmyDefinitelyConstantObject.msg = \"Hi World\";\n\n// 这对数组同样有效：\n\nconst myFrozenArray = Object.freeze([\"Hi\"]);\nmyFrozenArray.push(\"World\");\n\n// 使用 freeze 代表您确认这个对象将会保持不变。\n\n</pre></code>\n// TypeScript 有一些为了改进对不可变数据处理的额外语法，您可以\n 在这些例子中里看到他们：\n\n example:literals\n example:type-widening-and-narrowing\n","redirectHref":"zh/play/?#example/immutability"}},"staticQueryHashes":[]}