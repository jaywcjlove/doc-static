{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/typescript/type-primitives/tuples.ts.html","result":{"pageContext":{"name":"Tuples","title":"Tuples","lang":"zh","html":" 通常来说，一个数组包含某个类型的一个或多个对象。TypeScript 针对包含\n 多个类型的数组有特殊的分析，并且在数组中索引的位置非常重要。\n\n 这被称为元组（Tuples），可以将他们视为连接数据的一种\n 方式，但是语法上来说比有键的对象简单。\n\n 你可以像创建 JavaScript 的数组一样创建一个元组。\n\n<code><pre>\nconst failingResponse = [\"Not Found\", 404];\n\n// 但是你需要声明它的类型是一个元组。\n\nconst passingResponse: [string, number] = [\"{}\", 200];\n\n</pre></code>\n// 如果你将鼠标悬停在两个变量的名称上，你可以看到\n 数组（(string | number)[]）和元组 （[string, number]）之间的不同。\n\n 对于数组来说，顺序不重要，所以任何索引上的子项都可以是 string 或 number。\n 在元组中，顺序和长度将会得到报障。\n\n<code><pre>\nif (passingResponse[1] === 200) {\n  const localInfo = JSON.parse(passingResponse[0]);\n  console.log(localInfo);\n}\n\n</pre></code>\n// 这意味着 TypeScript 将在索引的位置提供正确的类型。如果您\n 尝试在未声明的索引处访问对象将会引发错误。\n\n<code><pre>\npassingResponse[2];\n\n// 对于较短的数据组合，元组看起来是一个不错的模式。\n\ntype StaffAccount = [number, string, string, string?];\n\nconst staff: StaffAccount[] = [\n  [0, \"Adankwo\", \"adankwo.e@\"],\n  [1, \"Kanokwan\", \"kanokwan.s@\"],\n  [2, \"Aneurin\", \"aneurin.s@\", \"Supervisor\"],\n];\n\n</pre></code>\n// 如果元组的开头有一组已知的类型，然后跟着未知长度，可以使用 spread 运算符\n 来表示它可以具有任何长度，并且额外的索引将会具有指定的类型。\n\n<code><pre>\ntype PayStubs = [StaffAccount, ...number[]];\n\nconst payStubs: PayStubs[] = [\n  [staff[0], 250],\n  [staff[1], 250, 260],\n  [staff[0], 300, 300, 300],\n];\n\nconst monthOnePayments = payStubs[0][1] + payStubs[1][1] + payStubs[2][1];\nconst monthTwoPayments = payStubs[1][2] + payStubs[2][2];\nconst monthThreePayments = payStubs[2][2];\n\n// 您可以使用元组来描述带有未知长度参数的函数：\n\ndeclare function calculatePayForEmployee(id: number, ...args: [...number[]]): number;\n\ncalculatePayForEmployee(staff[0][0], payStubs[0][1]);\ncalculatePayForEmployee(staff[1][0], payStubs[1][1], payStubs[1][2]);\n\n</pre></code>\n//\n https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#tuples-in-rest-parameters-and-spread-expressions\n https://auth0.com/blog/typescript-3-exploring-tuples-the-unknown-type/\n","redirectHref":"zh/play/?#example/tuples"}},"staticQueryHashes":[]}