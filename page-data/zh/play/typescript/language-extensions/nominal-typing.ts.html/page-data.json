{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html","result":{"pageContext":{"name":"Nominal Typing","title":"Nominal Typing","lang":"zh","html":" 标称类型系统（nominal type system）代表每一个类型都是唯一的。\n 即使你有值相同的数据，你也不可以赋值给其他不同的类型。\n\n TypeScript 的类型系统是结构化（structural）的，也就是说如果\n 一个类型的形状像一只鸭子，那它就是一只鸭子。如果一只鹅有所有鸭子的属性，那么它也是一只鸭子。\n 你可以在这里了解更多: example:structural-typing\n\n 这可能会有一些缺点，例如有一些有着特殊上下文的字符串或数字，\n 并且你不希望他们被用到其他地方，例如：\n - 用户输入的不安全的字符串\n - 用于翻译的字符串\n - 数字形式的用户 ID\n - 访问令牌\n\n 我们可以通过一点点额外的代码来实现和标称类型系统近乎同样的效果。\n\n 我们可以使用一个具有属性 '__brand'（这是一个约定俗成的名称）\n 并且值是一个唯一常量的类型与字符串的交集类型来实现。\n 这样会使普通的字符串不可以复制给下面的 ValidatedInputString 类型。\n\n<code><pre>\ntype ValidatedInputString = string & { __brand: \"User Input Post Validation\" };\n\n</pre></code>\n// 我们会使用一个函数来将一个普通字符串转换为 ValidatedInputString 类型。\n 但是值得注意的是，这只是我们将这个转换告诉 TypeScript。\n\n<code><pre>\nconst validateUserInput = (input: string) => {\n  const simpleValidatedInput = input.replace(/\\</g, \"≤\");\n  return simpleValidatedInput as ValidatedInputString;\n};\n\n// 现在我们可以创建一个只接受我们的新的标称类型而不是普通字符串的函数。\n\nconst printName = (name: ValidatedInputString) => {\n  console.log(name);\n};\n\n// 例如，这里有一些用户输入的不安全的字符串，只有经过验证才可以被允许使用。\n\nconst input = \"\\n<script>alert('bobby tables')</script>\";\nconst validatedInput = validateUserInput(input);\nprintName(validatedInput);\n\n// 另一方面，将未经过验证的字符串传入 'printName' 会导致编译错误。\n\nprintName(input);\n\n</pre></code>\n// 你可以阅读这个有 400 多个评论的 Github issue，\n 从中找到如何通过不同的方法创建标称类型, 以及关于它们的全面论述和折衷方案。\n\n https://github.com/Microsoft/TypeScript/issues/202\n\n 这篇文章是一个很好的总结。\n\n https://michalzalecki.com/nominal-typing-in-typescript/\n","redirectHref":"zh/play/?#example/nominal-typing"}},"staticQueryHashes":[]}