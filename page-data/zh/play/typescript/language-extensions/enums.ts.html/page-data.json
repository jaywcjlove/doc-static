{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/typescript/language-extensions/enums.ts.html","result":{"pageContext":{"name":"Enums","title":"Enums","lang":"zh","html":" 枚举是 TypeScript 为了更简单的处理一组具名固定值\n 而添加到 JavaScript 中的功能。\n\n 枚举默认是基于数字的，它的值从 0 开始，其余的每个值都会自增 1，\n 它对于具体的值不重要的场景非常有用。\n\n<code><pre>\nenum CompassDirection {\n  North,\n  East,\n  South,\n  West,\n}\n\n// 可以通过添加注解来为枚举指定值，并且其他值将继续自增。\n\nenum StatusCodes {\n  OK = 200,\n  BadRequest = 400,\n  Unauthorized,\n  PaymentRequired,\n  Forbidden,\n  NotFound,\n}\n\n// 枚举可以通过 枚举名.值名 来引用。\n\nconst startingDirection = CompassDirection.East;\nconst currentStatus = StatusCodes.OK;\n\n// 枚举支持用访问值和用值访问键两种访问方式。\n\nconst okNumber = StatusCodes.OK;\nconst okNumberIndex = StatusCodes[\"OK\"];\nconst stringBadRequest = StatusCodes[400];\n\n</pre></code>\n// 枚举可以是不同的类型，其中字符串是一种常见的类型。\n 使用字符串值的枚举可以帮助简化调试，因为你不需要根据运行时的数字去寻找对应的名字。\n\n<code><pre>\nenum GamePadInput {\n  Up = \"UP\",\n  Down = \"DOWN\",\n  Left = \"LEFT\",\n  Right = \"RIGHT\",\n}\n\n// 如果你想减少在运行时的数字对象的数量，你可以使用常量枚举。\n\n// 常量枚举会在编译时被 TypeScript 替换为对应的值，而不是在运行时查找对象。\n\nconst enum MouseAction {\n  MouseDown,\n  MouseUpOutside,\n  MouseUpInside,\n}\n\nconst handleMouseAction = (action: MouseAction) => {\n  switch (action) {\n    case MouseAction.MouseDown:\n      console.log(\"Mouse Down\");\n      break;\n  }\n};\n\n</pre></code>\n// 如果查看编译出的 JavaScript，你可以看到其他的枚举怎样以对象和函数的形式存在，\n 但 MouseAction 并不存在。\n\n 在 handleMouseAction 的 switch 语句中，对于 MouseAction.MouseDown 的检查也是如此。\n\n 枚举可以做更多的事情，你你可以在 TypeScript 手册中查看更多:\n\n https://www.typescriptlang.org/docs/handbook/enums.html\n","redirectHref":"zh/play/?#example/enums"}},"staticQueryHashes":[]}