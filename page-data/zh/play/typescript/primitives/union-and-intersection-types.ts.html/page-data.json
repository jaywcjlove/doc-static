{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html","result":{"pageContext":{"name":"Union and Intersection Types","title":"Union and Intersection Types","lang":"zh","html":" 类型联合 （Type unions）是用来定义一个对象可能为多个类型的情况。\n\n<code><pre>\ntype StringOrNumber = string | number;\ntype ProcessStates = \"open\" | \"closed\";\ntype OddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;\ntype AMessyUnion = \"hello\" | 156 | { error: true };\n\n</pre></code>\n// 如果你不了解 \"open\"、\"closed\" 等字符串的用法，可以\n 查看 example:literals\n\n 我们可以将多个不同的类型混合到一个并集类型中，\n 我们把他称为 “这个值的类型是这些类型之一”。\n\n 然后 TypeScript 将会让您确认在运行时如何确定它是哪个类型的值。\n\n 并集类型有时可能被类型扩展而破坏，例如：\n\n<code><pre>\ntype WindowStates = \"open\" | \"closed\" | \"minimized\" | string;\n\n</pre></code>\n// 如果你将鼠标悬停在上方，你可以看到 WindowStates 变为了\n 一个字符串而不是一个并集类型。可以在这里查看：example:type-widening-and-narrowing\n\n 如果说并集类型代表 “或”，那么交集类型代表 “且”。\n 交集类型代表两个类型相交以创建一个新类型，这将会允许类型的组合。\n\n<code><pre>\ninterface ErrorHandling {\n  success: boolean;\n  error?: { message: string };\n}\n\ninterface ArtworksData {\n  artworks: { title: string }[];\n}\n\ninterface ArtistsData {\n  artists: { name: string }[];\n}\n\n</pre></code>\n// 这些接口由响应组合而成，他们既可以具有统一的错误处理，\n 又可以具有自己的数据。\n\n<code><pre>\ntype ArtworksResponse = ArtworksData & ErrorHandling;\ntype ArtistsResponse = ArtistsData & ErrorHandling;\n\n// 例如：\n\nconst handleArtistsResponse = (response: ArtistsResponse) => {\n  if (response.error) {\n    console.error(response.error.message);\n    return;\n  }\n\n  console.log(response.artists);\n};\n\n// 当对象必须含有下面的一个或两个值时，交集和并集类型的混合将会非常有用。\n\ninterface CreateArtistBioBase {\n  artistID: string;\n  thirdParty?: boolean;\n}\n\ntype CreateArtistBioRequest = (CreateArtistBioBase & { html: string }) | { markdown: string };\n\n</pre></code>\n// 现在您只有在包含 artistID 和（html 或 markdown）时\n 您才能创建对应的请求。\n\n<code><pre>\nconst workingRequest: CreateArtistBioRequest = {\n  artistID: \"banksy\",\n  markdown: \"Banksy is an anonymous England-based graffiti artist...\",\n};\n\nconst badRequest: CreateArtistBioRequest = {\n  artistID: \"banksy\",\n};\n","redirectHref":"zh/play/?#example/union-and-intersection-types"}},"staticQueryHashes":[]}