{"componentChunkName":"component---src-templates-play-example-tsx","path":"/zh/play/typescript/language/soundness.ts.html","result":{"pageContext":{"name":"Soundness","title":"Soundness","lang":"zh","html":"\n 如果您没有类型理论方面的背景知识，您可能不太了解\n 类型系统是 “健全的” 这个概念。\n\n 健全性是指编译器可以使值不仅在编译时，还可以在运行时具有预期的类型。\n 这对于大多数从一开始就具有类型的编程语言来说是很正常的。\n\n 要对于一个已经存在了几十年的语言建立一个类型系统，就需要对三个质量维度进行\n 权衡和取舍：简单性，可用性和健全性。\n\n TypeScript 的目标是支持所有的 JavaScript 代码，\n 且为 JavaScript 添加类型支持时，语言趋向于简单易用。\n\n 让我们看一些让 TypeScript 看起来没那么健全的例子，\n 并且去理解这些权衡和取舍是什么样子。\n\n 类型断言（Type Assertions）\n\n<code><pre>\nconst usersAge = (\"23\" as any) as number;\n\n</pre></code>\n// TypeScript 允许您使用类型断言来重写一些可能错误的类型推断。\n 使用类型断言代表告诉 TypeScript 您知道最正确的信息，\n 并且 TypeScript 将会尝试让您继续使用它。\n\n 健全性比较好的语言有时会使用运行时检查来确保数据与您的类型匹配。\n 但是 TypeScript 旨在不对编译后的代码产生类型感知的运行时的影响。\n\n 函数参数双变\n\n 函数的参数支持将参数重新定义为原始类型声明的子类型。\n\n<code><pre>\ninterface InputEvent {\n  timestamp: number;\n}\ninterface MouseInputEvent extends InputEvent {\n  x: number;\n  y: number;\n}\ninterface KeyboardInputEvent extends InputEvent {\n  keyCode: number;\n}\n\nfunction listenForEvent(eventType: \"keyboard\" | \"mouse\", handler: (event: InputEvent) => void) {}\n\n</pre></code>\n// 我们可以将参数的类型重新声明为它定义的子类型。\n 上例中 handler 预期为一个 'InputEvent' 类型，但是在后面\n 使用的例子中，TypeScript 接受附加了新属性的类型。\n\n<code><pre>\nlistenForEvent(\"keyboard\", (event: KeyboardInputEvent) => {});\nlistenForEvent(\"mouse\", (event: MouseInputEvent) => {});\n\n// 而这个可以一直回溯到最小的公共类型：\n\nlistenForEvent(\"mouse\", (event: {}) => {});\n\n// 但没有更进一步。\n\nlistenForEvent(\"mouse\", (event: string) => {});\n\n// 这覆盖了实际环境中 JavaScript 事件监听器的模式，但是会牺牲一些健全性。\n\n</pre></code>\n// 在 'strictFunctionTypes' 选项开启时，TypeScript 可以对此抛出一些异常，\n 或者您可以通过函数重载来解决这个特殊情况。\n 具体可以看 example:typing-functions\n\n Void special casing\n\n Parameter Discarding\n\n 查看 example:structural-typing 以了解更多函数参数的特殊例子。\n\n 剩余参数\n\n 剩余参数均被推断为可选参数，这意味着 TypeScript 将无法确保\n 用于回调的参数的数量。\n\n<code><pre>\nfunction getRandomNumbers(count: number, callback: (...args: number[]) => void) {}\n\ngetRandomNumbers(2, (first, second) => console.log([first, second]));\ngetRandomNumbers(400, (first) => console.log(first));\n\n// 空返回值函数可以匹配具有返回值的函数\n\n// 一个返回空的函数，可以接受一个返回其他类型的函数。\n\nconst getPI = () => 3.14;\n\nfunction runFunction(func: () => void) {\n  func();\n}\n\nrunFunction(getPI);\n\n// 要了解更多关于类型系统健全性取舍的内容，可以查看：\n\n</pre></code>\n// https://github.com/Microsoft/TypeScript/wiki/FAQ#type-system-behavior\n https://github.com/Microsoft/TypeScript/issues/9825\n https://www.typescriptlang.org/docs/handbook/type-compatibility.html\n","redirectHref":"zh/play/?strictFunctionTypes=false#example/soundness"}},"staticQueryHashes":[]}