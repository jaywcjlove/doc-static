{"componentChunkName":"component---src-templates-glossary-tsx","path":"/glossary","result":{"data":{"markdownRemark":{"id":"318001ce-b444-5141-aad0-7384bf34e247","html":"<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='declare' ><a href='#declare' name='Declare' aria-label=\"Link to the section Declare\" aria-labelledby='declare'>#</a> Declare</h3>\n<p>The <code>declare</code> keyword is used to inform the TypeScript <a href=\"#type-system\">Type System</a> that a variable exists even if it cannot be found in the current source code.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Declare that a ghost exists, and that it has a function called \"boo\"</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const ghost: {&#10;    boo: () => void;&#10;}' >ghost</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #795E26\"><data-lsp lsp='(property) boo: () => void' >boo</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const ghost: {&#10;    boo: () => void;&#10;}' >ghost</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) boo: () => void' >boo</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEBEFMGMBsEMBOlQBcAW9WnqA5ugPYDO2kAHgJanEA0OAdgCZqbaXabE6gBmArg2ipKhBqGjxYsSCwBEAI0KE5AKCYwEyCWNL4ipAFygA3qCWFjACgCUoALwA+UADdClFgF8A3KtUESVAA6C1tvIA'>Try</a></div></pre>\n<p>TypeScript would <a href=\"#emit\">emit</a> JavaScript code like:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">ghost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">boo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAlAEQKYDGANgIYBO+o60p6opoA5nJPfgB6puQA0DAOwAm1WvQyhakBqABmAVwGF0qWANCFSxYvhEAiAEaxYezEKJlKGtW2at0ALlABvUEdhOAFAEpQAXgA+UAA3WFQRAF8AbkxMFlg2ADp3HyigA'>Try</a></div></pre>\n<p>This code could crash if there isn’t other code setting up the <code>ghost</code> object elsewhere.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='emit' ><a href='#emit' name='Emit' aria-label=\"Link to the section Emit\" aria-labelledby='emit'>#</a> Emit</h3>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='index-signatures' ><a href='#index-signatures' name='Index Signature' aria-label=\"Link to the section Index Signature\" aria-labelledby='index-signatures'>#</a> Index Signature</h3>\n<p>A type in TypeScript usually describes an exact set of fields to match on an object.\nAn index signature is a way to define the <a href=\"#shape\">Shape</a> of fields which are not known ahead of time.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MathConstants = {&#10;    [key: string]: number;&#10;    pi: 3.14159;&#10;    phi: 1.61803;&#10;}' >MathConstants</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: 3.14159' >pi</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3.14159</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) phi: 1.61803' >phi</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1.61803</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ModernConstants' >ModernConstants</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ModernConstants.taniguchi: 0.6782344919' >taniguchi</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">0.6782344919</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ModernConstants.raabe: 0.9189385332' >raabe</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">0.9189385332</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAsghsAFgYQPYDsDOw7uJqAXigG8AoKKMASwC4oBmAOgEYAWFgVgE4BuCqojpQWTAGwsAHAAYG-AQG0A1hBD1sAJ2roA5gF166AK4BbAEYQN-AL7ztwSwDM4AY2gxUAE0vo0WHHgE5JQB1DpGLkL00uIA7JIATAxsbNwsfAIacHAW0UxpktwMkpwMDAnylMqq6sBaugZQxuaWNkA'>Try</a></div></pre>\n<p>The <code>[key: string]: number;</code> is the index signature, which indicates to TypeScript that any fields on the object which are not mentioned will be a particular types.</p>\n<p>For example, with a <a href=\"#declare\">Declared</a> instance of <code>ModernConstants</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const modernConstants: ModernConstants' >modernConstants</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ModernConstants' >ModernConstants</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// This was defined earlier</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const modernConstants: ModernConstants' >modernConstants</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ModernConstants.raabe: 0.9189385332' style='border-bottom: solid 2px lightgrey;'>raabe</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>                 </span><span class='popover'><div class='arrow'></div>(property) ModernConstants.raabe: 0.9189385332</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// This field was not defined above, so it is just `number`</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const modernConstants: ModernConstants' >modernConstants</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='number' style='border-bottom: solid 2px lightgrey;'>lebesgue</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>                   </span><span class='popover'><div class='arrow'></div>number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgLIHsAm0QGF0gDOYc4hyA3gFDLIkjADmArggBbABcyADAHQA2AOwAOAEwBmACxSAnAEZZAbhrIocOACMI3fgpGyJIgKwSJYlaoDaAawgBPbsSihGAXW4hmAW21QVAL5UAPTByAC0kQjMYJHhVNgIADZwUCgIBMTI3lg4+ET0YITcGNhQeJmFhJahyAAqHOQA7nDk2DCgEJjIEKlJwNBUOWUVBaRFfOpaECq1tPMLCwB6APxUIWENwOQdEEndLeQg6GDI7Z3dWugAbhAANMiE6MjAp9vIAFbMWQAGXr7QH5DXLlfLEcaEPhJCDaQgsGYbRZI+arIA'>Try</a></div></pre>\n<p>In TypeScript 4.1 you can use the TSConfig flag <a href=\"/tsconfig#noPropertyAccessFromIndexSignature\"><code>noPropertyAccessFromIndexSignature</code></a> to enforce using quote notation (<code>modernConstants[\"lebesgue\"]</code>) instead of dot notation (<code>modernConstants.lebesgue</code>) to make using an index signature explicit in the calling code.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='interface' ><a href='#interface' name='Interface' aria-label=\"Link to the section Interface\" aria-labelledby='interface'>#</a> Interface</h3>\n<p>An interface is a way to describe the <a href=\"#shape\">Shape</a> of a JavaScript object. For example, a dog could be described in the following format:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dog.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dog.dateOfBirth: Date' >dateOfBirth</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dog.markings: string[]' >markings</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgCIHsDmyDeAoZZEOAWwgC5kBnMKUTAbgOQBM5IB5GAIWCjAAWlVOwhNCJOFADW9KpRp0QmANoBdJgF8gA'>Try</a></div></pre>\n<p>This means that only an object with a <code>name</code>, <code>dateOfBirth</code> and <code>markings</code> could be classed as a “Dog” in the <a href=\"#type-system\">Type System</a>.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='parser' ><a href='#parser' name='Parser' aria-label=\"Link to the section Parser\" aria-labelledby='parser'>#</a> Parser</h3>\n<p>The parser is a part of the TypeScript compiler which takes the text from a <a href=\"#source-file\">Source File</a> and converts it into an <a href=\"#abstract-syntax-tree\">Abstract Syntax Tree</a>.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='runtime' ><a href='#runtime' name='JavaScript Runtime' aria-label=\"Link to the section JavaScript Runtime\" aria-labelledby='runtime'>#</a> JavaScript Runtime</h3>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='shape' ><a href='#shape' name='Shape' aria-label=\"Link to the section Shape\" aria-labelledby='shape'>#</a> Shape</h3>\n<p>The term “shape” is used to describe the fields and values on a JavaScript object. For example, you could say that this JavaScript object:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">house</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Shibden hall\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">road:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Lister's Road\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">town:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Halifax\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">county:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"West Yorkshire\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>has the shape:</p>\n<ul>\n<li><code>name</code>: <code>string</code></li>\n<li><code>road</code>: <code>string</code></li>\n<li><code>town</code>: <code>string</code></li>\n<li><code>country</code>: <code>string</code></li>\n</ul>\n<p>TypeScript can describe this shape using two different syntaxes: <a href=\"#interface\">Interfaces</a> and <a href=\"#type-literal\">Types</a></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">House</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">road</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">town</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">country</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// or</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">House</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">road</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">town</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">country</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='source-file' ><a href='#source-file' name='Source File' aria-label=\"Link to the section Source File\" aria-labelledby='source-file'>#</a> Source File</h3>\n<p>The representation of text which TypeScript would recognize as JavaScript or TypeScript source code.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='type-system' ><a href='#type-system' name='Type System' aria-label=\"Link to the section Type System\" aria-labelledby='type-system'>#</a> Type System</h3>\n<p>The JavaScript language has types like <code>string</code>, <code>object</code>, <code>symbol</code>, <code>boolean</code> etc, but it does not have a static type system.</p>\n<p>Often when the term “type system” is used, it is referring to a <em>static</em> type system like TypeScript provides.\nA static type system does not need to run your code in order to understand what the <a href=\"#shape\">Shape</a> of code at a particular location of a <a href=\"#source-file\">Source File</a> looks like.</p>\n<p>TypeScript uses a static type system to offer editing tools:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const shop: {&#10;    name: string;&#10;    address: string;&#10;}' >shop</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Table Store\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) address: string' >address</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Maplewood\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const shop: {&#10;    name: string;&#10;    address: string;&#10;}' >shop</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >a</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>a</span>ddress<span></li></ul></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAGNqRQF1CgBbQAOoAvKAN5qiiQCGAtgKYBcoARACoMBGAGxagAyrmQtOAGlqgGAE3nwWKFB04BZBiSEB3aNHnS0AXwDcaNEVIA6BhZB06APQA+QA'>Try</a></div></pre>\n<p>As well as to provide a rich set of error messages when the types inside the type system don’t match up:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let shop: {&#10;    name: string;&#10;    address: string;&#10;}' >shop</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Table Store\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) address: string' >address</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Maplewood\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let shop: {&#10;    name: string;&#10;    address: string;&#10;}' >shop</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) nme: string' >nme</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Chair Store\"</span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>Type '{ nme: string; address: string; }' is not assignable to type '{ name: string; address: string; }'.\n  Object literal may only specify known properties, but 'nme' does not exist in type '{ name: string; address: string; }'. Did you mean to write 'name'?</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ nme: string; address: string; }' is not assignable to type '{ name: string; address: string; }'.\n  Object literal may only specify known properties, but 'nme' does not exist in type '{ name: string; address: string; }'. Did you mean to write 'name'?</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) address: string' >address</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Maplewood\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXURACzgAdQBeUAbx1FADsBDAW0lQCIAVVgEYFQAZUIJI3ADSNQrACbzokRClDcAsqwoEA7nDjzpOAL4BuHDjKUa9Wc048AwqVYBLaKPHLjTBUpU1TW09AyMZcyA'>Try</a></div></pre>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='types-vs-runtime' ><a href='#types-vs-runtime' name='Types vs Runtime' aria-label=\"Link to the section Types vs Runtime\" aria-labelledby='types-vs-runtime'>#</a> Types vs Runtime</h3>\n<p>TypeScript adds a “type layer” on top of JavaScript code. TypeScript does this by adding additional syntax to JavaScript which needs to be removed in order to run inside a JavaScript <a href=\"#runtime\">runtime</a>.</p>\n<p>For example, this is JavaScript code which would run in a JavaScript runtime:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>This is not:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">hello</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello world\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>The <code>: string</code> could be thought of as code which only exists in the “type layer” of TypeScript and not in the “runtime” / “expression” layer of JavaScript code which runs.</p>\n<p>The type layer is</p>\n</div>\n</article>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"en","glossaryPath":"/home/runner/work/doc-static/doc-static/typescriptlang.org/website/packages/glossary/output/en.md","languageMeta":{"terms":[{"display":"Declare","id":"declare"},{"display":"Emit","id":"emit"},{"display":"Index Signature","id":"index-signatures"},{"display":"Interface","id":"interface"},{"display":"Parser","id":"parser"},{"display":"JavaScript Runtime","id":"runtime"},{"display":"Shape","id":"shape"},{"display":"Source File","id":"source-file"},{"display":"Type System","id":"type-system"},{"display":"Types vs Runtime","id":"types-vs-runtime"}]}}},"staticQueryHashes":[]}