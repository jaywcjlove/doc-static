{"componentChunkName":"component---src-templates-docs-js","path":"/warnings/dont-call-proptypes.html","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>注意：</p>\n<p>自从 React v15.5 起，<code class=\"gatsby-code-text\">React.PropTypes</code> 被移动到了另一个 package 中。请改用 <a href=\"https://www.npmjs.com/package/prop-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"gatsby-code-text\">prop-types</code></a>。</p>\n<p>我们提供了 <a href=\"/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes\">codemod 脚本</a> 来自动完成这个过程。</p>\n</blockquote>\n<p>在 React 未来的主要版本（major release）中。执行 PropType 校验函数的代码应该从生产环境中剥离。此时，任何手动调用这些函数的代码（还没从生产环境中剥离的）都会产生报错。</p>\n<h3 id=\"declaring-proptypes-is-still-fine\"><a href=\"#declaring-proptypes-is-still-fine\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>声明 PropTypes 仍然没有问题 </h3>\n<p>PropTypes 的正常用法依然是被支持的：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">Button<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  highlighted<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>bool\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>没有变化。</p>\n<h3 id=\"dont-call-proptypes-directly\"><a href=\"#dont-call-proptypes-directly\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不要直接调用 PropTypes 函数 </h3>\n<p>除了用于解释 React 组件，其他使用 PropTypes 的方式将不再受到支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> apiShape <span class=\"token operator\">=</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  body<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n  statusCode<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不支持！</span>\n<span class=\"token keyword\">var</span> error <span class=\"token operator\">=</span> <span class=\"token function\">apiShape</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token string\">'response'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果你依赖这样使用 PropTypes 的方式，我们鼓励你对 PropTypes 进行 fork 和使用（就像 <a href=\"https://github.com/aackerman/PropTypes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个</a> 还有 <a href=\"https://github.com/developit/proptypes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个</a> package）。</p>\n<p>如果你不根据警告进行修复，在采用 React 16 的生产环境中这些代码将会崩溃。</p>\n<h3 id=\"if-you-dont-call-proptypes-directly-but-still-get-the-warning\"><a href=\"#if-you-dont-call-proptypes-directly-but-still-get-the-warning\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果你没有直接调用 PropTypes 函数但是依然出现警告 </h3>\n<p>检查警告产生的堆栈跟踪。你将找到涉及 PropTypes 直接调用的组件定义。问题很有可能是由包装（wrap）了 React PropTypes 的第三方 PropTypes 导致的，举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">Button<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  highlighted<span class=\"token operator\">:</span> ThirdPartyPropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">deprecated</span><span class=\"token punctuation\">(</span>\n    PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Use `active` prop instead'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个例子中，<code class=\"gatsby-code-text\">ThirdPartyPropTypes.deprecated</code> 是一个调用 <code class=\"gatsby-code-text\">PropTypes.bool</code> 的包装器（wrapper）。这个模式本身很好，但是会引发误报，因为 React 认为你在直接调用 PropTypes 函数。下一小节将介绍如何为像 <code class=\"gatsby-code-text\">ThirdPartyPropTypes</code> 那样实现的库修复该问题。如果它不是你编写的库，你可以给它提一个 issue。</p>\n<h3 id=\"fixing-the-false-positive-in-third-party-proptypes\"><a href=\"#fixing-the-false-positive-in-third-party-proptypes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修复第三方 PropTypes 库的误报 </h3>\n<p>如果你是第三方 PropTypes 库的作者，并且能让使用者包装现有的 React PropTypes，他们可能就会看到由你的库引起的这个警告。发生这种情况是因为 React 没有看到用于检测手动 PropTypes 调用的、React “秘密”  <a href=\"https://github.com/facebook/react/pull/7132\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">传入</a> 的最后一个参数。</p>\n<p>下面是修复的方法。我们用 <a href=\"https://github.com/react-bootstrap/react-prop-types/blob/0d1cd3a49a93e513325e3258b28a82ce7d38e690/src/deprecated.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-bootstrap/react-prop-types</a> 中的 <code class=\"gatsby-code-text\">deprecated</code> 做示例。当前实现只传递 <code class=\"gatsby-code-text\">props</code>、<code class=\"gatsby-code-text\">propName</code> 和 <code class=\"gatsby-code-text\">componentName</code> 参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deprecated</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propType<span class=\"token punctuation\">,</span> explanation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" property of \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>componentName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has been deprecated.\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>explanation<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>warned<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        warned<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">propType</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了修复误报，确保你向被包装的 PropType 传入了<strong>全部的</strong>参数。用 ES6 的 <code class=\"gatsby-code-text\">...rest</code> 运算符来做比较简单。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deprecated</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propType<span class=\"token punctuation\">,</span> explanation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 注意这里的 ...rest</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" property of \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>componentName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has been deprecated.\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>explanation<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>warned<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        warned<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">propType</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 还有这里</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这将会消除错误警告。</p>","frontmatter":{"title":"警告：禁止调用 PropTypes 函数","next":null,"prev":null},"fields":{"path":"content/warnings/dont-call-proptypes.md","slug":"warnings/dont-call-proptypes.html"}}},"pageContext":{"slug":"warnings/dont-call-proptypes.html"}},"staticQueryHashes":[]}