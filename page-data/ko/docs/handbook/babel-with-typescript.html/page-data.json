{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/babel-with-typescript.html","result":{"data":{"markdownRemark":{"id":"fdab825c-8c87-5552-9b89-fc390b0ddcab","excerpt":"Babel vs TypeScript의 tsc 모던 JavaScript 프로젝트를 만들 때, TypeScript에서 JavaScript…","html":"<h2 id=\"babel-vs-typescript의-tsc\" style=\"position:relative;\"><a href=\"#babel-vs-typescript%EC%9D%98-tsc\" aria-label=\"babel vs typescript의 tsc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel vs TypeScript의 <code>tsc</code></h2>\n<p>모던 JavaScript 프로젝트를 만들 때, TypeScript에서 JavaScript 파일로 변환하는 올바른 방법에 대해 고민할 수 있습니다.</p>\n<p>많은 경우 그 대답은 프로젝트에 따라 <em>“~에 달려있다”</em> 또는 <em>“누군가 여러분 대신 결정했을지도 모른다`</em> 가 될 것입니다. 만약 <a href=\"https://www.npmjs.com/package/tsdx\">tsdx</a>, <a href=\"https://angular.io/\">Angular</a>, <a href=\"https://nestjs.com/\">NestJS</a>와 같은 기존 프레임워크 또는 <a href=\"/docs/home\">Getting Started</a>에 언급된 프레임워크를 사용하여 프로젝트를 만들고 있다면 결정은 여러분 손에 달려있습니다.</p>\n<p>하지만, 사용할만한 직관적인 방법은 다음과 같습니다:</p>\n<ul>\n<li>빌드 출력 결과와 소스 입력 파일이 거의 비슷한가요? <code>tsc</code>를 사용하세요.</li>\n<li>여러 잠재적인 결과물을 내는 빌드 파이프라인이 필요하신가요? <code>babel</code>로 트랜스파일링을 하고, <code>tsc</code>로 타입을 검사하세요.</li>\n</ul>\n<h2 id=\"트랜스파일링은-babel-타입은-tsc\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC%EB%A7%81%EC%9D%80-babel-%ED%83%80%EC%9E%85%EC%9D%80-tsc\" aria-label=\"트랜스파일링은 babel 타입은 tsc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜스파일링은 Babel, 타입은 <code>tsc</code></h2>\n<p>JavaScript 코드 베이스에서 TypeScript로 포팅되었을 수 있는 기존 빌드 인프라 구조를 가진 프로젝트의 일반적인 패턴입니다.</p>\n<p>이 기술은, Babel의 <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\">preset-typescript</a>을 사용하여 JS 파일을 생성한 후, TypeScript를 사용하여 타입 검사 및 <code>.d.ts</code> 파일을 생성하는 복합 접근 방식입니다.</p>\n<p>Babel은 TypeScript를 지원하기 때문에, 기존 빌드 파이프라인으로 작업할 수 있고 Babel이 코드 타입을 검사하지 않기 때문에 JS 출력 시간이 더 빨라질 수 있습니다.</p>\n<h4 id=\"타입-검사와-dts-파일-생성\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B2%80%EC%82%AC%EC%99%80-dts-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"타입 검사와 dts 파일 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 검사와 d.ts 파일 생성</h4>\n<p>Babel 사용의 단점은 TS를 JS로 전환하는 동안 타입 검사를 할 수 없다는 점입니다. 즉, 에디터에서 잡지 못한 타입 오류가 프로덕션 코드에 포함될 수도 있다는 뜻입니다.</p>\n<p>또한, Babel은 TypeScript에 대한 <code>.d.ts</code> 파일을 만들 수 없기 때문에 여러분의 프로젝트가 라이브러리인 경우 작업하기가 더 어려워질 수 있습니다.</p>\n<p>이러한 문제를 해결하려면 TSC를 사용하여 프로젝트의 타입을 검사할 수 있는 명령어를 설정하는 것이 좋습니다. 이는 Babel 구성의 일부를 해당 <a href=\"/tconfig\"><code>tsconfig.json</code></a>에 복제하고, 다음 플래그가 활성화되었는지 확인하는 것을 의미합니다:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// tsc를 사용해 .js 파일이 아닌 .d.ts 파일이 생성되었는지 확인합니다.</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#emitDeclarationOnly'><data-lsp lsp=\"Only output d.ts files and not JavaScript files.\">emitDeclarationOnly</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Babel이 TypeScript 프로젝트의 파일을 안전하게 트랜스파일할 수 있는지 확인합니다.</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#isolatedModules'><data-lsp lsp=\"Ensure that each file can be safely transpiled without relying on other imports.\">isolatedModules</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>해당 플래그에 대한 자세한 내용은 다음을 참고해주세요:</p>\n<ul>\n<li><a href=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></a></li>\n<li><a href=\"/tsconfig#declaration\"><code>declaration</code></a>, <a href=\"/tsconfig#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></li>\n</ul>","headings":[{"value":"Babel vs TypeScript의 tsc","depth":2},{"value":"트랜스파일링은 Babel, 타입은 tsc","depth":2},{"value":"타입 검사와 d.ts 파일 생성","depth":4}],"frontmatter":{"permalink":"/ko/docs/handbook/babel-with-typescript.html","title":"Using Babel with TypeScript","disable_toc":null,"handbook":null,"oneline":"How to create a hybrid Babel + TypeScript project","beta":null}},"prev":null,"next":null},"pageContext":{"id":"3using-babel-with-typescript","slug":"/ko/docs/handbook/babel-with-typescript.html","repoPath":"/packages/documentation/copy/ko/tutorials/Babel with TypeScript.md","lang":"ko","modifiedTime":"2020-11-23T10:39:15.627Z"}},"staticQueryHashes":[]}