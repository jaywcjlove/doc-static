{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/typescript/primitives/literals.ts.html","result":{"pageContext":{"name":"Literals","title":"Literals","lang":"ko","html":" TypeScript는 소스 코드에서 리터럴을 위한\n 재미있고 특별한 기능들이 있습니다.\n\n 여기선, 타입 넓히기와 좁히기 ( example:type-widening-narrowing )가\n 중점적으로 다뤄지고 있으므로\n 그 부분을 먼저 살펴보도록 하곘습니다.\n\n 리터럴은 collection 타입의 더욱 구체적인 하위 타입입니다.\n 이는 \"Hello World\"는 string이지만,\n 타입 시스템에서 string은 \"Hello World\"가 아니라는 것을 의미합니다.\n\n<code><pre>\nconst helloWorld = \"Hello World\";\nlet hiWorld = \"Hi World\"; // 이것은 let이기 때문에 string입니다.\n\n// 이 함수는 모든 string을 받습니다.\ndeclare function allowsAnyString(arg: string);\nallowsAnyString(helloWorld);\nallowsAnyString(hiWorld);\n\n// 이 함수는 \"Hello World\" string 리터럴만을 받습니다.\ndeclare function allowsOnlyHello(arg: \"Hello World\");\nallowsOnlyHello(helloWorld);\nallowsOnlyHello(hiWorld);\n\n</pre></code>\n// 이를 통해 특정 리터럴만을 받기 위해 union을 사용하는\n API를 선언할 수 있습니다.\n\n<code><pre>\ndeclare function allowsFirstFiveNumbers(arg: 1 | 2 | 3 | 4 | 5);\nallowsFirstFiveNumbers(1);\nallowsFirstFiveNumbers(10);\n\nlet potentiallyAnyNumber = 3;\nallowsFirstFiveNumbers(potentiallyAnyNumber);\n\n// 언뜻 보기에, 이 규칙은 복잡한 객체들에는 적용되지 않습니다.\n\nconst myUser = {\n  name: \"Sabrina\",\n};\n\n</pre></code>\n// 상수로 선언되어 있음에도 불구하고 이것이 어떻게\n `name: \"Sabrina\"`를 `name: string`으로 바꾸는지 보세요.\n 이는 여전히 이름이 언제든 바뀔 수 있기 때문입니다.\n\n<code><pre>\nmyUser.name = \"Cynthia\";\n\n</pre></code>\n// myUser의 name 프로퍼티가 바뀔 수 있기 때문에,\n TypeScript는 타입 시스템에서 리터럴 버전을 사용할 수 없습니다.\n 하지만 이것을 가능하게끔 해주는 기능이 있습니다.\n\n<code><pre>\nconst myUnchangingUser = {\n  name: \"Fatma\",\n} as const;\n\n</pre></code>\n// mutable object는 바뀔 수 있는 대신,\n 객체에 \"as const\"가 적용되면,\n object 리터럴이 되어 바뀌지 않습니다.\n\n<code><pre>\nmyUnchangingUser.name = \"Raîssa\";\n\n</pre></code>\n// \"as const\"는 고정된 데이터를 다루는 좋은 도구이며,\n 코드를 한 줄의 리터럴로 적게끔 해줍니다.\n 또한 \"as const\"는 배열에서도 동작합니다.\n\n<code><pre>\nconst exampleUsers = [{ name: \"Brian\" }, { name: \"Fahrooq\" }] as const;\n","redirectHref":"ko/play/?#example/literals"}},"staticQueryHashes":[]}