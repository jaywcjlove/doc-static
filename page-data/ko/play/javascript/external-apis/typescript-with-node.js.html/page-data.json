{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/javascript/external-apis/typescript-with-node.js.html","result":{"pageContext":{"name":"TypeScript with Node","title":"TypeScript with Node","lang":"ko","html":"\n Node.js는 Chrome V8 JavaScript 엔진을 기반으로\n 구축된 매우 유명한 JavaScript 런타임입니다.\n 이것을 사용해 서버, 프론트엔드 클라이언트 및 그 사이 모든 것을 구축할 수 있습니다.\n\n https://nodejs.org/\n\n Node.js는 JavaScript 런타임을 확장한 주요 라이브러리와 함께 제공됩니다.\n 라이브러리는 경로 처리부터:\n\n<code><pre>\nimport { join } from \"path\";\nconst myPath = join(\"~\", \"downloads\", \"todo_list.json\");\n\n// 파일 조작에 이르기까지 다양합니다:\n\nimport { readFileSync } from \"fs\";\nconst todoListText = readFileSync(myPath, \"utf8\");\n\n</pre></code>\n// JSDoc-style 타입을 사용하면 JavaScript 프로젝트에 점진적으로\n 타입을 추가할 수 있습니다. JSON 구조를 기반으로\n TODO 리스트 항목을 만들어보겠습니다:\n\n<code><pre>\n/**\n * @typedef {Object} TODO TODO 항목\n * @property {string} title TODO 항목 표기명\n * @property {string} body TODO 항목에 대한 설명\n * @property {boolean} done TODO 항목 완료 여부\n */\n\n</pre></code>\n// 이제 이 값을 JSON.parse 반환 값에 할당합니다.\n 더 자세한 내용은, 예:jsdoc-support를 참조하십시오.\n\n<code><pre>\n/** @type {TODO[]} TODO 리스트 */\nconst todoList = JSON.parse(todoListText);\n\n// 그리고 프로세스 처리 과정은 다음과 같습니다:\nimport { spawnSync } from \"child_process\";\ntodoList\n  .filter(todo => !todo.done)\n  .forEach(todo => {\n    // ghi 클라이언트를 사용해 아직 완료되지 않은\n    // 모든 todo 리스트 항목에 대한 이슈를 생성합니다.\n\n    // 아래와 같이 'todo.title'를 강조 표시하면\n    // JS에서 자동완성 및 문서가 올바르게 표시됩니다.\n    spawnSync(`ghi open --message \"${todo.title}\\n${todo.body}\"`);\n  });\n\n</pre></code>\n// TypeScript에는 DefinitelyTyped을 통해 내장된\n 모든 모듈에 대한 최신 타입 정의가 있습니다.\n 이는 강력한 타입 적용 범위 안에서 node 프로그램을 작성할 수 있음을 의미합니다.\n","redirectHref":"ko/play/?#example/typescript-with-node"}},"staticQueryHashes":[]}