{"componentChunkName":"component---src-templates-playground-handbook-tsx","path":"/_playground-handbook/twoslash-annotations.html","result":{"pageContext":{"title":"Twoslash Annotations","lang":"en","html":"<h2 id=\"twoslash-annotations\" style=\"position:relative;\"><a href=\"#twoslash-annotations\" aria-label=\"twoslash annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Twoslash Annotations</h2>\n<p><a href=\"https://www.npmjs.com/package/@typescript/twoslash\">Twoslash</a> is an annotation format for TypeScript which uses specially crafted comments (two slashes <code>//</code>) as a markup format for writing code samples (available on npm at <a href=\"https://www.npmjs.com/package/@typescript/twoslash\"><code>@typescript/twoslash</code></a>). It powers all the code samples in the TypeScript website, you can learn more about it <a href=\"https://shikijs.github.io/twoslash/\">here</a>.</p>\n<h4 id=\"twoslash-queries\" style=\"position:relative;\"><a href=\"#twoslash-queries\" aria-label=\"twoslash queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Twoslash Queries</h4>\n<p>The Playground supports showing the types at a certain location by using an empty comment with a <code>^?</code> to indicate the symbol you’re interested in:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">abc</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello\"</span></div><div class='line'><span style=\"color: #008000\">//    ^?</span></div></code></div></pre>\n<p>Would add a realtime inline annotation about what the type of <code>abc</code> is into the editor. This can make typing complex types easier, and make it much more obvious when sharing code what you think is important.</p>\n<h4 id=\"twoslash-compiler-flags\" style=\"position:relative;\"><a href=\"#twoslash-compiler-flags\" aria-label=\"twoslash compiler flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Twoslash Compiler Flags</h4>\n<p>A more arcane, but very ergonomic way to set a compiler setting is via compiler flag which are comments starting with <code>// @</code>.</p>\n<p>The editor will auto-complete twoslash commands for any compiler setting for the current version of TypeScript in your Playground. If the setting is a boolean, you don’t need to set a value:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @isolatedModules</span></div></code></div></pre>\n<p>Would have <code>isolatedModules</code> turned on in your Playground. You can set the values via <code>true/false</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @strictPropertyInitialization: false</span></div></code></div></pre>\n<p>For more settings with more choices of values, you can use the same descriptive string that is available in a <code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @target: esnext</span></div><div class='line'><span style=\"color: #008000\">// @module: nodenext</span></div></code></div></pre>\n<p>You can write a list with a comma separated string:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @lib: es2015,dom</span></div></code></div></pre>\n<p>Writing a twoslash command will set the compiler flag as you type, and will be set instantly if you reload or share the URL with another person. This can act as a power-user tool for setting compiler flags <em>and</em> making that change much more explicit than a query param (which may require looking up in the TS Config dropdown.)</p>\n<details>\n<summary>Did you know?</summary>\n<p>The twoslash system replicates how the TypeScript Compiler is tested, which is ~60k integration tests which uses specially crafted comments to set up isolated compiler runs. It’s quite a cool system, you can learn about them in more depth over at <a href=\"https://github.com/orta/typescript-notes/tree/master/systems/testing\"><code>orta/typescript-notes</code></a>.</p>\n</details>"}},"staticQueryHashes":[]}