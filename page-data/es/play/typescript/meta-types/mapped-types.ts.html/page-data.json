{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/typescript/meta-types/mapped-types.ts.html","result":{"pageContext":{"name":"Mapped Types","title":"Mapped Types","lang":"es","html":" Los tipos mapeados son una forma de crear nuevos tipos\n basados en otro tipo. Efectivamente un tipo\n transformacional.\n\n Los casos más comunes para usar un tipo mapeado es tratar\n con subconjuntos parciales de un tipo existente. Por\n ejemplo, una API puede devolver un objeto Artist:\n\n<code><pre>\ninterface Artist {\n  id: number;\n  name: string;\n  bio: string;\n}\n\n</pre></code>\n// Sin embargo, si enviara una actualización a la API que\n sólo cambiara un subconjunto del objeto Artist, normalmente\n tendría que crear un tipo adicional:\n\n<code><pre>\ninterface ArtistForEdit {\n  id: number;\n  name?: string;\n  bio?: string;\n}\n\n</pre></code>\n// Es muy probable que esto se desincronice con la interface\n Artist de arriba. Los tipos mapeados permiten crear un\n cambio en un tipo existente.\n\n<code><pre>\ntype MyPartialType<Type> = {\n  // Para cada propiedad existente dentro del tipo Type\n  // conviértalo en su versión opcional ?:\n  [Property in keyof Type]?: Type[Property];\n};\n\n</pre></code>\n// Ahora podemos usar el tipo mapeado en su lugar para crear\n nuestra interfaz de edición:\n<code><pre>\ntype MappedArtistForEdit = MyPartialType<Artist>;\n\n</pre></code>\n// Esto es casi perfecto, pero permite que la propiedad id\n sea nula, lo que nunca debería suceder. Así que, hagamos\n una rápida mejora usando un tipo de intersección (veasé:\n example:union-and-intersection-types )\n\n<code><pre>\ntype MyPartialTypeForEdit<Type> = {\n  [Property in keyof Type]?: Type[Property];\n} & { id: number };\n\n</pre></code>\n// Esta toma el resultado parcial del tipo mapeado, y lo\n fusiona con un objeto que tiene la propiedad id: number.\n Con esto se fuerza a id a estar en el tipo.\n\n<code><pre>\ntype CorrectMappedArtistForEdit = MyPartialTypeForEdit<Artist>;\n\n</pre></code>\n// Este es un ejemplo bastante simple de cómo funcionan los\n tipos mapeados, pero cubre la mayoría de los aspectos\n básicos. Si desea profundizar más, consulte el manual:\n\n https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\n","redirectHref":"es/play/?#example/mapped-types"}},"staticQueryHashes":[]}