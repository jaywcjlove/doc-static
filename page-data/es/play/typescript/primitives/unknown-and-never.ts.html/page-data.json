{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/typescript/primitives/unknown-and-never.ts.html","result":{"pageContext":{"name":"Unknown and Never","title":"Unknown y Never","lang":"es","html":"\n Unknown\n\n Unknown es uno de esos tipos que una vez que lo usas, puedes encontrar\n bastantes usos para él. Actúa como un hermano para el tipo `any`.\n Donde `any` permite la ambigüedad, `unknown` requiere de detalles.\n\n Un buen ejemplo sería envolver un analizador JSON.\n Los datos JSON pueden venir en muchas formas diferentes\n y el creador de la función de análisis JSON no sabrá la\n forma de los datos - la persona que llama a esa función debería.\n\n<code><pre>\nconst jsonParser = (jsonString: string) => JSON.parse(jsonString);\n\nconst myAccount = jsonParser(`{ \"name\": \"Dorothea\" }`);\n\nmyAccount.name;\nmyAccount.email;\n\n</pre></code>\n// Si inspecciona jsonParser, puedes ver que retorna el tipo `any`,\n por lo que myAccount también. Es posible arreglar esto con los\n genéricos, pero también es posible arreglar esto con los desconocidos.\n\n<code><pre>\nconst jsonParserUnknown = (jsonString: string): unknown => JSON.parse(jsonString);\n\nconst myOtherAccount = jsonParserUnknown(`{ \"name\": \"Samuel\" }`);\n\nmyOtherAccount.name;\n\n</pre></code>\n// El objeto myOtherAccount no puede ser usado hasta que el tipo\n haya sido declarado en TypeScript. Esto puede ser utilizado\n para asegurarse que los consumidores de la API piensen en\n su tipo por adelantado:\n\n<code><pre>\ntype User = { name: string };\nconst myUserAccount = jsonParserUnknown(`{ \"name\": \"Samuel\" }`) as User;\nmyUserAccount.name;\n\n</pre></code>\n// Unknown es una gran herramienta, para entender más sobre ello:\n https://mariusschulz.com/blog/the-unknown-type-in-typescript\n https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\n\n Never\n\n Debido a que TypeScript soporta el análisis del flujo de código,\n el lenguaje debe ser capaz de representar cuando el código\n lógicamente no puede suceder. Por ejemplo, esta función no puede\n retornar:\n\n<code><pre>\nconst neverReturns = () => {\n  // Arroja en la primera linea\n  throw new Error(\"Always throws, never returns\");\n};\n\n</pre></code>\n// Si inspecciona el tipo, puedes ver que es () => never\n el cual significa que esto no puede suceder. Estos todavía\n pueden ser utilizados como otros valores:\n\n<code><pre>\nconst myValue = neverReturns();\n\n</pre></code>\n// El hecho de que una función retorne `never` puede ser útil\n cuando se trata de la imprevisibilidad del entorno de ejecución\n de JavaScript y de los consumidores de APIs que podrían no\n estar utilizando tipos:\n\n<code><pre>\nconst validateUser = (user: User) => {\n  if (user) {\n    return user.name !== \"NaN\";\n  }\n\n  // De acuerdo al sistema de tipado, este código nunca puede\n  // ocurrir, el cual encaja con el tipo retornado de neverReturns\n\n  return neverReturns();\n};\n\n</pre></code>\n// La definición de tipos declara que un usuario tiene que ser\n suministrado pero existen suficientes mecanismos de escape\n en JavaScript donde no puedes garantizar eso.\n\n Utilizar una función que retorna `never` permite agregar\n código adicional en lugares donde no debería ser posible.\n Esto es muy útil para presentar mejores mensajes de error\n o para cerrar recursos como archivos o ciclos.\n\n Un uso popular para `never` es asegurarse de que una\n cláusula `switch` sea exhaustiva. Por ejemplo, que todas\n las rutas han sido cubiertas.\n\n Aquí hay una enumeración y una cláusula `switch` exhaustiva,\n intenta añadir una nueva opción a la enumeración\n (¿tal vez Tulip?)\n\n<code><pre>\nenum Flower {\n  Rose,\n  Rhododendron,\n  Violet,\n  Daisy,\n}\n\nconst flowerLatinName = (flower: Flower) => {\n  switch (flower) {\n    case Flower.Rose:\n      return \"Rosa rubiginosa\";\n    case Flower.Rhododendron:\n      return \"Rhododendron ferrugineum\";\n    case Flower.Violet:\n      return \"Viola reichenbachiana\";\n    case Flower.Daisy:\n      return \"Bellis perennis\";\n\n    default:\n      const _exhaustiveCheck: never = flower;\n      return _exhaustiveCheck;\n  }\n};\n\n</pre></code>\n// Recibirás un error de compilación diciendo que tu\n nuevo tipo de flor no puede convertirse en `never`.\n\n Never en Uniones\n\n Un tipo `never` es algo que es automáticamente removido\n de una unión de tipos.\n\n<code><pre>\ntype NeverIsRemoved = string | never | number;\n\n</pre></code>\n// Si analizas el tipo de NeverIsRemoved, podrás observar que\n es un string | number. Esto se debe a nunca puede pasar en\n tiempo de ejecución debido a que no puedes asignar a un tipo\n `never`.\n\n Esta característica es bastante utilizada en example:conditional-types\n","redirectHref":"es/play/?#example/unknown-and-never"}},"staticQueryHashes":[]}