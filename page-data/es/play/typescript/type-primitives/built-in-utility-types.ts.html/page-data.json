{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html","result":{"pageContext":{"name":"Built-in Utility Types","title":"Built-in Utility Types","lang":"es","html":"\n Cuando un tipo en particular es utilizado en múltiples\n bases de código, se agrega a TypeScript y pasa a estar\n disponible para cualquier usuario, lo que significa que\n puede confiar constantemente en su disponibilidad.\n\n Partial<Type>\n\n Toma como entrada un tipo y convierte todas sus\n propiedades en opcionales.\n\n<code><pre>\ninterface Sticker {\n  id: number;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  submitter: undefined | string;\n}\n\ntype StickerUpdateParam = Partial<Sticker>;\n\n// Readonly<Type>\n\n// Toma un objeto y hace que sus propiedades sean de solo lectura.\n\ntype StickerFromAPI = Readonly<Sticker>;\n\n// Record<KeysFrom, Type>\n\n</pre></code>\n// Crea un tipo que usa la lista de propiedades del\n parametro KeysFrom y les asigna el valor del tipo.\n\n Lista con llaves para KeysFrom:\n<code><pre>\ntype NavigationPages = \"home\" | \"stickers\" | \"about\" | \"contact\";\n\n</pre></code>\n// La forma de los datos requerida para cada una de las\n llaves anteriores:\n<code><pre>\ninterface PageInfo {\n  title: string;\n  url: string;\n  axTitle?: string;\n}\n\nconst navigationInfo: Record<NavigationPages, PageInfo> = {\n  home: { title: \"Home\", url: \"/\" },\n  about: { title: \"About\", url: \"/about\" },\n  contact: { title: \"Contact\", url: \"/contact\" },\n  stickers: { title: \"Stickers\", url: \"/stickers/all\" },\n};\n\n// Pick<Type, Keys>\n\n</pre></code>\n// Crea un tipo seleccionando el conjunto de propiedades de\n Keys definidas en Type. Esencialmente, una lista de\n permisos para extraer información de tipo de un tipo.\n\n<code><pre>\ntype StickerSortPreview = Pick<Sticker, \"name\" | \"updatedAt\">;\n\n// Omit<Type, Keys>\n\n</pre></code>\n// Crea un tipo eliminando el conjunto de propiedades\n definidas en Keys del objeto Type. Esencialmente, una\n lista de prohibición para extraer información de tipo de\n un tipo.\n\n<code><pre>\ntype StickerTimeMetadata = Omit<Sticker, \"name\">;\n\n// Exclude<Type, RemoveUnion>\n\n</pre></code>\n// Crea un tipo conformado por las propiedades definidas en\n Type que no se superponen con las definidas en\n RemoveUnion.\n\n<code><pre>\ntype HomeNavigationPages = Exclude<NavigationPages, \"home\">;\n\n// Extract<Type, MatchUnion>\n\n</pre></code>\n// Crea un tipo conformado por las propiedades definidas en\n Type que se superponen con las definidas en MatchUnion.\n\n<code><pre>\ntype DynamicPages = Extract<NavigationPages, \"home\" | \"stickers\">;\n\n// NonNullable<Type>\n\n</pre></code>\n// Crea un tipo conformado por la exclusión del valor null y\n undefined de un conjunto de propiedades. Muy útil cuando\n tienes una condición de validación.\n\n<code><pre>\ntype StickerLookupResult = Sticker | undefined | null;\ntype ValidatedResult = NonNullable<StickerLookupResult>;\n\n// ReturnType<Type>\n\n// Extrae el valor de retorno de Type.\n\ndeclare function getStickerByID(id: number): Promise<StickerLookupResult>;\ntype StickerResponse = ReturnType<typeof getStickerByID>;\n\n// InstanceType<Type>\n\n</pre></code>\n// Crea un tipo que es una instancia de una clase, o un\n objeto con un constructor.\n\n<code><pre>\nclass StickerCollection {\n  stickers: Sticker[];\n}\n\ntype CollectionItem = InstanceType<typeof StickerCollection>;\n\n// Required<Type>\n\n</pre></code>\n// Crea un tipo que convierte todas las propiedades\n opcionales a requeridas.\n\n<code><pre>\ntype AccessiblePageInfo = Required<PageInfo>;\n\n// ThisType<Type>\n\n</pre></code>\n// A diferencia de otros tipos, ThisType no retorna un nuevo\n tipo, en vez de ello, manipula la definición del tipo en\n una función. Solo se puede usar ThisType cuando se tiene\n activada la opción noImplicitThis en tu configuración\n TSConfig.\n\n https://www.typescriptlang.org/docs/handbook/utility-types.html\n","redirectHref":"es/play/?strictNullChecks=true#example/built-in-utility-types"}},"staticQueryHashes":[]}