{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html","result":{"pageContext":{"name":"Objects and Arrays","title":"Objetos y arreglos","lang":"es","html":"\n Los objetos de JavaScript son colecciones de valores\n asociados a un nombre (o clave).\n\n<code><pre>\nconst userAccount = {\n  name: \"Kieron\",\n  id: 0,\n};\n\n</pre></code>\n// Puedes combinarlos para crear modelos de datos más\n grandes y complejos.\n\n<code><pre>\nconst pie = {\n  type: \"Apple\",\n};\n\nconst purchaseOrder = {\n  owner: userAccount,\n  item: pie,\n};\n\n</pre></code>\n// Si utilizas tu mouse para pasarle por encima a estas\n palabras (prueba con purchaseOrder arriba) puedes ver\n como TypeScript está interprentando tu JavaScript como\n tipos etiquetados.\n\n Los valores pueden accederse con un \".\", por lo que\n para obtener un nombre de usuario de una orden de compra:\n<code><pre>\nconsole.log(purchaseOrder.item.type);\n\n</pre></code>\n// Si pasas tu mouse por encima de cada parte del código entre\n los ()s, puedes ver que TypeScript ofrece más información\n sobre cada parte. Intenta reescribir esto debajo:\n\n Copia esto en la próxima línea, carácter por carácter:\n\n   purchaseOrder.item.type\n\n TypeScript proporciona retroalimentación al playground\n sobre qué objetos de JavaScript están disponibles en este\n archivo y permite evitar errores tipográficos y ver\n información adicional sin tener que buscarla en otro sitio.\n\n TypeScript también ofrece estas mismas funcionalidades para\n los arreglos. Aquí hay una arreglo con solo nuestra orden\n de compra de arriba en él.\n\n<code><pre>\nconst allOrders = [purchaseOrder];\n\n</pre></code>\n// Si pasas por encima de allOrders, puedes saber que es\n un arreglo porque la información termina con []. Puedes\n acceder a la primera orden usando los corchetes con un\n índice (comenzando en cero).\n\n<code><pre>\nconst firstOrder = allOrders[0];\nconsole.log(firstOrder.item.type);\n\n</pre></code>\n// Una forma alternativa de obtener un objeto es sacando\n (con pop) los elementos del arreglo. Al hacerlo se\n elimina el objeto del arreglo y se devuelve el objeto.\n A esto se le llama mutar el arreglo, porque cambia los\n datos subyacentes dentro de él.\n\n<code><pre>\nconst poppedFirstOrder = allOrders.pop();\n\n</pre></code>\n// Ahora allOrders está vacío. Mutar los datos puede ser\n útil para muchas cosas, pero una forma de reducir la\n complejidad en tus bases de código es evitar la mutación.\n TypeScript ofrece por otra parte una forma de declarar\n un arreglo de solo lectura (readonly):\n\n Crea un tipo basado en la forma de una orden de compra:\n<code><pre>\ntype PurchaseOrder = typeof purchaseOrder;\n\n// Crea un arreglo de solo lectura de órdenes de compra\nconst readonlyOrders: readonly PurchaseOrder[] = [purchaseOrder];\n\n</pre></code>\n// ¡Sí! Es un poco más de código sin dudas. Hay cuatro\n nuevas cosas aquí:\n\n  type PurchaseOrder - Declara un nuevo tipo de TypeScript.\n\n  typeof - Usa el sistema de inferencia de tipos para establecer\n           el tipo con base en la constante que se pasa a continuación.\n\n  purchaseOrder - Obtiene la variable purchaseOrder y le dice\n                  a TypeScript que esta es la forma de todos los\n                  objetos en el arreglo orders.\n\n  readonly - Este objeto no permite mutación, una vez que\n             se crea el contenido del arreglo será siempre\n             el mismo.\n\n Ahora si intentas hacer pop de readonlyOrders, TypeScript\n levantará un error.\n\n<code><pre>\nreadonlyOrders.pop();\n\n</pre></code>\n// Puedes usar readonly en todo tipo de lugares, es un\n poco más de sintaxis extra, pero proporciona mucha\n seguridad adicional.\n\n Puedes saber más sobre readonly:\n  - https://www.typescriptlang.org/docs/handbook/interfaces.html#readonly-properties\n  - https://basarat.gitbooks.io/typescript/content/docs/types/readonly.html\n\n y puedes continuar aprendiendo sobre JavaScript y\n TypeScript en el ejemplo sobre funciones:\n example:functions\n\n O si quieres saber más sobre inmutabilidad:\n example:immutability\n","redirectHref":"es/play/?strict=false#example/objects-and-arrays"}},"staticQueryHashes":[]}