{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/javascript/external-apis/typescript-with-web.js.html","result":{"pageContext":{"name":"TypeScript with Web","title":"TypeScript con la Web","lang":"es","html":"\n El DOM (Document Object Model) es la API por detrás del\n trabajo con una página web, y TypeScript tiene excelente\n compatibilidad con esa API.\n\n Creemos un globo de ayuda (en inglés, popover) que se muestra cuando \n se presiona \"Ejecutar\" en la barra de herramientas de arriba.\n\n<code><pre>\nconst popover = document.createElement(\"div\");\npopover.id = \"example-popover\";\n\n</pre></code>\n// Observa que el globo está correctamente anotado con el tipo\n HTMLDivElement porque pasamos el elemento \"div\".\n\n Para hacer posible volver a ejecutar este código, primero\n añadiremos una función para eliminar el globo si ya existía.\n\n<code><pre>\nconst removePopover = () => {\n  const existingPopover = document.getElementById(popover.id);\n  if (existingPopover && existingPopover.parentElement) {\n    existingPopover.parentElement.removeChild(existingPopover);\n  }\n};\n\n// Y entonces llamarla inmediatamente.\n\nremovePopover();\n\n</pre></code>\n// Podemos establecer los estilos en línea del elemento a través\n de la propiedad .style en un HTMLElement: tiene todos los tipos\n definidos\n\n<code><pre>\npopover.style.backgroundColor = \"#0078D4\";\npopover.style.color = \"white\";\npopover.style.border = \"1px solid black\";\npopover.style.position = \"fixed\";\npopover.style.bottom = \"10px\";\npopover.style.right = \"20px\";\npopover.style.width = \"200px\";\npopover.style.height = \"100px\";\npopover.style.padding = \"10px\";\n\n// Incluidos atributos CSS menos conocidos u obsoletos.\npopover.style.webkitBorderRadius = \"4px\";\n\n</pre></code>\n// Para añadir contenido al globo, necesitaremos añadir\n un elemento de párrafo y usarlo para añadir algún texto.\n\n<code><pre>\nconst message = document.createElement(\"p\");\nmessage.textContent = \"Here is an example popover\";\n\n// Y también añadiremos un botón de cerrar.\n\nconst closeButton = document.createElement(\"a\");\ncloseButton.textContent = \"X\";\ncloseButton.style.position = \"absolute\";\ncloseButton.style.top = \"3px\";\ncloseButton.style.right = \"8px\";\ncloseButton.style.color = \"white\";\n\ncloseButton.onclick = () => {\n  removePopover()\n}\n\n// Y entonces añadir todos estos elementos a la página.\npopover.appendChild(message);\npopover.appendChild(closeButton);\ndocument.body.appendChild(popover);\n\n</pre></code>\n// Si ejecutas \"Run\"  arriba, el popup debe aparecer\n abajo a la izquierda, y lo puedes cerrar haciendo\n click en la x en la parte superior derecha del popup.\n\n Este ejemplo muestra cómo puedes trabajar con la API\n del DOM en JavaScript, pero usando TypeScript para\n obtener mejores herramientas de asistencia.\n\n Hay un ejemplo extendido para las herramientas de TypeScript\n con WebGL disponible aquí: example:typescript-with-webgl\n","redirectHref":"es/play/?#example/typescript-with-web"}},"staticQueryHashes":[]}