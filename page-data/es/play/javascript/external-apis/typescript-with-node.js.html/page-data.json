{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/javascript/external-apis/typescript-with-node.js.html","result":{"pageContext":{"name":"TypeScript with Node","title":"TypeScript con Node","lang":"es","html":"\n Node.js en un entorno de ejecución muy popular para JavaScript,\n construido sobre v8, el motor de JavaScript que utiliza Chrome. \n Puedes usarlo para construir servidores, interfaces de usuario y\n cualquier otra cosa que se le parezca.\n\n https://nodejs.org/\n\n Node.js tiene con un conjunto de bibliotecas principales que\n extienden el entorno de ejecución de JavaScript. Van desde el \n manejo de rutas del sistema operativo:\n\n<code><pre>\nimport { join } from \"path\";\nconst myPath = join(\"~\", \"downloads\", \"todo_list.json\");\n\n// hasta la manipulación de archivos:\n\nimport { readFileSync } from \"fs\";\nconst todoListText = readFileSync(myPath, \"utf8\");\n\n</pre></code>\n// Puedes añadir incrementalmente tipos a tus proyectos de JavaScript\n usando tipos al estilo JSDoc. Haremos uno de los elementos de\n nuestra lista de tareas pendientes (en inglés TODOs) basados en \n la estructura JSON:\n\n<code><pre>\n/**\n * @typedef {Object} TODO un elemento de TODO\n * @property {string} title El nombre a mostrar del elemento TODO\n * @property {string} body La descripción del elemento TODO\n * @property {boolean} done Si el elemento TODO ha sido o no completado\n */\n\n</pre></code>\n// Ahora asígnalo al valor de retorno de JSON.parse.\n Para más información, dirígete a: example:jsdoc-support\n\n<code><pre>\n/** @type {TODO[]} una lista de TODOs */\nconst todoList = JSON.parse(todoListText);\n\n// Y manejo de procesos:\nimport { spawnSync } from \"child_process\";\ntodoList\n  .filter(todo => !todo.done)\n  .forEach(todo => {\n    // Usa el cliente ghi para crear una incidencia por cada\n    // elemento de la lista que no se ha completado aún.\n\n    // Observa que se activa correctamente el autocompletamiento\n    // y la documentación en JS cuando señalas debajo a 'todo.title'.\n    spawnSync(`ghi open --message \"${todo.title}\\n${todo.body}\"`);\n  });\n\n</pre></code>\n// TypeScript tiene definiciones de tipos actualizadas para todos\n los módulos incorporados por defecto, mediante DefinitelyTyped;\n lo que significa que puedes escribir programas de node con una\n sólida cobertura de tipos.\n","redirectHref":"es/play/?#example/typescript-with-node"}},"staticQueryHashes":[]}