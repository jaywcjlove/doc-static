{"componentChunkName":"component---src-templates-play-example-tsx","path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html","result":{"pageContext":{"name":"Function Chaining","title":"Encadenamiento de funciones","lang":"es","html":"\n Las APIs con funciones encadenadas son un patrón común en\n JavaScript, lo que permite que tu código sea más conciso,\n con menos valores intermedios y más fácil de leer debido\n a sus habilidades de anidamiento.\n\n Una API muy común que funciona con encadenamiento\n es jQuery. Aquí hay un ejemplo de jQuery\n usada con tipos de DefinitelyTyped:\n\n<code><pre>\nimport $ from \"jquery\";\n\n// Aquí hay un ejemplo de uso de la API de jQuery:\n\n$(\"#navigation\").css(\"background\", \"red\").height(300).fadeIn(200);\n\n</pre></code>\n// Si añades un punto en la línea de arriba, verás\n una larga lista de funciones. Este patrón es fácil\n de reproducir en JavaScript. La clave es asegurarse\n de que siempre retornes el mismo objeto.\n\n Aquí hay un ejemplo de API que crea una API con\n encadenamiento. La clave es tener una función en\n un nivel externo que mantenga información del estado\n interno, y un objeto que exponga la API que se\n devuelve siempre.\n\n<code><pre>\nconst addTwoNumbers = (start = 1) => {\n  let n = start;\n\n  const api = {\n    // Implement each function in your API\n    add(inc: number = 1) {\n      n += inc;\n      return api;\n    },\n\n    print() {\n      console.log(n);\n      return api;\n    },\n  };\n  return api;\n};\n\n</pre></code>\n// Lo que permite el mismo estilo de API que\n vimos en jQuery:\n\n<code><pre>\naddTwoNumbers(1).add(3).add().print().add(1);\n\n// Aquí hay un ejemplo similar que usa una clase:\n\nclass AddNumbers {\n  private n: number;\n\n  constructor(start = 0) {\n    this.n = start;\n  }\n\n  public add(inc = 1) {\n    this.n = this.n + inc;\n    return this;\n  }\n\n  public print() {\n    console.log(this.n);\n    return this;\n  }\n}\n\n// Y aquí la vemos en acción:\n\nnew AddNumbers(2).add(3).add().print().add(1);\n\n</pre></code>\n// Este ejemplo hace uso de la inferencia\n de tipos de TypeScript como una forma\n de proporcionar herramientas para patrones\n de JavaScript.\n\n Para más ejemplos sobre esto:\n\n  - example:code-flow\n","redirectHref":"es/play/?esModuleInterop=true#example/function-chaining"}},"staticQueryHashes":[]}