{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/Decorators.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/pt/docs/handbook/tsconfig-json.html"},{"path":"/pt/docs/handbook/Decorators.html"},{"path":"/pt/docs/handbook/module-resolution.html"},{"path":"/pt/docs/handbook/namespaces.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/2/conditional-types.html"},{"path":"/docs/handbook/2/indexed-access-types.html"},{"path":"/docs/handbook/2/typeof-types.html"},{"path":"/docs/handbook/2/types-from-types.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/pt/docs/handbook/symbols.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/zh/tsconfig"},{"path":"/play"},{"path":"/fa/play"},{"path":"/id/play"},{"path":"/ja/play"},{"path":"/zh/play"},{"path":"/es/play"},{"path":"/ko/play"},{"path":"/pt/play"},{"path":"/vo/play"},{"path":"/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/play/3-7/fixits/const-to-let.ts.html"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/play/javascript/working-with-classes/this.ts.html"},{"path":"/play/playground/config/javascript-playgrounds.js.html"},{"path":"/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/play/playground/language/fixits.ts.html"},{"path":"/play/typescript/language/soundness.ts.html"},{"path":"/play/typescript/language/structural-typing.ts.html"},{"path":"/play/typescript/language/type-guards.ts.html"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/play/playground/tooling/mobile-support.ts.html"},{"path":"/play/playground/tooling/sharable-urls.ts.html"},{"path":"/play/playground/tooling/typescript-versions.ts.html"},{"path":"/play/typescript/language-extensions/enums.ts.html"},{"path":"/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/play/typescript/primitives/any.ts.html"},{"path":"/play/typescript/primitives/literals.ts.html"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/play/typescript/type-primitives/tuples.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/es/play/typescript/language/soundness.ts.html"},{"path":"/es/play/typescript/language/structural-typing.ts.html"},{"path":"/es/play/typescript/language/type-guards.ts.html"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/es/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/es/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/es/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/es/play/typescript/primitives/any.ts.html"},{"path":"/es/play/typescript/primitives/literals.ts.html"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/es/play/typescript/type-primitives/tuples.ts.html"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/id/play/3-7/fixits/const-to-let.ts.html"},{"path":"/id/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/recursive-type-reference.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/id/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/id/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/id/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/id/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/id/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/id/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/id/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/id/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/id/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/id/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/id/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/id/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ja/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/ja/play/typescript/language-extensions/enums.ts.html"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ja/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/ja/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/ja/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/ja/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/ja/play/typescript/primitives/any.ts.html"},{"path":"/ja/play/typescript/primitives/literals.ts.html"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/tuples.ts.html"},{"path":"/ko/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ko/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ko/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ko/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/ko/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/ko/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/ko/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/ko/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/ko/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/ko/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/ko/play/typescript/language-extensions/enums.ts.html"},{"path":"/ko/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ko/play/typescript/primitives/any.ts.html"},{"path":"/ko/play/typescript/primitives/literals.ts.html"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/pt/play/3-7/fixits/const-to-let.ts.html"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/pt/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/pt/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/pt/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/pt/play/javascript/working-with-classes/this.ts.html"},{"path":"/pt/play/playground/config/javascript-playgrounds.js.html"},{"path":"/pt/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/pt/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/pt/play/playground/language/fixits.ts.html"},{"path":"/pt/play/playground/tooling/mobile-support.ts.html"},{"path":"/pt/play/playground/tooling/sharable-urls.ts.html"},{"path":"/pt/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/enums.ts.html"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/pt/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/pt/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/pt/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/pt/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/pt/play/typescript/primitives/any.ts.html"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/language/structural-typing.ts.html"},{"path":"/pt/play/typescript/language/type-guards.ts.html"},{"path":"/pt/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/pt/play/typescript/primitives/literals.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/zh/play/javascript/working-with-classes/this.ts.html"},{"path":"/zh/play/playground/config/javascript-playgrounds.js.html"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/zh/play/playground/language/fixits.ts.html"},{"path":"/zh/play/playground/tooling/mobile-support.ts.html"},{"path":"/zh/play/playground/tooling/sharable-urls.ts.html"},{"path":"/zh/play/playground/tooling/typescript-versions.ts.html"},{"path":"/zh/play/typescript/language/soundness.ts.html"},{"path":"/zh/play/typescript/language/structural-typing.ts.html"},{"path":"/zh/play/typescript/language/type-guards.ts.html"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/zh/play/typescript/language-extensions/enums.ts.html"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/zh/play/typescript/primitives/any.ts.html"},{"path":"/zh/play/typescript/primitives/literals.ts.html"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pl/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pl/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pl/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pl/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pl/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pl/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pl/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pl/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pl/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pl/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/upcoming/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"}]},"markdownRemark":{"id":"e6e8c566-0869-5f2c-8318-e2d805a0d8d2","excerpt":"Introdução Com a introdução das Classes no TypeScript e ES6, agora existem certos cenários que requerem recursos adicionais para dar suporte à anotação ou…","html":"<h2 id=\"introdução\" style=\"position:relative;\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-label=\"introdução permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introdução</h2>\n<p>Com a introdução das Classes no TypeScript e ES6, agora existem certos cenários que requerem recursos adicionais para dar suporte à anotação ou modificação de classes e membros da classe.\nDecoradores fornecem uma maneira de adicionar anotações e uma sintaxe de metaprogramação para declarações de classe e membros.\nDecoradores são uma <a href=\"https://github.com/tc39/proposal-decorators\">proposta de estágio 2</a> para JavaScript e estão disponíveis como um recurso experimental do TypeScript.</p>\n<blockquote>\n<p>NOTA  Decoradores são um recurso experimental que podem mudar em versões futuras.</p>\n</blockquote>\n<p>Para habilitar o suporte experimental para os Decoradores, você deve habilitar a opção do compilador <code>experimentalDecorators</code> na linha de comando ou em seu <code>tsconfig.json</code>:</p>\n<p><strong>Linha de Comando</strong>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">tsc --target ES5 --experimentalDecorators</span></code></div></pre>\n<p><strong>tsconfig.json</strong>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Sets the JavaScript language version for emitted JavaScript and includes compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ES5\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#experimentalDecorators'><data-lsp lsp=\"Enable experimental support for TC39 stage 2 draft decorators\">experimentalDecorators</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"decoradores\" style=\"position:relative;\"><a href=\"#decoradores\" aria-label=\"decoradores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores</h2>\n<p>Um <em>Decorador</em> é um tipo especial de declaração que pode ser anexado a uma <a href=\"#decoradores-de-classes\">declaração de classe</a>, <a href=\"#decoradores-de-m%C3%A9todos\">métodos</a>, <a href=\"#decoradores-de-acessos\">acessor</a>, <a href=\"#decoradores-de-propriedades\">propriedades</a>, ou <a href=\"#decoradores-de-par%C3%A2metros\">parâmetros</a>.\nDecoradores usam a forma <code>@expressão</code>, onde <code>expressão</code> deve ser avaliada como uma função que será chamada em tempo de execução com informações sobre a declaração decorada.</p>\n<p>Por exemplo, dado o decorador <code>@selado</code>, podemos escrever a função <code>selado</code> da seguinte forma:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> selado(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// executa algo com o alvo...</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>NOTA  Você pode ver um exemplo mais detalhado de um decorator em <a href=\"#decoradores-de-classes\">Decoradores de Classes</a>, abaixo</p>\n</blockquote>\n<h2 id=\"fábrica-de-decoradores\" style=\"position:relative;\"><a href=\"#f%C3%A1brica-de-decoradores\" aria-label=\"fábrica de decoradores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fábrica de Decoradores</h2>\n<p>Se quisermos personalizar como um decorador é aplicado a uma declaração, podemos escrever uma fábrica de decoradores.\nUma <em>Fábrica de Decoradores</em> é simplesmente uma função que retorna a expressão que será chamada pelo decorador em tempo de execução.</p>\n<p>Podemos escrever uma fábrica de decoradores da seguinte maneira:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> cor(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// isso é uma fábrica de decoradores</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// este é o decorador</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// executa algo com 'alvo' e 'valor' ...</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>NOTA  Você pode ver um exemplo mais detalhado de uma fábrica de decoradores em <a href=\"#decoradores-de-m%C3%A9todos\">Decoradores de Métodos</a>, abaixo.</p>\n</blockquote>\n<h2 id=\"composição-de-decoradores\" style=\"position:relative;\"><a href=\"#composi%C3%A7%C3%A3o-de-decoradores\" aria-label=\"composição de decoradores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composição de Decoradores</h2>\n<p>Vários decoradores podem ser aplicados a uma declaração, como nos exemplos a seguir:</p>\n<ul>\n<li>\n<p>Em uma única linha:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\"> @</span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span></code></div></pre>\n</li>\n<li>\n<p>Em diversas linhas:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">f</span>\n<span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">g</span>\n<span style=\"color: #1A1A1A\">x</span></code></div></pre>\n</li>\n</ul>\n<p>Quando vários decoradores se aplicam a uma única declaração, sua avaliação é semelhante a\n<a href=\"http://wikipedia.org/wiki/Function_composition\">composição de funções em matemática</a>. Neste modelo, ao compor as funções <em>f</em> e <em>g</em>, o composto resultante (<em>f</em> ∘ <em>g</em>)(<em>x</em>) é equivalente a <em>f</em>(<em>g</em>(<em>x</em>)).</p>\n<p>Assim, as etapas a seguir são executadas ao avaliar vários decoradores em uma única declaração no TypeScript:</p>\n<ol>\n<li>As expressões para cada decorador são avaliadas de cima para baixo.</li>\n<li>Os resultados são chamados como funções de baixo para cima.</li>\n</ol>\n<p>Se fôssemos usar <a href=\"#f%C3%A1brica-de-decoradores\">fábrica de decoradores</a>, podemos observar esta ordem de avaliação com o seguinte exemplo:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f() {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #A31515\">\"f(): avaliada\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">: descritorDePropriedade</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #A31515\">\"f(): chamada\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> g() {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #A31515\">\"g(): avaliada\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">: descritorDePropriedade</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #A31515\">\"g(): chamada\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C {</span>\n<span style=\"color: #000000\">  @f()</span>\n<span style=\"color: #000000\">  @g()</span>\n<span style=\"color: #000000\">  method() {}</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Que imprimiria esta saída no console:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">f(): avaliada</span>\n<span style=\"color: #000000\">g(): avaliada</span>\n<span style=\"color: #000000\">g(): chamada</span>\n<span style=\"color: #000000\">f(): chamada</span></code></div></pre>\n<h2 id=\"avaliação-de-decoradores\" style=\"position:relative;\"><a href=\"#avalia%C3%A7%C3%A3o-de-decoradores\" aria-label=\"avaliação de decoradores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avaliação de Decoradores</h2>\n<p>Há uma ordem bem definida para como os decoradores aplicados a várias declarações, dentro de uma classe, são aplicados:</p>\n<ol>\n<li><em>Decoradores de Parâmetros</em>, seguido por <em>Mêtodo</em>, <em>Decoradores de Acesso</em> ou <em>Decoradores de Propriedades</em> são aplicados para cada membro da instância.</li>\n<li><em>Decoradores de Parâmetros</em>, seguido por <em>Mêtodo</em>, <em>Decoradores de Acesso</em> ou <em>Decoradores de Propriedades</em> são aplicados para cada membro estático.</li>\n<li><em>Decoradores de Parâmetros</em> são aplicados para o construtor.</li>\n<li><em>Decoradores de classe</em> são aplicados para a classe.</li>\n</ol>\n<h2 id=\"decoradores-de-classes\" style=\"position:relative;\"><a href=\"#decoradores-de-classes\" aria-label=\"decoradores de classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores de Classes</h2>\n<p>O <em>Decorador de Classe</em> é declarado antes de uma declaração de classe.\nO decorador de classe é aplicado ao construtor da classe e pode ser usado para observar, modificar ou substituir uma definição de classe.\nUm decorador de classe não pode ser usado em um arquivo de declaração, ou em qualquer outro contexto de ambiente (como em uma classe <code>declare</code>).</p>\n<p>A expressão para o decorador de classe será chamada como uma função em tempo de execução, com o construtor da classe decorada como seu único argumento.</p>\n<p>Se o decorador da classe retornar um valor, ele substituirá a declaração da classe pela função construtora fornecida.</p>\n<blockquote>\n<p>NOTA  Se você decidir retornar uma nova função de construtor, deve tomar cuidado para manter o protótipo original.\nA lógica que aplica decoradores em tempo de execução <strong>não</strong> fará isso por você.</p>\n</blockquote>\n<p>A seguir está um exemplo de um decorador de classe (<code>@selada</code>) aplicado a classe <code>Recepcionista</code></p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">selada</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Recepcionista {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">recepcionista</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  cumprimentar() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Olá, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Podemos definir o decorador <code>@selado</code> usando a seguinte declaração de função:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> selado(</span><span style=\"color: #1A1A1A\">constructor</span><span style=\"color: #000000\">: Function) {</span>\n<span style=\"color: #000000\">  Object.seal(</span><span style=\"color: #1A1A1A\">constructor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  Object.seal(constructor.prototype);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Quando <code>@selado</code> é executado, ele irá selar o construtor e seu protótipo.</p>\n<p>A seguir, temos um exemplo de como substituir o construtor.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> decoradorDeClasse&lt;T </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">: any[]): {} }&gt;(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">constructor</span><span style=\"color: #000000\">: T</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> constructor {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">novaPropriedade</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"nova propriedade\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">ola</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"sobrepor\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">decoradorDeClasse</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Recepcionista {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">propriedade</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"propriedade\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">ola</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">ola</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Recepcionista(</span><span style=\"color: #A31515\">\"mundo\"</span><span style=\"color: #000000\">));</span></code></div></pre>\n<h2 id=\"decoradores-de-métodos\" style=\"position:relative;\"><a href=\"#decoradores-de-m%C3%A9todos\" aria-label=\"decoradores de métodos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores de Métodos</h2>\n<p>Um <em>Decorador de Método</em> é declarado imediatamente antes de uma declaração de método.\nO decorador é aplicado ao <em>Descritor de Propriedade</em> para o método e pode ser usado para observar, modificar ou substituir uma definição de método.\nUm decorador de método não pode ser usado em um arquivo de declaração, em uma sobrecarga ou em qualquer outro contexto de ambiente (como em uma classe <code>declare</code>).</p>\n<p>A expressão para o decorador de método será chamada como uma função em tempo de execução, com os três argumentos a seguir:</p>\n<ol>\n<li>A função construtora da classe para um membro estático ou o protótipo da classe para um membro de instância.</li>\n<li>O nome do membro</li>\n<li>O <em>Descritor de Propriedade</em> para o membro.</li>\n</ol>\n<blockquote>\n<p>NOTA  O <em>Descritor de Propriedade</em> será <code>indefinido</code> se o destino do seu script for menor que <code>ES5</code>.</p>\n</blockquote>\n<p>Se o decorador do método retornar um valor, ele será usado como o <em>Descritor de Propriedade</em> para o método.</p>\n<blockquote>\n<p>NOTA  O valor de retorno é ignorado se o destino do script for menor que <code>ES5</code>.</p>\n</blockquote>\n<p>A seguir está um exemplo de um decorador de método (<code>@enumeravel</code>) aplicado a um método na classe <code>Recepcionista</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Recepcionista {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">recepcionista</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">recepcionista</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @enumeravel(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)  </span>\n<span style=\"color: #000000\">  cumprimentar() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Olá, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">recepcionista</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Podemos definir o decorador <code>@enumeravel</code> usando a seguinte declaração de função:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> enumeravel(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: boolean) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">: DescritorDePropriedade</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">enumeravel</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>O decorador <code>@enumeravel(false)</code> aqui é uma <a href=\"#f%C3%A1brica-de-decoradores\">fábrica de decoradores</a>.\nQuando o decorador <code>@enumeravel(false)</code> é chamado, ele modifica a propriedade <code>enumeravel</code> do descritor de propriedade.</p>\n<h2 id=\"decoradores-de-acesso\" style=\"position:relative;\"><a href=\"#decoradores-de-acesso\" aria-label=\"decoradores de acesso permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores de Acesso</h2>\n<p>Um <em>Decorador de Acesso</em> é declarado antes de uma declaração de acesso.\nO Decorador de Acesso é aplicado ao <em>Descritor de Propriedades</em> do acessador e pode ser usado para observar, modificar ou substituir as definições de um acesso.\nUm Decorador de Acesso não pode ser usado em um arquivo de declaração ou em qualquer outro contexto de ambiente (como em uma classe <code>declare</code>).</p>\n<blockquote>\n<p>NOTA  O TypeScript não permite decorar os acessadores <code>get</code> e<code>set</code> para um único membro.\nEm vez disso, todos os decoradores do membro devem ser aplicados ao primeiro acessador especificado na ordem do documento.\nIsso ocorre porque os decoradores se aplicam a um <em>Descritor de Propriedades</em>, que combina os acessadores <code>get</code> e <code>set</code>, não a cada declaração separadamente.</p>\n</blockquote>\n<p>A expressão para o Decorador de Acesso será chamada como uma função em tempo de execução, com os três seguintes argumentos:</p>\n<ol>\n<li>A função construtora da classe para um membro estático ou o protótipo da classe para um membro de instância.</li>\n<li>O nome do membro.</li>\n<li>O <em>Descritor de Propriedade</em> do membro.</li>\n</ol>\n<blockquote>\n<p>NOTA  O <em>Descriptor de Propriedade</em> será <code>undefined</code> se o destino do seu script for menor que <code>ES5</code>.</p>\n</blockquote>\n<p>Se o Decorador de Acesso retornar um valor, ele será usado como o <em>Descritor de Propriedade</em> para o membro.</p>\n<blockquote>\n<p>NOTA  O valor de retorno é ignorado se o destino do script for menor que <code>ES5</code>.</p>\n</blockquote>\n<p>A seguir está um exemplo de um Decorador de Acesso (<code>@configuravel</code>) aplicado a um membro da classe <code>Ponto</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Ponto {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_x</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_y</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_x</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_y</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @configuravel(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> x() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @configuravel(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> y() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_y</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Podemos definir o decorador <code>@configuravel</code> usando a seguinte declaração de função:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> configuravel(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: boolean) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">: DescritorDePropriedade</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">configurable</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"decoradores-de-propriedades\" style=\"position:relative;\"><a href=\"#decoradores-de-propriedades\" aria-label=\"decoradores de propriedades permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores de Propriedades</h2>\n<p>Um <em>Decorador de Propriedade</em> é declarado antes de uma declaração de propriedade.\nUm decorador de propriedade não pode ser usado em um arquivo de declaração ou em qualquer outro contexto de ambiente (como em uma classe <code>declare</code>).</p>\n<p>A expressão para o Decorador de Propriedade será chamada como uma função em tempo de execução, com os dois argumentos a seguir:</p>\n<ol>\n<li>A função construtora da classe para um membro estático ou o protótipo da classe para um membro de instância.</li>\n<li>O nome do membro.</li>\n</ol>\n<blockquote>\n<p>NOTA  Um <em>Descritor de Propriedade</em> não é fornecido como um argumento para um decorador de propriedade devido a como os decoradores de propriedade são inicializados no TypeScript.\nIsso ocorre porque não existe atualmente nenhum mecanismo para descrever uma propriedade de instância ao definir membros de um protótipo e nenhuma maneira de observar ou modificar o inicializador de uma propriedade. O valor de retorno também é ignorado.\nDessa forma, um decorador de propriedade só pode ser usado para observar que uma propriedade de um nome específico foi declarada para uma classe.</p>\n</blockquote>\n<p>Podemos usar essas informações para registrar metadados sobre a propriedade, como no exemplo a seguir:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Recepcionista {</span>\n<span style=\"color: #000000\">  @formato(</span><span style=\"color: #A31515\">\"Olá, %s\"</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\">: string;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  cumprimentar() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">formatoString </span><span style=\"color: #000000\">= obterFormato(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"cumprimento\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">formatoString</span><span style=\"color: #000000\">.replace(</span><span style=\"color: #A31515\">\"%s\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Podemos então definir o decorador <code>@formato</code> e as funções <code>obterFormato</code> usando as seguintes declarações de função:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"reflect-metadata\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">formatoMetadataKey </span><span style=\"color: #000000\">= Symbol(</span><span style=\"color: #A31515\">\"format\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> formato(</span><span style=\"color: #1A1A1A\">formatoString</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> Reflect.metadata(</span><span style=\"color: #1A1A1A\">formatoMetadataKey</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">formatoString</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> obterFormato(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> Reflect.getMetadata(</span><span style=\"color: #1A1A1A\">formatoMetadataKey</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>O decorador <code>@formato (\" Olá,% s \")</code> aqui é uma <a href=\"#f%C3%A1brica-de-decoradores\">fábrica de decoradores</a>.\nQuando <code>@formato (\" Olá,% s \")</code> é chamado, ele adiciona uma entrada de metadados para a propriedade usando a função <code>Reflect.metadata</code> da biblioteca<code>reflet-metadata</code>.\nQuando <code>obterFormato</code> é chamado, ele lê o valor dos metadados para o formato.</p>\n<blockquote>\n<p>NOTA  Este exemplo requer a biblioteca <code>reflect-metadata</code>.\nVeja <a href=\"#metadados\">Metadados</a> para mais informações sobre a biblioteca <code>reflet-metadata</code>.</p>\n</blockquote>\n<h2 id=\"decoradores-de-parâmetros\" style=\"position:relative;\"><a href=\"#decoradores-de-par%C3%A2metros\" aria-label=\"decoradores de parâmetros permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores de Parâmetros</h2>\n<p>Um <em>Decorador de Parâmetro</em> é declarado antes de uma declaração de parâmetro.\nO decorador de parâmetro é aplicado à função para um construtor de classe ou declaração de método.\nUm decorador de parâmetro não pode ser usado em um arquivo de declaração, uma sobrecarga ou em qualquer outro contexto de ambiente (como em uma classe <code>declare</code>).</p>\n<p>A expressão para o decorador de parâmetro será chamada como uma função em tempo de execução, com os três argumentos a seguir:</p>\n<ol>\n<li>A função construtora da classe para um membro estático ou o protótipo da classe para um membro de instância.</li>\n<li>O nome do membro.</li>\n<li>O índice ordinal do parâmetro na lista de parâmetros da função.</li>\n</ol>\n<blockquote>\n<p>NOTA  Um decorador de parâmetro só pode ser usado para observar que um parâmetro que foi declarado em um método.</p>\n</blockquote>\n<p>O valor de retorno do decorador de parâmetro é ignorado.</p>\n<p>A seguir está um exemplo de um decorador de parâmetro (<code>@obrigatorio</code>) aplicado ao parâmetro de um membro da classe <code>Recepcionista</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Recepcionista {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\">: string;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">mensagem</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validar</span>\n<span style=\"color: #000000\">  cumprimentar(@</span><span style=\"color: #1A1A1A\">obrigatorio</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">nome</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Olá \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\">nome</span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\", \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">cumprimento</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Podemos então definir os decoradores <code>@obrigatorio</code> e<code>@validar</code> usando as seguintes declarações de função:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"reflect-metadata\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">chaveDeMetodosNecessaria </span><span style=\"color: #000000\">= Symbol(</span><span style=\"color: #A31515\">\"obrigatorio\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> obrigatorio(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">: Object,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string | symbol,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">indiceDeParametro</span><span style=\"color: #000000\">: number</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">parametrosNecessariosExistentes</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number[] </span><span style=\"color: #000000\">=</span>\n<span style=\"color: #000000\">    Reflect.getOwnMetadata(</span><span style=\"color: #1A1A1A\">chaveDeMetodosNecessaria</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">) || [];</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">parametrosNecessariosExistentes</span><span style=\"color: #000000\">.push(</span><span style=\"color: #1A1A1A\">indiceDeParametro</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  Reflect.defineMetadata(</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">chaveDeMetodosNecessaria</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">parametrosNecessariosExistentes</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span>\n<span style=\"color: #000000\">  );</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> validar(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">nomeDaPropriedade</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">: DescritorDePropriedadeTipada&lt;Function&gt;</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">método </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">.value;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">.value = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">parametrosObrigatorios</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number[] </span><span style=\"color: #000000\">= Reflect.getOwnMetadata(</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #1A1A1A\">chaveDeMetodosNecessaria</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #1A1A1A\">nomeDaPropriedade</span>\n<span style=\"color: #000000\">    );</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">parametrosObrigatorios</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">indiceDeParametro</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">parametrosObrigatorios</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #1A1A1A\">indiceDeParametro</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.length ||</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">indiceDeParametro</span><span style=\"color: #000000\">] === </span><span style=\"color: #0000FF\">undefined</span>\n<span style=\"color: #000000\">        ) {</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Error(</span><span style=\"color: #A31515\">\"Argumento obrigatório ausente.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">      }</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">method</span><span style=\"color: #000000\">.apply(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>O decorador <code>@obrigatorio</code> adiciona uma entrada de metadados que marca o parâmetro como necessário.\nO decorador <code>@validar</code> então envolve o método<code>cumprimentar</code> existente em uma função que valida os argumentos antes de invocar o método original.</p>\n<blockquote>\n<p>NOTA  Este exemplo requer a biblioteca <code>reflect-metadata</code>.\nVeja <a href=\"#metadados\">Metadados</a> para mais informações sobre a biblioteca <code>reflet-metadata</code>.</p>\n</blockquote>\n<h2 id=\"metadados\" style=\"position:relative;\"><a href=\"#metadados\" aria-label=\"metadados permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Metadados</h2>\n<p>Alguns exemplos usam a biblioteca <code>reflet-metadata</code> que adiciona um polyfill para uma <a href=\"https://github.com/rbuckton/ReflectDecorators\">API de metadados experimental</a>.\nEsta biblioteca ainda não faz parte do padrão ECMAScript (JavaScript).\nNo entanto, assim que decoradores forem oficialmente adotados como parte do padrão ECMAScript, essas extensões serão propostas para adoção.</p>\n<p>Você pode instalar esta biblioteca via npm:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">npm i reflect-metadata --save</span></code></div></pre>\n<p>O TypeScript inclui suporte experimental para a emissão de certos tipos de metadados para declarações que possuem decoradores.\nPara habilitar este suporte experimental, você deve definir a opção do compilador <code>emitDecoratorMetadata</code> na linha de comando ou em seu<code>tsconfig.json</code>:</p>\n<p><strong>Linha de Comando</strong>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">tsc --target ES5 --experimentalDecorators --emitDecoratorMetadata</span></code></div></pre>\n<p><strong>tsconfig.json</strong>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Sets the JavaScript language version for emitted JavaScript and includes compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ES5\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#experimentalDecorators'><data-lsp lsp=\"Enable experimental support for TC39 stage 2 draft decorators\">experimentalDecorators</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata'><data-lsp lsp=\"Emit design-type metadata for decorated declarations in source.\">emitDecoratorMetadata</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Quando habilitado, contanto que a biblioteca <code>reflet-metadata</code> tenha sido importada, informações adicionais de tipo de tempo de design serão expostas no tempo de execução.</p>\n<p>Podemos ver isso em ação no seguinte exemplo:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"reflect-metadata\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Ponto {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Linha {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">: Ponto;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">: Ponto;</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validar</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p0(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: Ponto) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p0() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validar</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p1(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: Ponto) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p1() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> validar&lt;T&gt;(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">: DescritorDePropriedadeTipada&lt;T&gt;</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">set </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">set</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">.set = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: T) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">type </span><span style=\"color: #000000\">= Reflect.getMetadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">chaveDePropriedade</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">type</span><span style=\"color: #000000\">)) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> TypeError(</span><span style=\"color: #A31515\">\"Tipo inválido.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">set</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>O compilador TypeScript injetará informações de tipo em tempo de design usando o decorador <code>@Reflect.metadata</code>.\nVocê pode considerá-lo o equivalente ao seguinte TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Linha {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">: Ponto;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">: Ponto;</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validar</span>\n<span style=\"color: #000000\">  @Reflect.metadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">Ponto</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p0(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: Ponto) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p0() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validar</span>\n<span style=\"color: #000000\">  @Reflect.metadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">Ponto</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p1(</span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">: Ponto) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">valor</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p1() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>NOTA  Os metadados do Decorator são um recurso experimental e podem apresentar alterações importantes em versões futuras.</p>\n</blockquote>","headings":[{"value":"Introdução","depth":2},{"value":"Decoradores","depth":2},{"value":"Fábrica de Decoradores","depth":2},{"value":"Composição de Decoradores","depth":2},{"value":"Avaliação de Decoradores","depth":2},{"value":"Decoradores de Classes","depth":2},{"value":"Decoradores de Métodos","depth":2},{"value":"Decoradores de Acesso","depth":2},{"value":"Decoradores de Propriedades","depth":2},{"value":"Decoradores de Parâmetros","depth":2},{"value":"Metadados","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/Decorators.html","title":"Decoradores","disable_toc":null,"oneline":"Visão geral dos Decoradores no TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2decoradores","slug":"/pt/docs/handbook/Decorators.html","repoPath":"/packages/documentation/copy/pt/reference/Decorators.md","lang":"pt","modifiedTime":"2020-10-29T11:50:57.714Z"}},"staticQueryHashes":[]}