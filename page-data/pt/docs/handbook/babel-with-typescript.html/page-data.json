{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/babel-with-typescript.html","result":{"data":{"markdownRemark":{"id":"0d0ad2d3-7652-5731-8068-b172c9197d95","excerpt":"Babel vs tsc para TypeScript Ao desenvolver um projeto JavaScript moderno, você pode se perguntar qual a forma correta de converter arquivos do TypeScript para…","html":"<h2 id=\"babel-vs-tsc-para-typescript\" style=\"position:relative;\"><a href=\"#babel-vs-tsc-para-typescript\" aria-label=\"babel vs tsc para typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel vs <code>tsc</code> para TypeScript</h2>\n<p>Ao desenvolver um projeto JavaScript moderno, você pode se perguntar qual a forma correta de converter arquivos do TypeScript para o JavaScript.</p>\n<p>Várias vezes a resposta é <em>“depende”</em>, ou <em>“alguém pode ter decidido por você”</em> dependendo do projeto. Se você está construindo seu projeto com algum framework existente como <a href=\"https://tsdx.io\">tsdx</a>, <a href=\"https://angular.io/\">Angular</a>, <a href=\"https://nestjs.com/\">NestJS</a> ou qualquer outro framework mencionado na seção <a href=\"/docs/home\">Começando com TypeScript</a> então essa decisão é sua.</p>\n<p>Contudo, uma heurística útil seria:</p>\n<ul>\n<li>A saída do seu processo de build é, na maioria das vezes, igual aos arquivos de entrada? Use <code>tsc</code></li>\n<li>Você precisa de um pipeline de build com múltiplas sáidas possíveis? Use <code>babel</code> para transpilar e <code>tsc</code> para checagem de tipo.</li>\n</ul>\n<h2 id=\"babel-para-transpilar-tsc-para-tipos\" style=\"position:relative;\"><a href=\"#babel-para-transpilar-tsc-para-tipos\" aria-label=\"babel para transpilar tsc para tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel para transpilar, <code>tsc</code> para tipos</h2>\n<p>Esse é um padrão comum para projetos com infraestruturas de build já existentes e que têm sido portados de uma base de código JavaScript para TypeScript.</p>\n<p>Essa técnica é uma abordagem híbrida, usando o <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\">preset-typescript</a> do Babel para gerar seus arquivos JS, e então usar o TypeScript para fazer a checagem de tipos e gerar os arquivos <code>.d.ts</code>.</p>\n<p>Usando o suporte do babel para o Typescript, você consegue trabalhar com pipelines de build existentes e tem mais chances de gerar JS mais rápido porque o Babel não faz checagem de tipo no seu código.</p>\n<h4 id=\"checagem-de-tipo-e-geração-de-arquivos-dts\" style=\"position:relative;\"><a href=\"#checagem-de-tipo-e-gera%C3%A7%C3%A3o-de-arquivos-dts\" aria-label=\"checagem de tipo e geração de arquivos dts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checagem de Tipo e geração de arquivos .d.ts</h4>\n<p>A desvantagem de usar babel é que você não tem checagem de tipos durante a transição do TS para o JS. Isso significa que erros de tipagem que você deixou passar no seu editor podem acabar no código de produção.</p>\n<p>Além disso, Babel não pode criar arquivos <code>.d.ts</code> para seu TypeScript o que pode fazer com que o trabalho fique mais difícil se seu projeto for uma biblioteca.</p>\n<p>Para corrigir esses problemas, você provavelmente vai querer configurar um comando para fazer a checagem de tipos do seu projeto usando TSC. Isso provavelmente significa duplicar algumas das suas configurações do babel para um <a href=\"/tconfig\"><code>tsconfig.json</code></a> correspondente e garantir que estas diretivas estão ativadas:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Garante que arquivos .d.ts são criados pelo tsc, mas não arquivos .js</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#emitDeclarationOnly'><data-lsp lsp=\"Only output d.ts files and not JavaScript files.\">emitDeclarationOnly</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Garante que o Babel pode transpilar de maneira segura os arquivos no projeto TypeScript</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#isolatedModules'><data-lsp lsp=\"Ensure that each file can be safely transpiled without relying on other imports.\">isolatedModules</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Para mais informações sobre essas diretivas:</p>\n<ul>\n<li><a href=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></a></li>\n<li><a href=\"/tsconfig#declaration\"><code>declaration</code></a>, <a href=\"/tsconfig#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></li>\n</ul>","headings":[{"value":"Babel vs tsc para TypeScript","depth":2},{"value":"Babel para transpilar, tsc para tipos","depth":2},{"value":"Checagem de Tipo e geração de arquivos .d.ts","depth":4}],"frontmatter":{"permalink":"/pt/docs/handbook/babel-with-typescript.html","title":"Usando Babel com TypeScript","disable_toc":null,"handbook":null,"oneline":"Como criar um projeto híbrido com Babel + TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"3usando-babel-com-typescript","slug":"/pt/docs/handbook/babel-with-typescript.html","repoPath":"/packages/documentation/copy/pt/tutorials/Babel with TypeScript.md","lang":"pt","modifiedTime":"2020-11-23T10:39:15.627Z"}},"staticQueryHashes":[]}