{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html","result":{"pageContext":{"name":"Assertion Functions","title":"Assertion Functions","lang":"pt","html":"\n Dada a flexibilidade do JavaScript, pode ser uma boa ideia\n adicionar verificações em tempo de execução ao seu código\n para validar suas suposições.\n\n Normalmente são chamadas de asserções (ou invariantes) e\n são pequenas funções que geram erros no início, quando\n suas variáveis não correspondem ao que você espera.\n\n O Node vem com uma função pronta para fazer isso,\n é chamada de assert e está disponível sem importação.\n\n No entanto, vamos definir a nossa própria. Isso declara\n uma função que afirma que a expressão chamada value é\n verdadeira:\n<code><pre>\ndeclare function assert(value: unknown): asserts value;\n\n// Agora vamos usá-la para validar o tipo de enum\ndeclare const maybeStringOrNumber: string | number;\nassert(typeof maybeStringOrNumber === \"string\");\n\n</pre></code>\n// Com o TypeScript 3.7, a análise do fluxo de código pode\n usar esses tipos de funções para descobrir o que é o\n código. Então, quando você passa o mouse sobre a\n variável abaixo - você pode ver que ela foi reduzida\n de uma string ou número para apenas uma string.\n\n<code><pre>\nmaybeStringOrNumber;\n\n</pre></code>\n// Você pode usar funções assert para garantir seus\n tipos em todo o código inferido, por exemplo, o\n TypeScript sabe que essa função retornará um número\n sem a necessidade de adicionar tipos ao parâmetro por\n meio da declaração de assert acima.\n\n<code><pre>\nfunction multiply(x: any, y: any) {\n  assert(typeof x === \"number\");\n  assert(typeof y === \"number\");\n\n  return x * y;\n}\n\n</pre></code>\n// As funções de asserção são irmãs das Type Guards\n example:type-guards com exceção de afetar o fluxo de\n controle quando ele continua através da função.\n\n Por exemplo, podemos usar funções de asserção para\n restringir um enum ao longo do tempo:\n\n<code><pre>\ndeclare const oneOfFirstFiveNumbers: 1 | 2 | 3 | 4 | 5;\n\ndeclare function isOdd(param: unknown): asserts param is 1 | 3 | 5;\ndeclare function isBelowFour(param: unknown): asserts param is 1 | 2 | 3 | 4;\n\n// Isso deve reduzir o enum para: 1 | 3 | 5\n\nisOdd(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n// Isso cortará os possíveis estados do enum para: 1 | 3\n\nisBelowFour(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n</pre></code>\n// Esta é uma introdução sobre alguns dos recursos das\n funções de asserção no TypeScript 3.7 - você pode\n descobrir mais lendo as notas de lançamento:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"pt/play/?#example/assertion-functions"}},"staticQueryHashes":[]}