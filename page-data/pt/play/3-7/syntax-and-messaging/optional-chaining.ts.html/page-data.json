{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html","result":{"pageContext":{"name":"Optional Chaining","title":"Optional Chaining","lang":"pt","html":"\n O encadeamento opcional alcançou o consenso de estágio 3 no TC39\n durante o desenvolvimento da versão 3.7. Encadeamento opcional\n permite você escrever um código que pode interromper imediatamente\n a execução de expressões quando atingir um valor null ou undefined.\n\n Acesso à Propriedade\n\n Vamos imaginar que temos um álbum onde o artista e a\n biografia do artista podem não estar presentes nos dados.\n Por exemplo, uma lista pode não ter um único artista.\n\n<code><pre>\ntype AlbumAPIResponse = {\n  title: string;\n  artist?: {\n    name: string;\n    bio?: string;\n    previousAlbums?: string[];\n  };\n};\n\ndeclare const album: AlbumAPIResponse;\n\n</pre></code>\n// Com encadeamento opcional você pode escrever\n código como esse:\n\n<code><pre>\nconst artistBio = album?.artist?.bio;\n\n// Ao invés desse:\n\nconst maybeArtistBio = album.artist && album.artist.bio;\n\n</pre></code>\n// Nessa caso ?. age diferente que o && já que o && agirá\n diferente em valores falsy (ex.: uma string vazia,\n 0, NaN, e false).\n\n Encadeamento opcional apenas considerá null ou\n undefined como sinal de parada e retornará um undefined.\n\n Acesso a Elemento Opcional\n\n Acesso à Propriedade é através do operador ., o encadeamento\n opcional também funciona com os operadores [] quando acessa\n elementos.\n\n<code><pre>\nconst maybeArtistBioElement = album?.[\"artist\"]?.[\"bio\"];\n\nconst maybeFirstPreviousAlbum = album?.artist?.previousAlbums?.[0];\n\n// Chamadas opcionais\n\n</pre></code>\n// Ao lidar com funções que podem ou não existir em tempo de execução,\n o encadeamento opcional suporta apenas a chamada de uma função\n se ela existir. Isso pode substituir o código onde você\n tradicionalmente escreveria algo como: if (func) func()\n\n Por exemplo, aqui está uma chamada opcional para o callback\n de uma requisição API:\n\n<code><pre>\nconst callUpdateMetadata = (metadata: any) => Promise.resolve(metadata); // Falsa chamada API\n\nconst updateAlbumMetadata = async (metadata: any, callback?: () => void) => {\n  await callUpdateMetadata(metadata);\n\n  callback?.();\n};\n\n</pre></code>\n// Você pode ler mais sobre encadeamento opcional no post da versão 3.7\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"pt/play/?#example/optional-chaining"}},"staticQueryHashes":[]}