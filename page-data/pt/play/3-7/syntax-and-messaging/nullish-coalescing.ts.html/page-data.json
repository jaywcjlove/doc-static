{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"pt","html":"\n O operador de coalescencia nula é uma alternativa ao ||\n que retorna o lado direito da expressão se o lado esquerdo\n é nulo ou undefined (indefinido)\n\n Em contraste, || usa a checagem falsy, significando que um texto vazio\n ou o número 0 seriam considerados falso.\n\n Um bom exemplo para essa funcionalidade é lidar com\n objetos que tem padrões quando uma chave não é passada.\n\n<code><pre>\ninterface ConfiguracaoDoApp {\n  // Padrão: \"(sem nome)\"; texto vazio é válido\n  nome: string;\n\n  // Padrão: -1; 0 é válido\n  itens: number;\n\n  // Padrão: verdadeiro\n  ativo: boolean;\n}\n\nfunction updateApp(configuracao: Partial<ConfiguracaoDoApp>) {\n  // Com o operador null-coalescing\n  configuracao.nome = configuracao.nome ?? \"(sem nome)\";\n  configuracao.itens = configuracao.itens ?? -1;\n  configuracao.ativo = configuracao.ativo ?? true;\n\n  // Solução atual\n  configuracao.nome = typeof configuracao.nome === \"string\" ? configuracao.nome : \"(sem nome)\";\n  configuracao.itens = typeof configuracao.itens === \"number\" ? configuracao.itens : -1;\n  configuracao.ativo = typeof configuracao.ativo === \"boolean\" ? configuracao.ativo : true;\n\n  // Usando o operador || que poderia oferecer dados ruins\n  configuracao.nome = configuracao.nome || \"(sem nome)\"; // não permite a entrada de \"\"\n  configuracao.itens = configuracao.itens || -1; // não permite a entrada de 0\n  configuracao.ativo = configuracao.ativo || true; // realmente ruim, sempre true (verdadeiro)\n}\n</pre></code>\n// Você pode ler mais sobre o operador nullish coalescing no post do blog do 3.7\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"pt/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}