{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"pt","html":"\n # Nullish Coalescing\n\n Esse é o novo operador `??` com o intuito de ampliar\n o uso normal do `||` da mesma maneira que `===` amplia `==`\n para uma forma mais rígida de igualidade.\n\n Para entender, vamos ver como o || funciona:\n\n<code><pre>\nconst response = {\n  nullValue: null,\n  headerText: \"\",\n  animationDuration: 0,\n  height: 400,\n  showSplashScreen: false,\n} as const;\n\nconst undefinedValue = response.undefinedValue || \"some other default\";\n// Seria: 'some other default'\n\nconst nullValue = response.nullValue || \"some other default\";\n\n</pre></code>\n// Esses dois exemplos funcionam de maneira similar na maioria\n das linguagens. A ferramenta || é muito boa em padronizar coisas\n mas as checagens de falsidade do Javascript podem te surpreender\n com alguns valores simples:\n\n Potencialmente indesejado. '' é falsy, resultado: 'Hello, world!'\n<code><pre>\nconst headerText = response.headerText || \"Hello, world!\";\n\n// Potencialmente indesejado. 0 é falsy, resultado: 300\nconst animationDuration = response.animationDuration || 300;\n\n// Potencialmente indesejado. false é falsy, resultado: true\nconst showSplashScreen = response.showSplashScreen || true;\n\n</pre></code>\n// Alterando para usar ?? no lugar, então a igualdade === é usada\n para comparar ambos os lados:\n\n<code><pre>\nconst emptyHeaderText = response.headerText ?? \"Hello, world!\";\nconst zeroAnimationDuration = response.animationDuration ?? 300;\nconst skipSplashScreen = response.showSplashScreen ?? true;\n","redirectHref":"pt/play/?ts=4.0.2#example/nullish-coalescing"}},"staticQueryHashes":[]}