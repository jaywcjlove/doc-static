{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html","result":{"pageContext":{"name":"Unknown in Catch","title":"Unknown in Catch","lang":"pt","html":"\n Como o Javascript permite o `throw` de qualquer valor,\n o TypeScript não permite a declaração um tipo de erro.\n\n<code><pre>\ntry {\n  // ..\n} catch (e) {}\n\n</pre></code>\n// Historicamente, isso significava que o `e` no catch\n poderia ter qualquer valor. Isso permitia liberdade para\n acesso arbitrário de qualquer propriedade. Com o 4.0, nós afrouxamos\n as restrições do tipo configurado no cláusula catch para permitir ambos\n `qualquer`(any) e `desconhecido` (unknown).\n\n Mesmo comportamento com:\n<code><pre>\ntry {\n  // ..\n} catch (e: any) {\n  e.stack;\n}\n\n// Comportamento explícito com desconhecido:\n\ntry {\n  // ..\n} catch (e: unknown) {\n\n  // Você não pode usar `e` até que o sistema\n  // de tipos aprenda o que é. Para mais informação\n  // a respeito, veja o exemplo:\n  // example:unknown-and-never\n  \n  e.stack;\n\n  if (e instanceof SyntaxError) {\n    e.stack;\n  }\n}\n","redirectHref":"pt/play/?ts=4.0.0-beta#example/unknown-in-catch"}},"staticQueryHashes":[]}