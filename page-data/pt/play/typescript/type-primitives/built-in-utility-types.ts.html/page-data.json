{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html","result":{"pageContext":{"name":"Built-in Utility Types","title":"Built-in Utility Types","lang":"pt","html":"\n Quando um tipo específico parece útil na maioria \n das bases de código, eles são adicionados ao TypeScript e\n se tornam disponíveis para todos, o que significa que \n você pode contar com a disponibilidade deles.\n\n Partial<Type>\n\n Pega um tipo e converte todas as suas propriedades \n para tipos opcionais.\n\n<code><pre>\ninterface Sticker {\n  id: number;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  submitter: undefined | string;\n}\n\ntype StickerUpdateParam = Partial<Sticker>;\n\n// Readonly<Type>\n\n</pre></code>\n// Pega um objeto e transforma suas propriedades para apenas \n leitura.\n\n<code><pre>\ntype StickerFromAPI = Readonly<Sticker>;\n\n// Record<KeysFrom, Type>\n\n</pre></code>\n// Cria um tipo que usa a lista de propriedades do\n KeysFrom e dá a eles o valor do tipo.\n\n Lista de chaves:\n\n<code><pre>\ntype NavigationPages = \"home\" | \"stickers\" | \"about\" | \"contact\";\n\n// O formato do dado para o qual cada ^ é necessário:\n\ninterface PageInfo {\n  title: string;\n  url: string;\n  axTitle?: string;\n}\n\nconst navigationInfo: Record<NavigationPages, PageInfo> = {\n  home: { title: \"Home\", url: \"/\" },\n  about: { title: \"About\", url: \"/about\" },\n  contact: { title: \"Contact\", url: \"/contact\" },\n  stickers: { title: \"Stickers\", url: \"/stickers/all\" },\n};\n\n// Pick<Type, Keys>\n\n</pre></code>\n// Cria um tipo pegando o conjunto de propriedades Keys\n do Type. Essencialmente uma lista de permissões para extrair \n informações de tipo de um tipo.\n\n<code><pre>\ntype StickerSortPreview = Pick<Sticker, \"name\" | \"updatedAt\">;\n\n// Omit<Type, Keys>\n\n</pre></code>\n// Cria um tipo removendo o conjunto de propriedades Keys \n de um tipo. Essencialmente uma lista de bloqueio para extrair\n informação de tipo de um tipo.\n\n<code><pre>\ntype StickerTimeMetadata = Omit<Sticker, \"name\">;\n\n// Exclude<Type, RemoveUnion>\n\n</pre></code>\n// Cria um tipo com as propriedades de Type que não sobrepõe \n RemoveUnion.\n\n<code><pre>\ntype HomeNavigationPages = Exclude<NavigationPages, \"home\">;\n\n// Extract<Type, MatchUnion>\n\n// Cria um tipo com as propriedades de Type que sobrepõe MatchUnion.\n\ntype DynamicPages = Extract<NavigationPages, \"home\" | \"stickers\">;\n\n// NonNullable<Type>\n\n</pre></code>\n// Cria um tipo removendo null e undefined do conjunto de propriedades.\n Útil quando você tem uma checagem de validação.\n\n<code><pre>\ntype StickerLookupResult = Sticker | undefined | null;\ntype ValidatedResult = NonNullable<StickerLookupResult>;\n\n// ReturnType<Type>\n\n// Extrai o valor de retorno de um Type.\n\ndeclare function getStickerByID(id: number): Promise<StickerLookupResult>;\ntype StickerResponse = ReturnType<typeof getStickerByID>;\n\n// InstanceType<Type>\n\n// Cria um tipo que é uma instância de uma classe ou objeto com uma função construtora.\n\nclass StickerCollection {\n  stickers: Sticker[];\n}\n\ntype CollectionItem = InstanceType<typeof StickerCollection>;\n\n// Required<Type>\n\n</pre></code>\n// Cria um tipo que converte todas as propriedades opcionais\n para obrigatórias.\n\n<code><pre>\ntype AccessiblePageInfo = Required<PageInfo>;\n\n// ThisType<Type>\n\n</pre></code>\n// Diferente dos outros tipos, ThisType não retorna um novo tipo,\n ao invés, ele manipula a definição de this dentro da função. \n Você pode apenas utilizar ThisType quando você tem noImplicitThis\n ativado no seu TSConfig.\n\n https://www.typescriptlang.org/docs/handbook/utility-types.html\n","redirectHref":"pt/play/?strictNullChecks=true#example/built-in-utility-types"}},"staticQueryHashes":[]}