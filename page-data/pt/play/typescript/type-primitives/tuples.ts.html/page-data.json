{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/type-primitives/tuples.ts.html","result":{"pageContext":{"name":"Tuples","title":"Tuples","lang":"pt","html":" Normalmente um array contém de zero à muitos objetos de\n um mesmo tipo. O TypeScript possui uma análise especial\n sobre arrays que contêm múltiplos tipos, e quando a ordem \n em que eles estão indexados é importante.\n\n Esses são chamados de tuplas. Pense nelas como uma forma para\n conectar dados, mas com menos sintaxe que os objetos.\n\n Você pode criar uma tupla usando a sintaxe de um array do JavaScript:\n\n<code><pre>\nconst ResponseFalha = [\"Não Encontrado\", 404];\n\n// mas você precisa declarar o seu tipo como uma tupla.\n\nconst ResponseExitosa: [string, number] = [\"{}\", 200];\n\n</pre></code>\n// Se você passar o mouse sobre o nome das duas variáveis\n você pode ver a diferença entre um array ( (string | number)[] )\n e uma tupla ( [string, number] ).\n\n Em um array a ordem não é importante, então um item em\n qualquer posição poderia ser tanto uma string quanto um\n número. Em uma tupla, a ordem e o comprimento são garantidos.\n\n<code><pre>\nif (ResponseExitosa[1] === 200) {\n  const InformacaoLocal = JSON.parse(ResponseExitosa[0]);\n  console.log(InformacaoLocal);\n}\n\n</pre></code>\n// Isso significa que o TypeScript irá prover a tipagem\n correta na posição certa, e até lançar um erro se você\n tentar acessar um objeto em uma posição não declarada.\n\n<code><pre>\nResponseExitosa[2];\n\n</pre></code>\n// Uma tupla pode ser um bom padrão para pequenos pedaços\n de dados conectados ou para fixtures.\n\n<code><pre>\ntype ContaDeFuncionario = [number, string, string, string?];\n\nconst funcionarios: ContaDeFuncionario[] = [\n  [0, \"Adankwo\", \"adankwo.e@\"],\n  [1, \"Kanokwan\", \"kanokwan.s@\"],\n  [2, \"Aneurin\", \"aneurin.s@\", \"Supervisor\"],\n];\n\n</pre></code>\n// Quando você tem um conjunto de tipos conhecidos no começo\n de uma tupla e então várias posições com tipos desconhecidos,\n você pode usar o spread operator para indicar que ela pode\n ter qualquer comprimento e as posições adicionais serão de algum\n tipo específico.\n\n<code><pre>\ntype ComprovantesDePagamento = [ContaDeFuncionario, ...number[]];\n\nconst comprovantesDePagamento: ComprovantesDePagamento[] = [\n  [funcionarios[0], 250],\n  [funcionarios[1], 250, 260],\n  [funcionarios[0], 300, 300, 300],\n];\n\nconst pagamentosDoMesUm = comprovantesDePagamento[0][1] + comprovantesDePagamento[1][1] + comprovantesDePagamento[2][1];\nconst pagamentosDoMesDois = comprovantesDePagamento[1][2] + comprovantesDePagamento[2][2];\nconst pagamentosDoMesTres = comprovantesDePagamento[2][2];\n\n</pre></code>\n// Você pode usar tuplas para descrever funções\n que recebem uma quantidade indefinida de parâmetros tipados:\n\n<code><pre>\ndeclare function calcularPagamentoParaEmpregado(id: number, ...args: [...number[]]): number;\n\ncalcularPagamentoParaEmpregado(funcionarios[0][0], comprovantesDePagamento[0][1]);\ncalcularPagamentoParaEmpregado(funcionarios[1][0], comprovantesDePagamento[1][1], comprovantesDePagamento[1][2]);\n\n</pre></code>\n//\n https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#tuples-in-rest-parameters-and-spread-expressions\n https://auth0.com/blog/typescript-3-exploring-tuples-the-unknown-type/\n","redirectHref":"pt/play/?#example/tuples"}},"staticQueryHashes":[]}