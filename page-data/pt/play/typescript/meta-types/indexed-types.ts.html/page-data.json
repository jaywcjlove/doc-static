{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/meta-types/indexed-types.ts.html","result":{"pageContext":{"name":"Indexed Types","title":"Indexed Types","lang":"pt","html":" Existem situações em que você se encontra duplicando\r\n tipos, um exemplo comum são recursos aninhados em uma\r\n resposta de API gerada automaticamente.\r\n\n<code><pre>\ninterface ResultadosBuscaDeObras {\r\n  artistas: {\r\n    nome: string;\r\n    obras: {\r\n      nome: string;\r\n      dataFalecimento: string | null;\r\n      bio: string;\r\n    }[];\r\n  }[];\r\n}\r\n\r\n</pre></code>\n// Se essa interface fosse feita manualmente, é fácil imaginar\r\n que as obras seriam separadas em uma interface como:\r\n\n<code><pre>\ninterface Obras {\r\n  nome: string;\r\n  dataFalecimento: string | null;\r\n  bio: string;\r\n}\r\n\r\n</pre></code>\n// No entanto, nesse caso não temos controle da API e, se\r\n criarmos a interface manualmente, é possível que o campo\r\n obras em ResultadosBuscaDeObras e Obras fiquem defasados\r\n quando houver uma mudança na resposta.\r\n\n Para resolver esse problema utilizamos tipos indexados,\r\n que replicam como JavaScript permite acessar propriedades\r\n de objetos via strings.\r\n\n<code><pre>\ntype ObrasInferidas = ResultadosBuscaDeObras[\"artistas\"][0][\"obras\"][0];\r\n\r\n</pre></code>\n// A interface ObrasInferidas é gerada percorrendo as\r\n propriedades do tipo e dando um novo nome ao subconjunto\r\n que você indexou.","redirectHref":"pt/play/?#example/indexed-types"}},"staticQueryHashes":[]}