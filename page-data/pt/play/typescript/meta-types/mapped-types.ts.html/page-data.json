{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/meta-types/mapped-types.ts.html","result":{"pageContext":{"name":"Mapped Types","title":"Mapped Types","lang":"pt","html":" Tipos mapeados são uma maneira de criar tipos baseados\r\n em outros tipos. É praticamente um tipo transformacional.\r\n\n Um caso comum para se usar um tipo mapeado é quando\r\n lidamos com subconjuntos opcionais. Por exemplo, uma\r\n API pode retornar um Artista:\r\n\n<code><pre>\ninterface Artista {\r\n  id: number;\r\n  nome: string;\r\n  bio: string;\r\n}\r\n\r\n</pre></code>\n// No entanto, caso fosse necessário enviar para a API uma\r\n atualização que alterasse apenas uma parte de Artista, \r\n normalmente seria necessário criar uma interface adicional:\r\n\n<code><pre>\ninterface ArtistParaEdicao {\r\n  id: number;\r\n  nome?: string;\r\n  bio?: string;\r\n}\r\n\r\n</pre></code>\n// É provável que ela acabe defasada da interface Artista\r\n acima. Tipos mapeados resolvem esse problema, permitindo\r\n que seja criado um novo tipo que altera um tipo existente.\r\n\n<code><pre>\ntype MeuTipoParcial<Tipo> = {\r\n  // Para cada propriedade existente em Tipo, converta\r\n  // ela em uma propriedade opcional (?).\r\n  [Propriedade in keyof Tipo]?: Tipo[Propriedade];\r\n};\r\n\r\n</pre></code>\n// Agora podemos usar o tipo mapeado para criar nosso tipo\r\n para edição:\r\n<code><pre>\ntype ArtistaMapeadoParaEdicao = MeuTipoParcial<Artista>;\r\n\r\n</pre></code>\n// Já está quase perfeito, porém esse tipo permite que o id\r\n seja nulo, o que nunca deve acontecer. Então, vamos fazer\r\n uma pequena melhoria usando um tipo de interseção (veja:\r\n example:union-and-intersection-types).\r\n\n<code><pre>\ntype MeuTipoParcialParaEdicao<Tipo> = {\r\n  [Propriedade in keyof Tipo]?: Tipo[Propriedade];\r\n} & { id: number };\r\n\r\n</pre></code>\n// Isso faz com que o tipo mapeado parcial seja combinado\r\n com um objeto que tem o id obrigatório, efetivamente\r\n forçando o id a estar definido no tipo.\r\n\n<code><pre>\ntype ArtistaMapeadoCorretamenteParaEdicao = MeuTipoParcialParaEdicao<Artista>;\r\n\r\n</pre></code>\n// Esse é um exemplo bastante simples de como tipos mapeados\r\n funcionam, mas cobre os conceitos mais básicos. Se você\r\n quiser se aprofundar, veja o manual (em inglês):\r\n\r\n https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\r\n","redirectHref":"pt/play/?#example/mapped-types"}},"staticQueryHashes":[]}