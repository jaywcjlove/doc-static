{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/language-extensions/enums.ts.html","result":{"pageContext":{"name":"Enums","title":"Enums","lang":"pt","html":" Enums são uma funcionalidade adicionada ao JavaScript pelo TypeScript\n na qual facilita o manuseio de grupos de constantes nomeadas.\n\n Por padrão um enum é baseado em números, começando no zero,\n e para cada opção é assinalado um número incrementado por um.\n Isso é útil quando o valor em si não importa.\n\n<code><pre>\nenum DirecaoBussola {\n  Norte,\n  Leste,\n  Sul,\n  Oeste,\n}\n\n</pre></code>\n// Quando se escreve uma opção do enum, o valor é atribuido;\n incrementos continuam a partir daquele valor:\n\n<code><pre>\nenum StatusCodes {\n  OK = 200,\n  BadRequest = 400,\n  Unauthorized,\n  PaymentRequired,\n  Forbidden,\n  NotFound,\n}\n\n// Você referencia um enum usando EnumName.Value\n\nconst direcaoInicial = DirecaoBussola.Leste;\nconst statusAtual = StatusCodes.OK;\n\n</pre></code>\n// Enums suportam o acesso ao dado em ambos os lados: Da chave\n ao valor e do valor a chave.\n\n<code><pre>\nconst ok = StatusCodes.OK;\nconst indiceOk = StatusCodes[\"OK\"];\nconst stringBadRequest = StatusCodes[400];\n\n</pre></code>\n// Enums podem ser de diferentes tipos, sendo o tipo string mais comum.\n Quando se usa string, o debug da aplicação pode ser mais fácil de ser\n realizado porque o valor em tempo de execução não requer que você olhe o número.\n\n<code><pre>\nenum entradaGamePad {\n  Cima = \"UP\",\n  Baixo = \"DOWN\",\n  Esquerda = \"LEFT\",\n  Direita = \"RIGHT\",\n}\n\n</pre></code>\n// Se você quer reduzir o número de objetos em tempo de\n execução no JavaScript, você vai criar um enum constante.\n\n Um valor constante de um enum é substituído pelo TypeScript durante\n a transpilação do seu código, ao invés de buscar o valor por\n um objeto em temp ode execução.\n\n<code><pre>\nconst enum MouseAction {\n  MouseDown,\n  MouseUpOutside,\n  MouseUpInside,\n}\n\nconst handleMouseAction = (action: MouseAction) => {\n  switch (action) {\n    case MouseAction.MouseDown:\n      console.log(\"Clique\");\n      break;\n  }\n};\n\n  // Se você olhar o JavaScript transpilado, você poderá ver\n  // como os outros enums existem como objetos e funções, apesar\n  // de que MouseAction não estará lá.\n\n  // Isto também é verdade para a conferência contra MouseAction.MouseDown\n  // dentro do bloco de switch dentro de handleMouseAction\n\n  // Enums podem fazer mais que isso, você pode ler mais sobre no\n  // manual do TypeScript:\n  //\n  // https://www.typescriptlang.org/docs/handbook/enums.html\n","redirectHref":"pt/play/?#example/enums"}},"staticQueryHashes":[]}