{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/primitives/any.ts.html","result":{"pageContext":{"name":"Any","title":"Any","lang":"pt","html":" Any é a cláusula de escape do Typescript. Você pode usar any para \n declarar uma seção do seu código para ser dinâmica ou semelhante ao \n JavaScript, ou para contornar as limitações do sistema de tipos.\n\n Um bom caso de uso para any é o parsing de JSON:\n\n<code><pre>\nconst myObject = JSON.parse(\"{}\");\n\n</pre></code>\n// Any declara ao Typescript para confiar no seu código\n como sendo seguro porque você sabe mais sobre ele, mesmo se isso\n não seja estritamente verdadeiro. \n Por exemplo, esse código iria falhar:\n\n<code><pre>\nmyObject.x.y.z;\n\n</pre></code>\n// Utilizar any provê a você a habilidade de escrever código próximo \n ao JavaScript original sem a segurança de tipos.\n\n Any é muito semelhante a um 'tipo coringa' do qual \n você pode substituir com qualquer tipo (exceto never) \n para fazer um tipo atribuível a outro.\n\n<code><pre>\ndeclare function debug(value: any): void;\n\ndebug(\"a string\");\ndebug(23);\ndebug({ color: \"blue\" });\n\n</pre></code>\n// Cada chamada para debug é permitida porque você pode substituir o\n tipo any com o tipo do argumento correspondente.\n\n TypeScript irá considerar a posição dos anys de diferentes formas,\n como, por exemplo, com essas tuplas como argumento da função.\n\n<code><pre>\ndeclare function swap(x: [number, string]): [string, number];\n\ndeclare const pair: [any, any];\nswap(pair);\n\n</pre></code>\n// A chamada de swap é autorizada porque o argumento pode ser \n correspondente ao repor o primeiro any do par com um \n número e o segundo any com uma string.\n\n Se tuplas são novas para você, veja: example:tuples\n\n Unknown é um irmão do tipo any, any é como dizer \"Eu sei \n o que é melhor\", já Unknown é como dizer \"Eu não sei o que \n é o melhor, então você precisa dizer ao TS o tipo\".\n example:unknown-and-never\n","redirectHref":"pt/play/?#example/any"}},"staticQueryHashes":[]}