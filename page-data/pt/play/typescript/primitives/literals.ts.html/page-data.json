{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/primitives/literals.ts.html","result":{"pageContext":{"name":"Literals","title":"Literals","lang":"pt","html":" TypeScript tem alguns casos engraçados para literais em seu código\n\n Grande parte desse suporte é abordado em widening\n and narrowing ( example:type-widening-narrowing ) e vale\n a pena cobrir isto primeiro.\n\n Um literal é um subtipo mais concreto de uma coleção de tipos.\n Isso significa que \"Olá Mundo\" é uma string, mas uma string\n não é um \"Olá Mundo\" dentro do sistema de tipos.\n\n<code><pre>\nconst olaMundo = \"Olá Mundo\";\nlet oiMundo = \"Oi Mundo\"; // isso é uma string porque foi declarado com let\n\n// Essa função recebe qualquer string\ndeclare function permiteQualquerString(arg: string);\npermiteQualquerString(olaMundo);\npermiteQualquerString(oiMundo);\n\n// Essa função aceita apenas o literal \"Olá Mundo\"\ndeclare function permiteApenasOlaMundo(arg: \"Olá Mundo\");\npermiteApenasOlaMundo(olaMundo);\npermiteApenasOlaMundo(oiMundo);\n\n</pre></code>\n// Isso permite você declarar APIs que usam unions para dizer\n que só aceitam literais específicos:\n\n<code><pre>\ndeclare function permiteOsPrimeirosCincoNumeros(arg: 1 | 2 | 3 | 4 | 5);\npermiteOsPrimeirosCincoNumeros(1);\npermiteOsPrimeirosCincoNumeros(10);\n\nlet potencilamenteQualquerNumero = 3;\npermiteOsPrimeirosCincoNumeros(potencilamenteQualquerNumero);\n\n// A primeira vista essa regra não é aplicada para objetos complexos.\n\nconst meuUsuario = {\n  nome: \"Sabrina\",\n};\n\n</pre></code>\n// Veja como isso transforma `nome: \"Sabrina\"` para `nome: string`\n mesmo que definido como uma constante. Isso acontece pelo fato do nome\n poder ser alterado a qualquer momento:\n\n<code><pre>\nmeuUsuario.nome = \"Cynthia\";\n\n</pre></code>\n// Porque o nome do objeto meuUsuario poder ser alterado, o TypeScript\n não pode usar a versão literal no sistema de tipagem.\n No entanto existe uma funcionalidade que permite você fazer isso.\n\n<code><pre>\nconst meuUsuarioImutavel = {\n  nome: \"Fatma\",\n} as const;\n\n</pre></code>\n// Quado \"as const\" é aplicado ao objeto, ele se torna\n um objeto literal que não pode ser alterado ao invés de um\n objeto mutável.\n\n<code><pre>\nmeuUsuarioImutavel.nome = \"Raîssa\";\n\n</pre></code>\n// \"as const\" é uma ótima ferramenta para dados fixos e lugares\n onde você trata código como literal. \"as const\" também\n funciona com arrays:\n\n<code><pre>\nconst usuariosExemplos = [{ nome: \"Brian\" }, { nome: \"Fahrooq\" }] as const;\n","redirectHref":"pt/play/?#example/literals"}},"staticQueryHashes":[]}