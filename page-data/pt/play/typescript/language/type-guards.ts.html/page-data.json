{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/typescript/language/type-guards.ts.html","result":{"pageContext":{"name":"Type Guards","title":"Type Guards","lang":"pt","html":" Type Guarding é o termo dado para quando você influencia a análise\n de fluxo do código através dele mesmo. O TypeScript usa o comportamento existente do javascript\n o qual valida seus objetos em tempo de execução para influenciar\n o fluxo do código. Este exemplo assume que você já leu example:code-flow\n\n Para rodar esses exemplos, vamos criar algumas classes,\n aqui está um sistema para lidar com pedidos pela internet ou telefone.\n\n<code><pre>\ninterface Order {\n  address: string;\n}\ninterface TelephoneOrder extends Order {\n  callerNumber: string;\n}\ninterface InternetOrder extends Order {\n  email: string;\n}\n\n// Aqui um tipo que poderia ser um dos dois subtipos de Order ou undefined\ntype PossibleOrders = TelephoneOrder | InternetOrder | undefined;\n\n// E uma função que retorna um PossibleOrder\ndeclare function getOrder(): PossibleOrders;\nconst possibleOrder = getOrder();\n\n</pre></code>\n// Nós podemos usar o operador \"in\" para verificar se uma chave específica\n está no objeto, para limitar a união. (\"in\" é um operador\n Javascript para testar chaves de objetos.)\n\n<code><pre>\nif (\"email\" in possibleOrder) {\n  const mustBeInternetOrder = possibleOrder;\n}\n\n</pre></code>\n// Você pode usar o operador JavaScript \"instanceof\" se você\n tiver uma classe que está em conformidade com a interface:\n\n<code><pre>\nclass TelephoneOrderClass {\n  address: string;\n  callerNumber: string;\n}\n\nif (possibleOrder instanceof TelephoneOrderClass) {\n  const mustBeTelephoneOrder = possibleOrder;\n}\n\n</pre></code>\n// Você pode usar o operador Javascript \"typeof\" para\n limitar a união. Isso apenas funciona com primitivos\n dentro do JavaScript (como strings, objects, numbers).\n\n<code><pre>\nif (typeof possibleOrder === \"undefined\") {\n  const definitelyNotAnOder = possibleOrder;\n}\n\n</pre></code>\n// Você pode ver uma lista completa de possíveis valores para o typeof\n aqui: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/typeof\n\n Usar operadores JavaScript pode levar você muito longe. Quando\n você quiser verificar seu próprio tipos de objeto você pode usar\n funções com predicado de tipos.\n\n Um função com predicado de tipos é uma função onde o tipo de\n retorno oferece informação a análise do fluxo de código quando\n a função retorna verdadeira.\n\n Usando o PossibleOrder, nós podemos usar dois type guards\n para declarar qual tipo o possibleOrder é:\n\n<code><pre>\nfunction isAnInternetOrder(order: PossibleOrders): order is InternetOrder {\n  return order && \"email\" in order;\n}\n\nfunction isATelephoneOrder(order: PossibleOrders): order is TelephoneOrder {\n  return order && \"calledNumber\" in order;\n}\n\n</pre></code>\n// Agora nós podemos usar essas funções em condicionais if para estreitar\n o tipo no qual possibleOrder está dentro do if:\n\n<code><pre>\nif (isAnInternetOrder(possibleOrder)) {\n  console.log(\"Pedido recebido por email:\", possibleOrder.email);\n}\n\nif (isATelephoneOrder(possibleOrder)) {\n  console.log(\"Pedido recebido por telefone:\", possibleOrder.callerNumber);\n}\n\n</pre></code>\n// Você pode ler mais sobre análise de fluxo de código aqui:\n\n  - example:code-flow\n  - example:type-guards\n  - example:discriminate-types\n","redirectHref":"pt/play/?#example/type-guards"}},"staticQueryHashes":[]}