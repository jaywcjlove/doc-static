{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html","result":{"pageContext":{"name":"JSDoc Support","title":"JSDoc Support","lang":"pt","html":"\n O TypeScript tem um suporte muito rico ao JSDoc, para muitos casos\n você pode até não utilizar arquivos .ts e apenas usar anotações de JSDoc\n para criar um ambiente de desenvolvimento rico.\n\n Um comentário JSDoc é um comentário de múltiplas linhas que \n começam com dois asteriscos ao invés de um.\n\n<code><pre>\n/* Este é um comentário normal */\n/** Este é um comentário JSDoc */\n\n</pre></code>\n// Comentários JSDoc pertencem ao código JavaScript mais \n próximo abaixo dele\n\n<code><pre>\nconst minhaVariavel = \"Oi\";\n\n</pre></code>\n// Se você passar o mouse sobre minhaVariavel, você pode ver que \n ela tem o texto do comentário JSDoc acima.\n\n Comentários JSDoc são um meio de fornecer para o TypeScript e editores \n informação sobre os tipos utilizados. Vamos começar com um fácil,\n definindo o tipo de uma variável como um tipo nativo. \n\n Para todos os exemplos, você pode passar o mouse sobre o nome.\n E na próxima linha tente escrever [exemplo] para ver\n as opções de auto-complete.\n\n<code><pre>\n/** @type {number} */\nvar meuNumero;\n\n</pre></code>\n// Você pode ver todas as tags disponíveis no manual:\n\n https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc\n\n Entretanto, nós vamos tentar cobrir alguns exemplos a mais aqui. \n Você também pode copiar e colar aqui quaisquer exemplos do manual.\n\n Importando tipos para arquivos de configuração em JavaScript.\n\n<code><pre>\n/** @type { import(\"webpack\").Config } */\nconst config = {};\n\n// Criando um tipo complexo para reutilizar em múltiplos lugares:\n\n/**\n * @typedef {Object} Usuario - a conta de um usuario\n * @property {string} nome - o nome de usuario\n * @property {number} id - um id único\n */\n\n// Então use-o através do nome do typedef:\n\n/** @type { Usuario } */\nconst usuario = {};\n\n</pre></code>\n// Existe em TypeScript uma definição de tipo em linha (\"inline type shorthand\") que é equivalente\n e a qual você pode usar para ambos: o type e o typedef.\n\n<code><pre>\n/** @type {{ dono: Usuario, nome: string }} */\nconst recurso;\n\n/** @typedef {{dono: Usuario, nome: string}} Recurso */\n\n/** @type {Recurso} */\nconst outroRecurso;\n\n\n// Declarando uma função com tipos:\n\n/**\n * Adiciona dois números\n * @param {number} a O primeiro número\n * @param {number} b O segundo número\n * @returns {number}\n */\nfunction adicionaDoisNumeros(a, b) {\n  return a + b;\n}\n\n// Você pode usar a maioria das ferramentas de tipos do TypeScript, como uniões (\"unions\"):\n\n/** @type {(string | boolean)} */\nlet stringOuBoolean = \"\";\nstringOuBoolean = false;\n\n</pre></code>\n// Estender globais em JSDoc é um processo mais complicado\n que você pode conferir no manual do VS Code:\n\n https://code.visualstudio.com/docs/nodejs/working-with-javascript#_global-variables-and-type-checking\n\n Adicionar comentários do JSDoc em suas funções é uma situação\n em que todos ganham. Você tem melhores ferramentas assim como\n todo os consumidores da sua API.\n","redirectHref":"pt/play/?#example/jsdoc-support"}},"staticQueryHashes":[]}