{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/modern-javascript/immutability.ts.html","result":{"pageContext":{"name":"Immutability","title":"Immutability","lang":"pt","html":" O JavaScript é uma linguagem que possui algumas maneiras de\n declarar que alguns de seus objetos não mudam.\n O mais proeminente é const - que diz que o valor não mudará.\n\n<code><pre>\nconst olaMundo = \"Olá Mundo\";\n\n</pre></code>\n// Você não pode mudar olaMundo agora, o TypeScript\n te dará um erro, porque você teria um erro em\n tempo de execução.\n\n<code><pre>\nolaMundo = \"Oi mundo\";\n\n</pre></code>\n// Por que se importar com imutabilidade? Muito disso\n é sobre reduzir a complexidade no seu código.\n Se você pode reduzir o número de coisas que podem mudar,\n então existem menos coisas para se manter o controle.\n\n Usar const é um bom começo, de qualquer maneira isso\n falha um pouco quando usamos objetos.\n\n<code><pre>\nconst meuObjetoConstate = {\n  mensagem: \"Olá Mundo\",\n};\n\n</pre></code>\n// meuObjetoConstante não é constante o suficiente,\n porque nós ainda podemos fazer mudanças de partes do objeto,\n por exemplo, podemos mudar a mensagem:\n\n<code><pre>\nmeuObjetoConstate.mensagem = \"Oi Mundo\";\n\n</pre></code>\n// const significa que o valor naquele ponto se mantém o mesmo,\n mas o objeto em si pode mudar internamente. Isso pode ser\n mudado utilizando o Object.freeze.\n\n<code><pre>\nconst meuObjetoDefinitivamenteConstante = Object.freeze({\n  mensagem: \"Olá Mundo\",\n});\n\n</pre></code>\n// Quando um objeto é congelado, você não pode mudá-lo\n internamente. O TypeScript te dará erros nesses casos:\n\n<code><pre>\nmeuObjetoDefinitivamenteConstante.mensagem = \"Oi mundo\";\n\n// Funciona igualmente com arrays:\n\nconst meuArrayCongelado = Object.freeze([\"Oi\"]);\nmeuArrayCongelado.push(\"Mundo\");\n\n</pre></code>\n// Usar o freeze significa que você pode confiar que o\n objeto se permanece o mesmo por baixo dos panos.\n\n O TypeScript tem alguns ganchos de sintaxe para melhorar o\n trabalho com dados imutáveis que pode ser encontrado\n na seção de exemplos do TypeScript:\n\n example:literals\n example:type-widening-and-narrowing\n","redirectHref":"pt/play/?#example/immutability"}},"staticQueryHashes":[]}