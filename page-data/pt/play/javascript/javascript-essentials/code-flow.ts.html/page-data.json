{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html","result":{"pageContext":{"name":"Code Flow","title":"Code Flow","lang":"pt","html":"\nComo o fluxo de código dentro de nossos arquivos JavaScript podem afetar\na tipagem ao longo de nosso programa.\n\n<code><pre>\nconst users = [{ name: \"Ahmed\" }, { name: \"Gemma\" }, { name: \"Jon\" }];\n\n//Iremos verificar se encontramos um usuário com nome \"jon\".\nconst jon = users.find((u) => u.name === \"jon\");\n\n</pre></code>\n//No caso acima, o método 'find' pode falhar. Neste caso, \nnão temos um objeto. Isto cria a tipagem:\n\n   { name: string } | undefined\n\nSe você passar o mouse por cima dos três casos de uso de 'jon' abaixo,\nvocê verá que a tipagem muda dependendo de onde a palavra está alocada:\n\n<code><pre>\nif (jon) {\n  jon;\n} else {\n  jon;\n}\n\n</pre></code>\n//O tipo '{ name: string } | undefined' usa uma ferramenta do TypeScript\nchamado de union types (união de tipagens). Uma union type é uma forma \nde declarar que um objeto pode ser uma de muitas coisas.\n\nO pipe (barra vertical) atua como um separador entre duas diferentes tipagens.\nA natureza dinâmica do JavaScript permite que muitas funções\nrecebam e retornem objetos de tipagens não-relacionadas e nós\nprecisamos ser capazes de expressar com quais podemos estar lidando.\n\nNós podemos usar isso em várias formas. Vamos começar observando\num array cujos valores são de tipagens diferentes.\n\n<code><pre>\nconst identifiers = [\"Hello\", \"World\", 24, 19];\n\n</pre></code>\n//Nós podemos usar a sintaxe JavaScript 'typeof x === y' para a verificação\nda tipagem do primeiro elemento. Você pode passar o mouse sobre a palavra \n'randomIdentifier' abaixo e ver como ela muda conforme suas \ndiferentes localizações.\n\n<code><pre>\nconst randomIdentifier = identifiers[0];\nif (typeof randomIdentifier === \"number\") {\n  randomIdentifier;\n} else {\n  randomIdentifier;\n}\n\n</pre></code>\n//Essa análise do controle de fluxo significa que nós podemos escrever\nJavascript puro e o TypeScript tentará entender como a tipagem do código\nmudará em diferentes localizações.\n\nPara entender mais sobre a análise do fluxo de código:\n - example:type-guards\n\nPara continuar lendo os exemplos você poderá pular para os seguintes\ntópicos agora: \n\n - Modern JavaScript: example:immutability\n - Type Guards: example:type-guards\n - Functional Programming with JavaScript example:function-chaining\n","redirectHref":"pt/play/?strictNullChecks=true#example/code-flow"}},"staticQueryHashes":[]}