{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html","result":{"pageContext":{"name":"Objects and Arrays","title":"Objects and Arrays","lang":"pt","html":"\nObjetos em JavaScript são coleções de valores agrupados\ncom chaves nomeadas.\n\n<code><pre>\nconst userAccount = {\n  name: \"Kieron\",\n  id: 0,\n};\n\n</pre></code>\n//Você pode combiná-las para tornar os modelos de dados maiores\ne mais complexos. \n\n<code><pre>\nconst pie = {\n  type: \"Apple\",\n};\n\nconst purchaseOrder = {\n  owner: userAccount,\n  item: pie,\n};\n\n</pre></code>\n//Se você passar o mouse sobre algumas dessas palavras\n(tente purchaseOrder acima) você poderá ver como o\nTypeScript interpreta o JavaScript com rótulos de tipagem.\n\nOs valores podem ser acessados por meio de \".\", para\nobter um nome de usuário para um pedido de compra.\n<code><pre>\nconsole.log(purchaseOrder.item.type);\n\n</pre></code>\n//Se você passar o mouse por cima de cada parte do código\nentre os ()s, você poderá ver o TypeScript oferecendo mais\ninformações sobre cada parte. Tente reescrever isso baixo:\n\nCopie isso na próxima linha, caractere por caractere:\n\n   purchaseOrder.item.type\n\nTypeScript fornece feedback para o playground\nsobre quais objetos do JavaScript estão disponíveis neste\narquivo e permite você evitar erros de digitação e ver \ninformações adicionais sem precisar procurar em outro local\n\nTypeScript também oferece esses mesmos recursos para arrays.\nAqui temos um array com apenas nossos pedidos de compra acima.\n\n<code><pre>\nconst allOrders = [purchaseOrder];\n\n</pre></code>\n//Se você passar o mouse por cima de allOrders, você poderá\nafirmar que é um array, porque as informações passadas pelo\ncursor terminam com um []. Você pode acessar o primeiro pedido\nusando colchetes com um índice (começando do zero).\n\n<code><pre>\nconst firstOrder = allOrders[0];\nconsole.log(firstOrder.item.type);\n\n</pre></code>\n//Uma maneira alternativa para obter um objeto é por meio do\nuso do método pop() no array para remover objetos. Fazer\nisso remove o objeto do array e retorna o objeto.\nIsso é chamado de mutação do array, pois alteara os dados\nsubjacentes de seu interior.\n\n<code><pre>\nconst poppedFirstOrder = allOrders.pop();\n\n</pre></code>\n//Agora 'allOrders' está vazio. Dados mutantes podem ser úteis para\nmuitas coisas, mas uma forma de reduzir a complexidade em seu\ncódigo-base é evitar a mutação. Para isso, o TypeScript oferece\numa forma de declarar um array para somente leitura:\n\nCria uma tipagem baseada no formato de 'purchaseOrder':\n<code><pre>\ntype PurchaseOrder = typeof purchaseOrder;\n\n//Cria um array de readonly (somente-leitura) de pedidos de compra\nconst readonlyOrders: readonly PurchaseOrder[] = [purchaseOrder];\n\n</pre></code>\n//Sim! Há um pouco mais de código, com certeza. Existem quatro\ncoisas novas aqui:\n\n  type PurchaseOrder - Declara uma nova tipagem para o TypeScript.\n\n  typeof - Usa o sistema de dedução de tipos para definir a tipagem\n           baseada na 'const' que é passada em seguida.\n\n  purchaseOrder - Obtem a variável purchaseOrder e informa ao \n                  TypeScript que este é o formato de todos\n                  os objetos no array de pedidos.\n\n  readonly - Este objeto não permite mutação, uma vez criado,\n             o conteúdo do array sempre permanecerá o mesmo.\n\n\nAgora, se você tentar utilizar o método pop() do array readonlyOrders,\no TypeScript gerará um erro.\n\n<code><pre>\nreadonlyOrders.pop();\n\n</pre></code>\n//Você pode usar o readonly em todos os tipos \nde lugares. É um pouco de sintaxe extra aqui e ali, \nmas fornece muito mais segurança.\n\nVocê pode encontrar mais sobre o readonly aqui:\n  - https://www.typescriptlang.org/docs/handbook/interfaces.html#readonly-properties\n  - https://basarat.gitbooks.io/typescript/content/docs/types/readonly.html\n\nE você pode continuar aprendendo sobre JavaScript e TypeScript\nno exemplo de funções:\n example:functions\n\n Ou se desejar saber mais sobre imutabilidade:\n example:immutability\n","redirectHref":"pt/play/?strict=false#example/objects-and-arrays"}},"staticQueryHashes":[]}