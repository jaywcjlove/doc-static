{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/working-with-classes/classes-101.ts.html","result":{"pageContext":{"name":"Classes 101","title":"Classes 101","lang":"pt","html":"\n Uma classe é um tipo especial do objeto JavaScript, no qual\n sempre é criada a partir de um constructor. Essas classes\n agem muito como objetos, e possuem uma estrutura de herança\n parecida a linguagens como Java/C#/Swift.\n\n Aqui está um exemplo de uma classe:\n\n<code><pre>\nclass Vendor {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  greet() {\n    return \"Hello, welcome to \" + this.name;\n  }\n}\n\n</pre></code>\n// Uma instância pode ser criada por meio da palavra-chave new, e\n você pode chamar métodos e acessar propriedades do\n objeto.\n\n<code><pre>\nconst shop = new Vendor(\"Ye Olde Shop\");\nconsole.log(shop.greet());\n\n</pre></code>\n// Você pode criar uma subclasse de um objeto. Aqui está um carrinho de comida que\n tem uma variedade assim como um nome:\n\n<code><pre>\nclass FoodTruck extends Vendor {\n  cuisine: string;\n\n  constructor(name: string, cuisine: string) {\n    super(name);\n    this.cuisine = cuisine;\n  }\n\n  greet() {\n    return \"Hi, welcome to food truck \" + this.name + \". We serve \" + this.cuisine + \" food.\";\n  }\n}\n\n</pre></code>\n// Porque nós indicamos que deve ter dois argumentos\n para criar um novo FoodTruck, TypeScript fornecerá erros\n caso você utilize apenas um:\n\n<code><pre>\nconst nameOnlyTruck = new FoodTruck(\"Salome's Adobo\");\n\n</pre></code>\n// Passar dois argumentos corretamente permitirá que você crie uma\n nova instância do FoodTruck:\n\n<code><pre>\nconst truck = new FoodTruck(\"Dave's Doritos\", \"junk\");\nconsole.log(truck.greet());\n","redirectHref":"pt/play/?#example/classes-101"}},"staticQueryHashes":[]}