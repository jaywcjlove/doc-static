{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html","result":{"pageContext":{"name":"Generic Classes","title":"Generic Classes","lang":"pt","html":"\n Este exemplo é, em sua maioria, em TypeScript, porque é um modo muito\n mais fácil de entender primeiro. Ao fim, nós iremos\n ver como criar a mesma classe, porém utilizando JSDoc.\n\n Classes Genéricas são um meio de dizer que um tipo em particular\n depende de outro tipo. Por exemplo, aqui está uma gaveta\n que pode conter qualquer tipo de objeto, mas somente um tipo:\n\n<code><pre>\nclass Gaveta<TipoDeRoupa> {\n  conteudo: TipoDeRoupa[] = [];\n\n  adicionar(objeto: TipoDeRoupa) {\n    this.conteudo.push(objeto);\n  }\n\n  remover() {\n    return this.conteudo.pop();\n  }\n}\n\n// Para usar uma Gaveta você precisará trabalhar com outro tipo:\n\ninterface Meia {\n  cor: string;\n}\n\ninterface Camiseta {\n  tamanho: \"s\" | \"m\" | \"l\";\n}\n\n</pre></code>\n// Nós podemos criar uma Gaveta somente para meias passando\n o tipo Meia quando criamos uma nova Gaveta:\n<code><pre>\nconst gavetaDeMeias = new Gaveta<Meia>();\n\n// Agora nós podemos adicionar ou remover meias na/da gaveta\ngavetaDeMeias.adicionar({ cor: \"branco\" });\nconst minhaMeia = gavetaDeMeias.remover();\n\n// Assim como criar uma gaveta de Camisetas:\nconst gavetaDeCamisetas = new Gaveta<Camiseta>();\ngavetaDeCamisetas.adicionar({ tamanho: \"m\" });\n\n</pre></code>\n// Se você for um pouco excêntrico, você pode até criar\n uma gaveta que tem Meias e Camisetas usando para isso\n uma união (\"union\"):\n\n<code><pre>\nconst gavetaMista = new Gaveta<Meia | Camiseta>();\n\n</pre></code>\n// Criar uma classe como a Gaveta sem a sintaxe do TypeScript\n requer o uso da tag \"template\" em JSDoc.\n Neste exemplo nós definimos a variável template, então\n definimos as propriedades da classe:\n\n Para ter esse exemplo funcionando no playground, você terá\n que mudar as configurações para que seja um arquivo JavaScript,\n e apagar o código TypeScript acima.\n\n<code><pre>\n/**\n * @template {{}} TipoDeRoupa\n */\nclass Comoda {\n  constructor() {\n    /** @type {TipoDeRoupa[]} */\n    this.conteudo = [];\n  }\n\n  /** @param {TipoDeRoupa} object */\n  adicionar(objeto) {\n    this.conteudo.push(objeto);\n  }\n\n  /** @return {TipoDeRoupa} */\n  remover() {\n    return this.conteudo.pop();\n  }\n}\n\n// Então nós criamos um tipo novo através do JSDoc:\n\n/**\n * @typedef {Object} Casaco uma roupa\n * @property {string} cor cor do casaco\n */\n\n</pre></code>\n// Então, quando nós criamos uma nova instância daquela classe\n nós utilizamos @type para marcar a variável como uma Comoda\n que lida com Casacos\n\n<code><pre>\n/** @type {Comoda<Casaco>} */\nconst comodaDeCasacos = new Comoda();\n\ncomodaDeCasacos.adicionar({ cor: \"verde\" });\nconst casaco = comodaDeCasacos.remover();\n","redirectHref":"pt/play/?#example/generic-classes"}},"staticQueryHashes":[]}