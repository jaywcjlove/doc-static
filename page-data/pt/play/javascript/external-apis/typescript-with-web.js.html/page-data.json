{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/external-apis/typescript-with-web.js.html","result":{"pageContext":{"name":"TypeScript with Web","title":"TypeScript with Web","lang":"pt","html":"\n O DOM (Document Object Model) é a API essencial para\n trabalhar com uma página web, e o TypeSctipt tem\n um bom suporte para essa API.\n\n Vamos criar um popover para ser exibido quando você pressionar \"Executar\"\n na barra de ferramentas no topo.\n\n<code><pre>\nconst popover = document.createElement(\"div\");\npopover.id = \"popover-exemplo\";\n\n</pre></code>\n// Perceba que o popover está tipado corretamente para ser um HTMLDivElement\n especificamente porque passamos em uma \"div\".\n\n Para tornar possível reexecutar esse código, vamos primeiro\n adicionar uma função para remover o popover se ele já estiver presente. \n\n<code><pre>\nconst removePopover = () => {\n  const popoverExistente = document.getElementById(popover.id);\n  if (popoverExistente && popoverExistente.parentElement) {\n    popoverExistente.parentElement.removeChild(popoverExistente);\n  }\n};\n\n// Então chame em seguida.\n\nremovePopover();\n\n</pre></code>\n// Podemos definir os estilos em linha no elemento através da\n propriedade .style em um HTMLElement - isso é completamente tipado.\n\n<code><pre>\npopover.style.backgroundColor = \"#0078D4\";\npopover.style.color = \"white\";\npopover.style.border = \"1px solid black\";\npopover.style.position = \"fixed\";\npopover.style.bottom = \"10px\";\npopover.style.right = \"20px\";\npopover.style.width = \"200px\";\npopover.style.height = \"100px\";\npopover.style.padding = \"10px\";\n\n// Incluindo atributos CSS mais obscuros,ou depreciados.\npopover.style.webkitBorderRadius = \"4px\";\n\n</pre></code>\n// Para adicionar conteúdo ao popover, precisamos incluir\n um elemento parágrafo e usá-lo para adicionar algum texto. \n\n<code><pre>\nconst mensagem = document.createElement(\"p\");\nmensagem.textContent = \"Exemplo de popover\";\n\n// E também adicionaremos um botão de fechar.\n\nconst botaoFechar = document.createElement(\"a\");\nbotaoFechar.textContent = \"X\";\nbotaoFechar.style.position = \"absolute\";\nbotaoFechar.style.top = \"3px\";\nbotaoFechar.style.right = \"8px\";\nbotaoFechar.style.color = \"white\";\n\nbotaoFechar.onclick = () => {\n  removePopover();\n};\n\n// Então adicione todos esses elementos na página.\npopover.appendChild(mensagem);\npopover.appendChild(botaoFechar);\ndocument.body.appendChild(popover);\n\n</pre></code>\n// Se você apertar \"Run\" acima, então o popup deve aparecer\n no canto inferior esquerdo, podendo ser fechado clicando\n no x no canto superior direito. \n\n Esse exemplo demonstra como você pode trabalhar com a API do DOM\n no JavaScript - mas usando TypeScript para prover ótimo \n suporte ferramental.\n\n Existe um exemplo estendido para o ferramental TypeScript com  \n WebGL disponível aqui: example:typescript-with-webgl\n","redirectHref":"pt/play/?#example/typescript-with-web"}},"staticQueryHashes":[]}