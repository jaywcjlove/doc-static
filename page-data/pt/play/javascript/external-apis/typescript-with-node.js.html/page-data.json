{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/external-apis/typescript-with-node.js.html","result":{"pageContext":{"name":"TypeScript with Node","title":"TypeScript with Node","lang":"pt","html":"\n Node.js é um ambiente de execução muito popular baseado no v8,\n a engine JavaScript que da vida ao Chrome. Você pode usa-la\n para construir servers, clientes front-end e qualquer coisa que\n esteja entre os dois.\n\n https://nodejs.org/\n\n Node.js vem com um grupo de bibliotecas base que estendem o \n ambiente de execução Javascript. \n Abrangendo desde tratamento de caminhos:\n\n<code><pre>\nimport { join } from \"path\";\nconst caminho = join(\"~\", \"downloads\", \"todo_list.json\");\n\n// a manipulação de arquivos:\n\nimport { readFileSync } from \"fs\";\nconst textoTodoList = readFileSync(caminho, \"utf8\");\n\n</pre></code>\n// Você pode adicionar tipos de forma incremental ao seus projetos Javascript\n usando tipos no estilo JSDoc. Iremos fazer um para nossa lista de afazeres\n baseados na estrutura JSON:\n\n<code><pre>\n/**\n * @typedef {Object} todo um item da lista\n * @property {string} titulo O nome de exibição para o item da lista.\n * @property {string} corpo A descrição do item da lista.\n * @property {boolean} completo Se o item da lista está completo\n */\n\n</pre></code>\n// Agora atribuímos isso ao valor de retorno do JSON.parse\n para saber mais sobre isso, veja: exemplo:jsdoc-support\n\n<code><pre>\n/** @type {todo[]} uma lista de afazeres */\nconst todoList = JSON.parse(textoTodoList);\n\n// E tratamento de processos:\nimport { spawnSync } from \"child_process\";\ntodoList\n  .filter(todo => !todo.completo)\n  .forEach(todo => {\n    // Use o cliente ghi para criar uma issue para cada item\n    // da lista de afazeres que ainda não foram concluídos.\n\n    // Note que você tem auto-complete e documentação\n    // no JS quando você destaca 'todo.titulo' abaixo.\n    spawnSync(`ghi open --message \"${todo.titulo}\\n${todo.corpo}\"`);\n  });\n\n</pre></code>\n// TypeScript tem definições de tipo atualizadas para todos os \n módulos embutidos via DefinitelyTyped - que significa que você\n pode escrever programas node com uma forte cobertura de tipos.\n","redirectHref":"pt/play/?#example/typescript-with-node"}},"staticQueryHashes":[]}