{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html","result":{"pageContext":{"name":"Generic Functions","title":"Generic Functions","lang":"pt","html":" Tipos genéricos permitem usar Tipos como variáveis em outros tipos.\n Meta\n\n Tentaremos manter este exemplo leve. Você pode fazer\n muita coisa com tipos genéricos e é provável que veja algum código bem\n complicado usando tipos genéricos em algum ponto - mas isso\n não significa que tipos genéricos são complicados.\n\n Vamos começar com um exemplo onde envolveremos um objeto de entrada\n em um array. Só vamos nos importar com uma variável neste caso:\n o tipo que foi passado como argumento:\n\n<code><pre>\nfunction envolverEmArray<Tipo>(entrada: Tipo): Tipo[] {\n  return [entrada];\n}\n\n</pre></code>\n// Nota: é comum ver Tipo ser referido como T. Isso é\n culturalmente similar a como as pessoas usam i em um loop for\n para representar índice. T normalmente representa Tipo (Type), então\n usaremos o nome completo para maior clareza\n\n Nossa função usará inferência para sempre manter o tipo\n passado como argumento igual ao tipo retornado (porém\n envolvido em um array)\n\n<code><pre>\nconst stringArray = envolverEmArray(\"hello generics\");\nconst numberArray = envolverEmArray(123);\n\n</pre></code>\n// Podemos verificar que isso funciona como esperado ao checar\n se podemos atribuir um array de strings a uma função que\n deveria ser um array de objetos\n<code><pre>\nconst naoArrayDeStrings: string[] = envolverEmArray({});\n\n</pre></code>\n// Você também pode evitar a inferência adicionando\n o tipo você mesmo:\n<code><pre>\nconst arrayDeStrings2 = envolverEmArray<string>(\"\");\n\n</pre></code>\n// envolverEmArray permite que qualquer tipo seja usado, porém existem\n casos onde você precisa permitir apenas um subconjunto de tipos.\n Nesses casos você pode dizer que o tipo deve estender um\n tipo específico.\n\n<code><pre>\ninterface Desenhavel {\n  desenhar: () => void;\n}\n\n</pre></code>\n// Esta função recebe um conjunto de objetos que possuem uma função\n para desenhar na tela\n<code><pre>\nfunction renderizarNaTela<Tipo extends Desenhavel>(entrada: Tipo[]) {\n  entrada.forEach(i => i.desenhar());\n}\n\nconst objetosComDesenhar = [{ desenhar: () => {} }, { desenhar: () => {} }];\nrenderizarNaTela(objetosComDesenhar);\n\n// Isso falhará se desenhar não estiver presente:\n\nrenderizarNaTela([{}, { desenhar: () => {} }]);\n\n</pre></code>\n// Tipos genéricos podem começar a parecer complicados quando você tem\n múltiplas variáveis. Aqui está um exemplo de uma função de caching\n que permite que você tenha diferentes conjuntos de tipos de entrada\n e caches.\n\n<code><pre>\ninterface HostDeCache {\n  salvar: (a: any) => void;\n}\n\nfunction adicionarObjetoAoCache<Tipo, Cache extends HostDeCache>(obj: Tipo, cache: Cache): Cache {\n  cache.salvar(obj);\n  return cache;\n}\n\n</pre></code>\n// Este é o mesmo exemplo que acima, porém com um parâmetro extra.\n Nota: para fazê-lo funcionar, porém, tivemos que usar any. Isso\n pode ser resolvido usando uma interface genérica\n\n<code><pre>\ninterface HostDeCacheGenerico<TipoDeConteudo> {\n  salvar: (a: TipoDeConteudo) => void;\n}\n\n</pre></code>\n// Agora quando o HostDeCacheGenerico é usado, você deve dizer\n a dele qual é o TipoDeConteudo\n\n<code><pre>\nfunction adicionarObjetoTipadoAoCache<Tipo, Cache extends HostDeCacheGenerico<Tipo>>(obj: Tipo, cache: Cache): Cache {\n  cache.salvar(obj);\n  return cache;\n}\n\n</pre></code>\n// O exemplo acima é bem intenso em termos de sintaxe. Porém,\n isso provê uma segurança maior. Essas são escolhas que\n agora você tem conhecimento para fazer. Quando for prover APIs\n a outras pessoas, tipos genéricos oferecem um jeito flexível de permitir\n que elas usem seus próprios tipos sem ter que inferir seu código por completo.\n\n Para mais exemplos de tipos genéricos com classes e interfaces:\n\n example:advanced-classes\n example:typescript-with-react\n https://www.typescriptlang.org/docs/handbook/generics.html\n","redirectHref":"pt/play/?#example/generic-functions"}},"staticQueryHashes":[]}