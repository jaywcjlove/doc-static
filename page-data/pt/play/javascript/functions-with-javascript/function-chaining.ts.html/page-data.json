{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html","result":{"pageContext":{"name":"Function Chaining","title":"Function Chaining","lang":"pt","html":"\n Encadeamento de funções é um padrão comum em JavaScript que pode fazer seu\n código mais legível e com menos valores intermediários, mais fácil de ler\n devido a suas qualidades de aninhamento\n\n JQuery é uma API comum que funciona via encadeamento.\n Aqui está um exemplo de JQuery sendo usada com os tipos\n a partir de DefinitelyTyped\n\n<code><pre>\nimport $ from \"jquery\";\n\n// Aqui está um exemplo de uso da API do jQuery\n\n$(\"#navigation\").css(\"background\", \"red\").height(300).fadeIn(200);\n\n</pre></code>\n// Se você adicionar um ponto na linha acima, você verá\n uma lista longa de funções. Esse padrão é facil de reproduzir\n em JavaScript. A chave é certificar que você sempre tem o\n mesmo objeto como retorno.\n\n Aqui está um exemplo de uma API que cria um API encadeada.\n A chave é ter uma função externa que acompanha o estado interno\n e um objeto que expõe a API que é sempre retornada.\n\n<code><pre>\nconst addTwoNumbers = (start = 1) => {\n  let n = start;\n\n  const api = {\n    // Implemente cada função na sua API\n    add(inc: number = 1) {\n      n += inc;\n      return api;\n    },\n\n    print() {\n      console.log(n);\n      return api;\n    },\n  };\n  return api;\n};\n\n// O que permite o mesmo estilo de API como vimos no jQuery\n\naddTwoNumbers(1).add(3).add().print().add(1);\n\n// Aqui um exemplo similar que usa uma classe.\n\nclass AddNumbers {\n  private n: number;\n\n  constructor(start = 0) {\n    this.n = start;\n  }\n\n  public add(inc = 1) {\n    this.n = this.n + inc;\n    return this;\n  }\n\n  public print() {\n    console.log(this.n);\n    return this;\n  }\n}\n\n// Aqui o exemplo em ação.\n\nnew AddNumbers(2).add(3).add().print().add(1);\n\n</pre></code>\n// Esse exemplo usou a inferência de tipos do TypeScrypt\n para fornecer uma maneira de prover ferramental para padrões JavaScript.\n\n Para mais exemplo disso:\n\n  - example:code-flow\n","redirectHref":"pt/play/?esModuleInterop=true#example/function-chaining"}},"staticQueryHashes":[]}