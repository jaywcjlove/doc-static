{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html","result":{"pageContext":{"name":"Typing Functions","title":"Typing Functions","lang":"pt","html":" Você pode chegar bem longe usando a inferência do TypeScript,\n porém existem muitas outras maneiras de prover um modo mais\n rico para documentar a forma das suas funções.\n\n Uma boa primeira opção é observar os parâmetros opcionais,\n que é uma forma de deixar os outros saberem que alguns\n parâmetros podem ser pulados.\n\n<code><pre>\nlet i = 0;\nconst incrementarIndice = (valor?: number) => {\n  i += valor === undefined ? 1 : valor;\n};\n\n// Esta função pode ser invocada das seguintes maneiras:\n\nincrementarIndice();\nincrementarIndice(0);\nincrementarIndice(3);\n\n</pre></code>\n// Você pode tipar parâmetros como funções, que provêm\n inferência de tipos quando escrever estas funções.\n\n<code><pre>\nconst callbackComIndice = (callback: (i: number) => void) => {\n  callback(i);\n};\n\n</pre></code>\n// Embutir interfaces de funções pode dificultar um pouco a leitura\n com todas essas setas. Usar um apelido para o tipo permitirá\n que você nomeie a função passada como parâmetro.\n\n<code><pre>\ntype CallbackComNumero = (i: number) => void;\nconst callbackComIndice2 = (callback: CallbackComNumero) => {\n  callback(i);\n};\n\n// Esta função pode ser invocada da seguinte maneira:\n\ncallbackComIndice2(indice => {\n  console.log(indice);\n});\n\n</pre></code>\n// Se passar o cursor sobre o índice acima, você verá como o TypeScript\n inferiu corretamente que o índice deveria ser um número.\n\n A inferência do TypeScript também pode funcionar quando passamos uma\n função como uma referência de instância. Para demonstrar, usaremos\n uma função que transforma um número em uma string:\n\n<code><pre>\nconst numeroParaString = (n: number) => {\n  return n.toString();\n};\n\n</pre></code>\n// Isso pode ser utilizado em uma função como map em um array\n para converter todos os números em strings. Se passar o cursor\n sobre numerosComoString abaixo, você verá os tipos esperados.\n<code><pre>\nconst numerosComoString = [1, 4, 6, 10].map(i => numeroParaString(i));\n\n</pre></code>\n// Podemos usar uma abreviação para passar a função diretamente\n e termos o mesmo resultado com um código mais focado:\n<code><pre>\nconst numerosComoStringConciso = [1, 4, 6, 10].map(numeroParaString);\n\n</pre></code>\n// Você pode ter funções que aceitam muitos tipos\n mas estar somente interessado em algumas propriedades.\n Esse é um caso útil para assinaturas indexadas em tipos.\n O seguinte tipo declara que nesta função é OK usar qualquer objeto,\n contanto que ele inclua a propriedade nome:\n\n<code><pre>\ninterface QualquerObjetoDeveTerNome {\n  nome: string;\n  [chave: string]: any;\n}\n\nconst apresentaNomeFormatado = (entrada: QualquerObjetoDeveTerNome) => {};\n\napresentaNomeFormatado({ nome: \"joey\" });\napresentaNomeFormatado({ nome: \"joey\", age: 23 });\n\n</pre></code>\n// Se quiser aprender mais sobre assinaturas indexadas\n nós recomendamos:\n\n https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks\n https://basarat.gitbooks.io/typescript/docs/types/index-signatures.html\n\n Você também pode permitir este tipo de comportamento em qualquer lugar\n usando a flag suppressExcessPropertyErrors do arquivo tsconfig -\n porém, você não tem como saber se quem estiver usando sua API\n têm esta configuração desligada.\n\n Funções em JavaScript podem aceitar diferentes conjuntos de parâmetros.\n Existem dois padrões comuns para descrevê-los: union types (união de tipagens)\n para parâmetros/retorno, e function overloads (sobrecarga de funções).\n\n Usar union types nos seus parâmetros faz sentido se existirem\n apenas uma ou duas mudanças e a documentação não precisar ser\n modificada entre essas funções.\n\n<code><pre>\nconst FuncaoBoolOuNumber = (input: boolean | number) => {};\n\nFuncaoBoolOuNumber(true);\nFuncaoBoolOuNumber(23);\n\n</pre></code>\n// Function overloads, por outro lado, oferecem uma sintaxe\n bem mais rica para parâmetros e tipos de retorno.\n\n<code><pre>\ninterface FuncaoBoolOuNumberOuString {\n  /** Recebe um boolean, retorna um boolean */\n  (entrada: boolean): boolean;\n  /** Recebe um número, retorna um número */\n  (entrada: number): number;\n  /** Recebe uma string, retorna um boolean */\n  (entrada: string): boolean;\n}\n\n</pre></code>\n// Se esta for a primeira vez que esteja vendo a expressão declare,\n ela permite que você diga ao TypeScript que algo existe, mesmo\n que não esteja presente em runtime neste arquivo. Isso é útil para\n mapear código com side-effects mas extremamente útil para demos, onde\n implementar algo poderia ser bem custoso.\n\n<code><pre>\ndeclare const funcaoBoolOuNumberOuString: FuncaoBoolOuNumberOuString;\n\nconst valorBool = funcaoBoolOuNumberOuString(true);\nconst valorNumero = funcaoBoolOuNumberOuString(12);\nconst valorBool2 = funcaoBoolOuNumberOuString(\"string\");\n\n</pre></code>\n// Se passar o cursor sobre os valores e funções acima\n você verá a documentação e valores retornados corretos.\n\n Você pode chegar bem longe usando function overloads, porém\n existe uma outra ferramenta para lidar com diferentes tipos\n de valores de entrada e retorno: tipos genéricos.\n\n Tipos genéricos provêm uma forma de você ter tipos como variáveis\n substituíveis em definições de tipo.\n\n example:generic-functions\n example:function-chaining\n","redirectHref":"pt/play/?#example/typing-functions"}},"staticQueryHashes":[]}