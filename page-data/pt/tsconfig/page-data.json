{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/pt/tsconfig","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/vo/tsconfig"},{"path":"/tsconfig"},{"path":"/en/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/play"},{"path":"/en/play"},{"path":"/es/play"},{"path":"/fa/play"},{"path":"/pt/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/ja/play"},{"path":"/play/3-7/fixits/big-number-literals.ts"},{"path":"/play/3-7/fixits/const-to-let.ts"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts"},{"path":"/play/4-0/new-ts-features/named-tuples.ts"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/play/javascript/external-apis/typescript-with-node.js"},{"path":"/play/javascript/external-apis/typescript-with-web.js"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/play/javascript/helping-with-javascript/errors.ts"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/play/javascript/javascript-essentials/functions.ts"},{"path":"/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/play/javascript/modern-javascript/async-await.ts"},{"path":"/play/javascript/modern-javascript/immutability.ts"},{"path":"/play/javascript/modern-javascript/import-export.ts"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/play/javascript/working-with-classes/classes-101.ts"},{"path":"/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/play/javascript/working-with-classes/mixins.ts"},{"path":"/play/javascript/working-with-classes/this.ts"},{"path":"/play/playground/config/javascript-playgrounds.js"},{"path":"/play/playground/config/new-compiler-defaults.ts"},{"path":"/play/playground/language/automatic-type-acquisition.ts"},{"path":"/play/playground/language/fixits.ts"},{"path":"/play/playground/tooling/mobile-support.ts"},{"path":"/play/playground/tooling/sharable-urls.ts"},{"path":"/play/playground/tooling/typescript-versions.ts"},{"path":"/play/typescript/language/soundness.ts"},{"path":"/play/typescript/language/structural-typing.ts"},{"path":"/play/typescript/language/type-guards.ts"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/play/typescript/language-extensions/enums.ts"},{"path":"/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/play/typescript/meta-types/conditional-types.ts"},{"path":"/play/typescript/meta-types/discriminate-types.ts"},{"path":"/play/typescript/meta-types/indexed-types.ts"},{"path":"/play/typescript/meta-types/mapped-types.ts"},{"path":"/play/typescript/primitives/any.ts"},{"path":"/play/typescript/primitives/literals.ts"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/play/typescript/primitives/unknown-and-never.ts"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/play/typescript/type-primitives/nullable-types.ts"},{"path":"/play/typescript/type-primitives/tuples.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/es/play/typescript/language/soundness.ts"},{"path":"/es/play/typescript/language/structural-typing.ts"},{"path":"/es/play/typescript/language/type-guards.ts"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/es/play/typescript/meta-types/conditional-types.ts"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts"},{"path":"/es/play/typescript/meta-types/indexed-types.ts"},{"path":"/es/play/typescript/meta-types/mapped-types.ts"},{"path":"/es/play/typescript/primitives/any.ts"},{"path":"/es/play/typescript/primitives/literals.ts"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts"},{"path":"/es/play/typescript/type-primitives/tuples.ts"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/ja/play/typescript/language-extensions/enums.ts"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/ja/play/typescript/primitives/any.ts"},{"path":"/ja/play/typescript/primitives/literals.ts"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts"},{"path":"/ja/play/typescript/type-primitives/tuples.ts"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts"},{"path":"/pt/play/3-7/fixits/const-to-let.ts"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/pt/play/typescript/type-primitives/tuples.ts"},{"path":"/pt/play/typescript/language-extensions/enums.ts"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts"},{"path":"/zh/play/javascript/working-with-classes/this.ts"},{"path":"/zh/play/playground/config/javascript-playgrounds.js"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts"},{"path":"/zh/play/playground/language/fixits.ts"},{"path":"/zh/play/playground/tooling/mobile-support.ts"},{"path":"/zh/play/playground/tooling/sharable-urls.ts"},{"path":"/zh/play/playground/tooling/typescript-versions.ts"},{"path":"/zh/play/typescript/language/soundness.ts"},{"path":"/zh/play/typescript/language/structural-typing.ts"},{"path":"/zh/play/typescript/language/type-guards.ts"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/zh/play/typescript/language-extensions/enums.ts"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts"},{"path":"/zh/play/typescript/primitives/literals.ts"},{"path":"/zh/play/typescript/primitives/any.ts"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts"},{"path":"/zh/play/typescript/type-primitives/tuples.ts"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/ja/play/3-7/fixits/const-to-let.ts"},{"path":"/community"},{"path":"/es/community"},{"path":"/ja/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/ja/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/ja/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/ja/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/ja/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/ja/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]},"markdownRemark":{"id":"7e64eccc-1089-554a-9bc0-327b34c8c969","html":"<h2>Introdução às referências do TSConfig</h2>\n<p>Ter um arquivo TSConfig em uma pasta indica que esta pasta é a raiz de um projeto TypeScript ou JavaScript. O arquivo TSConfig pode ser um <code>tsconfig.json</code> ou um <code>jsconfig.json</code>, os dois possuem o mesmo comportamento e as mesmas variáveis de configuração.</p>\n<p>Esta página cobre todas as diferentes opções de configuração disponíveis em um arquivo TSConfig. Ela começa com uma visão geral de todas as configurações, depois passa pelos atributos principais que estão na raiz do arquivo JSON, então fala sobre as <code>compilerOptions</code>, que são a maioria das opções e finaliza com as <code>watchOptions</code>.</p>\n<div id='full-option-list' class='indent'>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Project_Files_0>File Inclusion</a></h5>\n<ul>\n<li><a href=#exclude>exclude</a></li>\n<li><a href=#extends>extends</a></li>\n<li><a href=#files>files</a></li>\n<li><a href=#include>include</a></li>\n<li><a href=#references>references</a></li>\n<li><a href=#typeAcquisition>typeAcquisition</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Basic_Options_6172>Opções de Projeto</a></h5>\n<ul>\n<li><a href=#allowJs>allowJs</a></li>\n<li><a href=#checkJs>checkJs</a></li>\n<li><a href=#composite>composite</a></li>\n<li><a href=#declaration>declaration</a></li>\n<li><a href=#declarationMap>declarationMap</a></li>\n<li><a href=#downlevelIteration>downlevelIteration</a></li>\n<li><a href=#importHelpers>importHelpers</a></li>\n<li><a href=#incremental>incremental</a></li>\n<li><a href=#isolatedModules>isolatedModules</a></li>\n<li><a href=#jsx>jsx</a></li>\n<li><a href=#lib>lib</a></li>\n<li><a href=#module>module</a></li>\n<li><a href=#noEmit>noEmit</a></li>\n<li><a href=#outDir>outDir</a></li>\n<li><a href=#outFile>outFile</a></li>\n<li><a href=#plugins>plugins</a></li>\n<li><a href=#removeComments>removeComments</a></li>\n<li><a href=#rootDir>rootDir</a></li>\n<li><a href=#sourceMap>sourceMap</a></li>\n<li><a href=#target>target</a></li>\n<li><a href=#tsBuildInfoFile>tsBuildInfoFile</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Strict_Type_Checking_Options_6173>Strict Checks</a></h5>\n<ul>\n<li><a href=#alwaysStrict>alwaysStrict</a></li>\n<li><a href=#noImplicitAny>noImplicitAny</a></li>\n<li><a href=#noImplicitThis>noImplicitThis</a></li>\n<li><a href=#strict>strict</a></li>\n<li><a href=#strictBindCallApply>strictBindCallApply</a></li>\n<li><a href=#strictFunctionTypes>strictFunctionTypes</a></li>\n<li><a href=#strictNullChecks>strictNullChecks</a></li>\n<li><a href=#strictPropertyInitialization>strictPropertyInitialization</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Module_Resolution_Options_6174>Module Resolution</a></h5>\n<ul>\n<li><a href=#allowSyntheticDefaultImports>allowSyntheticDefaultImports</a></li>\n<li><a href=#allowUmdGlobalAccess>allowUmdGlobalAccess</a></li>\n<li><a href=#baseUrl>baseUrl</a></li>\n<li><a href=#esModuleInterop>esModuleInterop</a></li>\n<li><a href=#moduleResolution>moduleResolution</a></li>\n<li><a href=#paths>paths</a></li>\n<li><a href=#preserveSymlinks>preserveSymlinks</a></li>\n<li><a href=#rootDirs>rootDirs</a></li>\n<li><a href=#typeRoots>typeRoots</a></li>\n<li><a href=#types>types</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Source_Map_Options_6175>Source Maps</a></h5>\n<ul>\n<li><a href=#inlineSourceMap>inlineSourceMap</a></li>\n<li><a href=#inlineSources>inlineSources</a></li>\n<li><a href=#mapRoot>mapRoot</a></li>\n<li><a href=#sourceRoot>sourceRoot</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Additional_Checks_6176>Checagens do Linter</a></h5>\n<ul>\n<li><a href=#noFallthroughCasesInSwitch>noFallthroughCasesInSwitch</a></li>\n<li><a href=#noImplicitReturns>noImplicitReturns</a></li>\n<li><a href=#noUnusedLocals>noUnusedLocals</a></li>\n<li><a href=#noUnusedParameters>noUnusedParameters</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Experimental_Options_6177>Experimental</a></h5>\n<ul>\n<li><a href=#emitDecoratorMetadata>emitDecoratorMetadata</a></li>\n<li><a href=#experimentalDecorators>experimentalDecorators</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Command_line_Options_6171>Command Line</a></h5>\n<ul>\n<li><a href=#preserveWatchOutput>preserveWatchOutput</a></li>\n<li><a href=#pretty>pretty</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Watch_Options_999>Watch Options</a></h5>\n<ul>\n<li><a href=#fallbackPolling>fallbackPolling</a></li>\n<li><a href=#watchDirectory>watchDirectory</a></li>\n<li><a href=#watchFile>watchFile</a></li>\n</ul></div>\n<br />\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Advanced_Options_6178>Avançado</a></h5>\n<ul>\n<li><a href=#allowUnreachableCode>allowUnreachableCode</a></li>\n<li><a href=#allowUnusedLabels>allowUnusedLabels</a></li>\n<li><a href=#assumeChangesOnlyAffectDirectDependencies>assumeChangesOnlyAffectDirectDependencies</a></li>\n<li><a href=#charset>charset</a></li>\n<li><a href=#declarationDir>declarationDir</a></li>\n<li><a href=#diagnostics>diagnostics</a></li>\n<li><a href=#disableSizeLimit>disableSizeLimit</a></li>\n<li><a href=#disableSolutionSearching>disableSolutionSearching</a></li>\n<li><a href=#disableSourceOfProjectReferenceRedirect>disableSourceOfProjectReferenceRedirect</a></li>\n<li><a href=#emitBOM>emitBOM</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#emitDeclarationOnly>emitDeclarationOnly</a></li>\n<li><a href=#extendedDiagnostics>extendedDiagnostics</a></li>\n<li><a href=#forceConsistentCasingInFileNames>forceConsistentCasingInFileNames</a></li>\n<li><a href=#generateCpuProfile>generateCpuProfile</a></li>\n<li><a href=#importsNotUsedAsValues>importsNotUsedAsValues</a></li>\n<li><a href=#jsxFactory>jsxFactory</a></li>\n<li><a href=#jsxFragmentFactory>jsxFragmentFactory</a></li>\n<li><a href=#keyofStringsOnly>keyofStringsOnly</a></li>\n<li><a href=#listEmittedFiles>listEmittedFiles</a></li>\n<li><a href=#listFiles>listFiles</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#maxNodeModuleJsDepth>maxNodeModuleJsDepth</a></li>\n<li><a href=#newLine>newLine</a></li>\n<li><a href=#noEmitHelpers>noEmitHelpers</a></li>\n<li><a href=#noEmitOnError>noEmitOnError</a></li>\n<li><a href=#noErrorTruncation>noErrorTruncation</a></li>\n<li><a href=#noImplicitUseStrict>noImplicitUseStrict</a></li>\n<li><a href=#noLib>noLib</a></li>\n<li><a href=#noResolve>noResolve</a></li>\n<li><a href=#noStrictGenericChecks>noStrictGenericChecks</a></li>\n<li><a href=#out>out</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#preserveConstEnums>preserveConstEnums</a></li>\n<li><a href=#reactNamespace>reactNamespace</a></li>\n<li><a href=#resolveJsonModule>resolveJsonModule</a></li>\n<li><a href=#skipDefaultLibCheck>skipDefaultLibCheck</a></li>\n<li><a href=#skipLibCheck>skipLibCheck</a></li>\n<li><a href=#stripInternal>stripInternal</a></li>\n<li><a href=#suppressExcessPropertyErrors>suppressExcessPropertyErrors</a></li>\n<li><a href=#suppressImplicitAnyIndexErrors>suppressImplicitAnyIndexErrors</a></li>\n<li><a href=#traceResolution>traceResolution</a></li>\n<li><a href=#useDefineForClassFields>useDefineForClassFields</a></li>\n</ul>\n</div>\n</div>\n<article id='top_level'>\n<h3 id=\"campos-raiz\" style=\"position:relative;\"><a href=\"#campos-raiz\" aria-label=\"campos raiz permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Campos Raiz</h3>\n<p>Para começar, temos algumas opções na raiz do TSConfig - essas opções são relacionadas a como seu projeto TypeScript ou JavaScript está configurado.</p>\n<div class='indent'>\n<div class='category'>\n<h2 id='Project_Files_0' ><a href='#Project_Files_0' name='Project_Files_0' aria-label=\"Link to the section File Inclusion\" aria-labelledby='Project_Files_0'>#</a>File Inclusion</h2>\n<p>These settings help you ensure that TypeScript picks up the right files.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Excluir - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica uma array de nomes de arquivos ou padrões que devem ser ignorando durante o <code>include</code>.</p>\n<p><strong>Importante</strong>: <code>exclude</code> altera <em>apenas</em> os arquivos que estão nos resultados da configuração <code>include</code>.\nUm arquivo marcado como <code>exclude</code> ainda pode fazer parte do seu código através de uma instrução <code>import</code>, uma inclusão de <code>types</code>, uma diretiva <code>/// &#x3C;reference</code> ou sendo relacionado na lista de <code>files</code>.</p>\n<p>Não é um mecanismo que <strong>impede</strong> um arquivo ser incluído no código base - apenas altera o que a configuração <code>include</code> pode selecionar.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[\"node_modules\", \"bower_components\", \"jspm_packages\"]</code>, plus the value of <code>outDir</code> if one is specified.</p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Estender - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>O valor de <code>extends</code> é uma <em>string</em> que contém o caminho para outro arquivo de configuração do qual ele herdará.\nO caminho pode usar o estilo de resolução do Node.Js</p>\n<p>A configuração do aquivo base é carregada primeiro, e então sobrescrita por aquelas presentes no arquivo de configuração herdado. Todos os caminhos relativos encontrados no arquivo de configuração serão resolvidos relativamente ao arquivo de configuração em que estes se originaram.</p>\n<p>Vale notar que <code>files</code>, <code>include</code> e <code>exclude</code> da configuração que está sendo estendida <em>sobrescreve</em> aquelas definidas na configuração base, e circularidade entre arquivos de configuração não é permitida.</p>\n<p>Atualmente, a única propriedade de <em>top-level</em> que é excluída da herança é <a href=\"#references\"><code>references</code></a>.</p>\n<h5 id=\"exemplo\" style=\"position:relative;\"><a href=\"#exemplo\" aria-label=\"exemplo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"noImplicitAny\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"strictNullChecks\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"extends\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./configs/base\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"files\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"main.ts\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"supplemental.ts\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"extends\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"strictNullChecks\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Propriedades com caminhos relativos encontrados no arquivo de configuração, e que não sejam excluídas da herança, serão resolvidos relativamente ao arquivo de configuração em que estas se originaram.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Arquivos - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica uma lista de arquivos permitidos para incluir no programa. Um erro ocorre se qualquer um dos arquivos não puder ser encontrado.</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {},</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"files\"</span><span style=\"color: #000000\">: [</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"core.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"sys.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"types.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"scanner.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"parser.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"utilities.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"binder.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"checker.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"tsc.ts\"</span>\n<span style=\"color: #000000\">  ]</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Esta opção é útil quando você tem uma quantia pequena de arquivos e não precisa utilizar um glob para se referir a diversos arquivos.\nSe você precisa utilizar glob, então use <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns to include in the program.\nThese filenames are resolved relative to the directory containing the <code>tsconfig.json</code> file.</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/**/*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"tests/**/*\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Which would include:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre><code>.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n</code></pre>\n<p><code>include</code> and <code>exclude</code> support wildcard characters to make glob patterns:</p>\n<ul>\n<li><code>*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code>?</code> matches any one character (excluding directory separators)</li>\n<li><code>**/</code> matches any directory nested to any level</li>\n</ul>\n<p>If a glob pattern doesn’t include a file extension, then only files with supported extensions are included (e.g. <code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code> by default, with <code>.js</code> and <code>.jsx</code> if <code>allowJs</code> is set to true).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Project references are a way to structure your TypeScript programs into smaller pieces.\nUsing Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and improved ways.</p>\n<p>You can read more about how references works in the <a href=\"/docs/handbook/project-references.html\">Project References</a> section of the handbook</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeAcquisition-config'><a aria-label=\"Link to the compiler option: typeAcquisition\" id='typeAcquisition' href='#typeAcquisition' name='typeAcquisition' aria-labelledby=\"typeAcquisition-config\">#</a> Aquisição de tipo - <code>typeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando você tem um projeto JavaScript no seu editor, TypeScript providenciará tipos para o seu <code>node_modules</code> automaticamente utilizando o conjunto de definições de <code>@types</code>, DefinitelyTyped.\nIsso é conhecido como aquisição de tipo automática e você pode modificá-la utilizando o objecto <code>typeAcquisition</code> no seu arquivo de configuração.</p>\n<p>Se você quiser desabilitar ou modificar essa funcionalidade, crie o <code>jsconfig.json</code> na raíz do seu projeto:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"enable\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Se você quer incluir um módulo específico (mas ele não está em <code>node_modules</code>):</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Se um módulo não deve ser automaticamente adquirido, por exemplo, se uma biblioteca está disponível no seu <code>node_modules</code>, mas a sua equipe concordou em não utilizá-lo:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"exclude\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jquery\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article>\n<article id='compilerOptions'>\n<h3 id=\"opções-do-compilador\" style=\"position:relative;\"><a href=\"#op%C3%A7%C3%B5es-do-compilador\" aria-label=\"opções do compilador permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opções do compilador</h3>\n<p>Essas são a maioria das opções do TypeScript e descrevem como o compilador deve funcionar.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Basic_Options_6172\">Opções de Projeto</a></li>\n<li><a href=\"#Strict_Type_Checking_Options_6173\">Strict Checks</a></li>\n<li><a href=\"#Module_Resolution_Options_6174\">Module Resolution</a></li>\n<li><a href=\"#Source_Map_Options_6175\">Source Maps</a></li>\n<li><a href=\"#Additional_Checks_6176\">Checagens do Linter</a></li>\n<li><a href=\"#Experimental_Options_6177\">Experimental</a></li>\n<li><a href=\"#Advanced_Options_6178\">Avançado</a></li>\n<li><a href=\"#Command_line_Options_6171\">Command Line</a></li>\n</ul></nav>\n<div class='indent'>\n<div class='category'>\n<h2 id='Basic_Options_6172' ><a href='#Basic_Options_6172' name='Basic_Options_6172' aria-label=\"Link to the section Opções de Projeto\" aria-labelledby='Basic_Options_6172'>#</a>Opções de Projeto</h2>\n<p>Essas configurações são usadas para definir as expectativas de tempo de execução, como e onde você deseja que o JavaScript seja emitido e o nível de integração que você deseja com o código JavaScript existente no seu projeto.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Permitir JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite que arquivos JavaScript sejam importados dentro do seu projeto ao invés de só permitir arquivos <code>.ts</code> e <code>.tsx</code>. Por exemplo, este arquivo JS:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: carta.js</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const naipePadrao: &amp;quot;Copas&amp;quot;'>naipePadrao</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Copas\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgC7IB0AVgM4BQ8AHgA4D2hODi5BoK0d8ACsgBM8yBqAC8oAEQBhBnWTlJAbiA'>Try</a></div></pre>\n<p>Quando importado em um arquivo TypeScript, vai emitir um erro:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) naipePadrao: string&amp;#13;import naipePadrao'>naipePadrao</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./carta\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) naipePadrao: string&amp;#13;import naipePadrao'>naipePadrao</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUCBAGYCWANpAHYCGAtpKgMbXQAu1AdAFaJ61wATAK4UOkAB4AHBK0QcaJSZAAK1AdGpxQAXlAAiAMJxJ1RHoDcBMAFpbjIa1vWrxclToNQJSgIkdZeCS00mygAN6gCkqq6pqgAL6gRPC0+hzAzGzUFnh4jHCUiHCiZHAA5gAUUSpqGnAAlOZAA'>Try</a></div></pre>\n<p>Mas é importado normalmente com a opção <code>allowJS</code> ativada:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) naipePadrao: string&amp;#13;import naipePadrao'>naipePadrao</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./carta\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) naipePadrao: string&amp;#13;import naipePadrao'>naipePadrao</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgC7IB0AVgM4BQqA9gCYCuCx8AHgA42HnErTvwACsjp5kNUAF5QAIgDCNdsnIyA3JRCgAtDuwMCOrRrDhksWDQDuAKSqaocJGkyhoiOm2IEq0VJ0KgAN6gfALCouKgAL6gkHg0qLLEwLiEyGqUlNg0iOQ0zBYA5gAUoUIiYjQAlKpAA'>Try</a></div></pre>\n<p>Esta opção pode ser utilizada como uma forma de migrar um projeto JavaScript para TypeScript de forma incremental. Permitindo que arquivos <code>.ts</code> e <code>.tsx</code> coexistam no mesmo projeto que os arquivos JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Checar JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Funciona em conjunto com o <code>allowJs</code>. Quando o <code>checkJs</code> está ativado, os erros são relatados também nos arquivos JavaScript. Isto é\no equivalente a incluir <code>// @ts-check</code> na parte superior de todos os arquivos JavaScript incluídos no seu projeto.</p>\n<p>Por exemplo, este é um JavaScript incorreto, de acordo com a definição do tipo <code>parseFloat</code> que acompanha o TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// parseFloat só recebe uma string</span>\n<span style=\"color: #000000\">module.exports.</span><span style=\"color: #1A1A1A\">pi</span><span style=\"color: #000000\"> = parseFloat(</span><span style=\"color: #09835A\">3.124</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>Quando importado em um módulo TypeScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: constantes.js</span>\n<span style=\"color: #000000\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;constantes\\&amp;quot;&amp;quot;: typeof import(&amp;quot;constantes&amp;quot;);&amp;#13;}'>module</data-lsp>.<data-lsp lsp='module &amp;quot;constantes&amp;quot;'>exports</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) pi: number'>pi</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function parseFloat(string: string): number'>parseFloat</data-lsp>(</span><span style=\"color: #09835A\">3.124</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constantes\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEEMBtoewO4CkDOAoEEBmBLaBTAO0gFt8AuUAYzkJQBdJD78UA6AK3RLgBMBXAm3wAPAA5wATvXZicoALygxkSSnwAxeJHoAKAMxsAjACYALAEoA3GgxhwuAsTKUchXqLYy0OEhOmgAN7K8gC+oFiScCSgAERswDR0jMyssTZJKHBC8ADmunLWQA'>Try</a></div></pre>\n<p>Você não vai obter nenhum erro. No entanto, se você ativar o <code>checkJs</code> então voce também terá mensagens de erro no seu arquivo JavaScript.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: constantes.js</span>\n<span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span><span style=\"color: #000000\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;constantes\\&amp;quot;&amp;quot;: typeof import(&amp;quot;constantes&amp;quot;);&amp;#13;}'>module</data-lsp>.<data-lsp lsp='module &amp;quot;constantes&amp;quot;'>exports</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) pi: number'>pi</data-lsp></span><span style=\"color: #000000\"> = <data-lsp lsp='function parseFloat(string: string): number'>parseFloat</data-lsp>(</span><span style=\"color: #09835A\">3.124</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constantes\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUCBAIYA2JcA7gFYqgAu0ArpAWOAMYAWk7A1jagbNWEAGYBLEpAB2RALaRU7ONMR0i0upEQA6GnjlwAJoyk7IADwAOCOrqvjQAXlBWiSSADFyROgAoMHQBGNCwASgBuPBFwCSlZBVRxaSNLHTs8cTkbaDpQAG9XRwBfUFF4OVAAIh1gZVV1TW0qqPrEODNyAHM-B0igA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Composição - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A opção <code>composite</code> aplica certas restrições que possibilitam que ferramentas de build (incluindo o TypeScript\nno modo <code>--build</code>) determinem rapidamente se um projeto já foi construído.</p>\n<p>Quando esta configuração está ativada:</p>\n<ul>\n<li>A configuração <code>rootDir</code>, se não foi setada explicitamente, é o diretório que contém o arquivo <code>tsconfig.json</code>.</li>\n<li>Todos os arquivos de implementação devem corresponder a um padrão do <code>include</code> ou listados no array <code>files</code>. Se esta restrição for violada, o <code>tsc</code> informará quais arquivos não foram especificados.</li>\n<li><code>declaration</code> é setado como <code>true</code></li>\n</ul>\n<p>Você pode encontrar a documentação de projetos TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">no guia</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Declarações - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gere arquivos <code>.d.ts</code> para cada arquivo TypeScript ou JavaScript dentro do seu projeto.\nEsses arquivos <code>.d.ts</code> são arquivos de definição de tipo que descrevem a API externa do seu módulo.\nCom arquivos <code>.d.ts</code>, ferramentas como o TypeScript podem fornecer intellisense e tipos mais precisos para código que ainda não foi digitado.</p>\n<p>Quando a opção <code>declaration</code> é definida como <code>true</code>, executando o compilador com este código TypeScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let olaMundo: string'>olaMundo</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"olá!\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAG2PCCCGBZArgOwCYRwC8cARKgIcCEpA3EA'>Try</a></div></pre>\n<p>Vai gerar um arquivo <code>index</code> como este:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">olaMundo </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"olá!\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMAeAHWAJ3VABttTYyBDAWQFcA7AE1lAF5QAiagQ4CE3ANxA'>Try</a></div></pre>\n<p>Com um outro arquivo correspondente <code>olaMundo.d.ts</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">olaMundo</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCi1oAHWKPShiy2CICyAVyqxQAXlAAidQEOAhEYDcQA'>Try</a></div></pre>\n<p>Ao trabalhar com arquivos <code>.d.ts</code> para arquivos JavaScript, você pode usar <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> ou usar <a href=\"#outDir\"><code>outDir</code></a> para garantir que os arquivos JavaScript não sejam sobrescritos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>True when TS</p>\n</li>\n<li><span>Related:</span><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> Mapa de declarações - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gera um sourcemap para arquivos <code>.d.ts</code>, que são mapeados de volta para o arquivo original <code>.ts</code>.\nIsso permitirá que editores como o VS Code acessem o arquivo <code>.ts</code> original ao usar recursos como <em>Ir para definição</em>.</p>\n<p>Você deve fortemente considerar ativar essa opção se estiver usando referências de projeto.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Iteração Downlevel - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Downleveling é o termo do TypeScript para transpilar para uma versão mais antiga do JavaScript.\nEsse sinalizador permite que, em runtimes mais antigos do JavaScript, haja o suporte a uma implementação mais precisa de como o JavaScript moderno interage com novos conceitos.</p>\n<p>O ECMAScript 6 adicionou várias novas primitivas de iteração: o loop <code>for / of</code> (<code>for (el of arr)</code>), operador de spread (<code>[a, ...b]</code>), spread de argumento (<code>fn (... args)</code>) e o <a href=\"https://medium.com/trainingcenter/iterators-em-javascript-880adef14495\"><code>Symbol.iterator</code></a>. <code>--downlevelIteration</code> permite que essas primitivas de iteração sejam usadas com mais precisão nos ambientes ES5 se uma implementação do <a href=\"https://medium.com/trainingcenter/iterators-em-javascript-880adef14495\"><code>Symbol.iterator</code></a> estiver presente.</p>\n<h4 id=\"exemplo-efeitos-no-for--of\" style=\"position:relative;\"><a href=\"#exemplo-efeitos-no-for--of\" aria-label=\"exemplo efeitos no for  of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo: Efeitos no <code>for / of</code></h4>\n<p>Sem a flag <code>downlevelIteration</code> ativa, um loop <code>for / of</code> em qualquer objeto sofre um downlevel para um loop <code>for</code> tradicional:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">str </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Olá!\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_i </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">str_1 </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #000000\">.length; </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\">++) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBAM4AWA9gO7oC2AlpLgMakB2hkobsoAvKAEQB5ADYBDgIR8A3LgBmpLgAomrdoVCkZHSLACUoAN65QoZYVJDEAOiGl4CwjukBfIA'>Try</a></div></pre>\n<p>Isso geralmente é o que as pessoas esperam, mas não é 100% compatível com o comportamento do ECMAScript 6.\nCertas strings, como emoji (😜), têm um <code>.length</code> de 2 (ou até mais!), Mas devem iterar como 1 unidade em um loop <code>for-of</code>.\nConsulte <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">esta postagem no blog de Jonathan New</a> para obter uma explicação mais detalhada.</p>\n<p>Quando o <code>downlevelIteration</code> estiver ativado, o TypeScript usará uma função auxiliar que verifica a implementação do <code>Symbol.iterator</code> (nativo ou polyfill). Se essa implementação estiver ausente, ela retornará à iteração baseada em índice.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__values </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__values</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Symbol === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">m </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">], </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">.length === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        next: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">.length) </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> { value: </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">++], done: !</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">    };</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> TypeError(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">str </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Olá!\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">str_1 </span><span style=\"color: #000000\">= __values(</span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #000000\">), </span><span style=\"color: #1A1A1A\">str_1_1 </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #000000\">.next(); !</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #000000\">.next()) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #000000\">.value;</span>\n<span style=\"color: #000000\">        console.log(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">e_1_1</span><span style=\"color: #000000\">) { </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #000000\"> = { error: </span><span style=\"color: #1A1A1A\">e_1_1</span><span style=\"color: #000000\"> }; }</span>\n<span style=\"color: #0000FF\">finally</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #000000\"> && !</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">return</span><span style=\"color: #000000\">)) </span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y4AzgAsy6ALbtIuAMZc+kULNigAvKABEAeUoBDgISqA3LgBmxRQApp5WfNDEj8yLACUoAN65QoS32LUAdJTE8GZ8ToYAvkA'>Try</a></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Nota:</strong> ativar o <code>downlevelIteration</code> não melhora a compatibilidade se o <code>Symbol.iterator</code> não estiver presente no runtime.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"exemplo-efeitos-em-spreads-de-arrays\" style=\"position:relative;\"><a href=\"#exemplo-efeitos-em-spreads-de-arrays\" aria-label=\"exemplo efeitos em spreads de arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo: Efeitos em Spreads de Arrays</h4>\n<p>Isso é um operador spread em um array:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// Cria um novo array onde os elementos são: 1 seguido por todos os elementos do arr2</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">arr2</span><span style=\"color: #000000\">];</span></code></div></pre>\n<p>Baseado nas descrições, parece fácil fazer um downlevel para ES6:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// Mesma coisa, certo?</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">].concat(</span><span style=\"color: #1A1A1A\">arr2</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>No entanto, isso é claramente diferente em certos casos bem raros.\nPor exemplo, se o array tiver um “buraco” no meio, o índice faltante vai criar uma propriedade <em>própria</em> quando sofrer o spread, mas isso não acontece quando usamos <code>concat</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// Fazemos um array onde temos o elemento do índice '1' faltando</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">faltando</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, , </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">spread</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #1A1A1A\">faltando</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">concatenado</span><span style=\"color: #000000\"> = [].concat(</span><span style=\"color: #1A1A1A\">faltando</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// true</span>\n<span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">spread</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// false</span>\n<span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">concatenado</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Assim como <code>for / of</code>, <code>downlevelIteration</code> vai usar o <code>Symbol.iterator</code> (se presente) para emular de forma mais precisa o comportamento do ES 6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Importar Auxiliares - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Para algumas operações de mais baixo nível, o TypeScript pode usar alguns códigos auxiliares para operações como extensão de classes, fazer spread de arrays ou objetos e para operações async. Por padrão esses auxiliares são inseridos em cada arquivo utilizado. Isso pode provocar duplicação de códigos se o mesmo auxiliar for usado em diferentes módulos.</p>\n<p>Se <code>importHelpers</code> estiver ligado, as funções auxiliares serão importadas do módulo <a href=\"https://www.npmjs.com/package/tslib\">tslib</a>. Você precisa ter certeza que o módulo <code>tslib</code> pode ser importado no runtime. Isso afeta apenas módulos; Os arquivos de scripts globais não tentarão importar módulos.</p>\n<p>Exemplo com esse TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">: number[]) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">arr2 </span><span style=\"color: #000000\">= [</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Ligando <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> e mantendo o <code>importHelpers</code> como falso:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__read </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__read</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">m </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Symbol === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">[Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #000000\">), </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">ar </span><span style=\"color: #000000\">= [], </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">while</span><span style=\"color: #000000\"> ((</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> || </span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">-- &gt; </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">.next()).</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #1A1A1A\">ar</span><span style=\"color: #000000\">.push(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">.value);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #000000\">) { </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\"> = { error: </span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #000000\"> }; }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> && !</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">])) </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">ar</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__spread </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__spread</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">ar </span><span style=\"color: #000000\">= [], </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.length; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">++) </span><span style=\"color: #1A1A1A\">ar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">ar</span><span style=\"color: #000000\">.concat(__read(</span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">]));</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">ar</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">arr2 </span><span style=\"color: #000000\">= __spread([</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFaYSADwAOsAulAAzAK6sAxsNGLWACkIFKrJcgBGAgNoBdAJSgA3plChVoyPL0AmUAF5QZgIwANKAAdKF6FgDcmAC+QA'>Try</a></div></pre>\n<p>Em seguida, ativando <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> e <code>importHelpers</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">__read</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">__spread</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">arr2 </span><span style=\"color: #000000\">= __spread([</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFYMIqZAAdYBdNF5SBkceFaxEBArJUkAHjLmgAZgFdWAY2GiTrABSEClVqeQAjAQG0AugEpQAN6YoKAWopDooI4ATKAAvKCeAIwANKAAdJmO3gDcmAC+QA'>Try</a></div></pre>\n<p>Você pode utilizar <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> quando fornecer suas próprias implementações dessas funções.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a>, <a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a>, <a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Tells TypeScript to save information about the project graph from the last compilation to files stored on disk. This\ncreates a series of <code>.tsbuildinfo</code> files in the same folder as your compilation output. They are not used by your\nJavaScript at runtime and can be safely deleted. You can read more about the flag in the <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 release notes</a>.</p>\n<p>To control which folders you want to the files to be built to, use the config option <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li>\n<li><span>Related:</span><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Isolated Modules - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>While you can use TypeScript to produce JavaScript code from TypeScript code, it’s also common to use other transpilers such as <a href=\"https://babeljs.io\">Babel</a> to do this.\nHowever, other transpilers only operate on a single file at a time, which means they can’t apply code transforms that depend on understanding the full type system.\nThis restriction also applies to TypeScript’s <code>ts.transpileModule</code> API which is used by some build tools.</p>\n<p>These limitations can cause runtime problems with some TypeScript features like <code>const enum</code>s and <code>namespace</code>s.\nSetting the <code>isolatedModules</code> flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.</p>\n<p>It does not change the behavior of your code, or otherwise change the behavior of TypeScript’s checking and emitting process.</p>\n<p>Some examples of code which does not work when <code>isolatedModules</code> is enabled.</p>\n<h4 id=\"exports-of-non-value-identifiers\" style=\"position:relative;\"><a href=\"#exports-of-non-value-identifiers\" aria-label=\"exports of non value identifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exports of Non-Value Identifiers</h4>\n<p>In TypeScript, you can import a <em>type</em> and then subsequently export it:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import someType'>someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import someFunction'>someFunction</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"someModule\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='import someFunction'>someFunction</data-lsp>();</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='export someType'>someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='export someFunction'>someFunction</data-lsp></span><span style=\"color: #000000\"> };</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEsC2AHZAXUAb1BWiwFMAVATxwoBpTyKAxAV0gGN8NpJQAX1AAzJFlAAiMpQCy0ACbsANhUkBuNGhltOPPpAAUASk1oKADzzxCJHbXpMdHbr35D1QA'>Try</a></div></pre>\n<p>Because there’s no value for <code>someType</code>, the emitted <code>export</code> will not try to export it (this would be a runtime error in JavaScript):</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">someFunction</span><span style=\"color: #000000\"> };</span></code></div></pre>\n<p>Single-file transpilers don’t know whether <code>someType</code> produces a value or not, so it’s an error to export a name that only refers to a type.</p>\n<h4 id=\"non-module-files\" style=\"position:relative;\"><a href=\"#non-module-files\" aria-label=\"non module files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Module Files</h4>\n<p>If <code>isolatedModules</code> is set, all implementation files must be <em>modules</em> (which means it has some form of <code>import</code>/<code>export</code>). An error occurs if any file isn’t a module:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\"><data-err>function</data-err></span><span style=\"color: #000000\"> <data-lsp lsp='function fn(): void'>fn</data-lsp>() {}</span>\n<span class=\"error\"><span>All files must be modules when the '--isolatedModules' flag is provided.</span><span class=\"code\">1208</span></span><span class=\"error-behind\">All files must be modules when the '--isolatedModules' flag is provided.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYAMAOAUCBAJaJwA2AhgC6QAmAsnLQK5mSJ4BmzAdgMZUicHqE48AFAEpQAbwC+QA'>Try</a></div></pre>\n<p>This restriction doesn’t apply to <code>.d.ts</code> files</p>\n<h4 id=\"references-to-const-enum-members\" style=\"position:relative;\"><a href=\"#references-to-const-enum-members\" aria-label=\"references to const enum members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References to <code>const enum</code> members</h4>\n<p>In TypeScript, when you reference a <code>const enum</code> member, the reference is replaced by its actual value in the emitted JavaScript. Changing this TypeScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> <data-lsp lsp='const enum Numbers'>Numbers</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numbers.Zero = 0'>Zero</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numbers.One = 1'>One</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Numbers'>Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numbers.Zero = 0'>Zero</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Numbers'>Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numbers.One = 1'>One</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iFBXAtvAHIEBGIMa8A3gFDzwBaFS8AvPAAwA098A8igQcAjLwC+tZOiQQQAOghIA5gAoS+cpXnMYrANTEyFNPMEgAlAG4gA'>Try</a></div></pre>\n<p>To this JavaScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqSYAm+AxgDYCGBoLsNk6ULQCuyUADlRAI3y5IoAN6ZQoAFqzYoALygADABploAPI1820AEZDAX0y9+sNvgB0bWAHMAFJOQy5Luq4mgDUEtKykC6m+ACUANxAA'>Try</a></div></pre>\n<p>Without knowledge of the values of these members, other transpilers can’t replace the references to <code>Number</code>, which would be a runtime error if left alone (since there are no <code>Numbers</code> object at runtime).\nBecause of this, when <code>isolatedModules</code> is set, it is an error to reference an ambient <code>const enum</code> member.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Define como a sintaxe JSX é gerada em um arquivo JavaScript.\nIsso afeta apenas a saída JS para arquivos que terminam em <code>.tsx</code>.</p>\n<ul>\n<li><code>preserve</code>: Gera um arquivo <code>.jsx</code> sem alterar o JSX</li>\n<li><code>react</code>: Converte JSX em equivalente <code>React.createElement</code> e gera arquivo<code>.js</code></li>\n<li><code>react-native</code>: Gera arquivo <code>.js</code> sem alterar o JSX</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p><code>react</code> (default),<br/><code>react-native</code>,<br/><code>preserve</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript includes a default set of type definitions for built-in JS APIs (like <code>Math</code>), as well as type definitions for things found in browser environments (like <code>document</code>).\nTypeScript also includes APIs for newer JS features matching the <code>target</code> you specify; for example the definition for <code>Map</code> is available if <code>target</code> is <code>ES6</code> or newer.</p>\n<p>You may want to change these for a few reasons:</p>\n<ul>\n<li>Your program doesn’t run in a browser, so you don’t want the <code>\"dom\"</code> type definitions</li>\n<li>Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn’t yet support the full syntax of a given ECMAScript version</li>\n<li>You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version</li>\n</ul>\n<h3 id=\"high-level-libraries\" style=\"position:relative;\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Core definitions for all ES3 and ES5 functionality</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>Additional APIs available in ES2015 (also known as ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias for “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>Additional APIs available in ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias for “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>Additional APIs available in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>Additional APIs available in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>rexexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>Additional APIs available in ES2019 - <code>array.flat</code>, <code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>Additional APIs available in ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>Additional APIs available in ESNext - This changes as the JavaScript specification evolves</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs available in <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> contexts</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs for the <a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"individual-library-components\" style=\"position:relative;\"><a href=\"#individual-library-components\" aria-label=\"individual library components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Individual library components</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>This list may be out of date, you can see the full list in the <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>See main content</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Sets the module system for the program. See the <a href='/docs/handbook/modules.html#ambient-modules'>Modules</a> chapter of the handbook for more information. You very likely want <code>\"CommonJS\"</code>.</p>\n<p>Here’s some example output for this file:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const valueOfPi: 3.142&amp;#13;import valueOfPi'>valueOfPi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const twoPi: number'>twoPi</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const valueOfPi: 3.142&amp;#13;import valueOfPi'>valueOfPi</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxge0QM4AuyiRBAdOQFDwAeADrgE5E77GgBuysArvADykAArRQAXlABmCgEYALACYA3NRCgAtNux8i2zerBQ4SNJlDREAE3pUC1aKiatQAb268BwsaAC+oJDMuKigAEQUwHiEJGQEYWq0jCxs0ZxEAO64vlI8-EKi4gBUoKpAA'>Try</a></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">constants_1 </span><span style=\"color: #000000\">= require(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHADNUz6BDZC6rHqR0PeukgA6CZlIAPAA6wATukHC1ANx7FCpAPLsACqlABeUAGZJARgAsAJgDcrCJ258BqevnnSWOAC0wVSE6MGBmKjISqqgAN6g2roGxqYAvqDsyrSgAESSwDQaYhJ5LrKKKmrFIqDo8LAm5kk6eobNAFSgzkA'>Try</a></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">factory</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> module === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> module.exports === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">v </span><span style=\"color: #000000\">= factory(</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">, exports);</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) module.exports = </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">amd</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        define([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #1A1A1A\">factory</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">constants_1 </span><span style=\"color: #000000\">= require(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADNUyA7AQ2QtAGNYXJ0bFukgA6EZlIAPAA6wATuh58BoAG5tihUgHkGABVSgAvKADMogIwAWAEwBuOqAC0r7oXSvnTxs1LtOSlQWfGlxSExUZDlFUABvdU1tPUNQAF9QBnlYZFAAIlFgXn5BYUg8x0lZBSVi1XR4WFTTDS1dAyMAKlAHIA'>Try</a></div></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">define([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAENl9sxwAzVMgOxotAGNZXJ0qrdJAB0wzKQAeAB1gAndN179QANyrFCpAPKMACqlABeUAGYRARgAsAJgDc9UAFoXXQuhdPHTFqXbJOVFZ8KTFITFRkWQVQAG81DS1dA1AAX1BGOVhkUAAiEWAePgEhSFyHCRl5RSKVdHhYFJN1TR19QwAqUHsgA'>Try</a></div></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #1A1A1A\">System</span><span style=\"color: #000000\">.register([</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">exports_1</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">context_1</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__moduleName </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">context_1</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">context_1</span><span style=\"color: #000000\">.id;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        setters: [</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">constants_1_1</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">constants_1_1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            }</span>\n<span style=\"color: #000000\">        ],</span>\n<span style=\"color: #000000\">        execute: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">            exports_1(</span><span style=\"color: #A31515\">\"twoPi\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">    };</span>\n<span style=\"color: #000000\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEgE9J1TlsxwAzVMgOwENkLQBjWBzpcO6SADpxmUgA8ADrABO6AULqgAbl2KFSAeRYAFVKAC8oAMwSAjABYATAG4moALQf+hdB7evW7KTcvJSoHPhyUpCYqMiKKqAA3lo6eoYmoAC+oCxKsMigAEQSwILC6KLihS4yCsqqZRro8LAZFtq6BsamAFSgzkA'>Try</a></div></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">twoPi </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgDtSAPLHcAM1TJoENkLQBjWDUjpONdJAB04zAwAOsAE7p+g4aABunYoVIB5FgAVUoALygAzBICMAFgBMAbmxgAtG76F0bl84hsO3LyoNPgMUpCYqMjySqAA3hpaOvpGoAC+oCwKsMigAEQSwAJCImKQeU4y9DHKxWro8LCpZpraeobGAFSgjkA'>Try</a></div></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">twoPi </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgCYAGe7McAM1TIDsBDZC0AY1gdI6Lh3SQAdBMykAHgAdYAJ3QChI0ADcuxQqQDyLAAqpQAXlABmSQEYALDQDcTUAFoP-Qug9vXrdlJuXkpUDnx5aUhMVGQlVVAAb21dfSNTUABfUBZlWGRQACJJYEFhUXFIQpdZRRU1Ms10eFgMyx09QxMzACpQZyA'>Try</a></div></pre>\n<h3 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h3>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\">exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">constants_1 </span><span style=\"color: #000000\">= require(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">exports.</span><span style=\"color: #1A1A1A\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlADtYrTsxwAzVMqgQ2QtAGNbJ07KukgA6EZlIAPAA6wATul78lAN3bFCpAPJMACqlABeUAGZRARgAsAJgDcDUAFoXPQuhdPHzVqQ5dKVCp8aXFITFRkOUVQAG9QdU0dfUMAX1AmeVhkUAAiUWA+KgEhEVyHSVkFJSKBUHR4WANjBI0tXWaAKlB7IA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p><code>CommonJS</code> (default if <code>target</code> is <code>ES3</code> or <code>ES5</code>),<br/>,<br/><code>ES6</code>/<code>ES2015</code> (synonymous, default for <code>target</code> <code>ES6</code> and higher),<br/>,<br/><code>ES2020</code>,<br/><code>None</code>,<br/><code>UMD</code>,<br/><code>AMD</code>,<br/><code>System</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations.</p>\n<p>This makes room for another tool like <a href=\"https://babeljs.io\">Babel</a>, or <a href=\"https://github.com/swc-project/swc\">swc</a> to handle converting the TypeScript file to a file which can run inside a JavaScript environment.</p>\n<p>You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If specified, <code>.js</code> (as well as <code>.d.ts</code>, <code>.js.map</code>, etc.) files will be emitted into this directory.\nThe directory structure of the original source files is preserved; see <a href=\"#rootDir\">rootDir</a> if the computed root is not what you intended.</p>\n<p>If not specified, <code>.js</code> files will be emitted in the same directory as the <code>.ts</code> files they were generated from:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">$ tsc</span>\n\n<span style=\"color: #000000\">example</span>\n<span style=\"color: #000000\">├── index.js</span>\n<span style=\"color: #000000\">└── index.ts</span></code></div></pre>\n<p>With a <code>tsconfig.json</code> like this:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Running <code>tsc</code> with these settings moves the files into the specified <code>dist</code> folder:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">$ tsc</span>\n\n<span style=\"color: #000000\">example</span>\n<span style=\"color: #000000\">├── dist</span>\n<span style=\"color: #000000\">│   └── index.js</span>\n<span style=\"color: #000000\">├── index.ts</span>\n<span style=\"color: #000000\">└── tsconfig.json</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If specified, all <em>global</em> (non-module) files will be concatenated into the single output file specified.</p>\n<p>If <code>module</code> is <code>system</code> or <code>amd</code>, all module files will also be concatenated into this file after all global content.</p>\n<p>Note: <code>outFile</code> cannot be used unless <code>module</code> is <code>None</code>, <code>System</code>, or <code>AMD</code>.\nThis option <em>cannot</em> be used to bundle CommonJS or ES6 modules.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>List of language service plugins to run inside the editor.</p>\n<p>Language service plugins are a way to provide additional information to a user based on existing TypeScript files. They can enhance existing messages between TypeScript and an editor, or to provide their own error messages.</p>\n<p>For example:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — Adds SQL linting with a template strings SQL builder.</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — Provides CSS linting inside template strings .</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — Provides eslint error messaging and fix-its inside the compiler’s output.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — Provides validation and auto-completion inside GraphQL query template strings.</li>\n</ul>\n<p>VS Code has the ability for a extension to <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">automatically include language service plugins</a>, and so you may have some running in your editor without needing to define them in your <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Remove Comments - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strips all comments from TypeScript files when converting into JavaScript. Defaults to <code>false</code>.</p>\n<p>For example, this is a TypeScript file which has a JSDoc comment:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** The translation of 'Hello world' into Portuguese */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorldPTBR </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>When <code>removeComments</code> is set to <code>true</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorldPTBR </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBco6uArvtgFSegAq0+ZrgCGNSABth6VLBqhYAM1AByABL5x42KHixc4gCbLQqOtoAKe9KwDm7SIM7BM+AB4AHK6ADGsyOlABTVgAdT1Dc14AIQAlUABeUAAiAHlxAEPQAFlWGgNYJIBuIA'>Try</a></div></pre>\n<p>Without setting <code>removeComments</code> or having it as <code>false</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** The translation of &apos;Hello world&apos; into Portuguese */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorldPTBR </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBcoAZgIYA2k+2AVD6ABVo+UOlysakdq3SpYNULGagA5AAl87drFDxYudgBMVoVHR0AFfegCuAcxv4uoHsEz4AHgAdroAMbykOigwlqwAOr6RhYCAEIASqAAvKAARADy7ACHoACyNjSGsKkA3EA'>Try</a></div></pre>\n<p>This means that your comments will show up in the JavaScript code.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Diretório Raiz - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Padrão</strong>: O caminho mais longo em comum entre todos os arquivos que não são de declaração. Se <code>composite</code> está definido, o padrão será o diretório contendo o arquivo <code>tsconfig.json</code>.</p>\n<p>Quando TypeScript compila os arquivos, ele mantém a estrutura dos diretório de saída igual a dos diretório de entrada.</p>\n<p>Por exemplo, suponhamos que você tenha alguns arquivos de entrada:</p>\n<pre><code>MeuProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n</code></pre>\n<p>O valor inferido para <code>rootDir</code> é o caminho mais longo em comum entre todos os arquivos que não são de declaração, que neste caso é <code>core/</code>.</p>\n<p>Se o seu <code>outDir</code> fosse <code>dist</code>, TypeScript escreveria esta árvore:</p>\n<pre><code>MeuProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n</code></pre>\n<p>Contudo, você pode ter a intenção de que <code>core</code> seja parte da estrutura do diretório de saída.\nAo definir <code>rootDir: \".\"</code> em <code>tsconfig.json</code>, TypeScript escreveria esta árvore:</p>\n<pre><code>MeuProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js\n</code></pre>\n<p>Importante, a opção <code>rootDir</code> <strong>não altera quais arquivos se tornam parte da compilação</strong>, pois não há interação com <code>include</code>, <code>exclude</code>, ou com a propriedade <code>files</code> em <code>tsconfig.json</code>.</p>\n<p>Note que TypeScript nunca irá escrever um arquivo de saída em um diretório fora de <code>outDir</code>, e nunca irá pular a emissão de um arquivo.\nPor este motivo, <code>rootDir</code> também impõe que todos arquivos que precisam ser emitidos estejam abaixo do caminho <code>rootDir</code>.</p>\n<p>Por exemplo, digamos que você tivesse esta árvore:</p>\n<pre><code>MeuProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── ajudantes.ts\n</code></pre>\n<p>Seria um erro especificar <code>rootDir</code> como <code>core</code> <em>e</em> <code>include</code> como <code>*</code>, porque estaria sendo criado um arquivo (<code>ajudantes.ts</code>) que precisaria ser emitido <em>fora</em> do <code>outDir</code> (i.e. <code>../ajudantes.js</code>).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables the generation of <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>.\nThese files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files.\nSource map files are emitted as <code>.js.map</code> (or <code>.jsx.map</code>) files next to the corresponding <code>.js</code> output file.</p>\n<p>The <code>.js</code> files will in turn contain a sourcemap comment to indicate to tools where the files are to external tools, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.ts</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Compiling with <code>sourceMap</code> set to <code>true</code> creates the following JavaScript file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.js</span>\n<span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\">exports.</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></code></div></pre>\n<p>And this also generates this json map:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.js.map</span>\n<span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"file\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ex.js\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sources\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"../ex.ts\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"names\"</span><span style=\"color: #000000\">: [],</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"mappings\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Runtime alvo - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Navegadores modernos suportam todas as funcionalidades ES6, então <code>ES6</code> é uma boa escolha.\nVocê pode definir um alvo (target) mais baixo se o deploy do seu código for feito em ambientes antigos, ou um alvo mais alto se o seu código é garantido de rodar em ambientes mais novos.</p>\n<p>A configuração <code>target</code> altera quais funcionalidades JS serão niveladas para baixo e quais ficarão inalteradas.\nPor exemplo, a arrow function <code>() => this</code> será transformada na expressão <code>function</code> equivalente se o <code>target</code> for ES5 ou mais baixo.</p>\n<p>Alterando o <code>target</code> também alterará o valor da <a href=\"#lib\"><code>lib</code></a>.\nVocê pode “misturar e combinar” as configurações <code>target</code> e <code>lib</code> da forma que quiser, mas você pode definir apenas o <code>target</code>, por conveniência.</p>\n<p>Se você está trabalhando apenas com Node.js, esses são os <code>target</code>s recomendados para essas versões do Node:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Supported Target</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>Eles são baseados no banco de dados de suporte do <a href=\"https://node.green\">node.green</a>.</p>\n<p>O valor especial <code>ESNext</code> se refere a versão mais alta que a sua versão do TypeScript suporta.\nEssa configuração deve ser utilizada com precaução, pois não significa a mesma coisa entre diferentes versões do TypeScript e pode tornar atualizações menos previsíveis.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>es5</code></p>\n</li>\n<li><span>Allowed:</span><p><code>ES3</code> (default),<br/><code>ES5</code>,<br/><code>ES6</code>/<code>ES2015</code> (synonomous),<br/><code>ES7</code>/<code>ES2016</code>,<br/><code>ES2017</code>,<br/><code>ES2018</code>,<br/><code>ES2019</code>,<br/><code>ES2020</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> Arquivo de informações da build do TS - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Essa configuração possibilita a você especificar um arquivo para armazenar informações incrementais de compilação como parte de projetos compostos que habilitam\nbuilds rápidas de grandes bases de código TypeScript. Você pode ler mais sobre projetos compostos <a href=\"/docs/handbook/project-references.html\">nesse guia</a>.</p>\n<p>Essa opção oferece uma forma de configurar o local onde o TypeScript se mantém informado sobre os arquivos que armazena no disco para\nindicar o estado de build de um projeto — por padrão, eles estão na mesma pasta dos seus JavaScripts emitidos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Strict_Type_Checking_Options_6173' ><a href='#Strict_Type_Checking_Options_6173' name='Strict_Type_Checking_Options_6173' aria-label=\"Link to the section Strict Checks\" aria-labelledby='Strict_Type_Checking_Options_6173'>#</a>Strict Checks</h2>\n<p>We recommend using the <a href=\"#strict\">compiler option <code>strict</code></a> to opt-in to every possible improvement as they are built.</p>\n<p>TypeScript supports a wide spectrum of JavaScript patterns and defaults to allowing for quite a lot of flexibility in accommodating these styles.\nOften the safety and potential scalability of a codebase can be at odds with some of these techniques.</p>\n<p>Because of the variety of supported JavaScript, upgrading to a new version of TypeScript can uncover two types of errors:</p>\n<ul>\n<li>Errors which already exist in your codebase, which TypeScript has uncovered because the language has refined its understanding of JavaScript.</li>\n<li>A new suite of errors which tackle a new problem domain.</li>\n</ul>\n<p>TypeScript will usually add a compiler flag for the latter set of errors, and by default these are not enabled.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Sempre Estrito - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Garante que seus arquivos sejam analisados no modo estrito do ECMAScript e emitam “use strict” para cada arquivo fonte.</p>\n<p>O modo <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">estrito do ECMAScript</a> foi introduzido no ES5 e fornece ajustes de comportamento para o runtime do engine JavaScript para melhorar o desempenho e faz um conjunto de erros serem lançados em vez de ignorá-los silenciosamente.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> Sem 'Any' Implícito - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Em alguns casos, onde nenhuma anotação de tipo está presente, o TypeScript retornará o tipo <code>any</code> para uma variável, quando não puder inferir o tipo.</p>\n<p>Isto pode fazer com que alguns erros sejam omitidos, por exemplo:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(s: any): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Nenhum erro?</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='any'>subtr</data-lsp>(</span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">));</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\"><data-lsp lsp='function fn(s: any): void'>fn</data-lsp>(</span><span style=\"color: #09835A\">42</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0kpkAFJQJSgBvWqFAhQAOWqQAFg3ihqAJ0XQA-MNDp2laMmoA6ZNADmPfZQYAjLIq4BmXrwDctAL71uAFgBMzoA'>Try</a></div></pre>\n<p>Ativando <code>noImplicitAny</code> no entanto, o TypeScript irá emitir um erro sempre que inferir <code>any</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(s: any): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) s: any'>s</data-lsp></data-err></span><span style=\"color: #000000\">) {</span>\n<span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='any'>subtr</data-lsp>(</span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">));</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQAzAVwDsBjAFwEs5jR9iAKRASlAG9dRRSbE4AbSADp+cAOZMhiQgCNy0BgGZmzANy4AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> Sem 'This' Implícito - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Emite erro nas expressões ‘this’ com tipo ‘any’ implícito.</p>\n<p>Por exemplo, a classe abaixo retorna uma função que tenta acessar <code>this.largura</code> e <code>this.area</code> – mas o contexto para <code>this</code> dentro da função dentro de <code>funcaoObterArea</code> não é a instância de <code>Retangulo</code>.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Retangulo'>Retangulo</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Retangulo.largura: number'>largura</data-lsp></span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Retangulo.altura: number'>altura</data-lsp></span><span style=\"color: #000000\">: number;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) largura: number'>largura</data-lsp></span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) altura: number'>altura</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Retangulo.largura: number'>largura</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) largura: number'>largura</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Retangulo.altura: number'>altura</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) altura: number'>altura</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Retangulo.funcaoObterArea(): () => number'>funcaoObterArea</data-lsp>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>largura</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>altura</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span style=\"color: #000000\">    };</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAMYA2AhooqAEqQAuJAdgOYCuRcoA3nqKKdC9BKp6zALYAjGAG5uoEkRrNBwsZOgzZBOPUQ1ozAjQQAKPgKGgREmABo5CpRatqAlJ1k8aACwCWiAHRmjqAAvLwk-I4yPJ6+AfKKgqH2iSTRoAC+eLIAZsz0BCRwAPLiNDAAgtCQJMZuXDGg1Yn0oHkFND7aoHXujTzNSq3efoER5qAAVKAj8Q6C6TwZ6VkZQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Modo estrito - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A opção <code>strict</code> permite uma ampla gama de comportamento de verificação de tipo que resulta em melhores garantias de correção do programa.\nAtivar isso equivale a ativar todas as opções da <em>família do modo restrito</em>, que são descritas abaixo.\nVocê pode desativar as verificações de família de modo restrito individualmente conforme necessário.</p>\n<p>Versões futuras do TypeScript podem introduzir verificação rigorosas adicionais dentro desta opção, portanto, as atualizações do TypeScript podem resultar em novos erros de tipo em seu programa.\nQuando apropriado e possível, uma opção correspondente será adicionado para desativar esse comportamento.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a>, <a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a>, <a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Bind Call Apply Restritos - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando definido, o TypeScript verificará se os métodos integrados das funções <code>call</code>, <code>bind</code> e <code>apply</code> são invocados com os argumentos corretos para a função subjacente:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Com strictBindCallApply ativado</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(x: string): number'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='function parseInt(s: string, radix?: number | undefined): number'>parseInt</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n1: number'>n1</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) CallableFunction.call&amp;lt;undefined, [string], number>(this: (this: undefined, args_0: string) => number, thisArg: undefined, args_0: string): number'>call</data-lsp>(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"10\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n2: number'>n2</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) CallableFunction.call&amp;lt;undefined, [x: string], number>(this: (this: undefined, x: string) => number, thisArg: undefined, x: string): number'>call</data-lsp>(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\"><data-err>false</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'boolean' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'boolean' is not assignable to parameter of type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcocArgKYBQIEDssA9rJDQEwBmACwBWJizDZOAW1AwEyNFjyFS5CqFzR4AN1yZOTAGZ10yeJ3Sgj6ABQAPGvIwBzAJSgA3k1ChYDaDpYKxJcHgYASXRoBzcAbiYAX3FESxhQdABGUABea3QAOkQCfFtTTAYjDAZMABpQACJMgAYG+JS06Ay+XPyikrKsSuq66wJIBnigA'>Try</a></div></pre>\n<p>Caso contrário, essas funções aceitarão qualquer argumento e retornarão <code>any</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Com strictBindCallApply desativado</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(x: string): number'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> <data-lsp lsp='function parseInt(s: string, radix?: number | undefined): number'>parseInt</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Nota: Sem erro; tipo do retorno é &apos;any&apos;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n: any'>n</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Function.call(this: Function, thisArg: any, ...argArray: any[]): any'>call</data-lsp>(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcoAZgZAKYBQzIo2A9gLagwLI0WPIVLkKoTI0i5o8AG65MnZrQCu6ZPE7o66ABQAPGvwwBzAJSgA3s1ChYjaGti6SuWEwCS6aEYsA3MwAvqzsAHKc0Lg0AMqMvIywsJwBoHIknJJZjtCcrlkAl6AA5LjoFCXMiDowoLoAvHoAdIgE+PoaUrQYjJgANHQMjIFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Tipo de Funções Restritos - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando ativado, esta opção faz com que os parâmetros das funções sejam verificados mais corretamente.</p>\n<p>Aqui está um exemplo básico com <code>strictFunctionTypes</code> desativado:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp>());</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> = (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">: string | number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void;</span>\n\n<span style=\"color: #008000\">// Atribuição não segura</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// Chamada não segura - vai quebrar</span>\n<span style=\"color: #000000\"><data-lsp lsp='let func: (ns: string | number) => void'>func</data-lsp>(</span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoACCEUlo8ADnAMc4ZcP5pMJosLTMStA07FThQsIx8cmp7JlcPh3OABa0CbTNtKMjTJPToAC0DbTwoACOaKRJ07Cs7NwAjAAM3iAA'>Try</a></div></pre>\n<p>Com <code>strictFunctionTypes</code> ativado, o erro é detectado corretamente:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Olá, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp>());</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type StringOuNumeroFn = (ns: string | number) => void'>StringOuNumeroFn</data-lsp> = (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">: string | number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void;</span>\n\n<span style=\"color: #008000\">// Atribuição não segura é prevenida</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let func: StringOuNumeroFn'>func</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type StringOuNumeroFn = (ns: string | number) => void'>StringOuNumeroFn</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOuNumeroFn'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOuNumeroFn'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQB5cQEOANKAWgA1KEZSycADJwA7jADCAQ0SR63bgG4cAXxw4yATwAOkUADKbBycSgQAcgQAtjBwAGI0ALyg9EQooKzsXKAAPqBE0QBGMLyJAHygAG5wFAAmLjggoACCwYUEFADnAMdw+b0ZkJwE0NagAJegPtCQlZBEddY4kmS0xCSoQVmhEdGxCaDJdE5AA'>Try</a></div></pre>\n<p>Durante o desenvolvimento desse recurso, descobrimos um grande número de hierarquias de classes profundamente não seguras, incluindo algumas no DOM.\nPor causa disso, a configuração apenas se aplica a funções escritas na sintaxe <em>function</em>, não àquelas na sintaxe <em>method</em>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type PareceUmMetodo = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>PareceUmMetodo</data-lsp> = {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | number'>x</data-lsp></span><span style=\"color: #000000\">: string | number): void;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Olá, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp>());</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Por fim, uma atribuição insegura, porém não detectada.</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const m: PareceUmMetodo'>m</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type PareceUmMetodo = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>PareceUmMetodo</data-lsp> </span><span style=\"color: #000000\">= {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>: </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const m: PareceUmMetodo'>m</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>(</span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACghgJwgYwgVQLYFkLAPYAmeUAvFAN4BQUUAZgK4B2yAFAB4BcUAzsAgJaMA5lAA+URvQwAjCAgCUXAG55+BANyUAvpsoNmwfnkZ1G7LrwHD5FalGTHueADYQAdM7xCWAIgDyzgCHADRQPlAA1FBsbvgAMngA7nIAwnDcECzy8ppalJQA9AWweAh0-BihUnBQcHz80vT8AOcAx8SCGUL0CHChYKUAlxgS7VAEuCjAcARwbpQOjLxQGFzwSKiYOPhEpLY0+shctIzB2poYbocsAIwADDlAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp> </span><span style=\"color: #000000\">= [</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">12</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">32</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} (+1 overload)'>find</data-lsp>((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) name: string'>name</data-lsp> === </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA'>Try</a></div></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp> </span><span style=\"color: #000000\">= [</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">12</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">32</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined (+1 overload)'>find</data-lsp>((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) name: string'>name</data-lsp> === </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM0AoECAFwENoBzSM1AUQGU0AGNkscRM6ASwDGZAHIBXADbiAwgAtIAgNaIiAE3niqkUALgA7HqHFxqtFQEldAVUQxdFALaRUPfruoBuIkR36yoUTZIoAC8oADaRKCgAN6gdo6oAEQA8gBGAJ6JADSgFLSoAIxooAC+WZExcQ5OoIkAEpAwFNm5+aCEpeUAup7eegZGJpDmVoEh-oGIAHQAZny6KgAUi6IAlCEAfP5T8VrB+4bGphbWttWrnj6IcOKQU4OLg8ejMFN5kBdAA'>Try</a></div></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// When strictNullChecks: true</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> Array = {</span>\n<span style=\"color: #000000\">  find(predicate: (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\">index</span><span style=\"color: #000000\">: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> boolean): S | undefined;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// When strictNullChecks: false the undefined is removed from the type system,</span>\n<span style=\"color: #008000\">// allowing you to write code which assumes it always found a result</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> Array = {</span>\n<span style=\"color: #000000\">  find(predicate: (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\">index</span><span style=\"color: #000000\">: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> boolean): S;</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Inicialização restrita de propriedade - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando definido como <code>true</code>, o TypeScript gerará um erro quando uma propriedade de classe for declarada, mas não definida no construtor.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Conta'>Conta</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Conta.nome: string'>nome</data-lsp></span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Conta.tipo: string'>tipo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"usuario\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(property) Conta.email: string'>email</data-lsp></data-err></span><span style=\"color: #000000\">: string;</span>\n<span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Conta.endereco: string | undefined'>endereco</data-lsp></span><span style=\"color: #000000\">: string | undefined;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) nome: string'>nome</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Conta.nome: string'>nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) nome: string'>nome</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Note que this.email não foi atribuído</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAMJwB2ALiaAN56ig1wC2kqid0ASxoBzANytQdAQAc4oALygARAFdEKkoLhLxEyJxICivfkLF6aAExiQCcE4JGgAPqBVXIAMyGRLutnY0fNAqBHQIABQc3A5mAJTMEmx0ABYCiAB00ZAK7FyQ4mxsIKAAcnB0OQCOKjmp6Rn6hkTsAMdynnACoCSmAEYqALeWcBIAvnhjQA'>Try</a></div></pre>\n<p>No caso acima:</p>\n<ul>\n<li><code>this.nome</code> é atribuído especificamente.</li>\n<li><code>this.tipo</code> é atribuído por padrão.</li>\n<li><code>this.email</code> não é atribuído e gera um erro.</li>\n<li><code>this.endereco</code> é declarado como possível <code>undefined</code>, o que significa que não precisa ser atribuído.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Module_Resolution_Options_6174' ><a href='#Module_Resolution_Options_6174' name='Module_Resolution_Options_6174' aria-label=\"Link to the section Module Resolution\" aria-labelledby='Module_Resolution_Options_6174'>#</a>Module Resolution</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Permitir Imports Sintéticos Padrão - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando está ativo, <code>allowSyntheticDefaultImports</code> permite que você escreva um import como:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Ao invés de:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Quando o módulo <strong>não</strong> especifica um export padrão.</p>\n<p>Isso não afeta o JavaScript que será emitido no TypeScript, somente a checagem de tipos\nEssa opção traz o comportamento do TypeScript in-line com o Babel, onde código extra é emitido no final para que o uso de um export padrão seja mais ergonômico.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === \"system\" or esModuleInterop</p>\n</li>\n<li><span>Related:</span><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Permitir Acesso Global UMD - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando setado para <code>true</code>, a flag <code>allowUmdGlobalAccess</code> deixa que você acesse todos os exports UMD como globais de dentro dos arquivos de módulo. Um arquivo de módulo é um arquivo que tem imports e/ou exports. Sem essa configuração, usando um export de dentro de um módulo UMD vai pedir uma declaração de import.</p>\n<p>Um caso de exemplo para essa flag seria um projeto web onde você sabe que uma biblioteca em particular (como o jQuery ou Lodash) vai estar sempre disponível em runtime, mas você não pode acessá-la com um import.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> URL Base - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite definir um diretório base para resolver nomes de módulo não absolutos.</p>\n<p>Você pode definir uma pasta raiz na qual pode fazer a resolução absoluta do arquivo. Por exemplo.</p>\n<pre><code>URLBase\n├── ex.ts\n├── ola\n│   └── mundo.ts\n└── tsconfig.json\n</code></pre>\n<p>Com <code>\"baseUrl\": \"./\"</code> no projeto, o TypeScript vai procurar por arquivos começando na mesma pasta do <code>tsconfig.json</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">olaMundo</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"ola/mundo\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">olaMundo</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>Se você estiver cansado de importações sempre parecidas com <code>\"../\"</code> ou <code>\"./\"</code>, ou precisando\nalterá-las à medida que move arquivos, essa é uma ótima maneira de simplificar isso.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> Interoperabilidade de Módulo ES - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite interoperabilidade de emição entre Módulos CommonJS e ES através da criação de namespaces para todas as importações.</p>\n<p>TypeScript adere ao padrão EcmaScript para módulos, o que significa que um arquivo com exportações teria que especificamente incluir uma exportação <code>default</code> para dar suporte à sintaxes como <code>import React from \"react\"</code>.\nEste padrão de exportação é raro em módulos para CommonJS. Por exemplo, sem <code>esModuleInterop</code> como true:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: utilitarios.js</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obterTamanhoDaString: (str: any) => any'>obterTamanhoDaString</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) str: any'>str</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) str: any'>str</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='any'>length</data-lsp>;</span>\n\n<span style=\"color: #000000\"><data-lsp lsp='module export=&amp;#13;(property) export=: {&amp;#13;    obterTamanhoDaString: (str: any) => any;&amp;#13;}'>module</data-lsp>.<data-lsp lsp='module export=&amp;#13;(property) export=: {&amp;#13;    obterTamanhoDaString: (str: any) => any;&amp;#13;}'>exports</data-lsp> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) obterTamanhoDaString: (str: any) => any'>obterTamanhoDaString</data-lsp></span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import utils'>utils</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./utilitarios\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const count: any'>count</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import utils'>utils</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) obterTamanhoDaString: (str: any) => any'>obterTamanhoDaString</data-lsp>(</span><span style=\"color: #A31515\">\"Checagem JS\"</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEECGAbHB7Ad1QzHFwMIGUBPAOwBc4GBLSAEVgDMsBXHBgEkAtgAd8AJwbpM4Lixyw6WYbABcoXqxwsGWCS3woAdACsZZOvhGidkXQEE6NDTxwpYaSPjooGofAAjBlgJABUVLDpofHYsKgYDOgBzUABeUAAKPwkASnSAPlAc40UUpgBuNDRhfAATflhjWAAPcSkUdNAAbzRQAODQiOEomLiEpOSAGjQAXyrSCHkylXVQFjo61uNpNBYxSX8tBU6uCXxhUAAiY2BjnT0DIyuF719-b15GLvuTIJDwpForF4okNslMlcAMJwSBYZKwS5IKhXXIVIA'>Try</a></div></pre>\n<p>Isto não vai funcionar porque não existe um objeto <code>default</code> o qual você pode importar. Apesar de parecer que deveria.\nPor conveniência, transpiladores como Babel vão criar um default automaticamente se não encontrarem um existente. Fazendo com que o módulo se pareça um pouco mais com isto:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: utilitarios.js</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> obterTamanhoDaString = (</span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #000000\">.length;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">todasAsFuncoes</span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">obterTamanhoDaString</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #000000\">module.exports = </span><span style=\"color: #1A1A1A\">todasAsFuncoes</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Ativando esta flag no compilador, a opção <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a> também será habilitada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Resolução de Módulos - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica a estratégia de resolução de módulos: <code>node</code> (Node.js) ou <code>classic</code> (utilizada no TypeScript antes da versão 1.6).\nVocê provavelmente não vai precisar utilizar <code>classic</code> em código mais recente.</p>\n<p>Veja a página de referência em: <a href=\"/docs/handbook/module-resolution.html\">Resolução de Módulos</a></p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === <code>AMD</code>, <code>UMD</code>, <code>System</code> or <code>ES6</code> then <code>Classic</code><br/><br/>Otherwise <code>Node</code></p>\n</li>\n<li><span>Related:</span><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Caminhos - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Uma série de entradas que remapeiam as importações para locais de pesquisa relativos à <code>baseUrl</code>, há uma cobertura mais abrangente de <code>paths</code> no <a href=\"/docs/handbook/module-resolution.html#path-mapping\">manual</a>.</p>\n<p><code>paths</code> permite que você declare como o TypeScript deve resolver importações nos seus <code>requires</code> e <code>imports</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"baseUrl\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// isto deve ser especificado se \"paths\" está especificado.</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node_modules/jquery/dist/jquery\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// este mapeamento é relativo à \"baseUrl\"</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Isto permitiria que você escreva <code>import \"jquery\"</code>, e obtenha toda a digitação correta localmente.</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"baseUrl\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"config/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_config/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"environment/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"environments/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"shared/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_shared/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"helpers/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"helpers/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"tests/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"tests/*\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">    },</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Neste caso, você pode infomar o resolvedor de arquivos do TypeScript para dar suporte à vários prefixos personalizados para encontrar código.\nEste padrão pode ser usado para evitar caminhos relativos longos no seu código base.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preservar Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Esta opção serve para refletir a mesma flag do Node.js; que não resolve o caminho real de links simbólicos.</p>\n<p>Esta flag também exibe o comportamento oposto ao da opção <code>resolve.symlinks</code> do Webpack (ou seja, definir <code>preserveSymlinks</code> do TypeScript para true é o mesmo que definir <code>resolve.symlinks</code> do Webpack para false, e vice-versa).</p>\n<p>Com esta opção habilitada, as referências para módulos e pacotes (ex. diretivas <code>import</code> e <code>/// &#x3C;reference type=\"...\" /></code>) são todas resolvidas em relação ao local do symlink em si, em vez de relativas ao caminho que o symlink resolve.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Diretórios Raiz - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Usando <code>rootDirs</code>, você pode informar ao compilador que existem vários diretórios raiz agindo como um único diretório raiz “virtual”.\nIsso faz com que o compilador resolva importações relativas de módulos como se estes diretórios fossem um único diretório raiz.</p>\n<p>Por exemplo:</p>\n<pre><code> src\n └── views\n     └── view1.ts (pode importar \"./template1\", \"./view2`)\n     └── view2.ts (pode importar \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (pode importar \"./view1\", \"./view2\")\n</code></pre>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"rootDirs\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Esta propriedade não altera como TypeScript emite JavaScript, mas apenas emula a suposição de que\nos arquivos JavaScript poderão trabalhar através desses caminhos relativos em tempo de execução.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Raizes de Tipo - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Por padrão todos pacotes <code>@types</code> <em>visíveis</em> são incluídos na sua compilação.\nPacotes em <code>node_modules/@types</code> de qualquer diretório adjacente são considerados <em>visíveis</em>.\nPor exemplo, isso significa pacotes dentro de <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, e assim por diante.</p>\n<p>Se <code>typeRoots</code> está especificado, <em>somente</em> pacotes dentro de <code>typeRoots</code> serão incluídos. Por exemplo:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typeRoots\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./typings\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./vendor/types\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Este arquivo de configuração vai incluir <em>todos</em> os pacotes definidos em <code>./typings</code> e <code>./vendor/types</code> , e nenhum pacote de <code>./node_modules/@types</code>.\nTodo os caminhos são relativos ao arquivo <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Tipos - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Por padrão todos pacotes <code>@types</code> <em>visíveis</em> são incluídos na sua compilação.\nPacotes em <code>node_modules/@types</code> de qualquer diretório adjacente são considerados <em>visíveis</em>.\nPor exemplo, isso significa pacotes dentro de <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, e assim por diante.</p>\n<p>Se <code>types</code> está especificado, somente pacotes listados serão incluídos no escopo global. Por exemplo:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Este arquivo <code>tsconfig.json</code> <em>somente</em> irá incluir <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> e <code>./node_modules/@types/express</code>.\nOutros pacotes dentro de <code>node_modules/@types/*</code> não serão incluídos.</p>\n<h3 id=\"o-que-isto-reflete\" style=\"position:relative;\"><a href=\"#o-que-isto-reflete\" aria-label=\"o que isto reflete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O que isto reflete?</h3>\n<p>Esta opção não altera como <code>@types/*</code> são incluídos no código da sua aplicação, por exemplo se você tivesse o <code>compilerOptions</code> acima, com o seguinte código:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">moment</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"moment\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">moment().format(</span><span style=\"color: #A31515\">\"MMMM Do YYYY, h:mm:ss a\"</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>O import <code>moment</code> estaria completamente tipado.</p>\n<p>Quando você tem esta opção definida, ao não incluir um módulo no vetor de <code>types</code>, ela:</p>\n<ul>\n<li>Não vai adicionar globais ao seu projeto (p. ex. <code>process</code> no node, ou <code>expect</code> no Jest)</li>\n<li>Não vai fazer com que exports apareçam como recomendações de auto-import</li>\n</ul>\n<p>Esta opção difere de <a href=\"#typeRoots\"><code>typeRoots</code></a>, pois serve para especificar somente os tipos exatos a serem incluídos, enquanto <a href=\"#typeRoots\"><code>typeRoots</code></a> permite que você defina diretórios específicos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Source_Map_Options_6175' ><a href='#Source_Map_Options_6175' name='Source_Map_Options_6175' aria-label=\"Link to the section Source Maps\" aria-labelledby='Source_Map_Options_6175'>#</a>Source Maps</h2>\n<p>In order to provide rich debugging tools and crash reports which make sense to developers, TypeScript supports\nemitting additional files which conform to the JavaScript Source Map standards.</p>\n<p>These are emitted as <code>.map</code> files which live alongside the file they represent.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, instead of writing out a <code>.js.map</code> file to provide source maps, TypeScript will embed the source map content in the <code>.js</code> files.\nAlthough this results in larger JS files, it can be convenient in some scenarios.\nFor example, you might want to debug JS files on a webserver that doesn’t allow <code>.map</code> files to be served.</p>\n<p>Mutually exclusive with <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>Converts to this JavaScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Then enable building it with <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUCBAM4AWKA7gKIC2kALsVitOc6JQrLCgDqKDLAAmoALygARJUgyA3Gw7kUsBADoBAcwAUvfkJHiAlIqA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will include the original content of the <code>.ts</code> file as an embedded string in the source map.\nThis is often useful in the same cases as <code>inlineSourceMap</code>.</p>\n<p>Requires either <code>sourceMap</code> or <code>inlineSourceMap</code> to be set.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const helloWorld: &amp;quot;hi&amp;quot;'>helloWorld</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const helloWorld: &amp;quot;hi&amp;quot;'>helloWorld</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgUwDZJAdRAJyQExgXhgCI4BLIgbgChRIQkEA6VAcwApEV0tcBKCoA'>Try</a></div></pre>\n<p>By default converts to this JavaScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Then enable building it with <code>inlineSources</code> and <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.\nNote that the end is different from the example in <a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a> because the source-map now contains the original source code also.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQZwFAgQzzTLrYICyAhgA6Fji4AWKA7gKIC2kALviwpouPqBYJYsFAHUUGWABNQAXlAAiFpHUBuQcNwpYCAHTSA5gAoJU2fKUBKHUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"mapRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of relative source locations.\nThis string is treated verbatim inside the source-map where you can use a path or a URL:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Additional_Checks_6176' ><a href='#Additional_Checks_6176' name='Additional_Checks_6176' aria-label=\"Link to the section Checagens do Linter\" aria-labelledby='Additional_Checks_6176'>#</a>Checagens do Linter</h2>\n<p>Uma coleção de checagens extras, que cruzam um pouco os limites do compilador vs linter. Você pode preferir usar uma ferramenta como <a href=\"https://github.com/typescript-eslint/typescript-eslint#typescript-eslint\">eslint</a> ao invés dessas opções se você estiver procurando por regras mais profundas.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statements.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code> or <code>return</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: number'>a</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">6</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: number'>a</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">:</span>\n<span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">break</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsDEEMA2iAuALATtArgczQMLwDOApsQJKQDKA7gJYoDGaAUCBKRlhsQFygA7AAYATAE5WTaJGIpQ8AZGwBbAEZdQAXlAA2ANytWxBszSgAFPACUoAN6tQoJiVKhhfR0+czi0RKQAdIjQuBYARKQAbqSQ4daGTi5koACMnt4+sv5BIWHh0AAmhfGJ3moYpPAA1oYAvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> Sem Retornos Implícitos - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando habilitado, o TypeScript verificará todos os caminhos de código em uma função para garantir que eles retornem um valor.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function procurarFabricanteDeFonesDeOuvido(cor: &amp;quot;azul&amp;quot; | &amp;quot;preto&amp;quot;): string'>procurarFabricanteDeFonesDeOuvido</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) cor: &amp;quot;azul&amp;quot; | &amp;quot;preto&amp;quot;'>cor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"azul\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"preto\"</span><span style=\"color: #000000\"><data-err>): string {</data-err></span>\n<span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) cor: &amp;quot;azul&amp;quot; | &amp;quot;preto&amp;quot;'>cor</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"azul\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"beats\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"bose\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsX0bWgFABmArgHYDGALgJZzmgAO8lp0AhtAGIcBG0WpQ7lqkACKRuDSIkkB5UgDdaAEzgAKSglQAiDgC9SAG12gAPqF0tI1OLoCUqRNUHkA5qADehUKFrEoFoIoAC84VaGJo7evn6g0LbsjLp8kBzUiLoA3HEAvqCQxoiQsfFWfHAlOfmEeUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> Sem Variáveis Locais Não Utilizadas - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Reporta erros em variáveis locais não utilizadas.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const criaTeclado: (modeloID: number) => {&amp;#13;    tipo: string;&amp;#13;    modeloID: number;&amp;#13;}'>criaTeclado</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) modeloID: number'>modeloID</data-lsp></span><span style=\"color: #000000\">: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='const modeloPadraoID: 23'>modeloPadraoID</data-lsp> </data-err></span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">23</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>'modeloPadraoID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modeloPadraoID' is declared but its value is never read.</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> { <data-lsp lsp='(property) tipo: string'>tipo</data-lsp>: </span><span style=\"color: #A31515\">\"teclado\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) modeloID: number'>modeloID</data-lsp></span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">};</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBsAjAMwtHbSRIAuo25AJa4AKimz5caaKAC8oABQBbaGhT5oASQAi9REoBGFAJRyAfKADeRUPy69QKtRoAKU8ri3a5oAEwsAbhtQchQeBHJIK1AeQQAHaHoAIh5xSWkkgBpHVXUvUABfIKKgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> Sem Parâmetros Não Utilizados - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Reporta erros em parâmetros não utilizados em funções.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const criaTecladoPadrao: (modeloID: number) => {&amp;#13;    tipo: string;&amp;#13;    modeloID: number;&amp;#13;}'>criaTecladoPadrao</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) modeloID: number'>modeloID</data-lsp></data-err></span><span style=\"color: #000000\">: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span class=\"error\"><span>'modeloID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modeloID' is declared but its value is never read.</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const modeloPadraoID: 23'>modeloPadraoID</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">23</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> { <data-lsp lsp='(property) tipo: string'>tipo</data-lsp>: </span><span style=\"color: #A31515\">\"teclado\"</span><span style=\"color: #000000\">, <data-lsp lsp='(property) modeloID: number'>modeloID</data-lsp>: </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const modeloPadraoID: 23'>modeloPadraoID</data-lsp></span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">};</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATACgQwE5YLYoAuKOSAUCBKTtGQFygBsAjAMxvkDG0kSRoLjgCWWACoouAGyxpo2NHmigAvKAAU+aGhRToASQAijRPgBGpAJSqAfKADe5UIN79QWnXoVKjq0ACY2AG4nUBxiBBxIB1AiYQAHaEYAIhJpWWhkgBp3bV0DY1zPeVkfQ1AAXxCqoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Experimental_Options_6177' ><a href='#Experimental_Options_6177' name='Experimental_Options_6177' aria-label=\"Link to the section Experimental\" aria-labelledby='Experimental_Options_6177'>#</a>Experimental</h2>\n<p>TypeScript strives to only include features which are confirmed to be added into the JavaScript language.</p>\n<p>There have been cases where a feature is compelling enough to be an exception to that rule, and these live as experimental compiler flags.\nIt is possible that a version of these features may be different when/if they are added to the JavaScript language, and thus are considered risky.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Emitir Metadados de Decorators - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ativa o suporte experimental para a emissão de metadados de tipo para decorators que funcionam com o módulo <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>Por exemplo, aqui está o JavaScript</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function LogarMetodo(alvo: any, chaveDaPropriedade: string | symbol, descritor: PropertyDescriptor): void'>LogarMetodo</data-lsp>(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) alvo: any'>alvo</data-lsp></span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) chaveDaPropriedade: string | symbol'>chaveDaPropriedade</data-lsp></span><span style=\"color: #000000\">: string | symbol,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) descritor: PropertyDescriptor'>descritor</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='interface PropertyDescriptor'>PropertyDescriptor</data-lsp></span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) alvo: any'>alvo</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) chaveDaPropriedade: string | symbol'>chaveDaPropriedade</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) descritor: PropertyDescriptor'>descritor</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Demo'>Demo</data-lsp> {</span>\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\"><data-lsp lsp='function LogarMetodo(alvo: any, chaveDaPropriedade: string | symbol, descritor: PropertyDescriptor): void'>LogarMetodo</data-lsp></span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> <data-lsp lsp='(method) Demo.foo(bar: number): void'>foo</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) bar: number'>bar</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// não faz nada</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const demo: Demo'>demo</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Demo(): Demo'>Demo</data-lsp>();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQAZgK7pGZInqgAyJA5tggFlIlACYkAFDVCg8ANxIAuGegCeAGimgiAC2yzI+bAAUEJWMkgjsIyEqqZk6HqAA+oKipQAjErg3SbKiJkSgQlEzNETBVCIORYUJoASlAAb01SdCpfSAA6XF5xORIkgG4M9mzcPIKecR09A2NTcyRLa0gyiqyc-MLA4KRQroBfGhoiXGwqKlBCFBI0zXBuPkFhEjFNWAYvXCQiUDoSCS9+JXQGb0QU9OlpEFB0AGPFumwALyfrbE0xsYmlUwoBsC1AAF4npAAO5zSALcRlIA'>Try</a></div></pre>\n<p>Com <code>emitDecoratorMetadata</code> não ativo (padrão):</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__decorate </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">c </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.length, </span><span style=\"color: #1A1A1A\">r </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\"> = Object.getOwnPropertyDescriptor(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Reflect === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Reflect.</span><span style=\"color: #1A1A1A\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> = Reflect.decorate(</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">.length - </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> ? d(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> ? d(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">) : d(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> && Object.defineProperty(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> LogarMetodo(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">chaveDaPropriedade</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">chaveDaPropriedade</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Demo {</span>\n<span style=\"color: #000000\">    foo(</span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">// não faz nada</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\">__decorate([</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">LogarMetodo</span>\n<span style=\"color: #000000\">], Demo.prototype, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">demo </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Demo();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmNAZgK7oimJCXSgAMiQDm2BAFlIlACYkAFDVCg8ANxIAuLegCeAGg2gijbNsj5sABQQlYySEuxLIBqpmTopoAA+oFRGKABGJLhmmp5URMiUCAaOzoiYRoTxyLBJNACUoADe5qToVFGQAHS40qo6JPkA3KWiFbjVtVKqlta2Dk4uSG4ekM2t5ZU1dXEJXGTjAL40NES42FRUoIQoJMXm4JIy8ookKuawfOG4SESgPCRq4bIG6HwRiIUlmpr06ADHex42AAXqB0B5sOZlstVm1MKBPLtQABecGQFjbSC7VTNIA'>Try</a></div></pre>\n<p>Com <code>emitDecoratorMetadata</code> em true:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__decorate </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">c </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.length, </span><span style=\"color: #1A1A1A\">r </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\"> = Object.getOwnPropertyDescriptor(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Reflect === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Reflect.</span><span style=\"color: #1A1A1A\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> = Reflect.decorate(</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">.length - </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> ? d(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> ? d(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">) : d(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\"> && Object.defineProperty(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__metadata </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__metadata</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Reflect === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Reflect.</span><span style=\"color: #1A1A1A\">metadata</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> Reflect.metadata(</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> LogarMetodo(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">chaveDaPropriedade</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">alvo</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">chaveDaPropriedade</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #1A1A1A\">descritor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Demo {</span>\n<span style=\"color: #000000\">    foo(</span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">// não faz nada</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\">__decorate([</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">LogarMetodo</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    __metadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, Function),</span>\n<span style=\"color: #000000\">    __metadata(</span><span style=\"color: #A31515\">\"design:paramtypes\"</span><span style=\"color: #000000\">, [Number]),</span>\n<span style=\"color: #000000\">    __metadata(</span><span style=\"color: #A31515\">\"design:returntype\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">], Demo.prototype, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">demo </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Demo();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmdYUnmhUuUoIAspBwATCthoAzAK7oimJCXSgAMiQDm2MRJKSSAChqhQeAG4kAXJfQBPADTnQRRtiuR82AAoIJLDIkNKSkPZUmMjoOqAAPqBUjigARiS4rhbhVETIIvYBQYiYjoS5yLAiNACUoADebqToVBmQAHS4uibWJDUA3E3qrbgdXTomHl4+-oHBSKHY4QNDLW2d3Tl5XGQrAL40NES42FRUoIQoJA1u4Np6BpTGbrAKqbhIRKByJKap+vZ0Ao0og6o0LBZ6OgAMfXOTYABeoHQS1kFgOByOw0woHCV1AAF5kZAWBdIFcTAMgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Decorators experimentais - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Habilita <a href=\"https://github.com/tc39/proposal-decorators\">suporte experimental a decorators</a>, o qual está em <em>stage 2</em> do processo de padronização do TC39.</p>\n<p>Decorators é uma funcionalidade da linguagem ainda não totalmente ratificada na especificação do JavaScript.\nIsso significa que a versão implementada no TypeScript pode diferir da implementação em JavaScript quando ela for definitivamente decidida pelo TC39.</p>\n<p>Você pode encontrar mais sobre o suporte a decorators no TypeScript <a href=\"/docs/handbook/decorators.html\">no guia</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Advanced_Options_6178' ><a href='#Advanced_Options_6178' name='Advanced_Options_6178' aria-label=\"Link to the section Avançado\" aria-labelledby='Advanced_Options_6178'>#</a>Avançado</h2>\n<p>Sinalizadores que ajudam na depuração.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Permitir Código Não Executado - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando:</p>\n<ul>\n<li><code>undefined</code> (padrão) dá sugestões como avisos para o editor</li>\n<li><code>true</code> todo o código não executável é ignorado</li>\n<li><code>false</code> exibe um erro de compilação quando código não executável é detectado</li>\n</ul>\n<p>Mude para false para desabilitar os avisos sobre código não executável.\nEstes avisos são somente sobre código que são provavelmente inalcançáveis e nunca serão executados por conta do uso da sintaxe do JavaScript como, por exemplo:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Com <code>\"allowUnreachableCode\": false</code>:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function fn(n: number): boolean'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMaBQIIBDAG2LgHcBVAO2kkIGMALQgI2MgGE4ATSVAGYlEkXAICu1BgBcAlnGqgB1ABTVU1cQFtWMAJSgA3rlChZA0GtAA+UAFYDx06brTx0RdOjjIAbhOgAL6gkMQiRgEukG4eSsJ+AYEBru6e3gmBQA'>Try</a></div></pre>\n<p>Isso não afeta os erros exibidos com base em código que <em>parece</em> ser inalcançável devido à análise de tipos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Permitir Labels Não Utilizadas - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Defina como false para desabilitar os avisos sobre labels não utilizadas.</p>\n<p>Labels são muito raras no JavaScript e, tipicamente, indicam uma tentativa de escrever um objeto literal:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function verificarIdade(idade: number): void'>verificarIdade</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) idade: number'>idade</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Esquecemos o &apos;return&apos;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) idade: number'>idade</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #09835A\">18</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-err>verificado</data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Unused label.</span><span class=\"code\">7028</span></span><span class=\"error-behind\">Unused label.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMAOAUCBAIYA2JcA7gKoB2AropACYAyRARpCSqAGamM8vOjQDGAFwCWcGqABuMSb0mii0AJJMiTSAApJWnanoBbTtACUoAN55QoQgFFEARzqRRkE3ESg4oAHJoSHE6aBoAu1AlUH1DSFAAPlAARhwrW3t7BWglFW04VHFodwBuKIBfPAqgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Assume que as alterações afetem apenas dependências diretas - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando essa opção está ativada, o TypeScript apenas verifica/reconstrói os arquivos que foram alterados, bem como os arquivos que os importam diretamente. Evitando assim a verificação/reconstrução de todos os arquivos que realmente podem ter sido afetados pelas alterações.</p>\n<p>Isso pode ser considerado uma implementação ‘rápida’ do algoritmo de observação, que pode reduzir drasticamente os tempos de reconstrução incremental às custas de ter que executar a compilação completa ocasionalmente para obter todas as mensagens de erro do compilador.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Nas versões anteriores do TypeScript, isso controlava qual codificação era usada ao ler arquivos de texto do disco.\nHoje, o TypeScript assume a codificação UTF-8, mas detectará corretamente as codificações UTF-16 (BE e LE) ou UTF-8 com <a href=\"https://pt.wikipedia.org/wiki/Marca_de_ordem_de_byte\">BOMs</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li>\n<li><span>Status:</span><p>Deprecated</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Diretório de declarações - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Oferece uma maneira de configurar o diretório raiz para onde os arquivos de declaração são emitidos.</p>\n<pre><code>exemplo\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>com este <code>tsconfig.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declarationDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tipos\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Colocaria o <code>d.ts</code> para o <code>index.ts</code> em uma pasta<code>tipos</code>:</p>\n<pre><code>exemplo\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── tipos\n    └── index.d.ts\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> n/a</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnósticos - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Usado para gerar informações de diagnóstico para depuração. Este comando é um subconjunto de <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a>, apenas com resultados voltados para o usuário e mais fáceis de interpretar.</p>\n<p>Se você tiver sido solicitado por um engenheiro do compilador do TypeScript para fornecer os resultados usando esse sinalizador em uma compilação, não há mal algum em usar <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> durante o processo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li>\n<li><span>Status:</span><p>Deprecated</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Desativar limite de tamanho - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Para evitar um possível problema de inchaço da memória ao trabalhar com projetos JavaScript muito grandes, há um limite superior para a quantidade de memória que o TypeScript alocará. Ativar este sinalizador removerá o limite.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Desabilitar Busca por Soluções - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ao trabalhar com <a href=\"/docs/handbook/project-reference.html\">projetos TypeScript compostos</a>, esta opção fornece uma maneira de declarar que você não deseja que um projeto seja incluído ao usar recursos como <em>encontrar todas as referências</em> ou <em>pular para definição</em> em um editor.</p>\n<p>Esse sinalizador é algo que você pode usar para aumentar a capacidade de resposta em grandes projetos compostos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Desabilitar Redirecionamento de Referências no Projeto de Origem - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ao trabalhar com <a href=\"/docs/handbook/project-reference.html\">projetos TypeScript compostos</a>, esta opção fornece uma maneira de voltar <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-edition-with-project-reference\">ao comportamento pré-3.7</a> em que os arquivos d.ts eram usados como limites entre os módulos.</p>\n<p>Na versão 3.7, a fonte da verdade são agora os arquivos TypeScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> Emitir BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controla se o TypeScript emitirá uma <a href=\"https://pt.wikipedia.org/wiki/Marca_de_ordem_de_byte\">BOM (byte order mark)</a> ao gravar arquivos de saída.\nAlguns runtimes exigem uma BOM para interpretar corretamente os arquivos JavaScript; outros exigem que ele não esteja presente.\nO valor padrão de <code>false</code> é geralmente melhor, a menos que você tenha um motivo para alterá-lo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Emitir Somente Declarações - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Só</em> emite arquivos <code>.d.ts</code>; não emite arquivos <code>.js</code>.</p>\n<p>Essa configuração é útil em dois casos:</p>\n<ul>\n<li>Você está usando um transpilador diferente do TypeScript para gerar seu JavaScript.</li>\n<li>\n<p>Você está usando o TypeScript para gerar apenas arquivos <code>d.ts</code> para seus consumidores.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Diagnóstico estendido - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n</li>\n</ul>\n<p>Você pode usar esta <em>flag</em> para descobrir em que o compilador TypeScript está utilizando o tempo de compilação.\nEsta é uma ferramenta utilizada para compreender as características da performance da sua base de código.</p>\n<p>Você pode aprender mais sobre como medir e compreender as informações retornadas por esta <em>flag</em> na <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">sessão de performance da wiki</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Manter a consistência nos nomes do arquivo - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript diferencia letras maiúsculas e minúsculas no arquivo que está sendo executado.\nIsso pode se tornar um problema se alguns desenvolvedores trabalharem com diferenciação de letras maiúsculas e minúsculas no arquivo, e outros não. Se um arquivo tentar importar <code>fileManager.ts</code> especificando <code>./FileManager.ts</code> em sistemas que não fazem a diferenciação de maiúsculas e minúsculas, vai encontrar o arquivo, porém, em sistemas que fazem essa diferenciação, o arquivo não será encontrado.</p>\n<p>Quando essa opção está definida, o TypeScript vai gerar um erro caso o programa tente incluir um arquivo com padrão diferente - de diferenciação maiúsculas e minúsculas - no sistema.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Gerar Perfil de CPU - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Essa opção permite que o TypeScript emita um perfil de CPU durante a depuração. O perfil de CPU pode oferecer informações sobre o porquê das suas compilações estarem lentas.</p>\n<p>Essa opção só pode ser utilizada no CLI pelo comando: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></code></div></pre>\n<p>Esse arquivo pode ser aberto em um navegador baseado no Chromium, como o Chrome ou Microsoft Edge na seção <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">de perfil de CPU</a>. Para saber mais sobre o desempenho dos compiladores, pode visitar a <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">wiki do TypeScript sobre performance</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> profile.cpuprofile</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Importações não utilizadas como valores - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Essa opção controla como o <code>import</code> funciona, são 3 opções diferentes:</p>\n<ul>\n<li><code>remove</code>: O comportamento padrão para descartar os <code>import</code> que apenas referenciam tipos.</li>\n<li><code>preserve</code>: Preserva todas as declarações <code>import</code> que os valores ou tipos nunca são usados. Isso pode permitir que importações/efeitos colaterais sejam mantidos.</li>\n<li><code>error</code>: Isso mantém todas as importações (as mesmas que a opção de preservar), mas apresentará um erro quando o valor da importação usada for apenas como tipo. Isto pode ser útil se você quiser garantir que nenhum valor vai ser acidentalmente importado, mas ainda vai manter os efeitos colaterais da importação explícitos.</li>\n</ul>\n<p>Essa opção funciona porque você pode usar <code>import type</code> para criar explicitamente uma regra <code>import</code> que nunca seja emitida em Javascript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>remove,<br/>preserve,<br/>error</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Changes the function called in <code>.js</code> files when compiling JSX Elements.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><p>Any identifier or dotted identifier</p>\n</li>\n<li><span>Related:</span><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the JSX fragment factory function to use when targeting react JSX emit with <code>jsxFactory</code> compiler option is specified, e.g. <code>Fragment</code>.</p>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel’s <code>/** @jsxFrag h */</code> directive</a>.</p>\n<p>For example with this TSConfig:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsx\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsxFactory\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsxFragmentFactory\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Fragment\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>This TSX file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">h</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">Fragment</span><span style=\"color: #000000\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> HelloWorld = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF0B08\">&lt;&gt;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">Hello</span><span style=\"color: #800000\">&lt;/div&gt;</span>\n<span style=\"color: #000000\">  &lt;/&gt;</span>\n<span style=\"color: #000000\">);</span></code></div></pre>\n<p>Would look like:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #000000\"> = require(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> HelloWorld = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #000000\">.h(</span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">Fragment</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #000000\">.h(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Hello\"</span><span style=\"color: #000000\">)));</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgjBKN0BTAEwDFUAbIgLlFQDsSiAPAOgCtJsxwuWyAQwDG6WACcAnnWg8I-MuMEBzZEQbohoidNCKVajXPANYiceIncc4dIPHKi6OkUgNWWG8lgkArtTphWGRvBi5MTFRkAAcJdFAAb1BoABo9JVV1eIBfUAAzS2RQACJo8SIRdGKAbgighkh4gAkiSkpYAHUJShJQAF5QAAoASn6APiHMUFAAHjGp6dmSVAA3MZa22BngZbWF7fnh6qA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation to the terminal.</p>\n<p>This flag is useful in two cases:</p>\n<ul>\n<li>You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.</li>\n<li>You are not sure that TypeScript has included a file you expected, as a part of debugging the <a href=\"#Project_Files_0\">file inclusion settings</a>.</li>\n</ul>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n</code></pre>\n<p>Normally, TypeScript would return silently on success.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under <code>node_modules</code> and load JavaScript files.</p>\n<p>This flag is can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your <code>node_modules</code>.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>0</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const getAPI: (url: string) => Promise&amp;lt;{}>'>getAPI</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) url: string'>url</data-lsp></span><span style=\"color: #000000\">: string) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> {};</span>\n<span style=\"color: #000000\">};</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBA5gUygQQAoEkYF4YEMICeYwMAFAK4BOANgFwzSUCWYcAlNgHwwDeAUDBgB6ITADiSGGnQCYlJFTC8AvgG4+aoA'>Try</a></div></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__awaiter </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__awaiter</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">_arguments</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">P</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> adopt(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> P ? </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\"> : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> P(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">resolve</span><span style=\"color: #000000\">) { resolve(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">); }); }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (P || (P = Promise))(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">reject</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fulfilled(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> { step(</span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #000000\">.next(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">) { reject(</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">); } }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> rejected(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> { step(</span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">](</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">) { reject(</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">); } }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> step(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">) { </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #000000\"> ? resolve(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">.value) : adopt(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #000000\">.value).then(</span><span style=\"color: #1A1A1A\">fulfilled</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">rejected</span><span style=\"color: #000000\">); }</span>\n<span style=\"color: #000000\">        step((</span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #000000\">.apply(</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">_arguments</span><span style=\"color: #000000\"> || [])).next());</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">__generator </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">__generator</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">body</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_ </span><span style=\"color: #000000\">= { label: </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, sent: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]; }, trys: [], ops: [] }, </span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #000000\"> = { next: verb(</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">: verb(</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">: verb(</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">) }, </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> Symbol === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && (</span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #000000\">[Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">; }), </span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> verb(</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> step([</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #000000\">]); }; }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> step(</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> TypeError(</span><span style=\"color: #A31515\">\"Generator is already executing.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\"> && (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">] || ((</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">]) && </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">), </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">) : </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">.next) && !(</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">])).</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">) </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">.value];</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">]) {</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #0000FF\">break</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label++; </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> { value: </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">], done: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label++; </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">]; </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">7</span><span style=\"color: #000000\">: </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">ops</span><span style=\"color: #000000\">.pop(); </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">trys</span><span style=\"color: #000000\">.pop(); </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #0000FF\">default</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">trys</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">.length &gt; </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">.length - </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]) && (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #09835A\">6</span><span style=\"color: #000000\"> || </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">)) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\"> && (!</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> || (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">] &gt; </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] && </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">] &lt; </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">]))) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label = </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #0000FF\">break</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #09835A\">6</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label &lt; </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label = </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #0000FF\">break</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> && </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label &lt; </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">]) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.label = </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">]; </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">ops</span><span style=\"color: #000000\">.push(</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">); </span><span style=\"color: #0000FF\">break</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">]) </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">ops</span><span style=\"color: #000000\">.pop();</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">trys</span><span style=\"color: #000000\">.pop(); </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            }</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">body</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        } </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #09835A\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #000000\">]; </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; } </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #09835A\">5</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> { value: </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">] : </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, done: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">getAPI </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> __awaiter(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> __generator(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">}); };</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArJgMawB2k6op6AggAoCSoALyg8kAJ7MGoABQBXAgBtKbAqmZEAlEIB8oAN6ZQoHAHEyoXn0OgCZec30BfANyYXQA'>Try</a></div></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">getAPI </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> __awaiter(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> __generator(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">}); };</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOAHawoYASJANgA4kGRMAY1hNI6UKXQBBAAoBJUAF5QeSAE8mQ0AAoArgS6VxBVEyIBKZQD5QAb0yhQOAOJlQc+Y9AEyBpvYAvgDcmCFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code>, the default.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> {</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string'>propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string'>propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string'>propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string'>propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string'>propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">}</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// String representation of type of &apos;x&apos; should be truncated in error message</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var s: string'>s</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></data-err></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmoBmrADaJIRAG6tooAB6oA3kVCgADvGUx2ATwDqndgAsAgmUrTmkSABNOZAOaDNAGR62AcqwC2kAIypE7aBtbAG5FFTUNHT0jEzMLazsHZzt3LzQ-AKDQpVU4dWgtXQNjU3MrIKSXVMgMDMC7bPC8yKKY0viKpyrPSFw6rLDc-MLokrjyxK6Unvx+hqIAX1CSMABlTLtQaEhVSBEydg5uMlA4PlAtdVPzgHJpG9BEfTgGQUtQACNIC8YWDitQDZQDB4FIvIhEKxbKIJFIUI8NrZQABeGTBIA'>Try</a></div></pre>\n<p>With <code>true</code></p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> {</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string'>propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string'>propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string'>propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string'>propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string'>propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">}</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// String representation of type of &apos;x&apos; should be truncated in error message</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var s: string'>s</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></data-err></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmruOQiAN1bRQAD1QBvIqFAAHePJjsAngHVO7ABYBBMpXHNIkACacyAcwA2qgDI9LAOVYBbSAEZUifhcsBuWQUlFQ0tPQMjE3MrWwcrF3c0b18rQLlFOGVoNU0dfUNjMz84x0TIDBToP3TgrNC8iMLokvsyt0hcKpqgzOzc8IKo4ti2hI78brSiAF9AkjAAZVTLUGhIRUhESDJ2Dm4yUDgAM1A1ZSPTgHJxK9BEbTgGa1NQACNIM8YWDjNQC1AMHgYnciEQrEsghEYhQ9xWoAAvBJ-EA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>Deprecated</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> Sem 'Use Strict' Implícito - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Você não deveria precisar disso. Por padrão, ao emitir um arquivo de módulo para um destino não ES6, o TypeScript emite um prólogo <code>\"use strict\";</code> no topo do arquivo.\nEsta configuração desabilita o prólogo.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">define([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn() { }</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKAzNmOMrACYCuANiZQIICyAEQYQAdrACSyAA4dUAYwwBVSCWroC8rDnB4O8PAE9IajXIqgAZrpWYSADymwC6S2xFnUsEZZEAKAJSgAN4AvkA'>Try</a></div></pre>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">define([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn() { }</span>\n<span style=\"color: #000000\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKAzNmOMrACYCuANiZQIICyAEUwkAHgAdYBdKABmbAHYBjdKljzZ8gBQBKUAG8AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> Sem Biblioteca - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Desabilita a inclusão automática de qualquer arquivo de biblioteca.\nSe esta opção estiver definida, <code>lib</code> é ignorada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> Sem Resolução - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Por padrão, o TypeScript examinará o conjunto inicial de arquivos para as diretivas <code>import</code> e<code>&#x3C;reference</code> e adicionará esses arquivos resolvidos ao seu programa.</p>\n<p>Se <code>noResolve</code> estiver definido, este processo não acontecerá.\nNo entanto, as instruções <code>import</code> ainda são verificadas para ver se elas resolvem para um módulo válido, então você precisa ter certeza de que isso é satisfeito por algum outro meio.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> Sem Verificações Genéricas Estritas - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>O TypeScript unificará os parâmetros de tipo ao comparar duas funções genéricas.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type A = &amp;lt;T, U>(x: T, y: U) => [T, U]'>A</data-lsp> = &lt;<data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp>, <data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: T'>x</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: U'>y</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp>) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [<data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp>, <data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp>];</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type B = &amp;lt;S>(x: S, y: S) => [S, S]'>B</data-lsp> = &lt;<data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: S'>x</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: S'>y</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [<data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>, <data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>];</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function f(a: A, b: B): void'>f</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: A'>a</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type A = &amp;lt;T, U>(x: T, y: U) => [T, U]'>A</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='type B = &amp;lt;S>(x: S, y: S) => [S, S]'>B</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: A'>a</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) a: A'>a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Erro</span>\n<span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYOBwAXyA'>Try</a></div></pre>\n<p>Esta flag pode ser usada para remover essa verificação.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#outfile\">outFile</a> instead.</p>\n<p>The <code>out</code> option computes the final file location in a way that is not predictable or consistent.\nThis option is retained for backward compatibility only and is deprecated.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li>\n<li><span>Status:</span><p>Deprecated</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Manter Enums Constantes - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não apaga as declarações <code>const enum</code> em seu código gerado. <code>const enum</code> provê uma maneira de reduzir a quantidade de memória utilizada por sua aplicação em tempo de execução emitindo o valor do enum ao invés de sua referência.</p>\n<p>Por exemplo nesse código TypeScript:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> <data-lsp lsp='const enum Album'>Album</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.TubRingZooHypothesis = 2'>TubRingZooHypothesis</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.DogFashionDiscoAdultery = 3'>DogFashionDiscoAdultery</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const albumSelecionado: Album.JimmyEatWorldFutures'>albumSelecionado</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const albumSelecionado: Album.JimmyEatWorldFutures'>albumSelecionado</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">\"Excelente escolha.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgQQDYCMUwN4BQMMAUgJbLICeAogIZQDqIAThgCYBiiUiLcEGAF4YARgA0RGABVEWAEpkwAcwBaIEAAkqABxBQAFgLKCRAJknEAIiGWc6EA2XBWToNO0QYocFlWEwAMySAL4EBKCQsHTYKADKcBhwwM5gdOwgAZg4yAB05JS0DMxsXDx8AgDcBGQAZjAAFDE5CUkp4OmZQt3osXkF1PRMrBzcvPwQAJT4UpEQIEm5GLYNAEQ0AB7AiQg+8BCgGAZ0uauT1SFAA'>Try</a></div></pre>\n<p>O comportamento padrão <code>const enum</code> é converter qualquer <code>Album.AlgumaCoisa</code> para o literal correspondente, além de remover a referência do enum do JavaScript completamente.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">albumSelecionado </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">albumSelecionado</span><span style=\"color: #000000\"> === </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #A31515\">\"Excelente escolha.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VAEEAbAIwtAG9NRQApVZZAT0QEN0AdVgAnGgBMAYmXRlRxSKAC8oAIwAaVqAAqZOgCVUeAOYAtWLAASPAA6x00RaiWqATFrYARWCan8YVHwvF1wqCTIadGJRHhVQAGYtAF9MHHxCUH56CgBlYhpibCC8fglYeNoGZAA6Tm4+QRFxaVl5RQBuTFQAM1AACmzq-MLi-DKK5SnqHNr63gFhMUkZOQVIAEpmbVwCWEKaml9+gCJEAA9sAtJokkhcGmh+GpONruSgA'>Try</a></div></pre>\n<p>Com a opção <code>preserveConstEnums</code> definida como <code>true</code>, o <code>enum</code> existe em tempo de execução e os números ainda são emitidos.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">})(</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\"> || (</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #000000\"> = {}));</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">albumSelecionado </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">albumSelecionado</span><span style=\"color: #000000\"> === </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #A31515\">\"Excelente escolha.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEAcCcFMGdbQG6wMIHsB28AuBRLAVwFt4AuUXaI2AKBAngAsMB3fEgS1zoGNseULGIlQAQQA2AI1KgA3nVCgAUlxIkAnvgCGuAOoZokgCYAxIriJx4oALygAjABoloACpFpAJS5YA5gBaGBgAEpqQGLjMCFy2DgBMrsoAIhj+ZjosXNgpcQLiJkSSuEia9qAAzK4AvnT8grigOjKkAMqwkrB8OVg6JhgVUrIkAHRqGtp6hsbmltYIANx0XABmoAAULSMdXT3Y-YN2xxKtYxNaugZGphZWNgCUCm4COBhdo5LpGwBE+AAefE6IlKwngAkkzB0ox+D2WNSAA'>Try</a></div></pre>\n<p>Isso essencialmente faz com que <code>const enums</code> seja uma funcionalidade apenas do código-fonte.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> instead. Specify the object invoked for <code>createElement</code> when targeting <code>react</code> for TSX files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>\"React\"</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes\ngenerating a type for the <code>import</code> based on the static JSON shape.</p>\n<p>TypeScript does not support resolving JSON files by default:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: settings.json</span>\n<span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">settings</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">debug</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">dry</span><span style=\"color: #000000\"> === </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Enabling the option allows importing JSON, and validating the types in that JSON file.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: settings.json</span>\n<span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">settings</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #1A1A1A\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">debug</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #1A1A1A\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">dry</span><span style=\"color: #000000\"> === </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a> instead. Skip type checking of default library declaration files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Skip type checking of declaration files.</p>\n<p>This can save time during compilation at the expense of type-system accuracy. For example, two libraries could\ndefine two copies of the same <code>type</code> in an inconsistent way. Rather than doing a full check of all <code>d.ts</code> files, TypeScript\nwill type check the code you specifically refer to in your app’s source code.</p>\n<p>A common case where you might think to use <code>skipLibCheck</code> is when there are two copies of a library’s types in\nyour <code>node_modules</code>. In these cases, you should consider using a feature like <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>\nto ensure there is only one copy of that dependency in your tree or investigate how to ensure there is\nonly one copy by understanding the dependency resolution to fix the issue without additional tooling.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Remover internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não emite declarações para códigos que tenham uma anotação <code>@internal</code> em seu comentário JSDoc.\nEsta é uma opção interna do compilador; use por sua conta em risco, porque o compilador não verifica se o resultado é válido.\nSe você estiver procurando por uma ferramenta para lidar com níveis adicionais de visibilidade dentro de seus arquivos <code>d.ts</code>, veja o <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Dias disponíveis na semana</span>\n<span style=\"color: #008000\"> * @internal</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const diasNaSemana: 7'>diasNaSemana</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">7</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">/** Calcule quanto alguém ganha em uma semana */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function salarioSemanal(porDia: number): number'>salarioSemanal</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) porDia: number'>porDia</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const diasNaSemana: 7'>diasNaSemana</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) porDia: number'>porDia</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgRBLAhgZ0gE3sgDgewHYC3AbgKaaR6KTIkC2ilUMAAvHgC4kBOlANk8HAkAHri7tIAY3zIJGFADlEAZToMqAXkgB2ANzhwoGAGFEvSQFdeJSAEcLDdjkhmA5hYCXtSK4YALKjpIC3pqNUpoQRExCQAzCzxJdnh8ajNELhTVej4ACjEERAAuChCAI24ASkgAbyhILhJ2Cx50JGQlbPVoSAKkfQBfIA'>Try</a></div></pre>\n<p>Com a opção definida como <code>false</code> (padrão):</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Dias disponíveis na semana</span>\n<span style=\"color: #008000\"> * @internal</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">diasNaSemana </span><span style=\"color: #000000\">= </span><span style=\"color: #09835A\">7</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">/** Calcule quanto alguém ganha em uma semana */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> salarioSemanal(</span><span style=\"color: #1A1A1A\">porDia</span><span style=\"color: #000000\">: number): number;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCmwBUslqFmgAIqmGRQOVJAAO0gLcA3LDtAVhoSFmTCLi5eErZRFwg+Ata+0elADpSD9tDQA5YQBlGztLAF5QAHYAbhY5ZQBhYUIBAFdiUABHHLt0WFAsgHMcgEvkUAq7aEsbUBzbK2iLJU9vWF9QADMcigFJaSsssSko2zcACh81YTIKNoAjLFEASlAAb0VQUSx0HNctdUhwmZilUEX1FIBfIA'>Try</a></div></pre>\n<p>Com <code>stripInternal</code> definido como <code>true</code> o <code>d.ts</code> emitido será editado.</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** Calcule quanto alguém ganha em uma semana */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> selarioSemanal(</span><span style=\"color: #1A1A1A\">porDia</span><span style=\"color: #000000\">: number): number;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsAO8B20CmsUEMA2AoECSACwHsB3AUQFt5oMATAMXl3QC5RVH0APAHSMB0SITBRy1OtHEReAY1zZY2aPDIpCAKm35Q20ABF42SKEbxIiTQFuAbuiugcoSOhrYc+w+FQYsPB9gfH4bWGhQBU0YC1NIADlsAGUPL2xQAF5QAHYAbnwdQwBhPAUAV3ZQAEdyr2gyUDwAc3KAS5pQZq8SDI9Qcs83NNdtELCyCNAAM3KUBXVNYeUEMlTPHFwACnCTbC4UQYAjTABKUABvfVBYdGhyrDizJPX0g1Bd0wKAXyA'>Try</a></div></pre>\n<p>A JavaScript emitido ainda é o mesmo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Prevenir erros de propriedades em excesso - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Desativa o relatório de erros de propriedades em excesso, como o mostrado no exemplo a seguir:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp> = { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) y: number'>y</data-lsp></span><span style=\"color: #000000\">: number };</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const p: Point'>p</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">, <data-lsp lsp='(property) y: number'>y</data-lsp>: </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">, <data-lsp lsp='(property) m: number'>m</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\"> };</span>\n<span class=\"error\"><span>Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAAU4BLAOz1AF5QBvUAD1WoFcBbAIxgDcoAhx79ooAL4CcAYzjVEdIqgo06jFu1ABGADTDUGA91Q6ADFIFA'>Try</a></div></pre>\n<p>Esta opção foi adicionada para ajudar as pessoas a migrar para a verificação mais rigorosa de novos objetos literais no <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>Não recomendamos o uso dessa sinalização em uma base de código moderna, você pode prevenir casos únicos em que precise dela usando <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Prevenir erros de implicit any index - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ativando <code>suppressImplicitAnyIndexErrors</code> previne o relato do erros sobre qualquer implícito ao indexar objetos, conforme mostrado no exemplo a seguir:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span>\n<span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM7mKKmX30IobZ76yQATSgA8AoqVLRS9YgDMAhsno064emQxZiZKrTDhKEqTNAB2AAwBWAMzV00SOtDQARgCtQAXlABvUMOIARnNQAF8AbjsHemhkSgA6ZGgAcwAKVzcAbQAiWWhobIBdAEpwoA'>Try</a></div></pre>\n<p>Usar <code>suppressImplicitAnyIndexErrors</code> é uma abordagem bastante extrema. É recomendado usar um comentário <code>@ts-ignore</code> ao invés:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #008000\">// @ts-ignore</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM5kZbFlXXrSSOjQBGAK1ABeUAG9QAD2IBGAAygAvgG5aYcFnoBaVAHMYpGp27RklAHTJougBT8BAbQBEAM2jQnAXQCUyoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Resolução de rastreamento - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando você estiver tentando depurar o motivo de um módulo não ter sido incluso,\nvocê pode definir o <code>traceResolutions</code> para <code>true</code> para que o TypeScript imprima informações sobre o seu processo de resolução de cada arquivo processado.</p>\n<p>Você pode ler mais sobre projetos compostos <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">nesse guia</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Usar Define para Propriedades de Classes - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Esta flag é utilizada para realizar a migração para as próximas versões padrões da especificação de propriedades de classe. O TypeScript introduziu propriedades de classe muitos anos antes de elas serem ratificadas pelo TC39. A última versão da especificação do JavaScript tem um comportamento diferente da implementação do TypeScript em tempo de execução, mas a mesma sintaxe.</p>\n<p>Essa flag altera esse comportamento para o comportamento do ECMA.</p>\n<p>Você pode ler mais sobre essa transição nas <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">notas de release da versão 3.7</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section Command Line\" aria-labelledby='Command_line_Options_6171'>#</a>Command Line</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n</div>\n</article>\n<article id='watchOptions'>\n<div class='indent'>\n<div class='category'>\n<h2 id='Watch_Options_999' ><a href='#Watch_Options_999' name='Watch_Options_999' aria-label=\"Link to the section Watch Options\" aria-labelledby='Watch_Options_999'>#</a>Watch Options</h2>\n<p>TypeScript 3.8 shipped a new strategy for watching directories, which is crucial for efficiently picking up changes to <code>node_modules</code>.</p>\n<p>On operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on <code>node_modules</code> and many of its subdirectories to detect changes in dependencies.\nThis is because the number of available file watchers is often eclipsed by the of files in <code>node_modules</code>, whereas there are way fewer directories to track.</p>\n<p>Because every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new <code>watchOptions</code> field which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='fallbackPolling' href='#fallbackPolling' name='fallbackPolling' aria-labelledby=\"fallbackPolling-config\">#</a> Alternativas na ausência de observadores - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando utilizar eventos de arquivos do sistema, essa opção indica as estratégias de verificação que o sistema deve executar quando estiver sem observadores e/ou não suportar os observadores nativos.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Checa por mudanças nos arquivos várias vezes por segundo a um intervalo pré-determinado.</li>\n<li><code>priorityPollingInterval</code>: Checa todos os arquivos por mudanças várias vezes por segundo, mas usando heurísticas para checar alguns tipos de arquivos mais frequentemente que outros.</li>\n<li><code>dynamicPriorityPolling</code>: Usa uma fila dinâmica onde diretórios que são menos alterados serão checados menos vezes.</li>\n<li><code>synchronousWatchDirectory</code>: Desativa a checagem adiada nos diretórios. Adiar a checagem é útil quando muitas mudanças podem acontecer de uma vez só (ex.: uma mudança em <code>node_modules</code> por executar o <code>npm install</code>), mas você pode querer desativar isso para configurações menos comuns.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents,<br/>synchronousWatchDirectory</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watchDirectory' href='#watchDirectory' name='watchDirectory' aria-labelledby=\"watchDirectory-config\">#</a> Observar Diretório - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Determina a estratégia que rege como árvores de diretório são observadas por mudanças em sistemas que não possuem a funcionalidade de observação recursiva de arquivos.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Checa por mudanças nos arquivos várias vezes por segundo a um intervalo pré-determinado.</li>\n<li><code>dynamicPriorityPolling</code>: Usa uma fila dinâmica onde diretórios que são menos alterados serão checados menos vezes.</li>\n<li><code>useFsEvents</code> (padrão): Tenta utilizar os eventos de modificação de diretórios/arquivos do próprio sistema operacional.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>useFsEvents</code></p>\n</li>\n<li><span>Allowed:</span><p>fixedPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watchFile' href='#watchFile' name='watchFile' aria-labelledby=\"watchFile-config\">#</a> Observar Arquivo - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Define a estratégia como arquivos individuais devem ser observados por mudanças.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Checa todos os arquivos por mudanças várias vezes por segundo a um intervalo pré-determinado.</li>\n<li><code>priorityPollingInterval</code>: Checa todos os arquivos por mudanças várias vezes por segundo, mas usando heurísticas para checar alguns tipos de arquivos mais frequentemente que outros.</li>\n<li><code>dynamicPriorityPolling</code>: Usa uma fila dinâmica onde arquivos menos modificados são checados menos frequentemente.</li>\n<li><code>useFsEvents</code> (padrão): Tenta utilizar a funcionalidade nativa de eventos de modificação de arquivos do sistema operacional.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Tenta utilizar a implementação de eventos de modificação nativa do sistema operacional para detectar mudanças no diretório pai de um arquivo.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>useFsEvents</code></p>\n</li>\n<li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents,<br/>useFsEventsOnParentDirectory</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n</div>\n</article>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"pt","tsconfigMDPath":"/home/runner/work/doc-static/doc-static/typescriptlang.org/website/packages/tsconfig-reference/output/pt.md","categoriesPath":"/home/runner/work/doc-static/doc-static/typescriptlang.org/website/packages/tsconfig-reference/output/pt.json"}}}