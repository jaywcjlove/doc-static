{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"codeExamples":{"edges":[{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.md = new Remarkable();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: 'Hello, **world**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    return { __html: this.md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\">\n        <h3>Input</h3>\n        <label htmlFor=\"markdown-content\">\n          Enter some markdown\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>Output</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MarkdownEditor />,\n  document.getElementById('markdown-example')\n);\n","mdAbsolutePath":"/home/circleci/project/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  document.getElementById('hello-example')\n);","mdAbsolutePath":"/home/circleci/project/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Timer />,\n  document.getElementById('timer-example')\n);","mdAbsolutePath":"/home/circleci/project/content/home/examples/a-stateful-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>TODO</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            What needs to be done?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Add #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('todos-example')\n);\n","mdAbsolutePath":"/home/circleci/project/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"/home/circleci/project/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"简单组件","domid":"hello-example"},"html":"<p>React 组件使用一个名为 <code class=\"gatsby-code-text\">render()</code> 的方法，接收输入的数据并返回需要展示的内容。在示例中这种类似 XML 的写法被称为 JSX。被传入的数据可在组件中通过 <code class=\"gatsby-code-text\">this.props</code> 在 <code class=\"gatsby-code-text\">render()</code> 访问。</p>\n<p><strong>使用 React 的时候也可以不使用 JSX 语法。</strong>尝试使用 <a href=\"https://babeljs.io/repl/#?presets=react&#x26;code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUPGDADkdECChWeASl4AlOMOBQAIgHkAssp0aIySpogoaFBUQmISdC48QA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel REPL</a>，了解 JSX 被编译成原生 JavaScript 代码的步骤。</p>"}},{"node":{"fileAbsolutePath":"/home/circleci/project/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"有状态组件","domid":"timer-example"},"html":"<p>除了使用外部数据（通过 <code class=\"gatsby-code-text\">this.props</code> 访问）以外，组件还可以维护其内部的状态数据（通过 <code class=\"gatsby-code-text\">this.state</code> 访问）。当组件的状态数据改变时，组件会再次调用 <code class=\"gatsby-code-text\">render()</code> 方法重新渲染对应的标记。</p>"}},{"node":{"fileAbsolutePath":"/home/circleci/project/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"应用","domid":"todos-example"},"html":"<p>使用 <code class=\"gatsby-code-text\">props</code> 和 <code class=\"gatsby-code-text\">state</code>，我们可以创建一个简易的 Todo 应用。在示例中，我们使用 <code class=\"gatsby-code-text\">state</code> 来保存现有的待办事项列表及用户的输入。尽管事件处理器看似被内联地渲染，但它们其实只会被事件委托进行收集和调用。</p>"}},{"node":{"fileAbsolutePath":"/home/circleci/project/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"在组件中使用外部插件","domid":"markdown-example"},"html":"<p>React 允许你结合其他框架或库一起使用。示例中使用了一个名为 <strong>remarkable</strong> 的外部 Markdown 库。它可以实时转换 <code class=\"gatsby-code-text\">&lt;textarea></code> 里的内容。</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"声明式"},"html":"<p>React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。</p>\n<p>以声明式编写 UI，可以让你的代码更加可靠，且方便调试。</p>"}},{"node":{"frontmatter":{"title":"组件化"},"html":"<p>构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。</p>\n<p>由于组件逻辑使用 JavaScript 编写而非模板，因此你可以轻松地在应用中传递数据，并保持状态与 DOM 分离。</p>"}},{"node":{"frontmatter":{"title":"一次学习，跨平台编写"},"html":"<p>无论你现在使用什么技术栈，在无需重写现有代码的前提下，通过引入 React 来开发新功能。</p>\n<p>React 还可以使用 Node 进行服务器渲染，或使用 <a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native</a> 开发原生移动应用。</p>"}}]}},"pageContext":{}},"staticQueryHashes":[]}