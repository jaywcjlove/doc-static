{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/skipLibCheck.html","result":{"pageContext":{"title":"skipLibCheck","lang":"en","html":"<p>Skip type checking of declaration files.</p>\n<p>This can save time during compilation at the expense of type-system accuracy. For example, two libraries could\ndefine two copies of the same <code>type</code> in an inconsistent way. Rather than doing a full check of all <code>d.ts</code> files, TypeScript\nwill type check the code you specifically refer to in your app’s source code.</p>\n<p>A common case where you might think to use <code>skipLibCheck</code> is when there are two copies of a library’s types in\nyour <code>node_modules</code>. In these cases, you should consider using a feature like <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>\nto ensure there is only one copy of that dependency in your tree or investigate how to ensure there is\nonly one copy by understanding the dependency resolution to fix the issue without additional tooling.</p>\n<p>Another possibility is when you are migrating between TypeScript releases and the changes cause breakages in node_modules and the JS standard libraries which you do not want to deal with during the TypeScript update.</p>\n<p>Note, that if these issues come from the TypeScript standard library you can replace the library using <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#supporting-lib-from-node_modules\">TypeScript 4.5’s lib replacement</a> technique.</p>","redirectHref":"/tsconfig#skipLibCheck"}},"staticQueryHashes":[]}