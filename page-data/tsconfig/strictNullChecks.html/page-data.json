{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/strictNullChecks.html","result":{"pageContext":{"title":"strictNullChecks","lang":"en","html":"<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and youâ€™ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;}' >loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ name: string; age: number; }>.find(predicate: (value: {&#10;    name: string;&#10;    age: number;&#10;}, index: number, obj: {&#10;    name: string;&#10;    age: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    name: string;&#10;    age: number;&#10;} (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;}' >loggedInUser</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA'>Try</a></div></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;} | undefined' >loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ name: string; age: number; }>.find(predicate: (value: {&#10;    name: string;&#10;    age: number;&#10;}, index: number, obj: {&#10;    name: string;&#10;    age: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    name: string;&#10;    age: number;&#10;} | undefined (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;} | undefined' >loggedInUser</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM0AoECAFwENoBzSM1AUQGU0AGNkscRM6ASwDGZAHIBXADbiAwgAtIAgNaIiAE3niqkUALgA7HqHFxqtFQEldAVUQxdFALaRUPfruoBuIkR36yoUTZIoAC8oADaRKCgAN6gdo6oAEQA8gBGAJ6JADSgFLSoAIxooAC+WZExcQ5OoIkAEpAwFNm5+aCEpeUAup7eegZGJpDmVoEh-oGIAHQAZny6KgAUi6IAlCEAfP5T8VrB+4bGphbWttWrnj6IcOKQU4OLg8ejMFN5kBdAA'>Try</a></div></pre>\n<p>The second example failed because the arrayâ€™s <code>find</code> function looks a bit like this simplification:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// When strictNullChecks: true</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// When strictNullChecks: false the undefined is removed from the type system,</span></div><div class='line'><span style=\"color: #008000\">// allowing you to write code which assumes it always found a result</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>","redirectHref":"/tsconfig#strictNullChecks"}},"staticQueryHashes":[]}