{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/exactOptionalPropertyTypes.html","result":{"pageContext":{"title":"exactOptionalPropertyTypes","lang":"en","html":"<p>With exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on <code>type</code> or <code>interfaces</code> which have a <code>?</code> prefix.</p>\n<p>For example, this interface declares that there is a property which can be one of two strings: ‘dark’ or ‘light’ or it should not be in the object.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">UserDefaults</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// The absence of a value represents 'system'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">colorThemeOverride</span><span style=\"color: #000000\">?: </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Without this flag enabled, there are three values which you can set <code>colorThemeOverride</code> to be: “dark”, “light” and <code>undefined</code>.</p>\n<p>Setting the value to <code>undefined</code> will allow most JavaScript runtime checks for the existence to fail, which is effectively falsy. However, this isn’t quite accurate <code>colorThemeOverride: undefined</code> is not the same as <code>colorThemeOverride</code> not being defined. For example <code>\"colorThemeOverride\" in settings</code> would have different behavior with <code>undefined</code> as the key compared to not being defined.</p>\n<p><code>exactOptionalPropertyTypes</code> makes TypeScript truly enforce the definition provided as an optional property:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getUserSettings(): UserDefaults' >getUserSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// But not:</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span><span class=\"code\">2412</span></span><span class=\"error-behind\">Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFAgQWnEMBcoATAMy9efACwBGXkww5EFAGYJIoAKoMKAEUgKArvkQNQAbyahQ8LPizEaAC0gBbSMgBu7DABNIAfh4Aid7DEANa+oAA+oL74GADmNoi+ANxMAL5MnvD4gUpy2jhI2DigMZCIqhQAyqWYODEMABQAlDzlxJo6egzJrAC0ffDaiH09TOY4DIigaog1daAAvMWlrVUz0nVNydOzDAB05pbWdo4ubp4LkQHBSUzb63sHVrYOTq7ExB5Ki1Gx8TcsYAAQoNQDgsIguLdqvd9hYnsdXmcvqA8p45NJIO5EkA'>Try</a></div></pre>","redirectHref":"/tsconfig#exactOptionalPropertyTypes"}},"staticQueryHashes":[]}