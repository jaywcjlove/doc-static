{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/noStrictGenericChecks.html","result":{"pageContext":{"title":"noStrictGenericChecks","lang":"en","html":"<p>TypeScript will unify type parameters when comparing two generic functions.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: U' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: S' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: S' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(a: A, b: B): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: A' >a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div><span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYBBwAXyA'>Try</a></div></pre>\n<p>This flag can be used to remove that check.</p>","redirectHref":"/tsconfig#noStrictGenericChecks"}},"staticQueryHashes":[]}