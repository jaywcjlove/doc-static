{"componentChunkName":"component---src-templates-codepen-example-js","path":"/redirect-to-codepen/context/motivation-solution","result":{"pageContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"// highlight-range{1-4}\\n// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\\n// 为当前的 theme 创建一个 context（“light”为默认值）。\\nconst ThemeContext = React.createContext('light');\\n\\nclass App extends React.Component {\\n  render() {\\n    // highlight-range{1-3,5}\\n    // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\\n    // 无论多深，任何组件都能读取这个值。\\n    // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\\n    return (\\n      <ThemeContext.Provider value=\\\"dark\\\">\\n        <Toolbar />\\n      </ThemeContext.Provider>\\n    );\\n  }\\n}\\n\\n// highlight-range{1,2}\\n// 中间的组件再也不必指明往下传递 theme 了。\\nfunction Toolbar() {\\n  return (\\n    <div>\\n      <ThemedButton />\\n    </div>\\n  );\\n}\\n\\nclass ThemedButton extends React.Component {\\n  // highlight-range{1-3,6}\\n  // 指定 contextType 读取当前的 theme context。\\n  // React 会往上找到最近的 theme Provider，然后使用它的值。\\n  // 在这个例子中，当前的 theme 值为 “dark”。\\n  static contextType = ThemeContext;\\n  render() {\\n    return <Button theme={this.context} />;\\n  }\\n}\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}},"staticQueryHashes":[]}