{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/type-primitives/tuples.ts.html","result":{"pageContext":{"name":"Tuples","title":"Tuples","lang":"ja","html":" 一般的に、配列は0から任意の数の\n 単一の型のオブジェクトを含みます。\n TypeScriptは複数の型を含み、\n 格納順が重要な配列について特別な解析を行います。\n\n これらはタプルと呼ばれます。これらはキーを持つオブジェクトよりも短い文法で、\n いくつかのデータをつなげるための方法と考えられます。\n\n タプルはJavaScriptの配列の文法で作成できます:\n\n<code><pre>\nconst failingResponse = [\"Not Found\", 404];\n\n// ただし、タプルとして型を宣言する必要があります。\n\nconst passingResponse: [string, number] = [\"{}\", 200];\n\n</pre></code>\n// もし、ホバーすれば2つの変数が配列( (string | number)[] )と\n タプル( [string, number] )として解釈されているという\n 違いを確認できるでしょう。\n\n 配列の場合、どのインデックスの要素も文字列または数値の\n どちらかになるので順番は重要ではありません。\n タプルでは、順番と長さは保証されています。\n\n<code><pre>\nif (passingResponse[1] === 200) {\n  const localInfo = JSON.parse(passingResponse[0]);\n  console.log(localInfo);\n}\n\n</pre></code>\n// これは、TypeScriptが正しいインデックスに対して正しい型を提供するだけでなく、\n もしオブジェクトの宣言していないインデックスに\n アクセスしようとすればエラーを発生させることを意味します。\n\n<code><pre>\npassingResponse[2];\n\n</pre></code>\n// タプルは接続されたデータの短いまとまりやフィクスチャにとって、\n 良いパターンとして感じられるでしょう。\n\n<code><pre>\ntype StaffAccount = [number, string, string, string?];\n\nconst staff: StaffAccount[] = [\n  [0, \"Adankwo\", \"adankwo.e@\"],\n  [1, \"Kanokwan\", \"kanokwan.s@\"],\n  [2, \"Aneurin\", \"aneurin.s@\", \"Supervisor\"],\n];\n\n</pre></code>\n// 最初がタプルで、その後の長さが分からない型を扱う場合、\n スプレッド構文を使うと任意の長さを持ち、\n 追加のインデックスの要素が\n 特定の型であると示すことができます。\n\n<code><pre>\ntype PayStubs = [StaffAccount, ...number[]];\n\nconst payStubs: PayStubs[] = [\n  [staff[0], 250],\n  [staff[1], 250, 260],\n  [staff[0], 300, 300, 300],\n];\n\nconst monthOnePayments = payStubs[0][1] + payStubs[1][1] + payStubs[2][1];\nconst monthTwoPayments = payStubs[1][2] + payStubs[2][2];\nconst monthThreePayments = payStubs[2][2];\n\n</pre></code>\n// 以下のようにタプルを用いて任意の数の数値型を\n 引数として受け取る関数を宣言できます:\n\n<code><pre>\ndeclare function calculatePayForEmployee(id: number, ...args: [...number[]]): number;\n\ncalculatePayForEmployee(staff[0][0], payStubs[0][1]);\ncalculatePayForEmployee(staff[1][0], payStubs[1][1], payStubs[1][2]);\n\n</pre></code>\n//\n https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#tuples-in-rest-parameters-and-spread-expressions\n https://auth0.com/blog/typescript-3-exploring-tuples-the-unknown-type/\n","redirectHref":"ja/play/?#example/tuples"}},"staticQueryHashes":[]}