{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html","result":{"pageContext":{"name":"Built-in Utility Types","title":"Built-in Utility Types","lang":"ja","html":"\n ある型がほとんどのコードベースで有効性があると感じられた場合、\n その型はTypeScriptに追加され、他の誰もが使えるようになります。\n TypeScriptに追加されたら、いつでもその型が使えることが\n 保証されます。\n\n Partial<Type>\n\n オブジェクト型を型引数として受け取り、そのプロパティを\n すべて任意プロパティへと変換します。\n\n<code><pre>\ninterface Sticker {\n  id: number;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  submitter: undefined | string;\n}\n\ntype StickerUpdateParam = Partial<Sticker>;\n\n// Readonly<Type>\n\n// オブジェクト型を型引数として受け取り、そのプロパティを読み取り専用にします。\n\ntype StickerFromAPI = Readonly<Sticker>;\n\n// Record<KeysFrom, Type>\n\n</pre></code>\n// KeysFromからプロパティの一覧を受け取り、\n 各プロパティの値をType型にした型を作成します。\n\n 型キーの一覧:\n<code><pre>\ntype NavigationPages = \"home\" | \"stickers\" | \"about\" | \"contact\";\n\n// 上記キーに対応するデータの型:\ninterface PageInfo {\n  title: string;\n  url: string;\n  axTitle?: string;\n}\n\nconst navigationInfo: Record<NavigationPages, PageInfo> = {\n  home: { title: \"Home\", url: \"/\" },\n  about: { title: \"About\", url: \"/about\" },\n  contact: { title: \"Contact\", url: \"/contact\" },\n  stickers: { title: \"Stickers\", url: \"/stickers/all\" },\n};\n\n// Pick<Type, Keys>\n\n</pre></code>\n// 型の第一引数に受け取ったオブジェクトから、第二引数に任意のプロパティ名を定義して\n そのプロパティと対応する値の型を持つ型を作成します。\n 型のホワイトリストのようなものです。\n\n<code><pre>\ntype StickerSortPreview = Pick<Sticker, \"name\" | \"updatedAt\">;\n\n// Omit<Type, Keys>\n\n</pre></code>\n// 型の第一引数に受け取ったオブジェクトから、第二引数に任意のプロパティ名を定義して\n そのプロパティを除外した型を作成します。\n 型のブラックリストのようなものです。\n\n<code><pre>\ntype StickerTimeMetadata = Omit<Sticker, \"name\">;\n\n// Exclude<Type, RemoveUnion>\n\n</pre></code>\n// 型の第一引数に受け取った共用体型から、第二引数に受け取った共用体型を\n 除外した型を作成します。\n\n<code><pre>\ntype HomeNavigationPages = Exclude<NavigationPages, \"home\">;\n\n// Extract<Type, MatchUnion>\n\n</pre></code>\n// 型の第一引数に受け取った共用体型から、第二引数に受け取った共用体型に\n 当てはまる型を作成します。\n\n<code><pre>\ntype DynamicPages = Extract<NavigationPages, \"home\" | \"stickers\">;\n\n// NonNullable<Type>\n\n</pre></code>\n// 型引数に受け取った共用体型から、nullとundefinedを除外した型を返します。\n 値のバリデーションに使えるでしょう。\n\n<code><pre>\ntype StickerLookupResult = Sticker | undefined | null;\ntype ValidatedResult = NonNullable<StickerLookupResult>;\n\n// ReturnType<Type>\n\n// 型引数に受け取った関数型から、その返り値の型を作成します。\n\ndeclare function getStickerByID(id: number): Promise<StickerLookupResult>;\ntype StickerResponse = ReturnType<typeof getStickerByID>;\n\n// InstanceType<Type>\n\n</pre></code>\n// クラスインスタンス、またはコンストラクタ関数を持つオブジェクトから、\n そのインスタンスの型を作成します。\n\n<code><pre>\nclass StickerCollection {\n  stickers: Sticker[];\n}\n\ntype CollectionItem = InstanceType<typeof StickerCollection>;\n\n// Required<Type>\n\n</pre></code>\n// 型引数に受け取ったオブジェクト型からオプショナルのプロパティをすべて\n 必須に変換した型を作成します。\n\n<code><pre>\ntype AccessiblePageInfo = Required<PageInfo>;\n\n// ThisType<Type>\n\n</pre></code>\n// 他の型とは違い、ThisTypeは新しい型を返しません。\n 関数\bで使われるthisの型を型引数に受け取った型に変換します。\n ThisTypeはTSConfigのnoImplicitThisがtrue\n の場合にしか使えません。\n\n https://www.typescriptlang.org/docs/handbook/utility-types.html\n","redirectHref":"ja/play/?strictNullChecks=true#example/built-in-utility-types"}},"staticQueryHashes":[]}