{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/meta-types/discriminate-types.ts.html","result":{"pageContext":{"name":"Discriminate Types","title":"Discriminate Types","lang":"ja","html":" 共用型の識別とは\n コードフロー解析で可能性のあるオブジェクトの種類を\n 特定の1つのオブジェクトに減らすのに使うものです。\n\n このパターンは異なる文字列や数字の定数を持つ\n よく似たオブジェクトの集合に対してよく機能します。\n 例: 名前付きイベントのリストや\n バージョン付けされたオブジェクトの集合\n\n<code><pre>\ntype TimingEvent = { name: \"start\"; userStarted: boolean } | { name: \"closed\"; duration: number };\n\n</pre></code>\n// イベントがこの関数にやってきたとき、\n 2つの型のどちらの可能性もあります。\n\n<code><pre>\nconst handleEvent = (event: TimingEvent) => {\n  // event.nameに対してswitch文を用いることで、\n  // TypeScriptのコードフロー解析はオブジェクトが\n  // 共用型のうちの片方で表せるということを確定できます。\n\n  switch (event.name) {\n    case \"start\":\n      // TimingEventのうち、nameが\"start\"になる型は1つしかないので、\n      // これはuserStartedに\n      // 安全にアクセスできることを意味します。\n      const initiatedByUser = event.userStarted;\n      break;\n\n    case \"closed\":\n      const timespan = event.duration;\n      break;\n  }\n};\n\n</pre></code>\n// このパターンは型の識別にnumber型を使った\n 場合でも同じです。\n\n 以下の例では、区別できる共用型に加えて\n ハンドリングする必要のあるエラーがあります。\n\n<code><pre>\ntype APIResponses = { version: 0; msg: string } | { version: 1; message: string; status: number } | { error: string };\n\nconst handleResponse = (response: APIResponses) => {\n  // エラーの場合をハンドリングし、returnします。\n  if (\"error\" in response) {\n    console.error(response.error);\n    return;\n  }\n\n  // TypeScriptはここではAPIResponseがエラー型にならないことを知っています。\n  // もし、エラーであればこの関数はreturnされています。\n  // これは、以下のresponseに\n  // マウスホバーすると確認できます。\n\n  if (response.version === 0) {\n    console.log(response.msg);\n  } else if (response.version === 1) {\n    console.log(response.status, response.message);\n  }\n};\n\n</pre></code>\n// 共用型のすべてをチェックしたかどうかを保証できるので、\n if文よりもswitch文を使うほうが良いでしょう。\n ハンドブックの中に、\n never型を使ってこのパターンを説明した章があります:\n\n https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\n","redirectHref":"ja/play/?#example/discriminate-types"}},"staticQueryHashes":[]}