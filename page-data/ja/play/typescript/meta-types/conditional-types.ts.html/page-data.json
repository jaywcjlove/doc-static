{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/meta-types/conditional-types.ts.html","result":{"pageContext":{"name":"Conditional Types","title":"Conditional Types","lang":"ja","html":" Conditional TypesはTypeScriptの型システムに\n 簡単なロジックを組み込む方法を提供します。\n これは非常に高度な機能のため、\n 日々の開発において使わないことも十分に可能です。\n\n Conditional Typesは以下のような形です:\n\n   A extends B ? C : D\n\n 条件部はある型がある式を拡張しているかを定義し、\n 条件を満たす場合にどの型を返すかを定義します。\n\n いくつかの例を見てみましょう。\n ここでは簡潔さのためにジェネリクスに単一の文字を使用していきます。\n これは任意ですが、\n 60文字に制限すると画面に収まり難くなります。\n\n<code><pre>\ntype Cat = { meows: true };\ntype Dog = { barks: true };\ntype Cheetah = { meows: true; fast: true };\ntype Wolf = { barks: true; howls: true };\n\n</pre></code>\n// 以下のように吠える(barks)動物の型だけを\n 抜き出すConditional Typesを作れます。\n\n<code><pre>\ntype ExtractDogish<A> = A extends { barks: true } ? A : never;\n\n// 次に、ExtractDogishで包んだ型を作成します:\n\n// 猫は吠えないので、neverが返ります。\ntype NeverCat = ExtractDogish<Cat>;\n// 狼は吠えるので、狼の型 (Wolf) が返ります。\ntype Wolfish = ExtractDogish<Wolf>;\n\n</pre></code>\n// これは多くの型を含む共用型を扱って、\n その共用型に含まれる型の数を\n 絞りたい際に有用です:\n\n<code><pre>\ntype Animals = Cat | Dog | Cheetah | Wolf;\n\n</pre></code>\n// 共用型にExtractDogish型を適用するのは、\n その共用型に含まれるそれぞれの型に\n ExtraDogishの条件を当てはめるのと同じです:\n\n<code><pre>\ntype Dogish = ExtractDogish<Animals>;\n\n</pre></code>\n// = ExtractDogish<Cat> | ExtractDogish<Dog> |\n   ExtractDogish<Cheetah> | ExtractDogish<Wolf>\n\n = never | Dog | never | Wolf\n\n = Dog | Wolf (example:unknown-and-never を参照)\n\n これは共用型のそれぞれの型にConditional Typesが割り当てられるため、\n Distributive Conditional Typesと呼ばれます。\n\n Deferred Conditional Types\n\n Conditional Typesは、入力によって異なる型を返すようなAPIの\n 型を絞ることにも使えます。\n\n 例えば、この関数は引数に渡される真偽値に応じて\n 文字列型か数値型のどちらかを返します。\n\n<code><pre>\ndeclare function getID<T extends boolean>(fancy: T): T extends true ? string : number;\n\n</pre></code>\n// 型システムが真偽値についてどの程度知っているかによって、\n 異なる返り値の型を得られます。\n\n<code><pre>\nlet stringReturnValue = getID(true);\nlet numberReturnValue = getID(false);\nlet stringOrNumber = getID(Math.random() < 0.5);\n\n</pre></code>\n// 上記の例では、TypeScriptは返り値についてすぐに知ることができました。\n しかし、型が未知のときでも\n 関数の中でConditional Typesを使えます。\n これはDeferred Conditonal Typesと呼ばれます。\n\n 上記のDogish型と同じですが、今回は関数です。\n<code><pre>\ndeclare function isCatish<T>(x: T): T extends { meows: true } ? T : undefined;\n\n</pre></code>\n// 他にもConditional Typesで有用なツールがあります。これは遅延評価時に\n 型について推論をすべしとTypeScriptに明確に指示できるものです。\n それは'infer'キーワードです。\n\n inferは一般的にはコードの中の既存の型を検査して、\n 型の中で新しい変数として扱う\n メタ型を作るのに使われます。\n\n<code><pre>\ntype GetReturnValue<T> = T extends (...args: any[]) => infer R ? R : T;\n\n</pre></code>\n// 大まかには:\n\n  - 上記は型引数を取るGetReturnValueという\n    条件付きジェネリクスです\n\n  - この条件部は型引数が関数であるかを確認し、\n    もし関数であれば関数の返り値を元に\n    Rという新しい型を作成します\n\n  - 条件を通過した場合は型の値は推論された返り値に、\n    そうでなければ元の型になります\n\n\n<code><pre>\ntype getIDReturn = GetReturnValue<typeof getID>;\n\n</pre></code>\n// 以下は関数であるというチェックを満たさないので、\n 与えられた型をそのまま返します。\n<code><pre>\ntype getCat = GetReturnValue<Cat>;\n","redirectHref":"ja/play/?#example/conditional-types"}},"staticQueryHashes":[]}