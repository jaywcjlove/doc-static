{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/primitives/any.ts.html","result":{"pageContext":{"name":"Any","title":"Any","lang":"ja","html":" anyはTypeScriptのエスケープ句です。\n any型を利用することで、一区切りのコードを\n JavaScriptの様に動的に扱ったり、\n 型システムの制限を回避することができます。\n\n any型が使用されている良い例はJSON.parseの結果です\n\n<code><pre>\nconst myObject = JSON.parse(\"{}\");\n\n</pre></code>\n// TypeScriptにおけるany宣言は、あなたがその値について詳しく知っていて\n それが厳密に正しくないとしても、安全なものなので信じてくださいという宣言です。\n 例えば、次のコードはクラッシュします。\n\n<code><pre>\nmyObject.x.y.z;\n\n</pre></code>\n// any型を利用することで、型の安全性と引き換えに、\n よりオリジナルに近いJavaScriptコードを書くことができます。\n\n any型は、（neverを除いて）どんな型でも割り当て可能であり、\n 一方の型をもう一方に割り当て可能にする「型のワイルドカード」\n によく似ています。\n\n<code><pre>\ndeclare function debug(value: any): void;\n\ndebug(\"a string\");\ndebug(23);\ndebug({ color: \"blue\" });\n\n</pre></code>\n// いずれのdebug関数実行も、引数の型を\n anyに置き換えることができるため許可されます。\n\n TypeScriptはany型の位置を考慮します。\n たとえば、この様なタプル型を利用した関数引数であってもです。\n\n<code><pre>\ndeclare function swap(x: [number, string]): [string, number];\n\ndeclare const pair: [any, any];\nswap(pair);\n\n</pre></code>\n// swap関数引数であるnumber型・string型のペアは、\n any型のペアと置き換えることができるため、\n この関数実行は許可されます。\n\n タプル型が初見の場合、example:tuples を参照してください。\n\n unknown型はany型の兄弟とも言うことができますが、\n any型は「最善策を知っている」場合に利用する一方で、\n unknown型は「最善策が分からないので、TSに型を伝える必要がある」\n 場合に利用します。\n 詳細は example:unknown-and-never を参照してください。\n","redirectHref":"ja/play/?#example/any"}},"staticQueryHashes":[]}