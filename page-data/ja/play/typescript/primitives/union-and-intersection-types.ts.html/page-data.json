{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html","result":{"pageContext":{"name":"Union and Intersection Types","title":"Union and Intersection Types","lang":"ja","html":" 型共用体は、いくつかの型である可能性がある\n オブジェクトを宣言する一つの方法です。\n\n<code><pre>\ntype StringOrNumber = string | number;\ntype ProcessStates = \"open\" | \"closed\";\ntype OddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;\ntype AMessyUnion = \"hello\" | 156 | { error: true };\n\n</pre></code>\n// string型ではなく、\"open\"や\"closed\"の利用が初めてであれば、\n example:literals を参照してください。\n\n 共用体の中に、異なる型を混ぜあわせることができます。\n そしてある値は、それらの型のうちの1つであるということを表せます。\n\n そしてTypeScriptは、値が実行時にどうなり得るのか、\n 決定する余地を残してくれます。\n\n 共用体は、型の拡張によって損なわれることがあります。\n 例：\n\n<code><pre>\ntype WindowStates = \"open\" | \"closed\" | \"minimized\" | string;\n\n</pre></code>\n// これにカーソルを合わせると、WindowStatesが\n 共用体ではなくstring型になっている様子を確認できます。\n これについて example:type-widening-and-narrowing で解説しています。\n\n 共用体がOR条件であるならば、交差はAND条件です。\n 交差型は、2つ以上の型が交差することで作成される、新しい型です。\n これにより型の合成が可能になります。\n\n<code><pre>\ninterface ErrorHandling {\n  success: boolean;\n  error?: { message: string };\n}\n\ninterface ArtworksData {\n  artworks: { title: string }[];\n}\n\ninterface ArtistsData {\n  artists: { name: string }[];\n}\n\n</pre></code>\n// これらのインターフェースは、同じエラー処理結果とそれぞれのデータ、\n 両方を持ち合わせた型合成をすることができます。\n\n<code><pre>\ntype ArtworksResponse = ArtworksData & ErrorHandling;\ntype ArtistsResponse = ArtistsData & ErrorHandling;\n\n// 例：\n\nconst handleArtistsResponse = (response: ArtistsResponse) => {\n  if (response.error) {\n    console.error(response.error.message);\n    return;\n  }\n\n  console.log(response.artists);\n};\n\n</pre></code>\n// 交差型と共用体型の組み合わせは、\n オブジェクトに2つの値のうちいずれかを含める必要がある\n といった場合に、とても役立ちます。\n\n<code><pre>\ninterface CreateArtistBioBase {\n  artistID: string;\n  thirdParty?: boolean;\n}\n\ntype CreateArtistBioRequest = (CreateArtistBioBase & { html: string }) | { markdown: string };\n\n</pre></code>\n// これにより、artistIDと、htmlまたはmarkdownを含んでいる\n リクエストのみを作成することができます。\n\n<code><pre>\nconst workingRequest: CreateArtistBioRequest = {\n  artistID: \"banksy\",\n  markdown: \"Banksy is an anonymous England-based graffiti artist...\",\n};\n\nconst badRequest: CreateArtistBioRequest = {\n  artistID: \"banksy\",\n};\n","redirectHref":"ja/play/?#example/union-and-intersection-types"}},"staticQueryHashes":[]}