{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/typescript/language-extensions/enums.ts.html","result":{"pageContext":{"name":"Enums","title":"Enums","lang":"ja","html":" EnumはTypeScriptを用いてJavaScriptで\n 固定値の集合を簡単に扱うための機能です。\n\n デフォルトでは、Enumは0から始まり\n オプション1つにつき1ずつ増加していく数値です。\n これは値が重要でないときに便利です。\n\n<code><pre>\nenum CompassDirection {\n  North,\n  East,\n  South,\n  West,\n}\n\n</pre></code>\n// Enumオプションに注釈を付けると、値を設定できます。\n 注釈をつけなければ、値のインクリメントは設定された値を引き継いで行われます。\n\n<code><pre>\nenum StatusCodes {\n  OK = 200,\n  BadRequest = 400,\n  Unauthorized,\n  PaymentRequired,\n  Forbidden,\n  NotFound,\n}\n\n// EnumはEnum名.値名で参照できます。\n\nconst startingDirection = CompassDirection.East;\nconst currentStatus = StatusCodes.OK;\n\n</pre></code>\n// Enumはキーから値と値からキーの双方による\n アクセスをサポートしています。\n\n<code><pre>\nconst okNumber = StatusCodes.OK;\nconst okNumberIndex = StatusCodes[\"OK\"];\nconst stringBadRequest = StatusCodes[400];\n\n</pre></code>\n// Enumに異なる型を設定することもできます。文字列型が一般的です。\n 文字列型を用いると、実行時に数字を探す必要がなくなるので、\n デバッグが簡単になります。\n\n<code><pre>\nenum GamePadInput {\n  Up = \"UP\",\n  Down = \"DOWN\",\n  Left = \"LEFT\",\n  Right = \"RIGHT\",\n}\n\n</pre></code>\n// もし、JavaScriptの実行時にobjectの数を減らしたいなら、\n const enumが使えます。\n\n const enumの値は\n 実行時にobjectを介して対応する値を見つけるのではなく、\n TypeScriptによるコードのトランスパイル時に置換されます。\n\n<code><pre>\nconst enum MouseAction {\n  MouseDown,\n  MouseUpOutside,\n  MouseUpInside,\n}\n\nconst handleMouseAction = (action: MouseAction) => {\n  switch (action) {\n    case MouseAction.MouseDown:\n      console.log(\"Mouse Down\");\n      break;\n  }\n};\n\n</pre></code>\n// トランスパイルされたJavaScriptのコードを見ると、\n 他のEnumはobjectや関数として残っているのに、\n MouseActionだけが残っていないことに気がつくでしょう。\n\n これは、handleMouseActionのswitch文にある\n MouseAction.MouseDownについても同様です。\n\n Enumには他にも多くの機能があります。\n 詳しくはTypeScriptハンドブックをご覧ください。\n\n https://www.typescriptlang.org/docs/handbook/enums.html\n","redirectHref":"ja/play/?#example/enums"}},"staticQueryHashes":[]}