{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html","result":{"pageContext":{"name":"Optional Chaining","title":"Optional Chaining","lang":"ja","html":"\n オプショナルチェイニングは3.7の開発中にTC39のStage 3合意に達しました。\n オプショナルチェイニングによって\n nullまたはundefinedだったときに\n 式の実行を即座に止めるコードが書けるようになります。\n\n プロパティへのアクセス\n\n データの中にアーティストそのものの情報やアーティストのプロフィールがない可能性がある\n アルバム情報を想像してみましょう。例えば、コンピレーションアルバムは\n 単一のアーティストについての情報を持っていないでしょう。\n\n<code><pre>\ntype AlbumAPIResponse = {\n  title: string;\n  artist?: {\n    name: string;\n    bio?: string;\n    previousAlbums?: string[];\n  };\n};\n\ndeclare const album: AlbumAPIResponse;\n\n</pre></code>\n// オプショナルチェイニングを用いると、\n コードは以下のように書けます。\n\n<code><pre>\nconst artistBio = album?.artist?.bio;\n\n// 以下のように書く代わりに:\n\nconst maybeArtistBio = album.artist && album.artist.bio;\n\n</pre></code>\n// 演算子は\"falsy\"な値(例えば、空文字列や0、NaN、もちろんfalse)に\n 対して異なる振る舞いをするため、\n この場合、?.演算子は&&演算子とは異なる振る舞いをします。\n\n オプショナルチェイニングはnullまたはundefinedのみを\n 処理を止め、undefinedを返す合図と捉えます。\n\n オプショナルな要素へのアクセス\n\n プロパティへのアクセスは .演算子を用いて行われます。\n オプショナルチェイニングは要素にアクセス際の[]演算子でも同様に機能します。\n\n<code><pre>\nconst maybeArtistBioElement = album?.[\"artist\"]?.[\"bio\"];\n\nconst maybeFirstPreviousAlbum = album?.artist?.previousAlbums?.[0];\n\n// オプショナルな呼び出し\n\n</pre></code>\n// オプショナルチェイニングは、実行時に存在するか分からない関数を扱うときに、\n 関数が存在するときにだけ呼び出す機能をサポートしています。\n これによって、伝統的に書いていた次のような\n コードを置き換えられます: if (func) func()\n\n 以下はAPI requestからのcallbackに対する\n オプショナルな呼び出しの例です。\n\n<code><pre>\nconst callUpdateMetadata = (metadata: any) => Promise.resolve(metadata); // API呼び出しのダミー\n\nconst updateAlbumMetadata = async (metadata: any, callback?: () => void) => {\n  await callUpdateMetadata(metadata);\n\n  callback?.();\n};\n\n</pre></code>\n// 3.7のリリース記事にて、オプショナルチェイニングについてより詳細に知ることができます:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"ja/play/?#example/optional-chaining"}},"staticQueryHashes":[]}