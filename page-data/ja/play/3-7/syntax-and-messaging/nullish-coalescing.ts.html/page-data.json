{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"ja","html":"\n Null合体演算子は左辺が\n nullまたはundefinedのときに\n 右辺の式を返す||演算子の代わりです。\n\n Null合体演算子とは対照的に、||演算子は空文字列や数字の0がfalseと判断される\n falsyチェックを用います。\n\n この機能の良い例は、\n キーが渡されなかったときに部分オブジェクトがデフォルト値を持つように処理する操作です。\n\n<code><pre>\ninterface AppConfiguration {\n  // デフォルト: \"(no name)\"; 空文字列は有効\n  name: string;\n\n  // デフォルト: -1; 0は有効\n  items: number;\n\n  // デフォルト: true\n  active: boolean;\n}\n\nfunction updateApp(config: Partial<AppConfiguration>) {\n  // Null合体演算子を使ったとき\n  config.name = config.name ?? \"(no name)\";\n  config.items = config.items ?? -1;\n  config.active = config.active ?? true;\n\n  // Null合体演算子を使わない現在の解決法\n  config.name = typeof config.name === \"string\" ? config.name : \"(no name)\";\n  config.items = typeof config.items === \"number\" ? config.items : -1;\n  config.active = typeof config.active === \"boolean\" ? config.active : true;\n\n  // ||演算子を用いると有効でないデータになる可能性がある\n  config.name = config.name || \"(no name)\"; // \"\" の入力が許容できない\n  config.items = config.items || -1; // 0の入力が許容できない\n  config.active = config.active || true; // とても悪いことに、常にtrueになる\n}\n\n</pre></code>\n// 3.7のリリース記事にて、Null合体演算子についてより詳細に知ることができます:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"ja/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}