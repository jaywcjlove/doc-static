{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/ja/tsconfig","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/react-&-webpack.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/ja/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/tsconfig"},{"path":"/en/tsconfig"},{"path":"/play"},{"path":"/en/play"},{"path":"/ja/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/es/play"},{"path":"/fa/play"},{"path":"/play/3-7/fixits/big-number-literals.ts"},{"path":"/play/3-7/fixits/const-to-let.ts"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/play/javascript/external-apis/typescript-with-node.js"},{"path":"/play/javascript/external-apis/typescript-with-web.js"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/play/javascript/helping-with-javascript/errors.ts"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/play/javascript/javascript-essentials/functions.ts"},{"path":"/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/play/javascript/modern-javascript/async-await.ts"},{"path":"/play/javascript/modern-javascript/immutability.ts"},{"path":"/play/javascript/modern-javascript/import-export.ts"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/play/javascript/working-with-classes/classes-101.ts"},{"path":"/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/play/javascript/working-with-classes/mixins.ts"},{"path":"/play/javascript/working-with-classes/this.ts"},{"path":"/play/playground/config/javascript-playgrounds.js"},{"path":"/play/playground/config/new-compiler-defaults.ts"},{"path":"/play/playground/language/automatic-type-acquisition.ts"},{"path":"/play/playground/language/fixits.ts"},{"path":"/play/playground/tooling/mobile-support.ts"},{"path":"/play/playground/tooling/sharable-urls.ts"},{"path":"/play/playground/tooling/typescript-versions.ts"},{"path":"/play/typescript/language/soundness.ts"},{"path":"/play/typescript/language/structural-typing.ts"},{"path":"/play/typescript/language/type-guards.ts"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/play/typescript/language-extensions/enums.ts"},{"path":"/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/play/typescript/meta-types/conditional-types.ts"},{"path":"/play/typescript/meta-types/discriminate-types.ts"},{"path":"/play/typescript/meta-types/indexed-types.ts"},{"path":"/play/typescript/meta-types/mapped-types.ts"},{"path":"/play/typescript/primitives/any.ts"},{"path":"/play/typescript/primitives/literals.ts"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/play/typescript/primitives/unknown-and-never.ts"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/play/typescript/type-primitives/nullable-types.ts"},{"path":"/play/typescript/type-primitives/tuples.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/es/play/typescript/primitives/any.ts"},{"path":"/es/play/typescript/primitives/literals.ts"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts"},{"path":"/es/play/typescript/type-primitives/tuples.ts"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts"},{"path":"/ja/play/3-7/fixits/const-to-let.ts"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/ja/play/typescript/language-extensions/enums.ts"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/ja/play/typescript/primitives/any.ts"},{"path":"/ja/play/typescript/primitives/literals.ts"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts"},{"path":"/ja/play/typescript/type-primitives/tuples.ts"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts"},{"path":"/zh/play/javascript/working-with-classes/this.ts"},{"path":"/zh/play/playground/config/javascript-playgrounds.js"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts"},{"path":"/zh/play/playground/language/fixits.ts"},{"path":"/zh/play/playground/tooling/mobile-support.ts"},{"path":"/zh/play/playground/tooling/sharable-urls.ts"},{"path":"/zh/play/playground/tooling/typescript-versions.ts"},{"path":"/zh/play/typescript/language/soundness.ts"},{"path":"/zh/play/typescript/language/structural-typing.ts"},{"path":"/zh/play/typescript/language/type-guards.ts"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/zh/play/typescript/language-extensions/enums.ts"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts"},{"path":"/zh/play/typescript/primitives/any.ts"},{"path":"/zh/play/typescript/primitives/literals.ts"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts"},{"path":"/zh/play/typescript/type-primitives/tuples.ts"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/community"},{"path":"/es/community"},{"path":"/ja/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/ja/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/ja/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/ja/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/ja/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/home"},{"path":"/es/docs/home"},{"path":"/ja/docs/home"},{"path":"/vo/docs/home"},{"path":"/zh/docs/home"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]},"markdownRemark":{"id":"f2b78338-5d4b-54e0-9cff-8b76f06cc3d3","html":"<h2>Intro to the TSConfig Reference</h2>\n<p>A TSConfig file in a directory indicates that the directory is the root of a TypeScript or JavaScript project.\nThe TSConfig file can be either a <code>tsconfig.json</code> or <code>jsconfig.json</code>, both have the same behavior and the same set of config variables.</p>\n<p>This page covers all of the different flags available inside a TSConfig file. It starts with an overview of every flag, then moves into the root attributes in the JSON file, then the <code>compilerOptions</code> which are the bulk of the options and wraps up with <code>watchOptions</code>.</p>\n<div id='full-option-list' class='indent'>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Project_Files_0>ファイルインクルージョン</a></h5>\n<ul>\n<li><a href=#exclude>exclude</a></li>\n<li><a href=#extends>extends</a></li>\n<li><a href=#files>files</a></li>\n<li><a href=#include>include</a></li>\n<li><a href=#references>references</a></li>\n<li><a href=#typeAcquisition>typeAcquisition</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Basic_Options_6172>プロジェクト設定</a></h5>\n<ul>\n<li><a href=#allowJs>allowJs</a></li>\n<li><a href=#checkJs>checkJs</a></li>\n<li><a href=#composite>composite</a></li>\n<li><a href=#declaration>declaration</a></li>\n<li><a href=#declarationMap>declarationMap</a></li>\n<li><a href=#downlevelIteration>downlevelIteration</a></li>\n<li><a href=#importHelpers>importHelpers</a></li>\n<li><a href=#incremental>incremental</a></li>\n<li><a href=#isolatedModules>isolatedModules</a></li>\n<li><a href=#jsx>jsx</a></li>\n<li><a href=#lib>lib</a></li>\n<li><a href=#module>module</a></li>\n<li><a href=#noEmit>noEmit</a></li>\n<li><a href=#outDir>outDir</a></li>\n<li><a href=#outFile>outFile</a></li>\n<li><a href=#plugins>plugins</a></li>\n<li><a href=#removeComments>removeComments</a></li>\n<li><a href=#rootDir>rootDir</a></li>\n<li><a href=#sourceMap>sourceMap</a></li>\n<li><a href=#target>target</a></li>\n<li><a href=#tsBuildInfoFile>tsBuildInfoFile</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Strict_Type_Checking_Options_6173>厳密なチェック</a></h5>\n<ul>\n<li><a href=#alwaysStrict>alwaysStrict</a></li>\n<li><a href=#noImplicitAny>noImplicitAny</a></li>\n<li><a href=#noImplicitThis>noImplicitThis</a></li>\n<li><a href=#strict>strict</a></li>\n<li><a href=#strictBindCallApply>strictBindCallApply</a></li>\n<li><a href=#strictFunctionTypes>strictFunctionTypes</a></li>\n<li><a href=#strictNullChecks>strictNullChecks</a></li>\n<li><a href=#strictPropertyInitialization>strictPropertyInitialization</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Module_Resolution_Options_6174>モジュール解決</a></h5>\n<ul>\n<li><a href=#allowSyntheticDefaultImports>allowSyntheticDefaultImports</a></li>\n<li><a href=#allowUmdGlobalAccess>allowUmdGlobalAccess</a></li>\n<li><a href=#baseUrl>baseUrl</a></li>\n<li><a href=#esModuleInterop>esModuleInterop</a></li>\n<li><a href=#moduleResolution>moduleResolution</a></li>\n<li><a href=#paths>paths</a></li>\n<li><a href=#preserveSymlinks>preserveSymlinks</a></li>\n<li><a href=#rootDirs>rootDirs</a></li>\n<li><a href=#typeRoots>typeRoots</a></li>\n<li><a href=#types>types</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Source_Map_Options_6175>ソースマップ</a></h5>\n<ul>\n<li><a href=#inlineSourceMap>inlineSourceMap</a></li>\n<li><a href=#inlineSources>inlineSources</a></li>\n<li><a href=#mapRoot>mapRoot</a></li>\n<li><a href=#sourceRoot>sourceRoot</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Additional_Checks_6176>Linter Checks</a></h5>\n<ul>\n<li><a href=#noFallthroughCasesInSwitch>noFallthroughCasesInSwitch</a></li>\n<li><a href=#noImplicitReturns>noImplicitReturns</a></li>\n<li><a href=#noUnusedLocals>noUnusedLocals</a></li>\n<li><a href=#noUnusedParameters>noUnusedParameters</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Experimental_Options_6177>実験的な機能</a></h5>\n<ul>\n<li><a href=#emitDecoratorMetadata>emitDecoratorMetadata</a></li>\n<li><a href=#experimentalDecorators>experimentalDecorators</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Command_line_Options_6171>コマンドライン</a></h5>\n<ul>\n<li><a href=#preserveWatchOutput>preserveWatchOutput</a></li>\n<li><a href=#pretty>pretty</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Watch_Options_999>Watch Options</a></h5>\n<ul>\n<li><a href=#fallbackPolling>fallbackPolling</a></li>\n<li><a href=#watchDirectory>watchDirectory</a></li>\n<li><a href=#watchFile>watchFile</a></li>\n</ul></div>\n<br />\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Advanced_Options_6178>Advanced</a></h5>\n<ul>\n<li><a href=#allowUnreachableCode>allowUnreachableCode</a></li>\n<li><a href=#allowUnusedLabels>allowUnusedLabels</a></li>\n<li><a href=#assumeChangesOnlyAffectDirectDependencies>assumeChangesOnlyAffectDirectDependencies</a></li>\n<li><a href=#charset>charset</a></li>\n<li><a href=#declarationDir>declarationDir</a></li>\n<li><a href=#diagnostics>diagnostics</a></li>\n<li><a href=#disableSizeLimit>disableSizeLimit</a></li>\n<li><a href=#disableSolutionSearching>disableSolutionSearching</a></li>\n<li><a href=#disableSourceOfProjectReferenceRedirect>disableSourceOfProjectReferenceRedirect</a></li>\n<li><a href=#emitBOM>emitBOM</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#emitDeclarationOnly>emitDeclarationOnly</a></li>\n<li><a href=#extendedDiagnostics>extendedDiagnostics</a></li>\n<li><a href=#forceConsistentCasingInFileNames>forceConsistentCasingInFileNames</a></li>\n<li><a href=#generateCpuProfile>generateCpuProfile</a></li>\n<li><a href=#importsNotUsedAsValues>importsNotUsedAsValues</a></li>\n<li><a href=#jsxFactory>jsxFactory</a></li>\n<li><a href=#keyofStringsOnly>keyofStringsOnly</a></li>\n<li><a href=#listEmittedFiles>listEmittedFiles</a></li>\n<li><a href=#listFiles>listFiles</a></li>\n<li><a href=#maxNodeModuleJsDepth>maxNodeModuleJsDepth</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#newLine>newLine</a></li>\n<li><a href=#noEmitHelpers>noEmitHelpers</a></li>\n<li><a href=#noEmitOnError>noEmitOnError</a></li>\n<li><a href=#noErrorTruncation>noErrorTruncation</a></li>\n<li><a href=#noImplicitUseStrict>noImplicitUseStrict</a></li>\n<li><a href=#noLib>noLib</a></li>\n<li><a href=#noResolve>noResolve</a></li>\n<li><a href=#noStrictGenericChecks>noStrictGenericChecks</a></li>\n<li><a href=#out>out</a></li>\n<li><a href=#preserveConstEnums>preserveConstEnums</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#reactNamespace>reactNamespace</a></li>\n<li><a href=#resolveJsonModule>resolveJsonModule</a></li>\n<li><a href=#skipDefaultLibCheck>skipDefaultLibCheck</a></li>\n<li><a href=#skipLibCheck>skipLibCheck</a></li>\n<li><a href=#stripInternal>stripInternal</a></li>\n<li><a href=#suppressExcessPropertyErrors>suppressExcessPropertyErrors</a></li>\n<li><a href=#suppressImplicitAnyIndexErrors>suppressImplicitAnyIndexErrors</a></li>\n<li><a href=#traceResolution>traceResolution</a></li>\n<li><a href=#useDefineForClassFields>useDefineForClassFields</a></li>\n</ul>\n</div>\n</div>\n<article id='top_level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div class='indent'>\n<div class='category'>\n<h2 id='Project_Files_0' ><a href='#Project_Files_0' name='Project_Files_0' aria-label=\"Link to the section ファイルインクルージョン\" title=\"Link to the section ファイルインクルージョン\">#</a>ファイルインクルージョン</h2>\n<p>これらの設定は TypeScript が適切なファイルを確実に選択できるようにします。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" title=\"Link to the compiler option:exclude\" id='exclude' href='#exclude' name='exclude'>#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>include</code>の解決時にスキップさせるファイル名やパターンのリストを指定します。</p>\n<p><strong>重要</strong>: <code>exclude</code>は<code>include</code>の結果として、どのファイルが含まれるべきか<em>のみ</em>に影響を与えます。\n<code>exclude</code>に指定されたファイルは、コードでの<code>import</code>や<code>types</code>でのインクルード、<code>/// &#x3C;reference</code> ディレクティブ、<code>files</code>リストの指定によって、コードベースの一部となり得ます。</p>\n<p><code>exclude</code>はコードベースに含まれているファイルの読み込みを<strong>防ぐ</strong>ための仕組みではありません。<code>include</code>設定の結果を変更するだけです。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>[\"node_modules\", \"bower_components\", \"jspm_packages\"]</code>, plus the value of <code>outDir</code> if one is specified.</p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#include\"><code>include</code></a>, <a href=\"#files\"><code>files</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" title=\"Link to the compiler option:extends\" id='extends' href='#extends' name='extends'>#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>extends</code>の値は、別の継承対象の設定ファイルへのパスを含む文字列です。\nNode.js におけるモジュール解決の流儀が用いられます。</p>\n<p>ベースとなるファイルからの設定が最初に読み込まれ、続いて継承ファイルの設定によってオーバーライドされます。設定ファイル内のすべての相対パスは、元の設定ファイルを起点として解決されます。</p>\n<p>継承した設定ファイルの<code>files</code>、<code>include</code>および<code>exclude</code>はベースとなる設定ファイルの内容を<em>上書き</em>します。\nまた、継承における循環参照は許容されません。</p>\n<h5 id=\"例\" style=\"position:relative;\"><a href=\"#%E4%BE%8B\" aria-label=\"例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例</h5>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"noImplicitAny\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"strictNullChecks\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"extends\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./configs/base\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"files\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"main.ts\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"supplemental.ts\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"extends\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"strictNullChecks\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" title=\"Link to the compiler option:files\" id='files' href='#files' name='files'>#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プログラムに含めるファイルの許可リストを指定します。ファイルが見つからない場合、エラーが発生します。</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {},</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"files\"</span><span style=\"color: #000000\">: [</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"core.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"sys.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"types.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"scanner.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"parser.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"utilities.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"binder.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"checker.ts\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"tsc.ts\"</span>\n<span style=\"color: #000000\">  ]</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>このオプションは、プロジェクトが少数のファイルから構成されていて、グロブパターンを必要としない場合で有用です。\nグロブパターンが必要な場合、<a href=\"#include\"><code>include</code></a>を利用してください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#include\"><code>include</code></a>, <a href=\"#exclude\"><code>exclude</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" title=\"Link to the compiler option:include\" id='include' href='#include' name='include'>#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プログラムに含めるファイル名またはパターンのリストを指定します。\nファイル名は<code>tsconfig.json</code>ファイルを含んでいるディレクトリからの相対パスとして解決されます。</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/**/*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"tests/**/*\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この設定は以下のようにマッチします。</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre><code>.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n</code></pre>\n<p><code>include</code>と<code>exclude</code>はグロブパターンのためのワイルドカードをサポートしています:</p>\n<ul>\n<li><code>*</code> ゼロ個以上の文字列にマッチ（ディレクトリセパレータは除く）</li>\n<li><code>?</code> 任意の 1 文字にマッチ（ディレクトリセパレータは除く）</li>\n<li><code>**/</code> 任意階層の任意ディレクトリにマッチ</li>\n</ul>\n<p>グロブパターンがファイルの拡張子を含まない場合、サポートされる拡張子のみが含まれるようになります（例：<code>.ts</code>、<code>.tsx</code>と<code>.d.ts</code>はデフォルトでインクルードされ、<code>.js</code>と<code>.jsx</code>は<code>allowJs</code>が設定された場合のみインクルードされます）。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#files\"><code>files</code></a>, <a href=\"#exclude\"><code>exclude</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" title=\"Link to the compiler option:references\" id='references' href='#references' name='references'>#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プロジェクト参照は TypeScript のプログラムを小さい断片に分けて構造化するための手法です。\nプロジェクト参照を用いると、ビルド時間やエディターとのインタラクションに必要な時間が大幅に改善され、コンポーネント間の論理分割が強制により、より洗練された方法でコードを整理できます。</p>\n<p>プロジェクト参照がどのように動作するかについては、このハンドブックの<a href=\"/docs/handbook/project-references.html\">Project References</a>を読んでください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeAcquisition-config'><a aria-label=\"Link to the compiler option: typeAcquisition\" title=\"Link to the compiler option:typeAcquisition\" id='typeAcquisition' href='#typeAcquisition' name='typeAcquisition'>#</a> Type Acquisition - <code>typeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エディターに JavaScript プロジェクトが存在する場合、TypeScript は<code>@types</code>で定義される DefinitelyTyped から提供されるファイルを用いて、<code>node_modules</code>のための型ファイルを自動で提供します。\nこれは自動型取得と呼ばれており、また設定の<code>typeAcquisition</code>を使ってカスタマイズできます。</p>\n<p>この機能を無効化したりカスタマイズする場合、プロジェクトのルートに<code>jsconfig.json</code>ファイルを作成してください:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"enable\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>プロジェクトに含めるべき特定のモジュールがある場合（それが<code>node_modules</code>には存在しない場合）:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>モジュールが自動で取得されるべきでない場合。例えば、そのライブラリが<code>node_modules</code>に含まれてはいるが、チームでこのライブラリを利用しないことを合意している場合:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"exclude\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jquery\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n</div>\n</article>\n<article id='compilerOptions'>\n<h3 id=\"compiler-options\" style=\"position:relative;\"><a href=\"#compiler-options\" aria-label=\"compiler options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiler Options</h3>\n<p>These options make up the bulk of TypeScript’s configuration and it covers how the language should work.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Basic_Options_6172\">プロジェクト設定</a></li>\n<li><a href=\"#Strict_Type_Checking_Options_6173\">厳密なチェック</a></li>\n<li><a href=\"#Module_Resolution_Options_6174\">モジュール解決</a></li>\n<li><a href=\"#Source_Map_Options_6175\">ソースマップ</a></li>\n<li><a href=\"#Additional_Checks_6176\">Linter Checks</a></li>\n<li><a href=\"#Experimental_Options_6177\">実験的な機能</a></li>\n<li><a href=\"#Advanced_Options_6178\">Advanced</a></li>\n<li><a href=\"#Command_line_Options_6171\">コマンドライン</a></li>\n</ul></nav>\n<div class='indent'>\n<div class='category'>\n<h2 id='Basic_Options_6172' ><a href='#Basic_Options_6172' name='Basic_Options_6172' aria-label=\"Link to the section プロジェクト設定\" title=\"Link to the section プロジェクト設定\">#</a>プロジェクト設定</h2>\n<p>これらの設定はプロジェクト実行時に期待される挙動を定義します。JavaScript ファイルがどこにどのように出力されるかや、既存 JavaScript コードとの統合レベルが設定されます。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" title=\"Link to the compiler option:allowJs\" id='allowJs' href='#allowJs' name='allowJs'>#</a> Allow JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>.ts</code>、<code>.tsx</code>ファイルだけでなく、JavaScript ファイルをプロジェクトへインポートできるようにします。例えば、次の JS ファイルを:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: card.js</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const defaultCardDeck: &amp;quot;Heart&amp;quot;'>defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Heart\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>TypeScript のファイルへインポートするとエラーとなるでしょう:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: string&amp;#13;import defaultCardDeck'>defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./card\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: string&amp;#13;import defaultCardDeck'>defaultCardDeck</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n<p><code>allowJs</code>を付与するとインポートは成功します:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: string&amp;#13;import defaultCardDeck'>defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./card\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: string&amp;#13;import defaultCardDeck'>defaultCardDeck</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>このフラグを使うと、<code>.ts</code>や<code>.tsx</code>ファイルが既存の JavaScript ファイルと共存可能となり、TypeScript ファイルを JS プロジェクトへ徐々に追加できるようになります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#checkJs\"><code>checkJs</code></a>, <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" title=\"Link to the compiler option:checkJs\" id='checkJs' href='#checkJs' name='checkJs'>#</a> Check JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>allowJs</code>と連携動作します。<code>checkJs</code>が有効化されている場合、JavaScript ファイル内のエラーが報告されるようになります。\nこれは、プロジェクトに含まれるすべての JavaScript ファイルの先頭で<code>// @ts-check</code>を付与することと等価です。</p>\n<p>例えば、TypeScript の<code>parseFloat</code>定義から、次の例は誤った JavaScript です。</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// parseFloatはstringのみを受け付けます</span>\n<span style=\"color: #267F99\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">pi</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">parseFloat</span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">3.124</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>このファイルが TypeScript のモジュールにインポートされた場合:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: constants.js</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;constants\\&amp;quot;&amp;quot;: typeof import(&amp;quot;constants&amp;quot;);&amp;#13;}'>module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\"><data-lsp lsp='module &amp;quot;constants&amp;quot;'>exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number'>pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number'>parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">3.124</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>いかなるエラーも報告されません。しかし、もし<code>checkJs</code>を有効化すれば、JavaScript ファイルで発生したエラーメッセージを受け取れるようになります。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: constants.js</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;constants\\&amp;quot;&amp;quot;: typeof import(&amp;quot;constants&amp;quot;);&amp;#13;}'>module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\"><data-lsp lsp='module &amp;quot;constants&amp;quot;'>exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number'>pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number'>parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\"><data-err>3.124</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type '3.124' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '3.124' is not assignable to parameter of type 'string'.</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#allowJs\"><code>allowJs</code></a>, <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" title=\"Link to the compiler option:composite\" id='composite' href='#composite' name='composite'>#</a> Composite - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>composite</code>オプションは、ビルドツール（<code>--build</code>モードでの TypeScript 自体を含む）\nがプロジェクトがビルドされているかどうかを迅速に判断できるようにするために特定の制約を適用します。</p>\n<p>この設定が有効なとき:</p>\n<ul>\n<li>明示的に設定されていない<code>rootDir</code>のデフォルト値は<code>tsconfig.json</code>ファイルを含むディレクトリとなります。</li>\n<li>すべての実装ファイルは、<code>include</code>パターンにマッチするか<code>files</code>リストに含まれなくてはなりません。この制約に違反した場合、<code>tsc</code>はどのファイルが指定されていないかを通知します。</li>\n<li><code>declaration</code>のデフォルト値が<code>true</code>になります。</li>\n</ul>\n<p>TypeScript のプロジェクト機能についてのドキュメントは<a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">ハンドブック</a>から参照できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>true</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#incremental\"><code>incremental</code></a>, <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" title=\"Link to the compiler option:declaration\" id='declaration' href='#declaration' name='declaration'>#</a> Declaration - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プロジェクト内のすべての TypeScript ファイルと JavaScript ファイルについて、<code>d.ts</code>ファイルを生成します。\n生成された<code>d.ts</code>ファイルはモジュールの外部 API を記述する定義ファイルです。\n<code>d.ts</code>ファイルを用いると、TypeScript などのツールは、型指定されていないコードに対して、Intelisence や正確な型定義を提供できるようになります。</p>\n<p><code>declaration</code>を<code>true</code>に設定している場合、次の TypeScript コードに対してコンパイラーを実行すると:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let helloWorld: string'>helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>次のような<code>index.js</code>ファイルが生成されます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>対応する<code>helloWorld.d.ts</code>ファイルは次のとおりです:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>JavaScript ファイルに対応する<code>.d.ts</code>を利用する場合、<a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a>や<a href=\"#outDir\"><code>outDir</code></a>を設定することで JavaScript ファイルを上書きしないようにできます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p>True when TS</p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" title=\"Link to the compiler option:declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap'>#</a> Declaration Map - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>元の<code>.ts</code>ソースファイルにマップされる<code>.d.ts</code>のソースマップを生成します。</p>\n<p>これにより、VS Code などのエディターは、<em>Go to Definition</em>のような機能で元の<code>.ts</code>ファイルにジャンプできるようになります。</p>\n<p>プエジェクト参照機能を利用している場合、このオプションの有効化を強く推奨します。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" title=\"Link to the compiler option:downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration'>#</a> Downlevel Iteration - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ダウンレベル化は、古いバージョンの JavaScript にトランスパイルするという意味の TypeScript の用語です。\nこのフラグは、モダンな JavaScript における新しいコンセプトの反復処理が古い JavaScript での実行時にどのように実装されるかについて、より正確なサポートを有効化します。</p>\n<p>ECMAScript 6 では、いくつかの新しい反復処理のための基本構文が加えられました: <code>for / of</code>ループ（<code>for (el of arr)</code>）、配列のスプレッド（<code>[a, ...b]</code>）、引数のスプレッド（<code>fn(...args)</code>）、<code>Symbol.iterator</code>です。\n<code>--downlevelIteration</code>は、<code>Symbol.iterator</code>の実装が存在している場合、ES5 環境におけるこれらの基本的な反復処理をより正確に利用可能になります。</p>\n<h4 id=\"例-for--ofでの効果\" style=\"position:relative;\"><a href=\"#%E4%BE%8B-for--of%E3%81%A7%E3%81%AE%E5%8A%B9%E6%9E%9C\" aria-label=\"例 for  ofでの効果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例: <code>for / of</code>での効果</h4>\n<p><code>downlevelIteration</code>が無効であるとき、任意のオブジェクトに対する<code>for / of</code>ループは旧来の<code>for</code>ループへダウンレベルトランスパイルされます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> < </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">++) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>これは大概の場合で期待通りの結果となりますが、ECMAScript 6 の挙動と 100%合致しているわけではありません。\n特定の文字列、たとえば絵文字（😜）は、<code>.length</code>は 2（もしくはそれ以上！）ですが、<code>for-of</code>ループでは 1 文字分として反復されねばなりません。\nより詳細な解説は<a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">Jonathan New による blog</a>を参照してください。</p>\n<p><code>downlevelIteration</code>が有効であるとき、TypeScript は<code>Symbol.iterator</code>の実装（ネイティブまたはポリフィル）をチェックするヘルパー関数を利用します。\nもし実装が存在しなければ、index を利用する反復処理へフォールバックします。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #267F99\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">next:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> >= </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> !</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">    };</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__values</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\"> }; }</span>\n<span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">return</span><span style=\"color: #000000\">)) </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Note:</strong> <code>Symbol.iterator</code>が実行時に存在しない場合、<code>downlevelIteration</code>は ECMAScript への準拠を保証しません。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"例-配列のスプレッドに対する効果\" style=\"position:relative;\"><a href=\"#%E4%BE%8B-%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E5%8A%B9%E6%9E%9C\" aria-label=\"例 配列のスプレッドに対する効果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例: 配列のスプレッドに対する効果</h4>\n<p>次のスプレッドされた配列について:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// 要素が1で、その後にarr2の要素が続く新しい配列を作成します</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">];</span></code></div></pre>\n<p>説明に沿って、次のように ES5 へダウンレベル化できます:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// 同じですよね？</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>しかし、これは特定の稀なケースにおいてはっきりとした違いがあります。\n例えば、配列に「穴」がある場合、スプレッドでは欠落したインデックスが<em>独自の</em>プロパティとして作成されますが、<code>concat</code>を利用した場合は作成されません:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// 「1」の要素が欠落している配列を作成します</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\"> = [</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, , </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spreaded</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concated</span><span style=\"color: #000000\"> = [].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #008000\">// true</span>\n<span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spreaded</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// false</span>\n<span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concated</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p><code>for / of</code>と同様、<code>downlevelIteration</code>は（利用可能であれば）<code>Symbol.iterator</code>を使い、より正確に ES6 の挙動を模倣します。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" title=\"Link to the compiler option:importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers'>#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Class の継承、配列やオブジェクトのスプレッド構文、async の処理など、特定のダウンレベル処理に対して、TypeScript はヘルパーコードを利用します。\nデフォルトでは、ヘルパーは利用されているファイルに挿入されます。\n同じヘルパーが異なる多くのモジュールで利用されている場合、コードの重複となる可能性があります。</p>\n<p><code>importHelpers</code>フラグが有効な場合、ヘルパー関数は<a href=\"https://www.npmjs.com/package/tslib\">tslib</a>モジュールからインポートされます。\n<code>tslib</code>を実行時にインポート可能であることを確認する必要があります。\nこの設定はモジュールに作用します。グローバルなスクリプトファイルはモジュールをインポートしません。</p>\n<p>例えば、次の TypeScript について:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">[]) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = [</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><a href=\"#downlevelIteration\"><code>downlevelIteration</code></a>と<code>importHelpers</code>が false のときは次の出力となります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #267F99\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = [], </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> ((</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">-- > </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">error</span><span style=\"color: #000000\"> }; }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">])) </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__spread</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__spread</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = [], </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> < </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]));</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spread</span><span style=\"color: #000000\">([</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><a href=\"#downlevelIteration\"><code>downlevelIteration</code></a>と<code>importHelpers</code>の両方を有効化すると、次の出力になります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">__spread</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spread</span><span style=\"color: #000000\">([</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>これらのヘルパー関数の独自実装を与える場合、<a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a>が利用できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a>, <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a>, <a href=\"#importHelpers\"><code>importHelpers</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" title=\"Link to the compiler option:incremental\" id='incremental' href='#incremental' name='incremental'>#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>最新のコンパイルでのプロジェクトグラフ情報をディスクにファイルとして保存するように TypeScript に指示します。\nこのオプションはコンパイルの出力先として指定されたフォルダに <code>.tsbuildinfo</code> のファイル群を作成します。\nこれらのファイルはコンパイルされた JavaScript が実行時に利用することはなく、安全に削除できます。このフラグの詳細については<a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 リリースノート</a>で確認できます。</p>\n<p>このファイル群の出力先フォルダを設定する場合、<a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>オプションを利用してください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>true</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#composite\"><code>composite</code></a>, <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" title=\"Link to the compiler option:isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules'>#</a> Isolated Modules - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript を TypeScript コードから JavaScript コードを生成する用途で利用可能な一方、<a href=\"https://babeljs.io\">Babel</a>などの他のトランスパイラの利用も一般的です。\nしかし、他のトランスパイラは一度に１ファイルのみを扱うため、全体の型システムの知識に依存したコード変換はできません。\nビルドツールで用いられる TypeScript の<code>ts.transpileModule</code>API についても、この制約が課せられます。</p>\n<p>この制限は、TypeScript の<code>const enum</code>や<code>namespace</code>のような機能を利用したときに実行時の問題を引き起こします。\n<code>isolatedModules</code>フラグは、単一ファイルのトランスパイル処理で正しく解釈できないコードが書かれたときに、TypeScript が警告を与えるように設定します。</p>\n<p>このフラグは、コードの挙動を変更せず、また、TypeScript のチェック・出力プロセスの挙動も変更しません。</p>\n<p><code>isolatedModules</code>が有効な場合に機能しないコードをいくつか例示します。</p>\n<h4 id=\"値でない識別子のエクスポート\" style=\"position:relative;\"><a href=\"#%E5%80%A4%E3%81%A7%E3%81%AA%E3%81%84%E8%AD%98%E5%88%A5%E5%AD%90%E3%81%AE%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88\" aria-label=\"値でない識別子のエクスポート permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>値でない識別子のエクスポート</h4>\n<p>TypeScript では、<em>型</em>をインポートしてからエクスポートできます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='import someType'>someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='import someFunction'>someFunction</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"someModule\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #795E26\"><data-lsp lsp='import someFunction'>someFunction</data-lsp></span><span style=\"color: #000000\">();</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='export someType'>someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='export someFunction'>someFunction</data-lsp></span><span style=\"color: #000000\"> };</span></code></div></pre>\n<p><code>someType</code>という値は存在しないため、出力された<code>export</code>文はエクスポートを試行しません（これは JavaScript の実行時エラーになります）:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunction</span><span style=\"color: #000000\"> };</span></code></div></pre>\n<p>単一ファイルのトランスパイラは、<code>someType</code>が値なのかどうかを知らないため、型のみを参照した名前をエクスポートするエラーになります。</p>\n<h4 id=\"module-でないファイル\" style=\"position:relative;\"><a href=\"#module-%E3%81%A7%E3%81%AA%E3%81%84%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"module でないファイル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module でないファイル</h4>\n<p><code>isolatedModules</code>が設定されている場合、すべての実装ファイルは<em>Module</em>でなくてはなりません（<code>import</code>/<code>export</code>の形式を利用しているという意味）。ファイルが Module でない場合、エラーが発生します。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\"><data-err>function</data-err></span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(): void'>fn</data-lsp></span><span style=\"color: #000000\">() {}</span>\n<span class=\"error\"><span>All files must be modules when the '--isolatedModules' flag is provided.</span><span class=\"code\">1208</span></span><span class=\"error-behind\">All files must be modules when the '--isolatedModules' flag is provided.</span></code></div></pre>\n<p>この制約は<code>.d.ts</code>ファイルには適用されません。</p>\n<h4 id=\"const-enumメンバーへの参照\" style=\"position:relative;\"><a href=\"#const-enum%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%81%B8%E3%81%AE%E5%8F%82%E7%85%A7\" aria-label=\"const enumメンバーへの参照 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>const enum</code>メンバーへの参照</h4>\n<p>TypeScript では、<code>const enum</code>のメンバへ参照すると、出力される JavaScript では、その参照は実際の値へと置換されます。TypeScript による変換は次のようになります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='const enum Numbers'>Numbers</data-lsp></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.Zero = 0'>Zero</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.One = 1'>One</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers'>Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.Zero = 0'>Zero</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers'>Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.One = 1'>One</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>JavaScript では:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\"> + </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>他のトランスパイラはメンバー値の知識無しに<code>Numbers</code>への参照を置換できません。これが取り残されると、実行時のエラーとなります（なぜなら<code>Numbers</code>オブジェクトは実行時に存在しないからです）。\nしたがって、<code>isolatedModules</code>が設定されている場合、<code>const enum</code>メンバーへのアンビエント参照はエラーとなります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" title=\"Link to the compiler option:jsx\" id='jsx' href='#jsx' name='jsx'>#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JSX 構文がどのように JavaScript ファイルに出力されるかを設定します。\n<code>.tsx</code>で終わるファイルの JS 出力にのみ影響します。</p>\n<ul>\n<li><code>preserve</code>: JSX を変更せずに<code>.jsx</code>ファイルを出力します</li>\n<li><code>react</code>: JSX を等価な<code>react.createElement</code>に変換して<code>.js</code>ファイルを出力します</li>\n<li><code>react-native</code>: JSX を変更せずに、<code>.js</code>ファイルを出力します</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>\"preserve\"</code></p>\n<td/></tr>\n<tr><td>Allowed</td><td><p><code>react</code> (default), <code>react-native</code>, <code>preserve</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" title=\"Link to the compiler option:lib\" id='lib' href='#lib' name='lib'>#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript には組み込みの JS API（例：<code>Math</code>）の型定義や、ブラウザーで利用される API（例：<code>document</code>）の型定義がデフォルトで組み込まれています。\n指定した<code>target</code>に合致する新しい JS 機能の API の型定義も TypeScript には組み込まれています。例えば、<code>Map</code>の定義は<code>target</code>が<code>ES6</code>かそれよりも新しいときに利用可能です。</p>\n<p>いくつかの理由により、これらを変更したい場合があります:</p>\n<ul>\n<li>プログラムはブラウザーで動作させる必要がないため、<code>\"dom\"</code>の型定義が不要である</li>\n<li>利用している実行環境では特定の JavaScript API を提供しているが（Polyfill を利用しているかもしれません）、指定された ECMAScript のすべての構文をサポートしているわけではない</li>\n<li>より上位の ECMAScript バージョンについて、すべてではなく、部分的な Polyfill や実装が利用可能である</li>\n</ul>\n<h3 id=\"high-level-libraries\" style=\"position:relative;\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>ES3 と ES5 のすべての機能を利用するための型定義。</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>ES2015（ES6）で利用可能な API - <code>array.find</code>、<code>Promise</code>、<code>Proxy</code>、<code>Symbol</code>、<code>Map</code>、<code>Set</code>、<code>Reflect</code>など。</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>“ES2015”のエイリアス</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>ES2016 で利用可能な API - <code>array.include</code>など。</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>“ES2016”のエイリアス</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>ES2017 で利用可能な API - <code>Object.entries</code>、<code>Object.values</code>、<code>Atomics</code>、<code>SharedArrayBuffer</code>、<code>date.formatToParts</code>、typed arrays など。</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>ES2018 で利用可能な API - <code>async</code> iterables、<code>promise.finally</code>、<code>Intl.PluralRules</code>、<code>rexexp.groups</code>など。</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>ES2019 で利用可能な API - <code>array.flat</code>、<code>array.flatMap</code>、<code>Object.fromEntries</code>、<code>string.trimStart</code>、<code>string.trimEnd</code>など。</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>ES2020 で利用可能な API - <code>string.matchAll</code>など。</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>ESNext で利用可能な API - JavaScript の仕様変遷によって内容は変化します。</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a>の型定義 - <code>window</code>や<code>document</code>など。</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a>コンテキストで利用可能な API</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td><a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a>の API</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"個別のライブラリコンポーネント\" style=\"position:relative;\"><a href=\"#%E5%80%8B%E5%88%A5%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\" aria-label=\"個別のライブラリコンポーネント permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>個別のライブラリコンポーネント</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>もしこのリストが古くなっている場合は、完全なリストを<a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>で読むことができます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" title=\"Link to the compiler option:module\" id='module' href='#module' name='module'>#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>より詳細については、ハンドブックの<a href='/docs/handbook/modules.html#ambient-modules'>Modules</a>の章を参照してください。おそらく<code>\"CommonJS\"</code>が求められるでしょう。</p>\n<p>次のファイルに対する出力の例をいくつか示します:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&amp;#13;import valueOfPi'>valueOfPi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const twoPi: number'>twoPi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&amp;#13;import valueOfPi'>valueOfPi</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">factory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #267F99\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">amd</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #001080\">System</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">exports_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__moduleName</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">setters:</span><span style=\"color: #000000\"> [</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            }</span>\n<span style=\"color: #000000\">        ],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">execute:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #795E26\">exports_1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"twoPi\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">    };</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<h4 id=\"esnext--es2020\" style=\"position:relative;\"><a href=\"#esnext--es2020\" aria-label=\"esnext  es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code> / <code>ES2020</code></h4>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Allowed</td><td><p><code>CommonJS</code> (default if <code>target</code> is <code>ES3</code> or <code>ES5</code>), <code>ES6</code>/<code>ES2015</code> (synonymous, default for <code>target</code> <code>ES6</code> and higher), <code>ES2020</code>, <code>None</code>, <code>UMD</code>, <code>AMD</code>, <code>System</code>, <code>ESNext</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" title=\"Link to the compiler option:noEmit\" id='noEmit' href='#noEmit' name='noEmit'>#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JavaScript ソースコード、ソースマップ、型定義のファイルを出力しないようにします。</p>\n<p>これにより、<a href=\"https://babeljs.io\">Babel</a>や<a href=\"https://github.com/swc-project/swc\">swc</a>などの TypeScript ファイルを JavaScript 環境内で実行可能なファイルへ変換するための別のツールを追加できます。</p>\n<p>TypeScript をエディター統合やソースコードの型チェックツールとして利用できるようになります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" title=\"Link to the compiler option:outDir\" id='outDir' href='#outDir' name='outDir'>#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、<code>.js</code>ファイル（<code>.d.ts</code>や<code>.js.map</code>ファイルも同様）がこのディレクトリ内に出力されます。\n元のソースファイルのディレクトリ構造は保存されます。結果のルート構造が意図どおりでない場合は、<a href=\"#rootDir\">rootDir</a>を参照してください。</p>\n<p>設定しない場合、<code>.js</code>ファイルは<code>.ts</code>ファイルを作成したのと同じディレクトリに出力されます。</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">$ tsc</span>\n\n<span style=\"color: #000000\">example</span>\n<span style=\"color: #000000\">├── index.js</span>\n<span style=\"color: #000000\">└── index.ts</span></code></div></pre>\n<p>次のような<code>tsconfig.json</code>の場合:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この設定で<code>tsc</code>を実行すると、ファイルは指定された<code>dist</code>フォルダに生成されます。</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">$ tsc</span>\n\n<span style=\"color: #000000\">example</span>\n<span style=\"color: #000000\">├── dist</span>\n<span style=\"color: #000000\">│   └── index.js</span>\n<span style=\"color: #000000\">├── index.ts</span>\n<span style=\"color: #000000\">└── tsconfig.json</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>n/a</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#out\"><code>out</code></a>, <a href=\"#outFile\"><code>outFile</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" title=\"Link to the compiler option:outFile\" id='outFile' href='#outFile' name='outFile'>#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、すべての<em>グローバルな</em>（モジュールでない）ファイルは指定した単一の出力ファイルに結合されます。</p>\n<p>もし<code>module</code>が<code>system</code>か<code>amd</code>の場合、この単一出力ファイルのグローバルなコンテンツの後ろにすべてのモジュールファイルも結合されます。</p>\n<p>Note: <code>module</code>が<code>None</code>、<code>System</code>、<code>AMD</code>のいずれかでない限り、<code>outFile</code>は使用できません。\nこのオプションは CommonJS または ES6 Modules にバンドルする目的では使用<em>できません</em>。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>n/a</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#out\"><code>out</code></a>, <a href=\"#outDir\"><code>outDir</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" title=\"Link to the compiler option:plugins\" id='plugins' href='#plugins' name='plugins'>#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エディタ内部で動作させる Language Service のプラグインを列挙します。</p>\n<p>Language Service プラグインを用いることで、ユーザーは TypeScript ファイルから追加情報を受け取ることができます。プラグインは、TypeScript とエディタ間でやりとりされているメッセージを拡張したり、プラグイン独自エラーメッセージを提供できます。</p>\n<p>例:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — テンプレート文字列による SQL ビルダについて、SQL の構文チェックを追加します。</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — テンプレート文字列内部の CSS を構文チェック機能を提供します。</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — eslint のエラーメッセージを出力や、出力されたエラーメッセージの修正機能を提供します。</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — テンプレート文字列内部の GraphQL クエリについて、バリデーションと自動補完機能を提供します。</li>\n</ul>\n<p>VS Code には、拡張のための<a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">Lnguage Service プラグインの自動読込 </a>機能があるため、<code>tsconfig.json</code>にプラグインの定義を書かずにエディタ上でプラグインを動作させることもできます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" title=\"Link to the compiler option:removeComments\" id='removeComments' href='#removeComments' name='removeComments'>#</a> Remove Comments - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript ファイルを JavaScript へ変換するときに、すべてのコメントを除去します。デフォルト値は<code>false</code>です。</p>\n<p>例えば、次の JSDoc コメントを持つ TypeScript ファイルに対して:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** ポルトガル語に翻訳された'Hello world' */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p><code>removeComments</code>が<code>true</code>であるとき、次のようになります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p><code>removeComments</code>が設定されていない・または<code>false</code>であるときは次のようになります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** ポルトガル語に翻訳された'Hello world' */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>つまり、コメントは JavaScript コードに表示されるようになります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" title=\"Link to the compiler option:rootDir\" id='rootDir' href='#rootDir' name='rootDir'>#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>デフォルト値</strong>: 型定義ファイルでないすべての入力ファイルの中での最長の共通パス。<code>composite</code>が設定されている場合、この値の代わりに<code>tsconfig.json</code>を含むディレクトリがデフォルトとなります。</p>\n<p>TypeScript はファイルをコンパイルするとき、入力ディレクトリ内のディレクトリ構造が同じになるように出力ディレクト内の構造を保ちます。</p>\n<p>例えば、いくつかの入力ファイルがあったとしましょう:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n</code></pre>\n<p>推定される<code>rootDir</code>の値は、型定義ファイルでないすべての入力ファイルの中での最長の共通パス、この例では<code>core/</code>となります。</p>\n<p><code>outDir</code>が<code>dist</code>だったとすると、TypeScript は次のツリー構造を出力します:</p>\n<pre><code>MyProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n</code></pre>\n<p>ただし、出力ディレクトリ内に<code>core</code>を含めることを意図している場合があります。\n<code>rootDir: \".\"</code>を<code>tsconfig.json</code>に設定すると、TypeScript は次のツリー構造を出力します:</p>\n<pre><code>MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js\n</code></pre>\n<p>重要なこととして、<code>rootDir</code>は<strong>どのファイルがコンパイルに含められるかに影響しません</strong>。\n<code>tsconfig.json</code>の<code>include</code>、<code>exclude</code>や<code>files</code>設定との相互作用はありません。</p>\n<p>TypeScript は<code>outDir</code>以外のディレクトリに出力ファイルを書き込むことはなく、ファイルの入力をスキップすることもありません。\nこのため、<code>rootDir</code>は出力する必要があるすべてのファイルが rootDir パスの下にあることを強制します。</p>\n<p>例えば、次のツリー構造があったとしましょう:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts\n</code></pre>\n<p><code>rootDir</code>を<code>core</code>に、<code>include</code>を<code>*</code>に設定すると、<code>outDir</code>の<em>外部</em>（i.e. <code>../helpers.ts</code>）に出力する必要のあるファイル（<code>helpers.ts</code>）が生まれるため、エラーとなります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p>Computed from the list of input files</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" title=\"Link to the compiler option:sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap'>#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">ソースマップファイル</a>の生成を有効化します。\nこれらのファイルにより、出力された JavaScript ファイルが実際に動作させるときに、デバッガーやその他のツールが元の TypeScript ソースファイルを表示できるようになります。\nソースマップファイルは<code>.js.map</code>（または<code>.jsx.map</code>）として、対応する<code>.js</code>ファイルとともに出力されます。</p>\n<p>次の例のように、<code>.js</code>ファイルには、外部ツールにソースマップファイルがどこにあるかを示すためのソースマップコメントが含まれるようになります:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.ts</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p><code>sourceMap</code>を<code>true</code>に設定してコンパイルすると、次の JavaScript ファイルが生成されます:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.js</span>\n<span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span>\n<span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></code></div></pre>\n<p>この設定は次のような json 形式のマップファイルも生成します:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.js.map</span>\n<span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"file\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ex.js\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sources\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"../ex.ts\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"names\"</span><span style=\"color: #000000\">: [],</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"mappings\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" title=\"Link to the compiler option:target\" id='target' href='#target' name='target'>#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>モダンブラウザーはすべての ES6 機能をサポートしているため、<code>ES6</code>は良い選択です。\nもし、コードをより古い環境へデプロイするのであれば、より下位の値を、逆により新しい環境での動作が保証される場合は、より上位の値をターゲットとして選択してください。</p>\n<p><code>target</code>設定は、どの JS 機能が古い JavaScript 構文にトランスパイルされ、どの機能がそのまま残されるかを変更します。\n例えば<code>target</code>が ES5 以下である場合、アロー関数<code>() => this</code>は等価な<code>function</code>式へ変換されます。</p>\n<p><code>target</code>の変更は<a href=\"#lib\"><code>lib</code></a>のデフォルト値も変更します。\n必要に応じて<code>target</code>と<code>lib</code>の値を組み合わせることも可能ですが、簡単に<code>target</code>の値のみを設定することも可能です。</p>\n<p>もし動作環境が Node.js のみであるならば、Node のベースバージョン毎に推奨される<code>target</code>は次のとおりです:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Supported Target</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>この表は<a href=\"https://node.green\">node.green</a>のデータベースを元に作成しています。</p>\n<p><code>ESNext</code> という特別な値は TypeScript がサポートしている最新のターゲットバージョンを参照します。\nこの設定値は、異なる TypeScript のバージョン間におけるターゲットバージョンの一致を意味せず、アップグレード予測が困難になる可能性があるため、注意して利用する必要があります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Allowed</td><td><p><code>ES3</code> (default), <code>ES5</code>, <code>ES6</code>/<code>ES2015</code> (synonomous), <code>ES7</code>/<code>ES2016</code>, <code>ES2017</code>, <code>ES2018</code>, <code>ES2019</code>, <code>ES2020</code>, <code>ESNext</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" title=\"Link to the compiler option:tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile'>#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>この設定により、インクリメンタルコンパイル情報を複合プロジェクトの一部として保存するためのファイルを指定できるため、より大きな TypeScript コードベースを迅速に構築できます。\n複合プロジェクトについては<a href=\"/docs/handbook/project-references.html\">ハンドブック</a>でより詳しく知ることができます。</p>\n<p>このオプションは、TypeScript がプロジェクトのビルド状態を追跡するためのファイルをディスクのどこに保存するかを設定します。\nデフォルトは、JavaScript ファイルの出力先と同じフォルダに保存されます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>.tsbuildinfo</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n<td/></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Strict_Type_Checking_Options_6173' ><a href='#Strict_Type_Checking_Options_6173' name='Strict_Type_Checking_Options_6173' aria-label=\"Link to the section 厳密なチェック\" title=\"Link to the section 厳密なチェック\">#</a>厳密なチェック</h2>\n<p>ビルド時に利用可能なすべての改善を有効化するため、<a href=\"#strict\"><code>strict</code></a>オプションの利用を推奨します。</p>\n<p>TypeScript は幅広い JavaScript パターンと、デフォルトで様々なスタイルの柔軟性を許容しています。\nコードベースの安全性と潜在的なスケーラビリティは、これらのテクニックとしばしば相反します。</p>\n<p>サポートされる JavaScript の多様さにより、TypeScript を新しいバージョンへアップグレードすると 2 種類のエラーが明らかになるでしょう:</p>\n<ul>\n<li>すでにコードベースに存在していたエラー。TypeScript の JavaScript に対する理解が洗練されて発見されます。</li>\n<li>新しい問題領域に取り組む一連の新しいエラー。</li>\n</ul>\n<p>通常、TypeScript は後者のエラーに対するコンパイラフラグを追加しますが、デフォルトでは有効化しません。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" title=\"Link to the compiler option:alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict'>#</a> Always Strict - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ファイルを ECMAScript の strict モードで解釈し、各ファイルへ”use strict”を出力することを保証します。</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript strict</a>モードは ES5 で導入され、JavaScript エンジンが実行時にパフォーマンスを改善できるよう微調整されます。代わりにいくつかのエラーが無視されずにスローされるようになります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" title=\"Link to the compiler option:noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny'>#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>いくつかの型アノテーションが存在しないケースにおいて、TypeScript は変数の型が推論できないときに、<code>any</code>型へフォールバックします。</p>\n<p>このため、エラーを見逃す可能性があります。例えば:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// エラーにならない？</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any'>subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">));</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">42</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>ただし、<code>noImplicitAny</code>を有効化すると、TypeScript は型が<code>any</code>に推論されるときは常にエラーを発生させます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) s: any'>s</data-lsp></data-err></span><span style=\"color: #000000\">) {</span>\n<span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any'>subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">));</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" title=\"Link to the compiler option:noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis'>#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>暗黙的に<code>any</code>型となる this 式でエラーを発生させます。</p>\n<p>例えば、以下の Class は<code>this.width</code>と<code>this.height</code>にアクセスする関数を返しています。\nしかし、<code>getAreaFunction</code>の内側の関数内でのコンテキストにおける<code>this</code>は Rectangle のインスタンスではありません。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Rectangle'>Rectangle</data-lsp></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.width: number'>width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.height: number'>height</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) width: number'>width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) height: number'>height</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.width: number'>width</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) width: number'>width</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.height: number'>height</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) height: number'>height</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Rectangle.getAreaFunction(): () => number'>getAreaFunction</data-lsp></span><span style=\"color: #000000\">() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any'>width</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any'>height</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span style=\"color: #000000\">    };</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" title=\"Link to the compiler option:strict\" id='strict' href='#strict' name='strict'>#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>strict</code>フラグは、プログラムの正しさを強く保証するための幅広い型チェックの挙動を有効化します。\nこのオプションの有効化は、以降で述べるすべての<em>strict モードファミリー</em>オプションの有効化と等価です。\n必要に応じて、個別の strict モードファミリーを無効化できます。</p>\n<p>今後の TypeScript のバージョンがこのフラグの配下により厳密なチェックを導入するかもしれません。この場合、TypeScript のアップグレードにより、プログラムに新しい種類のエラーが発見されることもあるでしょう。\n適切かつ可能な場合、この挙動を無効化するための対応するフラグも追加されます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#strictBindCallApply\"><code>strictBindCallApply</code></a>, <a href=\"#strictFunctionTypes\"><code>strictFunctionTypes</code></a>, <a href=\"#strictPropertyInitialization\"><code>strictPropertyInitialization</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" title=\"Link to the compiler option:strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply'>#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定されている場合、関数の組み込みメソッドの<code>call</code>と<code>bind</code>と<code>apply</code>について、元となっている関数に対して正しい引数で呼び出されているかを TypeScript がチェックします:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// strictBindCallApplyが有効な場合</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(s: string, radix?: number | undefined): number'>parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const n1: number'>n1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&amp;lt;undefined, [string], number>(this: (this: undefined, args_0: string) => number, thisArg: undefined, args_0: string): number'>call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"10\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const n2: number'>n2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&amp;lt;undefined, [string], number>(this: (this: undefined, x: string) => number, thisArg: undefined, x: string): number'>call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\"><data-err>false</data-err></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Argument of type 'false' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'false' is not assignable to parameter of type 'string'.</span></code></div></pre>\n<p>設定されていない場合、これらの関数は任意の引数を受け取って<code>any</code>を返します:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// strictBindCallApplyが無効な場合</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(s: string, radix?: number | undefined): number'>parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Note: エラーになりません。戻り値の型は'any'です。</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const n: any'>n</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Function.call(this: Function, thisArg: any, ...argArray: any[]): any'>call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" title=\"Link to the compiler option:strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes'>#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>有効化すると、このフラグは関数のパラメータをより正しくチェックするようになります。</p>\n<p>次は<code>strictFunctionTypes</code>が無効な場合の基本的な例です:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// 安全でない代入</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">// 安全でない呼び出し - エラーとなります</span>\n<span style=\"color: #795E26\"><data-lsp lsp='let func: (ns: string | number) => void'>func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">10</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p><code>strictFunctionTypes</code>を<em>有効化</em>すると、エラーが正しく検知されます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">// 安全でない代入は抑止されます</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code></div></pre>\n<p>私達はこの機能を開発する際、本質的に安全でない Class 階層を数多く見つけました。中には DOM のものも含まれていました。\nこのため、この設定は<em>function</em>構文で記述された関数にのみ適用され、<em>メソッド</em>として記述された関数には適用されません:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type Methodish = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>Methodish</data-lsp></span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">):</span><span style=\"color: #267F99\"> void</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// 最終的に安全でない代入となりますが、エラー検知はされません</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const m: Methodish'>m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type Methodish = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>Methodish</data-lsp></span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #001080\"><data-lsp lsp='const m: Methodish'>m</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">10</span><span style=\"color: #000000\">);</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" title=\"Link to the compiler option:strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks'>#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>strictNullChecks</code>が<code>false</code>のとき、<code>null</code>と<code>undefined</code>は言語により事実上無視されます。\nこれは実行時の予期しないエラーの原因となります。</p>\n<p><code>strictNullChecks</code>が<code>true</code>のとき、<code>null</code>と<code>undefined</code>はそれ自身に明示的な型が与えられ、具体的な値を期待して利用しようとした場合にエラーとなります。</p>\n<p>例えば、次の TypeScript コードの<code>users.find</code>は実際にユーザーを見つけられる保証がありません。\nしかし、ユーザーを見つけられたかのようにコードを書くことができます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp></span><span style=\"color: #000000\"> = [</span>\n<span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string'>name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number'>age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">12</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string'>name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number'>age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">32</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} (+1 overload)'>find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n<p><code>strictNullChecks</code>を<code>true</code>にすると、<code>loggedInUser</code>を利用する前に存在を確認していないことを示すエラーが発生します。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp></span><span style=\"color: #000000\"> = [</span>\n<span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string'>name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number'>age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">12</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string'>name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number'>age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">32</span><span style=\"color: #000000\"> },</span>\n<span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined (+1 overload)'>find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #000000\">);</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span></code></div></pre>\n<p>単純化してみると配列の<code>find</code>関数が次のようになっていることから、2 つ目の例はエラーとなったのです:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// strictNullChecks: trueのとき</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Array</span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">boolean</span><span style=\"color: #000000\">):</span><span style=\"color: #267F99\"> S </span><span style=\"color: #000000\">|</span><span style=\"color: #267F99\"> undefined</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// strictNullChecks: falseのとき、undefinedは型システムから取り除かれ、</span>\n<span style=\"color: #008000\">// 常に結果が見つかるかのようにコードを書けるようになります</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Array</span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">boolean</span><span style=\"color: #000000\">):</span><span style=\"color: #267F99\"> S</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" title=\"Link to the compiler option:strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization'>#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>true に設定した場合、Class プロパティが宣言されているがコンストラクターで値がセットされていないときに、TypeScript はエラーを発生させます。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class UserAccount'>UserAccount</data-lsp></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string'>name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.accountType: string'>accountType</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"user\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) UserAccount.email: string'>email</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.address: string | undefined'>address</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">undefined</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 注 this.emailがセットされていません</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>上記の場合:</p>\n<ul>\n<li><code>this.name</code>は具体的に設定されています。</li>\n<li><code>this.accountType</code>はデフォルト値が設定されています。</li>\n<li><code>this.email</code>は値が設定されていないため、エラーとなります。</li>\n<li><code>this.address</code>は<code>undefined</code>になりうる値として宣言されており、これは値の設定が必須でないことを意味しています。</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code>, unless <code>strict</code> is set</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n<td/></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Module_Resolution_Options_6174' ><a href='#Module_Resolution_Options_6174' name='Module_Resolution_Options_6174' aria-label=\"Link to the section モジュール解決\" title=\"Link to the section モジュール解決\">#</a>モジュール解決</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" title=\"Link to the compiler option:allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports'>#</a> Allow Synthetic Default Imports - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>allowSyntheticDefaultImports</code>を true に設定すると、次のようなインポートが可能になります:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>下記のようにする必要はありません:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>モジュールが default export を<strong>指定していなくても</strong>利用可能です。</p>\n<p>このオプションは TypeScript が出力する JavaScript へは影響しません。型チェックにのみ影響があります。\nこのオプションにより、モジュールの default export を自然に扱えるようにする追加コードが出力されている環境では、TypeScript と Babel の挙動が揃います。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p>module === \"system\" or esModuleInterop</p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#esModuleInterop\"><code>esModuleInterop</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" title=\"Link to the compiler option:allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess'>#</a> Allow Umd Global Access - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>allowUmdGlobalAccess</code>を true に設定すると、モジュールの内部から UMD へグローバルにアクセスできるようになります。モジュールファイルとは、import や export を使っているファイルのことです。このフラグを利用しない場合、UMD モジュールを利用するには import 宣言文が必要です。</p>\n<p>このフラグの利用例は、特定のライブラリ（jQuery や Lodash など）が常に実行時に利用可能であると分かっているが、import 文ではそのライブラリにアクセスできないような web プロジェクトです。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" title=\"Link to the compiler option:baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl'>#</a> Base Url - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>絶対パス参照でないモジュール名を解決するための基点となるディレクトリを設定できます。</p>\n<p>絶対パスで解決するために、ルートフォルダを決めることもできます。すなわち、</p>\n<pre><code>baseUrl\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json\n</code></pre>\n<p><code>\"baseUrl\": \"./\"</code>とすると、このプロジェクト内では、TypeScript は<code>tsconfig.json</code>と同じフォルダからファイルの探索を行います。</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello/world\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p><code>\"../\"</code>や<code>\"./\"</code>のような毎度のインポート文にうんざりしていたり、\nファイルを移動するときにインポート文を変更する必要がある場合、このオプションは修正するための良い方法です。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" title=\"Link to the compiler option:esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop'>#</a> ES Module Interop - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>すべてのインポートに対して Namespace オブジェクトを生成することによって、CommonJS と ES Modules 間で相互運用可能なコードを出力します。</p>\n<p>TypeScript は EcmaScript のモジュール標準に準拠しています。\nつまり、<code>import React from \"react\"</code>のような構文をサポートするには、そのファイルに具体的な<code>default</code> export が含まれている必要があります。\nCommonJS のモジュールでは、このエクスポートの方法は稀です。<code>esModuleInterop</code>が true でなければ:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: utilFunctions.js</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getStringLength: (str: any) => any'>getStringLength</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any'>str</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any'>str</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any'>length</data-lsp></span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #267F99\"><data-lsp lsp='module export=&amp;#13;(property) export=: {&amp;#13;    getStringLength: (str: any) => any;&amp;#13;}'>module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\"><data-lsp lsp='module export=&amp;#13;(property) export=: {&amp;#13;    getStringLength: (str: any) => any;&amp;#13;}'>exports</data-lsp></span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) getStringLength: (str: any) => any'>getStringLength</data-lsp></span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import utils'>utils</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./utilFunctions\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const count: any'>count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='import utils'>utils</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) getStringLength: (str: any) => any'>getStringLength</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Check JS\"</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>インポート可能なオブジェクトに<code>default</code>が無いため、このコードは動作しないでしょう。このコードが動作するように見えたとしても、です。\nBabel のようなトランスパイラは、利便のために default が存在しない場合に自動で作成します。モジュールを次のようにするのです:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: utilFunctions.js</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getStringLength</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">allFunctions</span><span style=\"color: #000000\"> = {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\">getStringLength</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #267F99\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">allFunctions</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>このコンパイラフラグを有効化すると、<a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>も有効化されます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" title=\"Link to the compiler option:moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution'>#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>モジュール解決の方法を’node’（Node.js）または’classic’（TypeScript pre-1.6）から設定します。おそらく利用する必要はないでしょう。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Default</td><td><p>module === <code>AMD</code> or <code>System</code> or <code>ES6</code> ? <code>Classic</code> : <code>Node</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#module\"><code>module</code></a></p>\n<td/></tr>\n<tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" title=\"Link to the compiler option:paths\" id='paths' href='#paths' name='paths'>#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>baseUrl</code>からの相対的な検索場所にインポートを再マッピングするエントリです。<code>paths</code>についてより網羅的な記述は<a href=\"/docs/handbook/module-resolution.html#path-mapping\">ハンドブック</a>に記載されています。</p>\n<p><code>paths</code>により、TypeScript がどのように<code>require</code>/<code>import</code>からインポートを解決すべきかを定義できます。</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"baseUrl\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// \"paths\"を設定する場合、このオプションも設定が必要です。</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node_modules/jquery/dist/jquery\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// このマッピングは\"baseUrl\"からの相対パスです。</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この設定は、<code>import \"jquery\"</code>と記述できるようにし、すべての正しい型がローカルから取得されるようになります。</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"baseUrl\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"config/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_config/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"environment/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"environments/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"shared/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_shared/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"helpers/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"helpers/*\"</span><span style=\"color: #000000\">],</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"tests/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"tests/*\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">    },</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この例は、TypeScript に対して、ファイルリゾルバーへコードを見つけるためのカスタムプレフィクスによる補助をさせています。\nこのパターンは、コードベース内で長い相対パスを避けるために利用できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" title=\"Link to the compiler option:preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks'>#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>シンボリックリンクを実体パスへ解決しないという Node.js の同名フラグを反映したオプションです。</p>\n<p>このフラグは Webpack の<code>resolve.symlinks</code>オプションと逆の動作をします（つまり、TypeScript の<code>preserveSymlinks</code>を true に設定することは、Webpack の<code>resolve.symlinks</code>を false に設定することと同等です。逆も然りです）。</p>\n<p>このオプションを有効化すると、モジュールとパッケージへの参照（例えば、<code>import</code>や<code>/// &#x3C;reference type=\"...\" /></code> ディレクティブ）は、シンボリックリンクが解決する場所としてではなく、そのシンボリックリンクファイルからの相対パスとして解決されます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" title=\"Link to the compiler option:rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs'>#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>rootDirs</code>を用いると、単一のルートとして振る舞う「仮想的な」ディレクトリが複数存在することをコンパイラへ伝えることができます。</p>\n<p>「仮想的な」ディレクトリは 1 つにまとめられるとしても、この設定によって、コンパイラはこれらのディレクトリ内での相対パスによるモジュールのインポートを解決できるようになります。</p>\n<p>例えば:</p>\n<pre><code> src\n └── views\n     └── view1.ts (can import \"./template1\", \"./view2`)\n     └── view2.ts (can import \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import \"./view1\", \"./view2\")\n</code></pre>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"rootDirs\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この設定は TypeScript がどのように JavaScript を出力するかには影響しません。\n実行時に相対パスを使って動作可能であるという仮定がエミュレートされるだけです。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" title=\"Link to the compiler option:typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots'>#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デフォルトでは、<em>表示されている</em>すべての”<code>@types</code>“パッケージがコンパイル時にインクルードされます。\nプロジェクトを囲んでいる任意のフォルダの<code>node_modules/@types</code>内のパッケージが<em>表示されている</em>とみなされます。\n例えば、<code>./node_modules/@types/</code>、<code>../node_modules/@types/</code>、<code>../../node_modules/@types/</code>に存在するパッケージが該当します。</p>\n<p><code>typeRoots</code>を設定すると、<code>typeRoots</code>配下のパッケージ<em>のみ</em>がインクルードされます。例えば:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typeRoots\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./typings\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./vendor/types\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この設定ファイルは、<code>./typings</code>と<code>./vendor/types</code>以下の<em>すべての</em>パッケージがインクルードされ、<code>./node_modules/@types</code>のパッケージはインクルードされません。\nパスはすべて、<code>tsconfig.json</code>からの相対パスです。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Related</td><td><p><a href=\"#types\"><code>types</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" title=\"Link to the compiler option:types\" id='types' href='#types' name='types'>#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デフォルトでは、すべての<em>表示されている</em>”<code>@types</code>“パッケージがコンパイル時にインクルードされます。\nプロジェクトを囲んでいる任意のフォルダの<code>node_modules/@types</code>内のパッケージが<em>表示されている</em>とみなされます。\n例えば、<code>./node_modules/@types/</code>、<code>../node_modules/@types/</code>、<code>../../node_modules/@types/</code>に存在するパッケージが該当します。</p>\n<p><code>types</code>を設定すると、リストに列挙したパッケージのみがインクルードされます。例えば:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">]</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この<code>tsconfig.json</code>ファイルは、<code>./node_modules/@types/node</code>と<code>./node_modules/@types/lodash</code>と<code>./node_modules/@types/express</code><em>のみ</em>をインクルードするようになります。\n<code>node_modules/@types/*</code>配下にある他のパケージはインクルードされません。</p>\n<p>この機能は<a href=\"#typeRoots\"><code>typeRoots</code></a>と違い、インクルードしたい types パッケージだけを厳密に指定できます。一方、<a href=\"#typeRoots\"><code>typeRoots</code></a>は必要としている特定のフォルダを指定できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Related</td><td><p><a href=\"#typeRoots\"><code>typeRoots</code></a></p>\n<td/></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Source_Map_Options_6175' ><a href='#Source_Map_Options_6175' name='Source_Map_Options_6175' aria-label=\"Link to the section ソースマップ\" title=\"Link to the section ソースマップ\">#</a>ソースマップ</h2>\n<p>開発者にとって有用であるリッチなデバッグツールやクラッシュレポートを提供するため、\nTypeScript は JavaScript のソースマップ標準に準拠したファイルを追加で出力します。</p>\n<p>ソースマップは、そのソースマップが指し示す実体ファイルの隣に<code>.map</code>ファイルとして出力されます。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" title=\"Link to the compiler option:inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap'>#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、TypeScript はソースマップを<code>.js.map</code>ファイルへ出力するのではなく、ソースマップの内容を<code>.js</code>ファイルに埋め込みます。\nこの結果、JS ファイルはより大きくなりますが、いくつかのシナリオにおいては便利です。\n例えば、<code>.map</code>ファイルの提供が許可されていない web サーバーで JS ファイルをデバッグしたい、という場合です。</p>\n<p>このオプションは、<a href=\"#sourceMap\"><code>sourceMap</code></a>とは互いに排他的にです。</p>\n<p>例えば、次の TypeScript は:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>次の JavaScript に変換されます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p><code>inlineSourceMap</code>を有効にしてビルドすると、\nファイルの末尾にこのファイルのソースマップを含んだコメントが出力されます。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" title=\"Link to the compiler option:inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources'>#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、TypeScript は元の<code>.ts</code>ファイルの内容を文字列としてソースマップに埋め込みます。\nこのオプションは<code>inlineSourceMap</code>と同様のケースで有用です。</p>\n<p><code>sourceMap</code>または<code>inlineSourceMap</code>のいずれかが設定されている必要があります。</p>\n<p>例えば、次の TypeScript について:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const helloWorld: &amp;quot;hi&amp;quot;'>helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const helloWorld: &amp;quot;hi&amp;quot;'>helloWorld</data-lsp></span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>デフォルトでは、次の JavaScript に変換されます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p><code>inlineSources</code>と<code>inlineSourceMap</code>を有効にしてビルドすると、\nファイルの末尾にこのファイルのソースマップを含んだコメントが付きます。\nこのソースマップは元となったソースコードも含んでいるため、<a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a>の例とは異なる点に留意してください。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" title=\"Link to the compiler option:mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot'>#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>生成された場所情報を利用するのではなく、デバッガがマップファイルを探索すべき場所を明示します。\nこの文字列はソースマップの中で、文字列そのままの値として処理されます。例えば:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"mapRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>この設定は、<code>index.js</code>は<code>https://my-website.com/debug/sourcemaps/index.js.map</code>にソースマップがあることを宣言しています。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" title=\"Link to the compiler option:sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot'>#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>相対的なソースコードの場所の代わりに、デバッガが TypeScript のファイルを探索すべき場所を明示します。\nこの文字列は、パスや URL を使用できるソースマップの中で、文字列そのままの値として処理されます:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>上記の設定は、<code>index.js</code>は<code>https://my-website.com/debug/source/index.ts</code>にソースコードがある、ということを宣言しています。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Additional_Checks_6176' ><a href='#Additional_Checks_6176' name='Additional_Checks_6176' aria-label=\"Link to the section Linter Checks\" title=\"Link to the section Linter Checks\">#</a>Linter Checks</h2>\n<p>追加のチェック集です。これらのチェックは、コンパイラとリンターの境界を多少跨いでいます。より詳細なルールを探しているのであれば、これらのオプションよりも<a href=\"https://github.com/typescript-eslint/typescript-eslint#typescript-eslint\">eslint</a>のようなツールの使用を推奨します。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" title=\"Link to the compiler option:noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch'>#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>switch 文において、次の case へ処理を持ち越した場合にエラーを報告します。\nswitch 文内の空でない case 句が<code>break</code>または<code>return</code>を含むことを確約します。\nこれは、意図しない case への処理持ち越しによるバグを流出させない、ということ意味しています。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const a: number'>a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">6</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const a: number'>a</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">:</span>\n<span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><span style=\"color: #000000\">    </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" title=\"Link to the compiler option:noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns'>#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>有効化すると、TypeScript は関数内のすべてのコードパスについて、値を返却していることをチェックします。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function lookupHeadphonesManufacturer(color: &amp;quot;blue&amp;quot; | &amp;quot;black&amp;quot;): string'>lookupHeadphonesManufacturer</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) color: &amp;quot;blue&amp;quot; | &amp;quot;black&amp;quot;'>color</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"black\"</span><span style=\"color: #000000\">):</span><span style=\"color: #267F99\"><data-err> string </data-err></span><span style=\"color: #000000\">{</span>\n<span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) color: &amp;quot;blue&amp;quot; | &amp;quot;black&amp;quot;'>color</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"beats\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"bose\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" title=\"Link to the compiler option:noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals'>#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>利用されていないローカル変数について、エラーを報告します。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createKeyboard: (modelID: number) => {&amp;#13;    type: string;&amp;#13;    modelID: number;&amp;#13;}'>createKeyboard</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) modelID: number'>modelID</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='const defaultModelID: 23'>defaultModelID</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">23</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>'defaultModelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'defaultModelID' is declared but its value is never read.</span><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string'>type</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modelID: number'>modelID</data-lsp></span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" title=\"Link to the compiler option:noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters'>#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>利用されていない関数のパラメータについて、エラーを報告します。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createDefaultKeyboard: (modelID: number) => {&amp;#13;    type: string;&amp;#13;    modelID: number;&amp;#13;}'>createDefaultKeyboard</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) modelID: number'>modelID</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> {</span>\n<span class=\"error\"><span>'modelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modelID' is declared but its value is never read.</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const defaultModelID: 23'>defaultModelID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">23</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string'>type</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modelID: number'>modelID</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const defaultModelID: 23'>defaultModelID</data-lsp></span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Experimental_Options_6177' ><a href='#Experimental_Options_6177' name='Experimental_Options_6177' aria-label=\"Link to the section 実験的な機能\" title=\"Link to the section 実験的な機能\">#</a>実験的な機能</h2>\n<p>TypeScript は、JavaScript 言語に追加が確認されている機能のみを含めるように努めています。</p>\n<p>機能がそのルールの例外となるほど説得力がある場合、実験的なコンパイラのフラグとなります。\nJavaScript 言語にこれらの機能が組み込まれるときに、今のバージョンとは異なる可能性があり、その意味においてリスクと見なされるかもしれません。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" title=\"Link to the compiler option:emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata'>#</a> Emit Decorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>モジュールとともに動作するデコレータのメタ情報を出力するための実験的なサポートを有効化します。</p>\n<p>例えば、次の JavaScript について、</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void'>LogMethod</data-lsp></span><span style=\"color: #000000\">(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) target: any'>target</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propertyKey: string | symbol'>propertyKey</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">symbol</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor'>descriptor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PropertyDescriptor'>PropertyDescriptor</data-lsp></span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) target: any'>target</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propertyKey: string | symbol'>propertyKey</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor'>descriptor</data-lsp></span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Demo'>Demo</data-lsp></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  @</span><span style=\"color: #001080\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void'>LogMethod</data-lsp></span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Demo.foo(bar: number): void'>foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) bar: number'>bar</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do nothing</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const demo: Demo'>demo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='constructor Demo(): Demo'>Demo</data-lsp></span><span style=\"color: #000000\">();</span></code></div></pre>\n<p><code>emitDecoratorMetadata</code>が true に設定されていない場合（デフォルト）、次のようになります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> < </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> >= </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> < </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogMethod</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@class</span><span style=\"color: #008000\"> */</span><span style=\"color: #000000\"> (() </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Demo</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #008000\">// 何もしない</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">LogMethod</span>\n<span style=\"color: #000000\">    ], </span><span style=\"color: #267F99\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Demo</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">})();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Demo</span><span style=\"color: #000000\">();</span></code></div></pre>\n<p><code>emitDecoratorMetadata</code>が true に設定されている場合は、次のようになります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> < </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> >= </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> < </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #267F99\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogMethod</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@class</span><span style=\"color: #008000\"> */</span><span style=\"color: #000000\"> (() </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Demo</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #008000\">// 何もしない</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #001080\">LogMethod</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\">Function</span><span style=\"color: #000000\">),</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:paramtypes\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #267F99\">Number</span><span style=\"color: #000000\">]),</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:returntype\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">    ], </span><span style=\"color: #267F99\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Demo</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">})();</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Demo</span><span style=\"color: #000000\">();</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Related</td><td><p><a href=\"#experimentalDecorators\"><code>experimentalDecorators</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" title=\"Link to the compiler option:experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators'>#</a> Experimental Decorators - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"https://github.com/tc39/proposal-decorators\">デコレータの実験的なサポート</a>を有効化します。\nこれは TC39 の標準化プロセスでは stage 2 の機能です。</p>\n<p>デコレータは JavaScript の仕様として、いまだ完全には組み込まれていない言語機能です。\nこれは TypeScript の実装バージョンが、TC39 が決定する JavaScript の実装と異なるかもしれないということを意味しています。</p>\n<p>TypeScript のデコレータのサポートについて、より詳しく知りたい場合は<a href=\"/docs/handbook/decorators.html\">ハンドブック</a>を参照してください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Related</td><td><p><a href=\"#emitDecoratorMetadata\"><code>emitDecoratorMetadata</code></a></p>\n<td/></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Advanced_Options_6178' ><a href='#Advanced_Options_6178' name='Advanced_Options_6178' aria-label=\"Link to the section Advanced\" title=\"Link to the section Advanced\">#</a>Advanced</h2>\n<p>デバッグに役立つフラグです。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" title=\"Link to the compiler option:allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode'>#</a> Allow Unreachable Code - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>false に設定すると、到達不可能なコードに対する警告を無効化します。\nこの警告は、JavaScript 構文の利用によって到達不可能になり得るコードにのみ関係します。例えば:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #096F4A\">5</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>\"allowUnreachableCode\": false</code>にすると、次のようになります:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(n: number): boolean'>fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">5</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><span style=\"color: #000000\">}</span></code></div></pre>\n<p>このオプションは、型の分析によって到達不可能と判断されたコードについてのエラーには影響しません。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" title=\"Link to the compiler option:allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels'>#</a> Allow Unused Labels - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>false にセットすると、利用していない Label についての警告を無効化します。</p>\n<p>JavaScript において Label を利用することは稀ですが、オブジェクトリテラルを記述しようとしたときに Label 構文になってしまうことがあります。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function verifyAge(age: number): void'>verifyAge</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) age: number'>age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 'return'の記述が抜けている</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) age: number'>age</data-lsp></span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">18</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-err>verified</data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Unused label.</span><span class=\"code\">7028</span></span><span class=\"error-behind\">Unused label.</span><span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" title=\"Link to the compiler option:assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies'>#</a> Assume Changes Only Affect Direct Dependencies - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このオプションを設定すると、TypeScript は本当に影響を受ける可能性があるすべてのファイルの再チェック/再ビルドを避け、変更されたファイルとそれらを直接 import しているファイルのみを再チェック/再ビルドするようになります。</p>\n<p>これは監視アルゴリズムの「高速で緩い」実装と見なせます。これにより、すべてのコンパイルエラーメッセージを得るためにフルビルドが必要になりますが、インクリメンタルビルドの再ビルド時間を大幅に短縮できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" title=\"Link to the compiler option:charset\" id='charset' href='#charset' name='charset'>#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>以前の TypeScript のバージョンでは、このオプションでディスクからどのエンコードでファイルを読み込むかを制御していました。\n今の TypeScript は UTF-8 でエンコードされていることを前提としています。ただし、UTF-16（BE および LE）または UTF-8 の BOM を正しく検出します。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>utf8</code></p>\n<td/></tr>\n<tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" title=\"Link to the compiler option:declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir'>#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>型定義ファイルが出力されるルートディレクトリを設定します。</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>次の<code>tsconfig.json</code>は:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declarationDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./types\"</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>index.ts</code>に対応する d.ts ファイルを<code>types</code>フォルダへ配置します:</p>\n<pre><code>example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts\n</code></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p> n/a</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" title=\"Link to the compiler option:diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics'>#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デバッグ用にコンパイラからの診断情報を出力するために使用されていました。このコマンドはよりユーザー向けの結果かつ分かりやすい<a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a>のサブセットです。</p>\n<p>TypeScript のコンパイラエンジニアからこのフラグを用いて結果を提供するように依頼された場合、代わりに<a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a>を用いても問題ありません。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a></p>\n<td/></tr>\n<tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" title=\"Link to the compiler option:disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit'>#</a> Disable Size Limit - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>非常に大規模な JavaScript プロジェクトで作業するときに発生する可能性のある使用メモリの膨張を避けるために、TypeScript が割り当てられるメモリの量には上限があります。このフラグを設定すると、この制限を取り除きます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" title=\"Link to the compiler option:disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching'>#</a> Disable Solution Searching - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"/docs/handbook/project-references.html\">複合 TypeScript プロジェクト</a>で作業する場合、このオプションはエディタで<em>find all references</em>や<em>定義へ移動</em>などの機能を使う際に含めたくないプロジェクトを宣言する方法を提供します。</p>\n<p>このフラグは大規模な複合プロジェクトで応答性を高めるために使用できるものです。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" title=\"Link to the compiler option:disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect'>#</a> Disable Source Project Reference Redirect - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"/docs/handbook/project-references.html\">複合 TypeScript プロジェクト</a>で作業する場合、このオプションはモジュール間の境界として d.ts ファイルが使用されていた<a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">3.7 以前</a>の挙動に戻す方法を提供します。\n3.7 にて、信頼できる情報源は TypeScript のファイルになりました。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" title=\"Link to the compiler option:emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM'>#</a> Emit BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript がファイルを書き込むときに<a href=\"https://wikipedia.org/wiki/Byte_order_mark\">バイトオーダーマーク（BOM）</a>を出力するかどうかを制御します。\n一部の実行環境では JavaScript ファイルを正しく解釈するために、BOM が必要となりますが、他の実行環境では BOM の存在を許容しません。\nデフォルト値の<code>false</code>は一般的に最適な値ですが、必要であれば変更できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" title=\"Link to the compiler option:emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly'>#</a> Emit Declaration Only - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>.d.ts</code>ファイル<em>のみ</em>を出力します; <code>.js</code>ファイルは出力しません。</p>\n<p>この設定は 2 つのケースで有用です:</p>\n<ul>\n<li>JavaScript を生成するために、TypeScript 以外のトランスパイラを使っているとき</li>\n<li>利用者向けに<code>d.ts</code>ファイルを出力するためだけに TypeScript を使っているとき</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" title=\"Link to the compiler option:extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics'>#</a> Extended Diagnostics - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグを使うと、TypeScript がコンパイルの際に、どの程度の時間をどこに費やしているかを調査できます。\nこのフラグは、コードベース全体のパフォーマンス特性を理解するために使われるツールです。</p>\n<p>測定の仕方および出力の解釈方法については、<a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">wiki のパフォーマンスセクション</a>をご覧ください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#diagnostics\"><code>diagnostics</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" title=\"Link to the compiler option:forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames'>#</a> Force Consistent Casing In File Names - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript が大文字小文字を区別するかどうかは、動作しているファイルシステムに従います。\nこれが問題になるのは、ある開発者はケースセンシティブなファイルシステムで作業をしている一方で、別の開発者はそうではない場合です。\nあるファイルが<code>fileManager.ts</code>の Import を<code>./FileManager.ts</code>と指定したとき、ケースセンシティブでないファイルシステムではファイルが見つかりますが、ケースセンシティブなファイルシステムでは見つかりません。</p>\n<p>このオプションを有効化すると、TypeScript はプログラムがディスク上の大文字小文字と異なるファイルをインクルードしようとした場合にエラーを発生させます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Recommended</td><td><p>True</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" title=\"Link to the compiler option:generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile'>#</a> Generate CPU Profile - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このオプションを用いると、TypeScript にコンパイラが実行中の v8 の CPU プロファイルを出力させられます。CPU プロファイルはなぜビルドが遅くなるのかについての示唆を与えてくれます。</p>\n<p>このオプションは CLI から<code>--generateCpuProfile tsc-output.cpuprofile</code>を介してのみ使用できます。</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #000000\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></code></div></pre>\n<p>このファイルは Chrome や Edge Developer のような chromium をベースとしたブラウザの<a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">CPU profiler</a>で開くことができます。\n<a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">TypeScript Wiki のパフォーマンスセクション</a>でコンパイラのパフォーマンスについて詳細を学ぶことができます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p> profile.cpuprofile</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" title=\"Link to the compiler option:importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues'>#</a> Imports Not Used As Values - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグは<code>import</code>がどのように動作するかを制御します。3 つの異なるオプションがあります:</p>\n<ul>\n<li><code>remove</code>: 型のみを参照する<code>import</code>文を削除するデフォルトの挙動</li>\n<li><code>preserve</code>: 使用されない値または型のすべての<code>import</code>文を保持します。これにより、インポート/副作用が保持されます。</li>\n<li><code>error</code>: すべての import を保持しますが(preserve オプションと同じ)、値の import が型としてのみ使用されている場合にエラーを出力します。これは、誤って値が import されないようにしつつ、副作用のある import を明示的にしたい場合に有用です。</li>\n</ul>\n<p>このフラグが機能することで、<code>import type</code>を使用して、JavaScript に出力されない<code>import</code>文を明示的に作成できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Allowed</td><td><p>remove, preserve, error</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" title=\"Link to the compiler option:jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory'>#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JSX 要素がコンパイルされるときの<code>.js</code>ファイルで呼び出される関数を変更します。\n<code>preact</code>を使う場合に、デフォルトの<code>\"React.createElement\"</code>の代わりに<code>\"h\"</code>や<code>\"preact.h\"</code>に変更するのが一般的な変更です。</p>\n<p>このオプションは<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel における<code>/** @jsx h */</code>ディレクティブ</a>と同じものです。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>React\"</code></p>\n<td/></tr>\n<tr><td>Allowed</td><td><p><strong>Allowed Values</strong>: Any identifier or dotted identifier; default <code>\"React.createElement\"</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" title=\"Link to the compiler option:keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly'>#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグは、 文字列インデックス記法の型として適用される際に<code>keyof</code>型パラメータが<code>string | number</code>ではなく<code>string</code>を返すようにします。</p>\n<p>このフラグは、<a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">TypeScript 2.9 のリリースよりも前</a>の挙動に保ちたいときに利用されます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" title=\"Link to the compiler option:listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles'>#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コンパイルされ、生成されたファイル名をターミナルに出力します。</p>\n<p>このフラグは 2 つのケースで有用です:</p>\n<ul>\n<li>後続のコマンドでファイル名が処理されるターミナルのビルドチェーンの一部として TypeScript をトランスパイルしたいとき</li>\n<li>TypeScript がコンパイルしてほしいファイルを対象に含めているか分からず、<a href=\"#Project_Files_0\">対象ファイル設定</a>を部分的にデバッグしたいとき</li>\n</ul>\n<p>例えば、以下のようなときに:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>以下の設定をすると:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>以下のような path を出力します:</p>\n<pre><code>$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n</code></pre>\n<p>通常、成功すると TypeScript は何も出力しない状態に戻ります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" title=\"Link to the compiler option:listFiles\" id='listFiles' href='#listFiles' name='listFiles'>#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コンパイルされるファイル名を出力します。これは、コンパイルしてほしいファイルを TypeScript が対象に含めてくれているかが分からないときに有用です。</p>\n<p>例えば、以下のようなときに:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>以下の設定をすると:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>出力される path は以下のようになります:</p>\n<pre><code>$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n</code></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" title=\"Link to the compiler option:maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth'>#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>node_modules</code>配下で依存関係を探す際や、JavaScript ファイルをロードする際の最大の深さです。</p>\n<p>このフラグは<a href=\"#allowJs\"><code>allowJs</code></a>が有効化されているときのみ利用可能であり、<code>node_modules</code>内のすべての JavaScript について、TypeScript に型推論させたいときに用います。</p>\n<p>理想的には、このオプションの値は 0（デフォルト値）であるべきで、<code>d.ts</code>ファイルでモジュールを明示的に定義すべきです。\nただし、速度と精度を犠牲にして、このオプションを有効化したいという場合もあるかもしれません。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>0</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" title=\"Link to the compiler option:newLine\" id='newLine' href='#newLine' name='newLine'>#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ファイルを出力するときの改行コードを指定します: ‘CRLF’（dos）または’LF’（unix）のいずれかを指定してください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p>Platform specific</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" title=\"Link to the compiler option:noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers'>#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"#importHelpers\"><code>importHelpers</code></a>を使って、ヘルパ関数をインポートする代わりに、グローバルスコープに使用するヘルパ関数のための実装を提供し、ヘルパ関数が出力されるのを完全に無効にできます。</p>\n<p>例えば、この<code>async</code>関数を ES5 で実行するためには、<code>await</code>のような関数と<code>generator</code>のような関数が必要です:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getAPI: (url: string) => Promise&amp;lt;{}>'>getAPI</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) url: string'>url</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {};</span>\n<span style=\"color: #000000\">};</span></code></div></pre>\n<p>これは、とても多くの JavaScript を生成します:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">P</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> P ? </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">P</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">); }); }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (P || (P = </span><span style=\"color: #267F99\">Promise</span><span style=\"color: #000000\">))(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fulfilled</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rejected</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">](</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fulfilled</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">rejected</span><span style=\"color: #000000\">); }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">apply</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\"> || [])).</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">());</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">label:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">sent:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]; }, </span><span style=\"color: #001080\">trys:</span><span style=\"color: #000000\"> [], </span><span style=\"color: #001080\">ops:</span><span style=\"color: #000000\"> [] }, </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">next:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">) }, </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">[</span><span style=\"color: #267F99\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">; }), </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">]); }; }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Generator is already executing.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">] || ((</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">]) && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">), </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">next</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">])).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">];</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">]) {</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">: </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">4</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">5</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">7</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\">:</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> > </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]) && (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #096F4A\">6</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">)) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\"> && (!</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">] > </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] && </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">] < </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">]))) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #096F4A\">6</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> < </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> < </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">); </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">();</span>\n<span style=\"color: #000000\">                    </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">            }</span>\n<span style=\"color: #000000\">            </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #096F4A\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">; } </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">; }</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #096F4A\">5</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">] : </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">}); };</span></code></div></pre>\n<p>このフラグを通じて、独自のグローバル実装に切り替えられます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">}); };</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#importHelpers\"><code>importHelpers</code></a></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" title=\"Link to the compiler option:noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError'>#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エラーがあるときに、JavaScript ソースコードやソースマップファイル、型定義ファイルなどをコンパイラに出力させないようにします。</p>\n<p>デフォルト値は<code>false</code>であり、このため、すべてのエラーを解決するよりも前に別の環境でコードの変更結果を確認したいといったファイル監視環境において、TypeScript が扱いやすくなっています。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" title=\"Link to the compiler option:noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation'>#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エラーメッセージを切り捨てないようにします。</p>\n<p>デフォルト値の<code>false</code>の場合、次のようになります。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string'>propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string'>propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string'>propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string'>propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string'>propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// 型'x'の文字列表現はエラメッセージ中で省略されます</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string'>s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></data-err></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code></div></pre>\n<p><code>true</code>にすると、次のようになります。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string'>propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string'>propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string'>propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string'>propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string'>propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #008000\">// 型'x'の文字列表現はエラメッセージ中で省略されます</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string'>s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></data-err></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" title=\"Link to the compiler option:noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict'>#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>これは必要ないはずです。ES6 でないターゲットでモジュールを出力する際に、TypeScript はデフォルトで<code>\"use strict;\"</code>という前置きをファイルの一番始めに出力します。\nこの設定は、この前置きを無効にします。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">() { }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fn</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">() { }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">fn</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fn</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">});</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" title=\"Link to the compiler option:noLib\" id='noLib' href='#noLib' name='noLib'>#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>すべてのライブラリファイルについて、自動でのインクルードを無効化します。\nこのオプションを設定した場合、<code>lib</code>は無視されます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#lib\"><code>lib</code></a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" title=\"Link to the compiler option:noResolve\" id='noResolve' href='#noResolve' name='noResolve'>#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デフォルトでは、TypeScript は起動時に与えられたファイルについて<code>import</code>と<code>&#x3C;reference</code>ディレクティブを確認し、解決されたファイルをプログラムに追加します。</p>\n<p><code>noResolve</code>が設定されているとき、このプロセスは発生しなくなります。\nしかし、<code>import</code>文は正しいモジュールを解決しているかどうかチェックされるため、これが満たされているかどうかを他の方法で確認する必要があります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" title=\"Link to the compiler option:noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks'>#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript は、総称型を使った 2 つの関数について、型パラメータを統合して比較します。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type A = &amp;lt;T, U>(x: T, y: U) => [T, U]'>A</data-lsp></span><span style=\"color: #000000\"> = <</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp></span><span style=\"color: #000000\">>(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: U'>y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> [</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp></span><span style=\"color: #000000\">];</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type B = &amp;lt;S>(x: S, y: S) => [S, S]'>B</data-lsp></span><span style=\"color: #000000\"> = <</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp></span><span style=\"color: #000000\">>(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: S'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: S'>y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=></span><span style=\"color: #000000\"> [</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp></span><span style=\"color: #000000\">];</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(a: A, b: B): void'>f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A'>a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type A = &amp;lt;T, U>(x: T, y: U) => [T, U]'>A</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type B = &amp;lt;S>(x: S, y: S) => [S, S]'>B</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A'>a</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: A'>a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span>\n<span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span style=\"color: #000000\">}</span></code></div></pre>\n<p>このフラグを利用することで、このチェックを無効化できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" title=\"Link to the compiler option:out\" id='out' href='#out' name='out'>#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>代わりに<a href=\"#outfile\">outFile</a>を使ってください。</p>\n<p><code>out</code>オプションは、予測可能でない、または一貫性のない方法によってファイルの最終的な場所を計算してしまいます。\nこのオプションは後方互換性の維持のためにのみ残されていますが、非推奨です。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr>\n<tr><td>Default</td><td><p><code>n/a</code></p>\n<td/></tr>\n<tr><td>Related</td><td><p><a href=\"#outDir\"><code>outDir</code></a>, <a href=\"#outFile\"><code>outFile</code></a></p>\n<td/></tr>\n<tr><td>Status</td><td><p>Deprecated</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" title=\"Link to the compiler option:preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums'>#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コード生成時に<code>const enum</code>の定義を取り除かないようにします。\n<code>const enum</code>は、参照ではなく Enum 値を出力することによって、アプリケーション実行時の全体的なメモリの使用量を軽減します。</p>\n<p>例えば次の TypeScript では:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.TubRingZooHypothesis = 2'>TubRingZooHypothesis</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.DogFashionDiscoAdultery = 3'>DogFashionDiscoAdultery</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures'>selectedAlbum</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures'>selectedAlbum</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>デフォルトの<code>const enum</code>の挙動は、すべての<code>Album.Something</code>を対応する数値リテラル値に変換し、\nJavaScript コードから完全に元の Enum への参照を除去します。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> === </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><code>preserveConstEnums</code>を<code>true</code>に設定すると、<code>enum</code>は実行時に残り、数値も出力されるようになります。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">})(</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> = {}));</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> === </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #267F99\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>このオプションによって、このような<code>const enums</code>は実行時に追跡されないソースコードのみの機能になります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" title=\"Link to the compiler option:reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace'>#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>代わりに<a href=\"#jsxFactory\"><code>--jsxFactory</code></a>を利用してください。<code>react</code>のときに TSX ファイルの<code>createElement</code>が実行されるオブジェクトを指定します。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>\"React\"</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" title=\"Link to the compiler option:resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule'>#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>‘.json’拡張子のファイルをモジュールとしてインポートできるようにします。Node のプロジェクトで一般的に利用されている手法です。\nこのオプションは、<code>import</code>時に静的な JSON の構造から型を生成します。</p>\n<p>デフォルトでは、TypeScript は JSON ファイルの解決をサポートしていません:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: settings.json</span>\n<span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">settings</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #001080\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">debug</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #001080\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dry</span><span style=\"color: #000000\"> === </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>このオプションを有効にすると JSON のインポートが可能となり、JSON ファイルの型を検査できるようになります。</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: settings.json</span>\n<span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">settings</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #001080\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">debug</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #001080\">settings</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dry</span><span style=\"color: #000000\"> === </span><span style=\"color: #096F4A\">2</span><span style=\"color: #000000\">;</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" title=\"Link to the compiler option:skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck'>#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>代わりに<a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a>を利用してください。デフォルトのライブラリ型定義ファイルをチェックしないようになります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" title=\"Link to the compiler option:skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck'>#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>型定義ファイルのチェックをスキップします。</p>\n<p>型システムの精度を犠牲にすることで、コンパイル実行時間を削減します。\n例えば、2 つのライブラリが、同じ<code>type</code>を一貫性の無い方法で定義していたとします。\nすべての<code>d.ts</code>ファイルの完全なチェックを行わずに、TypeScript はアプリケーション内のソースコードで明示的に参照しているコードの型をチェックします。</p>\n<p><code>skipLibCheck</code>の利用を検討する一般的なケースは、あるライブラリの型定義が<code>node_modules</code>内にコピーされて複数存在している場合です。\nこのようなケースでは、\n<a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>のような機能の利用を検討してツリーにおける該当の依存関係のコピーが 1 つだけであることを確認するか、\n追加のツールを使わずに問題を修正するために依存関係の解決を理解して、コピーが 1 つだけであることを確認する方法を調査する必要があります。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" title=\"Link to the compiler option:stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal'>#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JSDoc コメントとして<code>@internal</code>が付与されたコードについて、定義情報を出力しないようにします。\nこのオプションはコンパイラが内部で利用するためのものです; コンパイラは結果の妥当性検証をしないため、自己責任で使ってください。\n<code>d.ts</code>ファイル内での可視性を細かく制御できるツールを探しているのであれば、<a href=\"https://api-extractor.com\">api-extractor</a>を参照してください。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Days available in a week</span>\n<span style=\"color: #008000\"> * @internal</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const daysInAWeek: 7'>daysInAWeek</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">7</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function weeklySalary(dayRate: number): number'>weeklySalary</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dayRate: number'>dayRate</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const daysInAWeek: 7'>daysInAWeek</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dayRate: number'>dayRate</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>このフラグが<code>false</code>であるとき（デフォルト）:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * 一週間の日数</span>\n<span style=\"color: #008000\"> * @internal</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">daysInAWeek</span><span style=\"color: #000000\"> = </span><span style=\"color: #096F4A\">7</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #008000\">/** 一週間あたりの稼ぎを計算する */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">weeklySalary</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dayRate</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">):</span><span style=\"color: #267F99\"> number</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p><code>stripInternal</code>を<code>true</code>に設定すると、<code>d.ts</code>は次のように編集されて出力されます。</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** 一週間あたりの稼ぎを計算する */</span>\n<span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">weeklySalary</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dayRate</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">):</span><span style=\"color: #267F99\"> number</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>JavaScript としての出力は一緒です。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Status</td><td><p>internal</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" title=\"Link to the compiler option:suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors'>#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このオプションにより、次の例に示すような、プロパティが過剰に定義されているときのエラーを抑止します:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number'>x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number'>y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const p: Point'>p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number'>x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number'>y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) m: number'>m</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">10</span><span style=\"color: #000000\"> };</span>\n<span class=\"error\"><span>Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span></code></div></pre>\n<p>このフラグは、<a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>のオブジェクトリテラルの厳密チェックへの移行を助けるために追加されました。</p>\n<p>モダンなコードベースでの、このフラグの利用は推奨されません。エラー抑止が必要な箇所で、都度<code>// @ts-ignore</code>を利用できます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" title=\"Link to the compiler option:suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors'>#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>suppressImplicitAnyIndexErrors</code>を有効化すると、次の例に示すようなオブジェクトへインデックスアクセスしたときの暗黙的 any についてのエラーが抑止されます:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number'>x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">10</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span>\n<span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code></div></pre>\n<p><code>suppressImplicitAnyIndexErrors</code>はかなり影響の大きい方法です。代わりに<code>@ts-ignore</code>コメントの利用を推奨します:</p>\n<pre class=\"shiki twoslash\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number'>x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #096F4A\">10</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #008000\">// @ts-ignore</span>\n<span style=\"color: #267F99\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" title=\"Link to the compiler option:traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution'>#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>あるモジュールがコンパイル対象に含まれていない理由をデバッグするために用います。\n<code>traceResolutions</code>を<code>true</code>にすると TypeScript が処理された各々のファイルについてモジュール解決過程の情報を出力するようになります。</p>\n<p>この設定についてより詳細に知りたい場合、<a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">ハンドブック</a>をご覧ください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" title=\"Link to the compiler option:useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields'>#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグは、最新の Class フィールドの仕様へ移行するために用います。TypeScript の Class フィールド記法は、TC39 が Class フィールドの仕様の合意に至るよりも何年も前に導入されました。最新の仕様バージョンは、TypeScript の実装とは実行時の挙動が異なりますが、構文は同じです。</p>\n<p>このフラグにより、ECMA が定める最新の実行時挙動へ移行できます。</p>\n<p>移行の詳細については、<a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">3.7 リリースノート</a>を参照してください。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n<td/></tr></table>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section コマンドライン\" title=\"Link to the section コマンドライン\">#</a>コマンドライン</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" title=\"Link to the compiler option:preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput'>#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>watch モードについて、変更が発生するたびにスクリーンをクリアせずに以前の出力をコンソールに出し続けるかどうかを設定します。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>false</code></p>\n<td/></tr>\n<tr><td>Status</td><td><p>internal</p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" title=\"Link to the compiler option:pretty\" id='pretty' href='#pretty' name='pretty'>#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エラーやメッセージを文脈や色を使ってスタイリングします。このオプションはデフォルトで有効です—\nコンパイラから簡潔で単色のメッセージを受け取れるようにすることもできます。</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>true</code></p>\n<td/></tr></table>\n</div></section>\n</div>\n</article>\n<article id='watchOptions'>\n<div class='indent'>\n<div class='category'>\n<h2 id='Watch_Options_999' ><a href='#Watch_Options_999' name='Watch_Options_999' aria-label=\"Link to the section Watch Options\" title=\"Link to the section Watch Options\">#</a>Watch Options</h2>\n<p>TypeScript 3.8 shipped a new strategy for watching directories, which is crucial for efficiently picking up changes to <code>node_modules</code>.</p>\n<p>On operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on <code>node_modules</code> and many of its subdirectories to detect changes in dependencies.\nThis is because the number of available file watchers is often eclipsed by the of files in <code>node_modules</code>, whereas there are way fewer directories to track.</p>\n<p>Because every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new <code>watchOptions</code> field which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" title=\"Link to the compiler option:fallbackPolling\" id='fallbackPolling' href='#fallbackPolling' name='fallbackPolling'>#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>synchronousWatchDirectory</code>: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in <code>node_modules</code> from running <code>npm install</code>), but you might want to disable it with this flag for some less-common setups.</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Allowed</td><td><p>fixedPollingInterval, dynamicPriorityPolling, useFsEvents, synchronousWatchDirectory</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" title=\"Link to the compiler option:watchDirectory\" id='watchDirectory' href='#watchDirectory' name='watchDirectory'>#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every directory for changes several times a second at a fixed interval.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified directories will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for directory changes.</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>useFsEvents</code></p>\n<td/></tr>\n<tr><td>Allowed</td><td><p>fixedPollingInterval, dynamicPriorityPolling, useFsEvents</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" title=\"Link to the compiler option:watchFile\" id='watchFile' href='#watchFile' name='watchFile'>#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how individual files are watched.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for file changes.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Attempt to use the operating system/file system’s native events to listen for changes on a file’s</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Default</td><td><p><code>useFsEvents</code></p>\n<td/></tr>\n<tr><td>Allowed</td><td><p>fixedPollingInterval, priorityPollingInterval, dynamicPriorityPolling, useFsEvents, useFsEventsOnParentDirectory</p>\n<td/></tr>\n<tr><td>Released</td><td><p><a href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n<td/></tr></table>\n</div></section>\n</div>\n</article>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"ja","tsconfigMDPath":"/home/runner/work/doc-static/doc-static/typescriptlang.org/website/packages/tsconfig-reference/output/ja.md","categoriesPath":"/home/runner/work/doc-static/doc-static/typescriptlang.org/website/packages/tsconfig-reference/output/ja.json"}}}