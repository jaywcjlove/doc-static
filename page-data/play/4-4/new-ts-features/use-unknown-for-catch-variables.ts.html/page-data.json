{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-4/new-ts-features/use-unknown-for-catch-variables.ts.html","result":{"pageContext":{"name":"Use unknown for Catch Variables","title":"Use unknown for Catch Variables","lang":"en","html":" If `unknown` is new to you, read: example:unknown-and-never\n\n Since TypeScript 4.0, you have been able to change the type\n of the variable in a catch statement from the default of\n `any` to `unknown` by manually assigning the type:\n\n<code><pre>\ntry {\n  // @ts-ignore\n  iWillCrash();\n} catch (err) {\n  // This implicitly means you _have_ to declare\n  // what the type is before you can write code\n  // against `err`:\n  console.log(err.message);\n\n  // For example, we have to verify it is an\n  // error before using it as one.\n  if (err instanceof Error) {\n    console.log(err.message);\n  }\n}\n\n// Also: example:unknown-in-catch\n\n</pre></code>\n// By using the option `useUnknownInCatchVariables`, you\n can have the compiler default to `unknown` instead of\n `any`. Effectively forcing all usage of that variable\n to be confirmed by the type system before usage.\n\n You can opt-out on one-off catch statements by assigning\n the variable to `any`.\n\n<code><pre>\ntry {\n  // @ts-ignore\n  iWillCrash();\n} catch (err: any) {\n  // In which case, you can treat it\n  // however you would like.\n  console.log(err.message);\n}\n","redirectHref":"/play/?ts=4.4.2&useUnknownInCatchVariables=true#example/use-unknown-for-catch-variables"}},"staticQueryHashes":[]}