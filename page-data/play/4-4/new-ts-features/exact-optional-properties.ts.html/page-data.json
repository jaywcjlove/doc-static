{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-4/new-ts-features/exact-optional-properties.ts.html","result":{"pageContext":{"name":"Exact Optional Properties","title":"Exact Optional Properties","lang":"en","html":" With exactOptionalPropertyTypes enabled, TypeScript\n has stricter rules around what you can set an optional\n property to.\n\n For example, this interface declares that there is a\n property which can be one of two strings: 'dark' or 'light'\n or it should not be in the object.\n\n<code><pre>\ninterface UserDefaults {\n  // The absence of a value represents 'system'\n  colorThemeOverride?: \"dark\" | \"light\";\n}\n\n</pre></code>\n// Without this flag enabled, there are three values which you can\n set `colorThemeOverride` to be: \"dark\", \"light\" and `undefined`.\n\n Setting the value to `undefined` will allow most JavaScript runtime\n checks for the existence to fail, which is effectively falsy.\n However, there's a fuzziness to this behavior. The definition\n for `colorThemeOverride` _doesn't_ include `undefined`.\n\n The flag `exactOptionalPropertyTypes` makes TypeScript accurately\n match the definition provided as an optional property.\n\n<code><pre>\ndeclare function getUserSettings(): UserDefaults;\n\nconst settings = getUserSettings();\nsettings.colorThemeOverride = \"dark\";\nsettings.colorThemeOverride = \"light\";\n\n// But not:\nsettings.colorThemeOverride = undefined;\n\n// Prior to the flag `exactOptionalPropertyTypes`, this was not possible.\n","redirectHref":"/play/?ts=4.4.2&exactOptionalPropertyTypes=true#example/exact-optional-properties"}},"staticQueryHashes":[]}