{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html","result":{"pageContext":{"name":"Unknown in Catch","title":"Unknown in Catch","lang":"en","html":"\n Because JavaScript allows throwing any value, TypeScript\n does not support declaring the type of an error\n\n<code><pre>\ntry {\n  // ..\n} catch (e) {}\n\n</pre></code>\n// Historically, this has meant that the `e` in the catch\n would default to any. This allowed for the freedom to\n arbitrarily access any property. With 4.0, we've loosened\n the restrictions on type assignment in the catch clause\n to allow both `any` and `unknown`.\n\n Same behavior with any:\n<code><pre>\ntry {\n  // ..\n} catch (e) {\n  e.stack;\n}\n\n// Explicit behavior with unknown:\n\ntry {\n  // ..\n} catch (e) {\n  // You cannot use `e` at all until the type\n  // system learns what it is, for more info see:\n  // example:unknown-and-never\n  e.stack;\n\n  if (e instanceof SyntaxError) {\n    e.stack;\n  }\n}\n","redirectHref":"/play/?ts=4.0.2#example/unknown-in-catch"}},"staticQueryHashes":[]}