{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-0/new-ts-features/named-tuples.ts.html","result":{"pageContext":{"name":"Named Tuples","title":"Named Tuples","lang":"en","html":" Tuples are arrays where the order is important to the type system,\n you can learn more about them in example:tuples\n\n In TypeScript 3.9, the type of a Tuple's gained the ability to give\n a name to the different parts of the array.\n\n For example, you used to write a Lat Long location via a tuple:\n\n<code><pre>\ntype OldLocation = [number, number]\n\nconst locations: OldLocation[] = [\n    [40.7144, -74.006],\n    [53.6458, -1.785]\n]\n\n</pre></code>\n// Knowing which is Latitude and Longitude is ambiguous, and so you\n would more likely have called it a LatLong tuple.\n\n With 4.0, you can write:\n\n<code><pre>\ntype NewLocation = [lat: number, long: number]\n\nconst newLocations: NewLocation[] = [\n    [52.3702, 4.8952],\n    [53.3498, -6.2603]\n]\n\n</pre></code>\n// The names now show up in the editor when you hover over\n the 0 and 1 at the end of the next line\n<code><pre>\nconst firstLat = newLocations[0][0]\nconst firstLong = newLocations[0][1]\n\n</pre></code>\n// While that might seem a tad underwhelming, the main goal \n is to ensure that information isn't lost when working\n with the type system. For example, when extracting\n parameters from a function using the Parameter \n utility type:\n\n<code><pre>\nfunction centerMap(lng: number, lat: number) {}\n\n// In 4.0, this keeps lng and lat\ntype CenterMapParams = Parameters<typeof centerMap>\n\n// In 3.9, this would look like\ntype OldCenterMapParams = [number, number]\n\n</pre></code>\n// Making some of the more complex type manipulation lossy\n for the parameter information.\n","redirectHref":"/play/?ts=4.0.2#example/named-tuples"}},"staticQueryHashes":[]}