{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-0/new-ts-features/variadic-tuples.ts.html","result":{"pageContext":{"name":"Variadic Tuples","title":"Variadic Tuples","lang":"en","html":" Variadic Tuples gives tuples the ability to handle the rest operator (...)\n to pass types through type checker in a way that works like generics.\n\n This is quite an advanced topic, so if you get lost do not worry too much.\n It builds on example:generic-functions and example:tuples\n\n To start off, here is a variadic tuple which will always prefix another\n tuple with a number:\n\n<code><pre>\ntype AddMax<T extends unknown[]> = [max: number,  ...rest: T];\n</pre></code>\n//          ^ Generic used to constrain the T\n                                                ^ ... used to indicate where to merge\n\n This can then be used for composition:\n<code><pre>\ntype MaxMin = AddMax<[min: number]>\ntype MaxMinDiameter = AddMax<[min: number, diameter: number]>\n\n// The same can be used after the tuple:\ntype SuffixDIContext<T extends unknown[]> = [...first: T, context: any];\ntype DIContainer = SuffixDIContext<[param: string]>\n\n</pre></code>\n// This mechanism can be combined with multiple input params. For example, This\n function merges two arrays but uses '\\0' as a sigil to indicate where the arrays \n start and stop.\n<code><pre>\nfunction joinWithNullTerminators<T extends unknown[], U extends unknown[]>(t: [...T], u: [...U]) {\n    return ['\\0', ...t, '\\0', ...u, '\\0'] as const;\n}\n\n// TypeScript can infer the return type of a function like this:\nconst result = joinWithNullTerminators(['variadic', 'types'], [\"terminators\", 3]);\n\n</pre></code>\n//\n These tools make it possible to correctly type a function like curry which\n is a well used concept in functional programming:\n\n<code><pre>\nfunction curry<T extends unknown[], U extends unknown[], R>(f: (...args: [...T, ...U]) => R, ...a: T) {\n    return (...b: U) => f(...a, ...b);\n}\n\n</pre></code>\n// There are three generic arguments:\n - T: The params which are array of inputs to the curry function\n - U: The parameters which _aren't_ passed into to curry function, and need applying to the return func\n - R: the return type of the passed in function\n\n<code><pre>\nconst sum = (left: number, right: number,) => left + right\n\nconst a = curry(sum, 1, 2)\nconst b = curry(sum, 1)(2)\nconst c = curry(sum)(1, 2)\n\n</pre></code>\n// You can find a more indepth explanation, with more code samples in\n https://github.com/microsoft/TypeScript/pull/39094\n\n","redirectHref":"/play/?ts=4.0.2#example/variadic-tuples"}},"staticQueryHashes":[]}