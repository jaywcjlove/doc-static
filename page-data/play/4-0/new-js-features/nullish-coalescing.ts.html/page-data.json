{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-0/new-js-features/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"en","html":" # Nullish Coalescing\n\n This is a new operator `??` which is meant to augment\n the common usage of `||` in the same way `===` augments `==`\n as a more strict form of equality.\n\n To understand it, let's look a how || works:\n\n<code><pre>\nconst response = {\n  nullValue: null,\n  headerText: \"\",\n  animationDuration: 0,\n  height: 400,\n  showSplashScreen: false,\n} as const;\n\nconst undefinedValue = response.undefinedValue || \"some other default\";\n// This would be: 'some other default'\n\nconst nullValue = response.nullValue || \"some other default\";\n\n</pre></code>\n// These two examples work similar in most languages. As a tool || is\n pretty good at defaulting things, but JavaScript's falsy checks\n can surprise you for some common values:\n\n Potentially unintended. '' is falsy, result: 'Hello, world!'\n<code><pre>\nconst headerText = response.headerText || \"Hello, world!\";\n\n// Potentially unintended. 0 is falsy, result: 300\nconst animationDuration = response.animationDuration || 300;\n\n// Potentially unintended. false is falsy, result: true\nconst showSplashScreen = response.showSplashScreen || true;\n\n</pre></code>\n// When switching to use ?? instead, then === equality is used\n to compare the two sides:\n\n<code><pre>\nconst emptyHeaderText = response.headerText ?? \"Hello, world!\";\nconst zeroAnimationDuration = response.animationDuration ?? 300;\nconst skipSplashScreen = response.showSplashScreen ?? true;\n","redirectHref":"/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}