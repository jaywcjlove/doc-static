{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html","result":{"pageContext":{"name":"Logical Operators and Assignment","title":"Logical Operators and Assignment","lang":"en","html":" Logical Operators and Assignment are new features in\n JavaScript for 2020. These are a suite of new operators\n which edit a JavaScript object.\n\n Their goal is to re-use the concept of mathematical \n operators (e.g. += -= *=) but with logic instead.\n\n<code><pre>\ninterface User {\n  id?: number\n  name: string\n  location: {\n      postalCode?: string\n  }\n}\n\nfunction updateUser(user: User) {\n  // This code can be replaced \n  if (!user.id) user.id = 1\n\n  // Or this code:\n  user.id = user.id || 1\n\n  // With this code:\n  user.id ||= 1\n}\n\n</pre></code>\n// The suites of operators can handle deeply nesting, which \n can save on quite a lot of boilerplate code too.\n\n<code><pre>\ndeclare const user: User\nuser.location.postalCode ||= \"90210\"\n\n</pre></code>\n// There are three new operators: \n\n   ||= shown above\n   &&= which uses 'and' logic instead of 'or'\n   ??= which builds on example:nullish-coalescing to offer a stricter\n       version of || which uses === instead\n\n For more info on the proposal, see:\n https://github.com/tc39/proposal-logical-assignment\n","redirectHref":"/play/?#example/logical-operators-and-assignment"}},"staticQueryHashes":[]}