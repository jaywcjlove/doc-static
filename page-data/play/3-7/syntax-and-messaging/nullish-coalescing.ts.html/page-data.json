{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"en","html":"\n The nullish coalescing operator is an alternative to ||\n which returns the right-side expression if the left-side\n is null or undefined.\n\n In contrast, || uses falsy checks, meaning an empty\n string or the number 0 would be considered false.\n\n A good example for this feature is dealing with partial\n objects which have defaults when a key isn't passed in.\n\n<code><pre>\ninterface AppConfiguration {\n  // Default: \"(no name)\"; empty string IS valid\n  name: string;\n\n  // Default: -1; 0 is valid\n  items: number;\n\n  // Default: true\n  active: boolean;\n}\n\nfunction updateApp(config: Partial<AppConfiguration>) {\n  // With null-coalescing operator\n  config.name = config.name ?? \"(no name)\";\n  config.items = config.items ?? -1;\n  config.active = config.active ?? true;\n\n  // Current solution\n  config.name = typeof config.name === \"string\" ? config.name : \"(no name)\";\n  config.items = typeof config.items === \"number\" ? config.items : -1;\n  config.active = typeof config.active === \"boolean\" ? config.active : true;\n\n  // Using || operator which could give bad data\n  config.name = config.name || \"(no name)\"; // does not allow for \"\" input\n  config.items = config.items || -1; // does not allow for 0 input\n  config.active = config.active || true; // really bad, always true\n}\n\n</pre></code>\n// You can read more about nullish coalescing in the 3.7 blog post:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}