{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html","result":{"pageContext":{"name":"Flattened Error Reporting","title":"Flattened Error Reporting","lang":"en","html":"\n TypeScript's error messages can sometimes be a tad verbose...\n With 3.7, we've taken a few cases which could be particularly\n egregious.\n\n Nested Properties\n\n<code><pre>\nlet a = { b: { c: { d: { e: \"string\" } } } };\nlet b = { b: { c: { d: { e: 12 } } } };\n\na = b;\n\n</pre></code>\n// Before, it was 2 lines of code per nested property, which\n quickly meant people learned to read error messages by\n reading the first and then last line of an error message.\n\n Now they're inline. :tada:\n\n Previously in 3.6:\n\n Type '{ b: { c: { d: { e: number; }; }; }; }' is not assignable to type '{ b: { c: { d: { e: string; }; }; }; }'.\n   Types of property 'b' are incompatible.\n     Type '{ c: { d: { e: number; }; }; }' is not assignable to type '{ c: { d: { e: string; }; }; }'.\n       Types of property 'c' are incompatible.\n         Type '{ d: { e: number; }; }' is not assignable to type '{ d: { e: string; }; }'.\n           Types of property 'd' are incompatible.\n             Type '{ e: number; }' is not assignable to type '{ e: string; }'.\n               Types of property 'e' are incompatible.\n                 Type 'number' is not assignable to type 'string'\n\n This can handle working through different types of objects,\n to still give a useful and concise error message.\n\n<code><pre>\nclass ExampleClass {\n  state = \"ok\";\n}\n\nclass OtherClass {\n  state = 12;\n}\n\nlet x = { a: { b: { c: { d: { e: { f: ExampleClass } } } } } };\nlet y = { a: { b: { c: { d: { e: { f: OtherClass } } } } } };\nx = y;\n\n</pre></code>\n// Previously in 3.6:\n\n Type '{ a: { b: { c: { d: { e: { f: typeof OtherClass; }; }; }; }; }; }' is not assignable to type '{ a: { b: { c: { d: { e: { f: typeof ExampleClass; }; }; }; }; }; }'.\n   Types of property 'a' are incompatible.\n     Type '{ b: { c: { d: { e: { f: typeof OtherClass; }; }; }; }; }' is not assignable to type '{ b: { c: { d: { e: { f: typeof ExampleClass; }; }; }; }; }'.\n       Types of property 'b' are incompatible.\n         Type '{ c: { d: { e: { f: typeof OtherClass; }; }; }; }' is not assignable to type '{ c: { d: { e: { f: typeof ExampleClass; }; }; }; }'.\n           Types of property 'c' are incompatible.\n             Type '{ d: { e: { f: typeof OtherClass; }; }; }' is not assignable to type '{ d: { e: { f: typeof ExampleClass; }; }; }'.\n               Types of property 'd' are incompatible.\n                 Type '{ e: { f: typeof OtherClass; }; }' is not assignable to type '{ e: { f: typeof ExampleClass; }; }'.\n                   Types of property 'e' are incompatible.\n                     Type '{ f: typeof OtherClass; }' is not assignable to type '{ f: typeof ExampleClass; }'.\n                       Types of property 'f' are incompatible.\n                         Type 'typeof OtherClass' is not assignable to type 'typeof ExampleClass'.\n                           Type 'OtherClass' is not assignable to type 'ExampleClass'.\n                             Types of property 'state' are incompatible.\n                               Type 'number' is not assignable to type 'string'\n","redirectHref":"/play/?#example/flattened-error-reporting"}},"staticQueryHashes":[]}