{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html","result":{"pageContext":{"name":"Optional Chaining","title":"Optional Chaining","lang":"en","html":"\n Optional chaining reached TC39 Stage 3 consensus during\n 3.7's development. Optional Chaining allows you to write\n code which can immediately stop running expressions when\n it hits a null or undefined.\n\n Property Access\n\n Let's imagine we have an album where the artist, and the\n artists bio might not be present in the data. For example\n a compilation may not have a single artist.\n\n<code><pre>\ntype AlbumAPIResponse = {\n  title: string;\n  artist?: {\n    name: string;\n    bio?: string;\n    previousAlbums?: string[];\n  };\n};\n\ndeclare const album: AlbumAPIResponse;\n\n</pre></code>\n// With optional chaining, you can write\n code like this:\n\n<code><pre>\nconst artistBio = album?.artist?.bio;\n\n// Instead of:\n\nconst maybeArtistBio = album.artist && album.artist.bio;\n\n</pre></code>\n// In this case ?. acts differently than the &&s since &&\n will act differently on \"falsy\" values (e.g. an empty string,\n 0, NaN, and, well, false).\n\n Optional chaining will only take null or undefined as\n a signal to stop and return an undefined.\n\n Optional Element Access\n\n Property access is via the . operator, the optional chaining\n also works with the [] operators when accessing elements.\n\n<code><pre>\nconst maybeArtistBioElement = album?.[\"artist\"]?.[\"bio\"];\n\nconst maybeFirstPreviousAlbum = album?.artist?.previousAlbums?.[0];\n\n// Optional Calls\n\n</pre></code>\n// When dealing with functions which may or may not exist at\n runtime, optional chaining supports only calling a function\n if it exists. This can replace code where you would traditionally\n write something like: if (func) func()\n\n For example here's an optional call to the callback from\n an API request:\n\n<code><pre>\nconst callUpdateMetadata = (metadata: any) => Promise.resolve(metadata); // Fake API call\n\nconst updateAlbumMetadata = async (metadata: any, callback?: () => void) => {\n  await callUpdateMetadata(metadata);\n\n  callback?.();\n};\n\n</pre></code>\n// You can read more about optional chaining in the 3.7 blog post:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"/play/?#example/optional-chaining"}},"staticQueryHashes":[]}