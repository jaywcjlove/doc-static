{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/fixits/big-number-literals.ts.html","result":{"pageContext":{"name":"Big number literals","title":"Big number literals","lang":"en","html":"\n Did you know there is a limit to how big of a number you\n can represent in JavaScript when writing ?\n\n<code><pre>\nconst maxHighValue = 9007199254740991;\nconst maxLowValue = -9007199254740991;\n\n</pre></code>\n// If you go one over/below these numbers\n then you start to get into dangerous territory.\n\n<code><pre>\nconst oneOverMax = 9007199254740992;\nconst oneBelowMin = -9007199254740992;\n\n</pre></code>\n// The solution for handling numbers of this size\n is to convert these numbers to BigInts instead\n of a number:\n\n https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt\n\n TypeScript will now offer a fixit for number\n literals which are above 2^52 (positive / negative)\n which adds the suffix \"n\" which informs JavaScript\n that the type should be BigInt.\n\n Number literals\n<code><pre>\n9007199254740993;\n-9007199254740993;\n9007199254740994;\n-9007199254740994;\n\n// Hex numbers\n0x19999999999999;\n-0x19999999999999;\n0x20000000000000;\n-0x20000000000000;\n0x20000000000001;\n-0x20000000000001;\n","redirectHref":"/play/?target=99#example/big-number-literals"}},"staticQueryHashes":[]}