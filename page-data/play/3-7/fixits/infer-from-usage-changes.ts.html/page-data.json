{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/fixits/infer-from-usage-changes.ts.html","result":{"pageContext":{"name":"Infer From Usage Changes","title":"Infer From Usage Changes","lang":"en","html":"\n With 3.7 TypeScript's existing 'infer from usage'\n code fix became smarter. It will now use a list of\n known important types (string, number, array, Promise)\n and infer whether the usage of a type matches the API\n of these objects.\n\n For the next few examples, select the parameters of\n the functions, click the light bulb and choose\n \"Infer Parameter types...\"\n\n Infer a number array:\n\n<code><pre>\nfunction pushNumber(arr) {\n  arr.push(12);\n}\n\n// Infer a promise:\n\nfunction awaitPromise(promise) {\n  promise.then((value) => console.log(value));\n}\n\n// Infer the function, and it's return type:\n\nfunction inferAny(app) {\n  const result = app.use(\"hi\");\n  return result;\n}\n\n</pre></code>\n// Infer a string array because a string\n was added to it:\n\n<code><pre>\nfunction insertString(names) {\n  names[1] = \"hello\";\n}\n","redirectHref":"/play/?noImplicitAny=false#example/infer-from-usage-changes"}},"staticQueryHashes":[]}