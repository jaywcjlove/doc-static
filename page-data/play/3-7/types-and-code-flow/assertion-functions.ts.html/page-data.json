{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html","result":{"pageContext":{"name":"Assertion Functions","title":"Assertion Functions","lang":"en","html":"\n Given JavaScript's flexibility, it can be a good idea to add\n runtime checks to your code to validate your assumptions.\n\n These are typically called assertions (or invariants) and\n they are small functions which raise errors early when\n your variables don't match up to what you expect.\n\n Node comes with a function for doing this out of the box,\n it's called assert and it's available without an import.\n\n We're going to define our own though. This declares a\n function which asserts that the expression called\n value is true:\n<code><pre>\ndeclare function assert(value: unknown): asserts value;\n\n// Now we're use it to validate the type of an enum\ndeclare const maybeStringOrNumber: string | number;\nassert(typeof maybeStringOrNumber === \"string\");\n\n</pre></code>\n// With TypeScript 3.7, the code flow analysis can use these\n types of functions to figure out what the code is. So,\n when you hover over the variable below - you can see that\n it has been narrowed from a string or number to\n just a string.\n\n<code><pre>\nmaybeStringOrNumber;\n\n</pre></code>\n// You can use assertion functions to make guarantees of\n your types throughout your inferred code, for example\n TypeScript knows that this function will return a\n number without the need to add types to the parameter\n via the above assert declaration.\n\n<code><pre>\nfunction multiply(x: any, y: any) {\n  assert(typeof x === \"number\");\n  assert(typeof y === \"number\");\n\n  return x * y;\n}\n\n</pre></code>\n// Assertion functions are siblings to Type Guards\n example:type-guards except they affect the control flow\n when it continues through the function.\n\n For example, we can use assertion functions to narrow\n an enum down over time:\n\n<code><pre>\ndeclare const oneOfFirstFiveNumbers: 1 | 2 | 3 | 4 | 5;\n\ndeclare function isOdd(param: unknown): asserts param is 1 | 3 | 5;\ndeclare function isBelowFour(param: unknown): asserts param is 1 | 2 | 3 | 4;\n\n// This should cut down the enum to: 1 | 3 | 5\n\nisOdd(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n// This will then cut the enum's possible states to: 1 | 3\n\nisBelowFour(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n</pre></code>\n// This is a primer on some of the features of assertion functions\n in TypeScript 3.7 - you can find out more by reading the\n release notes:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"/play/?#example/assertion-functions"}},"staticQueryHashes":[]}