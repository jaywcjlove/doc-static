{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html","result":{"pageContext":{"name":"Uncalled Function Checks","title":"Uncalled Function Checks","lang":"en","html":"\n New to 3.7 is a check inside if statements for\n when you accidentally use a function instead\n of the return value of a function.\n\n This only applies when the function is known\n to exist making the if statement always be true.\n\n Here is an example plugin interface, where there\n are optional and non-optional callbacks.\n\n<code><pre>\ninterface PluginSettings {\n  pluginShouldLoad?: () => void;\n  pluginIsActivated: () => void;\n}\n\ndeclare const plugin: PluginSettings;\n\n</pre></code>\n// Because pluginShouldLoad could not exist, then\n the check is legitimate.\n\n<code><pre>\nif (plugin.pluginShouldLoad) {\n  // Do something when pluginShouldLoad exists.\n}\n\n// In 3.6 and below, this was not an error.\n\nif (plugin.pluginIsActivated) {\n  // Want to do something when the plugin is activated,\n  // but instead of calling the method we used it as a\n  // property.\n}\n\n</pre></code>\n// pluginIsActivated should always exist, but TypeScript\n still allows the check, because the method is called\n inside the if block.\n\n<code><pre>\nif (plugin.pluginIsActivated) {\n  plugin.pluginIsActivated();\n}\n","redirectHref":"/play/?#example/uncalled-function-checks"}},"staticQueryHashes":[]}