{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/playground/config/new-compiler-defaults.ts.html","result":{"pageContext":{"name":"New Compiler Defaults","title":"New Compiler Defaults","lang":"en","html":"\n Yes, we know, the defaults for TypeScript's tsconfig do\n not have strict turned on. However, at every chance we\n can the team recommends that users try migrate towards\n having strict mode enabled in their configs.\n\n For the playground however, we can happily set the defaults\n to be strict. The playground will also keep track of the\n compiler flags which have changed from the playground's\n defaults and make them sharable in the URL.\n\n You can read more about the URLs in\n example:sharable-urls\n\n Wonder what the new defaults are?\n\n<code><pre>\ndeclare const trueInTS: boolean;\ndeclare const trueInJS: boolean;\ndeclare const monaco: any;\n\nconst defaultCompilerOptions = {\n  noImplicitAny: true,\n  strictNullChecks: trueInTS,\n  strictFunctionTypes: true,\n  strictPropertyInitialization: true,\n  strictBindCallApply: true,\n  noImplicitThis: true,\n  noImplicitReturns: true,\n\n  alwaysStrict: true,\n  allowUnreachableCode: false,\n  allowUnusedLabels: false,\n\n  downlevelIteration: false,\n  noEmitHelpers: false,\n  noLib: false,\n  noStrictGenericChecks: false,\n  noUnusedLocals: false,\n  noUnusedParameters: false,\n\n  esModuleInterop: true,\n  preserveConstEnums: false,\n  removeComments: false,\n  skipLibCheck: false,\n\n  checkJs: trueInJS,\n  allowJs: trueInJS,\n\n  experimentalDecorators: false,\n  emitDecoratorMetadata: false,\n\n  target: monaco.languages.typescript.ScriptTarget.ES2017,\n  jsx: monaco.languages.typescript.JsxEmit.None,\n};\n","redirectHref":"/play/?#example/new-compiler-defaults"}},"staticQueryHashes":[]}