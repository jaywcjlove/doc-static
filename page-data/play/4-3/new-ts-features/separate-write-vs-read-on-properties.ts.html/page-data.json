{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-3/new-ts-features/separate-write-vs-read-on-properties.ts.html","result":{"pageContext":{"name":"Separate Write vs Read on Properties","title":"Separate Write vs Read on Properties","lang":"en","html":" TypeScript's type system aims to provide type tools\n which match existing JavaScript code, and one of the\n features which comes natural to JavaScript code is\n to support many different types inputs for a value,\n but to only provide one set output.\n\n With TS 4.3, you can now have different set types\n vs the get for a particular property with getters\n and setters.\n\n For example, this timer accepts many possible types\n when setting the start property, but will only give\n a Date object back.\n\n<code><pre>\nclass Timer {\n  #start = new Date();\n\n  get start(): Date {\n    return this.#start;\n  }\n\n  set start(value: string | number | Date | undefined) {\n    if (!value) this.#start = new Date();\n    else if (value instanceof Date) this.#start = value;\n    else this.#start = new Date(value);\n  }\n}\n\nconst timer = new Timer();\n\ntimer.start = \"2021-06-28T14\";\nconsole.log(timer.start);\n\ntimer.start = 1624890417925;\nconsole.log(timer.start);\n\ntimer.start = new Date();\nconsole.log(timer.start);\n","redirectHref":"/play/?ts=4.3.4#example/separate-write-vs-read-on-properties"}},"staticQueryHashes":[]}