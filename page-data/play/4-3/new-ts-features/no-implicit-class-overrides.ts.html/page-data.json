{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-3/new-ts-features/no-implicit-class-overrides.ts.html","result":{"pageContext":{"name":"No Implicit Class Overrides","title":"No Implicit Class Overrides","lang":"en","html":" When working with class hierarchies, it can be possible\n to get the functions which you override out of sync because\n prior to 4.3, there is no type-safe way to ensure a function\n is always overriding an existing function.\n\n For example, this Account class expects its one function to be\n overridden when a user is an admin:\n\n<code><pre>\nclass Account {\n  doSomething() {\n    console.log(\"Make me a sandwich\");\n  }\n}\n\nclass Admin extends Account {\n  doSomething() {\n    console.log(\"Sudo make me a sandwich\");\n  }\n}\n\n</pre></code>\n// You can change the names of these functions, for example\n maybe 'doSomething' is a bit vague. If you change the name\n to 'performAction' in Account, but _not_ in Admin you have\n decoupled the functions un-expectedly.\n\n To enforce the consistency, there is a new flag: noImplicitOverride\n and additional syntax. To see it in action, delete the space after the @\n in the following comment:\n\n @ noImplicitOverride\n\n Then you need to add `override` where the red error markers are.\n","redirectHref":"/play/?ts=4.3.4#example/no-implicit-class-overrides"}},"staticQueryHashes":[]}