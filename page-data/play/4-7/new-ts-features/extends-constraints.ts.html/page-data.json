{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-7/new-ts-features/extends-constraints.ts.html","result":{"pageContext":{"name":"Extends Constraints","title":"Extends Constraints","lang":"en","html":" In 4.7 TypeScript added support for inlining an extends clause\n in a conditional type. This can help reduce the complexity of\n conditional types.\n\n If you're new to conditional types see: example:conditional-types\n\n As an example, here is a 4.6 conditional type which looks\n at the return value of a function and only returns a type\n if the return type is a string.\n\n prettier-ignore\n<code><pre>\ntype ReturnTypeOnlyStrings47<T> =\n  T extends (...args: any[]) => \n    infer R ? (R extends string ? R : never) : never;\n\n</pre></code>\n// It's essentially two if statements, one for the return type\n and one then to check if the return type is a string. In\n 4.7 this can be done inside one statement.\n\n prettier-ignore\n<code><pre>\ntype ReturnType2<T> =\n  T extends (...args: any[]) =>\n    (infer R extends string) ? R : never;\n\n</pre></code>\n// It's a little like being able to use an && inside the conditional\n type check, which makes code a bit simpler and more readable.","redirectHref":"/play/?ts=4.7.3#example/extends-constraints"}},"staticQueryHashes":[]}