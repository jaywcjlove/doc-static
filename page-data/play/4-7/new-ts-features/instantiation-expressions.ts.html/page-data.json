{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-7/new-ts-features/instantiation-expressions.ts.html","result":{"pageContext":{"name":"Instantiation Expressions","title":"Instantiation Expressions","lang":"en","html":" Prior to TypeScript 4.7, you would have to do call a function\n in order to narrow a generic type to something specific. For\n example, let's take a Map object:\n\n<code><pre>\nconst map = new Map<string, number>();\n//    ^?\n\n</pre></code>\n// This map uses strings for keys, and numbers for values. Until\n we created the map, the values for key (string) and value (number)\n were yet to be defined and could still be anything.\n\n Instantiation expressions means that we can create a version of the\n Map function which will always accept only strings for keys and \n numbers for values:\n\n<code><pre>\nconst MapStrNum = Map<string, number>;\n\nconst map2 = new MapStrNum()\n//    ^?\n\n</pre></code>\n// This feature allows us to elegantly create a more specific typed\n functions without having to wrap the function in another function.","redirectHref":"/play/?ts=4.7.3#example/instantiation-expressions"}},"staticQueryHashes":[]}