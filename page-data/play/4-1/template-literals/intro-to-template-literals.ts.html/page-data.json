{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-1/template-literals/intro-to-template-literals.ts.html","result":{"pageContext":{"name":"Intro to Template Literals","title":"Intro to Template Literals","lang":"en","html":"\n TypeScript already supports treating an exact string/number \n as a literal, for example this function only allows two\n exact strings and no others:\n\n<code><pre>\ndeclare function enableFeature(command: \"redesign\" | \"newArtistPage\"): void;\nenableFeature(\"redesign\");\nenableFeature(`newArtistPage`);\nenableFeature(\"newPaymentSystem\");\n\n</pre></code>\n// String literals supports all the way you can write a \n string in ES2020, with TypeScript 4.1 we've extended \n support for interpolation inside a template string literal.\n\n<code><pre>\ntype Features = \"Redesign\" | \"newArtistPage\";\n\n</pre></code>\n// This takes the Features union above, and transforms\n each part of the union to add `-branch` after the string\n<code><pre>\ntype FeatureBranch = `${Features}-branch`;\n\n</pre></code>\n// 4.1 supports a set of new generic-like keywords which\n you can use inside a template literal to manipulate strings.\n These are: Uppercase, Lowercase, Capitalize and Uncapitalize\n\n<code><pre>\ntype FeatureID = `${Lowercase<Features>}-id`;\ntype FeatureEnvVar = `${Uppercase<Features>}-ID`;\n\n</pre></code>\n// Strings in unions are cross multiplied, so if used more\n than one union type then each union member is evaluated\n against each member from the other union.\n\n<code><pre>\ntype EnabledStates = \"enabled\" | \"disabled\";\ntype FeatureUIStrings = `${Features} is ${EnabledStates}`;\n\n</pre></code>\n// This ensures that every possible combination of each\n union is accounted for.\n\n This type can then be used with an indexed signature\n to quickly make a list of keys:\n\n<code><pre>\ntype SetFeatures = {\n  [K in FeatureID]: boolean\n};\n\n</pre></code>\n// Continue learning more about template literals in\n example:mapped-types-with-template-literals\n\n Or read the announcement blog post:\n https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types\n","redirectHref":"/play/?ts=4.1.0-dev.20201028#example/intro-to-template-literals"}},"staticQueryHashes":[]}