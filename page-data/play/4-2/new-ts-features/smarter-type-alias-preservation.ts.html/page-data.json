{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/4-2/new-ts-features/smarter-type-alias-preservation.ts.html","result":{"pageContext":{"name":"Smarter Type Alias Preservation","title":"Smarter Type Alias Preservation","lang":"en","html":" Type aliases differ from interfaces in that they aren't guaranteed to\n keep their name as they are used throughout the compiler. In part, this\n is a trade-off on what gives them their flexibility, but the downside\n is that sometimes TypeScript shows an object instead of the name.\n\n In 4.2, the compiler keeps track of the original name for a type alias\n in more places. Reducing the size of error messages and hover hints.\n\n<code><pre>\ntype Shape =\n  | { kind: \"circle\"; radius: number }\n  | { kind: \"square\"; size: number }\n  | { kind: \"rectangle\"; width: number; height: number };\n\ntype Named = { name: string };\n\n// Previously: Shape\ndeclare let shape: Shape;\n\n</pre></code>\n// No change there, but if you took the existing shape union and extend it,\n then TypeScript used to 'lose' the original name:\n\n Previously: { kind: \"circle\"; radius: number; | { kind: \"square\"; size: number; | { kind: \"rectangle\"; width: number; height: number; | undefined\n<code><pre>\ndeclare let optionalShape: Shape | undefined;\n\n// Previously: { kind: \"circle\"; radius: number; | { kind: \"square\"; size: number; | { kind: \"rectangle\"; width: number; height: number; | undefined\ndeclare let namedShape: Shape & Named;\n\n// Previously: ({ kind: \"circle\"; radius: number; Named) | ({ kind: \"square\"; size: number; Named) | ({ kind: \"rectangle\"; width: number; height: number; Named) | undefined\ndeclare let optionalNamedShape: (Shape & Named) | undefined; // (Shape & Named) | undefined\n","redirectHref":"/play/?ts=4.2.0-beta#example/smarter-type-alias-preservation"}},"staticQueryHashes":[]}