{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html","result":{"pageContext":{"name":"Private Class Fields","title":"Private Class Fields","lang":"en","html":" 3.8 adds private fields, which are a way of declaring a class field to\n be unavailable outside of the containing class, including to subclasses.\n\n For example, the Person class below does not allow for anyone using an\n instance of the class to read  the firstName, lastName or prefix\n\n<code><pre>\nclass Person {\n  #firstName: string;\n  #lastName: string;\n  #prefix: string;\n\n  constructor(firstName: string, lastName: string, prefix: string) {\n    this.#firstName = firstName;\n    this.#lastName = lastName;\n    this.#prefix = prefix;\n  }\n\n  greet() {\n    // In iceland it is preferable to use a full name instead of [prefix] [lastname]\n    // https://www.w3.org/International/questions/qa-personal-names#patronymic\n    if (navigator.languages[0] === \"is\") {\n      console.log(`Góðan dag, ${this.#firstName} ${this.#lastName}`);\n    } else {\n      console.log(`Hello, ${this.#prefix} ${this.#lastName}`);\n    }\n  }\n}\n\nlet jeremy = new Person(\"Jeremy\", \"Bearimy\", \"Mr\");\n\n// You can't get to any of the private fields from outside that class:\n\n// For example, this won't work:\nconsole.log(jeremy.#lastName);\n\n// Nor this:\nconsole.log(\"Person's last name:\", jeremy[\"#lastName\"]);\n\n</pre></code>\n// A common question we get is \"Why would you use this over the 'private'\n keyword in a classfield?\" - let's look by making a comparison to\n how it worked in TypeScript before 3.8:\n\n<code><pre>\nclass Dog {\n  private _name: string;\n  constructor(name: string) {\n    this._name = name;\n  }\n}\n\nlet oby = new Dog(\"Oby\");\n// Won't let you access via dot notation\noby._name = \"Spot\";\n// But TypeScript allows bracket notation as an escape clause\noby[\"_name\"] = \"Cherny\";\n\n</pre></code>\n// The TypeScript reference of private only exists at type-level\n which means that you can only trust it so far. With private fields\n soon to be a part of the JavaScript language, then you can make better\n guarantees about the visibility of your code.\n\n We don't plan on deprecating the `private` field keyword\n in TypeScript, so your existing code will continue to work, but now\n you can write code which is closer to the JavaScript language instead.\n\n You can learn more about class fields in the tc39 proposal\n https://github.com/tc39/proposal-class-fields/\n and the beta release notes:\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#ecmascript-private-fields\n","redirectHref":"/play/?ts=3.8.3#example/private-class-fields"}},"staticQueryHashes":[]}