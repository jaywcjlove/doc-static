{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/modern-javascript/import-export.ts.html","result":{"pageContext":{"name":"Import Export","title":"Import Export","lang":"en","html":"\n JavaScript added import/export to the language back in 2016\n and TypeScript has complete support for this style of\n linking between files and to external modules. TypeScript\n expands on this syntax by also allowing types to be passed\n with code.\n\n Let's look at importing code from a module.\n\n<code><pre>\nimport { danger, message, warn, DangerDSLType } from \"danger\";\n\n</pre></code>\n// This takes a set of named imports from a node module\n called danger. While there are more than four imports,\n these are the only ones that we have chosen to import.\n\n Specifically naming which imports you are importing\n gives tools the ability to remove unused code in your\n apps, and helps you understand what is being used in\n a particular file.\n\n In this case: danger, message and warn are JavaScript\n imports - where as DangerDSLType is an interface type.\n\n TypeScript lets engineers document their code using\n JSDoc, and docs are imported also. For example if\n you hover on the different parts below, you see\n explanations of what they are.\n\n<code><pre>\ndanger.git.modified_files;\n\n</pre></code>\n// If you want to know how to provide these documentation\n annotations read example:jsdoc-support\n\n Another way to import code is by using the default export\n of a module. An example of this is the debug module, which\n exposes a function that creates a logging function.\n\n<code><pre>\nimport debug from \"debug\";\nconst log = debug(\"playground\");\nlog(\"Started running code\");\n\n</pre></code>\n// Because of the nature of default exports having no true\n name, they can be tricky when applied with static analysis\n tools like the refactoring support in TypeScript but they\n have their uses.\n\n Because there is a long history in importing/exporting code\n in JavaScript, there is a confusing part of default exports:\n Some exports have documentation that implies you can write\n an import like this:\n\n<code><pre>\nimport req from \"request\";\n\n</pre></code>\n// However that fails, and then you find a stack overflow\n which recommends the import as:\n\n<code><pre>\nimport * as req from \"request\";\n\n</pre></code>\n// And this works. Why? We'll get back to that at the end of\n our section on exporting.\n\n In order to import, you must be able to export. The modern\n way to write exports is using the export keyword.\n\n<code><pre>\n/** The current stickers left on the roll */\nexport const numberOfStickers = 11;\n\n</pre></code>\n// This could be imported into another file by:\n\n import { numberOfStickers } from \"./path/to/file\"\n\n You can have as many of those in a file as you like. Then\n a default export is close to the same thing.\n\n<code><pre>\n/** Generates a sticker for you */\nconst stickerGenerator = () => {};\nexport default stickerGenerator;\n\n</pre></code>\n// This could be imported into another file by:\n\n import getStickers from \"./path/to/file\"\n\n The naming is up to the module consumer.\n\n These aren't the only types of imports, just the most common\n in modern code. Covering all of the ways code can cross\n module boundaries is a very long topic in the handbook:\n\n https://www.typescriptlang.org/docs/handbook/modules.html\n\n However, to try cover that last question. If you look at\n the JavaScript code for this example - you'll see this:\n\n var stickerGenerator = function () { };\n exports.default = stickerGenerator;\n\n This sets the default property on the exports object\n to be stickerGenerator. There is code out there which\n sets exports to be a function, instead of an object.\n\n TypeScript opted to stick with the ECMAScript specification\n about how to handle those cases, which is to raise an\n error. However, there is a compiler setting which will\n automatically handle those cases for you which is\n esModuleInterop.\n\n If you turn that on for this example, you will see that\n error go away.\n","redirectHref":"/play/?#example/import-export"}},"staticQueryHashes":[]}