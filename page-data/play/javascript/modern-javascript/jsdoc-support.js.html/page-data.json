{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/modern-javascript/jsdoc-support.js.html","result":{"pageContext":{"name":"JSDoc Support","title":"JSDoc Support","lang":"en","html":"\n TypeScript has very rich JSDoc support, for a lot of cases\n you can even skip making your files .ts and just use JSDoc\n annotations to create a rich development environment.\n\n A JSDoc comment is a multi-line comment which starts with\n two stars instead of one.\n\n<code><pre>\n/* This is a normal comment */\n/** This is a JSDoc comment */\n\n</pre></code>\n// JSDoc comments become attached to the closest JavaScript\n code below it.\n\n<code><pre>\nconst myVariable = \"Hi\";\n\n</pre></code>\n// If you hover over myVariable, you can see that it has the\n text from inside the JSDoc comment attached.\n\n JSDoc comments are a way to provide type information to\n TypeScript and your editors. Let's start with an easy one\n setting a variable's type to a built-in type.\n\n For all of these examples, you can hover over the name,\n and on the next line try write [example]. to see the\n auto-complete options.\n\n<code><pre>\n/** @type {number} */\nvar myNumber;\n\n</pre></code>\n// You can see all of the supported tags in the handbook:\n\n https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc\n\n However, we'll try go through some of the more common examples\n here. You can also copy & paste any examples from the handbook\n into here.\n\n Importing the types for JavaScript configuration files:\n\n<code><pre>\n/** @type { import(\"webpack\").Config } */\nconst config = {};\n\n// Creating a complex type to re-use in many places:\n\n/**\n * @typedef {Object} User - a User account\n * @property {string} displayName - the name used to show the user\n * @property {number} id - a unique id\n */\n\n// Then use it by referencing the typedef's name:\n\n/** @type { User } */\nconst user = {};\n\n</pre></code>\n// There's the TypeScript compatible inline type shorthand,\n which you can use for both type and typedef:\n\n<code><pre>\n/** @type {{ owner: User, name: string }} */\nconst resource;\n\n/** @typedef {{owner: User, name: string}} Resource */\n\n/** @type {Resource} */\nconst otherResource;\n\n// Declaring a typed function:\n\n/**\n * Adds two numbers together\n * @param {number} a The first number\n * @param {number} b The second number\n * @returns {number}\n */\nfunction addTwoNumbers(a, b) {\n  return a + b;\n}\n\n// You can use most of TypeScript's type tools, like unions:\n\n/** @type {(string | boolean)} */\nlet stringOrBoolean = \"\";\nstringOrBoolean = false;\n\n</pre></code>\n// Extending globals in JSDoc is a more involved process\n which you can see in the VS Code docs:\n\n https://code.visualstudio.com/docs/nodejs/working-with-javascript#_global-variables-and-type-checking\n\n Adding JSDoc comments to your functions is a win-win\n situation; you get better tooling and so do all your\n API consumers.\n","redirectHref":"/play/?#example/jsdoc-support"}},"staticQueryHashes":[]}