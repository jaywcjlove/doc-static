{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/working-with-classes/classes-101.ts.html","result":{"pageContext":{"name":"Classes 101","title":"Classes 101","lang":"en","html":"\n A class is a special type of JavaScript object which\n is always created via a constructor. These classes\n act a lot like objects, and have an inheritance structure\n similar to languages such as Java/C#/Swift.\n\n Here's an example class:\n\n<code><pre>\nclass Vendor {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  greet() {\n    return \"Hello, welcome to \" + this.name;\n  }\n}\n\n</pre></code>\n// An instance can be created via the new keyword, and\n you can call methods and access properties from the\n object.\n\n<code><pre>\nconst shop = new Vendor(\"Ye Olde Shop\");\nconsole.log(shop.greet());\n\n</pre></code>\n// You can subclass an object. Here's a food cart which\n has a variety as well as a name:\n\n<code><pre>\nclass FoodTruck extends Vendor {\n  cuisine: string;\n\n  constructor(name: string, cuisine: string) {\n    super(name);\n    this.cuisine = cuisine;\n  }\n\n  greet() {\n    return \"Hi, welcome to food truck \" + this.name + \". We serve \" + this.cuisine + \" food.\";\n  }\n}\n\n</pre></code>\n// Because we indicated that there needs to be two arguments\n to create a new FoodTruck, TypeScript will provide errors\n when you only use one:\n\n<code><pre>\nconst nameOnlyTruck = new FoodTruck(\"Salome's Adobo\");\n\n</pre></code>\n// Correctly passing in two arguments will let you create a\n new instance of the FoodTruck:\n\n<code><pre>\nconst truck = new FoodTruck(\"Dave's Doritos\", \"junk\");\nconsole.log(truck.greet());\n","redirectHref":"/play/?#example/classes-101"}},"staticQueryHashes":[]}