{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/working-with-classes/generic-classes.ts.html","result":{"pageContext":{"name":"Generic Classes","title":"Generic Classes","lang":"en","html":"\n This example is mostly in TypeScript, because it is much\n easier to understand this way first. At the end we'll\n cover how to create the same class but using JSDoc instead.\n\n Generic Classes are a way to say that a particular type\n depends on another type. For example, here is a drawer\n which can hold any sort of object, but only one type:\n\n<code><pre>\nclass Drawer<ClothingType> {\n  contents: ClothingType[] = [];\n\n  add(object: ClothingType) {\n    this.contents.push(object);\n  }\n\n  remove() {\n    return this.contents.pop();\n  }\n}\n\n</pre></code>\n// In order to use a Drawer, you will need another\n type to work with:\n\n<code><pre>\ninterface Sock {\n  color: string;\n}\n\ninterface TShirt {\n  size: \"s\" | \"m\" | \"l\";\n}\n\n</pre></code>\n// We can create a Drawer just for socks by passing in the\n type Sock when we create a new Drawer:\n<code><pre>\nconst sockDrawer = new Drawer<Sock>();\n\n// Now we can add or remove socks to the drawer:\nsockDrawer.add({ color: \"white\" });\nconst mySock = sockDrawer.remove();\n\n// As well as creating a drawer for TShirts:\nconst tshirtDrawer = new Drawer<TShirt>();\ntshirtDrawer.add({ size: \"m\" });\n\n</pre></code>\n// If you're a bit eccentric, you could even create a drawer\n which mixes Socks and TShirts by using a union:\n\n<code><pre>\nconst mixedDrawer = new Drawer<Sock | TShirt>();\n\n</pre></code>\n// Creating a class like Drawer without the extra TypeScript\n syntax requires using the template tag in JSDoc. In this\n example we define the template variable, then provide\n the properties on the class:\n\n To have this work in the playground, you'll need to change\n the settings to be a JavaScript file, and delete the\n TypeScript code above\n\n<code><pre>\n/**\n * @template {{}} ClothingType\n */\nclass Dresser {\n  constructor() {\n    /** @type {ClothingType[]} */\n    this.contents = [];\n  }\n\n  /** @param {ClothingType} object */\n  add(object) {\n    this.contents.push(object);\n  }\n\n  /** @return {ClothingType} */\n  remove() {\n    return this.contents.pop();\n  }\n}\n\n// Then we create a new type via JSDoc:\n\n/**\n * @typedef {Object} Coat An item of clothing\n * @property {string} color The colour for coat\n */\n\n</pre></code>\n// Then when we create a new instance of that class\n we use @type to assign the variable as a Dresser\n which handles Coats.\n\n<code><pre>\n/** @type {Dresser<Coat>} */\nconst coatDresser = new Dresser();\n\ncoatDresser.add({ color: \"green\" });\nconst coat = coatDresser.remove();\n","redirectHref":"/play/?#example/generic-classes"}},"staticQueryHashes":[]}