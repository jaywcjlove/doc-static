{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/javascript-essentials/functions.ts.html","result":{"pageContext":{"name":"Functions","title":"Functions","lang":"en","html":"\n There are quite a few ways to declare a function in\n JavaScript. Let's look at a function which adds two\n numbers together:\n\n Creates a function in global scope called addOldSchool\n<code><pre>\nfunction addOldSchool(x, y) {\n  return x + y;\n}\n\n</pre></code>\n// You can move the name of the function to a variable\n name also\n<code><pre>\nconst anonymousOldSchoolFunction = function (x, y) {\n  return x + y;\n};\n\n// You can also use fat-arrow shorthand for a function\nconst addFunction = (x, y) => {\n  return x + y;\n};\n\n</pre></code>\n// We're going to focus on the last one, but everything\n applies to all three formats.\n\n TypeScript provides additional syntax which adds to a\n function definition and offers hints on what types\n are expected by this function.\n\n Up next is the most open version of the add function, it\n says that add takes two inputs of any type: this could\n be strings, numbers or objects which you've made.\n\n<code><pre>\nconst add1 = (x: any, y: any) => {\n  return x + y;\n};\nadd1(\"Hello\", 23);\n\n</pre></code>\n// This is legitimate JavaScript (strings can be added\n like this for example) but isn't optimal for our function\n which we know is for numbers, so we'll convert the x and\n y to only be numbers.\n\n<code><pre>\nconst add2 = (x: number, y: number) => {\n  return x + y;\n};\nadd2(16, 23);\nadd2(\"Hello\", 23);\n\n</pre></code>\n// Great. We get an error when anything other than a number\n is passed in. If you hover over the word add2 above,\n you'll see that TypeScript describes it as:\n\n   const add2: (x: number, y: number) => number\n\n Where it has inferred that when the two inputs are\n numbers the only possible return type is a number.\n This is great, you don't have to write extra syntax.\n Let's look at what it takes to do that:\n\n<code><pre>\nconst add3 = (x: number, y: number): string => {\n  return x + y;\n};\n\n</pre></code>\n// This function fails because we told TypeScript that it\n should expect a string to be returned but the function\n didn't live up to that promise.\n\n<code><pre>\nconst add4 = (x: number, y: number): number => {\n  return x + y;\n};\n\n</pre></code>\n// This is a very explicit version of add2 - there are\n cases when you want to use the explicit return type\n syntax to give yourself a space to work within before\n you get started. A bit like how test-driven development\n recommends starting with a failing test, but in this case\n it's with a failing shape of a function instead.\n\n This example is only a primer, you can learn a lot more\n about how functions work in TypeScript in the handbook and\n inside the Functional JavaScript section of the examples:\n\n https://www.typescriptlang.org/docs/handbook/functions.html\n example:function-chaining\n\n And to continue our tour of JavaScript essentials,\n we'll look at how code flow affects the TypeScript types:\n example:code-flow\n","redirectHref":"/play/?noImplicitAny=false#example/functions"}},"staticQueryHashes":[]}