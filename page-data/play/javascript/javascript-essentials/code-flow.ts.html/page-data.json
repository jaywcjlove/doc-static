{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/javascript-essentials/code-flow.ts.html","result":{"pageContext":{"name":"Code Flow","title":"Code Flow","lang":"en","html":"\n How code flows inside our JavaScript files can affect\n the types throughout our programs.\n\n<code><pre>\nconst users = [{ name: \"Ahmed\" }, { name: \"Gemma\" }, { name: \"Jon\" }];\n\n// We're going to look to see if we can find a user named \"jon\".\nconst jon = users.find((u) => u.name === \"jon\");\n\n</pre></code>\n// In the above case, 'find' could fail. In that case we\n don't have an object. This creates the type:\n\n   { name: string } | undefined\n\n If you hover your mouse over the three following uses of 'jon' below,\n you'll see how the types change depending on where the word is located:\n\n<code><pre>\nif (jon) {\n  jon;\n} else {\n  jon;\n}\n\n</pre></code>\n// The type '{ name: string } | undefined' uses a TypeScript\n feature called union types. A union type is a way to\n declare that an object could be one of many things.\n\n The pipe acts as the separator between different types.\n JavaScript's dynamic nature means that lots of functions\n receive and return objects of unrelated types and we need\n to be able to express which ones we might be dealing with.\n\n We can use this in a few ways. Let's start by looking at\n an array where the values have different types.\n\n<code><pre>\nconst identifiers = [\"Hello\", \"World\", 24, 19];\n\n</pre></code>\n// We can use the JavaScript 'typeof x === y' syntax to\n check for the type of the first element. You can hover on\n 'randomIdentifier' below to see how it changes between\n different locations\n\n<code><pre>\nconst randomIdentifier = identifiers[0];\nif (typeof randomIdentifier === \"number\") {\n  randomIdentifier;\n} else {\n  randomIdentifier;\n}\n\n</pre></code>\n// This control flow analysis means that we can write vanilla\n JavaScript and TypeScript will try to understand how the\n code types will change in different locations.\n\n To learn more about code flow analysis:\n - example:type-guards\n\n To continue reading through examples you could jump to a\n few different places now:\n\n - Modern JavaScript: example:immutability\n - Type Guards: example:type-guards\n - Functional Programming with JavaScript example:function-chaining\n","redirectHref":"/play/?strictNullChecks=true#example/code-flow"}},"staticQueryHashes":[]}