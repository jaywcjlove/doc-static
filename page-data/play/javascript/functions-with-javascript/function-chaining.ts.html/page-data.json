{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/functions-with-javascript/function-chaining.ts.html","result":{"pageContext":{"name":"Function Chaining","title":"Function Chaining","lang":"en","html":"\n Function chaining APIs are a common pattern in\n JavaScript, which can make your code focused\n with less intermediary values and easier to read\n because of their nesting qualities.\n\n A really common API which works via chaining\n is jQuery. Here is an example of jQuery\n being used with the types from DefinitelyTyped:\n\n<code><pre>\nimport $ from \"jquery\";\n\n// Here's an example use of the jQuery API:\n\n$(\"#navigation\").css(\"background\", \"red\").height(300).fadeIn(200);\n\n</pre></code>\n// If you add a dot on the line above, you'll see\n a long list of functions. This pattern is easy to\n reproduce in JavaScript. The key is to make sure\n you always return the same object.\n\n Here is an example API which creates a chaining\n API. The key is to have an outer function which\n keeps track of internal state, and an object which\n exposes the API that is always returned.\n\n<code><pre>\nconst addTwoNumbers = (start = 1) => {\n  let n = start;\n\n  const api = {\n    // Implement each function in your API\n    add(inc: number = 1) {\n      n += inc;\n      return api;\n    },\n\n    print() {\n      console.log(n);\n      return api;\n    },\n  };\n  return api;\n};\n\n</pre></code>\n// Which allows the same style of API as we\n saw in jQuery:\n\n<code><pre>\naddTwoNumbers(1).add(3).add().print().add(1);\n\n// Here's a similar example which uses a class:\n\nclass AddNumbers {\n  private n: number;\n\n  constructor(start = 0) {\n    this.n = start;\n  }\n\n  public add(inc = 1) {\n    this.n = this.n + inc;\n    return this;\n  }\n\n  public print() {\n    console.log(this.n);\n    return this;\n  }\n}\n\n// Here it is in action:\n\nnew AddNumbers(2).add(3).add().print().add(1);\n\n</pre></code>\n// This example used the TypeScript\n type inference to provide a way to\n provide tooling to JavaScript patterns.\n\n For more examples on this:\n\n  - example:code-flow\n","redirectHref":"/play/?esModuleInterop=true#example/function-chaining"}},"staticQueryHashes":[]}