{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/external-apis/typescript-with-web.js.html","result":{"pageContext":{"name":"TypeScript with Web","title":"TypeScript with Web","lang":"en","html":"\n The DOM (Document Object Model) is the underlying API for\n working with a webpage, and TypeScript has great support\n for that API.\n\n Let's create a popover to show when you press \"Run\" in\n the toolbar above.\n\n<code><pre>\nconst popover = document.createElement(\"div\");\npopover.id = \"example-popover\";\n\n</pre></code>\n// Note that popover is correctly typed to be a HTMLDivElement\n specifically because we passed in \"div\".\n\n To make it possible to re-run this code, we'll first\n add a function to remove the popover if it was already there.\n\n<code><pre>\nconst removePopover = () => {\n  const existingPopover = document.getElementById(popover.id);\n  if (existingPopover && existingPopover.parentElement) {\n    existingPopover.parentElement.removeChild(existingPopover);\n  }\n};\n\n// Then call it right away.\n\nremovePopover();\n\n</pre></code>\n// We can set the inline styles on the element via the\n .style property on a HTMLElement - this is fully typed.\n\n<code><pre>\npopover.style.backgroundColor = \"#0078D4\";\npopover.style.color = \"white\";\npopover.style.border = \"1px solid black\";\npopover.style.position = \"fixed\";\npopover.style.bottom = \"10px\";\npopover.style.left = \"20px\";\npopover.style.width = \"200px\";\npopover.style.height = \"100px\";\npopover.style.padding = \"10px\";\n\n// Including more obscure, or deprecated CSS attributes.\npopover.style.webkitBorderRadius = \"4px\";\n\n</pre></code>\n// To add content to the popover, we'll need to add\n a paragraph element and use it to add some text.\n\n<code><pre>\nconst message = document.createElement(\"p\");\nmessage.textContent = \"Here is an example popover\";\n\n// And we'll also add a close button.\n\nconst closeButton = document.createElement(\"a\");\ncloseButton.textContent = \"X\";\ncloseButton.style.position = \"absolute\";\ncloseButton.style.top = \"3px\";\ncloseButton.style.right = \"8px\";\ncloseButton.style.color = \"white\";\n\ncloseButton.onclick = () => {\n  removePopover();\n};\n\n// Then add all of these elements on to the page.\npopover.appendChild(message);\npopover.appendChild(closeButton);\ndocument.body.appendChild(popover);\n\n</pre></code>\n// If you hit \"Run\" above, then a popup should appear\n in the bottom left, which you can close by clicking\n on the x in the top right of the popup.\n\n This example shows how you can work with the DOM API\n in JavaScript - but using TypeScript to provide great\n tooling support.\n\n There is an extended example for TypeScript tooling with\n WebGL available here: example:typescript-with-webgl\n","redirectHref":"/play/?#example/typescript-with-web"}},"staticQueryHashes":[]}