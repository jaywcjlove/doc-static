{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/javascript/helping-with-javascript/errors.ts.html","result":{"pageContext":{"name":"Errors","title":"Errors","lang":"en","html":"\n By default TypeScript doesn't provide error messaging\n inside JavaScript. Instead the tooling is focused on\n providing rich support for editors.\n\n Turning on errors however, is pretty easy. In a\n typical JS file, all that's required to turn on TypeScript\n error messages is adding the following comment:\n\n @ts-check\n\n<code><pre>\nlet myString = \"123\";\nmyString = {};\n\n</pre></code>\n// This may start to add a lot of red squiggles inside your\n JS file. While still working inside JavaScript, you have\n a few tools to fix these errors.\n\n For some of the trickier errors, which you don't feel\n code changes should happen, you can use JSDoc annotations\n to tell TypeScript what the types should be:\n\n<code><pre>\n/** @type {string | {}} */\nlet myStringOrObject = \"123\";\nmyStringOrObject = {};\n\n// Which you can read more on here: example:jsdoc-support\n\n</pre></code>\n// You could declare the failure unimportant, by telling\n TypeScript to ignore the next error:\n\n<code><pre>\nlet myIgnoredError = \"123\";\n// @ts-ignore\nmyStringOrObject = {};\n\n</pre></code>\n// You can use type inference via the flow of code to make\n changes to your JavaScript: example:code-flow\n","redirectHref":"/play/?#example/errors"}},"staticQueryHashes":[]}