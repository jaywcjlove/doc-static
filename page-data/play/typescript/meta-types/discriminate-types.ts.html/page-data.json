{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/meta-types/discriminate-types.ts.html","result":{"pageContext":{"name":"Discriminate Types","title":"Discriminate Types","lang":"en","html":" A discriminated type union is where you use code flow\n analysis to reduce a set of potential objects down to one\n specific object.\n\n This pattern works really well for sets of similar\n objects with a different string or number constant\n for example: a list of named events, or versioned\n sets of objects.\n\n<code><pre>\ntype TimingEvent = { name: \"start\"; userStarted: boolean } | { name: \"closed\"; duration: number };\n\n</pre></code>\n// When event comes into this function, it could be any\n of the two potential types.\n\n<code><pre>\nconst handleEvent = (event: TimingEvent) => {\n  // By using a switch against event.name TypeScript's code\n  // flow analysis can determine that an object can only\n  // be represented by one type in the union.\n\n  switch (event.name) {\n    case \"start\":\n      // This means you can safely access userStarted\n      // because it's the only type inside TimingEvent\n      // where name is \"start\"\n      const initiatedByUser = event.userStarted;\n      break;\n\n    case \"closed\":\n      const timespan = event.duration;\n      break;\n  }\n};\n\n</pre></code>\n// This pattern is the same with numbers which we can use\n as the discriminator.\n\n In this example, we have a discriminate union and an\n additional error state to handle.\n\n<code><pre>\ntype APIResponses = { version: 0; msg: string } | { version: 1; message: string; status: number } | { error: string };\n\nconst handleResponse = (response: APIResponses) => {\n  // Handle the error case, and then return\n  if (\"error\" in response) {\n    console.error(response.error);\n    return;\n  }\n\n  // TypeScript now knows that APIResponse cannot be\n  // the error type. If it were the error, the function\n  // would have returned. You can verify this by\n  // hovering over response below.\n\n  if (response.version === 0) {\n    console.log(response.msg);\n  } else if (response.version === 1) {\n    console.log(response.status, response.message);\n  }\n};\n\n</pre></code>\n// You're better off using a switch statement instead of\n if statements because you can make assurances that all\n parts of the union are checked. There is a good pattern\n for this using the never type in the handbook:\n\n https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\n","redirectHref":"/play/?#example/discriminate-types"}},"staticQueryHashes":[]}