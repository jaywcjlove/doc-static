{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/type-primitives/built-in-utility-types.ts.html","result":{"pageContext":{"name":"Built-in Utility Types","title":"Built-in Utility Types","lang":"en","html":"\n When a particular type feels like it's useful in most\n codebases, they are added into TypeScript and become\n available for anyone which means you can consistently\n rely on their availability\n\n Partial<Type>\n\n Takes a type and converts all of its properties\n to optional ones.\n\n<code><pre>\ninterface Sticker {\n  id: number;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  submitter: undefined | string;\n}\n\ntype StickerUpdateParam = Partial<Sticker>;\n\n// Readonly<Type>\n\n// Takes an object and makes its properties read-only.\n\ntype StickerFromAPI = Readonly<Sticker>;\n\n// Record<KeysFrom, Type>\n\n</pre></code>\n// Creates a type which uses the list of properties from\n KeysFrom and gives them the value of Type.\n\n List which keys come from:\n<code><pre>\ntype NavigationPages = \"home\" | \"stickers\" | \"about\" | \"contact\";\n\n// The shape of the data for which each of ^ is needed:\ninterface PageInfo {\n  title: string;\n  url: string;\n  axTitle?: string;\n}\n\nconst navigationInfo: Record<NavigationPages, PageInfo> = {\n  home: { title: \"Home\", url: \"/\" },\n  about: { title: \"About\", url: \"/about\" },\n  contact: { title: \"Contact\", url: \"/contact\" },\n  stickers: { title: \"Stickers\", url: \"/stickers/all\" },\n};\n\n// Pick<Type, Keys>\n\n</pre></code>\n// Creates a type by picking the set of properties Keys\n from Type. Essentially an allow-list for extracting type\n information from a type.\n\n<code><pre>\ntype StickerSortPreview = Pick<Sticker, \"name\" | \"updatedAt\">;\n\n// Omit<Type, Keys>\n\n</pre></code>\n// Creates a type by removing the set of properties Keys\n from Type. Essentially a block-list for extracting type\n information from a type.\n\n<code><pre>\ntype StickerTimeMetadata = Omit<Sticker, \"name\">;\n\n// Exclude<Type, RemoveUnion>\n\n</pre></code>\n// Creates a type where any property in Type's properties\n which don't overlap with RemoveUnion.\n\n<code><pre>\ntype HomeNavigationPages = Exclude<NavigationPages, \"home\">;\n\n// Extract<Type, MatchUnion>\n\n</pre></code>\n// Creates a type where any property in Type's properties\n are included if they overlap with MatchUnion.\n\n<code><pre>\ntype DynamicPages = Extract<NavigationPages, \"home\" | \"stickers\">;\n\n// NonNullable<Type>\n\n</pre></code>\n// Creates a type by excluding null and undefined from a set\n of properties. Useful when you have a validation check.\n\n<code><pre>\ntype StickerLookupResult = Sticker | undefined | null;\ntype ValidatedResult = NonNullable<StickerLookupResult>;\n\n// ReturnType<Type>\n\n// Extracts the return value from a Type.\n\ndeclare function getStickerByID(id: number): Promise<StickerLookupResult>;\ntype StickerResponse = ReturnType<typeof getStickerByID>;\n\n// InstanceType<Type>\n\n</pre></code>\n// Creates a type which is an instance of a class, or object\n with a constructor function.\n\n<code><pre>\nclass StickerCollection {\n  stickers: Sticker[];\n}\n\ntype CollectionItem = InstanceType<typeof StickerCollection>;\n\n// Required<Type>\n\n</pre></code>\n// Creates a type which converts all optional properties\n to required ones.\n\n<code><pre>\ntype AccessiblePageInfo = Required<PageInfo>;\n\n// ThisType<Type>\n\n</pre></code>\n// Unlike other types, ThisType does not return a new\n type but instead manipulates the definition of this\n inside a function. You can only use ThisType when you\n have noImplicitThis turned on in your TSConfig.\n\n https://www.typescriptlang.org/docs/handbook/utility-types.html\n","redirectHref":"/play/?strictNullChecks=true#example/built-in-utility-types"}},"staticQueryHashes":[]}