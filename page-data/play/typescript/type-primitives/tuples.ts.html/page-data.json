{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/type-primitives/tuples.ts.html","result":{"pageContext":{"name":"Tuples","title":"Tuples","lang":"en","html":" Typically an array contains zero to many objects of a\n single type. TypeScript has special analysis around\n arrays which contain multiple types, and where the order\n in which they are indexed is important.\n\n These are called tuples. Think of them as a way to\n connect some data, but with less syntax than keyed objects.\n\n You can create a tuple using JavaScript's array syntax:\n\n<code><pre>\nconst failingResponse = [\"Not Found\", 404];\n\n// but you will need to declare its type as a tuple.\n\nconst passingResponse: [string, number] = [\"{}\", 200];\n\n</pre></code>\n// If you hover over the two variable names you can see the\n difference between an array ( (string | number)[] ) and\n the tuple ( [string, number] ).\n\n As an array, the order is not important so an item at\n any index could be either a string or a number. In the\n tuple the order and length are guaranteed.\n\n<code><pre>\nif (passingResponse[1] === 200) {\n  const localInfo = JSON.parse(passingResponse[0]);\n  console.log(localInfo);\n}\n\n</pre></code>\n// This means TypeScript will provide the correct types at\n the right index, and even raise an error if you try to\n access an object at an un-declared index.\n\n<code><pre>\npassingResponse[2];\n\n</pre></code>\n// A tuple can feel like a good pattern for short bits of\n connected data or for fixtures.\n\n<code><pre>\ntype StaffAccount = [number, string, string, string?];\n\nconst staff: StaffAccount[] = [\n  [0, \"Adankwo\", \"adankwo.e@\"],\n  [1, \"Kanokwan\", \"kanokwan.s@\"],\n  [2, \"Aneurin\", \"aneurin.s@\", \"Supervisor\"],\n];\n\n</pre></code>\n// When you have a set of known types at the beginning of a\n tuple and then an unknown length, you can use the spread\n operator to indicate that it can have any length and the\n extra indexes will be of a particular type:\n\n<code><pre>\ntype PayStubs = [StaffAccount, ...number[]];\n\nconst payStubs: PayStubs[] = [\n  [staff[0], 250],\n  [staff[1], 250, 260],\n  [staff[0], 300, 300, 300],\n];\n\nconst monthOnePayments = payStubs[0][1] + payStubs[1][1] + payStubs[2][1];\nconst monthTwoPayments = payStubs[1][2] + payStubs[2][2];\nconst monthThreePayments = payStubs[2][2];\n\n</pre></code>\n// You can use tuples to describe functions which take\n an undefined number of parameters with types:\n\n<code><pre>\ndeclare function calculatePayForEmployee(id: number, ...args: [...number[]]): number;\n\ncalculatePayForEmployee(staff[0][0], payStubs[0][1]);\ncalculatePayForEmployee(staff[1][0], payStubs[1][1], payStubs[1][2]);\n\n</pre></code>\n//\n https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#tuples-in-rest-parameters-and-spread-expressions\n https://auth0.com/blog/typescript-3-exploring-tuples-the-unknown-type/\n","redirectHref":"/play/?#example/tuples"}},"staticQueryHashes":[]}