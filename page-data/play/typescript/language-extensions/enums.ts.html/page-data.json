{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/language-extensions/enums.ts.html","result":{"pageContext":{"name":"Enums","title":"Enums","lang":"en","html":" Enums are a feature added to JavaScript in TypeScript\n which makes it easier to handle named sets of constants.\n\n By default an enum is number based, starting at zero,\n and each option is assigned an increment by one. This is\n useful when the value is not important.\n\n<code><pre>\nenum CompassDirection {\n  North,\n  East,\n  South,\n  West,\n}\n\n</pre></code>\n// By annotating an enum option, you set the value;\n increments continue from that value:\n\n<code><pre>\nenum StatusCodes {\n  OK = 200,\n  BadRequest = 400,\n  Unauthorized,\n  PaymentRequired,\n  Forbidden,\n  NotFound,\n}\n\n// You reference an enum by using EnumName.Value\n\nconst startingDirection = CompassDirection.East;\nconst currentStatus = StatusCodes.OK;\n\n</pre></code>\n// Enums support accessing data in both directions from key\n to value, and value to key.\n\n<code><pre>\nconst okNumber = StatusCodes.OK;\nconst okNumberIndex = StatusCodes[\"OK\"];\nconst stringBadRequest = StatusCodes[400];\n\n</pre></code>\n// Enums can be different types, a string type is common.\n Using a string can make it easier to debug, because the\n value at runtime does not require you to look up the number.\n\n<code><pre>\nenum GamePadInput {\n  Up = \"UP\",\n  Down = \"DOWN\",\n  Left = \"LEFT\",\n  Right = \"RIGHT\",\n}\n\n</pre></code>\n// If you want to reduce the number of objects in your\n JavaScript runtime, you can create a const enum.\n\n A const enum's value is replaced by TypeScript during\n transpilation of your code, instead of being looked up\n via an object at runtime.\n\n<code><pre>\nconst enum MouseAction {\n  MouseDown,\n  MouseUpOutside,\n  MouseUpInside,\n}\n\nconst handleMouseAction = (action: MouseAction) => {\n  switch (action) {\n    case MouseAction.MouseDown:\n      console.log(\"Mouse Down\");\n      break;\n  }\n};\n\n</pre></code>\n// If you look at the transpiled JavaScript, you can see\n how the other enums exist as objects and functions,\n however MouseAction is not there.\n\n This is also true for the check against MouseAction.MouseDown\n inside the switch statement inside handleMouseAction.\n\n Enums can do more than this, you can read more in the\n TypeScript handbook:\n\n https://www.typescriptlang.org/docs/handbook/enums.html\n","redirectHref":"/play/?#example/enums"}},"staticQueryHashes":[]}