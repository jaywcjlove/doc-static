{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html","result":{"pageContext":{"name":"Types vs Interfaces","title":"Types vs Interfaces","lang":"en","html":" There are two main tools to declare the shape of an\n object: interfaces and type aliases.\n\n They are very similar, and for the most common cases\n act the same.\n\n<code><pre>\ntype BirdType = {\n  wings: 2;\n};\n\ninterface BirdInterface {\n  wings: 2;\n}\n\nconst bird1: BirdType = { wings: 2 };\nconst bird2: BirdInterface = { wings: 2 };\n\n</pre></code>\n// Because TypeScript is a structural type system,\n it's possible to intermix their use too.\n\n<code><pre>\nconst bird3: BirdInterface = bird1;\n\n</pre></code>\n// They both support extending other interfaces and types.\n Type aliases do this via intersection types, while\n interfaces have a keyword.\n\n<code><pre>\ntype Owl = { nocturnal: true } & BirdType;\ntype Robin = { nocturnal: false } & BirdInterface;\n\ninterface Peacock extends BirdType {\n  colourful: true;\n  flies: false;\n}\ninterface Chicken extends BirdInterface {\n  colourful: false;\n  flies: false;\n}\n\nlet owl: Owl = { wings: 2, nocturnal: true };\nlet chicken: Chicken = { wings: 2, colourful: false, flies: false };\n\n</pre></code>\n// That said, we recommend you use interfaces over type\n aliases. Specifically, because you will get better error\n messages. If you hover over the following errors, you can\n see how TypeScript can provide terser and more focused\n messages when working with interfaces like Chicken.\n\n<code><pre>\nowl = chicken;\nchicken = owl;\n\n</pre></code>\n// One major difference between type aliases vs interfaces\n are that interfaces are open and type aliases are closed.\n This means you can extend an interface by declaring it\n a second time.\n\n<code><pre>\ninterface Kitten {\n  purrs: boolean;\n}\n\ninterface Kitten {\n  colour: string;\n}\n\n</pre></code>\n// In the other case a type cannot be changed outside of\n its declaration.\n\n<code><pre>\ntype Puppy = {\n  color: string;\n};\n\ntype Puppy = {\n  toys: number;\n};\n\n</pre></code>\n// Depending on your goals, this difference could be a\n positive or a negative. However for publicly exposed\n types, it's a better call to make them an interface.\n\n One of the best resources for seeing all of the edge\n cases around types vs interfaces, this stack overflow\n thread is a good place to start:\n\n https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/52682220#52682220\n","redirectHref":"/play/?#example/types-vs-interfaces"}},"staticQueryHashes":[]}