{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/language-extensions/nominal-typing.ts.html","result":{"pageContext":{"name":"Nominal Typing","title":"Nominal Typing","lang":"en","html":" A nominal type system means that each type is unique\n and even if types have the same data you cannot assign\n across types.\n\n TypeScript's type system is structural, which means\n if the type is shaped like a duck, it's a duck. If a\n goose has all the same attributes as a duck, then it also\n is a duck. You can learn more here: example:structural-typing\n\n This can have drawbacks, for example there are cases\n where a string or number can have special context and you\n don't want to ever make the values transferrable. For\n example:\n\n -  User Input Strings (unsafe)\n -  Translation Strings\n -  User Identification Numbers\n -  Access Tokens\n\n We can get most of the value from a nominal type\n system with a little bit of extra code.\n\n We're going to use an intersectional type, with a unique\n constraint in the form of a property called __brand (this\n is convention) which makes it impossible to assign a\n normal string to a ValidatedInputString.\n\n<code><pre>\ntype ValidatedInputString = string & { __brand: \"User Input Post Validation\" };\n\n</pre></code>\n// We will use a function to transform a string to\n a ValidatedInputString - but the point worth noting\n is that we're just _telling_ TypeScript that it's true.\n\n<code><pre>\nconst validateUserInput = (input: string) => {\n  const simpleValidatedInput = input.replace(/\\</g, \"â‰¤\");\n  return simpleValidatedInput as ValidatedInputString;\n};\n\n</pre></code>\n// Now we can create functions which will only accept\n our new nominal type, and not the general string type.\n\n<code><pre>\nconst printName = (name: ValidatedInputString) => {\n  console.log(name);\n};\n\n</pre></code>\n// For example, here's some unsafe input from a user, going\n through the validator and then being allowed to be printed:\n\n<code><pre>\nconst input = \"\\n<script>alert('bobby tables')</script>\";\nconst validatedInput = validateUserInput(input);\nprintName(validatedInput);\n\n</pre></code>\n// On the other hand, passing the un-validated string to\n printName will raise a compiler error:\n\n<code><pre>\nprintName(input);\n\n</pre></code>\n// You can read a comprehensive overview of the\n different ways to create nominal types, and their\n trade-offs in this 400 comment long GitHub issue:\n\n https://github.com/Microsoft/TypeScript/issues/202\n\n and this post is a great summary:\n\n https://michalzalecki.com/nominal-typing-in-typescript/\n","redirectHref":"/play/?#example/nominal-typing"}},"staticQueryHashes":[]}