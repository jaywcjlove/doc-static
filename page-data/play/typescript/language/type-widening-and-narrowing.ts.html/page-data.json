{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/language/type-widening-and-narrowing.ts.html","result":{"pageContext":{"name":"Type Widening and Narrowing","title":"Type Widening and Narrowing","lang":"en","html":" It might be easiest to start of the discussion of\n widening and narrowing with an example:\n\n<code><pre>\nconst welcomeString = \"Hello There\";\nlet replyString = \"Hey\";\n\n</pre></code>\n// Aside from the text differences of the strings, welcomeString\n is a const (which means the value will never change)\n and replyString is a let (which means it can change).\n\n If you hover over both variables, you get very different\n type information from TypeScript:\n\n   const welcomeString: \"Hello There\"\n\n   let replyString: string\n\n TypeScript has inferred the type of welcomeString to be\n the literal string \"Hello There\", whereas replyString\n is general string.\n\n This is because a let needs to have a wider type, you\n could set replyString to be any other string - which means\n it has a wider set of possibilities.\n\n<code><pre>\nreplyString = \"Hi :wave:\";\n\n</pre></code>\n// If replyString had the string literal type \"Hey\" - then\n you could never change the value because it could only\n change to \"Hey\" again.\n\n Widening and Narrowing types is about expanding and reducing\n the possibilities which a type could represent.\n\n An example of type narrowing is working with unions, the\n example on code flow analysis is almost entirely based on\n narrowing: example:code-flow\n\n Type narrowing is what powers the strict mode of TypeScript\n via the nullability checks. With strict mode turned off,\n markers for nullability like undefined and null are ignored\n in a union.\n\n<code><pre>\ndeclare const quantumString: string | undefined;\n// This will fail in strict mode only\nquantumString.length;\n\n</pre></code>\n// In strict mode the onus is on the code author to ensure\n that the type has been narrowed to the non-null type.\n Usually this is as simple as an if check:\n\n<code><pre>\nif (quantumString) {\n  quantumString.length;\n}\n\n</pre></code>\n// In strict mode the type quantumString has two representations.\n Inside the if, the type was narrowed to just string.\n\n You can see more examples of narrowing in:\n\n example:union-and-intersection-types\n example:discriminate-types\n\n And even more resources on the web:\n\n https://mariusschulz.com/blog/literal-type-widening-in-typescript\n https://sandersn.github.io/manual/Widening-and-Narrowing-in-Typescript.html\n","redirectHref":"/play/?#example/type-widening-and-narrowing"}},"staticQueryHashes":[]}