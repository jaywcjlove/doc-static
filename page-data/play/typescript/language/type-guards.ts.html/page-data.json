{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/language/type-guards.ts.html","result":{"pageContext":{"name":"Type Guards","title":"Type Guards","lang":"en","html":" Type Guarding is the term where you influence the code\n flow analysis via code. TypeScript uses existing JavaScript\n behavior which validates your objects at runtime to influence\n the code flow. This example assumes you've read example:code-flow\n\n To run through these examples, we'll create some classes,\n here's a system for handling internet or telephone orders.\n\n<code><pre>\ninterface Order {\n  address: string;\n}\ninterface TelephoneOrder extends Order {\n  callerNumber: string;\n}\ninterface InternetOrder extends Order {\n  email: string;\n}\n\n// Then a type which could be one of the two Order subtypes or undefined\ntype PossibleOrders = TelephoneOrder | InternetOrder | undefined;\n\n// And a function which returns a PossibleOrder\ndeclare function getOrder(): PossibleOrders;\nconst possibleOrder = getOrder();\n\n</pre></code>\n// We can use the \"in\" operator to check whether a particular\n key is on the object to narrow the union. (\"in\" is a JavaScript\n operator for testing object keys.)\n\n<code><pre>\nif (\"email\" in possibleOrder) {\n  const mustBeInternetOrder = possibleOrder;\n}\n\n</pre></code>\n// You can use the JavaScript \"instanceof\" operator if you\n have a class which conforms to the interface:\n\n<code><pre>\nclass TelephoneOrderClass {\n  address: string;\n  callerNumber: string;\n}\n\nif (possibleOrder instanceof TelephoneOrderClass) {\n  const mustBeTelephoneOrder = possibleOrder;\n}\n\n</pre></code>\n// You can use the JavaScript \"typeof\" operator to\n narrow your union. This only works with primitives\n inside JavaScript (like strings, objects, numbers).\n\n<code><pre>\nif (typeof possibleOrder === \"undefined\") {\n  const definitelyNotAnOder = possibleOrder;\n}\n\n</pre></code>\n// You can see a full list of possible typeof values\n here: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/typeof\n\n Using JavaScript operators can only get you so far. When\n you want to check your own object types you can use\n type predicate functions.\n\n A type predicate function is a function where the return\n type offers information to the code flow analysis when\n the function returns true.\n\n Using the possible order, we can use two type guards\n to declare which type the possibleOrder is:\n\n<code><pre>\nfunction isAnInternetOrder(order: PossibleOrders): order is InternetOrder {\n  return order && \"email\" in order;\n}\n\nfunction isATelephoneOrder(order: PossibleOrders): order is TelephoneOrder {\n  return order && \"calledNumber\" in order;\n}\n\n</pre></code>\n// Now we can use these functions in if statements to narrow\n down the type which possibleOrder is inside the if:\n\n<code><pre>\nif (isAnInternetOrder(possibleOrder)) {\n  console.log(\"Order received via email:\", possibleOrder.email);\n}\n\nif (isATelephoneOrder(possibleOrder)) {\n  console.log(\"Order received via phone:\", possibleOrder.callerNumber);\n}\n\n</pre></code>\n// You can read more on code flow analysis here:\n\n  - example:code-flow\n  - example:type-guards\n  - example:discriminate-types\n","redirectHref":"/play/?#example/type-guards"}},"staticQueryHashes":[]}