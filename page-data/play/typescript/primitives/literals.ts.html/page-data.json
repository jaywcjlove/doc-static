{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/primitives/literals.ts.html","result":{"pageContext":{"name":"Literals","title":"Literals","lang":"en","html":" TypeScript has some fun special cases for literals in\n source code.\n\n In part, a lot of the support is covered in type widening\n and narrowing ( example:type-widening-narrowing ) and it's\n worth covering that first.\n\n A literal is a more concrete subtype of a collective type.\n What this means is that \"Hello World\" is a string, but a\n string is not \"Hello World\" inside the type system.\n\n<code><pre>\nconst helloWorld = \"Hello World\";\nlet hiWorld = \"Hi World\"; // this is a string because it is let\n\n// This function takes all strings\ndeclare function allowsAnyString(arg: string);\nallowsAnyString(helloWorld);\nallowsAnyString(hiWorld);\n\n// This function only accepts the string literal \"Hello World\"\ndeclare function allowsOnlyHello(arg: \"Hello World\");\nallowsOnlyHello(helloWorld);\nallowsOnlyHello(hiWorld);\n\n</pre></code>\n// This lets you declare APIs which use unions to say it\n only accepts a particular literal:\n\n<code><pre>\ndeclare function allowsFirstFiveNumbers(arg: 1 | 2 | 3 | 4 | 5);\nallowsFirstFiveNumbers(1);\nallowsFirstFiveNumbers(10);\n\nlet potentiallyAnyNumber = 3;\nallowsFirstFiveNumbers(potentiallyAnyNumber);\n\n// At first glance, this rule isn't applied to complex objects.\n\nconst myUser = {\n  name: \"Sabrina\",\n};\n\n</pre></code>\n// See how it transforms `name: \"Sabrina\"` to `name: string`\n even though it is defined as a constant. This is because\n the name can still change any time:\n\n<code><pre>\nmyUser.name = \"Cynthia\";\n\n</pre></code>\n// Because myUser's name property can change, TypeScript\n cannot use the literal version in the type system. There\n is a feature which will allow you to do this however.\n\n<code><pre>\nconst myUnchangingUser = {\n  name: \"Fatma\",\n} as const;\n\n</pre></code>\n// When \"as const\" is applied to the object, then it becomes\n a object literal which doesn't change instead of a\n mutable object which can.\n\n<code><pre>\nmyUnchangingUser.name = \"Ra√Æssa\";\n\n</pre></code>\n// \"as const\" is a great tool for fixtured data, and places\n where you treat code as literals inline. \"as const\" also\n works with arrays:\n\n<code><pre>\nconst exampleUsers = [{ name: \"Brian\" }, { name: \"Fahrooq\" }] as const;\n","redirectHref":"/play/?#example/literals"}},"staticQueryHashes":[]}