{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/primitives/any.ts.html","result":{"pageContext":{"name":"Any","title":"Any","lang":"en","html":" Any is the TypeScript escape clause. You can use any to\n either declare a section of your code to be dynamic and\n JavaScript like, or to work around limitations in the\n type system.\n\n A good case for any is JSON parsing:\n\n<code><pre>\nconst myObject = JSON.parse(\"{}\");\n\n</pre></code>\n// Any declares to TypeScript to trust your code as being\n safe because you know more about it. Even if that is\n not strictly true. For example, this code would crash:\n\n<code><pre>\nmyObject.x.y.z;\n\n</pre></code>\n// Using an any gives you the ability to write code closer to\n original JavaScript with the trade-off of type safety.\n\n any is much like a 'type wildcard' which you can replace\n with any type (except never) to make one type assignable\n to the other.\n\n<code><pre>\ndeclare function debug(value: any): void;\n\ndebug(\"a string\");\ndebug(23);\ndebug({ color: \"blue\" });\n\n</pre></code>\n// Each call to debug is allowed because you could replace the\n any with the type of the argument to match.\n\n TypeScript will take into account the position of the\n anys in different forms, for example with these tuples\n for the function argument.\n\n<code><pre>\ndeclare function swap(x: [number, string]): [string, number];\n\ndeclare const pair: [any, any];\nswap(pair);\n\n</pre></code>\n// The call to swap is allowed because the argument can be\n matched by replacing the first any in pair with number\n and the second `any` with string.\n\n If tuples are new to you, see: example:tuples\n\n Unknown is a sibling type to any, if any is about saying\n \"I know what's best\", then unknown is a way to say \"I'm\n not sure what is best, so you need to tell TS the type\"\n example:unknown-and-never\n","redirectHref":"/play/?#example/any"}},"staticQueryHashes":[]}