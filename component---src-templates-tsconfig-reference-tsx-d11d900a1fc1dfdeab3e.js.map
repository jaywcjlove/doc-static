{"version":3,"sources":["webpack:///./src/templates/tsconfigReference.tsx","webpack:///../shiki-twoslash/dist/dom.js"],"names":["TSConfigReferenceTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","useEffect","subnavLinks","document","querySelectorAll","forEach","link","addEventListener","event","preventDefault","querySelector","target","scrollIntoView","behavior","block","updateSidebar","currentPossibleAnchor","fromTop","window","scrollY","section","hash","offsetTop","classList","add","remove","passive","capture","setupTwoslashHovers","removeEventListener","title","description","lang","pageContext","locale","className","dangerouslySetInnerHTML","__html","html","console","log","JSON","stringify","pageQuery","exports","__esModule","resetHover","globalPopover","getElementById","style","display","hover","hovered","nodeName","element","bodyRect","elemRect","message","getAttribute","position","body","getBoundingClientRect","top","left","tooltip","createElement","id","appendChild","txt","innerHTML","textContent","value","rootRect","getRootRect","toLowerCase","parentElement","relativeLeft","x","maxWidth","width","blocks","code"],"mappings":"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","file":"component---src-templates-tsconfig-reference-tsx-d11d900a1fc1dfdeab3e.js","sourcesContent":["import React, { useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./tsconfig.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Props = { pageContext: any, data: GatsbyTypes.TSConfigReferenceTemplateQuery, path: string }\n\nconst TSConfigReferenceTemplateComponent = (props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    // Overrides the anchor behavior to smooth scroll instead\n    // Came from https://css-tricks.com/sticky-smooth-active-nav/\n    const subnavLinks = document.querySelectorAll<HTMLAnchorElement>(\".tsconfig nav li a\");\n\n    subnavLinks.forEach(link => {\n      link.addEventListener(\"click\", event => {\n        event.preventDefault();\n\n        let target = document.querySelector(event.target![\"hash\"]);\n        target.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n      })\n    })\n\n    // Sets the current selection\n    const updateSidebar = () => {\n      const fromTop = window.scrollY;\n      let currentPossibleAnchor: HTMLAnchorElement | undefined\n\n      // Scroll down to find the highest anchor on the screen\n      subnavLinks.forEach(link => {\n        const section = document.querySelector<HTMLDivElement>(link.hash);\n        if (!section) { return }\n        const isBelow = section.offsetTop - 100 <= fromTop\n        if (isBelow) currentPossibleAnchor = link\n      });\n\n      // Then set the active tag\n      subnavLinks.forEach(link => {\n        if (link === currentPossibleAnchor) {\n          link.classList.add(\"current\");\n        } else {\n          link.classList.remove(\"current\");\n        }\n      })\n    }\n\n    // Handles setting the scroll \n    window.addEventListener(\"scroll\", updateSidebar, { passive: true, capture: true });\n    updateSidebar()\n    setupTwoslashHovers()\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateSidebar)\n    }\n  }, [])\n\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n      <div className=\"tsconfig raised main-content-block markdown\">\n        <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n      </div>\n    </Layout>\n  )\n}\n\n\nexport const pageQuery = graphql`\n  query TSConfigReferenceTemplate($tsconfigMDPath: String!) {\n\n    markdownRemark(fileAbsolutePath: {eq: $tsconfigMDPath} ) {\n      id\n      html\n      frontmatter {\n        permalink\n      }\n    }\n  }\n`\n\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><TSConfigReferenceTemplateComponent {...props} /></Intl>\n","\"use strict\";\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0;\n// Gets the position of an element relative to the whole page\nvar getAbsoluteElementPos = function (element) {\n    var bodyRect = document.body.getBoundingClientRect();\n    var elemRect = element.getBoundingClientRect();\n    var top = elemRect.top - bodyRect.top;\n    var left = elemRect.left - bodyRect.left;\n    return {\n        top: top,\n        left: left\n    };\n};\n// Hide it\nvar resetHover = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (globalPopover)\n        globalPopover.style.display = \"none\";\n};\n// Get it\nvar findOrCreateTooltip = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (!globalPopover) {\n        globalPopover = document.createElement(\"div\");\n        globalPopover.style.position = \"absolute\";\n        globalPopover.id = \"twoslash-mouse-hover-info\";\n        document.body.appendChild(globalPopover);\n    }\n    return globalPopover;\n};\nvar getRootRect = function (element) {\n    if (element.nodeName.toLowerCase() === \"pre\") {\n        return element.getBoundingClientRect();\n    }\n    return getRootRect(element.parentElement);\n};\n// Gets triggered on the spans inside the codeblocks\nvar hover = function (event) {\n    var hovered = event.target;\n    if (hovered.nodeName !== \"DATA-LSP\")\n        return resetHover();\n    var message = hovered.getAttribute(\"lsp\");\n    var position = getAbsoluteElementPos(hovered);\n    // Create or re-use the current hover div\n    var tooltip = findOrCreateTooltip();\n    // Use a textarea to un-htmlencode for presenting to the user\n    var txt = document.createElement(\"textarea\");\n    txt.innerHTML = message;\n    tooltip.textContent = txt.value;\n    // Offset it a bit from the mouse and present it at an absolute position\n    var yOffset = 20;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = position.top + yOffset + \"px\";\n    tooltip.style.left = position.left + \"px\";\n    // limit the width of the tooltip to the outer container (pre)\n    var rootRect = getRootRect(hovered);\n    var relativeLeft = position.left - rootRect.x;\n    tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\nvar setupTwoslashHovers = function () {\n    var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n    blocks.forEach(function (code) {\n        code.addEventListener(\"mouseover\", hover);\n        code.addEventListener(\"mouseout\", resetHover);\n    });\n    return function () {\n        blocks.forEach(function (code) {\n            code.removeEventListener(\"mouseover\", hover);\n            code.removeEventListener(\"mouseout\", resetHover);\n        });\n    };\n};\nexports.setupTwoslashHovers = setupTwoslashHovers;\n"],"sourceRoot":""}