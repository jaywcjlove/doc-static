{"version":3,"sources":["webpack://typescriptlang-org/./src/components/devNav.tsx","webpack://typescriptlang-org/./src/pages/dev/typescript-vfs.tsx"],"names":["DevNav","props","isActive","str","active","toLowerCase","className","style","display","href","withPrefix","Index","title","description","lang","id","marginTop","Link","to","borderLeft","padding","tabIndex","locale"],"mappings":"qLAOaA,EAAS,SAACC,GACrB,IAAMC,EAAW,SAACC,GAAD,OACfF,EAAMG,QAAUH,EAAMG,OAAOC,gBAAkBF,EAAM,SAAW,IAElE,OAAO,uBAAKG,UAAU,wBACpB,sBAAIA,UAAU,OACZ,sBAAIA,UAAU,QAAO,8CACrB,sBAAIC,MAAO,CAAEC,QAAS,SACpB,qBAAGF,UAAWJ,EAAS,gBAAiBO,MAAMC,gBAAW,kBAAzD,iBAEF,0BACE,qBAAGJ,UAAWJ,EAAS,WAAYO,MAAMC,gBAAW,iBAApD,YAEF,0BACE,qBAAGJ,UAAWJ,EAAS,YAAaO,MAAMC,gBAAW,kBAArD,aAEF,0BACE,qBAAGJ,UAAWJ,EAAS,kBAAmBO,MAAMC,gBAAW,wBAA3D,mBAEF,0BACE,qBAAGJ,UAAWJ,EAAS,sBAAuBO,MAAMC,gBAAW,4BAA/D,uBAEF,0BACE,qBAAGJ,UAAWJ,EAAS,iBAAkBO,MAAMC,gBAAW,uBAA1D,sB,+FCpBFC,EAAyB,SAACV,GAC9B,OACE,gCACE,gBAAC,IAAD,CAAQW,MAAM,8BAA8BC,YAAY,2EAA2EC,KAAK,MACtI,uBAAKC,GAAG,OACN,gBAAC,IAAD,CAAQX,OAAO,mBACf,uBAAKE,UAAU,qCACb,uBAAKA,UAAU,qBACb,sBAAIC,MAAO,CAAES,UAAW,SAAxB,mCACA,sNAA6L,gBAAC,EAAAC,KAAD,CAAMC,GAAG,iBAAT,YAA7L,kBACA,sEACA,0BACE,iGACA,mEAA0C,oCAA1C,KAA6D,sCAA7D,OAAoF,sCACpF,8GAEF,sDAA6B,qBAAGT,KAAK,oFAAR,2BAG/B,uBAAKH,UAAU,cAAcC,MAAO,CAAEY,WAAY,iBAAkBC,QAAS,SAC3E,qEACA,uBAAKC,SAAU,GAAG,wBAAMf,UAAU,aAAhB,kPASlB,+EACA,uBAAKe,SAAU,GAAG,wBAAMf,UAAU,aAAhB,+qBA8BhC,mBAAgBL,GAAD,OAAkB,gBAAC,IAAD,CAAMqB,OAAO,MAAK,gBAACX,EAAUV","file":"component---src-pages-dev-typescript-vfs-tsx-802f13aedd83d80f3f95.js","sourcesContent":["import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\n\ninterface DevNavProps {\n  active?: string\n}\n\nexport const DevNav = (props: DevNavProps) => {\n  const isActive = (str) =>\n    props.active && props.active.toLowerCase() === str ? \"active\" : \"\"\n\n  return <nav className=\"navbar-sub dev-tools\">\n    <ul className=\"nav\">\n      <li className=\"name\"><h3>Developer Tools</h3></li>\n      <li style={{ display: \"none\" }}>\n        <a className={isActive(\"compiler api\")} href={withPrefix(\"/dev/compiler\")}>Compiler API</a>\n      </li>\n      <li>\n        <a className={isActive(\"sandbox\")} href={withPrefix(\"/dev/sandbox\")}>Sandbox</a>\n      </li>\n      <li>\n        <a className={isActive(\"twoslash\")} href={withPrefix(\"/dev/twoslash\")}>Twoslash</a>\n      </li>\n      <li>\n        <a className={isActive(\"typescript vfs\")} href={withPrefix(\"/dev/typescript-vfs\")}>TypeScript VFS</a>\n      </li>\n      <li>\n        <a className={isActive(\"playground plugins\")} href={withPrefix(\"/dev/playground-plugins\")}>Playground Plugins</a>\n      </li>\n      <li>\n        <a className={isActive(\"bug workbench\")} href={withPrefix(\"/dev/bug-workbench\")}>Bug Workbench</a>\n      </li>\n    </ul>\n  </nav >\n}\n","import * as React from \"react\"\nimport { Layout } from \"../../components/layout\"\nimport { withPrefix, graphql, Link } from \"gatsby\"\n\nimport \"./dev.scss\"\nimport { Intl } from \"../../components/Intl\"\nimport { DevNav } from \"../../components/devNav\"\n\ntype Props = {}\n\nconst Index: React.FC<Props> = (props) => {\n  return (\n    <>\n      <Layout title=\"Developers - TypeScript VFS\" description=\"Run TypeScript in the browser, or anywhere - using a virtual file-system\" lang=\"en\">\n        <div id=\"dev\">\n          <DevNav active=\"typescript vfs\" />\n          <div className=\"raised content main-content-block\">\n            <div className=\"split-fivehundred\">\n              <h1 style={{ marginTop: \"20px\" }}>Easy access to the compiler API</h1>\n              <p>TypeScript VFS lets you create a self-contained TypeScript environment entirely under your control. This library is used to power the Playground, and provides the underlying tooling for <Link to=\"/dev/twoslash\">twoslash</Link> code samples.</p>\n              <p>There are 3 main uses for TypeScript VFS:</p>\n              <ul>\n                <li>Creating a TypeScript Program as an entry-point to the compiler API</li>\n                <li>Running TypeScript to emit files like <code>*.js</code>, <code>*.d.ts</code> or <code>*.map</code></li>\n                <li>Using TypeScript's language service to make the same calls an editor would make</li>\n              </ul>\n              <p>You can learn more in the <a href=\"https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescript-vfs/\">TypeScript VFS README</a></p>\n            </div>\n\n            <div className=\"fivehundred\" style={{ borderLeft: \"1px solid gray\", padding: \"20px\" }}>\n              <h3>Setup with TypeScript from node_modules</h3>\n              <pre tabIndex={0}><code className=\"html-code\">{`import ts from 'typescript'\nimport tsvfs from '@typescript/vfs'\n\nconst fsMap = tsvfs.createDefaultMapFromNodeModules({ target: ts.ScriptTarget.ES2015 })\nfsMap.set('index.ts', 'console.log(\"Hello World\")')\n\n// ....\n              `}</code></pre>\n\n              <h3>Use the TypeScript CDN to get your lib.d.ts files</h3>\n              <pre tabIndex={0}><code className=\"html-code\">{`import ts from 'typescript'\nimport tsvfs from '@typescript/vfs'\n\nconst fsMap = await tsvfs.createDefaultMapFromCDN(compilerOptions, ts.version, true, ts)\nfsMap.set('index.ts', 'console.log(\"Hello World\")')\n\nconst system = tsvfs.createSystem(fsMap)\nconst host = tsvfs.createVirtualCompilerHost(system, compilerOptions, ts)\n\nconst program = ts.createProgram({\n  rootNames: [...fsMap.keys()],\n  options: compilerOptions,\n  host: host.compilerHost,\n})\n\n// This will update the fsMap with new files\n// for the .d.ts and .js files\nprogram.emit()\n\n// Now I can look at the AST for the .ts file too\nconst index = program.getSourceFile('index.ts')\n              `}</code></pre>\n            </div>\n          </div>\n        </div>\n      </Layout >\n    </>\n  )\n}\n\nexport default (props: Props) => <Intl locale=\"en\"><Index {...props} /></Intl>\n"],"sourceRoot":""}